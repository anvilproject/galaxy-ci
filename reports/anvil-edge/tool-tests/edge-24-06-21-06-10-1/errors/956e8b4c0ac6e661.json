{
    "model_class": "Job",
    "id": "956e8b4c0ac6e661",
    "state": "error",
    "exit_code": null,
    "update_time": "2024-06-21T07:12:14.964668",
    "create_time": "2024-06-21T07:11:39.024376",
    "galaxy_version": "23.1",
    "command_version": null,
    "copied_from_job_id": null,
    "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0",
    "history_id": "cd2218f4700ea0f6",
    "external_id": "gxy-wbnjs",
    "command_line": "mkdir ./index && mkdir ./output && salmon index -i ./index --kmerLen '31' --gencode --transcripts '/galaxy/server/database/objects/2/7/a/dataset_27a33a88-974e-4c44-81a2-fe264a4edd9c.dat' && cp '/galaxy/server/database/objects/a/a/e/dataset_aaec1c6a-8646-4b7d-ad5a-2093bf3ae83f.dat' ./mate1.fastq.gz && gunzip ./mate1.fastq.gz && cp '/galaxy/server/database/objects/4/c/2/dataset_4c20e690-fe4c-4d1b-a6ef-cf04bb2a7a51.dat' ./mate2.fastq.gz && gunzip ./mate2.fastq.gz  && ln -s '/galaxy/server/database/objects/0/b/f/dataset_0bf2b0cc-5996-4da5-97cf-d99cc708f5b9.dat' ./alevinmap.tsv && salmon alevin -l A -i ./index -1 ./mate1.fastq -2 ./mate2.fastq -o ./output -p \"${GALAXY_SLOTS:-4}\" --chromium --tgMap ./alevinmap.tsv --keepCBFraction '1.0'   --dumpFeatures  --dumpMtx --freqThreshold '5'  && gunzip output/alevin/quants_mat.mtx.gz  && gunzip output/alevin/quants_tier_mat.gz  && gunzip output/aux_info/fld.gz && gunzip output/aux_info/observed_bias.gz && gunzip output/aux_info/observed_bias_3p.gz",
    "traceback": "Traceback (most recent call last):\n  File \"/galaxy/server/lib/galaxy/jobs/runners/__init__.py\", line 649, in _finish_or_resubmit_job\n    job_wrapper.finish(\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1961, in finish\n    self._finish_dataset(output_name, dataset, job, context, final_job_state, remote_metadata_directory)\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1778, in _finish_dataset\n    dataset.datatype.set_meta(dataset, overwrite=False)\n  File \"/galaxy/server/lib/galaxy/datatypes/tabular.py\", line 1689, in set_meta\n    for line in dataset_fh:\n  File \"/usr/local/lib/python3.10/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 1: invalid start byte\n",
    "params": {
        "__input_ext": "\"input\"",
        "dbkey": "\"?\"",
        "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",
        "optional": "{\"dumpBfh\": false, \"dumpFeatures\": true, \"dumpMtx\": true, \"dumpUmiGraph\": false, \"expectCells\": \"\", \"forceCells\": \"\", \"freqThreshold\": \"5\", \"keepCBFraction\": \"1.0\", \"lowRegionMinNumBarcodes\": \"\", \"maxNumBarcodes\": \"\", \"minScoreFraction\": \"\", \"mrna\": null, \"noDedup\": false, \"numCellBootstraps\": \"\", \"rrna\": null, \"whitelist\": null}",
        "allout": "false",
        "protocol": "\"--chromium\"",
        "pairstraight": "{\"__current_case__\": 0, \"file1\": {\"values\": [{\"id\": 307, \"src\": \"hda\"}]}, \"file2\": {\"values\": [{\"id\": 308, \"src\": \"hda\"}]}, \"libtype\": {\"__current_case__\": 0, \"strandedness\": \"A\"}, \"readselect\": \"paired\"}",
        "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 306, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}"
    },
    "inputs": {
        "tgmap": {
            "id": "8741a59230d2c66a",
            "src": "hda",
            "uuid": "0bf2b0cc-5996-4da5-97cf-d99cc708f5b9"
        },
        "pairstraight|file2": {
            "id": "db847d0647a5f0e6",
            "src": "hda",
            "uuid": "4c20e690-fe4c-4d1b-a6ef-cf04bb2a7a51"
        },
        "pairstraight|file1": {
            "id": "b16578fcfca4e5be",
            "src": "hda",
            "uuid": "aaec1c6a-8646-4b7d-ad5a-2093bf3ae83f"
        },
        "refTranscriptSource|s_index|fasta": {
            "id": "b22d5e43e5e7fc5c",
            "src": "hda",
            "uuid": "27a33a88-974e-4c44-81a2-fe264a4edd9c"
        }
    },
    "outputs": {
        "flenDist_txt": {
            "id": "38bf68e0a2938e4a",
            "src": "hda",
            "uuid": "76fa6203-e748-48bd-b300-9b30412f278c"
        },
        "observed_bias_3p": {
            "id": "f6a0c4c3b8cdb11b",
            "src": "hda",
            "uuid": "e70fa5c8-63c6-42fe-8891-b535053ed605"
        },
        "observed_bias": {
            "id": "07b8a7f278c84546",
            "src": "hda",
            "uuid": "ac2f3cfa-4f69-4078-853d-02dd2829bd7a"
        },
        "expected_bias": {
            "id": "11307a25c407d637",
            "src": "hda",
            "uuid": "23478e07-e724-4a18-a023-1f64ede39ff0"
        },
        "whitelist_txt": {
            "id": "bf0b27507569d206",
            "src": "hda",
            "uuid": "7d8e429a-0914-4511-9f98-534fe08be012"
        },
        "featureDump_txt": {
            "id": "92ebf3b947e4a129",
            "src": "hda",
            "uuid": "962c22e5-b2f4-4803-b262-e37d7dcbace7"
        },
        "quants_tier_mat": {
            "id": "e8fad66d704a49b1",
            "src": "hda",
            "uuid": "4e36649c-0bf6-40f8-a265-36c4d2798287"
        },
        "quants_mat_rows_txt": {
            "id": "8245e4ac8059e5f0",
            "src": "hda",
            "uuid": "d3a89e88-8b12-4657-adab-b3a3299e5345"
        },
        "quants_mat_cols_txt": {
            "id": "49c19fc95173c8b3",
            "src": "hda",
            "uuid": "946f0971-9710-4abf-95da-6359194f79c7"
        },
        "raw_cb_frequency_txt": {
            "id": "d37eef4bfe993ae2",
            "src": "hda",
            "uuid": "cc37b476-794b-4e6c-8837-5f96771b651b"
        },
        "quants_mat_mtx": {
            "id": "61669e25d711896a",
            "src": "hda",
            "uuid": "a2cef0e3-a73f-4609-a962-354f64cc603c"
        }
    },
    "output_collections": {},
    "tool_stdout": "",
    "tool_stderr": "",
    "job_stdout": null,
    "job_stderr": null,
    "stderr": "",
    "stdout": "",
    "job_messages": [],
    "dependencies": [],
    "user_email": "tests@fake.org",
    "job_metrics": []
}
