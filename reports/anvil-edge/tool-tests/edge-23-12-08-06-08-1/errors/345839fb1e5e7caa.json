{
    "model_class": "Job",
    "id": "345839fb1e5e7caa",
    "state": "error",
    "exit_code": null,
    "update_time": "2023-12-08T07:17:59.243769",
    "create_time": "2023-12-08T07:17:24.738223",
    "galaxy_version": "23.1",
    "command_version": "",
    "copied_from_job_id": null,
    "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0",
    "history_id": "60e846ec4c37ba19",
    "external_id": "gxy-q8jlx",
    "command_line": "mkdir ./index && mkdir ./output && salmon index -i ./index --kmerLen '31' --gencode --transcripts '/galaxy/server/database/objects/6/0/5/dataset_605a7a2c-485f-4ec1-a6fc-0da4369e3e80.dat' && cp '/galaxy/server/database/objects/8/a/0/dataset_8a08920c-a927-43cb-adf3-c8b5b6b7f2c6.dat' ./mate1.fastq.gz && gunzip ./mate1.fastq.gz && cp '/galaxy/server/database/objects/0/0/a/dataset_00a73cea-fc5e-4752-8967-30337ae548d8.dat' ./mate2.fastq.gz && gunzip ./mate2.fastq.gz  && ln -s '/galaxy/server/database/objects/d/4/3/dataset_d438cc9d-89c7-41aa-8067-7b5ee525a1da.dat' ./alevinmap.tsv && salmon alevin -l A -i ./index -1 ./mate1.fastq -2 ./mate2.fastq -o ./output -p \"${GALAXY_SLOTS:-4}\" --chromium --tgMap ./alevinmap.tsv --keepCBFraction '1.0'   --dumpFeatures  --dumpMtx --freqThreshold '5'  && gunzip output/alevin/quants_mat.mtx.gz  && gunzip output/alevin/quants_tier_mat.gz  && gunzip output/aux_info/fld.gz && gunzip output/aux_info/observed_bias.gz && gunzip output/aux_info/observed_bias_3p.gz",
    "traceback": "Traceback (most recent call last):\n  File \"/galaxy/server/lib/galaxy/jobs/runners/__init__.py\", line 649, in _finish_or_resubmit_job\n    job_wrapper.finish(\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1961, in finish\n    self._finish_dataset(output_name, dataset, job, context, final_job_state, remote_metadata_directory)\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1778, in _finish_dataset\n    dataset.datatype.set_meta(dataset, overwrite=False)\n  File \"/galaxy/server/lib/galaxy/datatypes/tabular.py\", line 1689, in set_meta\n    for line in dataset_fh:\n  File \"/usr/local/lib/python3.10/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 10: invalid start byte\n",
    "params": {
        "__input_ext": "\"input\"",
        "dbkey": "\"?\"",
        "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",
        "optional": "{\"dumpBfh\": false, \"dumpFeatures\": true, \"dumpMtx\": true, \"dumpUmiGraph\": false, \"expectCells\": \"\", \"forceCells\": \"\", \"freqThreshold\": \"5\", \"keepCBFraction\": \"1.0\", \"lowRegionMinNumBarcodes\": \"\", \"maxNumBarcodes\": \"\", \"minScoreFraction\": \"\", \"mrna\": null, \"noDedup\": false, \"numCellBootstraps\": \"\", \"rrna\": null, \"whitelist\": null}",
        "allout": "false",
        "protocol": "\"--chromium\"",
        "pairstraight": "{\"__current_case__\": 0, \"file1\": {\"values\": [{\"id\": 300, \"src\": \"hda\"}]}, \"file2\": {\"values\": [{\"id\": 301, \"src\": \"hda\"}]}, \"libtype\": {\"__current_case__\": 0, \"strandedness\": \"A\"}, \"readselect\": \"paired\"}",
        "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 299, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}"
    },
    "inputs": {
        "tgmap": {
            "id": "f287c152f878f5d4",
            "src": "hda",
            "uuid": "d438cc9d-89c7-41aa-8067-7b5ee525a1da"
        },
        "pairstraight|file2": {
            "id": "15e9f2c4f15b9d88",
            "src": "hda",
            "uuid": "00a73cea-fc5e-4752-8967-30337ae548d8"
        },
        "pairstraight|file1": {
            "id": "40efeace2ed028ef",
            "src": "hda",
            "uuid": "8a08920c-a927-43cb-adf3-c8b5b6b7f2c6"
        },
        "refTranscriptSource|s_index|fasta": {
            "id": "0e517fb2d919d391",
            "src": "hda",
            "uuid": "605a7a2c-485f-4ec1-a6fc-0da4369e3e80"
        }
    },
    "outputs": {
        "observed_bias_3p": {
            "id": "c74fc442be7e698c",
            "src": "hda",
            "uuid": "0b34293d-fcb3-41f2-aaf9-3727d73f5770"
        },
        "quants_tier_mat": {
            "id": "fe6bb1b46019d8cc",
            "src": "hda",
            "uuid": "89e0c440-daea-4674-8b83-4f77ddc97ab5"
        },
        "quants_mat_rows_txt": {
            "id": "f22cf32c6759aebc",
            "src": "hda",
            "uuid": "9c4566e9-7905-4ef7-a1d3-33a7f82f4de7"
        },
        "quants_mat_cols_txt": {
            "id": "853be6131408d1a4",
            "src": "hda",
            "uuid": "ca2755eb-5593-4163-8ed9-a529a8b30458"
        },
        "raw_cb_frequency_txt": {
            "id": "12cc81e779b0575c",
            "src": "hda",
            "uuid": "754dc1d0-b943-4447-b24d-6500e4ca0b24"
        },
        "quants_mat_mtx": {
            "id": "f2f1828735a0d660",
            "src": "hda",
            "uuid": "7dd1a2eb-55a6-4db3-b56f-c1c6cf777f00"
        },
        "flenDist_txt": {
            "id": "0c0bb30be5d4f1d6",
            "src": "hda",
            "uuid": "a5e882ec-9206-4b42-a2b1-22428851e1c0"
        },
        "observed_bias": {
            "id": "c9ee840b3a49d7b4",
            "src": "hda",
            "uuid": "7940d03e-0ddf-41b1-a755-b6100da60037"
        },
        "expected_bias": {
            "id": "dd30a88d086cd843",
            "src": "hda",
            "uuid": "5a2143c9-d2d7-4aa5-aa28-325015f3d3f3"
        },
        "whitelist_txt": {
            "id": "cff5c4550cb62141",
            "src": "hda",
            "uuid": "4d624a13-a597-49c4-8315-41160ebf3817"
        },
        "featureDump_txt": {
            "id": "e8a25d86a4cc2823",
            "src": "hda",
            "uuid": "1c0f6d71-e6ef-4b03-95a3-434283412b34"
        }
    },
    "output_collections": {},
    "tool_stdout": "",
    "tool_stderr": "",
    "job_stdout": null,
    "job_stderr": null,
    "stderr": "",
    "stdout": "",
    "job_messages": [],
    "dependencies": [],
    "user_email": "tests@fake.org",
    "job_metrics": []
}
