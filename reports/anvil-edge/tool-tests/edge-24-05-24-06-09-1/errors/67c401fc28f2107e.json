{
    "model_class": "Job",
    "id": "67c401fc28f2107e",
    "state": "error",
    "exit_code": null,
    "update_time": "2024-05-24T07:08:33.701424",
    "create_time": "2024-05-24T07:08:03.468656",
    "galaxy_version": "23.1",
    "command_version": "",
    "copied_from_job_id": null,
    "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0",
    "history_id": "c092f97c4ff85605",
    "external_id": "gxy-fr82t",
    "command_line": "mkdir ./index && mkdir ./output && salmon index -i ./index --kmerLen '31' --gencode --transcripts '/galaxy/server/database/objects/d/d/b/dataset_ddbe0a30-1781-4218-8d7a-8bd653e892e4.dat' && cp '/galaxy/server/database/objects/0/a/7/dataset_0a73790a-5dbc-451a-a5f4-689e6cfa5c80.dat' ./mate1.fastq.gz && gunzip ./mate1.fastq.gz && cp '/galaxy/server/database/objects/9/c/8/dataset_9c86974c-4a13-4d6c-8d10-ccf0139062ce.dat' ./mate2.fastq.gz && gunzip ./mate2.fastq.gz  && ln -s '/galaxy/server/database/objects/c/0/5/dataset_c055d303-625c-4fd0-9eae-f23c14ba93bf.dat' ./alevinmap.tsv && salmon alevin -l A -i ./index -1 ./mate1.fastq -2 ./mate2.fastq -o ./output -p \"${GALAXY_SLOTS:-4}\" --chromium --tgMap ./alevinmap.tsv --keepCBFraction '1.0'   --dumpFeatures  --dumpMtx --freqThreshold '5'  && gunzip output/alevin/quants_mat.mtx.gz  && gunzip output/alevin/quants_tier_mat.gz  && gunzip output/aux_info/fld.gz && gunzip output/aux_info/observed_bias.gz && gunzip output/aux_info/observed_bias_3p.gz",
    "traceback": "Traceback (most recent call last):\n  File \"/galaxy/server/lib/galaxy/jobs/runners/__init__.py\", line 649, in _finish_or_resubmit_job\n    job_wrapper.finish(\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1961, in finish\n    self._finish_dataset(output_name, dataset, job, context, final_job_state, remote_metadata_directory)\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1778, in _finish_dataset\n    dataset.datatype.set_meta(dataset, overwrite=False)\n  File \"/galaxy/server/lib/galaxy/datatypes/tabular.py\", line 1689, in set_meta\n    for line in dataset_fh:\n  File \"/usr/local/lib/python3.10/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 55: invalid start byte\n",
    "params": {
        "__input_ext": "\"input\"",
        "dbkey": "\"?\"",
        "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",
        "optional": "{\"dumpBfh\": false, \"dumpFeatures\": true, \"dumpMtx\": true, \"dumpUmiGraph\": false, \"expectCells\": \"\", \"forceCells\": \"\", \"freqThreshold\": \"5\", \"keepCBFraction\": \"1.0\", \"lowRegionMinNumBarcodes\": \"\", \"maxNumBarcodes\": \"\", \"minScoreFraction\": \"\", \"mrna\": null, \"noDedup\": false, \"numCellBootstraps\": \"\", \"rrna\": null, \"whitelist\": null}",
        "allout": "false",
        "protocol": "\"--chromium\"",
        "pairstraight": "{\"__current_case__\": 0, \"file1\": {\"values\": [{\"id\": 300, \"src\": \"hda\"}]}, \"file2\": {\"values\": [{\"id\": 301, \"src\": \"hda\"}]}, \"libtype\": {\"__current_case__\": 0, \"strandedness\": \"A\"}, \"readselect\": \"paired\"}",
        "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 299, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}"
    },
    "inputs": {
        "tgmap": {
            "id": "105e07d2494481b6",
            "src": "hda",
            "uuid": "c055d303-625c-4fd0-9eae-f23c14ba93bf"
        },
        "pairstraight|file2": {
            "id": "a353dc4c74f0ff2a",
            "src": "hda",
            "uuid": "9c86974c-4a13-4d6c-8d10-ccf0139062ce"
        },
        "pairstraight|file1": {
            "id": "e6d614b442d240d2",
            "src": "hda",
            "uuid": "0a73790a-5dbc-451a-a5f4-689e6cfa5c80"
        },
        "refTranscriptSource|s_index|fasta": {
            "id": "ccbc8e4c5a851539",
            "src": "hda",
            "uuid": "ddbe0a30-1781-4218-8d7a-8bd653e892e4"
        }
    },
    "outputs": {
        "quants_tier_mat": {
            "id": "70603c0b8ac6543c",
            "src": "hda",
            "uuid": "466de0d9-a828-4137-bb18-f77f2fdea812"
        },
        "quants_mat_mtx": {
            "id": "ac3f8af783588587",
            "src": "hda",
            "uuid": "5b905217-4389-4921-a1f6-12f54203c64c"
        },
        "raw_cb_frequency_txt": {
            "id": "785f51c22bb042e2",
            "src": "hda",
            "uuid": "853ac644-349e-41b9-8795-80a7e3ab89c0"
        },
        "quants_mat_cols_txt": {
            "id": "c93d70f9f333e2d9",
            "src": "hda",
            "uuid": "d1d080a3-8772-4c39-93d9-c19ee3e9d52f"
        },
        "quants_mat_rows_txt": {
            "id": "6b0ffbe02f044441",
            "src": "hda",
            "uuid": "020a20f2-4099-4cc8-b673-e9608e122fbe"
        },
        "featureDump_txt": {
            "id": "ee73367c1c35a7d5",
            "src": "hda",
            "uuid": "67439941-4c8c-44c9-bee3-88fd81f4098e"
        },
        "whitelist_txt": {
            "id": "a83009bd45d39663",
            "src": "hda",
            "uuid": "698c7752-0206-44c2-885a-3c314c320796"
        },
        "expected_bias": {
            "id": "64ff2e8803a39120",
            "src": "hda",
            "uuid": "0b19ef71-5edb-4ac4-8e6a-6457256f4b39"
        },
        "observed_bias": {
            "id": "87a32a9ae8535676",
            "src": "hda",
            "uuid": "473e4b1d-5437-4154-94fe-25ad0fc44ebe"
        },
        "observed_bias_3p": {
            "id": "83feb42b9617a215",
            "src": "hda",
            "uuid": "1b5b008d-e3d3-47f8-8d6a-553118da1f08"
        },
        "flenDist_txt": {
            "id": "bb09632f94d3d2a9",
            "src": "hda",
            "uuid": "9d3c090b-038e-48b4-b30d-081f034194d7"
        }
    },
    "output_collections": {},
    "tool_stdout": "",
    "tool_stderr": "",
    "job_stdout": null,
    "job_stderr": null,
    "stderr": "",
    "stdout": "",
    "job_messages": [],
    "dependencies": [],
    "user_email": "tests@fake.org",
    "job_metrics": []
}
