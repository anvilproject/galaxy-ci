<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Results (powered by Planemo)"
           tests="213"
           errors="40"
           failures="34"
           skip="0">
    
    <testcase classname="anndata_ops (Test #1)" name="0" time="0.2898447513580322">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 0, "time_seconds": 0.2898447513580322, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #1)" name="0" time="0.2980983257293701">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 0, "time_seconds": 0.2980983257293701, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #2)" name="1" time="0.14730262756347656">
        
            <error type="error" message="Input staging problem: Test input file (mnn.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (mnn.h5) cannot be found.", "status": "error", "test_index": 1, "time_seconds": 0.14730262756347656, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #2)" name="1" time="0.15224623680114746">
        
            <error type="error" message="Input staging problem: Test input file (mnn.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (mnn.h5) cannot be found.", "status": "error", "test_index": 1, "time_seconds": 0.15224623680114746, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #3)" name="2" time="0.14455080032348633">
        
            <error type="error" message="Input staging problem: Test input file (anndata_ops.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (anndata_ops.h5) cannot be found.", "status": "error", "test_index": 2, "time_seconds": 0.14455080032348633, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #3)" name="2" time="0.14520859718322754">
        
            <error type="error" message="Input staging problem: Test input file (anndata_ops.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (anndata_ops.h5) cannot be found.", "status": "error", "test_index": 2, "time_seconds": 0.14520859718322754, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #4)" name="3" time="0.1442704200744629">
        
            <error type="error" message="Input staging problem: Test input file (anndata_ops.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (anndata_ops.h5) cannot be found.", "status": "error", "test_index": 3, "time_seconds": 0.1442704200744629, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #4)" name="3" time="0.15347075462341309">
        
            <error type="error" message="Input staging problem: Test input file (anndata_ops.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (anndata_ops.h5) cannot be found.", "status": "error", "test_index": 3, "time_seconds": 0.15347075462341309, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #5)" name="4" time="0.15689969062805176">
        
            <error type="error" message="Input staging problem: Test input file (anndata_ops.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (anndata_ops.h5) cannot be found.", "status": "error", "test_index": 4, "time_seconds": 0.15689969062805176, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #5)" name="4" time="0.14748930931091309">
        
            <error type="error" message="Input staging problem: Test input file (anndata_ops.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (anndata_ops.h5) cannot be found.", "status": "error", "test_index": 4, "time_seconds": 0.14748930931091309, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #6)" name="5" time="0.15321111679077148">
        
            <error type="error" message="Input staging problem: Test input file (anndata_ops.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (anndata_ops.h5) cannot be found.", "status": "error", "test_index": 5, "time_seconds": 0.15321111679077148, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #6)" name="5" time="0.15363740921020508">
        
            <error type="error" message="Input staging problem: Test input file (anndata_ops.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (anndata_ops.h5) cannot be found.", "status": "error", "test_index": 5, "time_seconds": 0.15363740921020508, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #7)" name="6" time="0.1430041790008545">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 6, "time_seconds": 0.1430041790008545, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #7)" name="6" time="0.15183258056640625">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 6, "time_seconds": 0.15183258056640625, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #8)" name="7" time="0.14583945274353027">
        
            <error type="error" message="Input staging problem: Test input file (normalise_data.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (normalise_data.h5) cannot be found.", "status": "error", "test_index": 7, "time_seconds": 0.14583945274353027, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #8)" name="7" time="0.15001440048217773">
        
            <error type="error" message="Input staging problem: Test input file (normalise_data.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (normalise_data.h5) cannot be found.", "status": "error", "test_index": 7, "time_seconds": 0.15001440048217773, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #9)" name="8" time="0.1531510353088379">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 8, "time_seconds": 0.1531510353088379, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #9)" name="8" time="0.14647340774536133">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 8, "time_seconds": 0.14647340774536133, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #10)" name="9" time="0.14532089233398438">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 9, "time_seconds": 0.14532089233398438, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #10)" name="9" time="0.15445518493652344">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 9, "time_seconds": 0.15445518493652344, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="bcftools_plugin_counts (Test #1)" name="0" time="40.29316830635071">
        
            
            <system-out><![CDATA[
            Number of samples: 3Number of SNPs:    11Number of INDELs:  3Number of MNPs:    0Number of others:  0Number of sites:   15
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #1)" name="0" time="28.048885822296143">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "input_file": {   "id": "263914872c8f7eb3",   "src": "hda"  },  "output_type": "v",  "sec_filter|max_ac": "1",  "sec_filter|min_ac": "1",  "sec_filter|types": "snps",  "sec_subset|samples": "NA00002" }, "job": {  "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed \u0027s,bin/bcftools,libexec/bcftools,\u0027`;     bgzip -c \u0027/galaxy/server/database/objects/c/7/7/dataset_c7764a31-a1ef-4668-acd3-0231e2fb0987.dat\u0027 \u003e input.vcf.gz \u0026\u0026 bcftools index input.vcf.gz \u0026\u0026            bcftools view     --samples \u0027NA00002\u0027     --min-ac 1 --max-ac 1 --types \"snps\"                     --output-type \u0027v\u0027   --threads ${GALAXY_SLOTS:-4}    input.vcf.gz  \u003e \u0027/galaxy/server/database/objects/a/6/8/dataset_a6821494-eaf8-4e62-a989-b2508fa9d558.dat\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-12-02T09:55:24.138868",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-8kdph",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "3e606e44d109df26",  "inputs": {   "input_file": {    "id": "263914872c8f7eb3",    "src": "hda",    "uuid": "c7764a31-a1ef-4668-acd3-0231e2fb0987"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_file": {    "id": "e347db23f2befc54",    "src": "hda",    "uuid": "a6821494-eaf8-4e62-a989-b2508fa9d558"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "output_type": "\"v\"",   "sec_filter": "{\"exclude_types\": null, \"known_or_novel\": null, \"max_ac\": \"1\", \"max_af\": \"\", \"max_alleles\": \"\", \"min_ac\": \"1\", \"min_af\": \"\", \"min_alleles\": \"\", \"phased\": null, \"private\": null, \"select_genotype\": null, \"types\": \"snps\", \"uncalled\": null}",   "sec_output": "{\"compression_level\": \"\", \"drop_genotypes\": false, \"header\": null, \"invert_targets_file\": false}",   "sec_restrict": "{\"apply_filters\": \"\", \"exclude\": null, \"include\": null, \"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"regions_overlap\": null, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}, \"targets_overlap\": null}",   "sec_subset": "{\"force_samples\": false, \"invert_samples\": false, \"invert_samples_file\": false, \"no_update\": false, \"samples\": \"NA00002\", \"samples_file\": null, \"trim_alt_alleles\": false}"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_view/bcftools_view/1.15.1+galaxy4",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:55:33.546298",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/bcftools_view/bcftools_view/1.15.1+galaxy4, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/bcftools_view/bcftools_view/1.15.1+galaxy4, exit_code: None, stderr: ." ], "status": "failure", "test_index": 0, "time_seconds": 28.048885822296143, "tool_id": "bcftools_view", "tool_version": "1.15.1+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #2)" name="1" time="32.47265362739563">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #11)" name="10" time="33.30130696296692">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #12)" name="11" time="32.073225259780884">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #13)" name="12" time="32.07514309883118">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #3)" name="2" time="33.02295923233032">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #4)" name="3" time="30.85174560546875">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #5)" name="4" time="38.410600423812866">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #6)" name="5" time="31.982780933380127">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #7)" name="6" time="31.198067903518677">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #8)" name="7" time="32.10132813453674">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #9)" name="8" time="32.028759479522705">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #10)" name="9" time="33.33816885948181">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #1)" name="0" time="39.226741313934326">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.030 s (10008.097 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #1)" name="0" time="31.897513389587402">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.030 s (10077.794 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #2)" name="1" time="36.558887243270874">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 5 cores ...Finished in 0.086 s (870.201 µs/read; 0.07 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         2 (2.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):            99 (100.0%)Total basepairs processed:        24,849 bpTotal written (filtered):         24,843 bp (100.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #2)" name="1" time="30.899181365966797">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 5 cores ...Finished in 0.086 s (870.977 µs/read; 0.07 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         2 (2.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):            99 (100.0%)Total basepairs processed:        24,849 bpTotal written (filtered):         24,843 bp (100.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #11)" name="10" time="31.91577672958374">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -g A1=^GTCGGTAA -g A2=^AGGTCACT --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o split/{name}.fastq cutadapt_in_split_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.049 s (4462.871 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                      11Reads with adapters:                        10 (90.9%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads discarded as untrimmed:                0 (0.0%)Reads written (passing filters):            11 (100.0%)Total basepairs processed:         1,210 bpTotal written (filtered):          1,130 bp (93.4%)=== Adapter A1 ===Sequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005=== Adapter A2 ===Sequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #11)" name="10" time="32.36970496177673">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -g A1=^GTCGGTAA -g A2=^AGGTCACT --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o split/{name}.fastq cutadapt_in_split_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.047 s (4272.331 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                      11Reads with adapters:                        10 (90.9%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads discarded as untrimmed:                0 (0.0%)Reads written (passing filters):            11 (100.0%)Total basepairs processed:         1,210 bpTotal written (filtered):          1,130 bp (93.4%)=== Adapter A1 ===Sequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005=== Adapter A2 ===Sequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #12)" name="11" time="33.27496385574341">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -g file:/galaxy/server/database/objects/8/b/2/dataset_8b28c7f5-982b-4575-a4ea-76c5cdd344d5.dat --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o split/{name}.fastq.gz cutadapt_in_split_fastq_gz.fq.gzProcessing single-end reads on 5 cores ...Finished in 0.209 s (18966.957 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                      11Reads with adapters:                        10 (90.9%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads discarded as untrimmed:                0 (0.0%)Reads written (passing filters):            11 (100.0%)Total basepairs processed:         1,210 bpTotal written (filtered):          1,130 bp (93.4%)=== Adapter A2 ===Sequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005=== Adapter A1 ===Sequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #12)" name="11" time="32.07482886314392">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -g file:/galaxy/server/database/objects/e/4/2/dataset_e4275780-5beb-4094-af4b-407a362fcd1d.dat --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o split/{name}.fastq.gz cutadapt_in_split_fastq_gz.fq.gzProcessing single-end reads on 5 cores ...Finished in 0.209 s (18964.616 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                      11Reads with adapters:                        10 (90.9%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads discarded as untrimmed:                0 (0.0%)Reads written (passing filters):            11 (100.0%)Total basepairs processed:         1,210 bpTotal written (filtered):          1,130 bp (93.4%)=== Adapter A2 ===Sequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005=== Adapter A1 ===Sequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #13)" name="12" time="32.596049785614014">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AAAT --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --untrimmed-output=untrimmed_output.fq -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.035 s (11830.171 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             1 (33.3%)Total basepairs processed:           102 bpTotal written (filtered):             30 bp (29.4%)=== Adapter 1 ===Sequence: AAAT; Type: regular 3'; Length: 4; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-4 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 100.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts410.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #13)" name="12" time="32.62800216674805">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AAAT --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --untrimmed-output=untrimmed_output.fq -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.034 s (11208.057 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             1 (33.3%)Total basepairs processed:           102 bpTotal written (filtered):             30 bp (29.4%)=== Adapter 1 ===Sequence: AAAT; Type: regular 3'; Length: 4; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-4 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 100.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts410.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #14)" name="13" time="31.84971046447754">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --untrimmed-output=untrimmed_output.fq.gz -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 5 cores ...Finished in 0.142 s (1438.743 µs/read; 0.04 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         2 (2.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             2 (2.0%)Total basepairs processed:        24,849 bpTotal written (filtered):            496 bp (2.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #14)" name="13" time="33.101988554000854">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --untrimmed-output=untrimmed_output.fq.gz -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 5 cores ...Finished in 0.143 s (1445.074 µs/read; 0.04 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         2 (2.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             2 (2.0%)Total basepairs processed:        24,849 bpTotal written (filtered):            496 bp (2.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #15)" name="14" time="30.654340982437134">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-untrimmed --minimum-length=1 --maximum-length=1000 --max-n=0.0 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.141 s (1426.914 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                    0 (0.0%)Pairs with too many N:                       0 (0.0%)Pairs written (passing filters):             2 (2.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):            998 bp (2.0%)  Read 1:           496 bp  Read 2:           502 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #15)" name="14" time="32.74201273918152">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-untrimmed --minimum-length=1 --maximum-length=1000 --max-n=0.0 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.143 s (1439.793 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                    0 (0.0%)Pairs with too many N:                       0 (0.0%)Pairs written (passing filters):             2 (2.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):            998 bp (2.0%)  Read 1:           496 bp  Read 2:           502 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #16)" name="15" time="32.14051079750061">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --cut=5 --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.031 s (10480.960 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             87 bp (85.3%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #16)" name="15" time="31.80636715888977">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --cut=5 --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.029 s (9643.873 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             87 bp (85.3%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #17)" name="16" time="31.343063831329346">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --cut=5 --minimum-length=1 --rename={id} barcode={cut_prefix} -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.031 s (10184.526 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             87 bp (85.3%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #17)" name="16" time="31.03105878829956">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --cut=5 --minimum-length=1 --rename={id} barcode={cut_prefix} -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.030 s (10164.738 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             87 bp (85.3%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #18)" name="17" time="30.899479627609253">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=retain --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.030 s (10108.948 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             80 bp (78.4%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #18)" name="17" time="32.40121078491211">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=retain --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.033 s (10944.923 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             80 bp (78.4%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #19)" name="18" time="30.898433446884155">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=mask --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.031 s (10179.917 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #19)" name="18" time="31.854602098464966">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=mask --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.031 s (10437.409 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #20)" name="19" time="31.303478240966797">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=lowercase --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.029 s (9776.036 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #20)" name="19" time="25.098000288009644">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "adapter_options|action": "lowercase",  "library|input_1": {   "id": "19076fb9d620b6d2",   "src": "hda"  },  "library|r1|adapters_0|adapter_source|adapter": "CGTCCGAANTAG",  "library|r1|adapters_0|adapter_source|adapter_source_list": "user",  "library|type": "single" }, "job": {  "command_line": "ln -f -s \u0027/galaxy/server/database/objects/2/f/4/dataset_2f4e21b5-82eb-490d-96a8-331ec6813218.dat\u0027 \u0027cutadapt_small_fastq.fq\u0027 \u0026\u0026  cutadapt  -j=${GALAXY_SLOTS:-4}   -a \u0027CGTCCGAANTAG\u0027    --error-rate=0.1 --times=1 --overlap=3    --action=lowercase         --minimum-length=1      -o \u0027out1.fq\u0027  \u0027cutadapt_small_fastq.fq\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-12-02T07:17:07.556266",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-8bd9q",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "1b70ea0dfe5a45ae",  "inputs": {   "library|input_1": {    "id": "19076fb9d620b6d2",    "src": "hda",    "uuid": "2f4e21b5-82eb-490d-96a8-331ec6813218"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "out1": {    "id": "540d9fcf44098ad9",    "src": "hda",    "uuid": "14a18c43-9e5b-410f-9a69-4a0608c7e3a5"   }  },  "params": {   "__input_ext": "\"input\"",   "adapter_options": "{\"action\": \"lowercase\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}",   "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 249, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"CGTCCGAANTAG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}",   "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}",   "output_selector": null,   "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}"  },  "state": "error",  "stderr": "",  "stdout": "This is cutadapt 4.9 with Python 3.12.7\nCommand line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=lowercase --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 5 cores ...\nFinished in 0.032 s (10816.813 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3\u0027; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1",  "tool_stderr": "",  "tool_stdout": "This is cutadapt 4.9 with Python 3.12.7\nCommand line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=lowercase --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 5 cores ...\nFinished in 0.032 s (10816.813 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3\u0027; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n",  "update_time": "2024-12-02T07:17:12.311053",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 19, "time_seconds": 25.098000288009644, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=lowercase --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.032 s (10816.813 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #3)" name="2" time="32.89513063430786">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.154 s (1558.993 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,677 bp (100.0%)  Read 1:        24,843 bp  Read 2:        24,834 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #3)" name="2" time="32.844825983047485">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.154 s (1552.502 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,677 bp (100.0%)  Read 1:        24,843 bp  Read 2:        24,834 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #21)" name="20" time="32.093913555145264">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=crop --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.034 s (11196.057 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             80 bp (78.4%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #21)" name="20" time="24.109720706939697">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "adapter_options|action": "crop",  "library|input_1": {   "id": "b448432d57dd78b9",   "src": "hda"  },  "library|r1|adapters_0|adapter_source|adapter": "CGTCCGAANTAG",  "library|r1|adapters_0|adapter_source|adapter_source_list": "user",  "library|type": "single" }, "job": {  "command_line": "ln -f -s \u0027/galaxy/server/database/objects/f/5/f/dataset_f5ffb9c3-9f1c-4c6c-aa96-28a9c2d03fdc.dat\u0027 \u0027cutadapt_small_fastq.fq\u0027 \u0026\u0026  cutadapt  -j=${GALAXY_SLOTS:-4}   -a \u0027CGTCCGAANTAG\u0027    --error-rate=0.1 --times=1 --overlap=3    --action=crop         --minimum-length=1      -o \u0027out1.fq\u0027  \u0027cutadapt_small_fastq.fq\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-12-02T07:17:31.169736",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-9vrrm",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "c45ac89b311f425e",  "inputs": {   "library|input_1": {    "id": "b448432d57dd78b9",    "src": "hda",    "uuid": "f5ffb9c3-9f1c-4c6c-aa96-28a9c2d03fdc"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "out1": {    "id": "c496ce3d007e062d",    "src": "hda",    "uuid": "34379862-2f63-45e2-bbb6-2f6018220378"   }  },  "params": {   "__input_ext": "\"input\"",   "adapter_options": "{\"action\": \"crop\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}",   "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 251, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"CGTCCGAANTAG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}",   "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}",   "output_selector": null,   "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}"  },  "state": "error",  "stderr": "",  "stdout": "This is cutadapt 4.9 with Python 3.12.7\nCommand line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=crop --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 5 cores ...\nFinished in 0.032 s (10685.364 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             80 bp (78.4%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3\u0027; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1",  "tool_stderr": "",  "tool_stdout": "This is cutadapt 4.9 with Python 3.12.7\nCommand line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=crop --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 5 cores ...\nFinished in 0.032 s (10685.364 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):             80 bp (78.4%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3\u0027; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n",  "update_time": "2024-12-02T07:17:36.914431",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 20, "time_seconds": 24.109720706939697, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=crop --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.032 s (10685.364 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             80 bp (78.4%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #22)" name="21" time="32.10940980911255">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=none --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.031 s (10216.872 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #22)" name="21" time="32.89352250099182">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=none --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.032 s (10726.929 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #23)" name="22" time="30.886504411697388">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a TAAACAGATTAGT --error-rate=0.1 --times=1 --overlap=3 --action=trim --rc --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.029 s (9790.341 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reverse-complemented:                        0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             97 bp (95.1%)=== Adapter 1 ===Sequence: TAAACAGATTAGT; Type: regular 3'; Length: 13; Trimmed: 1 times; Reverse-complemented: 0 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 100.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts510.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #23)" name="22" time="33.305091857910156">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a TAAACAGATTAGT --error-rate=0.1 --times=1 --overlap=3 --action=trim --rc --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.033 s (10870.377 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reverse-complemented:                        0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             97 bp (95.1%)=== Adapter 1 ===Sequence: TAAACAGATTAGT; Type: regular 3'; Length: 13; Trimmed: 1 times; Reverse-complemented: 0 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 100.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts510.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #24)" name="23" time="33.59449577331543">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a ATCTGGTTCC -A CTACAAG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=30:10 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.152 s (1539.175 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                      32 (32.3%)  Read 2 with adapter:                      15 (15.2%)== Read fate breakdown ==Pairs that were too short:                   3 (3.0%)Pairs written (passing filters):            96 (97.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):         38,492 bp (79.7%)  Read 1:        17,741 bp  Read 2:        20,751 bp=== First read: Adapter 1 ===Sequence: ATCTGGTTCC; Type: regular 3'; Length: 10; Trimmed: 32 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 90.6%  G: 3.1%  T: 0.0%  none/other: 6.2%WARNING:    The adapter is preceded by 'C' extremely often.    The provided adapter sequence could be incomplete at its 5' end.    Ignore this warning when trimming primers.Overview of removed sequenceslengthcountexpectmax.errerror counts321.5021310.0111410.01120110.01120310.01120820.01220910.01121110.01121420.01221720.01221810.01122210.01122610.01122720.01222810.01122910.01123220.01223810.01124270.01725110.010 1=== Second read: Adapter 2 ===Sequence: CTACAAG; Type: regular 3'; Length: 7; Trimmed: 15 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 73.3%  G: 0.0%  T: 0.0%  none/other: 26.7%Overview of removed sequenceslengthcountexpectmax.errerror counts810.00122820.00222910.00123830.00324110.00124310.00124610.00124810.00125010.00125130.003WARNING:    One or more of your adapter sequences may be incomplete.    Please see the detailed output above.
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #24)" name="23" time="34.06057620048523">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a ATCTGGTTCC -A CTACAAG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=30:10 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.161 s (1628.989 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                      32 (32.3%)  Read 2 with adapter:                      15 (15.2%)== Read fate breakdown ==Pairs that were too short:                   3 (3.0%)Pairs written (passing filters):            96 (97.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):         38,492 bp (79.7%)  Read 1:        17,741 bp  Read 2:        20,751 bp=== First read: Adapter 1 ===Sequence: ATCTGGTTCC; Type: regular 3'; Length: 10; Trimmed: 32 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 90.6%  G: 3.1%  T: 0.0%  none/other: 6.2%WARNING:    The adapter is preceded by 'C' extremely often.    The provided adapter sequence could be incomplete at its 5' end.    Ignore this warning when trimming primers.Overview of removed sequenceslengthcountexpectmax.errerror counts321.5021310.0111410.01120110.01120310.01120820.01220910.01121110.01121420.01221720.01221810.01122210.01122610.01122720.01222810.01122910.01123220.01223810.01124270.01725110.010 1=== Second read: Adapter 2 ===Sequence: CTACAAG; Type: regular 3'; Length: 7; Trimmed: 15 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 73.3%  G: 0.0%  T: 0.0%  none/other: 26.7%Overview of removed sequenceslengthcountexpectmax.errerror counts810.00122820.00222910.00123830.00324110.00124310.00124610.00124810.00125010.00125130.003WARNING:    One or more of your adapter sequences may be incomplete.    Please see the detailed output above.
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #25)" name="24" time="32.78925156593323">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --maximum-length=50:30 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.154 s (1550.980 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                   96 (97.0%)Pairs written (passing filters):             3 (3.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):             99 bp (0.2%)  Read 1:            51 bp  Read 2:            48 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #25)" name="24" time="33.930647134780884">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --maximum-length=50:30 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.156 s (1578.391 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                   96 (97.0%)Pairs written (passing filters):             3 (3.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):             99 bp (0.2%)  Read 1:            51 bp  Read 2:            48 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #26)" name="25" time="33.60990905761719">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10 --maximum-length=50:30 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.141 s (1427.706 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                   96 (97.0%)Pairs written (passing filters):             3 (3.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):             99 bp (0.2%)  Read 1:            51 bp  Read 2:            48 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #26)" name="25" time="33.22281455993652">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10 --maximum-length=50:30 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.140 s (1416.556 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                   96 (97.0%)Pairs written (passing filters):             3 (3.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):             99 bp (0.2%)  Read 1:            51 bp  Read 2:            48 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #27)" name="26" time="31.95300006866455">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10:10 --maximum-length=50 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.140 s (1415.872 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                   96 (97.0%)Pairs written (passing filters):             3 (3.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):             99 bp (0.2%)  Read 1:            51 bp  Read 2:            48 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #27)" name="26" time="32.00704288482666">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10:10 --maximum-length=50 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.145 s (1463.163 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                   96 (97.0%)Pairs written (passing filters):             3 (3.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):             99 bp (0.2%)  Read 1:            51 bp  Read 2:            48 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #28)" name="27" time="30.517273902893066">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=10 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.031 s (10262.410 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             20 bp (19.6%)=== Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #28)" name="27" time="30.471971035003662">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=10 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.029 s (9526.173 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             20 bp (19.6%)=== Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #29)" name="28" time="31.637151956558228">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=-10 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.031 s (10273.377 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             20 bp (19.6%)=== Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #29)" name="28" time="32.12739539146423">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=-10 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.032 s (10511.080 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             20 bp (19.6%)=== Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #30)" name="29" time="33.41783380508423">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGCCGCTANGACG -A AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=10 -L -10 -o out1.fq -p out2.fq cutadapt_small_fastq_1.fq cutadapt_small_fastq_2.fqProcessing paired-end reads on 5 cores ...Finished in 0.046 s (15353.203 µs/read; 0.00 M reads/minute).=== Summary ===Total read pairs processed:                  3  Read 1 with adapter:                       1 (33.3%)  Read 2 with adapter:                       1 (33.3%)Pairs written (passing filters):             3 (100.0%)Total basepairs processed:           204 bp  Read 1:           102 bp  Read 2:           102 bpTotal written (filtered):             40 bp (19.6%)  Read 1:            20 bp  Read 2:            20 bp=== First read: Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011=== Second read: Adapter 2 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #30)" name="29" time="32.982152223587036">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGCCGCTANGACG -A AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=10 -L -10 -o out1.fq -p out2.fq cutadapt_small_fastq_1.fq cutadapt_small_fastq_2.fqProcessing paired-end reads on 5 cores ...Finished in 0.044 s (14610.926 µs/read; 0.00 M reads/minute).=== Summary ===Total read pairs processed:                  3  Read 1 with adapter:                       1 (33.3%)  Read 2 with adapter:                       1 (33.3%)Pairs written (passing filters):             3 (100.0%)Total basepairs processed:           204 bp  Read 1:           102 bp  Read 2:           102 bpTotal written (filtered):             40 bp (19.6%)  Read 1:            20 bp  Read 2:            20 bp=== First read: Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011=== Second read: Adapter 2 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #4)" name="3" time="10.508749008178711">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 3, "time_seconds": 10.508749008178711, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #4)" name="3" time="32.66842985153198">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.155 s (1565.745 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,677 bp (100.0%)  Read 1:        24,843 bp  Read 2:        24,834 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #31)" name="30" time="31.886473417282104">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -A AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim -L 10 -o out1.fq -p out2.fq cutadapt_small_fastq_1.fq cutadapt_small_fastq_2.fqProcessing paired-end reads on 5 cores ...Finished in 0.035 s (11621.396 µs/read; 0.01 M reads/minute).=== Summary ===Total read pairs processed:                  3  Read 2 with adapter:                       1 (33.3%)Pairs written (passing filters):             3 (100.0%)Total basepairs processed:           204 bp  Read 1:           102 bp  Read 2:           102 bpTotal written (filtered):            122 bp (59.8%)  Read 1:           102 bp  Read 2:            20 bp=== Second read: Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #31)" name="30" time="33.03596615791321">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -A AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim -L 10 -o out1.fq -p out2.fq cutadapt_small_fastq_1.fq cutadapt_small_fastq_2.fqProcessing paired-end reads on 5 cores ...Finished in 0.033 s (11035.681 µs/read; 0.01 M reads/minute).=== Summary ===Total read pairs processed:                  3  Read 2 with adapter:                       1 (33.3%)Pairs written (passing filters):             3 (100.0%)Total basepairs processed:           204 bp  Read 1:           102 bp  Read 2:           102 bpTotal written (filtered):            122 bp (59.8%)  Read 1:           102 bp  Read 2:            20 bp=== Second read: Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #32)" name="31" time="10.459665298461914">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 31, "time_seconds": 10.459665298461914, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #32)" name="31" time="31.303455591201782">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGCGGCTTAGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --max-ee=10.0 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.029 s (9699.583 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads with too many exp. errors:             0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: AGCGGCTTAGACG; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #33)" name="32" time="30.905567169189453">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a GAANTAGCTACCACX --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.030 s (10074.536 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: GAANTAGCTACCAC; Type: non-internal 3'; Length: 14; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #33)" name="32" time="21.888468027114868">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "library|input_1": {   "id": "1dab482bc8687176",   "src": "hda"  },  "library|r1|adapters_0|adapter_source|adapter": "GAANTAGCTACCACX",  "library|r1|adapters_0|adapter_source|adapter_source_list": "user",  "library|type": "single" }, "job": {  "command_line": "ln -f -s \u0027/galaxy/server/database/objects/6/b/6/dataset_6b6fb2f2-63e6-40ad-bb57-0402a3af02d8.dat\u0027 \u0027cutadapt_small_fastq.fq\u0027 \u0026\u0026  cutadapt  -j=${GALAXY_SLOTS:-4}   -a \u0027GAANTAGCTACCACX\u0027    --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=1      -o \u0027out1.fq\u0027  \u0027cutadapt_small_fastq.fq\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-12-02T07:23:55.797459",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-tm5hb",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "689fba43c9425ea4",  "inputs": {   "library|input_1": {    "id": "1dab482bc8687176",    "src": "hda",    "uuid": "6b6fb2f2-63e6-40ad-bb57-0402a3af02d8"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "out1": {    "id": "f9b187d34870396a",    "src": "hda",    "uuid": "d3e9badf-e19c-4be1-a734-b5b4944f88ec"   }  },  "params": {   "__input_ext": "\"input\"",   "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}",   "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 285, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"GAANTAGCTACCACX\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}",   "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}",   "output_selector": null,   "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}"  },  "state": "error",  "stderr": "",  "stdout": "This is cutadapt 4.9 with Python 3.12.7\nCommand line parameters: -j=5 -a GAANTAGCTACCACX --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 5 cores ...\nFinished in 0.031 s (10172.208 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: GAANTAGCTACCAC; Type: non-internal 3\u0027; Length: 14; Trimmed: 0 times\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1",  "tool_stderr": "",  "tool_stdout": "This is cutadapt 4.9 with Python 3.12.7\nCommand line parameters: -j=5 -a GAANTAGCTACCACX --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 5 cores ...\nFinished in 0.031 s (10172.208 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: GAANTAGCTACCAC; Type: non-internal 3\u0027; Length: 14; Trimmed: 0 times\n",  "update_time": "2024-12-02T07:23:59.749647",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 32, "time_seconds": 21.888468027114868, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a GAANTAGCTACCACX --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.031 s (10172.208 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: GAANTAGCTACCAC; Type: non-internal 3'; Length: 14; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #34)" name="33" time="33.271605491638184">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGCX -A AGATCGGAAGAGCX --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.153 s (1549.526 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):         48,270 bp (100.0%)  Read 1:        24,141 bp  Read 2:        24,129 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #34)" name="33" time="33.55878138542175">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGCX -A AGATCGGAAGAGCX --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.154 s (1557.536 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):         48,270 bp (100.0%)  Read 1:        24,141 bp  Read 2:        24,129 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #35)" name="34" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 34, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #35)" name="34" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 34, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #36)" name="35" time="33.30533003807068">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC;noindels -A AGATCGGAAGAGC;noindels --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.160 s (1620.933 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,677 bp (100.0%)  Read 1:        24,843 bp  Read 2:        24,834 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #36)" name="35" time="33.17453670501709">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC;noindels -A AGATCGGAAGAGC;noindels --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.154 s (1557.237 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,677 bp (100.0%)  Read 1:        24,843 bp  Read 2:        24,834 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #37)" name="36" time="34.05463194847107">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=5 -Q 15,20 --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.155 s (1570.367 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpQuality-trimmed:                     747 bp (1.5%)  Read 1:             0 bp  Read 2:           747 bpTotal written (filtered):         48,938 bp (98.5%)  Read 1:        24,843 bp  Read 2:        24,095 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 100.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts311.501410.401
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #37)" name="36" time="32.750362396240234">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=5 -Q 15,20 --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.152 s (1536.574 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpQuality-trimmed:                     747 bp (1.5%)  Read 1:             0 bp  Read 2:           747 bpTotal written (filtered):         48,938 bp (98.5%)  Read 1:        24,843 bp  Read 2:        24,095 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 100.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts311.501410.401
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #38)" name="37" time="32.36766171455383">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 --error-rate=0.1 --times=1 --overlap=3 --action=trim --poly-a --minimum-length=1 -o out1.fa -p out2.fa Unnamed Collection_1.fa Unnamed Collection_2.faProcessing paired-end reads on 5 cores ...Finished in 0.027 s (6663.918 µs/read; 0.01 M reads/minute).=== Summary ===Total read pairs processed:                  4== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):             4 (100.0%)Total basepairs processed:           369 bp  Read 1:           194 bp  Read 2:           175 bpPoly-A-trimmed:                      168 bp (45.5%)  Read 1:            84 bp  Read 2:            84 bpTotal written (filtered):            201 bp (54.5%)  Read 1:           110 bp  Read 2:            91 bp=== R1 poly-A trimmed ===lengthcount01212421=== R2 poly-A trimmed ===lengthcount01212421
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #38)" name="37" time="33.10854744911194">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 --error-rate=0.1 --times=1 --overlap=3 --action=trim --poly-a --minimum-length=1 -o out1.fa -p out2.fa Unnamed Collection_1.fa Unnamed Collection_2.faProcessing paired-end reads on 5 cores ...Finished in 0.029 s (7131.219 µs/read; 0.01 M reads/minute).=== Summary ===Total read pairs processed:                  4== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):             4 (100.0%)Total basepairs processed:           369 bp  Read 1:           194 bp  Read 2:           175 bpPoly-A-trimmed:                      168 bp (45.5%)  Read 1:            84 bp  Read 2:            84 bpTotal written (filtered):            201 bp (54.5%)  Read 1:           110 bp  Read 2:            91 bp=== R1 poly-A trimmed ===lengthcount01212421=== R2 poly-A trimmed ===lengthcount01212421
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #39)" name="38" time="30.59012746810913">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA --error-rate=0.1 --times=1 --overlap=10 --action=trim --minimum-length=1 -o out1.fa polya_1_fasta.faProcessing single-end reads on 5 cores ...Finished in 0.029 s (7309.675 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       4Reads with adapters:                         3 (75.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             4 (100.0%)Total basepairs processed:           194 bpTotal written (filtered):             96 bp (49.5%)=== Adapter 1 ===Sequence: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; Type: regular 3'; Length: 35; Trimmed: 3 timesMinimum overlap: 10No. of allowed errors:1-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2; 30-35 bp: 3Bases preceding removed adapters:  A: 0.0%  C: 33.3%  G: 66.7%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts2610.020 0 13010.030 0 0 14210.030 1
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #39)" name="38" time="31.700833559036255">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA --error-rate=0.1 --times=1 --overlap=10 --action=trim --minimum-length=1 -o out1.fa polya_1_fasta.faProcessing single-end reads on 5 cores ...Finished in 0.032 s (8033.872 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       4Reads with adapters:                         3 (75.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             4 (100.0%)Total basepairs processed:           194 bpTotal written (filtered):             96 bp (49.5%)=== Adapter 1 ===Sequence: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; Type: regular 3'; Length: 35; Trimmed: 3 timesMinimum overlap: 10No. of allowed errors:1-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2; 30-35 bp: 3Bases preceding removed adapters:  A: 0.0%  C: 33.3%  G: 66.7%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts2610.020 0 13010.030 0 0 14210.030 1
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #40)" name="39" time="31.353073120117188">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a A{35} --error-rate=0.1 --times=1 --overlap=10 --action=trim --minimum-length=1 -o out1.fa polya_1_fasta.faProcessing single-end reads on 5 cores ...Finished in 0.030 s (7453.382 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       4Reads with adapters:                         3 (75.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             4 (100.0%)Total basepairs processed:           194 bpTotal written (filtered):             96 bp (49.5%)=== Adapter 1 ===Sequence: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; Type: regular 3'; Length: 35; Trimmed: 3 timesMinimum overlap: 10No. of allowed errors:1-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2; 30-35 bp: 3Bases preceding removed adapters:  A: 0.0%  C: 33.3%  G: 66.7%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts2610.020 0 13010.030 0 0 14210.030 1
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #40)" name="39" time="32.113134145736694">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a A{35} --error-rate=0.1 --times=1 --overlap=10 --action=trim --minimum-length=1 -o out1.fa polya_1_fasta.faProcessing single-end reads on 5 cores ...Finished in 0.030 s (7457.137 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       4Reads with adapters:                         3 (75.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             4 (100.0%)Total basepairs processed:           194 bpTotal written (filtered):             96 bp (49.5%)=== Adapter 1 ===Sequence: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; Type: regular 3'; Length: 35; Trimmed: 3 timesMinimum overlap: 10No. of allowed errors:1-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2; 30-35 bp: 3Bases preceding removed adapters:  A: 0.0%  C: 33.3%  G: 66.7%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts2610.020 0 13010.030 0 0 14210.030 1
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #5)" name="4" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 4, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #5)" name="4" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 4, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #41)" name="40" time="32.19541525840759">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 --error-rate=0.1 --times=1 --overlap=3 --action=trim --poly-a --minimum-length=1 -o out1.fa polya_1_fasta.faProcessing single-end reads on 5 cores ...Finished in 0.022 s (5585.313 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       4== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             4 (100.0%)Total basepairs processed:           194 bpPoly-A-trimmed:                       84 bp (43.3%)Total written (filtered):            110 bp (56.7%)=== Poly-A trimmed ===lengthcount01212421
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #41)" name="40" time="31.297247409820557">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 --error-rate=0.1 --times=1 --overlap=3 --action=trim --poly-a --minimum-length=1 -o out1.fa polya_1_fasta.faProcessing single-end reads on 5 cores ...Finished in 0.021 s (5193.114 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       4== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             4 (100.0%)Total basepairs processed:           194 bpPoly-A-trimmed:                       84 bp (43.3%)Total written (filtered):            110 bp (56.7%)=== Poly-A trimmed ===lengthcount01212421
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #42)" name="41" time="31.87332034111023">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fa.gz simple_fasta_gz.fa.gzProcessing single-end reads on 5 cores ...Finished in 0.075 s (37458.181 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       2== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             2 (100.0%)Total basepairs processed:            18 bpTotal written (filtered):             18 bp (100.0%)
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #42)" name="41" time="30.89204454421997">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fa.gz simple_fasta_gz.fa.gzProcessing single-end reads on 5 cores ...Finished in 0.075 s (37574.887 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       2== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             2 (100.0%)Total basepairs processed:            18 bpTotal written (filtered):             18 bp (100.0%)
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #43)" name="42" time="31.364986658096313">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a XXXXXX --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=10 --quality-base=64 -o out1.fq illumina64_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.030 s (1477.647 µs/read; 0.04 M reads/minute).=== Summary ===Total reads processed:                      20Reads with adapters:                         0 (0.0%)Reads written (passing filters):            20 (100.0%)Total basepairs processed:         1,900 bpQuality-trimmed:                   1,021 bp (53.7%)Total written (filtered):            879 bp (46.3%)=== Adapter 1 ===Sequence: XXXXXX; Type: regular 3'; Length: 6; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #43)" name="42" time="30.12147331237793">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a XXXXXX --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=10 --quality-base=64 -o out1.fq illumina64_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.030 s (1493.025 µs/read; 0.04 M reads/minute).=== Summary ===Total reads processed:                      20Reads with adapters:                         0 (0.0%)Reads written (passing filters):            20 (100.0%)Total basepairs processed:         1,900 bpQuality-trimmed:                   1,021 bp (53.7%)Total written (filtered):            879 bp (46.3%)=== Adapter 1 ===Sequence: XXXXXX; Type: regular 3'; Length: 6; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #44)" name="43" time="10.44163703918457">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 43, "time_seconds": 10.44163703918457, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #44)" name="43" time="31.014472484588623">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=10 --quality-base=64 -o out1.fq illumina64_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.022 s (1075.172 µs/read; 0.06 M reads/minute).=== Summary ===Total reads processed:                      20Reads written (passing filters):            20 (100.0%)Total basepairs processed:         1,900 bpQuality-trimmed:                   1,021 bp (53.7%)Total written (filtered):            879 bp (46.3%)
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #45)" name="44" time="31.876004219055176">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #45)" name="44" time="31.77703309059143">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #46)" name="45" time="31.777250289916992">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -b ACGTACGT --error-rate=0.1 --times=1 --overlap=3 --match-read-wildcards --action=trim --minimum-length=1 -o out1.fa wildcard_fa.faProcessing single-end reads on 5 cores ...Finished in 0.034 s (16999.841 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       2Reads with adapters:                         2 (100.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             2 (100.0%)Total basepairs processed:            32 bpTotal written (filtered):             16 bp (50.0%)=== Adapter 1 ===Sequence: ACGTACGT; Type: variable 5'/3'; Length: 8; Trimmed: 2 times2 times, it overlapped the 5' end of a read0 times, it overlapped the 3' end or was within the readMinimum overlap: 3No. of allowed errors:1-8 bp: 0Overview of removed sequences (5')lengthcountexpectmax.errerror counts820.002Overview of removed sequences (3' or within)lengthcountexpectmax.errerror counts
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #46)" name="45" time="24.403225898742676">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "adapter_options|match_read_wildcards": true,  "library|input_1": {   "id": "8965c9d23be9e809",   "src": "hda"  },  "library|r1|anywhere_adapters_0|adapter_source|adapter": "ACGTACGT",  "library|r1|anywhere_adapters_0|adapter_source|adapter_source_list": "user",  "library|type": "single" }, "job": {  "command_line": "ln -f -s \u0027/galaxy/server/database/objects/5/2/0/dataset_5203b436-e54b-46a5-9d87-e8216cd0c372.dat\u0027 \u0027wildcard_fa.fa\u0027 \u0026\u0026  cutadapt  -j=${GALAXY_SLOTS:-4}   -b \u0027ACGTACGT\u0027    --error-rate=0.1 --times=1 --overlap=3  --match-read-wildcards  --action=trim         --minimum-length=1      -o \u0027out1.fa\u0027  \u0027wildcard_fa.fa\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-12-02T07:30:12.028218",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-gz7qz",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "fe754b614472499a",  "inputs": {   "library|input_1": {    "id": "8965c9d23be9e809",    "src": "hda",    "uuid": "5203b436-e54b-46a5-9d87-e8216cd0c372"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "out1": {    "id": "80b14d1e4b79d2ba",    "src": "hda",    "uuid": "a52833cc-8af8-45bd-8a11-ab0dbfc9605d"   }  },  "params": {   "__input_ext": "\"input\"",   "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": true, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}",   "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 319, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [], \"anywhere_adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"ACGTACGT\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"front_adapters\": []}, \"type\": \"single\"}",   "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}",   "output_selector": null,   "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}"  },  "state": "error",  "stderr": "",  "stdout": "This is cutadapt 4.9 with Python 3.12.7\nCommand line parameters: -j=5 -b ACGTACGT --error-rate=0.1 --times=1 --overlap=3 --match-read-wildcards --action=trim --minimum-length=1 -o out1.fa wildcard_fa.fa\nProcessing single-end reads on 5 cores ...\nFinished in 0.030 s (15181.422 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       2\nReads with adapters:                         2 (100.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             2 (100.0%)\n\nTotal basepairs processed:            32 bp\nTotal written (filtered):             16 bp (50.0%)\n\n=== Adapter 1 ===\n\nSequence: ACGTACGT; Type: variable 5\u0027/3\u0027; Length: 8; Trimmed: 2 times\n2 times, it overlapped the 5\u0027 end of a read\n0 times, it overlapped the 3\u0027 end or was within the read\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-8 bp: 0\n\nOverview of removed sequences (5\u0027)\nlength\tcount\texpect\tmax.err\terror counts\n8\t2\t0.0\t0\t2\n\n\n\nOverview of removed sequences (3\u0027 or within)\nlength\tcount\texpect\tmax.err\terror counts\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1",  "tool_stderr": "",  "tool_stdout": "This is cutadapt 4.9 with Python 3.12.7\nCommand line parameters: -j=5 -b ACGTACGT --error-rate=0.1 --times=1 --overlap=3 --match-read-wildcards --action=trim --minimum-length=1 -o out1.fa wildcard_fa.fa\nProcessing single-end reads on 5 cores ...\nFinished in 0.030 s (15181.422 \u00b5s/read; 0.00 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       2\nReads with adapters:                         2 (100.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             2 (100.0%)\n\nTotal basepairs processed:            32 bp\nTotal written (filtered):             16 bp (50.0%)\n\n=== Adapter 1 ===\n\nSequence: ACGTACGT; Type: variable 5\u0027/3\u0027; Length: 8; Trimmed: 2 times\n2 times, it overlapped the 5\u0027 end of a read\n0 times, it overlapped the 3\u0027 end or was within the read\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-8 bp: 0\n\nOverview of removed sequences (5\u0027)\nlength\tcount\texpect\tmax.err\terror counts\n8\t2\t0.0\t0\t2\n\n\n\nOverview of removed sequences (3\u0027 or within)\nlength\tcount\texpect\tmax.err\terror counts\n",  "update_time": "2024-12-02T07:30:17.755468",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 45, "time_seconds": 24.403225898742676, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -b ACGTACGT --error-rate=0.1 --times=1 --overlap=3 --match-read-wildcards --action=trim --minimum-length=1 -o out1.fa wildcard_fa.faProcessing single-end reads on 5 cores ...Finished in 0.030 s (15181.422 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       2Reads with adapters:                         2 (100.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             2 (100.0%)Total basepairs processed:            32 bpTotal written (filtered):             16 bp (50.0%)=== Adapter 1 ===Sequence: ACGTACGT; Type: variable 5'/3'; Length: 8; Trimmed: 2 times2 times, it overlapped the 5' end of a read0 times, it overlapped the 3' end or was within the readMinimum overlap: 3No. of allowed errors:1-8 bp: 0Overview of removed sequences (5')lengthcountexpectmax.errerror counts820.002Overview of removed sequences (3' or within)lengthcountexpectmax.errerror counts
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #47)" name="46" time="31.75989007949829">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a GGGGGGG --error-rate=0.0 --times=1 --overlap=3 --match-read-wildcards --action=trim --minimum-length=1 -o out1.fa wildcardN_fa.faProcessing single-end reads on 5 cores ...Finished in 0.031 s (10336.876 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         2 (66.7%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:            30 bpTotal written (filtered):             16 bp (53.3%)=== Adapter 1 ===Sequence: GGGGGGG; Type: regular 3'; Length: 7; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 100.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts720.002
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #47)" name="46" time="30.572133779525757">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a GGGGGGG --error-rate=0.0 --times=1 --overlap=3 --match-read-wildcards --action=trim --minimum-length=1 -o out1.fa wildcardN_fa.faProcessing single-end reads on 5 cores ...Finished in 0.032 s (10586.421 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         2 (66.7%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:            30 bpTotal written (filtered):             16 bp (53.3%)=== Adapter 1 ===Sequence: GGGGGGG; Type: regular 3'; Length: 7; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 100.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts720.002
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #48)" name="47" time="30.771052360534668">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq_mispaired2_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...
            ]]></system-out>
            <system-err><![CDATA[
            Error in sequence file at unknown line: Reads are improperly paired. Read name 'M01368:8:000000000-A3GHV:1:1101:6911:8255/1' in file 1 does not match 'M01368:8:000000000-A3GHV:1:1101:14518:9998/2' in file 2.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #48)" name="47" time="55.07239389419556">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq_mispaired2_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...
            ]]></system-out>
            <system-err><![CDATA[
            Error in sequence file at unknown line: Reads are improperly paired. Read name 'M01368:8:000000000-A3GHV:1:1101:6911:8255/1' in file 1 does not match 'M01368:8:000000000-A3GHV:1:1101:14518:9998/2' in file 2.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #6)" name="5" time="31.777254343032837">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a TTAGACATATCTCCGTCG --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-trimmed --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.030 s (10076.920 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         2 (66.7%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             1 (33.3%)Total basepairs processed:           102 bpTotal written (filtered):             34 bp (33.3%)=== Adapter 1 ===Sequence: TTAGACATATCTCCGTCG; Type: regular 3'; Length: 18; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-18 bp: 1Bases preceding removed adapters:  A: 50.0%  C: 50.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts1010.010 11210.010 1
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #6)" name="5" time="30.88095188140869">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a TTAGACATATCTCCGTCG --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-trimmed --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.029 s (9697.517 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         2 (66.7%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             1 (33.3%)Total basepairs processed:           102 bpTotal written (filtered):             34 bp (33.3%)=== Adapter 1 ===Sequence: TTAGACATATCTCCGTCG; Type: regular 3'; Length: 18; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-18 bp: 1Bases preceding removed adapters:  A: 50.0%  C: 50.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts1010.010 11210.010 1
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #7)" name="6" time="33.29478311538696">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --pair-adapters --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.154 s (1559.376 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       1 (1.0%)  Read 2 with adapter:                       1 (1.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,692 bp (100.0%)  Read 1:        24,846 bp  Read 2:        24,846 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 100.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts311.501=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 100.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts311.501
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #7)" name="6" time="33.698554039001465">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --pair-adapters --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.154 s (1559.650 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       1 (1.0%)  Read 2 with adapter:                       1 (1.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,692 bp (100.0%)  Read 1:        24,846 bp  Read 2:        24,846 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 100.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts311.501=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 100.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts311.501
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #8)" name="7" time="33.01305389404297">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AAAGATG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --json=stats.json -r=rest_output.fa -o out1.fa cutadapt_rest_fa.faProcessing single-end reads on 5 cores ...Finished in 0.033 s (6622.601 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       5Reads with adapters:                         5 (100.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             5 (100.0%)Total basepairs processed:            97 bpTotal written (filtered):             35 bp (36.1%)=== Adapter 1 ===Sequence: AAAGATG; Type: regular 3'; Length: 7; Trimmed: 5 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 100.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts710.0011210.0011420.0021510.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #8)" name="7" time="33.43340516090393">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AAAGATG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --json=stats.json -r=rest_output.fa -o out1.fa cutadapt_rest_fa.faProcessing single-end reads on 5 cores ...Finished in 0.034 s (6759.214 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       5Reads with adapters:                         5 (100.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             5 (100.0%)Total basepairs processed:            97 bpTotal written (filtered):             35 bp (36.1%)=== Adapter 1 ===Sequence: AAAGATG; Type: regular 3'; Length: 7; Trimmed: 5 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 100.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts710.0011210.0011420.0021510.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #9)" name="8" time="9.666667699813843">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 8, "time_seconds": 9.666667699813843, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #9)" name="8" time="32.87497043609619">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --nextseq-trim=20 --minimum-length=1 -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 5 cores ...Finished in 0.083 s (841.714 µs/read; 0.07 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         4 (4.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):            99 (100.0%)Total basepairs processed:        24,849 bpQuality-trimmed:                     286 bp (1.2%)Total written (filtered):         24,550 bp (98.8%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 75.0%  G: 25.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts331.503410.401
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #10)" name="9" time="24.654402256011963">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "library|input_1": {   "id": "0426e8327f8e2661",   "src": "hda"  },  "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC",  "library|r1|adapters_0|adapter_source|adapter_source_list": "user",  "library|type": "single",  "output_selector": [   "report",   "info_file"  ] }, "job": {  "command_line": "ln -f -s \u0027/galaxy/server/database/objects/5/a/2/dataset_5a2fde5e-9a96-4560-bfcf-9db67327aac5.dat\u0027 \u0027cutadapt_small_fastq.fq\u0027 \u0026\u0026  cutadapt  -j=${GALAXY_SLOTS:-4}   -a \u0027AGATCGGAAGAGC\u0027    --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=1      --info-file=\u0027/galaxy/server/database/objects/f/8/b/dataset_f8bbbb5b-cc50-4696-b810-09b7331ef26d.dat\u0027 -o \u0027out1.fq\u0027  \u0027cutadapt_small_fastq.fq\u0027  \u003e report.txt",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-12-02T06:47:49.439116",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-72jf8",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "5bd4c17d212de8fe",  "inputs": {   "library|input_1": {    "id": "0426e8327f8e2661",    "src": "hda",    "uuid": "5a2fde5e-9a96-4560-bfcf-9db67327aac5"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "info_file": {    "id": "1205319cc01a8aec",    "src": "hda",    "uuid": "f8bbbb5b-cc50-4696-b810-09b7331ef26d"   },   "out1": {    "id": "fcbdc707e916fff9",    "src": "hda",    "uuid": "98a0b8d8-dccb-4948-8b1e-1c8a6841f18b"   },   "report": {    "id": "cb92a412856809e5",    "src": "hda",    "uuid": "9ae84674-f310-4f3d-9be4-0c7a9ceb6bce"   }  },  "params": {   "__input_ext": "\"input\"",   "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}",   "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 87, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}",   "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}",   "output_selector": "[\"report\", \"info_file\"]",   "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T06:47:54.528240",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 9, "time_seconds": 24.654402256011963, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #10)" name="9" time="33.25123333930969">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deeptools_bam_compare (Test #1)" name="0" time="45.9899525642395">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            bamFilesList: ['one.bam', 'two.bam']binLength: 5numberOfSamples: 0blackListFileName: NoneskipZeroOverZero: Falsebed_and_bin: FalsegenomeChunkSize: NonedefaultFragmentLength: read lengthnumberOfProcessors: 8verbose: Falseregion: NonebedFile: NoneminMappingQuality: NoneignoreDuplicates: FalsechrsToSkip: []stepSize: 5center_read: FalsesamFlag_include: NonesamFlag_exclude: NoneminFragmentLength: 0maxFragmentLength: 0zerosToNans: FalsesmoothLength: Nonesave_data: Falseout_file_for_raw_data: NonemaxPairedFragmentLength: 1000
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deeptools_bam_compare (Test #2)" name="1" time="31.07661771774292">
        
            
            <system-out><![CDATA[
            Due to filtering, 83.33333333333334% of the aforementioned alignments will be used 39.16666666666667Due to filtering, 83.33333333333334% of the aforementioned alignments will be used 39.16666666666667
            ]]></system-out>
            <system-err><![CDATA[
            bamFilesList: ['one.bam', 'two.bam']binLength: 10numberOfSamples: 0blackListFileName: NoneskipZeroOverZero: Falsebed_and_bin: FalsegenomeChunkSize: NonedefaultFragmentLength: read lengthnumberOfProcessors: 8verbose: Falseregion: NonebedFile: NoneminMappingQuality: 1ignoreDuplicates: FalsechrsToSkip: []stepSize: 10center_read: FalsesamFlag_include: NonesamFlag_exclude: NoneminFragmentLength: 0maxFragmentLength: 0zerosToNans: FalsesmoothLength: Nonesave_data: Falseout_file_for_raw_data: NonemaxPairedFragmentLength: 1000
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="dropletutils_read_10x (Test #1)" name="0" time="0.29875707626342773">
        
            <error type="error" message="Input staging problem: Test input file (matrix.mtx) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (matrix.mtx) cannot be found.", "status": "error", "test_index": 0, "time_seconds": 0.29875707626342773, "tool_id": "dropletutils_read_10x", "tool_version": "1.0.4+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="fastqc (Test #1)" name="0" time="49.38847804069519">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #1)" name="0" time="35.96448802947998">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #2)" name="1" time="36.06123208999634">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #2)" name="1" time="12.009870529174805">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 1, "time_seconds": 12.009870529174805, "tool_id": "fastqc", "tool_version": "0.74+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="fastqc (Test #3)" name="2" time="38.830949783325195">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #3)" name="2" time="28.144790649414062">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "adapters": {   "id": "8b3653c092f3ba23",   "src": "hda"  },  "input_file": {   "id": "c97e3484c975b55d",   "src": "hda"  } }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/9/6/4/dataset_96494bb7-c70a-4bd7-93c8-72f325fd5cca.dat\u0027 \u00271000trimmed_fastq\u0027 \u0026\u0026 mkdir -p \u0027/galaxy/server/database/objects/6/b/a/dataset_6ba2bdc7-281a-473e-af32-ab49d03156d0_files\u0027 \u0026\u0026 fastqc --outdir \u0027/galaxy/server/database/objects/6/b/a/dataset_6ba2bdc7-281a-473e-af32-ab49d03156d0_files\u0027  --adapters \u0027/galaxy/server/database/objects/9/f/4/dataset_9f4a083f-bf65-4198-a7f0-445464b648ad.dat\u0027  --threads ${GALAXY_SLOTS:-2} --dir ${TEMP:-$_GALAXY_JOB_TMP_DIR} --quiet --extract  --kmers 7 -f \u0027fastq\u0027 \u00271000trimmed_fastq\u0027  \u0026\u0026 cp \u0027/galaxy/server/database/objects/6/b/a/dataset_6ba2bdc7-281a-473e-af32-ab49d03156d0_files\u0027/*/fastqc_data.txt output.txt \u0026\u0026 cp \u0027/galaxy/server/database/objects/6/b/a/dataset_6ba2bdc7-281a-473e-af32-ab49d03156d0_files\u0027/*\\.html output.html",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-12-02T07:38:00.116133",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-dm6fg",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "2c0f1661a92a5b40",  "inputs": {   "adapters": {    "id": "8b3653c092f3ba23",    "src": "hda",    "uuid": "9f4a083f-bf65-4198-a7f0-445464b648ad"   },   "input_file": {    "id": "c97e3484c975b55d",    "src": "hda",    "uuid": "96494bb7-c70a-4bd7-93c8-72f325fd5cca"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "html_file": {    "id": "0c35bb4fe70e634a",    "src": "hda",    "uuid": "6ba2bdc7-281a-473e-af32-ab49d03156d0"   },   "text_file": {    "id": "7b132b31f274c760",    "src": "hda",    "uuid": "7cf127a8-5fa3-4ae0-8df6-e5ed7dfcd5a7"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "contaminants": null,   "dbkey": "\"?\"",   "kmers": "\"7\"",   "limits": null,   "min_length": "\"\"",   "nogroup": "false"  },  "state": "error",  "stderr": "",  "stdout": "null\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.74+galaxy1",  "tool_stderr": "",  "tool_stdout": "null\n",  "update_time": "2024-12-02T07:38:07.527641",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.74+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.74+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.74+galaxy1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 2, "time_seconds": 28.144790649414062, "tool_id": "fastqc", "tool_version": "0.74+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #4)" name="3" time="37.23108744621277">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #4)" name="3" time="35.70478320121765">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #5)" name="4" time="37.49438667297363">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #5)" name="4" time="11.13207745552063">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 4, "time_seconds": 11.13207745552063, "tool_id": "fastqc", "tool_version": "0.74+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="fastqc (Test #6)" name="5" time="35.482412338256836">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #6)" name="5" time="34.26392102241516">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #7)" name="6" time="35.25573921203613">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #7)" name="6" time="35.30267405509949">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #8)" name="7" time="34.45980167388916">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #8)" name="7" time="34.98796534538269">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="jq (Test #1)" name="0" time="34.379976987838745">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="jq (Test #2)" name="1" time="31.58614492416382">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_hist (Test #1)" name="0" time="56.37263822555542">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_hist (Test #2)" name="1" time="39.45186257362366">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_hist (Test #3)" name="2" time="34.01405644416809">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #1)" name="0" time="81.53723001480103">
        
            
            <system-out><![CDATA[
            Dec 02 07:41:31 ..... started STAR runDec 02 07:41:31 ... starting to generate Genome filesDec 02 07:41:31 ..... processing annotations GTFDec 02 07:41:31 ... starting to sort Suffix Array. This may take a long time...Dec 02 07:41:31 ... sorting Suffix Array chunks and saving them to disk...Dec 02 07:41:31 ... loading chunks from disk, packing SA...Dec 02 07:41:31 ... finished generating suffix arrayDec 02 07:41:31 ... generating Suffix Array indexDec 02 07:41:31 ... completed Suffix Array indexDec 02 07:41:31 ..... inserting junctions into the genome indicesDec 02 07:41:31 ... writing Genome to disk ...Dec 02 07:41:31 ... writing Suffix Array to disk ...Dec 02 07:41:31 ... writing SAindex to diskDec 02 07:41:31 ..... finished successfullyDec 02 07:41:31 ..... started STAR runDec 02 07:41:31 ..... loading genomeDec 02 07:41:31 ..... started mappingDec 02 07:41:48 ..... finished mappingDec 02 07:41:48 ..... started Solo countingDec 02 07:41:48 ..... finished Solo countingDec 02 07:41:48 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #1)" name="0" time="5939.318391561508">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "refGenomeSource|geneSource": "history",  "refGenomeSource|genomeFastaFiles": {   "id": "e9f0d3049fdcdbb0",   "src": "hda"  },  "refGenomeSource|genomeSAindexNbases": "4",  "refGenomeSource|sjdbGTFfile": {   "id": "fc3c6721df159947",   "src": "hda"  },  "refGenomeSource|sjdbOverhang": "100",  "sc|input_types|input1": {   "id": "e754769d848774f1",   "src": "hda"  },  "sc|input_types|input2": {   "id": "51fbb0f776e70d49",   "src": "hda"  },  "sc|input_types|use": "repeat",  "sc|params|chemistry": "CR3",  "sc|soloCBwhitelist": {   "id": "eda300c23af3b4d7",   "src": "hda"  },  "sc|soloUMIdedup": "1MM_All",  "sc|solo_type": "CB_UMI_Simple",  "solo|filter|filter_type": "no_filter",  "solo|soloFeatures": "Gene",  "solo|soloStrand": "Forward" }, "job": {  "command_line": null,  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-12-02T07:48:08.215111",  "dependencies": [],  "exit_code": null,  "external_id": null,  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "93d1267abd58dbf1",  "inputs": {   "refGenomeSource|genomeFastaFiles": {    "id": "fdaef30040010622",    "src": "hda",    "uuid": "9d63ca39-1c5e-4c27-ad45-78189d989275"   },   "refGenomeSource|sjdbGTFfile": {    "id": "fc3c6721df159947",    "src": "hda",    "uuid": "a00171f3-c8ff-4cf7-be50-8eaf0356aca9"   },   "sc|input_types|input1": {    "id": "e754769d848774f1",    "src": "hda",    "uuid": "2b8f0505-e749-48d5-9978-b2227a22b072"   },   "sc|input_types|input11": {    "id": "e754769d848774f1",    "src": "hda",    "uuid": "2b8f0505-e749-48d5-9978-b2227a22b072"   },   "sc|input_types|input2": {    "id": "51fbb0f776e70d49",    "src": "hda",    "uuid": "7e13962d-c367-4035-8151-6996398c3922"   },   "sc|input_types|input21": {    "id": "51fbb0f776e70d49",    "src": "hda",    "uuid": "7e13962d-c367-4035-8151-6996398c3922"   },   "sc|soloCBwhitelist": {    "id": "eda300c23af3b4d7",    "src": "hda",    "uuid": "46b8242d-4d70-47c5-a141-3243f7814581"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_BAM": {    "id": "546a572e391670ad",    "src": "hda",    "uuid": "4e41637e-a386-4c51-9116-c30384596950"   },   "output_barcodes": {    "id": "7aceda911711fe23",    "src": "hda",    "uuid": "a0717a78-aa06-4173-bfed-8c6a963d0c33"   },   "output_genes": {    "id": "e64b7f4e0a508464",    "src": "hda",    "uuid": "33446cff-0c50-4df8-83a3-4662c43e9d3b"   },   "output_log": {    "id": "80a82760f4df5230",    "src": "hda",    "uuid": "2e27edec-663b-488f-be8e-423e7dfc1a5c"   },   "output_matrix": {    "id": "47069f51f738746a",    "src": "hda",    "uuid": "8afdf6b1-f6d9-40aa-aa93-f1e44c2eeabc"   },   "output_stats": {    "id": "3913f0d2ef40a6a7",    "src": "hda",    "uuid": "693fff24-9244-46fc-8fc8-205e71fcd69b"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "refGenomeSource": "{\"__current_case__\": 1, \"geneSource\": \"history\", \"genomeFastaFiles\": {\"values\": [{\"id\": 462, \"src\": \"hda\"}]}, \"genomeSAindexNbases\": \"4\", \"sjdbGTFfile\": {\"values\": [{\"id\": 458, \"src\": \"hda\"}]}, \"sjdbOverhang\": \"100\"}",   "sc": "{\"__current_case__\": 0, \"input_types\": {\"__current_case__\": 0, \"input1\": {\"values\": [{\"id\": 459, \"src\": \"hda\"}]}, \"input2\": {\"values\": [{\"id\": 460, \"src\": \"hda\"}]}, \"use\": \"repeat\"}, \"params\": {\"__current_case__\": 1, \"chemistry\": \"CR3\"}, \"soloBarcodeReadLength\": true, \"soloCBmatchWLtype\": \"1MM_multi\", \"soloCBwhitelist\": {\"values\": [{\"id\": 461, \"src\": \"hda\"}]}, \"soloUMIdedup\": \"1MM_All\", \"solo_type\": \"CB_UMI_Simple\"}",   "solo": "{\"filter\": {\"__current_case__\": 3, \"filter_type\": \"no_filter\"}, \"soloFeatures\": \"Gene\", \"soloOutFormatFeaturesGeneField3\": \"Gene Expression\", \"soloStrand\": \"Forward\", \"soloUMIfiltering\": \"-\"}"  },  "state": "paused",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/rna_starsolo/rna_starsolo/2.7.8a",  "tool_stderr": null,  "tool_stdout": null,  "update_time": "2024-12-02T07:48:12.514005",  "user_email": "tests@fake.org" }, "output_problems": [  "Timed out after 600.25 seconds waiting on tool test run.",  "Timed out after 600.25 seconds waiting on tool test run.",  "Timed out after 600.25 seconds waiting on tool test run.",  "Timed out after 600.25 seconds waiting on tool test run.",  "Timed out after 600.25 seconds waiting on tool test run.",  "Timed out after 600.25 seconds waiting on tool test run." ], "status": "failure", "test_index": 0, "time_seconds": 5939.318391561508, "tool_id": "rna_starsolo", "tool_version": "2.7.8a"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #2)" name="1" time="77.81746554374695">
        
            
            <system-out><![CDATA[
            Dec 02 07:42:49 ..... started STAR runDec 02 07:42:49 ... starting to generate Genome filesDec 02 07:42:49 ..... processing annotations GTFDec 02 07:42:49 ... starting to sort Suffix Array. This may take a long time...Dec 02 07:42:49 ... sorting Suffix Array chunks and saving them to disk...Dec 02 07:42:49 ... loading chunks from disk, packing SA...Dec 02 07:42:49 ... finished generating suffix arrayDec 02 07:42:49 ... generating Suffix Array indexDec 02 07:42:49 ... completed Suffix Array indexDec 02 07:42:49 ..... inserting junctions into the genome indicesDec 02 07:42:49 ... writing Genome to disk ...Dec 02 07:42:49 ... writing Suffix Array to disk ...Dec 02 07:42:49 ... writing SAindex to diskDec 02 07:42:49 ..... finished successfullyDec 02 07:42:49 ..... started STAR runDec 02 07:42:49 ..... loading genomeDec 02 07:42:49 ..... started mappingDec 02 07:43:06 ..... finished mappingDec 02 07:43:06 ..... started Solo countingDec 02 07:43:06 ..... finished Solo countingDec 02 07:43:06 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #2)" name="1" time="109.46680307388306">
        
            
            <system-out><![CDATA[
            Dec 02 09:27:49 ..... started STAR runDec 02 09:27:49 ... starting to generate Genome filesDec 02 09:27:49 ..... processing annotations GTFDec 02 09:27:49 ... starting to sort Suffix Array. This may take a long time...Dec 02 09:27:49 ... sorting Suffix Array chunks and saving them to disk...Dec 02 09:27:49 ... loading chunks from disk, packing SA...Dec 02 09:27:49 ... finished generating suffix arrayDec 02 09:27:49 ... generating Suffix Array indexDec 02 09:27:49 ... completed Suffix Array indexDec 02 09:27:49 ..... inserting junctions into the genome indicesDec 02 09:27:49 ... writing Genome to disk ...Dec 02 09:27:49 ... writing Suffix Array to disk ...Dec 02 09:27:49 ... writing SAindex to diskDec 02 09:27:49 ..... finished successfullyDec 02 09:27:49 ..... started STAR runDec 02 09:27:49 ..... loading genomeDec 02 09:27:49 ..... started mappingDec 02 09:28:07 ..... finished mappingDec 02 09:28:07 ..... started Solo countingDec 02 09:28:07 ..... finished Solo countingDec 02 09:28:07 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #3)" name="2" time="10.827083587646484">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 2, "time_seconds": 10.827083587646484, "tool_id": "rna_starsolo", "tool_version": "2.7.8a"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #3)" name="2" time="11.722314834594727">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 2, "time_seconds": 11.722314834594727, "tool_id": "rna_starsolo", "tool_version": "2.7.8a"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #4)" name="3" time="80.65837550163269">
        
            
            <system-out><![CDATA[
            Dec 02 07:44:22 ..... started STAR runDec 02 07:44:22 ... starting to generate Genome filesDec 02 07:44:22 ..... processing annotations GTFDec 02 07:44:22 ... starting to sort Suffix Array. This may take a long time...Dec 02 07:44:22 ... sorting Suffix Array chunks and saving them to disk...Dec 02 07:44:22 ... loading chunks from disk, packing SA...Dec 02 07:44:22 ... finished generating suffix arrayDec 02 07:44:22 ... generating Suffix Array indexDec 02 07:44:22 ... completed Suffix Array indexDec 02 07:44:22 ..... inserting junctions into the genome indicesDec 02 07:44:22 ... writing Genome to disk ...Dec 02 07:44:22 ... writing Suffix Array to disk ...Dec 02 07:44:22 ... writing SAindex to diskDec 02 07:44:22 ..... finished successfullyDec 02 07:44:22 ..... started STAR runDec 02 07:44:22 ..... loading genomeDec 02 07:44:22 ..... started mappingDec 02 07:44:40 ..... finished mappingDec 02 07:44:40 ..... started Solo countingDec 02 07:44:40 ..... finished Solo countingDec 02 07:44:40 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #4)" name="3" time="80.29983687400818">
        
            
            <system-out><![CDATA[
            Dec 02 09:29:24 ..... started STAR runDec 02 09:29:24 ... starting to generate Genome filesDec 02 09:29:24 ..... processing annotations GTFDec 02 09:29:24 ... starting to sort Suffix Array. This may take a long time...Dec 02 09:29:24 ... sorting Suffix Array chunks and saving them to disk...Dec 02 09:29:25 ... loading chunks from disk, packing SA...Dec 02 09:29:25 ... finished generating suffix arrayDec 02 09:29:25 ... generating Suffix Array indexDec 02 09:29:25 ... completed Suffix Array indexDec 02 09:29:25 ..... inserting junctions into the genome indicesDec 02 09:29:25 ... writing Genome to disk ...Dec 02 09:29:25 ... writing Suffix Array to disk ...Dec 02 09:29:25 ... writing SAindex to diskDec 02 09:29:25 ..... finished successfullyDec 02 09:29:25 ..... started STAR runDec 02 09:29:25 ..... loading genomeDec 02 09:29:25 ..... started mappingDec 02 09:29:42 ..... finished mappingDec 02 09:29:42 ..... started Solo countingDec 02 09:29:42 ..... finished Solo countingDec 02 09:29:42 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #5)" name="4" time="20.833293199539185">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 4, "time_seconds": 20.833293199539185, "tool_id": "rna_starsolo", "tool_version": "2.7.8a"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #5)" name="4" time="78.27758431434631">
        
            
            <system-out><![CDATA[
            Dec 02 09:30:42 ..... started STAR runDec 02 09:30:42 ... starting to generate Genome filesDec 02 09:30:42 ..... processing annotations GTFDec 02 09:30:42 ... starting to sort Suffix Array. This may take a long time...Dec 02 09:30:42 ... sorting Suffix Array chunks and saving them to disk...Dec 02 09:30:42 ... loading chunks from disk, packing SA...Dec 02 09:30:42 ... finished generating suffix arrayDec 02 09:30:42 ... generating Suffix Array indexDec 02 09:30:42 ... completed Suffix Array indexDec 02 09:30:42 ..... inserting junctions into the genome indicesDec 02 09:30:42 ... writing Genome to disk ...Dec 02 09:30:42 ... writing Suffix Array to disk ...Dec 02 09:30:42 ... writing SAindex to diskDec 02 09:30:42 ..... finished successfullyDec 02 09:30:42 ..... started STAR runDec 02 09:30:42 ..... loading genomeDec 02 09:30:42 ..... started mappingDec 02 09:31:00 ..... finished mappingDec 02 09:31:00 ..... started Solo countingDec 02 09:31:00 ..... finished Solo countingDec 02 09:31:00 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #6)" name="5" time="26.263311624526978">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 5, "time_seconds": 26.263311624526978, "tool_id": "rna_starsolo", "tool_version": "2.7.8a"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #6)" name="5" time="79.64045095443726">
        
            
            <system-out><![CDATA[
            Dec 02 09:32:01 ..... started STAR runDec 02 09:32:01 ... starting to generate Genome filesDec 02 09:32:01 ..... processing annotations GTFDec 02 09:32:01 ... starting to sort Suffix Array. This may take a long time...Dec 02 09:32:01 ... sorting Suffix Array chunks and saving them to disk...Dec 02 09:32:01 ... loading chunks from disk, packing SA...Dec 02 09:32:01 ... finished generating suffix arrayDec 02 09:32:01 ... generating Suffix Array indexDec 02 09:32:01 ... completed Suffix Array indexDec 02 09:32:01 ..... inserting junctions into the genome indicesDec 02 09:32:01 ... writing Genome to disk ...Dec 02 09:32:01 ... writing Suffix Array to disk ...Dec 02 09:32:01 ... writing SAindex to diskDec 02 09:32:01 ..... finished successfullyDec 02 09:32:01 ..... started STAR runDec 02 09:32:01 ..... loading genomeDec 02 09:32:01 ..... started mappingDec 02 09:32:19 ..... finished mappingDec 02 09:32:19 ..... started Solo countingDec 02 09:32:19 ..... finished Solo countingDec 02 09:32:19 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #7)" name="6" time="25.469691514968872">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 6, "time_seconds": 25.469691514968872, "tool_id": "rna_starsolo", "tool_version": "2.7.8a"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #7)" name="6" time="66.46068120002747">
        
            
            <system-out><![CDATA[
            Dec 02 09:33:24 ..... started STAR runDec 02 09:33:24 ... starting to generate Genome filesDec 02 09:33:24 ..... processing annotations GTFDec 02 09:33:24 ... starting to sort Suffix Array. This may take a long time...Dec 02 09:33:25 ... sorting Suffix Array chunks and saving them to disk...Dec 02 09:33:25 ... loading chunks from disk, packing SA...Dec 02 09:33:25 ... finished generating suffix arrayDec 02 09:33:25 ... generating Suffix Array indexDec 02 09:33:25 ... completed Suffix Array indexDec 02 09:33:25 ..... inserting junctions into the genome indicesDec 02 09:33:25 ... writing Genome to disk ...Dec 02 09:33:25 ... writing Suffix Array to disk ...Dec 02 09:33:25 ... writing SAindex to diskDec 02 09:33:25 ..... finished successfullyDec 02 09:33:25 ..... started STAR runDec 02 09:33:25 ..... loading genomeDec 02 09:33:25 ..... started mappingDec 02 09:33:26 ..... finished mappingDec 02 09:33:26 ..... started Solo countingDec 02 09:33:26 ..... finished Solo countingDec 02 09:33:26 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #8)" name="7" time="85.93278360366821">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 7, "time_seconds": 85.93278360366821, "tool_id": "rna_starsolo", "tool_version": "2.7.8a"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #8)" name="7" time="130.59772062301636">
        
            
            <system-out><![CDATA[
            Dec 02 09:35:32 ..... started STAR runDec 02 09:35:32 ... starting to generate Genome filesDec 02 09:35:32 ..... processing annotations GTFDec 02 09:35:32 ... starting to sort Suffix Array. This may take a long time...Dec 02 09:35:32 ... sorting Suffix Array chunks and saving them to disk...Dec 02 09:35:32 ... loading chunks from disk, packing SA...Dec 02 09:35:32 ... finished generating suffix arrayDec 02 09:35:32 ... generating Suffix Array indexDec 02 09:35:32 ... completed Suffix Array indexDec 02 09:35:32 ..... inserting junctions into the genome indicesDec 02 09:35:32 ... writing Genome to disk ...Dec 02 09:35:32 ... writing Suffix Array to disk ...Dec 02 09:35:32 ... writing SAindex to diskDec 02 09:35:32 ..... finished successfullyDec 02 09:35:32 ..... started STAR runDec 02 09:35:32 ..... loading genomeDec 02 09:35:32 ..... started mappingDec 02 09:35:36 ..... finished mappingDec 02 09:35:36 ..... started Solo countingDec 02 09:35:36 ..... finished Solo countingDec 02 09:35:36 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_split (Test #1)" name="0" time="36.73804068565369">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input_bam": {   "id": "361bf7bc3a9ee7e7",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026  samtools split -f \u0027Read_Group_%!.bam\u0027 -u \u0027/galaxy/server/database/objects/f/f/d/dataset_ffdec519-8329-461e-b8ac-ba2a4336156a.dat\u0027 -@ $addthreads \u0027/galaxy/server/database/objects/1/c/a/dataset_1ca5321e-9731-47c5-a8b0-2f194f106132.dat\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-12-02T09:51:37.457544",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-wv6zn",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "4a2a761a7db8ad9a",  "inputs": {   "input_bam": {    "id": "361bf7bc3a9ee7e7",    "src": "hda",    "uuid": "1ca5321e-9731-47c5-a8b0-2f194f106132"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733133102.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:51:42"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733133102.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:51:42"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "__new_primary_file_output|Elephant__": {    "id": "080b7874be5b6b72",    "src": "hda",    "uuid": "c925eb83-0ffb-403f-8864-403428626328"   },   "__new_primary_file_output|Human__": {    "id": "1134af91bcc4b998",    "src": "hda",    "uuid": "3d7abda9-8b57-4556-bf94-ab7f09efc533"   },   "__new_primary_file_output|Mouse__": {    "id": "930f8591c5397f04",    "src": "hda",    "uuid": "b3140aee-000c-463e-8286-9cc6a0b69031"   },   "output": {    "id": "ea0bb0dd4e608cd3",    "src": "hda",    "uuid": "ffdec519-8329-461e-b8ac-ba2a4336156a"   }  },  "params": {   "__input_ext": "\"bam\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "header": null  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_split/samtools_split/1.9",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:51:54.543004",  "user_email": "tests@fake.org" }, "output_problems": [  "Primary output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_mxjgc61c.sam v. /tmp/history_bam_converted_to_sam_t2oaovj4.sam )\n--- local_file\n+++ history_data\n@@ -6,11 +6,11 @@\n @PG\tID:bowtie2-D76CD0\tPN:bowtie2\tVN:2.1.0\n @PG\tID:bowtie2-58C6F748\tPN:bowtie2\tVN:2.1.0\n @PG\tID:bowtie2-D76CD0-8B37AF2\tPN:bowtie2\tVN:2.1.0\n-@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /tmp/tmpZSM0ep/files/000/dataset_2.dat /tmp/tmpZSM0ep/files/000/dataset_1.dat\n-@PG\tID:samtools.1\tPN:samtools\tPP:bowtie2-31DAC016\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /tmp/tmpZSM0ep/files/000/dataset_2.dat /tmp/tmpZSM0ep/files/000/dataset_1.dat\n-@PG\tID:samtools.2\tPN:samtools\tPP:bowtie2-D76CD0\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /tmp/tmpZSM0ep/files/000/dataset_2.dat /tmp/tmpZSM0ep/files/000/dataset_1.dat\n-@PG\tID:samtools.3\tPN:samtools\tPP:bowtie2-58C6F748\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /tmp/tmpZSM0ep/files/000/dataset_2.dat /tmp/tmpZSM0ep/files/000/dataset_1.dat\n-@PG\tID:samtools.4\tPN:samtools\tPP:bowtie2-D76CD0-8B37AF2\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /tmp/tmpZSM0ep/files/000/dataset_2.dat /tmp/tmpZSM0ep/files/000/dataset_1.dat\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /galaxy/server/database/objects/f/f/d/dataset_ffdec519-8329-461e-b8ac-ba2a4336156a.dat -@ 0 /galaxy/server/database/objects/1/c/a/dataset_1ca5321e-9731-47c5-a8b0-2f194f106132.dat\n+@PG\tID:samtools.1\tPN:samtools\tPP:bowtie2-31DAC016\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /galaxy/server/database/objects/f/f/d/dataset_ffdec519-8329-461e-b8ac-ba2a4336156a.dat -@ 0 /galaxy/server/database/objects/1/c/a/dataset_1ca5321e-9731-47c5-a8b0-2f194f106132.dat\n+@PG\tID:samtools.2\tPN:samtools\tPP:bowtie2-D76CD0\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /galaxy/server/database/objects/f/f/d/dataset_ffdec519-8329-461e-b8ac-ba2a4336156a.dat -@ 0 /galaxy/server/database/objects/1/c/a/dataset_1ca5321e-9731-47c5-a8b0-2f194f106132.dat\n+@PG\tID:samtools.3\tPN:samtools\tPP:bowtie2-58C6F748\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /galaxy/server/database/objects/f/f/d/dataset_ffdec519-8329-461e-b8ac-ba2a4336156a.dat -@ 0 /galaxy/server/database/objects/1/c/a/dataset_1ca5321e-9731-47c5-a8b0-2f194f106132.dat\n+@PG\tID:samtools.4\tPN:samtools\tPP:bowtie2-D76CD0-8B37AF2\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /galaxy/server/database/objects/f/f/d/dataset_ffdec519-8329-461e-b8ac-ba2a4336156a.dat -@ 0 /galaxy/server/database/objects/1/c/a/dataset_1ca5321e-9731-47c5-a8b0-2f194f106132.dat\n phiX174_9_527_1:0:0_0:0:0_54/1\t0\tphiX174\t9\t42\t70M\t*\t0\t0\tTCGCTTCCATGACGCAGAAGTTAACACTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATCAAGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:65A4\tYT:Z:UU\tRG:Z:Mouse\n phiX174_71_657_0:0:0_1:0:0_72/1\t0\tphiX174\t71\t42\t70M\t*\t0\t0\tGATAAAGCAGGAATTACTACTGCTTGTTTACGAATTAAATCGAAGTGGACTGCTGGCGGAAAATGAGAAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYT:Z:UU\tRG:Z:Mouse\n phiX174_99_617_1:0:0_2:1:0_a2/1\t0\tphiX174\t99\t42\t70M\t*\t0\t0\tTACGAATTAAATCGAAGTGGACTGCTTGCGGAAAATGAGAAAATTCGACCTATCCTTGCGCAGCTCGAGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:26G43\tYT:Z:UU\tRG:Z:Mouse\n" ], "status": "failure", "test_index": 0, "time_seconds": 36.73804068565369, "tool_id": "samtools_split", "tool_version": "1.9"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #1)" name="0" time="35.64985466003418">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "852c5a24916765f6",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/c/1/f/dataset_c1ff977a-e283-4ce1-850d-2f165fcdf355.dat\u0027 infile \u0026\u0026        samtools view -@ $addthreads -b      -o outfile      infile    \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:38:22.020544",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-g2pmj",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "7ca10d8a435e0c88",  "inputs": {   "input": {    "id": "852c5a24916765f6",    "src": "hda",    "uuid": "c1ff977a-e283-4ce1-850d-2f165fcdf355"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733132307.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:38:27"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733132307.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:38:27"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "10e5bf9ad8437aed",    "src": "hda",    "uuid": "0fc74ffb-a083-4764-9744-f67387963248"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:38:38.707196",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (sam_to_bam_out1.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 0, "time_seconds": 35.64985466003418, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #2)" name="1" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 1, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #11)" name="10" time="31.269853591918945">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "0c5bb62b93a42578",   "src": "hda"  },  "mode|output_options|output_format|oformat": "sam",  "mode|output_options|output_format|with_header": true }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/9/8/8/dataset_98899fac-df40-4825-90bf-14584c8d2d3d.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/7/d/c/metadata_7dcea0ab-1d05-40f2-94e2-0fad67404176.dat\u0027 infile.bai \u0026\u0026        samtools view -@ $addthreads      -h  -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:42:47.948073",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-k6qm7",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "800b8726e23917ae",  "inputs": {   "input": {    "id": "0c5bb62b93a42578",    "src": "hda",    "uuid": "98899fac-df40-4825-90bf-14584c8d2d3d"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733132569.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:42:49"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733132569.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:42:49"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "13eb6ca009ce7da6",    "src": "hda",    "uuid": "7ab0cc5e-208e-4142-a23e-4f6f307be0e0"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 1, \"oformat\": \"sam\", \"with_header\": true}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:43:00.533183",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (bam_to_sam_out1.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 10, "time_seconds": 31.269853591918945, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #12)" name="11" time="31.338727712631226">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "cd087cd1e3e7bd70",   "src": "hda"  },  "mode|output_options|output_format|oformat": "sam",  "mode|outtype": "header" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/8/1/1/dataset_81137715-cea3-4a7f-86d8-486d487a9b5b.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/6/a/5/metadata_6a59e4a8-0dad-4cd0-b744-133af44854a4.dat\u0027 infile.bai \u0026\u0026    samtools view -H  -o outfile   infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:43:20.221515",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-rc5g2",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "a2527a61a5583966",  "inputs": {   "input": {    "id": "cd087cd1e3e7bd70",    "src": "hda",    "uuid": "81137715-cea3-4a7f-86d8-486d487a9b5b"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733132601.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:43:21"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733132601.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:43:21"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "0ca81107f2093dfe",    "src": "hda",    "uuid": "19015e7d-51a1-4e40-9f7d-41d0170fa718"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 2, \"output_options\": {\"__current_case__\": 0, \"output_format\": {\"__current_case__\": 1, \"oformat\": \"sam\"}, \"reads_report_type\": \"\"}, \"outtype\": \"header\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:43:31.883349",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (bam_to_sam_out2.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 11, "time_seconds": 31.338727712631226, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #13)" name="12" time="33.43437480926514">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "917f27f669664881",   "src": "hda"  },  "mode|output_options|output_format|oformat": "sam",  "mode|output_options|output_format|with_header": false }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/e/8/a/dataset_e8a1ec65-aa86-4b2a-abf7-dacf6d89f8f8.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/1/6/4/metadata_1644b51d-9acc-4c86-ac90-34a5df42ded7.dat\u0027 infile.bai \u0026\u0026        samtools view -@ $addthreads        -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:43:52.523536",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-bj8gr",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "2608cb4f87713f35",  "inputs": {   "input": {    "id": "917f27f669664881",    "src": "hda",    "uuid": "e8a1ec65-aa86-4b2a-abf7-dacf6d89f8f8"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733132634.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:43:54"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733132634.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:43:54"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "dbfd5d81216f61a0",    "src": "hda",    "uuid": "948cef56-5f15-45e9-b100-684f521957e4"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 1, \"oformat\": \"sam\", \"with_header\": false}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:44:05.430827",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (bam_to_sam_out3.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 12, "time_seconds": 33.43437480926514, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #14)" name="13" time="10.943222522735596">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 13, "time_seconds": 10.943222522735596, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #15)" name="14" time="32.0079083442688">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "0735d02009990287",   "src": "hda"  },  "input": {   "id": "0c637a42b5989bde",   "src": "hda"  },  "mode|filter_config|cond_region|select_region": "no",  "mode|output_options|output_format|oformat": "cram",  "mode|outtype": "selected_reads" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/3/7/0/dataset_3703dd31-1e93-4f70-9a1c-59be565f7e28.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/5/7/e/dataset_57e025cc-90fc-457b-b892-1158ffbe1a17.dat\u0027 infile \u0026\u0026         samtools view -@ $addthreads -C      -o outfile  --output-fmt-option no_ref   -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:44:36.574627",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-tdr6g",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "145a85a1e9474dd2",  "inputs": {   "addref_cond|ref": {    "id": "0735d02009990287",    "src": "hda",    "uuid": "3703dd31-1e93-4f70-9a1c-59be565f7e28"   },   "input": {    "id": "0c637a42b5989bde",    "src": "hda",    "uuid": "57e025cc-90fc-457b-b892-1158ffbe1a17"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733132678.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:44:38"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733132678.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:44:38"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "31bea4dca52de9cf",    "src": "hda",    "uuid": "73c8d1c2-6528-44c3-8f6c-26fd48e5556b"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 596, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 3, \"oformat\": \"cram\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"1.0\", \"seed\": \"\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:44:48.873965",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test.cram) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 14, "time_seconds": 32.0079083442688, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #16)" name="15" time="32.44442939758301">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "d28f6f60ed8b1dcf",   "src": "hda"  },  "input": {   "id": "127c07a5ac9bb87c",   "src": "hda"  },  "mode|filter_config|cond_region|select_region": "no",  "mode|output_options|output_format|oformat": "cram",  "mode|outtype": "selected_reads" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/0/8/5/dataset_0857db0c-c00e-400b-99ee-ba2ca9714c22.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/0/2/5/dataset_025496d4-9afd-43ab-a137-1fcab0323c61.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/d/b/3/metadata_db3da597-d899-44f8-9d9e-a57cd5203fc5.dat\u0027 infile.bai \u0026\u0026         samtools view -@ $addthreads -C      -o outfile  --output-fmt-option no_ref   -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:45:09.182160",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-spckr",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "128723f9076bee2e",  "inputs": {   "addref_cond|ref": {    "id": "d28f6f60ed8b1dcf",    "src": "hda",    "uuid": "0857db0c-c00e-400b-99ee-ba2ca9714c22"   },   "input": {    "id": "127c07a5ac9bb87c",    "src": "hda",    "uuid": "025496d4-9afd-43ab-a137-1fcab0323c61"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733132710.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:45:10"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733132710.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:45:10"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "18b6c7902dbbb361",    "src": "hda",    "uuid": "4a6bcb03-5200-461c-9159-e31f78a7fbe4"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 599, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 3, \"oformat\": \"cram\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"1.0\", \"seed\": \"\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:45:21.334227",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test.cram) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 15, "time_seconds": 32.44442939758301, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #17)" name="16" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 16, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #18)" name="17" time="31.122052431106567">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "aef98072707a77ba",   "src": "hda"  },  "input": {   "id": "a01401e560badb2a",   "src": "hda"  },  "mode|filter_config|cond_region|regions": "CHROMOSOME_I",  "mode|filter_config|cond_region|select_region": "text",  "mode|output_options|output_format|oformat": "cram",  "mode|outtype": "selected_reads" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/5/e/3/dataset_5e363d02-8b61-4c83-8fbf-5dfa046b6d6e.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/8/1/b/dataset_81b3967d-0df6-44ed-a522-3503161fe642.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/c/d/d/metadata_cddfa99b-4f06-43ec-a859-7502b6fa9617.dat\u0027 infile.bai \u0026\u0026         samtools view -@ $addthreads -C      -o outfile  --output-fmt-option no_ref   -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile  \u0027CHROMOSOME_I\u0027",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:45:41.856847",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-52tj6",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "07d4b0052e9ad277",  "inputs": {   "addref_cond|ref": {    "id": "aef98072707a77ba",    "src": "hda",    "uuid": "5e363d02-8b61-4c83-8fbf-5dfa046b6d6e"   },   "input": {    "id": "a01401e560badb2a",    "src": "hda",    "uuid": "81b3967d-0df6-44ed-a522-3503161fe642"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733132743.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:45:43"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733132743.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:45:43"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "7a8baf876f654e89",    "src": "hda",    "uuid": "d1a1be38-2e0f-4952-8a9e-df4741bc30ad"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 602, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 1, \"regions\": \"CHROMOSOME_I\", \"select_region\": \"text\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 3, \"oformat\": \"cram\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"1.0\", \"seed\": \"\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:45:52.846679",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test.cram) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 17, "time_seconds": 31.122052431106567, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #19)" name="18" time="32.35852360725403">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "89df33725ba52d87",   "src": "hda"  },  "input": {   "id": "05781fbd85f6daf5",   "src": "hda"  },  "mode|filter_config|cond_region|regions": "CHROMOSOME_I",  "mode|filter_config|cond_region|select_region": "text",  "mode|output_options|output_format|oformat": "bam",  "mode|outtype": "selected_reads" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/8/8/7/dataset_887269c3-6547-4da5-804d-af6fb4ec19de.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/e/9/e/dataset_e9e90d66-039f-4345-b116-64af2dcb919c.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/f/0/c/metadata_f0cbed44-2086-4aba-b963-5359b22bb53d.dat\u0027 infile.crai \u0026\u0026         samtools view -@ $addthreads -b      -o outfile    -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile  \u0027CHROMOSOME_I\u0027  \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:46:13.153437",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-sf9p7",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "5f472c9bd5b16e6f",  "inputs": {   "addref_cond|ref": {    "id": "89df33725ba52d87",    "src": "hda",    "uuid": "887269c3-6547-4da5-804d-af6fb4ec19de"   },   "input": {    "id": "05781fbd85f6daf5",    "src": "hda",    "uuid": "e9e90d66-039f-4345-b116-64af2dcb919c"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733132774.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:46:14"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733132774.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:46:14"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "c6fa6334550c2f03",    "src": "hda",    "uuid": "db8e3569-892f-4309-a2ce-d13615ef6d57"   }  },  "params": {   "__input_ext": "\"cram\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 605, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 1, \"regions\": \"CHROMOSOME_I\", \"select_region\": \"text\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"1.0\", \"seed\": \"\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:46:25.341385",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 18, "time_seconds": 32.35852360725403, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #20)" name="19" time="37.50571250915527">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "c058003e2699dfd7",   "src": "hda"  },  "input": {   "id": "4e2a53343e7f35b6",   "src": "hda"  },  "mode|filter_config|cond_region|bedfile": {   "id": "975c039bfc3402e8",   "src": "hda"  },  "mode|filter_config|cond_region|select_region": "bed",  "mode|output_options|output_format|oformat": "bam",  "mode|outtype": "selected_reads" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/c/d/6/dataset_cd6c2d76-8e92-413f-a95e-a4f06554cfa0.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/f/5/e/dataset_f5e65900-74fc-4e9f-bb83-fc924e978a24.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/8/1/e/metadata_81e55938-b149-4d48-a7ea-ae5208ffae62.dat\u0027 infile.crai \u0026\u0026         samtools view -@ $addthreads -b  -L \u0027/galaxy/server/database/objects/5/b/f/dataset_5bf7689d-bdf7-4055-8532-aa7dcc458eed.dat\u0027    -o outfile    -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile    \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:46:49.926250",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-4wnm4",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "fc3c6721df159947",  "inputs": {   "addref_cond|ref": {    "id": "c058003e2699dfd7",    "src": "hda",    "uuid": "cd6c2d76-8e92-413f-a95e-a4f06554cfa0"   },   "input": {    "id": "4e2a53343e7f35b6",    "src": "hda",    "uuid": "f5e65900-74fc-4e9f-bb83-fc924e978a24"   },   "mode|filter_config|cond_region|bedfile": {    "id": "975c039bfc3402e8",    "src": "hda",    "uuid": "5bf7689d-bdf7-4055-8532-aa7dcc458eed"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733132812.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:46:52"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733132811.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:46:51"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "99eb5d7f0cb3db25",    "src": "hda",    "uuid": "4317b788-364f-4d47-bdab-600b8f624158"   }  },  "params": {   "__input_ext": "\"cram\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 609, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 2, \"bedfile\": {\"values\": [{\"id\": 608, \"src\": \"hda\"}]}, \"select_region\": \"bed\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"1.0\", \"seed\": \"\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:47:02.971397",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 19, "time_seconds": 37.50571250915527, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #3)" name="2" time="32.35643911361694">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "08c0b5a3ed48b58f",   "src": "hda"  },  "input": {   "id": "15c4cb67307cf79f",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/4/5/a/dataset_45a07871-5bf2-4b4f-98ef-a7aa8d8ca97f.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/7/1/f/dataset_71fde4e0-8993-45f9-9b39-41c7eda88118.dat\u0027 infile \u0026\u0026        samtools view -@ $addthreads -b      -o outfile    -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile    \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:38:59.188750",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-mb6ft",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "47ccc4e2fdf58bbc",  "inputs": {   "addref_cond|ref": {    "id": "08c0b5a3ed48b58f",    "src": "hda",    "uuid": "45a07871-5bf2-4b4f-98ef-a7aa8d8ca97f"   },   "input": {    "id": "15c4cb67307cf79f",    "src": "hda",    "uuid": "71fde4e0-8993-45f9-9b39-41c7eda88118"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733132340.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:39:00"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733132340.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:39:00"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "05b2ec9fdeb6fd47",    "src": "hda",    "uuid": "5fc40890-e708-47e0-b5bb-cbe8966222ab"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 572, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/equCab2.len\"",   "dbkey": "\"equCab2\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:39:11.264822",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (sam_to_bam_out3.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 2, "time_seconds": 32.35643911361694, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #21)" name="20" time="23.771010160446167">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "input": {   "id": "1d18af5a748b693f",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|select_subsample": "target",  "mode|subsample_config|subsampling_mode|target": "2" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/6/2/c/dataset_62cb7437-6cd6-4525-84d6-d20c704c54cb.dat\u0027 infile \u0026\u0026         sample_fragment=`samtools view -c  infile  | awk \u0027{s=$1} END {frac=s/2; print(frac \u003e 1 ? 27079+1/frac : \".0\")}\u0027` \u0026\u0026  samtools view -@ $addthreads -h    -s ${sample_fragment}   -o outfile      infile",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-12-02T09:47:22.428955",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-rp9r6",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "51fbb0f776e70d49",  "inputs": {   "input": {    "id": "1d18af5a748b693f",    "src": "hda",    "uuid": "62cb7437-6cd6-4525-84d6-d20c704c54cb"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "a2587ff3514b20bb",    "src": "hda",    "uuid": "ed49bf95-b4e8-4912-be12-d84e9ecf6825"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 1, \"seed\": \"\", \"select_subsample\": \"target\", \"target\": \"2\"}}}"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:47:27.067908",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3, exit_code: None, stderr: ." ], "status": "failure", "test_index": 20, "time_seconds": 23.771010160446167, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #22)" name="21" time="30.138359785079956">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "ebf6a6daa84ba597",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|select_subsample": "target",  "mode|subsample_config|subsampling_mode|target": "20" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/2/2/e/dataset_22e37d66-a904-48c8-95f8-628e9784c222.dat\u0027 infile \u0026\u0026         sample_fragment=`samtools view -c  infile  | awk \u0027{s=$1} END {frac=s/20; print(frac \u003e 1 ? 11512+1/frac : \".0\")}\u0027` \u0026\u0026  samtools view -@ $addthreads -h    -s ${sample_fragment}   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:47:45.830505",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-56zp4",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "fdaef30040010622",  "inputs": {   "input": {    "id": "ebf6a6daa84ba597",    "src": "hda",    "uuid": "22e37d66-a904-48c8-95f8-628e9784c222"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733132866.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:47:46"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733132866.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:47:46"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "506707601f8f90c2",    "src": "hda",    "uuid": "4195ef6c-969b-4ce2-a2fd-f072ef7f170e"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 1, \"seed\": \"\", \"select_subsample\": \"target\", \"target\": \"20\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:47:57.440839",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 21, "time_seconds": 30.138359785079956, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #23)" name="22" time="30.234349966049194">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "a999aebfb68b0957",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|select_subsample": "target",  "mode|subsample_config|subsampling_mode|target": "20" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/c/2/3/dataset_c2349a88-ab2c-41ad-b2ad-cc385952378f.dat\u0027 infile \u0026\u0026         sample_fragment=`samtools view -c  infile  | awk \u0027{s=$1} END {frac=s/20; print(frac \u003e 1 ? 29145+1/frac : \".0\")}\u0027` \u0026\u0026  samtools view -@ $addthreads -h    -s ${sample_fragment}   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:48:15.777829",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-rhx9d",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "e64b7f4e0a508464",  "inputs": {   "input": {    "id": "a999aebfb68b0957",    "src": "hda",    "uuid": "c2349a88-ab2c-41ad-b2ad-cc385952378f"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733132897.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:48:17"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733132897.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:48:17"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "97fd6b6d682957e1",    "src": "hda",    "uuid": "98873a6a-3f42-4470-ba37-1b5494efe05a"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 1, \"seed\": \"\", \"select_subsample\": \"target\", \"target\": \"20\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:48:27.560150",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (no_reads.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 22, "time_seconds": 30.234349966049194, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #24)" name="23" time="31.41829752922058">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "b4ea3374ec033fd0",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|select_subsample": "target",  "mode|subsample_config|subsampling_mode|target": "20" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/2/f/4/dataset_2f48cac3-6be2-4b45-8328-6717921da30f.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/a/3/7/metadata_a37e706b-7b8e-4748-9c1b-d34c3cab5187.dat\u0027 infile.bai \u0026\u0026         sample_fragment=`samtools idxstats infile | awk \u0027{s+=$4+$3} END {frac=s/20; print(frac \u003e 1 ? 3769+1/frac : \".0\")}\u0027` \u0026\u0026  samtools view -@ $addthreads -b    -s ${sample_fragment}   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:48:46.925114",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-fcjc4",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "47069f51f738746a",  "inputs": {   "input": {    "id": "b4ea3374ec033fd0",    "src": "hda",    "uuid": "2f48cac3-6be2-4b45-8328-6717921da30f"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733132928.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:48:48"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733132928.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:48:48"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "6daac0e957c7d058",    "src": "hda",    "uuid": "b0cd975f-03e5-4381-b289-932514c9ac51"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 1, \"seed\": \"\", \"select_subsample\": \"target\", \"target\": \"20\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:48:59.043136",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (no_reads.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 23, "time_seconds": 31.41829752922058, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #25)" name="24" time="31.02151370048523">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "fe754d7023468139",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|seed": "7",  "mode|subsample_config|subsampling_mode|select_subsample": "target",  "mode|subsample_config|subsampling_mode|target": "2" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/f/0/d/dataset_f0d2dd6b-c93c-4927-a440-fc141bd6ffa3.dat\u0027 infile \u0026\u0026         sample_fragment=`samtools view -c  infile  | awk \u0027{s=$1} END {frac=s/2; print(frac \u003e 1 ? 7+1/frac : \".0\")}\u0027` \u0026\u0026  samtools view -@ $addthreads -h    -s ${sample_fragment}   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:49:18.549982",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-v576f",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "3913f0d2ef40a6a7",  "inputs": {   "input": {    "id": "fe754d7023468139",    "src": "hda",    "uuid": "f0d2dd6b-c93c-4927-a440-fc141bd6ffa3"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733132960.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:49:20"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733132959.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:49:19"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "139af2b3b6291a6e",    "src": "hda",    "uuid": "2e80284a-913e-4307-be1e-ded5fac209b5"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 1, \"seed\": \"7\", \"select_subsample\": \"target\", \"target\": \"2\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:49:30.267363",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test_ds.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 24, "time_seconds": 31.02151370048523, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #26)" name="25" time="10.490574836730957">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 25, "time_seconds": 10.490574836730957, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #27)" name="26" time="31.412673234939575">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "f8db9919eb4938cf",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|seed": "7",  "mode|subsample_config|subsampling_mode|select_subsample": "target",  "mode|subsample_config|subsampling_mode|target": "20" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/0/8/d/dataset_08d206f4-0585-4330-a832-25aaef11f34d.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/c/e/2/metadata_ce280ef5-b048-4c3f-98a1-1dc32b73b793.dat\u0027 infile.bai \u0026\u0026         sample_fragment=`samtools idxstats infile | awk \u0027{s+=$4+$3} END {frac=s/20; print(frac \u003e 1 ? 7+1/frac : \".0\")}\u0027` \u0026\u0026  samtools view -@ $addthreads -b    -s ${sample_fragment}   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:50:01.112344",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-h6gq9",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "6640352b59187694",  "inputs": {   "input": {    "id": "f8db9919eb4938cf",    "src": "hda",    "uuid": "08d206f4-0585-4330-a832-25aaef11f34d"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733133002.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:50:02"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733133002.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:50:02"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "ed36a32bf6ba4e6f",    "src": "hda",    "uuid": "9e859dd5-e287-4a5b-b2b8-2a2c3c533995"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 1, \"seed\": \"7\", \"select_subsample\": \"target\", \"target\": \"20\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:50:12.770903",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 26, "time_seconds": 31.412673234939575, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #28)" name="27" time="32.29852890968323">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "45fc00799d4a1f1b",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|factor": "5",  "mode|subsample_config|subsampling_mode|seed": "7",  "mode|subsample_config|subsampling_mode|select_subsample": "fraction" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/2/0/c/dataset_20c9e8b2-8090-40a2-836d-dca69360bf0f.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/6/a/3/metadata_6a384884-8e19-422f-987f-e86e6027b24f.dat\u0027 infile.bai \u0026\u0026          samtools view -@ $addthreads -b    -s 7.2   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:50:32.294560",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-lrl8s",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "29bc28f39a921ef1",  "inputs": {   "input": {    "id": "45fc00799d4a1f1b",    "src": "hda",    "uuid": "20c9e8b2-8090-40a2-836d-dca69360bf0f"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733133034.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:50:34"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733133034.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:50:34"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "83d7aa99cae83fb8",    "src": "hda",    "uuid": "b00e6165-0a68-4cbf-a8a7-f0d4e7d615e0"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"5.0\", \"seed\": \"7\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:50:44.995619",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test_ds.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 27, "time_seconds": 32.29852890968323, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #29)" name="28" time="31.907480716705322">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "1c70ff89666f7a7e",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|output_options|reads_report_type": "dropped",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|factor": "1.25",  "mode|subsample_config|subsampling_mode|seed": "7",  "mode|subsample_config|subsampling_mode|select_subsample": "fraction" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/5/1/f/dataset_51ffb8dd-d64e-4081-b280-f29de6012d4c.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/f/a/9/metadata_fa9192bd-5fd3-4592-b653-20b839649610.dat\u0027 infile.bai \u0026\u0026          samtools view -@ $addthreads -b    -s 7.8   -U outfile -o /dev/null      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:51:04.809404",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-4txfx",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "7a29bcc40888c74b",  "inputs": {   "input": {    "id": "1c70ff89666f7a7e",    "src": "hda",    "uuid": "51ffb8dd-d64e-4081-b280-f29de6012d4c"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733133067.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:51:07"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733133067.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:51:07"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "d9a5af85d52b463d",    "src": "hda",    "uuid": "11a0494a-71b9-419b-b43a-9b4df1fde057"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 1, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"dropped\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"1.25\", \"seed\": \"7\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:51:17.068823",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test_ds.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 28, "time_seconds": 31.907480716705322, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #4)" name="3" time="17.56704807281494">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 3, "time_seconds": 17.56704807281494, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #5)" name="4" time="31.71402072906494">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "ba5fa503eca3881b",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/7/8/d/dataset_78d825de-fee5-4e0f-b097-4a216bc1d470.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/9/8/c/metadata_98c72097-af44-4535-a800-532fa53afb91.dat\u0027 infile.bai \u0026\u0026        samtools view -@ $addthreads -b      -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:39:49.211139",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-66v4v",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "b608d491676a10f4",  "inputs": {   "input": {    "id": "ba5fa503eca3881b",    "src": "hda",    "uuid": "78d825de-fee5-4e0f-b097-4a216bc1d470"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733132390.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:39:50"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733132390.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:39:50"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "51d5a676017c7b38",    "src": "hda",    "uuid": "bbd55b68-94b3-4838-a39d-d580924de93d"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:40:00.913221",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (1_sort.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 4, "time_seconds": 31.71402072906494, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #6)" name="5" time="31.813994884490967">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "ed9294b8031ee298",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/b/8/0/dataset_b80d74d0-b139-42a3-95d0-a94def8f9a64.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/2/7/1/metadata_2711417f-2fda-4340-a669-fe236a3be65e.dat\u0027 infile.bai \u0026\u0026        samtools view -@ $addthreads -b      -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:40:20.277515",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-hc2td",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "6fd2691b38f88e1b",  "inputs": {   "input": {    "id": "ed9294b8031ee298",    "src": "hda",    "uuid": "b80d74d0-b139-42a3-95d0-a94def8f9a64"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733132422.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:40:22"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733132422.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:40:22"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "2d4ab30d1d2f762b",    "src": "hda",    "uuid": "eeb896f3-6bde-4499-9b6a-8776066abb2a"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:40:33.131018",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (1_sort.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 5, "time_seconds": 31.813994884490967, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #7)" name="6" time="31.362433433532715">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "2419cd75c004d6bb",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/5/2/1/dataset_521aeb64-cfce-4fbf-91c9-8d55b7ff1ecd.dat\u0027 infile \u0026\u0026        samtools view -@ $addthreads -b      -o outfile      infile    \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:40:51.854797",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-sp6sv",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "c63934ff50b95883",  "inputs": {   "input": {    "id": "2419cd75c004d6bb",    "src": "hda",    "uuid": "521aeb64-cfce-4fbf-91c9-8d55b7ff1ecd"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733132454.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:40:54"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733132454.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:40:54"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "87b5ec605b2cbbaf",    "src": "hda",    "uuid": "44240385-51d8-4437-a6e7-b25fe2aa820f"   }  },  "params": {   "__input_ext": "\"qname_sorted.bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:41:04.455920",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (1_sort.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 6, "time_seconds": 31.362433433532715, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #8)" name="7" time="31.733604431152344">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "61aebfd125389ca2",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/1/e/1/dataset_1e1b0da8-2314-4b66-85ca-c4072aec3635.dat\u0027 infile \u0026\u0026        samtools view -@ $addthreads -h      -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:41:24.146859",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-5frb8",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "8b952434badd21b8",  "inputs": {   "input": {    "id": "61aebfd125389ca2",    "src": "hda",    "uuid": "1e1b0da8-2314-4b66-85ca-c4072aec3635"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733132485.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:41:25"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733132485.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:41:25"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "d50b4ad62b618057",    "src": "hda",    "uuid": "83f7813e-0e12-452d-bf6c-a56672ebd8d0"   }  },  "params": {   "__input_ext": "\"qname_sorted.bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:41:36.566695",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (1_sort_read_names.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 7, "time_seconds": 31.733604431152344, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #9)" name="8" time="31.308319568634033">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "6408d957e5c9b2db",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/f/b/1/dataset_fb1bd052-fb29-4da6-861f-281875249cf0.dat\u0027 infile \u0026\u0026        samtools view -@ $addthreads -b      -o outfile      infile    \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-12-02T09:41:55.186287",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-kv5nr",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "b7fa4752c20585b8",  "inputs": {   "input": {    "id": "6408d957e5c9b2db",    "src": "hda",    "uuid": "fb1bd052-fb29-4da6-861f-281875249cf0"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1733132517.0000000",    "title": "Job End Time",    "value": "2024-12-02 09:41:57"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1733132516.0000000",    "title": "Job Start Time",    "value": "2024-12-02 09:41:56"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "1d4cc260474b4268",    "src": "hda",    "uuid": "a9805b80-d38a-4ab9-bd17-2b6855592943"   }  },  "params": {   "__input_ext": "\"unsorted.bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:42:07.913900",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (1_sort.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 8, "time_seconds": 31.308319568634033, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #10)" name="9" time="21.135370016098022">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "input": {   "id": "1ddc894f02ec9f67",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/4/4/3/dataset_4430c151-6cdb-4871-8f38-50f613252f9d.dat\u0027 infile \u0026\u0026        samtools view -@ $addthreads -h      -o outfile      infile",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-12-02T09:42:25.443366",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-vg5ht",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "474748d081f6ccc0",  "inputs": {   "input": {    "id": "1ddc894f02ec9f67",    "src": "hda",    "uuid": "4430c151-6cdb-4871-8f38-50f613252f9d"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "b82ed0b1152e8cd5",    "src": "hda",    "uuid": "b6ee8971-8217-4717-b8fb-ede749d917c6"   }  },  "params": {   "__input_ext": "\"unsorted.bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-12-02T09:42:29.150777",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3, exit_code: None, stderr: ." ], "status": "failure", "test_index": 9, "time_seconds": 21.135370016098022, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot_embed (Test #1)" name="0" time="0.2935149669647217">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 0, "time_seconds": 0.2935149669647217, "tool_id": "scanpy_plot_embed", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="scanpy_plot_embed (Test #1)" name="0" time="0.29090166091918945">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 0, "time_seconds": 0.29090166091918945, "tool_id": "scanpy_plot_embed", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="scater_normalize (Test #1)" name="0" time="64.42483162879944">
        
            
            <system-out><![CDATA[
            [1] "Normalising...."[1] "Finished normalising"[1] TRUE
            ]]></system-out>
            <system-err><![CDATA[
            Loading required package: S4VectorsLoading required package: stats4Loading required package: BiocGenericsLoading required package: parallelAttaching package: 'BiocGenerics'The following objects are masked from 'package:parallel':    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,    clusterExport, clusterMap, parApply, parCapply, parLapply,    parLapplyLB, parRapply, parSapply, parSapplyLBThe following objects are masked from 'package:stats':    IQR, mad, sd, var, xtabsThe following objects are masked from 'package:base':    Filter, Find, Map, Position, Reduce, anyDuplicated, append,    as.data.frame, basename, cbind, colnames, dirname, do.call,    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,    lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin,    pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table,    tapply, union, unique, unsplit, which, which.max, which.minAttaching package: 'S4Vectors'The following object is masked from 'package:base':    expand.gridLoading required package: SingleCellExperimentLoading required package: SummarizedExperimentLoading required package: GenomicRangesLoading required package: IRangesLoading required package: GenomeInfoDbLoading required package: BiobaseWelcome to Bioconductor    Vignettes contain introductory material; view with    'browseVignettes()'. To cite Bioconductor, see    'citation("Biobase")', and for packages 'citation("pkgname")'.Loading required package: DelayedArrayLoading required package: matrixStatsAttaching package: 'matrixStats'The following objects are masked from 'package:Biobase':    anyMissing, rowMediansLoading required package: BiocParallelAttaching package: 'DelayedArray'The following objects are masked from 'package:matrixStats':    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRangesThe following objects are masked from 'package:base':    aperm, apply, rowsumLoading required package: rhdf5Loading required package: rtracklayerLoading required package: ggplot2Attaching package: 'scater'The following object is masked from 'package:S4Vectors':    renameThe following object is masked from 'package:stats':    filterWarning message:In .local(object, ...) : using library sizes as size factors
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #1)" name="0" time="17.97864580154419">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 0, "time_seconds": 17.97864580154419, "tool_id": "unicycler", "tool_version": "0.5.1+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="unicycler (Test #2)" name="1" time="204.57517766952515">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-12-02 06:31:04)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided both short and long reads, Unicycler will perform a hybrid assembly.It will first use SPAdes to make a short-read assembly graph, and then it willuse various methods to scaffold that graph with the long reads.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq.gz -2 fq2.fastq.gz -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/6/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status   Path                        spades.py     4.0.0     good     /usr/local/bin/spades.py    racon         1.5.0     good     /usr/local/bin/racon        makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb  tblastn       2.16.0+   good     /usr/local/bin/tblastn    Choosing k-mer range for assembly (2024-12-02 06:31:04)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2024-12-02 06:31:04)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/6/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/6/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/6/working/fq2.fastq.gz -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/6/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/6/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/6/working/fq2.fastq.gz -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.1.100+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/6/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/6/working/fq1.fastq.gz']      right reads: ['/galaxy/server/database/jobs_directory/000/6/working/fq2.fastq.gz']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/6/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/6/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/6/working/fq1.fastq.gz: max reads length: 251/galaxy/server/database/jobs_directory/000/6/working/fq2.fastq.gz: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/6/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/6/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/6/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/6/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/6/working/spades_assembly/dataset.info") with K=27  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.000     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.000     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.070    82M / 82M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.073    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.086    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.086    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.095    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.123     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.135     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.135     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.135     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.135     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.136     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.136     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.136     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:00.669     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:00.672     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:00.849     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:00.849     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:00.877     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:00.877     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.878     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.878     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.878     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.368  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:01.368  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:01.368     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.533     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:01.533     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.568     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:01.568     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:01.679     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:01.688     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:01.700     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:01.703     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:01.705     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:01.707     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:01.710     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:01.710     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:01.711     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:01.711     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:01.711     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:01.712     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:01.712     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:01.712     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:01.712     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:01.712     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:01.712     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:01.714     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:01.714     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.740     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:01.740     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:01.803     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:01.804     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:01.837     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:01.837     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:01.837     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:01.837     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:01.837     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:01.932     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:02.224     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:02.736     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:03.201     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:03.992     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:03.992     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:03.993     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:03.993     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:03.993     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:03.993     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:03.993     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:03.993     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:03.993     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:03.994     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Gap Clo..32:53)Remove zero length segments (2024-12-02 06:32:53)Sort link order             (2024-12-02 06:32:53)Graph cleaning finished     (2024-12-02 06:32:53)Saving /galaxy/server/database/jobs_directory/000/6/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2024-12-02 06:32:53)Filter by read depth        (2024-12-02 06:32:53)Filter homopolymer loops    (2024-12-02 06:32:53)Merge all possible          (2024-12-02 06:32:53)Normalise read depths       (2024-12-02 06:32:53)Remove zero length segments (2024-12-02 06:32:53)Sort link order             (2024-12-02 06:32:53)Graph cleaning finished     (2024-12-02 06:32:53)Saving /galaxy/server/database/jobs_directory/000/6/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2024-12-02 06:32:53)Filter by read depth        (2024-12-02 06:32:53)Filter homopolymer loops    (2024-12-02 06:32:53)Merge all possible          (2024-12-02 06:32:53)Normalise read depths       (2024-12-02 06:32:53)Remove zero length segments (2024-12-02 06:32:53)Sort link order             (2024-12-02 06:32:53)Graph cleaning finished     (2024-12-02 06:32:53)Saving /galaxy/server/database/jobs_directory/000/6/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2024-12-02 06:32:53)Filter by read depth        (2024-12-02 06:32:53)Filter homopolymer loops    (2024-12-02 06:32:53)Merge all possible          (2024-12-02 06:32:53)Normalise read depths       (2024-12-02 06:32:53)Remove zero length segments (2024-12-02 06:32:53)Sort link order             (2024-12-02 06:32:53)Graph cleaning finished     (2024-12-02 06:32:53)Saving /galaxy/server/database/jobs_directory/000/6/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2024-12-02 06:32:53)Filter by read depth        (2024-12-02 06:32:53)Filter homopolymer loops    (2024-12-02 06:32:53)Merge all possible          (2024-12-02 06:32:53)Normalise read depths       (2024-12-02 06:32:53)Remove zero length segments (2024-12-02 06:32:53)Sort link order             (2024-12-02 06:32:53)Graph cleaning finished     (2024-12-02 06:32:53)Saving /galaxy/server/database/jobs_directory/000/6/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2024-12-02 06:32:53)Filter by read depth        (2024-12-02 06:32:53)Filter homopolymer loops    (2024-12-02 06:32:53)Merge all possible          (2024-12-02 06:32:53)Normalise read depths       (2024-12-02 06:32:53)Remove zero length segments (2024-12-02 06:32:53)Sort link order             (2024-12-02 06:32:53)Graph cleaning finished     (2024-12-02 06:32:53)Saving /galaxy/server/database/jobs_directory/000/6/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2024-12-02 06:32:53)Filter by read depth        (2024-12-02 06:32:53)Filter homopolymer loops    (2024-12-02 06:32:53)Merge all possible          (2024-12-02 06:32:53)Normalise read depths       (2024-12-02 06:32:53)Remove zero length segments (2024-12-02 06:32:53)Sort link order             (2024-12-02 06:32:53)Graph cleaning finished     (2024-12-02 06:32:53)Saving /galaxy/server/database/jobs_directory/000/6/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2024-12-02 06:32:53)Filter by read depth        (2024-12-02 06:32:53)Filter homopolymer loops    (2024-12-02 06:32:53)Merge all possible          (2024-12-02 06:32:53)Normalise read depths       (2024-12-02 06:32:53)Remove zero length segments (2024-12-02 06:32:53)Sort link order             (2024-12-02 06:32:53)Graph cleaning finished     (2024-12-02 06:32:53)Saving /galaxy/server/database/jobs_directory/000/6/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2024-12-02 06:32:53)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/6/working/001_spades_graph_k027.gfaDeleting /galaxy/server/database/jobs_directory/000/6/working/001_spades_graph_k047.gfaDeleting /galaxy/server/database/jobs_directory/000/6/working/001_spades_graph_k063.gfaDeleting /galaxy/server/database/jobs_directory/000/6/working/001_spades_graph_k077.gfaDeleting /galaxy/server/database/jobs_directory/000/6/working/001_spades_graph_k089.gfaDeleting /galaxy/server/database/jobs_directory/000/6/working/001_spades_graph_k099.gfaDeleting /galaxy/server/database/jobs_directory/000/6/working/001_spades_graph_k107.gfaDeleting /galaxy/server/database/jobs_directory/000/6/working/001_spades_graph_k115.gfaDeleting /galaxy/server/database/jobs_directory/000/6/working/001_spades_graph_k121.gfaDeleting /galaxy/server/database/jobs_directory/000/6/working/001_spades_graph_k127.gfaDeleting /galaxy/server/database/jobs_directory/000/6/working/spades_assembly/Determining graph multiplicity (2024-12-02 06:32:53)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Cleaning graph (2024-12-02 06:32:53)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removed    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2024-12-02 06:32:53)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2024-12-02 06:32:53)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundLoading reads (2024-12-02 06:32:53)0 / 1 (0.0%)1 / 1 (100.0%) - 5,386 bp1 / 1 (100.0%) - 5,386 bpAssembling contigs and long reads with miniasm (2024-12-02 06:32:53)    Unicycler uses miniasm to construct a string graph assembly using both theshort read contigs and the long reads. It will then use the resulting stringgraph to produce bridges between contigs. This method requires decent coverageof long reads and therefore may not be fruitful if long reads are sparse.However, it does not rely on the short read assembly graph having goodconnectivity and is able to bridge an assembly graph even when it contains manydead ends.    Unicycler uses two types of "reads" as assembly input: anchor contigs fromthe short-read assembly and actual long reads which overlap two or more ofthese contigs. It then assembles them with miniasm.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/6/working/miniasm_assembly/all_segments.fasta1538635158+15386227538251555155255cm:i:11491538651635383+153861221220220255cm:i:47Number of minimap alignments: 1Saving to /galaxy/server/database/jobs_directory/000/6/working/miniasm_assembly/01_assembly_reads.fastq:  0 short-read contigs  1 long readsFinding overlaps with minimap... failedAssembling reads with miniasm... empty resultCreating simple long read bridges (2024-12-02 06:32:53)    Unicycler uses long read alignments (from minimap) to resolve simple repeatstructures in the graph. This takes care of some "low-hanging fruit" of thegraph simplification.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/6/working/simple_bridging/all_segments.fasta1538635158+15386227538251555155255cm:i:11491538651635383+153861221220220255cm:i:47Number of minimap alignments: 1    Two-way junctions are defined as cases where two graph contigs (A and B)join together (C) and then split apart again (D and E). This usually representsa simple 2-copy repeat, and there are two possible options for its resolution:(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such ajunction gets to "vote" for option 1, option 2 or neither. Unicycler creates abridge at each junction for the most voted for option.No suitable two-way junctions present    Simple loops are parts of the graph where two contigs (A and B) areconnected via a repeat (C) which loops back to itself (via D). It is possibleto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is thecorrect number of times through. In this step, such reads are found and each isaligned against alternative loop counts. A reads casts its "vote" for the loopcount it agrees best with, and Unicycler creates a bridge using the most votedfor count.No suitable simple loops presentDetermining low score threshold (2024-12-02 06:32:53)    Before conducting semi-global alignment of the long reads to the assemblygraph, Unicycler must determine a minimum alignment score threshold such thatnonsense alignments are excluded. To choose a threshold automatically, itexamines alignments between random sequences and selects a score a few standarddeviations above the mean.Automatically choosing a threshold using random alignment scores.Random alignment mean score: 61.66         standard deviation:  1.31        Low score threshold: 61.66 + (7 x 1.31) = 70.86Aligning reads with minimap (2024-12-02 06:32:53)1538655161+15386229538551565156255cm:i:9591538651685384+153866222216216255cm:i:39Done! 1 out of 1 reads alignedAligning reads (2024-12-02 06:32:53)1/1: 1 (5386 bp)minimap alignments:    5,5161,+,1,229,5385    5168,5384,+,1,6,222Reference ranges:    1+: 0 - 5386Range: 1: 0 - 5386    common 10-mers: 5464    line 1: 215 points, score=213.009259 (good)    line 2: 5153 points, score=5151.000388 (good)All Seqan alignments (time to align = 0.054 s):  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1          0      224        5162      5386       +        672        100.00   100.00%         1        224     5386           0      5162       +      15486        100.00   100.00%Final alignments:  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1        224     5386           0      5162       +      15486        100.00   100.00%         1          0      224        5162      5386       +        672        100.00   100.00%Read alignment summary (2024-12-02 06:32:53)Total read count:            1Fully aligned reads:         1Partially aligned reads:     0Unaligned reads:             0Total bases aligned:     5,386 bpMean alignment identity:   100.0%Deleting /galaxy/server/database/jobs_directory/000/6/working/read_alignment/Setting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00Building long read bridges (2024-12-02 06:32:53)    Unicycler uses the long read alignments to produce bridges between anchorsegments. These bridges can be formed using as few as one long read, givingUnicycler the ability to bridge the graph even when long-read depth is low.Median depth of 10 longest contigs: 1.00                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path                Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  QualityApplying bridges (2024-12-02 06:32:53)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultCleaning up leftover segments (2024-12-02 06:32:53)Segments eligible for deletion:Bridged assembly graph (2024-12-02 06:32:53)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Component   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2024-12-02 06:32:53)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2024-12-02 06:33:02)Saving /galaxy/server/database/jobs_directory/000/6/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/6/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #3)" name="2" time="142.8937714099884">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "graph_clean|min_component_size": "1000",  "graph_clean|min_dead_end_size": "1000",  "keep": "0",  "linear_seqs": "0",  "lr_align|scores": "3,-6,-5,-2",  "min_fasta_length": "100",  "mode": "normal",  "paired_unpaired|fastq_input1": {   "id": "7fbbf9f6fd10a77b",   "src": "hdca"  },  "paired_unpaired|fastq_input_selector": "paired_collection",  "rotation|no_rotate": false,  "rotation|start_gene_cov": "95",  "rotation|start_gene_id": "90",  "spades|depth_filter": "0.25",  "spades|kmer_count": "10",  "spades|max_kmer_frac": "0.95",  "spades|min_kmer_frac": "0.2" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/c/e/7/dataset_ce7f3e02-3cf1-4488-9c8d-b751c1c74a2f.dat\u0027 fq1.fastq \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/6/c/5/dataset_6c5503c5-77aa-4ff9-9ccf-e8a951094421.dat\u0027 fq2.fastq \u0026\u0026 unicycler -t \"${GALAXY_SLOTS:-4}\" -o ./ --verbosity 3 -1 \u0027fq1.fastq\u0027 -2 \u0027fq2.fastq\u0027 --mode \u0027normal\u0027 --min_fasta_length \u0027100\u0027 --linear_seqs \u00270\u0027 --min_kmer_frac \u00270.2\u0027 --max_kmer_frac \u00270.95\u0027 --kmer_count \u002710\u0027 --depth_filter \u00270.25\u0027  --start_gene_id \u002790.0\u0027 --start_gene_cov \u002795.0\u0027 --min_component_size \u00271000\u0027 --min_dead_end_size \u00271000\u0027 --scores \u00273,-6,-5,-2\u0027  --keep 0",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-12-02T06:33:35.310589",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-xr62h",  "galaxy_version": "24.1",  "handler": null,  "history_id": "7fbbf9f6fd10a77b",  "id": "bb284c2f7a3f9e69",  "inputs": {   "paired_unpaired|fastq_input11": {    "id": "1f62f55d7f232fd3",    "src": "hda",    "uuid": "ce7f3e02-3cf1-4488-9c8d-b751c1c74a2f"   },   "paired_unpaired|fastq_input12": {    "id": "bb284c2f7a3f9e69",    "src": "hda",    "uuid": "6c5503c5-77aa-4ff9-9ccf-e8a951094421"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "assembly": {    "id": "ce39e644f2bf3188",    "src": "hda",    "uuid": "5ed75e45-7711-4c8a-b1bb-e789e00e3e99"   },   "assembly_graph": {    "id": "cb647adb488d5315",    "src": "hda",    "uuid": "4217f321-7a10-4302-a92f-d22c791052a6"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "graph_clean": "{\"min_component_size\": \"1000\", \"min_dead_end_size\": \"1000\"}",   "keep": "\"0\"",   "linear_seqs": "\"0\"",   "long": null,   "lr_align": "{\"contamination\": null, \"low_score\": \"\", \"no_simple_bridges\": false, \"scores\": \"3,-6,-5,-2\"}",   "min_anchor_seg_len": "\"\"",   "min_fasta_length": "\"100\"",   "mode": "\"normal\"",   "paired_unpaired": "{\"__current_case__\": 1, \"fastq_input1\": {\"values\": [{\"id\": 1, \"src\": \"hdca\"}]}, \"fastq_input_selector\": \"paired_collection\"}",   "reuse": "[]",   "rotation": "{\"no_rotate\": false, \"start_gene_cov\": \"95.0\", \"start_gene_id\": \"90.0\", \"start_genes\": null}",   "spades": "{\"depth_filter\": \"0.25\", \"kmer_count\": \"10\", \"kmers\": \"\", \"largest_component\": false, \"max_kmer_frac\": \"0.95\", \"min_kmer_frac\": \"0.2\"}"  },  "state": "error",  "stderr": "",  "stdout": "\nStarting Unicycler (2024-12-02 06:33:37)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/9/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status     Path                      \n  spades.py     4.0.0     good       /usr/local/bin/spades.py  \n  racon                   not used                             \n  makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good       /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2024-12-02 06:33:37)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2024-12-02 06:33:38)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/9/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/9/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/9/working/fq2.fastq -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/9/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/9/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/9/working/fq2.fastq -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.100+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/9/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: [\u0027/galaxy/server/database/jobs_directory/000/9/working/fq1.fastq\u0027]\n      right reads: [\u0027/galaxy/server/database/jobs_directory/000/9/working/fq2.fastq\u0027]\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/9/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/9/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/9/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.001     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.074    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.077    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.089    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.090    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.097    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.123     1M / 41M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.135     1M / 41M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.135     1M / 41M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.135     1M / 41M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.135     1M / 41M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.136     1M / 41M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.136     1M / 41M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.136     1M / 41M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:00.632     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:00.635     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:00.802     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.802     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:00.830     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:00.830     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.831     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.831     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.831     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.285  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:01.285  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:01.285     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.459     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.459     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:01.497     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:01.497     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:01.598     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:01.608     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.621     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:01.624     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:01.627     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:01.628     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:01.631     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.631     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:01.631     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:01.631     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:01.631     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:01.633     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:01.633     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:01.633     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:01.634     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:01.634     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:01.634     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:01.635     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:01.635     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:01.665     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:01.666     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.732     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:01.734     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:01.770     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:01.770     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:01.770     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:01.771     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:01.771     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:01.867     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:02.156     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:02.671     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:03.134     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:03.923     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:03.923     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:03.924     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:03.924     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:03.924     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:03.924     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:03.924     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:03.924     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:03.924     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:03.924     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Gap Closer (id: early_gap\n..\n        : 292)   SPAdes finished\n  0:00:03.890     1M / 160M  INFO    General                 (main.cpp                  : 131)   Assembling time: 0 hours 0 minutes 3 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished.\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/spades.log\nThank you for using SPAdes! If you use it in your research, please cite:\n  Prjibelski, A., Antipov, D., Meleshko, D., Lapidus, A. and Korobeynikov, A., 2020. Using SPAdes de novo assembler. Current protocols in bioinformatics, 70(1), p.e102.\n  doi.org/10.1002/cpbi.102\n\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k27 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k027_assembly_graph.gfa\n\nCleaning k47 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k047_assembly_graph.gfa\n\nCleaning k63 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k063_assembly_graph.gfa\n\nCleaning k77 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2024-12-02 06:35:25)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 \u003c-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k027.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k047.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k063.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k077.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k089.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k099.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k107.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k115.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k121.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k127.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/\n\n\nDetermining graph multiplicity (2024-12-02 06:35:25)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\n\nCleaning graph (2024-12-02 06:35:25)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-12-02 06:35:25)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-12-02 06:35:25)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2024-12-02 06:35:25)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -\u003e end   Path   Quality   Result\n\n\nCleaning up leftover segments (2024-12-02 06:35:25)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-12-02 06:35:25)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2024-12-02 06:35:25)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-12-02 06:35:34)\nSaving /galaxy/server/database/jobs_directory/000/9/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/9/working/assembly.fasta\n\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0",  "tool_stderr": "",  "tool_stdout": "\nStarting Unicycler (2024-12-02 06:33:37)\n    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since you\nprovided only short reads, Unicycler will essentially function as a SPAdes-\noptimiser. It will try many k-mer sizes, choose the best based on contig length\nand graph connectivity, and scaffold the graph using SPAdes repeat resolution.\n    For more information, please see https://github.com/rrwick/Unicycler\n\nCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0\n\nUnicycler version: v0.5.1\nUsing 8 threads\n\nThe output directory already exists and files may be reused or overwritten:\n  /galaxy/server/database/jobs_directory/000/9/working\n\nBridging mode: normal\n  using default normal bridge quality cutoff: 10.00\n\nDependencies:\n  Program       Version   Status     Path                      \n  spades.py     4.0.0     good       /usr/local/bin/spades.py  \n  racon                   not used                             \n  makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb\n  tblastn       2.16.0+   good       /usr/local/bin/tblastn    \n\n\nChoosing k-mer range for assembly (2024-12-02 06:33:37)\n    Unicycler chooses a k-mer range for SPAdes based on the length of the input\nreads. It uses a wide range of many k-mer sizes to maximise the chance of\nfinding an ideal assembly.\n\nSPAdes maximum k-mer: 127\nMedian read length: 251\nK-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127\n\n\nSPAdes assemblies (2024-12-02 06:33:38)\n    Unicycler now uses SPAdes to assemble the short reads. It scores the\nassembly graph for each k-mer using the number of contigs (fewer is better) and\nthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),\nwhere c is the contig count and d is the dead end count.\n\nspades.py -o /galaxy/server/database/jobs_directory/000/9/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/9/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/9/working/fq2.fastq -m 1024\n== Warning ==  output dir is not empty! Please, clean output directory before run.\nCommand: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/9/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/9/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/9/working/fq2.fastq -m 1024\n\nSystem information:\n  SPAdes version: 4.0.0\n  Python version: 3.12.4\n  OS: Linux-6.1.100+-x86_64-with-glibc2.36\nOutput dir: /galaxy/server/database/jobs_directory/000/9/working/spades_assembly\nMode: ONLY assembling (without read error correction)\nDebug mode is turned OFF\nDataset parameters:\n  Isolate mode\n  Reads:\n    Library number: 1, library type: paired-end\n      orientation: fr\n      left reads: [\u0027/galaxy/server/database/jobs_directory/000/9/working/fq1.fastq\u0027]\n      right reads: [\u0027/galaxy/server/database/jobs_directory/000/9/working/fq2.fastq\u0027]\n      interlaced reads: not specified\n      single reads: not specified\n      merged reads: not specified\nAssembly parameters:\n  k: [27]\n  Repeat resolution is enabled\n  Mismatch careful mode is turned OFF\n  MismatchCorrector will be SKIPPED\n  Coverage cutoff is turned OFF\n  Assembly graph output will use GFA v1.1 format\nOther parameters:\n  Dir for temp files: /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/tmp\n  Threads: 8\n  Memory limit (in Gb): 1024\n======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/spades.log\n/galaxy/server/database/jobs_directory/000/9/working/fq1.fastq: max reads length: 251\n/galaxy/server/database/jobs_directory/000/9/working/fq2.fastq: max reads length: 251\nReads length: 251\n===== Before start started.\n===== Assembling started.\n===== K27 started.\n== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K27/configs/isolate_mode.info\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K27/configs/config.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from \"/galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K27/configs/isolate_mode.info\"\n  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset (\"/galaxy/server/database/jobs_directory/000/9/working/spades_assembly/dataset.info\") with K=27\n  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8\n  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started\n  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion\n  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled\n  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3\n  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40\n  0:00:00.001     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8\n  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached\n  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)\n  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)\n  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads\n  0:00:00.074    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written\n  0:00:00.077    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads\n  0:00:00.089    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.090    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads\n  0:00:00.097    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written\n  0:00:00.123     1M / 41M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)\n  0:00:00.135     1M / 41M   INFO    General                 (construction.cpp          : 150)   Max read length 251\n  0:00:00.135     1M / 41M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525\n  0:00:00.135     1M / 41M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)\n  0:00:00.135     1M / 41M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.136     1M / 41M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.136     1M / 41M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.136     1M / 41M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:00.632     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads\n  0:00:00.635     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:00.802     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.\n  0:00:00.802     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)\n  0:00:00.830     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index\n  0:00:00.830     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.\n  0:00:00.831     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576\n  0:00:00.831     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb\n  0:00:00.831     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860\n  0:00:01.285  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers\n  0:00:01.285  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.\n  0:00:01.285     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.\n  0:00:01.459     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.\n  0:00:01.459     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:01.497     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).\n  0:00:01.497     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.\n  0:00:01.598     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers\n  0:00:01.608     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.\n  0:00:01.621     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)\n  0:00:01.624     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths\n  0:00:01.627     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted\n  0:00:01.628     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops\n  0:00:01.631     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected\n  0:00:01.631     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...\n  0:00:01.631     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted\n  0:00:01.631     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create\n  0:00:01.631     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records\n  0:00:01.633     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records\n  0:00:01.633     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done\n  0:00:01.633     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...\n  0:00:01.634     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted\n  0:00:01.634     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create\n  0:00:01.634     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph\n  0:00:01.635     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)\n  0:00:01.635     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices\n  0:00:01.665     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).\n  0:00:01.666     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.\n  0:00:01.732     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM\n  0:00:01.734     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges\n  0:00:01.770     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)\n  0:00:01.770     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7\n  0:00:01.770     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695\n  0:00:01.771     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212\n  0:00:01.771     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model\n  0:00:01.867     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2\n  0:00:02.156     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4\n  0:00:02.671     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8\n  0:00:03.134     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16\n  0:00:03.923     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32\n  0:00:03.923     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418\n  0:00:03.924     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1\n  0:00:03.924     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275\n  0:00:03.924     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275\n  0:00:03.924     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132\n  0:00:03.924     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577\n  0:00:03.924     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275\n  0:00:03.924     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0\n  0:00:03.924     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Gap Closer (id: early_gap\n..\n        : 292)   SPAdes finished\n  0:00:03.890     1M / 160M  INFO    General                 (main.cpp                  : 131)   Assembling time: 0 hours 0 minutes 3 seconds\n===== K127 finished.\n===== Copy files started.\n== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/contigs.paths\n===== Copy files finished.\n===== Assembling finished.\n===== Breaking scaffolds started.\n== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/misc --threshold_for_breaking_scaffolds 3\n===== Breaking scaffolds finished.\n===== Terminate started.\n===== Terminate finished.\n * Assembled contigs are in /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/contigs.fasta\n * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/scaffolds.fasta\n * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/contigs.paths\n * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/scaffolds.paths\n * Assembly graph is in /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/assembly_graph.fastg\n * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/assembly_graph_with_scaffolds.gfa\n======= SPAdes pipeline finished.\nSPAdes log can be found here: /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/spades.log\nThank you for using SPAdes! If you use it in your research, please cite:\n  Prjibelski, A., Antipov, D., Meleshko, D., Lapidus, A. and Korobeynikov, A., 2020. Using SPAdes de novo assembler. Current protocols in bioinformatics, 70(1), p.e102.\n  doi.org/10.1002/cpbi.102\n\n\nInsert size mean: 367.3 bp\nInsert size stdev: 37.3 bp\n\n\nCleaning k27 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k027_assembly_graph.gfa\n\nCleaning k47 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k047_assembly_graph.gfa\n\nCleaning k63 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k063_assembly_graph.gfa\n\nCleaning k77 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k077_assembly_graph.gfa\n\nCleaning k89 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k089_assembly_graph.gfa\n\nCleaning k99 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k099_assembly_graph.gfa\n\nCleaning k107 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k107_assembly_graph.gfa\n\nCleaning k115 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k115_assembly_graph.gfa\n\nCleaning k121 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k121_assembly_graph.gfa\n\nCleaning k127 graph\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k127_assembly_graph.gfa\n\nRepair multi way junctions  (2024-12-02 06:35:25)\nFilter by read depth        (2024-12-02 06:35:25)\nFilter homopolymer loops    (2024-12-02 06:35:25)\nMerge all possible          (2024-12-02 06:35:25)\nNormalise read depths       (2024-12-02 06:35:25)\nRemove zero length segments (2024-12-02 06:35:25)\nSort link order             (2024-12-02 06:35:25)\nGraph cleaning finished     (2024-12-02 06:35:25)\nSaving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k27_assembly_graph.gfa\n\n\nSPAdes assembly graph summary (2024-12-02 06:35:25)\nK-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score   \n   27         1       1          5,413   5,413            5,413           0   5.00e-01 \u003c-best\n   47         1       1          5,433   5,433            5,433           0   5.00e-01\n   63         1       1          5,449   5,449            5,449           0   5.00e-01\n   77         1       1          5,463   5,463            5,463           0   5.00e-01\n   89         1       1          5,475   5,475            5,475           0   5.00e-01\n   99         1       1          5,485   5,485            5,485           0   5.00e-01\n  107         1       1          5,493   5,493            5,493           0   5.00e-01\n  115         1       1          5,501   5,501            5,501           0   5.00e-01\n  121         1       1          5,507   5,507            5,507           0   5.00e-01\n  127         1       1          5,513   5,513            5,513           0   5.00e-01\n\nRead depth filter: removed 0 contigs totalling 0 bp\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k027.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k047.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k063.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k077.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k089.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k099.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k107.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k115.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k121.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k127.gfa\nDeleting /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/\n\n\nDetermining graph multiplicity (2024-12-02 06:35:25)\n    Multiplicity is the number of times a sequence occurs in the underlying\nsequence. Single-copy contigs (those with a multiplicity of one, occurring only\nonce in the underlying sequence) are particularly useful.\n    Multiplicity determination begins by identifying contigs which are clearly\nsingle-copy because they are of low depth and do not have more than one link\nper side.\n\nMedian depth of 10 longest contigs: 1.00\n\n\nInitial single copy segments:\n    1\n\n    Unicycler now uses a greedy algorithm to propagate multiplicity through the\ngraph. For example, if two single-copy contigs merge together, the resulting\ncontig will get a multiplicity of two. When no more propagation is possible,\nadditional single-copy contigs are added and the process is repeated. This\nallows for multiplicity to be correctly assigned to the chromosome (at the\nmedian depth) but also for plasmids (which may be higher or lower in depth).\n\n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n       FINDING NEW SINGLE-COPY        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \nREMOVING PROPAGATION TOLERANCE        \n          MERGING MULTIPLICITY        \n        SPLITTING MULTIPLICITY        \n\n\nCleaning graph (2024-12-02 06:35:25)\n    Unicycler now performs various cleaning procedures on the graph to remove\noverlaps and simplify the graph structure. The end result is a graph ready for\nbridging.\n\nGrouping graph edges based on overlap removal\n\r0 / 2 (0.0%)\r1 / 2 (50.0%)\r2 / 2 (100.0%)\n\nRemoving graph overlaps\n\n             Bases     Bases\n           trimmed   trimmed\n Segment      from      from\n  number     start       end\n       1        13        14\nGraph overlaps removed\n\n    Unicycler now selects a set of anchor contigs from the single-copy contigs.\nThese are the contigs which will be connected via bridges to form the final\nassembly.\n\n\n1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)\n\nAnchor segments:\n    1\n\n\nCreating SPAdes contig bridges (2024-12-02 06:35:25)\n    SPAdes uses paired-end information to perform repeat resolution (RR) and\nproduce contigs from the assembly graph. SPAdes saves the graph paths\ncorresponding to these contigs in the contigs.paths file. When one of these\npaths contains two or more anchor contigs, Unicycler can create a bridge from\nthe path.\n\nNo SPAdes contig bridges\n\n\nCreating loop unrolling bridges (2024-12-02 06:35:25)\n    When a SPAdes contig path connects an anchor contig with the middle contig\nof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.\nthe loop is not a separate piece of DNA). It then uses the read depth of the\nmiddle and repeat contigs to guess the number of times to traverse the loop and\nmakes a bridge.\n\nNo loop unrolling bridges made\nnone found\n\n\nApplying bridges (2024-12-02 06:35:25)\n    Unicycler now applies to the graph in decreasing order of quality. This\nensures that when multiple, contradictory bridges exist, the most supported\noption is used.\n\nBridge type   Start -\u003e end   Path   Quality   Result\n\n\nCleaning up leftover segments (2024-12-02 06:35:25)\nSegments eligible for deletion:\n\n\nBridged assembly graph (2024-12-02 06:35:25)\n    The assembly is now mostly finished and no more structural changes will be\nmade. Ideally the assembly graph should now have one contig per replicon and no\nerroneous contigs (i.e. a complete assembly). If there are more contigs, then\nthe assembly is not complete.\n\n\nComponent   Segments   Links   Length   N50     Longest segment   Status  \n        1          1       1    5,386   5,386             5,386   complete\n\n\nRotating completed replicons (2024-12-02 06:35:25)\n    Any completed circular contigs (i.e. single contigs which have one link\nconnecting end to start) can have their start position changed without altering\nthe sequence. For consistency, Unicycler now searches for a starting gene (dnaA\nor repA) in each such contig, and if one is found, the contig is rotated to\nstart with that gene on the forward strand.\n\nSegment 1:\n  makeblastdb -dbtype nucl -in replicon.fasta\n  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1\n\nSegment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage\n      1    5,386   1.00x   none found                                             \n\n\nAssembly complete (2024-12-02 06:35:34)\nSaving /galaxy/server/database/jobs_directory/000/9/working/assembly.gfa\nSaving /galaxy/server/database/jobs_directory/000/9/working/assembly.fasta\n\n",  "update_time": "2024-12-02T06:35:36.915840",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/unicycler/unicycler/0.5.1+galaxy0, exit_code: None, stderr: ." ], "status": "failure", "test_index": 2, "time_seconds": 142.8937714099884, "tool_id": "unicycler", "tool_version": "0.5.1+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Starting Unicycler (2024-12-02 06:33:37)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only short reads, Unicycler will essentially function as a SPAdes-optimiser. It will try many k-mer sizes, choose the best based on contig lengthand graph connectivity, and scaffold the graph using SPAdes repeat resolution.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/9/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status     Path                        spades.py     4.0.0     good       /usr/local/bin/spades.py    racon                   not used                               makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb  tblastn       2.16.0+   good       /usr/local/bin/tblastn    Choosing k-mer range for assembly (2024-12-02 06:33:37)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2024-12-02 06:33:38)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/9/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/9/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/9/working/fq2.fastq -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/9/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/9/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/9/working/fq2.fastq -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.1.100+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/9/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/9/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/9/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/9/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/9/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/9/working/spades_assembly/dataset.info") with K=27  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.001     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.074    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.077    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.089    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.090    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.097    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.123     1M / 41M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.135     1M / 41M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.135     1M / 41M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.135     1M / 41M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.135     1M / 41M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.136     1M / 41M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.136     1M / 41M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.136     1M / 41M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:00.632     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:00.635     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:00.802     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:00.802     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:00.830     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:00.830     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.831     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.831     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.831     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.285  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:01.285  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:01.285     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.459     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:01.459     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.497     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:01.497     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:01.598     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:01.608     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:01.621     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:01.624     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:01.627     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:01.628     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:01.631     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:01.631     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:01.631     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:01.631     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:01.631     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:01.633     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:01.633     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:01.633     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:01.634     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:01.634     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:01.634     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:01.635     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:01.635     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.665     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:01.666     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:01.732     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:01.734     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:01.770     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:01.770     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:01.770     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:01.771     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:01.771     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:01.867     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:02.156     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:02.671     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:03.134     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:03.923     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:03.923     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:03.924     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:03.924     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:03.924     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:03.924     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:03.924     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:03.924     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:03.924     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:03.924     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Gap Closer (id: early_gap..        : 292)   SPAdes finished  0:00:03.890     1M / 160M  INFO    General                 (main.cpp                  : 131)   Assembling time: 0 hours 0 minutes 3 seconds===== K127 finished.===== Copy files started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/contigs.paths===== Copy files finished.===== Assembling finished.===== Breaking scaffolds started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/misc --threshold_for_breaking_scaffolds 3===== Breaking scaffolds finished.===== Terminate started.===== Terminate finished. * Assembled contigs are in /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/spades.logThank you for using SPAdes! If you use it in your research, please cite:  Prjibelski, A., Antipov, D., Meleshko, D., Lapidus, A. and Korobeynikov, A., 2020. Using SPAdes de novo assembler. Current protocols in bioinformatics, 70(1), p.e102.  doi.org/10.1002/cpbi.102Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k27 graphRepair multi way junctions  (2024-12-02 06:35:25)Filter by read depth        (2024-12-02 06:35:25)Filter homopolymer loops    (2024-12-02 06:35:25)Merge all possible          (2024-12-02 06:35:25)Normalise read depths       (2024-12-02 06:35:25)Remove zero length segments (2024-12-02 06:35:25)Sort link order             (2024-12-02 06:35:25)Graph cleaning finished     (2024-12-02 06:35:25)Saving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k027_assembly_graph.gfaCleaning k47 graphRepair multi way junctions  (2024-12-02 06:35:25)Filter by read depth        (2024-12-02 06:35:25)Filter homopolymer loops    (2024-12-02 06:35:25)Merge all possible          (2024-12-02 06:35:25)Normalise read depths       (2024-12-02 06:35:25)Remove zero length segments (2024-12-02 06:35:25)Sort link order             (2024-12-02 06:35:25)Graph cleaning finished     (2024-12-02 06:35:25)Saving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k047_assembly_graph.gfaCleaning k63 graphRepair multi way junctions  (2024-12-02 06:35:25)Filter by read depth        (2024-12-02 06:35:25)Filter homopolymer loops    (2024-12-02 06:35:25)Merge all possible          (2024-12-02 06:35:25)Normalise read depths       (2024-12-02 06:35:25)Remove zero length segments (2024-12-02 06:35:25)Sort link order             (2024-12-02 06:35:25)Graph cleaning finished     (2024-12-02 06:35:25)Saving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k063_assembly_graph.gfaCleaning k77 graphRepair multi way junctions  (2024-12-02 06:35:25)Filter by read depth        (2024-12-02 06:35:25)Filter homopolymer loops    (2024-12-02 06:35:25)Merge all possible          (2024-12-02 06:35:25)Normalise read depths       (2024-12-02 06:35:25)Remove zero length segments (2024-12-02 06:35:25)Sort link order             (2024-12-02 06:35:25)Graph cleaning finished     (2024-12-02 06:35:25)Saving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2024-12-02 06:35:25)Filter by read depth        (2024-12-02 06:35:25)Filter homopolymer loops    (2024-12-02 06:35:25)Merge all possible          (2024-12-02 06:35:25)Normalise read depths       (2024-12-02 06:35:25)Remove zero length segments (2024-12-02 06:35:25)Sort link order             (2024-12-02 06:35:25)Graph cleaning finished     (2024-12-02 06:35:25)Saving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2024-12-02 06:35:25)Filter by read depth        (2024-12-02 06:35:25)Filter homopolymer loops    (2024-12-02 06:35:25)Merge all possible          (2024-12-02 06:35:25)Normalise read depths       (2024-12-02 06:35:25)Remove zero length segments (2024-12-02 06:35:25)Sort link order             (2024-12-02 06:35:25)Graph cleaning finished     (2024-12-02 06:35:25)Saving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2024-12-02 06:35:25)Filter by read depth        (2024-12-02 06:35:25)Filter homopolymer loops    (2024-12-02 06:35:25)Merge all possible          (2024-12-02 06:35:25)Normalise read depths       (2024-12-02 06:35:25)Remove zero length segments (2024-12-02 06:35:25)Sort link order             (2024-12-02 06:35:25)Graph cleaning finished     (2024-12-02 06:35:25)Saving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2024-12-02 06:35:25)Filter by read depth        (2024-12-02 06:35:25)Filter homopolymer loops    (2024-12-02 06:35:25)Merge all possible          (2024-12-02 06:35:25)Normalise read depths       (2024-12-02 06:35:25)Remove zero length segments (2024-12-02 06:35:25)Sort link order             (2024-12-02 06:35:25)Graph cleaning finished     (2024-12-02 06:35:25)Saving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2024-12-02 06:35:25)Filter by read depth        (2024-12-02 06:35:25)Filter homopolymer loops    (2024-12-02 06:35:25)Merge all possible          (2024-12-02 06:35:25)Normalise read depths       (2024-12-02 06:35:25)Remove zero length segments (2024-12-02 06:35:25)Sort link order             (2024-12-02 06:35:25)Graph cleaning finished     (2024-12-02 06:35:25)Saving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2024-12-02 06:35:25)Filter by read depth        (2024-12-02 06:35:25)Filter homopolymer loops    (2024-12-02 06:35:25)Merge all possible          (2024-12-02 06:35:25)Normalise read depths       (2024-12-02 06:35:25)Remove zero length segments (2024-12-02 06:35:25)Sort link order             (2024-12-02 06:35:25)Graph cleaning finished     (2024-12-02 06:35:25)Saving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2024-12-02 06:35:25)Filter by read depth        (2024-12-02 06:35:25)Filter homopolymer loops    (2024-12-02 06:35:25)Merge all possible          (2024-12-02 06:35:25)Normalise read depths       (2024-12-02 06:35:25)Remove zero length segments (2024-12-02 06:35:25)Sort link order             (2024-12-02 06:35:25)Graph cleaning finished     (2024-12-02 06:35:25)Saving /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2024-12-02 06:35:25)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k027.gfaDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k047.gfaDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k063.gfaDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k077.gfaDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k089.gfaDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k099.gfaDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k107.gfaDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k115.gfaDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k121.gfaDeleting /galaxy/server/database/jobs_directory/000/9/working/001_spades_graph_k127.gfaDeleting /galaxy/server/database/jobs_directory/000/9/working/spades_assembly/Determining graph multiplicity (2024-12-02 06:35:25)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Cleaning graph (2024-12-02 06:35:25)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removed    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2024-12-02 06:35:25)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2024-12-02 06:35:25)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundApplying bridges (2024-12-02 06:35:25)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultCleaning up leftover segments (2024-12-02 06:35:25)Segments eligible for deletion:Bridged assembly graph (2024-12-02 06:35:25)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Component   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2024-12-02 06:35:25)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2024-12-02 06:35:34)Saving /galaxy/server/database/jobs_directory/000/9/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/9/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #4)" name="3" time="32.71483016014099">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-12-02 06:35:58)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only long reads, Unicycler will assemble the reads with miniasm andthen run repeated polishing rounds using Racon.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_anchor_seg_len 10 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmers 21,23 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/11/workingDependencies:  Program       Version   Status     Path                        spades.py               not used                               racon         1.5.0     good       /usr/local/bin/racon        makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb  tblastn       2.16.0+   good       /usr/local/bin/tblastn    Loading reads (2024-12-02 06:35:58)0 / 40 (0.0%)1 / 40 (2.5%) - 412 bp2 / 40 (5.0%) - 4,847 bp3 / 40 (7.5%) - 8,974 bp4 / 40 (10.0%) - 13,249 bp5 / 40 (12.5%) - 14,258 bp6 / 40 (15.0%) - 14,806 bp7 / 40 (17.5%) - 19,262 bp8 / 40 (20.0%) - 19,737 bp9 / 40 (22.5%) - 20,395 bp10 / 40 (25.0%) - 32,024 bp11 / 40 (27.5%) - 32,698 bp12 / 40 (30.0%) - 34,509 bp13 / 40 (32.5%) - 39,018 bp14 / 40 (35.0%) - 43,351 bp15 / 40 (37.5%) - 44,224 bp16 / 40 (40.0%) - 45,978 bp17 / 40 (42.5%) - 46,402 bp18 / 40 (45.0%) - 61,596 bp19 / 40 (47.5%) - 62,279 bp20 / 40 (50.0%) - 63,700 bp21 / 40 (52.5%) - 66,412 bp22 / 40 (55.0%) - 66,845 bp23 / 40 (57.5%) - 67,316 bp24 / 40 (60.0%) - 69,428 bp25 / 40 (62.5%) - 73,964 bp26 / 40 (65.0%) - 75,608 bp27 / 40 (67.5%) - 80,223 bp28 / 40 (70.0%) - 84,810 bp29 / 40 (72.5%) - 92,076 bp30 / 40 (75.0%) - 92,832 bp31 / 40 (77.5%) - 92,939 bp32 / 40 (80.0%) - 93,532 bp33 / 40 (82.5%) - 96,370 bp34 / 40 (85.0%) - 100,656 bp35 / 40 (87.5%) - 119,222 bp36 / 40 (90.0%) - 123,827 bp37 / 40 (92.5%) - 155,106 bp38 / 40 (95.0%) - 156,254 bp39 / 40 (97.5%) - 157,993 bp40 / 40 (100.0%) - 162,406 bp40 / 40 (100.0%) - 162,406 bpAssembling contigs and long reads with miniasm (2024-12-02 06:35:58)Saving to /galaxy/server/database/jobs_directory/000/11/working/miniasm_assembly/01_assembly_reads.fastq:  40 long readsFinding overlaps with minimap... success  120 overlapsAssembling reads with miniasm... success  7 segments, 6 links    Unicycler removes any links from the string graph which create branches.I.e. if any segment has two or more links connected to one end, those links areremoved. This will result in a graph with only simple linear paths that issuitable for creating unambiguous bridges.No links needed removalSaving /galaxy/server/database/jobs_directory/000/11/working/miniasm_assembly/11_branching_paths_removed.gfaMerging segments into unitigs:Linear unitig: 3708:125-4288- -> f49b:293-4469+ -> 9e6d:143-4411- -> 9780:142-4271- -> a53e:333-4400+ -> b949:140-4359- -> 054c:932-4389-  1 linear unitig  total size = 5,836 bpSaving /galaxy/server/database/jobs_directory/000/11/working/miniasm_assembly/12_unitig_graph.gfaPolishing miniasm assembly with Racon (2024-12-02 06:35:58)    Unicycler now uses Racon to polish the miniasm assembly. It does multiplerounds of polishing to get the best consensus. Circular unitigs are rotatedbetween rounds such that all parts (including the ends) are polished well.Saving to /galaxy/server/database/jobs_directory/000/11/working/miniasm_assembly/racon_polish/polishing_reads.fastq:  40 long readsPolish       Assembly          Mappinground            size          quality0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42862104010+158361061460311473800255cm:i:2000237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1583652215833179612255cm:i:27054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-158362376583334573457255cm:i:1153054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262525-158363023147872399255cm:i:1443708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46052804284-158364393614814004255cm:i:2463708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194286-15836421558335461618255cm:i:884850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271704027+158361680583310324153255cm:i:1744850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934082+15836416022201598255cm:i:30598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713344566-158362699578612813232255cm:i:243598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-158365026637722680255cm:i:129771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-158362657583314693386255cm:i:268771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template4615972786-158363026369052689255cm:i:1579780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331434271-15836338425418344128255cm:i:4709780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330924330-15836450357984301295255cm:i:779e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45365444408-1583669392712083864255cm:i:2379e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630084472-15836421557483511533255cm:i:53a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1583629093222131313255cm:i:22a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template44563354397+158361321525713514062255cm:i:280a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374349+1583623961238938255cm:i:40a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445686537+1583653345798154464255cm:i:26b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351114359-158361673579820624248255cm:i:487b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351091619-158363015254721510255cm:i:68bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template4275934048+158361733583313034100255cm:i:230bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+15836416903111712255cm:i:43f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894205+1583623393910393916255cm:i:166f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092961782+15836424257983671556255cm:i:63begin           5,836             5.330237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162901009505424314045255cm:i:5290237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1629056706287297617255cm:i:630237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162904404122400255cm:i:19054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162902540628722493747255cm:i:527054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1629051247412762423255cm:i:2453708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162904431623224312255cm:i:4863708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16290435462879431933255cm:i:1944850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271164027+162901774628721454513255cm:i:4264850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16290417414211737255cm:i:61598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162902854622622573372255cm:i:501598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1629051283114592780255cm:i:289771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162902825628722683462255cm:i:513771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template4615972745-1629074280515012731255cm:i:2899780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16290354469920224345255cm:i:3779780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694304-16290498462716141287255cm:i:1179e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1629072453419214462255cm:i:3379e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16290459762065801609255cm:i:103a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1629030833386169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162901126570823684582255cm:i:487a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374392+162902310393621016255cm:i:59a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445686539+1629057856254217469255cm:i:45b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162901806625827774452255cm:i:600b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162907416037611529255cm:i:150bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122795+1629052095912149703255cm:i:24bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421149847+162905851307155722255cm:i:17bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template4275934048+162901886628720704401255cm:i:456bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16290418386561834255cm:i:109c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1629020602358156298255cm:i:35f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1629023443621064413255cm:i:421f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16290448862737441785255cm:i:1311               6,290             7.820237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162421016500924603993255cm:i:5300237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1624256266239283613255cm:i:610237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162424408117404255cm:i:18054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162422535623922343704255cm:i:514054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1624251246913872418255cm:i:2713708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162424427623804272255cm:i:4943708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16242431462399551925255cm:i:1964850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271084027+162421759623921944480255cm:i:4404850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16242417354501731255cm:i:67598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162422848617822843330255cm:i:509598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1624251282515042774255cm:i:295771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162422819623922353420255cm:i:510771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template46151092745-1624274278715172713255cm:i:3049780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16242358465920514301255cm:i:3919780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694304-16242493962236181284255cm:i:1149e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1624272449319414421255cm:i:3459e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16242455661585791602255cm:i:105a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1624230773380169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162421133566424054531255cm:i:507a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374397+162422310513531028255cm:i:59a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456107539+1624257596206204447255cm:i:40b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162421799621027494411255cm:i:591b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162427416017951527255cm:i:165bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122847+1624251665916224750255cm:i:35bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421160847+162426021310144708255cm:i:16bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template42751244048+162421908623920614331255cm:i:454bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16242418316671827255cm:i:111c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1624220532352157299255cm:i:37f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1624223439521304372255cm:i:425f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16242444762257621778255cm:i:1382               6,242             8.020237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162651028502524363997255cm:i:5270237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1626556426262281620255cm:i:590237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162654408105404255cm:i:17054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162652544626222283718255cm:i:507054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1626551247813532427255cm:i:2603708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162654429323774289255cm:i:4923708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16265433162629671931255cm:i:1944850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271084027+162651772626221904490255cm:i:4364850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16265417484481744255cm:i:62598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162652857620122703344255cm:i:503598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1626551283414632783255cm:i:284771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162652828626222513434255cm:i:515771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template46151022745-1626574280415112730255cm:i:3059780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16265358467620634318255cm:i:3929780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694328-16265493062466231316255cm:i:1139e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1626572451019874438255cm:i:3509e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16265457361815691608255cm:i:102a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1626530893392169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162651145568024234535255cm:i:509a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374397+162652310633371040255cm:i:56a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456107539+1626557796229223450255cm:i:45b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162651812623327694421255cm:i:601b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162657416157641541255cm:i:156bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122847+1626551825936236754255cm:i:36bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421149847+162655891322155733255cm:i:17bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template42751244048+162651921626220624341255cm:i:449bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16265418446601840255cm:i:111c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1626520632361157298255cm:i:37f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1626523441221824389255cm:i:436f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16265446462487871784255cm:i:1413               6,265             8.04Best polish: /galaxy/server/database/jobs_directory/000/11/working/miniasm_assembly/racon_polish/016_rotated.fastaSaving /galaxy/server/database/jobs_directory/000/11/working/miniasm_assembly/13_racon_polished.gfaAssembly complete (2024-12-02 06:35:58)Saving /galaxy/server/database/jobs_directory/000/11/working/assembly.gfa
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #5)" name="4" time="51.53779435157776">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-12-02 06:36:41)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided both short and long reads, Unicycler will perform a hybrid assembly.It will first use SPAdes to make a short-read assembly graph, and then it willuse various methods to scaffold that graph with the long reads.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/16/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status   Path                        spades.py     4.0.0     good     /usr/local/bin/spades.py    racon         1.5.0     good     /usr/local/bin/racon        makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb  tblastn       2.16.0+   good     /usr/local/bin/tblastn    SPAdes graph already exists. Will use this graph instead of running SPAdes:  /galaxy/server/database/jobs_directory/000/16/working/002_depth_filter.gfaDetermining graph multiplicity (2024-12-02 06:36:41)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments: none    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Cleaning graph (2024-12-02 06:36:41)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 4 (0.0%)1 / 4 (25.0%)2 / 4 (50.0%)3 / 4 (75.0%)4 / 4 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        64        63       2        63        64Graph overlaps removedRemoved zero-length segments:    2    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2024-12-02 06:36:41)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2024-12-02 06:36:41)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundLoading reads (2024-12-02 06:36:41)0 / 40 (0.0%)1 / 40 (2.5%) - 412 bp2 / 40 (5.0%) - 4,847 bp3 / 40 (7.5%) - 8,974 bp4 / 40 (10.0%) - 13,249 bp5 / 40 (12.5%) - 14,258 bp6 / 40 (15.0%) - 14,806 bp7 / 40 (17.5%) - 19,262 bp8 / 40 (20.0%) - 19,737 bp9 / 40 (22.5%) - 20,395 bp10 / 40 (25.0%) - 32,024 bp11 / 40 (27.5%) - 32,698 bp12 / 40 (30.0%) - 34,509 bp13 / 40 (32.5%) - 39,018 bp14 / 40 (35.0%) - 43,351 bp15 / 40 (37.5%) - 44,224 bp16 / 40 (40.0%) - 45,978 bp17 / 40 (42.5%) - 46,402 bp18 / 40 (45.0%) - 61,596 bp19 / 40 (47.5%) - 62,279 bp20 / 40 (50.0%) - 63,700 bp21 / 40 (52.5%) - 66,412 bp22 / 40 (55.0%) - 66,845 bp23 / 40 (57.5%) - 67,316 bp24 / 40 (60.0%) - 69,428 bp25 / 40 (62.5%) - 73,964 bp26 / 40 (65.0%) - 75,608 bp27 / 40 (67.5%) - 80,223 bp28 / 40 (70.0%) - 84,810 bp29 / 40 (72.5%) - 92,076 bp30 / 40 (75.0%) - 92,832 bp31 / 40 (77.5%) - 92,939 bp32 / 40 (80.0%) - 93,532 bp33 / 40 (82.5%) - 96,370 bp34 / 40 (85.0%) - 100,656 bp35 / 40 (87.5%) - 119,222 bp36 / 40 (90.0%) - 123,827 bp37 / 40 (92.5%) - 155,106 bp38 / 40 (95.0%) - 156,254 bp39 / 40 (97.5%) - 157,993 bp40 / 40 (100.0%) - 162,406 bp40 / 40 (100.0%) - 162,406 bpAssembling contigs and long reads with miniasm (2024-12-02 06:36:41)    Unicycler uses miniasm to construct a string graph assembly using both theshort read contigs and the long reads. It will then use the resulting stringgraph to produce bridges between contigs. This method requires decent coverageof long reads and therefore may not be fruitful if long reads are sparse.However, it does not rely on the short read assembly graph having goodconnectivity and is able to bridge an assembly graph even when it contains manydead ends.    Unicycler uses two types of "reads" as assembly input: anchor contigs fromthe short-read assembly and actual long reads which overlap two or more ofthese contigs. It then assembles them with miniasm.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/16/working/miniasm_assembly/all_segments.fastaNumber of minimap alignments: 0Saving to /galaxy/server/database/jobs_directory/000/16/working/miniasm_assembly/01_assembly_reads.fastq:  0 short-read contigs  0 long readsFinding overlaps with minimap... failedAssembling reads with miniasm... empty resultCreating simple long read bridges (2024-12-02 06:36:41)    Unicycler uses long read alignments (from minimap) to resolve simple repeatstructures in the graph. This takes care of some "low-hanging fruit" of thegraph simplification.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/16/working/simple_bridging/all_segments.fastaNumber of minimap alignments: 0    Two-way junctions are defined as cases where two graph contigs (A and B)join together (C) and then split apart again (D and E). This usually representsa simple 2-copy repeat, and there are two possible options for its resolution:(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such ajunction gets to "vote" for option 1, option 2 or neither. Unicycler creates abridge at each junction for the most voted for option.No suitable two-way junctions present    Simple loops are parts of the graph where two contigs (A and B) areconnected via a repeat (C) which loops back to itself (via D). It is possibleto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is thecorrect number of times through. In this step, such reads are found and each isaligned against alternative loop counts. A reads casts its "vote" for the loopcount it agrees best with, and Unicycler creates a bridge using the most votedfor count.No suitable simple loops presentDetermining low score threshold (2024-12-02 06:36:41)    Before conducting semi-global alignment of the long reads to the assemblygraph, Unicycler must determine a minimum alignment score threshold such thatnonsense alignments are excluded. To choose a threshold automatically, itexamines alignments between random sequences and selects a score a few standarddeviations above the mean.Automatically choosing a threshold using random alignment scores.Random alignment mean score: 61.66         standard deviation:  1.31        Low score threshold: 61.66 + (7 x 1.31) = 70.86Aligning reads with minimap (2024-12-02 06:36:41)Done! 0 out of 40 reads alignedAligning reads (2024-12-02 06:36:41)1/40: 570cfbe8-1011-441d-911f-d98dcc4472fc_Basecall_1D_template (412 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None2/40: b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template (4435 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None3/40: 4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template (4127 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None4/40: bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template (4275 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None5/40: f5c07582-ccd5-4bd8-aa45-4ebb5011fc08_Basecall_1D_template (1009 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None6/40: 517eff45-d956-49c2-826b-2c46d808ac0b_Basecall_1D_template (548 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None7/40: a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template (4456 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None8/40: d5a76b7f-4807-466d-898b-57cc86dcd23b_Basecall_1D_template (475 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None9/40: 0a216098-91e8-4e7d-8a6e-f01787334e25_Basecall_1D_template (658 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None10/40: 01404034-9c48-4481-9a22-a3f8ca504f46_Basecall_1D_template (11629 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None11/40: 91ad6660-073d-4cb5-8d63-d245dc68bc13_Basecall_1D_template (674 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None12/40: ac90d3b2-5920-4aa0-b847-06f6ad96c660_Basecall_1D_template (1811 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None13/40: f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template (4509 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None14/40: 9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template (4333 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None15/40: ac9e88d3-a34a-4471-afa0-a32482adae44_Basecall_1D_template (873 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None16/40: 1806bd87-3bc8-4c85-8ebb-9bfc69f6ab80_Basecall_1D_template (1754 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None17/40: d6240347-58c8-45c1-9fc6-c81f62e52627_Basecall_1D_template (424 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None18/40: a7b73a5b-e278-4c94-9ac9-cb3c3375de5c_Basecall_1D_template (15194 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None19/40: 062d408e-cb5f-4a8d-a64e-4c5195b7cb42_Basecall_1D_template (683 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None20/40: bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template (1421 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None21/40: cc236ee7-3730-4da5-9285-8b3fd7f4a891_Basecall_1D_template (2712 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None22/40: a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template (433 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None23/40: c4e8bab7-4a32-4e58-81f6-14e6aad83ecd_Basecall_1D_template (471 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None24/40: 2c2d8aa9-504b-4d7a-9ecf-05915b2019f4_Basecall_1D_template (2112 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None25/40: 9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template (4536 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None26/40: ebbcf643-de70-42e5-b191-636075c46300_Basecall_1D_template (1644 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None27/40: 771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template (4615 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None28/40: 598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template (4587 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None29/40: 92e47453-14cb-4eaa-a227-1fb13413ba87_Basecall_1D_template (7266 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None30/40: f5a2663c-bdb6-40ca-b515-5967b8203f05_Basecall_1D_template (756 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None31/40: 256f6d28-2c36-440a-b840-d41bedebcca7_Basecall_1D_template (107 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None32/40: 390d5a94-5dd8-48ed-8e3d-9abaedea15c9_Basecall_1D_template (593 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None33/40: 2126f8fe-6e3b-4785-bec0-0743133405d9_Basecall_1D_template (2838 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None34/40: 0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template (4286 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None35/40: 5b948563-86ae-4075-a648-43355c36cc84_Basecall_1D_template (18566 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None36/40: 3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template (4605 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None37/40: c302e6a4-a0c3-4d66-90f8-3fe9a031a6a3_Basecall_1D_template (31279 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None38/40: c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template (1148 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None39/40: 8c147c6e-6239-4933-9bb9-f9d5e6976103_Basecall_1D_template (1739 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  None40/40: 054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template (4413 bp)minimap alignments:Reference ranges:  NoneFinal alignments:  NoneRead alignment summary (2024-12-02 06:36:41)Total read count:        40Fully aligned reads:      0Partially aligned reads:  0Unaligned reads:         40570cfbe8-1011-441d-911f-d98dcc4472fc_Basecall_1D_template, b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template, 4850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template, bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template, f5c07582-ccd5-4bd8-aa45-4ebb5011fc08_Basecall_1D_template, 517eff45-d956-49c2-826b-2c46d808ac0b_Basecall_1D_template, a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template, d5a76b7f-4807-466d-898b-57cc86dcd23b_Basecall_1D_template, 0a216098-91e8-4e7d-8a6e-f01787334e25_Basecall_1D_template, 01404034-9c48-4481-9a22-a3f8ca504f46_Basecall_1D_template, 91ad6660-073d-4cb5-8d63-d245dc68bc13_Basecall_1D_template, ac90d3b2-5920-4aa0-b847-06f6ad96c660_Basecall_1D_template, f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template, 9780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template, ac9e88d3-a34a-4471-afa0-a32482adae44_Basecall_1D_template, 1806bd87-3bc8-4c85-8ebb-9bfc69f6ab80_Basecall_1D_template, d6240347-58c8-45c1-9fc6-c81f62e52627_Basecall_1D_template, a7b73a5b-e278-4c94-9ac9-cb3c3375de5c_Basecall_1D_template, 062d408e-cb5f-4a8d-a64e-4c5195b7cb42_Basecall_1D_template, bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template, cc236ee7-3730-4da5-9285-8b3fd7f4a891_Basecall_1D_template, a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template, c4e8bab7-4a32-4e58-81f6-14e6aad83ecd_Basecall_1D_template, 2c2d8aa9-504b-4d7a-9ecf-05915b2019f4_Basecall_1D_template, 9e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template, ebbcf643-de70-42e5-b191-636075c46300_Basecall_1D_template, 771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template, 598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template, 92e47453-14cb-4eaa-a227-1fb13413ba87_Basecall_1D_template, f5a2663c-bdb6-40ca-b515-5967b8203f05_Basecall_1D_template, 256f6d28-2c36-440a-b840-d41bedebcca7_Basecall_1D_template, 390d5a94-5dd8-48ed-8e3d-9abaedea15c9_Basecall_1D_template, 2126f8fe-6e3b-4785-bec0-0743133405d9_Basecall_1D_template, 0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template, 5b948563-86ae-4075-a648-43355c36cc84_Basecall_1D_template, 3708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template, c302e6a4-a0c3-4d66-90f8-3fe9a031a6a3_Basecall_1D_template, c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template, 8c147c6e-6239-4933-9bb9-f9d5e6976103_Basecall_1D_template, 054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_templateTotal bases aligned:      0 bpMean alignment identity:  0.0%Deleting /galaxy/server/database/jobs_directory/000/16/working/read_alignment/Setting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00Building long read bridges (2024-12-02 06:36:41)    Unicycler uses the long read alignments to produce bridges between anchorsegments. These bridges can be formed using as few as one long read, givingUnicycler the ability to bridge the graph even when long-read depth is low.Median depth of 10 longest contigs: 1.00                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path                Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  QualityApplying bridges (2024-12-02 06:36:41)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultCleaning up leftover segments (2024-12-02 06:36:41)Segments eligible for deletion:Bridged assembly graph (2024-12-02 06:36:41)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Component   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2024-12-02 06:36:41)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2024-12-02 06:36:50)Saving /galaxy/server/database/jobs_directory/000/16/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/16/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #6)" name="5" time="152.99949550628662">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-12-02 06:37:24)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only short reads, Unicycler will essentially function as a SPAdes-optimiser. It will try many k-mer sizes, choose the best based on contig lengthand graph connectivity, and scaffold the graph using SPAdes repeat resolution.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 1Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/19/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status     Path                        spades.py     4.0.0     good       /usr/local/bin/spades.py    racon                   not used                               makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb  tblastn       2.16.0+   good       /usr/local/bin/tblastn    Choosing k-mer range for assembly (2024-12-02 06:37:24)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2024-12-02 06:37:24)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/19/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/19/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/19/working/fq2.fastq -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/19/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/19/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/19/working/fq2.fastq -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.1.100+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/19/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/19/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/19/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/19/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/19/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/19/working/spades_assembly/dataset.info") with K=27  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.000     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.000     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.062    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.064    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.076    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.077    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.083    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.108     1M / 41M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.118     1M / 41M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.118     1M / 41M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.118     1M / 41M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.118     1M / 41M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.119     1M / 41M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.119     1M / 41M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.119     1M / 41M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:00.631     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:00.634     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:00.800     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:00.800     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:00.829     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:00.829     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.830     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.830     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.830     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.336  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:01.336  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:01.337     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.500     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:01.500     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.535     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:01.535     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:01.653     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:01.663     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:01.677     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:01.679     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:01.682     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:01.684     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:01.687     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:01.687     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:01.687     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:01.687     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:01.687     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:01.689     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:01.689     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:01.689     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:01.689     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:01.689     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:01.689     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:01.691     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:01.691     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.716     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:01.717     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:01.779     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:01.780     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:01.814     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:01.815     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:01.815     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:01.815     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:01.815     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:01.911     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:02.202     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:02.714     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:03.176     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:03.960     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:03.960     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:03.961     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:03.962     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:03.962     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:03.962     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:03.962     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:03.962     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:03.962     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:03.962     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Gap Cl..tabase/jobs_directory/000/19/working/spades_assembly/K127/scaffolds.fasta  0:00:04.000     3M / 159M  INFO    General                 (contig_output_stage.cpp   : 107)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/scaffolds.paths  0:00:04.004     3M / 159M  INFO    General                 (contig_output_stage.cpp   : 114)   Populating GFA with scaffold paths  0:00:04.010     3M / 159M  INFO    General                 (pipeline.cpp              : 292)   SPAdes finished  0:00:04.011     1M / 159M  INFO    General                 (main.cpp                  : 131)   Assembling time: 0 hours 0 minutes 4 seconds===== K127 finished.===== Copy files started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/contigs.paths===== Copy files finished.===== Assembling finished.===== Breaking scaffolds started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/misc --threshold_for_breaking_scaffolds 3===== Breaking scaffolds finished.===== Terminate started.===== Terminate finished. * Assembled contigs are in /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/spades.logThank you for using SPAdes! If you use it in your research, please cite:  Prjibelski, A., Antipov, D., Meleshko, D., Lapidus, A. and Korobeynikov, A., 2020. Using SPAdes de novo assembler. Current protocols in bioinformatics, 70(1), p.e102.  doi.org/10.1002/cpbi.102Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k27 graphRepair multi way junctions  (2024-12-02 06:39:14)Filter by read depth        (2024-12-02 06:39:14)Filter homopolymer loops    (2024-12-02 06:39:14)Merge all possible          (2024-12-02 06:39:14)Normalise read depths       (2024-12-02 06:39:14)Remove zero length segments (2024-12-02 06:39:14)Sort link order             (2024-12-02 06:39:14)Graph cleaning finished     (2024-12-02 06:39:14)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k027_assembly_graph.gfaCleaning k47 graphRepair multi way junctions  (2024-12-02 06:39:14)Filter by read depth        (2024-12-02 06:39:14)Filter homopolymer loops    (2024-12-02 06:39:14)Merge all possible          (2024-12-02 06:39:14)Normalise read depths       (2024-12-02 06:39:14)Remove zero length segments (2024-12-02 06:39:14)Sort link order             (2024-12-02 06:39:14)Graph cleaning finished     (2024-12-02 06:39:14)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k047_assembly_graph.gfaCleaning k63 graphRepair multi way junctions  (2024-12-02 06:39:14)Filter by read depth        (2024-12-02 06:39:14)Filter homopolymer loops    (2024-12-02 06:39:14)Merge all possible          (2024-12-02 06:39:14)Normalise read depths       (2024-12-02 06:39:14)Remove zero length segments (2024-12-02 06:39:14)Sort link order             (2024-12-02 06:39:14)Graph cleaning finished     (2024-12-02 06:39:14)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k063_assembly_graph.gfaCleaning k77 graphRepair multi way junctions  (2024-12-02 06:39:14)Filter by read depth        (2024-12-02 06:39:14)Filter homopolymer loops    (2024-12-02 06:39:14)Merge all possible          (2024-12-02 06:39:14)Normalise read depths       (2024-12-02 06:39:14)Remove zero length segments (2024-12-02 06:39:14)Sort link order             (2024-12-02 06:39:14)Graph cleaning finished     (2024-12-02 06:39:14)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2024-12-02 06:39:14)Filter by read depth        (2024-12-02 06:39:14)Filter homopolymer loops    (2024-12-02 06:39:14)Merge all possible          (2024-12-02 06:39:14)Normalise read depths       (2024-12-02 06:39:14)Remove zero length segments (2024-12-02 06:39:14)Sort link order             (2024-12-02 06:39:14)Graph cleaning finished     (2024-12-02 06:39:14)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2024-12-02 06:39:14)Filter by read depth        (2024-12-02 06:39:14)Filter homopolymer loops    (2024-12-02 06:39:14)Merge all possible          (2024-12-02 06:39:14)Normalise read depths       (2024-12-02 06:39:14)Remove zero length segments (2024-12-02 06:39:14)Sort link order             (2024-12-02 06:39:14)Graph cleaning finished     (2024-12-02 06:39:14)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2024-12-02 06:39:14)Filter by read depth        (2024-12-02 06:39:14)Filter homopolymer loops    (2024-12-02 06:39:14)Merge all possible          (2024-12-02 06:39:14)Normalise read depths       (2024-12-02 06:39:14)Remove zero length segments (2024-12-02 06:39:14)Sort link order             (2024-12-02 06:39:14)Graph cleaning finished     (2024-12-02 06:39:14)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2024-12-02 06:39:14)Filter by read depth        (2024-12-02 06:39:14)Filter homopolymer loops    (2024-12-02 06:39:14)Merge all possible          (2024-12-02 06:39:14)Normalise read depths       (2024-12-02 06:39:14)Remove zero length segments (2024-12-02 06:39:14)Sort link order             (2024-12-02 06:39:14)Graph cleaning finished     (2024-12-02 06:39:14)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2024-12-02 06:39:14)Filter by read depth        (2024-12-02 06:39:14)Filter homopolymer loops    (2024-12-02 06:39:14)Merge all possible          (2024-12-02 06:39:14)Normalise read depths       (2024-12-02 06:39:14)Remove zero length segments (2024-12-02 06:39:14)Sort link order             (2024-12-02 06:39:14)Graph cleaning finished     (2024-12-02 06:39:14)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2024-12-02 06:39:14)Filter by read depth        (2024-12-02 06:39:14)Filter homopolymer loops    (2024-12-02 06:39:14)Merge all possible          (2024-12-02 06:39:14)Normalise read depths       (2024-12-02 06:39:14)Remove zero length segments (2024-12-02 06:39:14)Sort link order             (2024-12-02 06:39:14)Graph cleaning finished     (2024-12-02 06:39:14)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2024-12-02 06:39:14)Filter by read depth        (2024-12-02 06:39:14)Filter homopolymer loops    (2024-12-02 06:39:14)Merge all possible          (2024-12-02 06:39:14)Normalise read depths       (2024-12-02 06:39:14)Remove zero length segments (2024-12-02 06:39:14)Sort link order             (2024-12-02 06:39:14)Graph cleaning finished     (2024-12-02 06:39:14)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2024-12-02 06:39:14)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/Determining graph multiplicity (2024-12-02 06:39:14)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Saving /galaxy/server/database/jobs_directory/000/19/working/002_depth_filter.gfaCleaning graph (2024-12-02 06:39:14)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removedSaving /galaxy/server/database/jobs_directory/000/19/working/003_overlaps_removed.gfa    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2024-12-02 06:39:14)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2024-12-02 06:39:14)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundApplying bridges (2024-12-02 06:39:14)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultSaving /galaxy/server/database/jobs_directory/000/19/working/004_bridges_applied.gfaCleaning up leftover segments (2024-12-02 06:39:14)Segments eligible for deletion:Bridged assembly graph (2024-12-02 06:39:14)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Saving /galaxy/server/database/jobs_directory/000/19/working/005_final_clean.gfaComponent   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2024-12-02 06:39:14)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2024-12-02 06:39:23)Saving /galaxy/server/database/jobs_directory/000/19/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/19/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #7)" name="6" time="156.31858253479004">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-12-02 06:40:01)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided both short and long reads, Unicycler will perform a hybrid assembly.It will first use SPAdes to make a short-read assembly graph, and then it willuse various methods to scaffold that graph with the long reads.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 2Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/23/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status   Path                        spades.py     4.0.0     good     /usr/local/bin/spades.py    racon         1.5.0     good     /usr/local/bin/racon        makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb  tblastn       2.16.0+   good     /usr/local/bin/tblastn    Choosing k-mer range for assembly (2024-12-02 06:40:01)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2024-12-02 06:40:01)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/23/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/23/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/23/working/fq2.fastq -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/23/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/23/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/23/working/fq2.fastq -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.1.100+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/23/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/23/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/23/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/23/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/23/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/23/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/23/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/23/working/spades_assembly/dataset.info") with K=27  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.000     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.005     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.063    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.065    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.079    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.080    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.086    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.112     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.123     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.123     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.123     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.123     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.125     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.125     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.125     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:00.641     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:00.644     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:00.815     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:00.816     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:00.847     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:00.847     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.848     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.848     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.848     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.333  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:01.333  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:01.334     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.500     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:01.500     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.537     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:01.538     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:01.644     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:01.654     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:01.667     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:01.670     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:01.673     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:01.674     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:01.677     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:01.678     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:01.678     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:01.678     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:01.678     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:01.679     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:01.680     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:01.680     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:01.680     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:01.680     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:01.680     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:01.681     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:01.681     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.708     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:01.708     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:01.768     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:01.769     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:01.813     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:01.813     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:01.813     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:01.813     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:01.813     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:01.908     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:02.201     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:02.718     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:03.184     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:03.971     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:03.971     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:03.972     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:03.972     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:03.972     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:03.972     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:03.972     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:03.972     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:03.972     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:03.972     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Gap Closer (id: ea..all possible          (2024-12-02 06:41:49)Normalise read depths       (2024-12-02 06:41:49)Remove zero length segments (2024-12-02 06:41:49)Sort link order             (2024-12-02 06:41:49)Graph cleaning finished     (2024-12-02 06:41:49)Saving /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/k063_assembly_graph.gfaCleaning k77 graphRepair multi way junctions  (2024-12-02 06:41:49)Filter by read depth        (2024-12-02 06:41:49)Filter homopolymer loops    (2024-12-02 06:41:49)Merge all possible          (2024-12-02 06:41:49)Normalise read depths       (2024-12-02 06:41:49)Remove zero length segments (2024-12-02 06:41:49)Sort link order             (2024-12-02 06:41:49)Graph cleaning finished     (2024-12-02 06:41:49)Saving /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2024-12-02 06:41:49)Filter by read depth        (2024-12-02 06:41:49)Filter homopolymer loops    (2024-12-02 06:41:49)Merge all possible          (2024-12-02 06:41:49)Normalise read depths       (2024-12-02 06:41:49)Remove zero length segments (2024-12-02 06:41:49)Sort link order             (2024-12-02 06:41:49)Graph cleaning finished     (2024-12-02 06:41:49)Saving /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2024-12-02 06:41:49)Filter by read depth        (2024-12-02 06:41:49)Filter homopolymer loops    (2024-12-02 06:41:49)Merge all possible          (2024-12-02 06:41:49)Normalise read depths       (2024-12-02 06:41:49)Remove zero length segments (2024-12-02 06:41:49)Sort link order             (2024-12-02 06:41:49)Graph cleaning finished     (2024-12-02 06:41:49)Saving /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2024-12-02 06:41:49)Filter by read depth        (2024-12-02 06:41:49)Filter homopolymer loops    (2024-12-02 06:41:49)Merge all possible          (2024-12-02 06:41:49)Normalise read depths       (2024-12-02 06:41:49)Remove zero length segments (2024-12-02 06:41:49)Sort link order             (2024-12-02 06:41:49)Graph cleaning finished     (2024-12-02 06:41:49)Saving /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2024-12-02 06:41:49)Filter by read depth        (2024-12-02 06:41:49)Filter homopolymer loops    (2024-12-02 06:41:49)Merge all possible          (2024-12-02 06:41:49)Normalise read depths       (2024-12-02 06:41:49)Remove zero length segments (2024-12-02 06:41:49)Sort link order             (2024-12-02 06:41:49)Graph cleaning finished     (2024-12-02 06:41:49)Saving /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2024-12-02 06:41:49)Filter by read depth        (2024-12-02 06:41:49)Filter homopolymer loops    (2024-12-02 06:41:49)Merge all possible          (2024-12-02 06:41:49)Normalise read depths       (2024-12-02 06:41:49)Remove zero length segments (2024-12-02 06:41:49)Sort link order             (2024-12-02 06:41:49)Graph cleaning finished     (2024-12-02 06:41:49)Saving /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2024-12-02 06:41:49)Filter by read depth        (2024-12-02 06:41:49)Filter homopolymer loops    (2024-12-02 06:41:49)Merge all possible          (2024-12-02 06:41:49)Normalise read depths       (2024-12-02 06:41:49)Remove zero length segments (2024-12-02 06:41:49)Sort link order             (2024-12-02 06:41:49)Graph cleaning finished     (2024-12-02 06:41:49)Saving /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2024-12-02 06:41:49)Filter by read depth        (2024-12-02 06:41:49)Filter homopolymer loops    (2024-12-02 06:41:49)Merge all possible          (2024-12-02 06:41:49)Normalise read depths       (2024-12-02 06:41:49)Remove zero length segments (2024-12-02 06:41:49)Sort link order             (2024-12-02 06:41:49)Graph cleaning finished     (2024-12-02 06:41:49)Saving /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2024-12-02 06:41:49)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/Determining graph multiplicity (2024-12-02 06:41:49)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Saving /galaxy/server/database/jobs_directory/000/23/working/002_depth_filter.gfaCleaning graph (2024-12-02 06:41:49)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removedSaving /galaxy/server/database/jobs_directory/000/23/working/003_overlaps_removed.gfa    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2024-12-02 06:41:49)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2024-12-02 06:41:49)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundLoading reads (2024-12-02 06:41:49)0 / 1 (0.0%)1 / 1 (100.0%) - 5,386 bp1 / 1 (100.0%) - 5,386 bpAssembling contigs and long reads with miniasm (2024-12-02 06:41:49)    Unicycler uses miniasm to construct a string graph assembly using both theshort read contigs and the long reads. It will then use the resulting stringgraph to produce bridges between contigs. This method requires decent coverageof long reads and therefore may not be fruitful if long reads are sparse.However, it does not rely on the short read assembly graph having goodconnectivity and is able to bridge an assembly graph even when it contains manydead ends.    Unicycler uses two types of "reads" as assembly input: anchor contigs fromthe short-read assembly and actual long reads which overlap two or more ofthese contigs. It then assembles them with miniasm.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/23/working/miniasm_assembly/all_segments.fasta1538635158+15386227538251555155255cm:i:11491538651635383+153861221220220255cm:i:47Number of minimap alignments: 1Saving to /galaxy/server/database/jobs_directory/000/23/working/miniasm_assembly/01_assembly_reads.fastq:  0 short-read contigs  1 long readsFinding overlaps with minimap... failedAssembling reads with miniasm... empty resultCreating simple long read bridges (2024-12-02 06:41:49)    Unicycler uses long read alignments (from minimap) to resolve simple repeatstructures in the graph. This takes care of some "low-hanging fruit" of thegraph simplification.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/23/working/simple_bridging/all_segments.fasta1538635158+15386227538251555155255cm:i:11491538651635383+153861221220220255cm:i:47Number of minimap alignments: 1    Two-way junctions are defined as cases where two graph contigs (A and B)join together (C) and then split apart again (D and E). This usually representsa simple 2-copy repeat, and there are two possible options for its resolution:(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such ajunction gets to "vote" for option 1, option 2 or neither. Unicycler creates abridge at each junction for the most voted for option.No suitable two-way junctions present    Simple loops are parts of the graph where two contigs (A and B) areconnected via a repeat (C) which loops back to itself (via D). It is possibleto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is thecorrect number of times through. In this step, such reads are found and each isaligned against alternative loop counts. A reads casts its "vote" for the loopcount it agrees best with, and Unicycler creates a bridge using the most votedfor count.No suitable simple loops presentDetermining low score threshold (2024-12-02 06:41:49)    Before conducting semi-global alignment of the long reads to the assemblygraph, Unicycler must determine a minimum alignment score threshold such thatnonsense alignments are excluded. To choose a threshold automatically, itexamines alignments between random sequences and selects a score a few standarddeviations above the mean.Automatically choosing a threshold using random alignment scores.Random alignment mean score: 61.66         standard deviation:  1.31        Low score threshold: 61.66 + (7 x 1.31) = 70.86Aligning reads with minimap (2024-12-02 06:41:49)1538655161+15386229538551565156255cm:i:9591538651685384+153866222216216255cm:i:39Done! 1 out of 1 reads alignedAligning reads (2024-12-02 06:41:49)1/1: 1 (5386 bp)minimap alignments:    5,5161,+,1,229,5385    5168,5384,+,1,6,222Reference ranges:    1+: 0 - 5386Range: 1: 0 - 5386    common 10-mers: 5464    line 1: 215 points, score=213.009259 (good)    line 2: 5153 points, score=5151.000388 (good)All Seqan alignments (time to align = 0.060 s):  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1          0      224        5162      5386       +        672        100.00   100.00%         1        224     5386           0      5162       +      15486        100.00   100.00%Final alignments:  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1        224     5386           0      5162       +      15486        100.00   100.00%         1          0      224        5162      5386       +        672        100.00   100.00%Read alignment summary (2024-12-02 06:41:49)Total read count:            1Fully aligned reads:         1Partially aligned reads:     0Unaligned reads:             0Total bases aligned:     5,386 bpMean alignment identity:   100.0%Setting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00Building long read bridges (2024-12-02 06:41:49)    Unicycler uses the long read alignments to produce bridges between anchorsegments. These bridges can be formed using as few as one long read, givingUnicycler the ability to bridge the graph even when long-read depth is low.Median depth of 10 longest contigs: 1.00                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path                Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  QualityApplying bridges (2024-12-02 06:41:49)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultSaving /galaxy/server/database/jobs_directory/000/23/working/004_bridges_applied.gfaCleaning up leftover segments (2024-12-02 06:41:49)Segments eligible for deletion:Bridged assembly graph (2024-12-02 06:41:49)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Saving /galaxy/server/database/jobs_directory/000/23/working/005_final_clean.gfaComponent   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2024-12-02 06:41:49)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2024-12-02 06:41:58)Saving /galaxy/server/database/jobs_directory/000/23/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/23/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #8)" name="7" time="11.021497964859009">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 7, "time_seconds": 11.021497964859009, "tool_id": "unicycler", "tool_version": "0.5.1+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="vcfcheck (Test #1)" name="0" time="43.19711637496948">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            index file localref.fa.fai not found, generating...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="vcfdistance (Test #1)" name="0" time="33.1563458442688">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
</testsuite>