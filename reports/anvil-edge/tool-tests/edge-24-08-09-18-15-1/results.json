{"version": "0.1", "suitename": "Galaxy Tool Tests", "results": {"total": 101, "errors": 20, "failures": 15, "skips": 1}, "tests": [{"id": "anndata_manipulate/0.7.5+galaxy1-0", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 0, "time_seconds": 45.13432240486145, "inputs": {"input": {"src": "hda", "id": "c5eec1c657a04e53"}, "manipulate|other_adatas": {"src": "hda", "id": "c5eec1c657a04e53"}, "manipulate|join": "inner", "manipulate|batch_key": "batch", "manipulate|index_unique": "-", "manipulate|function": "concatenate"}, "job": {"model_class": "Job", "id": "0318215d60060df1", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:08:48.298950", "update_time": "2024-08-09T19:09:12.280609", "galaxy_version": "24.1", "external_id": "gxy-kqnqf", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/jobs_directory/000/135/configs/tmpu8d1qsyp' && python '/galaxy/server/database/jobs_directory/000/135/configs/tmpu8d1qsyp'", "user_email": "tests@fake.org", "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17", "params": {"__input_ext": "\"h5ad\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "manipulate": "{\"__current_case__\": 0, \"batch_key\": \"batch\", \"function\": \"concatenate\", \"index_unique\": \"-\", \"join\": \"inner\", \"other_adatas\": {\"values\": [{\"id\": 150, \"src\": \"hda\"}]}}"}, "inputs": {"manipulate|other_adatas1": {"id": "c5eec1c657a04e53", "src": "hda", "uuid": "fb01fc69-73fe-4c17-bd40-ccc8be6abeee"}, "manipulate|other_adatas": {"id": "c5eec1c657a04e53", "src": "hda", "uuid": "fb01fc69-73fe-4c17-bd40-ccc8be6abeee"}, "input": {"id": "c5eec1c657a04e53", "src": "hda", "uuid": "fb01fc69-73fe-4c17-bd40-ccc8be6abeee"}}, "outputs": {"anndata": {"id": "88566abe78aeb4cc", "src": "hda", "uuid": "a3966dc0-d7a1-4fd7-8b8c-3a7a8027d7ac"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/f/b/0/dataset_fb01fc69-73fe-4c17-bd40-ccc8be6abeee.dat')\n\nadata_0 = ad.read('/galaxy/server/database/objects/f/b/0/dataset_fb01fc69-73fe-4c17-bd40-ccc8be6abeee.dat')\nadata = adata.concatenate(\n    adata_0,\n    join='inner',\n    index_unique='-',\n    batch_key='batch')\n\n\nadata.write('anndata.h5ad')\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/f/b/0/dataset_fb01fc69-73fe-4c17-bd40-ccc8be6abeee.dat')\n\nadata_0 = ad.read('/galaxy/server/database/objects/f/b/0/dataset_fb01fc69-73fe-4c17-bd40-ccc8be6abeee.dat')\nadata = adata.concatenate(\n    adata_0,\n    join='inner',\n    index_unique='-',\n    batch_key='batch')\n\n\nadata.write('anndata.h5ad')\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:08:58", "plugin": "core", "name": "end_epoch", "raw_value": "1723230538.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:08:57", "plugin": "core", "name": "start_epoch", "raw_value": "1723230537.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-0", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 0, "time_seconds": 32.96119952201843, "inputs": {"input": {"src": "hda", "id": "ee71dadd85a13fd3"}, "manipulate|other_adatas": {"src": "hda", "id": "ee71dadd85a13fd3"}, "manipulate|join": "inner", "manipulate|batch_key": "batch", "manipulate|index_unique": "-", "manipulate|function": "concatenate"}, "job": {"model_class": "Job", "id": "744d6d43d84991cb", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:15:26.275809", "update_time": "2024-08-09T19:15:40.055219", "galaxy_version": "24.1", "external_id": "gxy-chf4h", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/jobs_directory/000/159/configs/tmp0050ac92' && python '/galaxy/server/database/jobs_directory/000/159/configs/tmp0050ac92'", "user_email": "tests@fake.org", "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17", "params": {"__input_ext": "\"h5ad\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "manipulate": "{\"__current_case__\": 0, \"batch_key\": \"batch\", \"function\": \"concatenate\", \"index_unique\": \"-\", \"join\": \"inner\", \"other_adatas\": {\"values\": [{\"id\": 174, \"src\": \"hda\"}]}}"}, "inputs": {"input": {"id": "ee71dadd85a13fd3", "src": "hda", "uuid": "d0557bca-e82a-49d9-9e70-ab47bc721c2f"}, "manipulate|other_adatas": {"id": "ee71dadd85a13fd3", "src": "hda", "uuid": "d0557bca-e82a-49d9-9e70-ab47bc721c2f"}, "manipulate|other_adatas1": {"id": "ee71dadd85a13fd3", "src": "hda", "uuid": "d0557bca-e82a-49d9-9e70-ab47bc721c2f"}}, "outputs": {"anndata": {"id": "91f1c3cdd7c1b9b7", "src": "hda", "uuid": "64a96c95-fd7c-4908-9047-c1d18179931b"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/d/0/5/dataset_d0557bca-e82a-49d9-9e70-ab47bc721c2f.dat')\n\nadata_0 = ad.read('/galaxy/server/database/objects/d/0/5/dataset_d0557bca-e82a-49d9-9e70-ab47bc721c2f.dat')\nadata = adata.concatenate(\n    adata_0,\n    join='inner',\n    index_unique='-',\n    batch_key='batch')\n\n\nadata.write('anndata.h5ad')\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/d/0/5/dataset_d0557bca-e82a-49d9-9e70-ab47bc721c2f.dat')\n\nadata_0 = ad.read('/galaxy/server/database/objects/d/0/5/dataset_d0557bca-e82a-49d9-9e70-ab47bc721c2f.dat')\nadata = adata.concatenate(\n    adata_0,\n    join='inner',\n    index_unique='-',\n    batch_key='batch')\n\n\nadata.write('anndata.h5ad')\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:15:29", "plugin": "core", "name": "end_epoch", "raw_value": "1723230929.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:15:28", "plugin": "core", "name": "start_epoch", "raw_value": "1723230928.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-1", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 1, "time_seconds": 36.29925179481506, "inputs": {"input": {"src": "hda", "id": "5a62dccf5eb7c72f"}, "manipulate|join": "-", "manipulate|function": "obs_names_make_unique"}, "job": {"model_class": "Job", "id": "af94a767885d890a", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:09:33.530593", "update_time": "2024-08-09T19:09:48.608506", "galaxy_version": "24.1", "external_id": "gxy-trlrv", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/jobs_directory/000/137/configs/tmpee8vioag' && python '/galaxy/server/database/jobs_directory/000/137/configs/tmpee8vioag'", "user_email": "tests@fake.org", "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17", "params": {"__input_ext": "\"h5ad\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "manipulate": "{\"__current_case__\": 1, \"function\": \"obs_names_make_unique\", \"join\": \"-\"}"}, "inputs": {"input": {"id": "5a62dccf5eb7c72f", "src": "hda", "uuid": "3684a379-0cb0-44e0-8513-2d444897dc55"}}, "outputs": {"anndata": {"id": "04e546dc4479f91d", "src": "hda", "uuid": "3a48e14d-710f-45ec-a49c-37a361cf43a2"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/3/6/8/dataset_3684a379-0cb0-44e0-8513-2d444897dc55.dat')\n\nadata.obs_names_make_unique(join='-')\n\n\nadata.write('anndata.h5ad')\n", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_stdout": "", "job_stderr": "", "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/3/6/8/dataset_3684a379-0cb0-44e0-8513-2d444897dc55.dat')\n\nadata.obs_names_make_unique(join='-')\n\n\nadata.write('anndata.h5ad')\n", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:09:37", "plugin": "core", "name": "end_epoch", "raw_value": "1723230577.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:09:36", "plugin": "core", "name": "start_epoch", "raw_value": "1723230576.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-1", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 1, "time_seconds": 34.328482151031494, "inputs": {"input": {"src": "hda", "id": "54d47816ca278dbf"}, "manipulate|join": "-", "manipulate|function": "obs_names_make_unique"}, "job": {"model_class": "Job", "id": "79c61b0d7655ca6d", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:16:00.591031", "update_time": "2024-08-09T19:16:14.276342", "galaxy_version": "24.1", "external_id": "gxy-kmb82", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/jobs_directory/000/161/configs/tmp24f91ld8' && python '/galaxy/server/database/jobs_directory/000/161/configs/tmp24f91ld8'", "user_email": "tests@fake.org", "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17", "params": {"__input_ext": "\"h5ad\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "manipulate": "{\"__current_case__\": 1, \"function\": \"obs_names_make_unique\", \"join\": \"-\"}"}, "inputs": {"input": {"id": "54d47816ca278dbf", "src": "hda", "uuid": "570d9983-825e-4b0a-b352-b3ab811f7b49"}}, "outputs": {"anndata": {"id": "e2baa258734a1cbc", "src": "hda", "uuid": "0c565611-d269-4dc6-8a09-11ac940a589f"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/5/7/0/dataset_570d9983-825e-4b0a-b352-b3ab811f7b49.dat')\n\nadata.obs_names_make_unique(join='-')\n\n\nadata.write('anndata.h5ad')\n", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_stdout": "", "job_stderr": "", "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/5/7/0/dataset_570d9983-825e-4b0a-b352-b3ab811f7b49.dat')\n\nadata.obs_names_make_unique(join='-')\n\n\nadata.write('anndata.h5ad')\n", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:16:02", "plugin": "core", "name": "end_epoch", "raw_value": "1723230962.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:16:01", "plugin": "core", "name": "start_epoch", "raw_value": "1723230961.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-10", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 10, "time_seconds": 34.43051242828369, "inputs": {"input": {"src": "hda", "id": "b0ce8919298ee365"}, "manipulate|function": "save_raw"}, "job": {"model_class": "Job", "id": "43420d2c326a9e2a", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:14:51.791035", "update_time": "2024-08-09T19:15:05.754513", "galaxy_version": "24.1", "external_id": "gxy-kch5h", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/jobs_directory/000/157/configs/tmpdgjwizvo' && python '/galaxy/server/database/jobs_directory/000/157/configs/tmpdgjwizvo'", "user_email": "tests@fake.org", "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17", "params": {"__input_ext": "\"h5ad\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "manipulate": "{\"__current_case__\": 8, \"function\": \"save_raw\"}"}, "inputs": {"input": {"id": "b0ce8919298ee365", "src": "hda", "uuid": "e21b6746-a5ff-49f1-842d-00285e512f69"}}, "outputs": {"anndata": {"id": "c7acdff3b22e4feb", "src": "hda", "uuid": "52441325-31b5-4b48-93a2-bdaa9bde04c3"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/e/2/1/dataset_e21b6746-a5ff-49f1-842d-00285e512f69.dat')\n\nadata.raw = adata\n\n\nadata.write('anndata.h5ad')\n", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_stdout": "", "job_stderr": "", "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/e/2/1/dataset_e21b6746-a5ff-49f1-842d-00285e512f69.dat')\n\nadata.raw = adata\n\n\nadata.write('anndata.h5ad')\n", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:14:54", "plugin": "core", "name": "end_epoch", "raw_value": "1723230894.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:14:53", "plugin": "core", "name": "start_epoch", "raw_value": "1723230893.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-10", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 10, "time_seconds": 11.668711423873901, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-2", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 2, "time_seconds": 36.38756585121155, "inputs": {"input": {"src": "hda", "id": "a81d32ed932d1197"}, "manipulate|join": "-", "manipulate|function": "var_names_make_unique"}, "job": {"model_class": "Job", "id": "e1c50565ef8746b6", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:10:10.777809", "update_time": "2024-08-09T19:10:25.199727", "galaxy_version": "24.1", "external_id": "gxy-qqd98", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/jobs_directory/000/139/configs/tmpv0pnu371' && python '/galaxy/server/database/jobs_directory/000/139/configs/tmpv0pnu371'", "user_email": "tests@fake.org", "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17", "params": {"__input_ext": "\"h5ad\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "manipulate": "{\"__current_case__\": 2, \"function\": \"var_names_make_unique\", \"join\": \"-\"}"}, "inputs": {"input": {"id": "a81d32ed932d1197", "src": "hda", "uuid": "3eb7ca28-8c94-4846-a353-9094f17dcde6"}}, "outputs": {"anndata": {"id": "c3fcfbddea40e3b6", "src": "hda", "uuid": "bb324301-2d3a-40dd-a2ec-f8af0784fbc1"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/3/e/b/dataset_3eb7ca28-8c94-4846-a353-9094f17dcde6.dat')\n\nadata.var_names_make_unique(join='-')\n\n\nadata.write('anndata.h5ad')\n", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_stdout": "", "job_stderr": "", "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/3/e/b/dataset_3eb7ca28-8c94-4846-a353-9094f17dcde6.dat')\n\nadata.var_names_make_unique(join='-')\n\n\nadata.write('anndata.h5ad')\n", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:10:14", "plugin": "core", "name": "end_epoch", "raw_value": "1723230614.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:10:13", "plugin": "core", "name": "start_epoch", "raw_value": "1723230613.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-2", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 2, "time_seconds": 35.33115911483765, "inputs": {"input": {"src": "hda", "id": "3053e64ac1b41b17"}, "manipulate|join": "-", "manipulate|function": "var_names_make_unique"}, "job": {"model_class": "Job", "id": "87b6fabe831281d2", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:16:34.649144", "update_time": "2024-08-09T19:16:49.711596", "galaxy_version": "24.1", "external_id": "gxy-cvzgc", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/jobs_directory/000/163/configs/tmpl85qgrql' && python '/galaxy/server/database/jobs_directory/000/163/configs/tmpl85qgrql'", "user_email": "tests@fake.org", "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17", "params": {"__input_ext": "\"h5ad\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "manipulate": "{\"__current_case__\": 2, \"function\": \"var_names_make_unique\", \"join\": \"-\"}"}, "inputs": {"input": {"id": "3053e64ac1b41b17", "src": "hda", "uuid": "38c4aa2f-52d7-4c70-8a5d-1d66a7601f13"}}, "outputs": {"anndata": {"id": "246c863195dec296", "src": "hda", "uuid": "4df95c32-f82a-40a5-bafb-831535ff9d33"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/3/8/c/dataset_38c4aa2f-52d7-4c70-8a5d-1d66a7601f13.dat')\n\nadata.var_names_make_unique(join='-')\n\n\nadata.write('anndata.h5ad')\n", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_stdout": "", "job_stderr": "", "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/3/8/c/dataset_38c4aa2f-52d7-4c70-8a5d-1d66a7601f13.dat')\n\nadata.var_names_make_unique(join='-')\n\n\nadata.write('anndata.h5ad')\n", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:16:38", "plugin": "core", "name": "end_epoch", "raw_value": "1723230998.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:16:37", "plugin": "core", "name": "start_epoch", "raw_value": "1723230997.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-3", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 3, "time_seconds": 36.00238919258118, "inputs": {"input": {"src": "hda", "id": "a96214cfea6a3c8c"}, "manipulate|key": "cell_type", "manipulate|categories": "Er,Ml,Mt, Ne, pr", "manipulate|function": "rename_categories"}, "job": {"model_class": "Job", "id": "95c764383628ca8a", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:10:45.801109", "update_time": "2024-08-09T19:11:01.083057", "galaxy_version": "24.1", "external_id": "gxy-ld9mv", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/jobs_directory/000/141/configs/tmph2ngmfe7' && python '/galaxy/server/database/jobs_directory/000/141/configs/tmph2ngmfe7'", "user_email": "tests@fake.org", "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17", "params": {"__input_ext": "\"h5ad\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "manipulate": "{\"__current_case__\": 3, \"categories\": \"Er,Ml,Mt, Ne, pr\", \"function\": \"rename_categories\", \"key\": \"cell_type\"}"}, "inputs": {"input": {"id": "a96214cfea6a3c8c", "src": "hda", "uuid": "bf82002c-eb8b-4649-92c1-57db719b689e"}}, "outputs": {"anndata": {"id": "43420d2c326a9e2a", "src": "hda", "uuid": "e4e7f12e-81fc-42af-b330-ae18da335bb7"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/b/f/8/dataset_bf82002c-eb8b-4649-92c1-57db719b689e.dat')\n\nadata.rename_categories(\n    key='cell_type',\n    categories=['Er', 'Ml', 'Mt', 'Ne', 'pr'])\n\n\nadata.write('anndata.h5ad')\n", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_stdout": "", "job_stderr": "", "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/b/f/8/dataset_bf82002c-eb8b-4649-92c1-57db719b689e.dat')\n\nadata.rename_categories(\n    key='cell_type',\n    categories=['Er', 'Ml', 'Mt', 'Ne', 'pr'])\n\n\nadata.write('anndata.h5ad')\n", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:10:48", "plugin": "core", "name": "end_epoch", "raw_value": "1723230648.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:10:47", "plugin": "core", "name": "start_epoch", "raw_value": "1723230647.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-3", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 3, "time_seconds": 10.908978700637817, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-4", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 4, "time_seconds": 34.96642756462097, "inputs": {"input": {"src": "hda", "id": "aebdf70295f1fdb0"}, "manipulate|function": "strings_to_categoricals"}, "job": {"model_class": "Job", "id": "6271392987df07e7", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:11:22.217200", "update_time": "2024-08-09T19:11:36.137954", "galaxy_version": "24.1", "external_id": "gxy-xmkkm", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/jobs_directory/000/143/configs/tmpxerzdo9t' && python '/galaxy/server/database/jobs_directory/000/143/configs/tmpxerzdo9t'", "user_email": "tests@fake.org", "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17", "params": {"__input_ext": "\"h5ad\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "manipulate": "{\"__current_case__\": 4, \"function\": \"strings_to_categoricals\"}"}, "inputs": {"input": {"id": "aebdf70295f1fdb0", "src": "hda", "uuid": "d1216ab8-eff9-4402-b6f2-d374dce22134"}}, "outputs": {"anndata": {"id": "744d6d43d84991cb", "src": "hda", "uuid": "a85172c1-24d6-4c59-a339-bf4e3590f32a"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/d/1/2/dataset_d1216ab8-eff9-4402-b6f2-d374dce22134.dat')\n\nadata.strings_to_categoricals()\n\n\nadata.write('anndata.h5ad')\n", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_stdout": "", "job_stderr": "", "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/d/1/2/dataset_d1216ab8-eff9-4402-b6f2-d374dce22134.dat')\n\nadata.strings_to_categoricals()\n\n\nadata.write('anndata.h5ad')\n", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:11:25", "plugin": "core", "name": "end_epoch", "raw_value": "1723230685.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:11:24", "plugin": "core", "name": "start_epoch", "raw_value": "1723230684.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-4", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 4, "time_seconds": 33.62204575538635, "inputs": {"input": {"src": "hda", "id": "3f49f72f8a6e37a7"}, "manipulate|function": "strings_to_categoricals"}, "job": {"model_class": "Job", "id": "e73502306ff0caa8", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:17:20.321808", "update_time": "2024-08-09T19:17:34.448720", "galaxy_version": "24.1", "external_id": "gxy-h7xch", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/jobs_directory/000/166/configs/tmp862wubou' && python '/galaxy/server/database/jobs_directory/000/166/configs/tmp862wubou'", "user_email": "tests@fake.org", "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17", "params": {"__input_ext": "\"h5ad\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "manipulate": "{\"__current_case__\": 4, \"function\": \"strings_to_categoricals\"}"}, "inputs": {"input": {"id": "3f49f72f8a6e37a7", "src": "hda", "uuid": "08aba5e0-adea-46b7-b246-404df838747b"}}, "outputs": {"anndata": {"id": "90fd0fa562b6831e", "src": "hda", "uuid": "850eff9a-23fc-4a35-839d-a3a11d0003a6"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/0/8/a/dataset_08aba5e0-adea-46b7-b246-404df838747b.dat')\n\nadata.strings_to_categoricals()\n\n\nadata.write('anndata.h5ad')\n", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_stdout": "", "job_stderr": "", "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/0/8/a/dataset_08aba5e0-adea-46b7-b246-404df838747b.dat')\n\nadata.strings_to_categoricals()\n\n\nadata.write('anndata.h5ad')\n", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:17:23", "plugin": "core", "name": "end_epoch", "raw_value": "1723231043.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:17:21", "plugin": "core", "name": "start_epoch", "raw_value": "1723231041.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-5", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 5, "time_seconds": 34.09777307510376, "inputs": {"input": {"src": "hda", "id": "867decd8390a7960"}, "manipulate|function": "transpose"}, "job": {"model_class": "Job", "id": "70cfc88fec2bd62f", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:11:56.654317", "update_time": "2024-08-09T19:12:10.358940", "galaxy_version": "24.1", "external_id": "gxy-f8lwf", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/jobs_directory/000/145/configs/tmpy6vnqkod' && python '/galaxy/server/database/jobs_directory/000/145/configs/tmpy6vnqkod'", "user_email": "tests@fake.org", "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17", "params": {"__input_ext": "\"h5ad\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "manipulate": "{\"__current_case__\": 5, \"function\": \"transpose\"}"}, "inputs": {"input": {"id": "867decd8390a7960", "src": "hda", "uuid": "c6339b1b-a8e7-40c5-8e4b-7778c9ec14df"}}, "outputs": {"anndata": {"id": "79c61b0d7655ca6d", "src": "hda", "uuid": "fbfa6f1c-4a3c-455f-9a61-6df5873f646c"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/c/6/3/dataset_c6339b1b-a8e7-40c5-8e4b-7778c9ec14df.dat')\n\nadata = adata.transpose()\n\n\nadata.write('anndata.h5ad')\n", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nVariable names are not unique. To make them unique, call `.var_names_make_unique`.\n", "job_stdout": "", "job_stderr": "", "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/c/6/3/dataset_c6339b1b-a8e7-40c5-8e4b-7778c9ec14df.dat')\n\nadata = adata.transpose()\n\n\nadata.write('anndata.h5ad')\n", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nVariable names are not unique. To make them unique, call `.var_names_make_unique`.\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:11:59", "plugin": "core", "name": "end_epoch", "raw_value": "1723230719.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:11:57", "plugin": "core", "name": "start_epoch", "raw_value": "1723230717.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-5", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 5, "time_seconds": 36.76230263710022, "inputs": {"input": {"src": "hda", "id": "bcc3fd8a4298bde3"}, "manipulate|function": "transpose"}, "job": {"model_class": "Job", "id": "b59903a9f0e7758b", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:17:55.494615", "update_time": "2024-08-09T19:18:11.093267", "galaxy_version": "24.1", "external_id": "gxy-jm2bz", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/jobs_directory/000/168/configs/tmpn_ozudxp' && python '/galaxy/server/database/jobs_directory/000/168/configs/tmpn_ozudxp'", "user_email": "tests@fake.org", "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17", "params": {"__input_ext": "\"h5ad\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "manipulate": "{\"__current_case__\": 5, \"function\": \"transpose\"}"}, "inputs": {"input": {"id": "bcc3fd8a4298bde3", "src": "hda", "uuid": "47920c4b-ee89-4f4b-810a-8cbdb4529755"}}, "outputs": {"anndata": {"id": "9654ecbbbcce4506", "src": "hda", "uuid": "58b81659-b56a-4175-bf1f-597cfac70827"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/4/7/9/dataset_47920c4b-ee89-4f4b-810a-8cbdb4529755.dat')\n\nadata = adata.transpose()\n\n\nadata.write('anndata.h5ad')\n", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nVariable names are not unique. To make them unique, call `.var_names_make_unique`.\n", "job_stdout": "", "job_stderr": "", "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/4/7/9/dataset_47920c4b-ee89-4f4b-810a-8cbdb4529755.dat')\n\nadata = adata.transpose()\n\n\nadata.write('anndata.h5ad')\n", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nVariable names are not unique. To make them unique, call `.var_names_make_unique`.\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:17:59", "plugin": "core", "name": "end_epoch", "raw_value": "1723231079.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:17:57", "plugin": "core", "name": "start_epoch", "raw_value": "1723231077.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-6", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 6, "time_seconds": 35.461294651031494, "inputs": {"input": {"src": "hda", "id": "ee2b98fe61884edb"}, "manipulate|var_obs": "var", "manipulate|new_annot": {"src": "hda", "id": "87b6fabe831281d2"}, "manipulate|function": "add_annotation"}, "job": {"model_class": "Job", "id": "66f543e85e28736a", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:12:31.590209", "update_time": "2024-08-09T19:12:45.909762", "galaxy_version": "24.1", "external_id": "gxy-79xbh", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/jobs_directory/000/148/configs/tmp6j78mhfo' && python '/galaxy/server/database/jobs_directory/000/148/configs/tmp6j78mhfo'", "user_email": "tests@fake.org", "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17", "params": {"__input_ext": "\"h5ad\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "manipulate": "{\"__current_case__\": 6, \"function\": \"add_annotation\", \"new_annot\": {\"values\": [{\"id\": 163, \"src\": \"hda\"}]}, \"var_obs\": \"var\"}"}, "inputs": {"input": {"id": "ee2b98fe61884edb", "src": "hda", "uuid": "8566874f-f54a-4d46-b4a4-a533d72c814e"}, "manipulate|new_annot": {"id": "87b6fabe831281d2", "src": "hda", "uuid": "c5442e6e-df91-459c-bbc9-5721287fffbf"}}, "outputs": {"anndata": {"id": "39cf33c97afee4bb", "src": "hda", "uuid": "f5c6355f-9b96-4eba-b7e4-a4475af7541e"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/8/5/6/dataset_8566874f-f54a-4d46-b4a4-a533d72c814e.dat')\n\nimport pandas as pd\nextra_annot_t = pd.read_csv('/galaxy/server/database/objects/c/5/4/dataset_c5442e6e-df91-459c-bbc9-5721287fffbf.dat', sep='\\t').reset_index(drop=True)\nvar_index = adata.var_names\nvar = pd.concat([adata.var.reset_index(drop=True), extra_annot_t], axis=1)\nvar.index = var_index\nadata.var = var\n\n\nadata.write('anndata.h5ad')\n", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_stdout": "", "job_stderr": "", "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/8/5/6/dataset_8566874f-f54a-4d46-b4a4-a533d72c814e.dat')\n\nimport pandas as pd\nextra_annot_t = pd.read_csv('/galaxy/server/database/objects/c/5/4/dataset_c5442e6e-df91-459c-bbc9-5721287fffbf.dat', sep='\\t').reset_index(drop=True)\nvar_index = adata.var_names\nvar = pd.concat([adata.var.reset_index(drop=True), extra_annot_t], axis=1)\nvar.index = var_index\nadata.var = var\n\n\nadata.write('anndata.h5ad')\n", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:12:34", "plugin": "core", "name": "end_epoch", "raw_value": "1723230754.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:12:32", "plugin": "core", "name": "start_epoch", "raw_value": "1723230752.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-6", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 6, "time_seconds": 10.603887796401978, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-7", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 7, "time_seconds": 35.50432801246643, "inputs": {"input": {"src": "hda", "id": "aed7d64bc5486e28"}, "manipulate|var_obs": "obs", "manipulate|new_annot": {"src": "hda", "id": "e73502306ff0caa8"}, "manipulate|function": "add_annotation"}, "job": {"model_class": "Job", "id": "88566abe78aeb4cc", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:13:07.147297", "update_time": "2024-08-09T19:13:21.366829", "galaxy_version": "24.1", "external_id": "gxy-hqf52", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/jobs_directory/000/151/configs/tmp2tn1i3rr' && python '/galaxy/server/database/jobs_directory/000/151/configs/tmp2tn1i3rr'", "user_email": "tests@fake.org", "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17", "params": {"__input_ext": "\"h5ad\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "manipulate": "{\"__current_case__\": 6, \"function\": \"add_annotation\", \"new_annot\": {\"values\": [{\"id\": 166, \"src\": \"hda\"}]}, \"var_obs\": \"obs\"}"}, "inputs": {"input": {"id": "aed7d64bc5486e28", "src": "hda", "uuid": "e3c77b56-37c3-46c7-9e73-356d976472db"}, "manipulate|new_annot": {"id": "e73502306ff0caa8", "src": "hda", "uuid": "b85439c0-f912-4fbe-b5e4-6ca4159bf483"}}, "outputs": {"anndata": {"id": "81647b6abd0c24db", "src": "hda", "uuid": "2cb5548b-2915-4891-abd6-2d4acf22bc12"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/e/3/c/dataset_e3c77b56-37c3-46c7-9e73-356d976472db.dat')\n\nimport pandas as pd\nextra_annot_t = pd.read_csv('/galaxy/server/database/objects/b/8/5/dataset_b85439c0-f912-4fbe-b5e4-6ca4159bf483.dat', sep='\\t').reset_index(drop=True)\nobs_index = adata.obs.index\nobs = pd.concat([adata.obs.reset_index(drop=True), extra_annot_t], axis=1)\nobs.index = obs_index\nadata.obs = obs\n\n\nadata.write('anndata.h5ad')\n", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n... storing 'annot2' as categorical\n", "job_stdout": "", "job_stderr": "", "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/e/3/c/dataset_e3c77b56-37c3-46c7-9e73-356d976472db.dat')\n\nimport pandas as pd\nextra_annot_t = pd.read_csv('/galaxy/server/database/objects/b/8/5/dataset_b85439c0-f912-4fbe-b5e4-6ca4159bf483.dat', sep='\\t').reset_index(drop=True)\nobs_index = adata.obs.index\nobs = pd.concat([adata.obs.reset_index(drop=True), extra_annot_t], axis=1)\nobs.index = obs_index\nadata.obs = obs\n\n\nadata.write('anndata.h5ad')\n", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n... storing 'annot2' as categorical\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:13:10", "plugin": "core", "name": "end_epoch", "raw_value": "1723230790.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:13:08", "plugin": "core", "name": "start_epoch", "raw_value": "1723230788.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-7", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 7, "time_seconds": 36.28734016418457, "inputs": {"input": {"src": "hda", "id": "bee9e2645106cbbd"}, "manipulate|var_obs": "obs", "manipulate|new_annot": {"src": "hda", "id": "c1bd8b1a12ef7f2d"}, "manipulate|function": "add_annotation"}, "job": {"model_class": "Job", "id": "c7acdff3b22e4feb", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:18:43.841018", "update_time": "2024-08-09T19:18:58.398483", "galaxy_version": "24.1", "external_id": "gxy-6cn6l", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/jobs_directory/000/173/configs/tmpx69x8jwj' && python '/galaxy/server/database/jobs_directory/000/173/configs/tmpx69x8jwj'", "user_email": "tests@fake.org", "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17", "params": {"__input_ext": "\"h5ad\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "manipulate": "{\"__current_case__\": 6, \"function\": \"add_annotation\", \"new_annot\": {\"values\": [{\"id\": 188, \"src\": \"hda\"}]}, \"var_obs\": \"obs\"}"}, "inputs": {"input": {"id": "bee9e2645106cbbd", "src": "hda", "uuid": "4c40c304-36ab-4c2c-abe6-1c902cdfb1bb"}, "manipulate|new_annot": {"id": "c1bd8b1a12ef7f2d", "src": "hda", "uuid": "a43a39fb-dc59-4bbc-99fe-6bc807d61ef5"}}, "outputs": {"anndata": {"id": "3585c8213847cc54", "src": "hda", "uuid": "33c624f1-3432-430c-aa30-dbca095246a4"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/4/c/4/dataset_4c40c304-36ab-4c2c-abe6-1c902cdfb1bb.dat')\n\nimport pandas as pd\nextra_annot_t = pd.read_csv('/galaxy/server/database/objects/a/4/3/dataset_a43a39fb-dc59-4bbc-99fe-6bc807d61ef5.dat', sep='\\t').reset_index(drop=True)\nobs_index = adata.obs.index\nobs = pd.concat([adata.obs.reset_index(drop=True), extra_annot_t], axis=1)\nobs.index = obs_index\nadata.obs = obs\n\n\nadata.write('anndata.h5ad')\n", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n... storing 'annot2' as categorical\n", "job_stdout": "", "job_stderr": "", "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/4/c/4/dataset_4c40c304-36ab-4c2c-abe6-1c902cdfb1bb.dat')\n\nimport pandas as pd\nextra_annot_t = pd.read_csv('/galaxy/server/database/objects/a/4/3/dataset_a43a39fb-dc59-4bbc-99fe-6bc807d61ef5.dat', sep='\\t').reset_index(drop=True)\nobs_index = adata.obs.index\nobs = pd.concat([adata.obs.reset_index(drop=True), extra_annot_t], axis=1)\nobs.index = obs_index\nadata.obs = obs\n\n\nadata.write('anndata.h5ad')\n", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n... storing 'annot2' as categorical\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:18:47", "plugin": "core", "name": "end_epoch", "raw_value": "1723231127.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:18:45", "plugin": "core", "name": "start_epoch", "raw_value": "1723231125.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-8", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 8, "time_seconds": 34.29432415962219, "inputs": {"input": {"src": "hda", "id": "b59903a9f0e7758b"}, "manipulate|var_obs": "var", "manipulate|filter|index|text": "Gata2,EKLF", "manipulate|filter|index|format": "text", "manipulate|filter|filter": "index", "manipulate|function": "filter"}, "job": {"model_class": "Job", "id": "04e546dc4479f91d", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:13:41.944392", "update_time": "2024-08-09T19:13:55.964919", "galaxy_version": "24.1", "external_id": "gxy-76z2z", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/jobs_directory/000/153/configs/tmp7rscg32o' && python '/galaxy/server/database/jobs_directory/000/153/configs/tmp7rscg32o'", "user_email": "tests@fake.org", "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17", "params": {"__input_ext": "\"h5ad\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "manipulate": "{\"__current_case__\": 7, \"filter\": {\"__current_case__\": 1, \"filter\": \"index\", \"index\": {\"__current_case__\": 0, \"format\": \"text\", \"text\": \"Gata2,EKLF\"}}, \"function\": \"filter\", \"var_obs\": \"var\"}"}, "inputs": {"input": {"id": "b59903a9f0e7758b", "src": "hda", "uuid": "c82ec3d9-361d-465c-adab-41b4e69a92cd"}}, "outputs": {"anndata": {"id": "ad55f3f1323a66d2", "src": "hda", "uuid": "fbcc78c6-456c-49aa-9cc3-17d218e95180"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/c/8/2/dataset_c82ec3d9-361d-465c-adab-41b4e69a92cd.dat')\n\nfiltered = ['Gata2', 'EKLF']\nprint(filtered)\n\nadata = adata[:,filtered]\n\n\nadata.write('anndata.h5ad')\n['Gata2', 'EKLF']\n", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_stdout": "", "job_stderr": "", "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/c/8/2/dataset_c82ec3d9-361d-465c-adab-41b4e69a92cd.dat')\n\nfiltered = ['Gata2', 'EKLF']\nprint(filtered)\n\nadata = adata[:,filtered]\n\n\nadata.write('anndata.h5ad')\n['Gata2', 'EKLF']\n", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:13:44", "plugin": "core", "name": "end_epoch", "raw_value": "1723230824.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:13:43", "plugin": "core", "name": "start_epoch", "raw_value": "1723230823.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-8", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 8, "time_seconds": 37.149786710739136, "inputs": {"input": {"src": "hda", "id": "6100dd5b2a54c279"}, "manipulate|var_obs": "var", "manipulate|filter|index|text": "Gata2,EKLF", "manipulate|filter|index|format": "text", "manipulate|filter|filter": "index", "manipulate|function": "filter"}, "job": {"model_class": "Job", "id": "91f1c3cdd7c1b9b7", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:19:19.798494", "update_time": "2024-08-09T19:19:35.501204", "galaxy_version": "24.1", "external_id": "gxy-g5jgn", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/jobs_directory/000/175/configs/tmpjtd_5q3l' && python '/galaxy/server/database/jobs_directory/000/175/configs/tmpjtd_5q3l'", "user_email": "tests@fake.org", "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17", "params": {"__input_ext": "\"h5ad\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "manipulate": "{\"__current_case__\": 7, \"filter\": {\"__current_case__\": 1, \"filter\": \"index\", \"index\": {\"__current_case__\": 0, \"format\": \"text\", \"text\": \"Gata2,EKLF\"}}, \"function\": \"filter\", \"var_obs\": \"var\"}"}, "inputs": {"input": {"id": "6100dd5b2a54c279", "src": "hda", "uuid": "e24c192a-2807-43a7-97e9-c489fba53126"}}, "outputs": {"anndata": {"id": "0f3ba92bc73ef1bc", "src": "hda", "uuid": "d248d0bb-f452-4b3e-8ce9-277c306eec85"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/e/2/4/dataset_e24c192a-2807-43a7-97e9-c489fba53126.dat')\n\nfiltered = ['Gata2', 'EKLF']\nprint(filtered)\n\nadata = adata[:,filtered]\n\n\nadata.write('anndata.h5ad')\n['Gata2', 'EKLF']\n", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_stdout": "", "job_stderr": "", "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/e/2/4/dataset_e24c192a-2807-43a7-97e9-c489fba53126.dat')\n\nfiltered = ['Gata2', 'EKLF']\nprint(filtered)\n\nadata = adata[:,filtered]\n\n\nadata.write('anndata.h5ad')\n['Gata2', 'EKLF']\n", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:19:23", "plugin": "core", "name": "end_epoch", "raw_value": "1723231163.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:19:22", "plugin": "core", "name": "start_epoch", "raw_value": "1723231162.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-9", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 9, "time_seconds": 35.46092081069946, "inputs": {"input": {"src": "hda", "id": "461de563d5f7f704"}, "manipulate|var_obs": "obs", "manipulate|filter|key": "cell_type", "manipulate|filter|filter_key|filter": "equal", "manipulate|filter|filter_key|value": "progenitor", "manipulate|filter|filter_key|type": "text", "manipulate|filter|filter": "key", "manipulate|function": "filter"}, "job": {"model_class": "Job", "id": "c3fcfbddea40e3b6", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:14:16.324694", "update_time": "2024-08-09T19:14:31.271921", "galaxy_version": "24.1", "external_id": "gxy-6r5q4", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/jobs_directory/000/155/configs/tmpzhixoxh5' && python '/galaxy/server/database/jobs_directory/000/155/configs/tmpzhixoxh5'", "user_email": "tests@fake.org", "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17", "params": {"__input_ext": "\"h5ad\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "manipulate": "{\"__current_case__\": 7, \"filter\": {\"__current_case__\": 0, \"filter\": \"key\", \"filter_key\": {\"__current_case__\": 1, \"filter\": \"equal\", \"type\": \"text\", \"value\": \"progenitor\"}, \"key\": \"cell_type\"}, \"function\": \"filter\", \"var_obs\": \"obs\"}"}, "inputs": {"input": {"id": "461de563d5f7f704", "src": "hda", "uuid": "d67fdd65-cceb-47a1-ad0d-6070004e840e"}}, "outputs": {"anndata": {"id": "32a6f442e59c505e", "src": "hda", "uuid": "2e8d88d0-ff94-4d67-b490-756cedc0a9a6"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/d/6/7/dataset_d67fdd65-cceb-47a1-ad0d-6070004e840e.dat')\n\nfiltered = adata.obs['cell_type']\n\nfiltered = filtered == 'progenitor'\n\nprint(filtered)\n\nadata = adata[filtered, :]\n\n\nadata.write('anndata.h5ad')\nindex\n0       True\n1       True\n2       True\n3       True\n4       True\n       ...  \n155    False\n156    False\n157    False\n158    False\n159    False\nName: cell_type, Length: 640, dtype: bool\n", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_stdout": "", "job_stderr": "", "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/d/6/7/dataset_d67fdd65-cceb-47a1-ad0d-6070004e840e.dat')\n\nfiltered = adata.obs['cell_type']\n\nfiltered = filtered == 'progenitor'\n\nprint(filtered)\n\nadata = adata[filtered, :]\n\n\nadata.write('anndata.h5ad')\nindex\n0       True\n1       True\n2       True\n3       True\n4       True\n       ...  \n155    False\n156    False\n157    False\n158    False\n159    False\nName: cell_type, Length: 640, dtype: bool\n", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:14:19", "plugin": "core", "name": "end_epoch", "raw_value": "1723230859.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:14:18", "plugin": "core", "name": "start_epoch", "raw_value": "1723230858.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "anndata_manipulate/0.7.5+galaxy1-9", "has_data": true, "data": {"tool_id": "anndata_manipulate", "tool_version": "0.7.5+galaxy1", "test_index": 9, "time_seconds": 35.35371208190918, "inputs": {"input": {"src": "hda", "id": "5760fec29432d88c"}, "manipulate|var_obs": "obs", "manipulate|filter|key": "cell_type", "manipulate|filter|filter_key|filter": "equal", "manipulate|filter|filter_key|value": "progenitor", "manipulate|filter|filter_key|type": "text", "manipulate|filter|filter": "key", "manipulate|function": "filter"}, "job": {"model_class": "Job", "id": "e2baa258734a1cbc", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_manipulate/anndata_manipulate/0.7.5+galaxy1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:19:55.873962", "update_time": "2024-08-09T19:20:10.834554", "galaxy_version": "24.1", "external_id": "gxy-bhz9f", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/jobs_directory/000/177/configs/tmpnln39bwl' && python '/galaxy/server/database/jobs_directory/000/177/configs/tmpnln39bwl'", "user_email": "tests@fake.org", "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17", "params": {"__input_ext": "\"h5ad\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "manipulate": "{\"__current_case__\": 7, \"filter\": {\"__current_case__\": 0, \"filter\": \"key\", \"filter_key\": {\"__current_case__\": 1, \"filter\": \"equal\", \"type\": \"text\", \"value\": \"progenitor\"}, \"key\": \"cell_type\"}, \"function\": \"filter\", \"var_obs\": \"obs\"}"}, "inputs": {"input": {"id": "5760fec29432d88c", "src": "hda", "uuid": "6d2fe36e-6b3b-46d0-bd62-87407d799ee6"}}, "outputs": {"anndata": {"id": "ef18e0635963e06b", "src": "hda", "uuid": "80dd81b4-df84-4d6a-88f7-c18348043f0e"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/6/d/2/dataset_6d2fe36e-6b3b-46d0-bd62-87407d799ee6.dat')\n\nfiltered = adata.obs['cell_type']\n\nfiltered = filtered == 'progenitor'\n\nprint(filtered)\n\nadata = adata[filtered, :]\n\n\nadata.write('anndata.h5ad')\nindex\n0       True\n1       True\n2       True\n3       True\n4       True\n       ...  \n155    False\n156    False\n157    False\n158    False\n159    False\nName: cell_type, Length: 640, dtype: bool\n", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_stdout": "", "job_stderr": "", "stdout": "\n\nimport anndata as ad\n    \n    \n\nadata = ad.read('/galaxy/server/database/objects/6/d/2/dataset_6d2fe36e-6b3b-46d0-bd62-87407d799ee6.dat')\n\nfiltered = adata.obs['cell_type']\n\nfiltered = filtered == 'progenitor'\n\nprint(filtered)\n\nadata = adata[filtered, :]\n\n\nadata.write('anndata.h5ad')\nindex\n0       True\n1       True\n2       True\n3       True\n4       True\n       ...  \n155    False\n156    False\n157    False\n158    False\n159    False\nName: cell_type, Length: 640, dtype: bool\n", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:19:59", "plugin": "core", "name": "end_epoch", "raw_value": "1723231199.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:19:57", "plugin": "core", "name": "start_epoch", "raw_value": "1723231197.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "bcftools_norm/1.10-0", "has_data": true, "data": {"tool_id": "bcftools_norm", "tool_version": "1.10", "test_index": 0, "time_seconds": 41.35632610321045, "inputs": {"input_file": {"src": "hda", "id": "976b170df0693cc3"}, "reference_source|fasta_ref": {"src": "hda", "id": "45b8d668d47c1f4b"}, "reference_source|reference_source_selector": "history", "normalize_indels": true, "output_type": "v"}, "job": {"model_class": "Job", "id": "be9150b1abefd8b0", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_norm/bcftools_norm/1.10", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:24:39.202724", "update_time": "2024-08-09T19:24:59.619630", "galaxy_version": "24.1", "external_id": "gxy-wgpqq", "handler": null, "job_runner_name": null, "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/6/b/4/dataset_6b4c801d-30d3-4f89-afd7-cef6de32465d.dat' > input.vcf.gz && bcftools index input.vcf.gz &&     ln -s '/galaxy/server/database/objects/7/3/c/dataset_73c19215-b50b-44c6-b502-46aefb870a52.dat' ref.fa && samtools faidx ref.fa &&    awk '{ if ($0 !~ />/) {print toupper($0)} else {print $0} }' 'ref.fa' > ref_upper.fa &&           bcftools norm   --fasta-ref ref_upper.fa  --check-ref w  --site-win 1000            --output-type 'v'   --threads ${GALAXY_SLOTS:-4}    input.vcf.gz  > '/galaxy/server/database/objects/c/a/d/dataset_cada694b-068b-4bca-b9be-cbd40b7fd3ba.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_default": "{\"site_win\": \"1000\"}", "sec_restrict": "{\"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}}", "multiallelics": "{\"__current_case__\": 0, \"mode\": \"\"}", "rm_dup": "\"\"", "normalize_indels": "true", "check_ref": "\"w\"", "reference_source": "{\"__current_case__\": 1, \"fasta_ref\": {\"values\": [{\"id\": 211, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"input_file": {"id": "976b170df0693cc3", "src": "hda", "uuid": "6b4c801d-30d3-4f89-afd7-cef6de32465d"}, "reference_source|fasta_ref": {"id": "45b8d668d47c1f4b", "src": "hda", "uuid": "73c19215-b50b-44c6-b502-46aefb870a52"}}, "outputs": {"output_file": {"id": "83fa8bf34acdd7c6", "src": "hda", "uuid": "cada694b-068b-4bca-b9be-cbd40b7fd3ba"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Lines   total/split/realigned/skipped:\t21/0/13/0\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "Lines   total/split/realigned/skipped:\t21/0/13/0\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 19:24:46", "plugin": "core", "name": "end_epoch", "raw_value": "1723231486.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:24:46", "plugin": "core", "name": "start_epoch", "raw_value": "1723231486.0000000"}, {"title": "Memory Allocated (MB)", "value": "8160", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8160.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "bcftools_norm/1.10-1", "has_data": true, "data": {"tool_id": "bcftools_norm", "tool_version": "1.10", "test_index": 1, "status": "skip"}}, {"id": "bcftools_norm/1.10-2", "has_data": true, "data": {"tool_id": "bcftools_norm", "tool_version": "1.10", "test_index": 2, "time_seconds": 34.485255002975464, "inputs": {"input_file": {"src": "hda", "id": "3c7f90c2cae7a425"}, "reference_source|fasta_ref": {"src": "hda", "id": "86308b471e69a80d"}, "reference_source|reference_source_selector": "history", "multiallelics|mode": "-", "output_type": "v"}, "job": {"model_class": "Job", "id": "175deaf7548a89f0", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_norm/bcftools_norm/1.10", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:25:20.713729", "update_time": "2024-08-09T19:25:34.131109", "galaxy_version": "24.1", "external_id": "gxy-g96pv", "handler": null, "job_runner_name": null, "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/8/2/4/dataset_824a6a59-7d1f-4224-b170-ac88caf132d8.dat' > input.vcf.gz && bcftools index input.vcf.gz &&     ln -s '/galaxy/server/database/objects/9/8/3/dataset_983520f8-57ed-4534-b231-4cbf7168d665.dat' ref.fa && samtools faidx ref.fa &&    awk '{ if ($0 !~ />/) {print toupper($0)} else {print $0} }' 'ref.fa' > ref_upper.fa &&           bcftools norm   --fasta-ref ref_upper.fa  --check-ref w --do-not-normalize --multiallelics '-both' --site-win 1000            --output-type 'v'   --threads ${GALAXY_SLOTS:-4}    input.vcf.gz  > '/galaxy/server/database/objects/a/f/0/dataset_af02a873-0369-47ab-a13b-8d42bc125d0e.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_default": "{\"site_win\": \"1000\"}", "sec_restrict": "{\"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}}", "multiallelics": "{\"__current_case__\": 1, \"mode\": \"-\", \"multiallelic_types\": \"both\"}", "rm_dup": "\"\"", "normalize_indels": "false", "check_ref": "\"w\"", "reference_source": "{\"__current_case__\": 1, \"fasta_ref\": {\"values\": [{\"id\": 214, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"input_file": {"id": "3c7f90c2cae7a425", "src": "hda", "uuid": "824a6a59-7d1f-4224-b170-ac88caf132d8"}, "reference_source|fasta_ref": {"id": "86308b471e69a80d", "src": "hda", "uuid": "983520f8-57ed-4534-b231-4cbf7168d665"}}, "outputs": {"output_file": {"id": "e851181809944017", "src": "hda", "uuid": "af02a873-0369-47ab-a13b-8d42bc125d0e"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Lines   total/split/realigned/skipped:\t19/7/0/0\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "Lines   total/split/realigned/skipped:\t19/7/0/0\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:25:23", "plugin": "core", "name": "end_epoch", "raw_value": "1723231523.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:25:22", "plugin": "core", "name": "start_epoch", "raw_value": "1723231522.0000000"}, {"title": "Memory Allocated (MB)", "value": "8160", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8160.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "bcftools_norm/1.10-3", "has_data": true, "data": {"tool_id": "bcftools_norm", "tool_version": "1.10", "test_index": 3, "time_seconds": 36.41662359237671, "inputs": {"input_file": {"src": "hda", "id": "34dfe6368d164cf8"}, "reference_source|fasta_ref": {"src": "hda", "id": "65642f4c8ace208f"}, "reference_source|reference_source_selector": "history", "normalize_indels": true, "multiallelics|mode": "-", "output_type": "v"}, "job": {"model_class": "Job", "id": "1c444b8b896cad6d", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_norm/bcftools_norm/1.10", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:25:56.475810", "update_time": "2024-08-09T19:26:10.960169", "galaxy_version": "24.1", "external_id": "gxy-sx9sx", "handler": null, "job_runner_name": null, "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/2/a/1/dataset_2a1b4a3b-abec-431c-825d-604b432fc587.dat' > input.vcf.gz && bcftools index input.vcf.gz &&     ln -s '/galaxy/server/database/objects/d/0/f/dataset_d0fdb92d-0285-43e4-9d02-6b9088cc086a.dat' ref.fa && samtools faidx ref.fa &&    awk '{ if ($0 !~ />/) {print toupper($0)} else {print $0} }' 'ref.fa' > ref_upper.fa &&           bcftools norm   --fasta-ref ref_upper.fa  --check-ref w  --multiallelics '-both' --site-win 1000            --output-type 'v'   --threads ${GALAXY_SLOTS:-4}    input.vcf.gz  > '/galaxy/server/database/objects/a/2/4/dataset_a244fc4d-4817-4016-bb7e-c618d1c17a7a.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_default": "{\"site_win\": \"1000\"}", "sec_restrict": "{\"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}}", "multiallelics": "{\"__current_case__\": 1, \"mode\": \"-\", \"multiallelic_types\": \"both\"}", "rm_dup": "\"\"", "normalize_indels": "true", "check_ref": "\"w\"", "reference_source": "{\"__current_case__\": 1, \"fasta_ref\": {\"values\": [{\"id\": 217, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"input_file": {"id": "34dfe6368d164cf8", "src": "hda", "uuid": "2a1b4a3b-abec-431c-825d-604b432fc587"}, "reference_source|fasta_ref": {"id": "65642f4c8ace208f", "src": "hda", "uuid": "d0fdb92d-0285-43e4-9d02-6b9088cc086a"}}, "outputs": {"output_file": {"id": "ca4e53bea1679520", "src": "hda", "uuid": "a244fc4d-4817-4016-bb7e-c618d1c17a7a"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Lines   total/split/realigned/skipped:\t19/7/19/0\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "Lines   total/split/realigned/skipped:\t19/7/19/0\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:25:59", "plugin": "core", "name": "end_epoch", "raw_value": "1723231559.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:25:58", "plugin": "core", "name": "start_epoch", "raw_value": "1723231558.0000000"}, {"title": "Memory Allocated (MB)", "value": "8160", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8160.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "bcftools_norm/1.10-4", "has_data": true, "data": {"tool_id": "bcftools_norm", "tool_version": "1.10", "test_index": 4, "time_seconds": 26.151676177978516, "inputs": {"input_file": {"src": "hda", "id": "f7910e9c633d7921"}, "reference_source|fasta_ref": {"src": "hda", "id": "e44e207cf1c3b883"}, "reference_source|reference_source_selector": "history", "multiallelics|mode": "+", "output_type": "v"}, "job": {"model_class": "Job", "id": "f2a74a8ba04a11d3", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_norm/bcftools_norm/1.10", "state": "error", "exit_code": null, "create_time": "2024-08-09T19:26:32.373364", "update_time": "2024-08-09T19:26:37.153275", "galaxy_version": "24.1", "external_id": "gxy-vddvl", "handler": null, "job_runner_name": null, "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/5/d/5/dataset_5d5d6005-7365-4093-82d2-9a6cfc4777b8.dat' > input.vcf.gz && bcftools index input.vcf.gz &&     ln -s '/galaxy/server/database/objects/e/b/f/dataset_ebf799f8-90f5-4383-805d-ce3226fad3b5.dat' ref.fa && samtools faidx ref.fa &&    awk '{ if ($0 !~ />/) {print toupper($0)} else {print $0} }' 'ref.fa' > ref_upper.fa &&           bcftools norm   --fasta-ref ref_upper.fa  --check-ref w --do-not-normalize --multiallelics '+both'  --site-win 1000            --output-type 'v'   --threads ${GALAXY_SLOTS:-4}    input.vcf.gz  > '/galaxy/server/database/objects/c/2/9/dataset_c297ce48-c26d-424f-a3a8-0312afbde872.dat'", "user_email": "tests@fake.org", "command_version": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_default": "{\"site_win\": \"1000\"}", "sec_restrict": "{\"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}}", "multiallelics": "{\"__current_case__\": 2, \"mode\": \"+\", \"multiallelic_types\": \"both\", \"strict_filter\": false}", "rm_dup": "\"\"", "normalize_indels": "false", "check_ref": "\"w\"", "reference_source": "{\"__current_case__\": 1, \"fasta_ref\": {\"values\": [{\"id\": 220, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"input_file": {"id": "f7910e9c633d7921", "src": "hda", "uuid": "5d5d6005-7365-4093-82d2-9a6cfc4777b8"}, "reference_source|fasta_ref": {"id": "e44e207cf1c3b883", "src": "hda", "uuid": "ebf799f8-90f5-4383-805d-ce3226fad3b5"}}, "outputs": {"output_file": {"id": "7dafbb37535922ff", "src": "hda", "uuid": "c297ce48-c26d-424f-a3a8-0312afbde872"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Lines   total/split/realigned/skipped:\t26/0/0/0\n", "job_stdout": null, "job_stderr": null, "stdout": "", "stderr": "Lines   total/split/realigned/skipped:\t26/0/0/0\n", "job_messages": null, "dependencies": [], "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/bcftools_norm/bcftools_norm/1.10, exit_code: None, stderr: Lines   total/split/realigned/skipped:\t26/0/0/0\n.", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/bcftools_norm/bcftools_norm/1.10, exit_code: None, stderr: Lines   total/split/realigned/skipped:\t26/0/0/0\n."], "status": "failure"}}, {"id": "bcftools_norm/1.10-5", "has_data": true, "data": {"tool_id": "bcftools_norm", "tool_version": "1.10", "test_index": 5, "time_seconds": 11.130260467529297, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "bcftools_norm/1.10-6", "has_data": true, "data": {"tool_id": "bcftools_norm", "tool_version": "1.10", "test_index": 6, "time_seconds": 34.788915395736694, "inputs": {"input_file": {"src": "hda", "id": "26c41ddaf2235cbc"}, "reference_source|fasta_ref": {"src": "hda", "id": "334f2455848f634a"}, "reference_source|reference_source_selector": "history", "check_ref": "ws", "output_type": "v"}, "job": {"model_class": "Job", "id": "fc341470f14c9411", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_norm/bcftools_norm/1.10", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:27:09.797366", "update_time": "2024-08-09T19:27:23.066269", "galaxy_version": "24.1", "external_id": "gxy-nvnld", "handler": null, "job_runner_name": null, "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/6/5/8/dataset_658a849e-d3ec-41b9-8682-f5ae7dd90139.dat' > input.vcf.gz && bcftools index input.vcf.gz &&     ln -s '/galaxy/server/database/objects/0/9/e/dataset_09ee2539-b2c4-4c52-9c5e-fb77c037ac99.dat' ref.fa && samtools faidx ref.fa &&    awk '{ if ($0 !~ />/) {print toupper($0)} else {print $0} }' 'ref.fa' > ref_upper.fa &&           bcftools norm   --fasta-ref ref_upper.fa  --check-ref ws --do-not-normalize --site-win 1000            --output-type 'v'   --threads ${GALAXY_SLOTS:-4}    input.vcf.gz  > '/galaxy/server/database/objects/2/c/5/dataset_2c5b5206-b22d-4b1b-86f7-122bf0b39ed9.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_default": "{\"site_win\": \"1000\"}", "sec_restrict": "{\"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}}", "multiallelics": "{\"__current_case__\": 0, \"mode\": \"\"}", "rm_dup": "\"\"", "normalize_indels": "false", "check_ref": "\"ws\"", "reference_source": "{\"__current_case__\": 1, \"fasta_ref\": {\"values\": [{\"id\": 225, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"input_file": {"id": "26c41ddaf2235cbc", "src": "hda", "uuid": "658a849e-d3ec-41b9-8682-f5ae7dd90139"}, "reference_source|fasta_ref": {"id": "334f2455848f634a", "src": "hda", "uuid": "09ee2539-b2c4-4c52-9c5e-fb77c037ac99"}}, "outputs": {"output_file": {"id": "9fe332ef6198f943", "src": "hda", "uuid": "2c5b5206-b22d-4b1b-86f7-122bf0b39ed9"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Lines   total/split/realigned/skipped:\t8/0/0/0\nREF/ALT total/modified/added:  \t8/5/3\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "Lines   total/split/realigned/skipped:\t8/0/0/0\nREF/ALT total/modified/added:  \t8/5/3\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 19:27:11", "plugin": "core", "name": "end_epoch", "raw_value": "1723231631.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:27:11", "plugin": "core", "name": "start_epoch", "raw_value": "1723231631.0000000"}, {"title": "Memory Allocated (MB)", "value": "8160", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8160.0000000"}, {"title": "Cores Allocated", "value": "2", "plugin": "core", "name": "galaxy_slots", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "bcftools_plugin_fill_tags/1.10-0", "has_data": true, "data": {"tool_id": "bcftools_plugin_fill_tags", "tool_version": "1.10", "test_index": 0, "time_seconds": 11.248824119567871, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "bcftools_plugin_fill_tags/1.10-1", "has_data": true, "data": {"tool_id": "bcftools_plugin_fill_tags", "tool_version": "1.10", "test_index": 1, "time_seconds": 37.46324324607849, "inputs": {"input_file": {"src": "hda", "id": "8cccc3155fa7abdc"}, "sec_plugin|tags": ["AC_Het", "AC_Hom"], "output_type": "v"}, "job": {"model_class": "Job", "id": "45b8d668d47c1f4b", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_plugin_fill_tags/bcftools_plugin_fill_tags/1.10", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:27:55.109977", "update_time": "2024-08-09T19:28:12.773328", "galaxy_version": "24.1", "external_id": "gxy-tp27v", "handler": null, "job_runner_name": null, "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/1/1/1/dataset_111436da-20cd-445c-832a-c2d1370ea5f3.dat' > input.vcf.gz && bcftools index input.vcf.gz &&            bcftools plugin fill-tags                --output-type 'v'   --threads ${GALAXY_SLOTS:-4}    input.vcf.gz   -- --tags \"AC_Het,AC_Hom\"   > '/galaxy/server/database/objects/8/4/a/dataset_84ade853-6068-4dad-b41e-a430ad07b20f.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_plugin": "{\"invert_samples\": false, \"invert_samples_file\": false, \"samples\": \"\", \"samples_file\": null, \"tags\": [\"AC_Het\", \"AC_Hom\"]}", "sec_restrict": "{\"exclude\": null, \"include\": null, \"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}}"}, "inputs": {"input_file": {"id": "8cccc3155fa7abdc", "src": "hda", "uuid": "111436da-20cd-445c-832a-c2d1370ea5f3"}}, "outputs": {"output_file": {"id": "461c008c714ee50d", "src": "hda", "uuid": "84ade853-6068-4dad-b41e-a430ad07b20f"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 19:28:00", "plugin": "core", "name": "end_epoch", "raw_value": "1723231680.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:28:00", "plugin": "core", "name": "start_epoch", "raw_value": "1723231680.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bowtie2/2.4.2+galaxy0-0", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 0, "time_seconds": 43.62399983406067, "inputs": {"library|input_1": {"src": "hda", "id": "e2f88f5db091f033"}, "library|input_2": {"src": "hda", "id": "397dc1fbcea2d153"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "08ea0030c919caa4"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "08ea0030c919caa4", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "state": "error", "exit_code": null, "create_time": "2024-08-09T18:48:15.072175", "update_time": "2024-08-09T18:48:30.281478", "galaxy_version": "24.1", "external_id": "gxy-h9dm5", "handler": null, "job_runner_name": null, "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/0/0/3/dataset_003c80d7-3314-4447-a049-161af22fa321.dat' genome && ln -s -f '/galaxy/server/database/objects/0/0/3/dataset_003c80d7-3314-4447-a049-161af22fa321.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/7/f/0/dataset_7f08b284-fabf-4bbb-9d38-86e1652c054b.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/5/d/d/dataset_5dda3134-5d6b-4e39-9799-131268aa7686.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/9/3/c/dataset_93c29a58-1259-4051-9555-e63cdc23a5bf.dat'", "user_email": "tests@fake.org", "command_version": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "false", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 50, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": false, \"input_1\": {\"values\": [{\"id\": 48, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 49, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": false}"}, "inputs": {"library|input_1": {"id": "e2f88f5db091f033", "src": "hda", "uuid": "7f08b284-fabf-4bbb-9d38-86e1652c054b"}, "library|input_2": {"id": "397dc1fbcea2d153", "src": "hda", "uuid": "5dda3134-5d6b-4e39-9799-131268aa7686"}, "reference_genome|own_file": {"id": "08ea0030c919caa4", "src": "hda", "uuid": "003c80d7-3314-4447-a049-161af22fa321"}}, "outputs": {"output": {"id": "789ea056fc06a05a", "src": "hda", "uuid": "93c29a58-1259-4051-9555-e63cdc23a5bf"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/0/0/3/dataset_003c80d7-3314-4447-a049-161af22fa321.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\n  Reserving size (388) for bucket 3\nGetting block 4 of 58\nGetting block 5 of 58\nGetting block 6 of 58\nGetting block 7 of 58\nGetting block 8 of 58\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Reserving size (388) for bucket 4\n  Reserving size (388) for bucket 5\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 2: 10%\n  bucket 5: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 2: 20%\n  bucket 5: 20%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 4: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 5: 40%\n  bucket 3: 30%\n  bucket 6: 30%\n  bucket 8: 30%\n  bucket 4: 40%\n  bucket 2: 40%\n  bucket 7: 30%\n  bucket 1: 50%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 8: 40%\n  bucket 2: 50%\n  bucket 5: 60%\n  bucket 1: 60%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 8: 50%\n  bucket 5: 70%\n  bucket 1: 70%\n  bucket 6: 60%\n  bucket 4: 70%\n  bucket 2: 70%\n  bucket 5: 80%\n  bucket 7: 50%\n  bucket 3: 60%\n  bucket 8: 60%\n  bucket 1: 80%\n  bucket 4: 80%\n  bucket 6: 70%\n  bucket 2: 80%\n  bucket 5: 90%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 1: 90%\n  bucket 5: 100%\n  bucket 2: 90%\n  bucket 6: 80%\n  Sorting block of length 203 for bucket 5\n  bucket 4: 100%\n  bucket 8: 80%\n  bucket 7: 70%\n  bucket 1: 100%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 3: 80%\n  bucket 6: 90%\n  bucket 8: 90%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 6: 100%\n  bucket 3: 90%\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  bucket 8: 100%\n  bucket 7: 90%\n  bucket 3: 100%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\nGetting block 9 of 58\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 58\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 58\n  bucket 11: 40%\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 50%\n  bucket 12: 10%\n  bucket 11: 60%\n  bucket 12: 20%\n  bucket 11: 70%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 11: 80%\n  bucket 12: 50%\n  bucket 11: 90%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\nGetting block 13 of 58\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 30%\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 58\n  bucket 13: 40%\n  bucket 14: 10%\n  Reserving size (388) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 50%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 15: 10%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 15: 20%\n  bucket 14: 40%\n  bucket 15: 30%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 15: 40%\n  bucket 13: 90%\n  bucket 15: 50%\n  bucket 13: 100%\n  bucket 14: 60%\n  Sorting block of length 282 for bucket 13\n  bucket 15: 60%\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 15: 70%\n  bucket 14: 80%\n  bucket 15: 80%\n  bucket 14: 90%\n  bucket 15: 90%\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\nGetting block 16 of 58\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 17: 40%\n  bucket 16: 60%\n  bucket 17: 50%\n  bucket 16: 70%\n  bucket 17: 60%\n  bucket 16: 80%\n  bucket 17: 70%\n  bucket 16: 90%\n  bucket 17: 80%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\nGetting block 19 of 58\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 58\n  Reserving size (388) for bucket 20\n  bucket 19: 10%\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\nGetting block 21 of 58\n  bucket 19: 50%\n  bucket 20: 70%\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 80%\n  Entering block accumulator loop for bucket 21:\n  bucket 19: 60%\n  bucket 20: 90%\n  bucket 21: 10%\n  bucket 19: 70%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  bucket 21: 20%\n  bucket 19: 80%\n  bucket 21: 30%\n  (Using difference cover)\n  bucket 21: 40%\n  bucket 19: 90%\n  bucket 21: 50%\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\nGetting block 22 of 58\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 58\n  bucket 22: 10%\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 22: 70%\n  bucket 23: 80%\n  bucket 22: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\nGetting block 25 of 58\n  Calculating Z arrays for bucket 24\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 24: 50%\n  bucket 25: 60%\n  bucket 24: 60%\n  bucket 25: 70%\n  bucket 24: 70%\n  bucket 25: 80%\n  bucket 24: 80%\n  bucket 25: 90%\n  bucket 24: 90%\n  bucket 25: 100%\n  bucket 24: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\nGetting block 26 of 58\n  Reserving size (388) for bucket 26\nGetting block 27 of 58\n  Calculating Z arrays for bucket 26\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\nGetting block 28 of 58\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\nGetting block 29 of 58\n  bucket 28: 30%\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 40%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 50%\n  bucket 29: 10%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 29: 20%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 29: 30%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\nGetting block 31 of 58\n  bucket 30: 80%\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 377 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 378 for bucket 31\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block\n..\nme: 00:00:00\nReturning block of 350 for bucket 23\nGetting block 24 of 57\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\nGetting block 26 of 57\n  bucket 25: 60%\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 70%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 80%\n  bucket 26: 10%\n  bucket 25: 90%\n  bucket 26: 20%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\nGetting block 28 of 57\n  Calculating Z arrays for bucket 27\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 27: 70%\n  bucket 28: 80%\n  bucket 27: 80%\n  bucket 28: 90%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\nGetting block 31 of 57\nGetting block 30 of 57\n  Reserving size (388) for bucket 31\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 31\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 30:\nGetting block 32 of 57\n  bucket 31: 10%\n  bucket 30: 10%\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 20%\n  Entering block accumulator loop for bucket 32:\n  bucket 30: 20%\n  bucket 31: 30%\n  bucket 32: 10%\n  bucket 30: 30%\n  bucket 32: 20%\n  bucket 31: 40%\n  bucket 30: 40%\n  bucket 32: 30%\n  bucket 31: 50%\n  bucket 30: 50%\n  bucket 32: 40%\n  bucket 31: 60%\n  bucket 32: 50%\n  bucket 30: 60%\n  bucket 32: 60%\n  bucket 31: 70%\n  bucket 30: 70%\n  bucket 32: 70%\n  bucket 31: 80%\n  bucket 30: 80%\n  bucket 32: 80%\n  bucket 31: 90%\n  bucket 32: 90%\n  bucket 30: 90%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  bucket 31: 100%\n  bucket 30: 100%\n  Sorting block of length 310 for bucket 31\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 20%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 30%\n  bucket 34: 10%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 34: 20%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 34: 30%\n  bucket 33: 80%\n  bucket 34: 40%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\nGetting block 35 of 57\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\nGetting block 37 of 57\n  bucket 36: 20%\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 30%\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 36: 40%\n  bucket 37: 30%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 37: 40%\n  bucket 36: 70%\n  bucket 37: 50%\n  bucket 36: 80%\n  bucket 37: 60%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  bucket 37: 70%\n  bucket 37: 80%\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\nGetting block 38 of 57\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\nGetting block 39 of 57\n  bucket 38: 20%\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 38: 30%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 38: 40%\n  bucket 39: 40%\n  bucket 38: 50%\n  bucket 39: 50%\n  bucket 38: 60%\n  bucket 39: 60%\n  bucket 38: 70%\n  bucket 39: 70%\n  bucket 38: 80%\n  bucket 39: 80%\n  bucket 38: 90%\n  bucket 39: 90%\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\nGetting block 41 of 57\n  bucket 40: 20%\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 30%\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 40: 40%\n  bucket 41: 30%\n  bucket 40: 50%\n  bucket 41: 40%\n  bucket 40: 60%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 40: 70%\n  bucket 41: 70%\n  bucket 40: 80%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 42 of 57\n  Reserving size (388) for bucket 42\nGetting block 43 of 57\n  Calculating Z arrays for bucket 42\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 10%\n  bucket 43: 10%\n  bucket 42: 20%\n  bucket 43: 20%\n  bucket 42: 30%\n  bucket 43: 30%\n  bucket 42: 40%\n  bucket 43: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 43: 50%\n  bucket 42: 80%\n  bucket 43: 60%\n  bucket 42: 90%\n  bucket 43: 70%\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\nGetting block 45 of 57\n  bucket 44: 10%\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  bucket 44: 20%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 30%\n  bucket 45: 10%\n  bucket 44: 40%\n  bucket 45: 20%\n  bucket 44: 50%\n  bucket 45: 30%\n  bucket 44: 60%\n  bucket 45: 40%\n  bucket 44: 70%\n  bucket 45: 50%\n  bucket 44: 80%\n  bucket 45: 60%\n  bucket 44: 90%\n  bucket 45: 70%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\nGetting block 46 of 57\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 30%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 47: 10%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 47: 20%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 57\n  Entering block accumulator loop for bucket 48:\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 49: 10%\n  bucket 48: 30%\n  bucket 49: 20%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 49: 30%\n  bucket 48: 60%\n  bucket 49: 40%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 49: 50%\n  bucket 48: 90%\n  bucket 49: 60%\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\nGetting block 50 of 57\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 20%\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 51: 30%\n  bucket 52: 10%\n  bucket 53: 10%\n  bucket 51: 40%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 52: 20%\n  bucket 51: 50%\n  bucket 53: 40%\n  bucket 51: 60%\n  bucket 53: 50%\n  bucket 52: 30%\n  bucket 53: 60%\n  bucket 51: 70%\n  bucket 53: 70%\n  bucket 52: 40%\n  bucket 53: 80%\n  bucket 51: 80%\n  bucket 52: 50%\n  bucket 53: 90%\n  bucket 52: 60%\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 52: 70%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  bucket 52: 80%\n  Sorting block time: 00:00:00\n  bucket 52: 90%\nReturning block of 371 for bucket 53\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\nGetting block 54 of 57\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 54: 20%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 30%\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 54: 40%\n  bucket 55: 30%\n  bucket 54: 50%\n  bucket 55: 40%\n  bucket 54: 60%\n  bucket 55: 50%\n  bucket 54: 70%\n  bucket 55: 60%\n  bucket 54: 80%\n  bucket 55: 70%\n  bucket 54: 90%\n  bucket 55: 80%\n  bucket 54: 100%\n  bucket 55: 90%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\nGetting block 57 of 57\n  Calculating Z arrays for bucket 56\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  Entering block accumulator loop for bucket 56:\n  bucket 57: 10%\n  bucket 56: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 56: 20%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 56: 30%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 56: 40%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 56: 50%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\nReturning block of 133 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "tool_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "job_stdout": null, "job_stderr": null, "stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/0/0/3/dataset_003c80d7-3314-4447-a049-161af22fa321.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\n  Reserving size (388) for bucket 3\nGetting block 4 of 58\nGetting block 5 of 58\nGetting block 6 of 58\nGetting block 7 of 58\nGetting block 8 of 58\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Reserving size (388) for bucket 4\n  Reserving size (388) for bucket 5\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 2: 10%\n  bucket 5: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 8: 10%\n  bucket 2: 20%\n  bucket 5: 20%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 6: 20%\n  bucket 5: 30%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 4: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 5: 40%\n  bucket 3: 30%\n  bucket 6: 30%\n  bucket 8: 30%\n  bucket 4: 40%\n  bucket 2: 40%\n  bucket 7: 30%\n  bucket 1: 50%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 8: 40%\n  bucket 2: 50%\n  bucket 5: 60%\n  bucket 1: 60%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 8: 50%\n  bucket 5: 70%\n  bucket 1: 70%\n  bucket 6: 60%\n  bucket 4: 70%\n  bucket 2: 70%\n  bucket 5: 80%\n  bucket 7: 50%\n  bucket 3: 60%\n  bucket 8: 60%\n  bucket 1: 80%\n  bucket 4: 80%\n  bucket 6: 70%\n  bucket 2: 80%\n  bucket 5: 90%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 1: 90%\n  bucket 5: 100%\n  bucket 2: 90%\n  bucket 6: 80%\n  Sorting block of length 203 for bucket 5\n  bucket 4: 100%\n  bucket 8: 80%\n  bucket 7: 70%\n  bucket 1: 100%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 3: 80%\n  bucket 6: 90%\n  bucket 8: 90%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 6: 100%\n  bucket 3: 90%\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  bucket 8: 100%\n  bucket 7: 90%\n  bucket 3: 100%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\nGetting block 9 of 58\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 58\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 58\n  bucket 11: 40%\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 50%\n  bucket 12: 10%\n  bucket 11: 60%\n  bucket 12: 20%\n  bucket 11: 70%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 11: 80%\n  bucket 12: 50%\n  bucket 11: 90%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\nGetting block 13 of 58\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 30%\n  Entering block accumulator loop for bucket 14:\nGetting block 15 of 58\n  bucket 13: 40%\n  bucket 14: 10%\n  Reserving size (388) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 50%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 15: 10%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 15: 20%\n  bucket 14: 40%\n  bucket 15: 30%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 15: 40%\n  bucket 13: 90%\n  bucket 15: 50%\n  bucket 13: 100%\n  bucket 14: 60%\n  Sorting block of length 282 for bucket 13\n  bucket 15: 60%\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 15: 70%\n  bucket 14: 80%\n  bucket 15: 80%\n  bucket 14: 90%\n  bucket 15: 90%\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\nGetting block 16 of 58\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 17: 40%\n  bucket 16: 60%\n  bucket 17: 50%\n  bucket 16: 70%\n  bucket 17: 60%\n  bucket 16: 80%\n  bucket 17: 70%\n  bucket 16: 90%\n  bucket 17: 80%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\nGetting block 19 of 58\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 58\n  Reserving size (388) for bucket 20\n  bucket 19: 10%\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\nGetting block 21 of 58\n  bucket 19: 50%\n  bucket 20: 70%\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 80%\n  Entering block accumulator loop for bucket 21:\n  bucket 19: 60%\n  bucket 20: 90%\n  bucket 21: 10%\n  bucket 19: 70%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  bucket 21: 20%\n  bucket 19: 80%\n  bucket 21: 30%\n  (Using difference cover)\n  bucket 21: 40%\n  bucket 19: 90%\n  bucket 21: 50%\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\nGetting block 22 of 58\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 58\n  bucket 22: 10%\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 22: 70%\n  bucket 23: 80%\n  bucket 22: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\nGetting block 25 of 58\n  Calculating Z arrays for bucket 24\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 24: 40%\n  bucket 25: 50%\n  bucket 24: 50%\n  bucket 25: 60%\n  bucket 24: 60%\n  bucket 25: 70%\n  bucket 24: 70%\n  bucket 25: 80%\n  bucket 24: 80%\n  bucket 25: 90%\n  bucket 24: 90%\n  bucket 25: 100%\n  bucket 24: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\nGetting block 26 of 58\n  Reserving size (388) for bucket 26\nGetting block 27 of 58\n  Calculating Z arrays for bucket 26\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\nGetting block 28 of 58\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\nGetting block 29 of 58\n  bucket 28: 30%\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 40%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 50%\n  bucket 29: 10%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 29: 20%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 29: 30%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\nGetting block 31 of 58\n  bucket 30: 80%\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 377 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 378 for bucket 31\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block\n..\nme: 00:00:00\nReturning block of 350 for bucket 23\nGetting block 24 of 57\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\nGetting block 26 of 57\n  bucket 25: 60%\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 70%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 80%\n  bucket 26: 10%\n  bucket 25: 90%\n  bucket 26: 20%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\nGetting block 28 of 57\n  Calculating Z arrays for bucket 27\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 27: 70%\n  bucket 28: 80%\n  bucket 27: 80%\n  bucket 28: 90%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\nGetting block 31 of 57\nGetting block 30 of 57\n  Reserving size (388) for bucket 31\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 31\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 30:\nGetting block 32 of 57\n  bucket 31: 10%\n  bucket 30: 10%\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 20%\n  Entering block accumulator loop for bucket 32:\n  bucket 30: 20%\n  bucket 31: 30%\n  bucket 32: 10%\n  bucket 30: 30%\n  bucket 32: 20%\n  bucket 31: 40%\n  bucket 30: 40%\n  bucket 32: 30%\n  bucket 31: 50%\n  bucket 30: 50%\n  bucket 32: 40%\n  bucket 31: 60%\n  bucket 32: 50%\n  bucket 30: 60%\n  bucket 32: 60%\n  bucket 31: 70%\n  bucket 30: 70%\n  bucket 32: 70%\n  bucket 31: 80%\n  bucket 30: 80%\n  bucket 32: 80%\n  bucket 31: 90%\n  bucket 32: 90%\n  bucket 30: 90%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  bucket 31: 100%\n  bucket 30: 100%\n  Sorting block of length 310 for bucket 31\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 20%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 30%\n  bucket 34: 10%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 34: 20%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 34: 30%\n  bucket 33: 80%\n  bucket 34: 40%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\nGetting block 35 of 57\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\nGetting block 37 of 57\n  bucket 36: 20%\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 30%\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 36: 40%\n  bucket 37: 30%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 37: 40%\n  bucket 36: 70%\n  bucket 37: 50%\n  bucket 36: 80%\n  bucket 37: 60%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  bucket 37: 70%\n  bucket 37: 80%\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\nGetting block 38 of 57\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\nGetting block 39 of 57\n  bucket 38: 20%\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 38: 30%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 38: 40%\n  bucket 39: 40%\n  bucket 38: 50%\n  bucket 39: 50%\n  bucket 38: 60%\n  bucket 39: 60%\n  bucket 38: 70%\n  bucket 39: 70%\n  bucket 38: 80%\n  bucket 39: 80%\n  bucket 38: 90%\n  bucket 39: 90%\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\nGetting block 41 of 57\n  bucket 40: 20%\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 30%\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 40: 40%\n  bucket 41: 30%\n  bucket 40: 50%\n  bucket 41: 40%\n  bucket 40: 60%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 40: 70%\n  bucket 41: 70%\n  bucket 40: 80%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 42 of 57\n  Reserving size (388) for bucket 42\nGetting block 43 of 57\n  Calculating Z arrays for bucket 42\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 10%\n  bucket 43: 10%\n  bucket 42: 20%\n  bucket 43: 20%\n  bucket 42: 30%\n  bucket 43: 30%\n  bucket 42: 40%\n  bucket 43: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 43: 50%\n  bucket 42: 80%\n  bucket 43: 60%\n  bucket 42: 90%\n  bucket 43: 70%\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\nGetting block 45 of 57\n  bucket 44: 10%\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  bucket 44: 20%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 30%\n  bucket 45: 10%\n  bucket 44: 40%\n  bucket 45: 20%\n  bucket 44: 50%\n  bucket 45: 30%\n  bucket 44: 60%\n  bucket 45: 40%\n  bucket 44: 70%\n  bucket 45: 50%\n  bucket 44: 80%\n  bucket 45: 60%\n  bucket 44: 90%\n  bucket 45: 70%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\nGetting block 46 of 57\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 30%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 47: 10%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 47: 20%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 57\n  Entering block accumulator loop for bucket 48:\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 49: 10%\n  bucket 48: 30%\n  bucket 49: 20%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 49: 30%\n  bucket 48: 60%\n  bucket 49: 40%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 49: 50%\n  bucket 48: 90%\n  bucket 49: 60%\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\nGetting block 50 of 57\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 20%\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 51: 30%\n  bucket 52: 10%\n  bucket 53: 10%\n  bucket 51: 40%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 52: 20%\n  bucket 51: 50%\n  bucket 53: 40%\n  bucket 51: 60%\n  bucket 53: 50%\n  bucket 52: 30%\n  bucket 53: 60%\n  bucket 51: 70%\n  bucket 53: 70%\n  bucket 52: 40%\n  bucket 53: 80%\n  bucket 51: 80%\n  bucket 52: 50%\n  bucket 53: 90%\n  bucket 52: 60%\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 52: 70%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  bucket 52: 80%\n  Sorting block time: 00:00:00\n  bucket 52: 90%\nReturning block of 371 for bucket 53\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\nGetting block 54 of 57\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 54: 20%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 30%\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 54: 40%\n  bucket 55: 30%\n  bucket 54: 50%\n  bucket 55: 40%\n  bucket 54: 60%\n  bucket 55: 50%\n  bucket 54: 70%\n  bucket 55: 60%\n  bucket 54: 80%\n  bucket 55: 70%\n  bucket 54: 90%\n  bucket 55: 80%\n  bucket 54: 100%\n  bucket 55: 90%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\nGetting block 57 of 57\n  Calculating Z arrays for bucket 56\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  Entering block accumulator loop for bucket 56:\n  bucket 57: 10%\n  bucket 56: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 56: 20%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 56: 30%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 56: 40%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 56: 50%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\nReturning block of 133 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "job_messages": null, "dependencies": [], "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0, exit_code: None, stderr: Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n.", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0, exit_code: None, stderr: Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n."], "status": "failure"}}, {"id": "bowtie2/2.4.2+galaxy0-1", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 1, "time_seconds": 23.832153797149658, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "bowtie2/2.4.2+galaxy0-2", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 2, "time_seconds": 43.64285111427307, "inputs": {"library|input_1": {"src": "hda", "id": "02dbc804adf2cfeb"}, "library|input_2": {"src": "hda", "id": "a05138101bfc53b4"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "140fead612765a96"}, "reference_genome|source": "history", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "140fead612765a96", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:49:23.149596", "update_time": "2024-08-09T18:49:38.032274", "galaxy_version": "24.1", "external_id": "gxy-frv6t", "handler": null, "job_runner_name": null, "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/4/8/8/dataset_4888799d-43c4-448f-8983-9f1d9e35bce7.dat' genome && ln -s -f '/galaxy/server/database/objects/4/8/8/dataset_4888799d-43c4-448f-8983-9f1d9e35bce7.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/9/3/3/dataset_933313cf-823d-40a2-82c4-95614fe26742.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/b/a/1/dataset_ba1c0c64-a807-4d1c-a680-bdad5d30d3eb.dat' input_r.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq' -2 'input_r.fastq'                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/2/3/9/dataset_23924bc0-2b4c-46ea-a192-6290b3ed35b3.dat'", "user_email": "tests@fake.org", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "false", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"CN\": null, \"DS\": null, \"DT\": null, \"FO\": null, \"KS\": null, \"PG\": null, \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": false}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": false}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": false}, \"rg_selector\": \"set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 57, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": false, \"input_1\": {\"values\": [{\"id\": 55, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 56, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": false}"}, "inputs": {"library|input_1": {"id": "02dbc804adf2cfeb", "src": "hda", "uuid": "933313cf-823d-40a2-82c4-95614fe26742"}, "library|input_2": {"id": "a05138101bfc53b4", "src": "hda", "uuid": "ba1c0c64-a807-4d1c-a680-bdad5d30d3eb"}, "reference_genome|own_file": {"id": "140fead612765a96", "src": "hda", "uuid": "4888799d-43c4-448f-8983-9f1d9e35bce7"}}, "outputs": {"output": {"id": "29d4d224a8fded97", "src": "hda", "uuid": "23924bc0-2b4c-46ea-a192-6290b3ed35b3"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/4/8/8/dataset_4888799d-43c4-448f-8983-9f1d9e35bce7.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\nGetting block 3 of 58\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (388) for bucket 3\nGetting block 4 of 58\nGetting block 5 of 58\nGetting block 6 of 58\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\nGetting block 7 of 58\n  Reserving size (388) for bucket 4\nGetting block 8 of 58\n  Reserving size (388) for bucket 5\n  bucket 1: 10%\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  bucket 1: 20%\n  bucket 2: 10%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 1: 30%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 6: 10%\n  bucket 3: 30%\n  bucket 8: 10%\n  bucket 4: 10%\n  bucket 5: 10%\n  bucket 1: 50%\n  bucket 6: 20%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 6: 30%\n  bucket 1: 60%\n  bucket 5: 20%\n  bucket 3: 50%\n  bucket 2: 50%\n  bucket 4: 20%\n  bucket 8: 30%\n  bucket 6: 40%\n  bucket 7: 20%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 5: 30%\n  bucket 2: 60%\n  bucket 8: 40%\n  bucket 6: 50%\n  bucket 1: 80%\n  bucket 4: 30%\n  bucket 3: 70%\n  bucket 7: 30%\n  bucket 8: 50%\n  bucket 6: 60%\n  bucket 2: 70%\n  bucket 5: 40%\n  bucket 1: 90%\n  bucket 3: 80%\n  bucket 8: 60%\n  bucket 6: 70%\n  bucket 2: 80%\n  bucket 7: 40%\n  bucket 4: 40%\n  bucket 1: 100%\n  bucket 8: 70%\n  bucket 3: 90%\n  bucket 5: 50%\n  bucket 6: 80%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 8: 80%\n  bucket 7: 50%\n  bucket 3: 100%\n  bucket 6: 90%\n  bucket 4: 50%\n  bucket 5: 60%\n  bucket 2: 100%\n  Sorting block of length 370 for bucket 3\n  bucket 8: 90%\n  (Using difference cover)\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 7: 60%\n  bucket 4: 60%\n  bucket 8: 100%\n  bucket 5: 70%\n  Sorting block of length 339 for bucket 6\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 5: 80%\n  bucket 7: 80%\n  bucket 5: 90%\n  bucket 4: 70%\n  bucket 7: 90%\n  bucket 5: 100%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\nGetting block 9 of 58\n  Reserving size (388) for bucket 9\nGetting block 10 of 58\n  Calculating Z arrays for bucket 9\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 60%\n  bucket 10: 80%\n  bucket 9: 70%\n  bucket 10: 90%\n  bucket 9: 80%\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 58\n  bucket 11: 40%\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 50%\n  bucket 12: 10%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 12: 20%\n  bucket 11: 90%\n  bucket 12: 30%\n  bucket 11: 100%\n  bucket 12: 40%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 306 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\nGetting block 13 of 58\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\nGetting block 14 of 58\n  bucket 13: 50%\n  Reserving size (388) for bucket 14\nGetting block 15 of 58\n  Calculating Z arrays for bucket 14\n  Reserving size (388) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 13: 60%\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 70%\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 13: 80%\n  bucket 14: 20%\n  bucket 13: 90%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 13: 100%\n  bucket 15: 30%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  bucket 14: 40%\n  bucket 15: 40%\n  bucket 14: 50%\n  bucket 15: 50%\n  bucket 14: 60%\n  bucket 15: 60%\n  bucket 14: 70%\n  bucket 15: 70%\n  bucket 14: 80%\n  bucket 15: 80%\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\n  bucket 14: 90%\n  bucket 15: 90%\n  bucket 14: 100%\n  bucket 15: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\nGetting block 16 of 58\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\nGetting block 18 of 58\n  Calculating Z arrays for bucket 17\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 17: 20%\nGetting block 19 of 58\n  Reserving size (388) for bucket 19\n  bucket 18: 10%\n  Calculating Z arrays for bucket 19\n  bucket 17: 30%\n  bucket 17: 40%\n  Entering block accumulator loop for bucket 19:\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 18: 20%\n  bucket 19: 10%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 19: 20%\n  bucket 17: 90%\n  bucket 18: 30%\n  bucket 19: 30%\n  bucket 18: 40%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  bucket 18: 50%\n  bucket 19: 40%\n  bucket 18: 60%\n  bucket 19: 50%\n  bucket 18: 70%\n  bucket 19: 60%\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\n  bucket 18: 80%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\nGetting block 20 of 58\nGetting block 21 of 58\n  Reserving size (388) for bucket 20\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 20\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 21: 10%\n  bucket 20: 20%\n  bucket 21: 20%\n  bucket 20: 30%\n  bucket 21: 30%\n  bucket 20: 40%\n  bucket 21: 40%\n  bucket 20: 50%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 20: 60%\nGetting block 22 of 58\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 70%\n  Entering block accumulator loop for bucket 22:\n  bucket 20: 70%\n  bucket 22: 10%\n  bucket 21: 80%\n  bucket 20: 80%\n  bucket 22: 20%\n  bucket 21: 90%\n  bucket 20: 90%\n  bucket 22: 30%\n  bucket 21: 100%\n  bucket 20: 100%\n  Sorting block of length 210 for bucket 21\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  (Using difference cover)\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 58\n  Entering block accumulator loop for bucket 25:\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 58\n  bucket 27: 10%\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 27: 90%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\nGetting block 29 of 58\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 40%\n  bucket 30: 50%\n  bucket 29: 50%\n  bucket 30: 60%\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 29: 70%\n  bucket 30: 90%\n  bucket 29: 80%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\nGetting block 31 of 58\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 30%\n  Entering block accumulator loop for bucket 32:\nGetting block 33 of 58\n  bucket 31: 40%\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 10%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 20%\n  bucket 31: 50%\n  bucket 33:\n..\n 30%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 24: 40%\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 23: 100%\n  Sorting block of length 349 for bucket 23\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 350 for bucket 23\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\nGetting block 26 of 57\n  Calculating Z arrays for bucket 25\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 25: 10%\n  bucket 26: 20%\n  bucket 25: 20%\n  bucket 26: 30%\n  bucket 25: 30%\n  bucket 26: 40%\n  bucket 25: 40%\n  bucket 26: 50%\n  bucket 25: 50%\n  bucket 26: 60%\n  bucket 25: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 25: 70%\n  bucket 26: 90%\n  bucket 25: 80%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  bucket 25: 90%\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\nGetting block 28 of 57\n  bucket 27: 70%\n  Reserving size (388) for bucket 28\nGetting block 29 of 57\n  Calculating Z arrays for bucket 28\n  bucket 27: 80%\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 27: 90%\n  bucket 27: 100%\n  bucket 29: 10%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  bucket 28: 10%\n  bucket 29: 20%\n  bucket 28: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 28: 30%\n  bucket 29: 50%\n  bucket 28: 40%\n  bucket 29: 60%\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\n  bucket 29: 70%\n  bucket 28: 50%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 28: 60%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\nGetting block 31 of 57\n  Calculating Z arrays for bucket 30\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 31: 10%\n  bucket 30: 20%\n  bucket 31: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 31: 30%\n  bucket 30: 50%\n  bucket 31: 40%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 31: 50%\n  bucket 30: 80%\n  bucket 31: 60%\n  bucket 30: 90%\n  bucket 31: 70%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\nGetting block 33 of 57\n  bucket 32: 10%\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 33: 10%\n  bucket 32: 40%\n  bucket 33: 20%\n  bucket 32: 50%\n  bucket 33: 30%\n  bucket 32: 60%\n  bucket 33: 40%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 33: 50%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 220 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\nGetting block 35 of 57\n  bucket 34: 10%\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 20%\n  bucket 35: 10%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 35: 20%\n  bucket 34: 50%\n  bucket 35: 30%\n  bucket 34: 60%\n  bucket 35: 40%\n  bucket 34: 70%\n  bucket 35: 50%\n  bucket 34: 80%\n  bucket 35: 60%\n  bucket 34: 90%\n  bucket 35: 70%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\nGetting block 37 of 57\n  bucket 36: 20%\n  Reserving size (388) for bucket 37\nGetting block 38 of 57\n  Calculating Z arrays for bucket 37\n  bucket 36: 30%\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 38:\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 38: 10%\n  bucket 37: 10%\n  bucket 36: 60%\n  bucket 38: 20%\n  bucket 37: 20%\n  bucket 36: 70%\n  bucket 38: 30%\n  bucket 37: 30%\n  bucket 36: 80%\n  bucket 38: 40%\n  bucket 36: 90%\n  bucket 37: 40%\n  bucket 38: 50%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  bucket 37: 50%\n  bucket 38: 60%\n  bucket 37: 60%\n  bucket 38: 70%\n  bucket 37: 70%\n  bucket 38: 80%\n  bucket 37: 80%\n  bucket 38: 90%\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\n  bucket 37: 90%\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\nGetting block 39 of 57\n  Reserving size (388) for bucket 39\nGetting block 40 of 57\n  Calculating Z arrays for bucket 39\n  Reserving size (388) for bucket 40\nGetting block 41 of 57\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 39:\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 41:\n  bucket 39: 10%\n  bucket 40: 10%\n  bucket 41: 10%\n  bucket 39: 20%\n  bucket 41: 20%\n  bucket 40: 20%\n  bucket 41: 30%\n  bucket 39: 30%\n  bucket 40: 30%\n  bucket 41: 40%\n  bucket 39: 40%\n  bucket 40: 40%\n  bucket 41: 50%\n  bucket 39: 50%\n  bucket 40: 50%\n  bucket 39: 60%\n  bucket 41: 60%\n  bucket 39: 70%\n  bucket 41: 70%\n  bucket 40: 60%\n  bucket 39: 80%\n  bucket 41: 80%\n  bucket 40: 70%\n  bucket 39: 90%\n  bucket 41: 90%\n  bucket 40: 80%\n  bucket 39: 100%\n  bucket 41: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 42 of 57\n  Reserving size (388) for bucket 42\nGetting block 43 of 57\n  Calculating Z arrays for bucket 42\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 10%\n  bucket 43: 10%\n  bucket 42: 20%\n  bucket 43: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 43: 30%\n  bucket 42: 50%\n  bucket 43: 40%\n  bucket 42: 60%\n  bucket 43: 50%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 43: 60%\n  bucket 42: 90%\n  bucket 43: 70%\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 57\n  Entering block accumulator loop for bucket 44:\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 10%\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 44: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 44: 30%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 44: 40%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 44: 50%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  bucket 44: 60%\n  bucket 44: 70%\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 46 of 57\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\nGetting block 48 of 57\n  bucket 47: 20%\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\n  bucket 47: 30%\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 49:\n  bucket 47: 40%\n  bucket 48: 10%\n  bucket 47: 50%\n  bucket 49: 10%\n  bucket 48: 20%\n  bucket 47: 60%\n  bucket 49: 20%\n  bucket 48: 30%\n  bucket 47: 70%\n  bucket 49: 30%\nGetting block 50 of 57\n  bucket 48: 40%\n  bucket 47: 80%\n  bucket 49: 40%\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 47: 90%\n  bucket 48: 50%\n  bucket 49: 50%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  bucket 50: 10%\n  bucket 48: 60%\n  bucket 50: 20%\n  bucket 49: 60%\n  bucket 48: 70%\n  bucket 50: 30%\n  bucket 48: 80%\n  bucket 49: 70%\n  bucket 50: 40%\n  bucket 48: 90%\n  bucket 50: 50%\n  bucket 49: 80%\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\n  bucket 48: 100%\n  bucket 50: 60%\n  bucket 49: 90%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  bucket 50: 70%\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\nGetting block 52 of 57\n  bucket 51: 80%\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 90%\n  bucket 52: 10%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\nGetting block 54 of 57\n  Calculating Z arrays for bucket 53\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 53: 40%\n  bucket 54: 40%\n  bucket 53: 50%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 54: 60%\n  bucket 53: 70%\n  bucket 54: 70%\n  bucket 53: 80%\n  bucket 54: 80%\n  bucket 53: 90%\n  bucket 54: 90%\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\nGetting block 57 of 57\n  Calculating Z arrays for bucket 56\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 56:\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 56: 10%\n  bucket 57: 20%\n  bucket 56: 20%\n  bucket 57: 30%\n  bucket 56: 30%\n  bucket 57: 40%\n  bucket 56: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 56: 50%\n  bucket 57: 70%\n  bucket 56: 60%\n  bucket 57: 80%\n  bucket 56: 70%\n  bucket 57: 90%\n  bucket 56: 80%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "tool_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/4/8/8/dataset_4888799d-43c4-448f-8983-9f1d9e35bce7.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\nGetting block 3 of 58\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (388) for bucket 3\nGetting block 4 of 58\nGetting block 5 of 58\nGetting block 6 of 58\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\nGetting block 7 of 58\n  Reserving size (388) for bucket 4\nGetting block 8 of 58\n  Reserving size (388) for bucket 5\n  bucket 1: 10%\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  bucket 1: 20%\n  bucket 2: 10%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 1: 30%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 2: 30%\n  bucket 6: 10%\n  bucket 3: 30%\n  bucket 8: 10%\n  bucket 4: 10%\n  bucket 5: 10%\n  bucket 1: 50%\n  bucket 6: 20%\n  bucket 2: 40%\n  bucket 3: 40%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 6: 30%\n  bucket 1: 60%\n  bucket 5: 20%\n  bucket 3: 50%\n  bucket 2: 50%\n  bucket 4: 20%\n  bucket 8: 30%\n  bucket 6: 40%\n  bucket 7: 20%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 5: 30%\n  bucket 2: 60%\n  bucket 8: 40%\n  bucket 6: 50%\n  bucket 1: 80%\n  bucket 4: 30%\n  bucket 3: 70%\n  bucket 7: 30%\n  bucket 8: 50%\n  bucket 6: 60%\n  bucket 2: 70%\n  bucket 5: 40%\n  bucket 1: 90%\n  bucket 3: 80%\n  bucket 8: 60%\n  bucket 6: 70%\n  bucket 2: 80%\n  bucket 7: 40%\n  bucket 4: 40%\n  bucket 1: 100%\n  bucket 8: 70%\n  bucket 3: 90%\n  bucket 5: 50%\n  bucket 6: 80%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 8: 80%\n  bucket 7: 50%\n  bucket 3: 100%\n  bucket 6: 90%\n  bucket 4: 50%\n  bucket 5: 60%\n  bucket 2: 100%\n  Sorting block of length 370 for bucket 3\n  bucket 8: 90%\n  (Using difference cover)\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 7: 60%\n  bucket 4: 60%\n  bucket 8: 100%\n  bucket 5: 70%\n  Sorting block of length 339 for bucket 6\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 5: 80%\n  bucket 7: 80%\n  bucket 5: 90%\n  bucket 4: 70%\n  bucket 7: 90%\n  bucket 5: 100%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\nGetting block 9 of 58\n  Reserving size (388) for bucket 9\nGetting block 10 of 58\n  Calculating Z arrays for bucket 9\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 60%\n  bucket 10: 80%\n  bucket 9: 70%\n  bucket 10: 90%\n  bucket 9: 80%\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\nGetting block 12 of 58\n  bucket 11: 40%\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 50%\n  bucket 12: 10%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 12: 20%\n  bucket 11: 90%\n  bucket 12: 30%\n  bucket 11: 100%\n  bucket 12: 40%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 306 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\nGetting block 13 of 58\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\nGetting block 14 of 58\n  bucket 13: 50%\n  Reserving size (388) for bucket 14\nGetting block 15 of 58\n  Calculating Z arrays for bucket 14\n  Reserving size (388) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 13: 60%\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 70%\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 13: 80%\n  bucket 14: 20%\n  bucket 13: 90%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 13: 100%\n  bucket 15: 30%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  bucket 14: 40%\n  bucket 15: 40%\n  bucket 14: 50%\n  bucket 15: 50%\n  bucket 14: 60%\n  bucket 15: 60%\n  bucket 14: 70%\n  bucket 15: 70%\n  bucket 14: 80%\n  bucket 15: 80%\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\n  bucket 14: 90%\n  bucket 15: 90%\n  bucket 14: 100%\n  bucket 15: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\nGetting block 16 of 58\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\nGetting block 18 of 58\n  Calculating Z arrays for bucket 17\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 17: 20%\nGetting block 19 of 58\n  Reserving size (388) for bucket 19\n  bucket 18: 10%\n  Calculating Z arrays for bucket 19\n  bucket 17: 30%\n  bucket 17: 40%\n  Entering block accumulator loop for bucket 19:\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 18: 20%\n  bucket 19: 10%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 19: 20%\n  bucket 17: 90%\n  bucket 18: 30%\n  bucket 19: 30%\n  bucket 18: 40%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  bucket 18: 50%\n  bucket 19: 40%\n  bucket 18: 60%\n  bucket 19: 50%\n  bucket 18: 70%\n  bucket 19: 60%\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\n  bucket 18: 80%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\nGetting block 20 of 58\nGetting block 21 of 58\n  Reserving size (388) for bucket 20\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 20\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 21: 10%\n  bucket 20: 20%\n  bucket 21: 20%\n  bucket 20: 30%\n  bucket 21: 30%\n  bucket 20: 40%\n  bucket 21: 40%\n  bucket 20: 50%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 20: 60%\nGetting block 22 of 58\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 70%\n  Entering block accumulator loop for bucket 22:\n  bucket 20: 70%\n  bucket 22: 10%\n  bucket 21: 80%\n  bucket 20: 80%\n  bucket 22: 20%\n  bucket 21: 90%\n  bucket 20: 90%\n  bucket 22: 30%\n  bucket 21: 100%\n  bucket 20: 100%\n  Sorting block of length 210 for bucket 21\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  (Using difference cover)\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 58\n  Entering block accumulator loop for bucket 25:\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 26: 60%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 58\n  bucket 27: 10%\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 28: 40%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 27: 90%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\nGetting block 29 of 58\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 29: 40%\n  bucket 30: 50%\n  bucket 29: 50%\n  bucket 30: 60%\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 29: 70%\n  bucket 30: 90%\n  bucket 29: 80%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\nGetting block 31 of 58\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 30%\n  Entering block accumulator loop for bucket 32:\nGetting block 33 of 58\n  bucket 31: 40%\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 10%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 20%\n  bucket 31: 50%\n  bucket 33:\n..\n 30%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 24: 40%\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 23: 100%\n  Sorting block of length 349 for bucket 23\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 350 for bucket 23\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\nGetting block 26 of 57\n  Calculating Z arrays for bucket 25\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 25: 10%\n  bucket 26: 20%\n  bucket 25: 20%\n  bucket 26: 30%\n  bucket 25: 30%\n  bucket 26: 40%\n  bucket 25: 40%\n  bucket 26: 50%\n  bucket 25: 50%\n  bucket 26: 60%\n  bucket 25: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 25: 70%\n  bucket 26: 90%\n  bucket 25: 80%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  bucket 25: 90%\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\nGetting block 28 of 57\n  bucket 27: 70%\n  Reserving size (388) for bucket 28\nGetting block 29 of 57\n  Calculating Z arrays for bucket 28\n  bucket 27: 80%\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 27: 90%\n  bucket 27: 100%\n  bucket 29: 10%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  bucket 28: 10%\n  bucket 29: 20%\n  bucket 28: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 28: 30%\n  bucket 29: 50%\n  bucket 28: 40%\n  bucket 29: 60%\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\n  bucket 29: 70%\n  bucket 28: 50%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 28: 60%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\nGetting block 31 of 57\n  Calculating Z arrays for bucket 30\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 31: 10%\n  bucket 30: 20%\n  bucket 31: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 31: 30%\n  bucket 30: 50%\n  bucket 31: 40%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 31: 50%\n  bucket 30: 80%\n  bucket 31: 60%\n  bucket 30: 90%\n  bucket 31: 70%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\nGetting block 33 of 57\n  bucket 32: 10%\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 33: 10%\n  bucket 32: 40%\n  bucket 33: 20%\n  bucket 32: 50%\n  bucket 33: 30%\n  bucket 32: 60%\n  bucket 33: 40%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 33: 50%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 220 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\nGetting block 35 of 57\n  bucket 34: 10%\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 20%\n  bucket 35: 10%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 35: 20%\n  bucket 34: 50%\n  bucket 35: 30%\n  bucket 34: 60%\n  bucket 35: 40%\n  bucket 34: 70%\n  bucket 35: 50%\n  bucket 34: 80%\n  bucket 35: 60%\n  bucket 34: 90%\n  bucket 35: 70%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\nGetting block 37 of 57\n  bucket 36: 20%\n  Reserving size (388) for bucket 37\nGetting block 38 of 57\n  Calculating Z arrays for bucket 37\n  bucket 36: 30%\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 38:\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 38: 10%\n  bucket 37: 10%\n  bucket 36: 60%\n  bucket 38: 20%\n  bucket 37: 20%\n  bucket 36: 70%\n  bucket 38: 30%\n  bucket 37: 30%\n  bucket 36: 80%\n  bucket 38: 40%\n  bucket 36: 90%\n  bucket 37: 40%\n  bucket 38: 50%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  bucket 37: 50%\n  bucket 38: 60%\n  bucket 37: 60%\n  bucket 38: 70%\n  bucket 37: 70%\n  bucket 38: 80%\n  bucket 37: 80%\n  bucket 38: 90%\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\n  bucket 37: 90%\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\nGetting block 39 of 57\n  Reserving size (388) for bucket 39\nGetting block 40 of 57\n  Calculating Z arrays for bucket 39\n  Reserving size (388) for bucket 40\nGetting block 41 of 57\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 39:\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 41:\n  bucket 39: 10%\n  bucket 40: 10%\n  bucket 41: 10%\n  bucket 39: 20%\n  bucket 41: 20%\n  bucket 40: 20%\n  bucket 41: 30%\n  bucket 39: 30%\n  bucket 40: 30%\n  bucket 41: 40%\n  bucket 39: 40%\n  bucket 40: 40%\n  bucket 41: 50%\n  bucket 39: 50%\n  bucket 40: 50%\n  bucket 39: 60%\n  bucket 41: 60%\n  bucket 39: 70%\n  bucket 41: 70%\n  bucket 40: 60%\n  bucket 39: 80%\n  bucket 41: 80%\n  bucket 40: 70%\n  bucket 39: 90%\n  bucket 41: 90%\n  bucket 40: 80%\n  bucket 39: 100%\n  bucket 41: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 42 of 57\n  Reserving size (388) for bucket 42\nGetting block 43 of 57\n  Calculating Z arrays for bucket 42\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 10%\n  bucket 43: 10%\n  bucket 42: 20%\n  bucket 43: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 43: 30%\n  bucket 42: 50%\n  bucket 43: 40%\n  bucket 42: 60%\n  bucket 43: 50%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 43: 60%\n  bucket 42: 90%\n  bucket 43: 70%\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 57\n  Entering block accumulator loop for bucket 44:\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 10%\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 44: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 44: 30%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 44: 40%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 44: 50%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  bucket 44: 60%\n  bucket 44: 70%\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 46 of 57\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\nGetting block 48 of 57\n  bucket 47: 20%\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\n  bucket 47: 30%\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 49:\n  bucket 47: 40%\n  bucket 48: 10%\n  bucket 47: 50%\n  bucket 49: 10%\n  bucket 48: 20%\n  bucket 47: 60%\n  bucket 49: 20%\n  bucket 48: 30%\n  bucket 47: 70%\n  bucket 49: 30%\nGetting block 50 of 57\n  bucket 48: 40%\n  bucket 47: 80%\n  bucket 49: 40%\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 47: 90%\n  bucket 48: 50%\n  bucket 49: 50%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  bucket 50: 10%\n  bucket 48: 60%\n  bucket 50: 20%\n  bucket 49: 60%\n  bucket 48: 70%\n  bucket 50: 30%\n  bucket 48: 80%\n  bucket 49: 70%\n  bucket 50: 40%\n  bucket 48: 90%\n  bucket 50: 50%\n  bucket 49: 80%\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\n  bucket 48: 100%\n  bucket 50: 60%\n  bucket 49: 90%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  bucket 50: 70%\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\nGetting block 52 of 57\n  bucket 51: 80%\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 90%\n  bucket 52: 10%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\nGetting block 54 of 57\n  Calculating Z arrays for bucket 53\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 53: 40%\n  bucket 54: 40%\n  bucket 53: 50%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 54: 60%\n  bucket 53: 70%\n  bucket 54: 70%\n  bucket 53: 80%\n  bucket 54: 80%\n  bucket 53: 90%\n  bucket 54: 90%\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\nGetting block 57 of 57\n  Calculating Z arrays for bucket 56\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 56:\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 56: 10%\n  bucket 57: 20%\n  bucket 56: 20%\n  bucket 57: 30%\n  bucket 56: 30%\n  bucket 57: 40%\n  bucket 56: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 56: 50%\n  bucket 57: 70%\n  bucket 56: 60%\n  bucket 57: 80%\n  bucket 56: 70%\n  bucket 57: 90%\n  bucket 56: 80%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:49:26", "plugin": "core", "name": "end_epoch", "raw_value": "1723229366.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:49:25", "plugin": "core", "name": "start_epoch", "raw_value": "1723229365.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_ppzeahbu.sam v. /tmp/history_bam_converted_to_sam_rnyj69a_.sam )\n--- local_file\n+++ history_data\n@@ -1,75 +1,76 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n @RG\tID:rg1\tPL:CAPILLARY\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome --rg-id rg1 --rg PL:CAPILLARY -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 8 -x genome --rg-id rg1 --rg PL:CAPILLARY -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@8 -T /galaxy/server/database/jobs_directory/000/57/tmp -O bam -o /galaxy/server/database/objects/2/3/9/dataset_23924bc0-2b4c-46ea-a192-6290b3ed35b3.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1106:6455:17124\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBAAFABDBBFGGGGGGGGGGHHHGHHGHHHHHHHHHGHHGHHGHHHGHGGGEGHHHHHHHHHHHHHGHHHGHHHGGHGGHHHHHHHHHHHHHHHHHHGHHHHHHHHGHHHHHGGCFEHHHGFHHHHGHHFFH?GGHHHHGHGHGHHCFGGGGGGGFFFFFFFFFFFFFFFFFFFFADFA?.FEFAFFFEFFFFFFFFFFFFDABFBBFFFFFFFFEFFBFFFFFFFFFFF/FFBFFFFFFADE>BFFF9\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tA3AABBFFFFFFGGGGGGGGGGHHFHHHHHHGHGHHHHHGCHHHHGGGGHHHHHHHHHHHHHHHGHHGHGHGGHGGHGHGGHHGFGHHGHHHEHHGHHHHHGHEHEHHHGGFGGHHHFHHHGHHHHHHHGHHHHG4EGGGFCBBCA?DGGGGGGCCAFFFFFFFFFFFFFFFFFDFFF.9@--=AFFFF;FBFFBEFFF9FBFFB9/FFFFFFB/FFFFFFFBFFFF/BBFBB/FFFE?.;@FFB?FBB//\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1104:7756:4776\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tCCCCCCFFFFFFGGGGGGGEEFHHHHGHGHHHHHHGGHHHGGGGGGHHGHHHHHGHHGHHHGGFHHHHHHHHGHHHFHHGHHGFGGGGHHHHHHHHGHGHFFHFHHHHHHGGHGFGFHHHGHG?FGHHHHHHHHHHHHHHGHGHHGHGGCDGFFHHHHGHHHHHGHHHGFHGHFHGHGHGH/@CABFFFFFFFACAFF?BBFFBFD-@-.D>FFAF.F.:9---;AADFFFFFBEFFF:9FFFFBBFFFF/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t235M4I12M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tCCCCCFFFCFFFGGGGGGGGGGHHHHHHGHHHHHGGGGGFHFHHHHHHGHHHHHGHHHHHHGHFHGHGGGGGGGGHHHGGGGGGGGHHHGHGGGGGGGGGGGHHGGGFGGGFEGGGGFFFGGFGDGGGBFGFFFFFFFFFFFFFE0BFFFFFFFFFFFFFFFFFFF;BFFDFFFFBF0BFFBFFEEBFFAA009FFFFFBFFEBB0;.BFFBFFFFFFFFFFFF0;BFFFFE//090::B0000:009900\tAS:i:-50\tXN:i:0\tXM:i:9\tXO:i:1\tXG:i:4\tNM:i:13\tMD:Z:72A158A1A0A2A0T0A3A0T2\tYS:i:-80\tYT:Z:DP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1114:15066:16302\t99\tchrM\t1\t23\t4M19I228M\t=\t1\t241\tTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAACGGTTGTTAATTAATTATTGCTTGTAGGACA\tBBBBAFFBDFBFBGGGGGFGGGBGFFFHGFHHGFFFHGHHHGHHHHFFHHHGHGC?AEFFHEFBFFFGHHHHH1FDGFFHGHGHFEGCGC-<<AHHHGGGGGGGFHH0GHFCCCADGGG?.9/A-???DGGFFF.9F9/EE-;;BBBFFBFFFFFFFFFEFFFFBFFBBFFFFF/BFFBFFFFF-DBFFF;/BFF//BB//9/BEA---9:BFFFFFF/F/.;.:@9.BBFF/;BFF/;/////9/////.\tAS:i:-94\tXN:i:0\tXM:i:8\tXO:i:1\tXG:i:19\tNM:i:27\tMD:Z:0G1T0C68A128A1T0G13A13\tYS:i:-52\tYT:Z:CP\tRG:Z:rg1\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1105:11578:14676\t77\t*\t0\t0\t*\t*\t0\t0\tATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTC\tCDDDDFFFBFFCGGGGGGGGGGHHHHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHGGGGGHHHHFGGHHHGGGGGGHHHGGGGHHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHHHHHHHHHHHHHGHHHHGGGGGGHGGHGHHHHHHH;CHHHHHHHHHHHHHHHGHGGGGFGGGFGGGGGGGGGGGGFGGGEGGFFFFFFFFFFFFFFFFFFFFFFFFF/FFFFFFFFFFFFFFFF0\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:11578:14676\t141\t*\t0\t0\t*\t*\t0\t0\tGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGT\tCCBCCCBBCCCCGGGGGGGGGGHGGGGGHHHHHHHGHHHHGHHHHHFFFGGHGHHHHHHHHHHHHHHHHFGHHHHHHHGHHGHFHFGHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHDGGCGHHHHHHHHHHHHHFF<GGHHHHGFGHGEHGGA=A=DFFFFAFAFF?FFFFFFFFFADFAAD;FFFA:BBBAE.A.EBFFFFEF-..0BFFF9\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:13575:19255\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGTTCCCGTGAGTGGTTAATAGGGTGATAGGCCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tAA1A1DFFFFFBGG3A111FFAEGDDBGFDHF00F01BBA00BFGEHFBFFA1FABB0FAE?CFHF1BGFHFB0011F121E//>>1F10>B?EFHGCC/?/BFG/EEGFFEE//BCFDE0?E@@B/?11</?//<@?/F<<<A-<FBGH0.00=G0<<C//./0;;GC....<C.=.00;;BB./:.900////.C000;0090;..//000;C/;;/B/9BA9A9-AEEFF?B---;B99//9/;A//9\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:13575:19255\t141\t*\t0\t0\t*\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTGGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTAACTATTACAG\tAA>>ABFDCFFFFFDGFGFDGDEG1EGEFFBFHFGHA0E00A0CAAC0FFDFFAGHFEHHFDH/EAFCFFHACGHHAFFEF2DFFG/FGHHHHGHGH0C@/E@GGC0FG10>GGFGHHGHFFBGFGB2>F<EEF0@C@9:AAF00;9@-9.;FBBBBB->@;-A@FF<-;---@-;-----;-BFF/;---9//BBFFFF//B;FF///9BF///;/;B/BBFBFFBB/;-9--///;9/:-;BFFBBB9F\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:17564:15723\t77\t*\t0\t0\t*\t*\t0\t0\tTATGCTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAA\tEDCCDFFCEEDCGGGGGGGGGGHHHHHGFGHGGHGGHHHHHHHHGHHEHHGGGGGHHHHHHHHHGHHHGHHHHGGGGGHHHHFFGHHHGGGGGGHHHGGGGGHGGGGHHHHHHGGGGGGHHHHGGGGGGGHGGGGGGHHHHHFEHHHHHHHHHHGHHGHGGHGGGCGGGGHHH1FGGGFGGFGGGGGGGGGGEFGGGGGGGGGGGGGGGGGFFFFFFFFFFAEFFFFFFFFFFBBFBBFFFFFE1:BFFB0\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:17564:15723\t141\t*\t0\t0\t*\t*\t0\t0\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCCCCCCCCFFFGGGGGGGGGGHHHHGHHGHHHHHHGHHHHHHFHHHHGGGGHHGHFHHHHHHHFHHHHHHHGHGGHGGHGHHHHFHFHHGHHHHHHHHHHHHHEHGHHHHHGGGGGHHHHGEHHGHHHHHHGHFGHFHGGAHGGHGGGCCBDFGFFAFDBDDFFFFFBDA;AAD-ADC?AFEFB-@@AAEFEFFFFF..-:.B0:FFFFFFEF0BFF09FF.0;9BFFFFF0BFFFFFF?.::-909;.9\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:18108:12091\t77\t*\t0\t0\t*\t*\t0\t0\tTAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACAC\tCCCCCFBFFFFFGGGGGGGGGGHHHHHHHHHHHHHGGGGGGFHHHBFGHHHGGGGGGHHGGGGGHHGFGGHHHHHHGGGGGGHGHFGGGGGGDGEGEFGCHHHHHHHHHHGHHHHGEDHHHGGGCDGGGGFHFHGHHHGHHGHFGHHHFHHGFHHHFHHGGHFHFHHGB0CGHGFHCBGGGGEDEE9ADFEFFFGFBFGFFGGFFFFFGGFGFFFFFFFF/A?FEFFFFFEF-A.B//;BFFEF//BB///\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1105:18108:12091\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\tCBBCCFCCCCCFGGGGGGGGGGHHGHHHHFHHHHHHFHGHHHHFHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHGHHHHGHFHGHHGHHHHHHGHHHHHHGHHHHHGGGGGHHHHHHHHGHHHHHGFGHHHHHGHDHGHHGCA;?AAFGFEFDFFF.FFFFEBDFFFFFFFFBFFFFFFFFFEFEFFFEFFFFFFF.:BFFF0BFFFFFFFFFFFF;0FF0;BFFFFFFFFBFFFBFEFFFF0\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTT\tABBBBFFFFFFFGGGGGGGGGGHHGHGHHHGHHHFGHGFGHFEHGGHGGHHHGHHHHFGHGGFGFFHHFHHHHEGHFHHHHHFGGGGGHGGGHGFHGHGGGGGGHHHGGGGHHGGGGHHHGGHGGGGGGHHHHGGGGGCFHGGGCDGHGHHHFHEHHHHHHHHHEEFHHGG:C:?0<EFGBFGGGGGFE.BFGEFFFGFFGGGGGGFDEF/FFGFFFFFFF;BBFA;.:EFFE:AAFEF.BFFFFF;9FF.\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\tBBBBAFFFFFFFGGGGGGGFGGHHHHHHHHFHHHFHHHHGHHHHHHHHGHHHGHHEGHHHGDGCHHHHHHHHHGEHEHHHHHHHFHGGEGGHHHHHHHGEGHGHHDHHHHHHHHEHFHGHGHHHGEGCEHHFHHHGHHHHHHHF?GHHHFEFFAFFHHGG?;@DDFFB?@B;BDAFFFEBBD>D>D9@DDCFFFFFFCFDFE.AA;/BB/.;-.;BFBBBFFBFFFFFFF/9FF?/;/BBFFFFF/;FFB/\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t77\t*\t0\t0\t*\t*\t0\t0\tCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGGCTTTGATTC\t3>>A@FFFFFFFGGGFEECFGGFFB5GBHH5DFH5GBEEAEFHFHHF3F3GHFHHHEF3GAEHBGFHFFEFFHHHHFFB31FGGEGFHGEHHHHHHHHHHHHHHHHHEEEEGHHHFFF3GF3FGF44BBGEHHHHGG2B/BGGHE</ECDFHHBF1DGBFBFGFH<1GHGDGGFDFE0/<--;-9./BBED;BFBD/BF9BFFFDBFDADD;FFF?->;B=.9.;.BBFFF..;A;/B/;B//;;//BBF/\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t141\t*\t0\t0\t*\t*\t0\t0\tGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTCTTTAGGGTTTATGACCCTGA\tBBCCCFFFCBCCGGGGGGGGGGHGHGHHGFGFGFHGGHHGHHHHHHHHFHHGGGGAGFBGHHHFBBGH5GDHH5EEEGEHEGFBF1DGFDGFGGGBBCEEGEHFEFDDHFBFHFD/@BGDGDHHGDCCFCD/C<->.ADDGE1GA<DBGFGHBG/..DGFCDGD.:0:.;CFGHEHBF.A-99CFGGFF0C0C0BF0;CA9/B:///;//BF/9B9?-..:;.;9.9A././;B//F.B?A////9;:/:/\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGACTTCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAA\tA>ABAFA?D@AFGGGGFGGGFGFHHHFFH4BCBGHHHHGFFF3G5BF3322EEAFHHHHHHAB5GHFHEHFHHH3BEEHFGF5@13FDF3GDGFHHFGHHHGHHHGFGGHHFCG//?/EGHHHG3F4BFFGHHHEDGFHHB/B/?FBF<@-9?BDEFFF?B--?DFFFB9FA>B;A.BFDB?AB.--@;-.FFAEFFFF9AE;DDFFFFB/9BFFFFFFFB:BF/BB/BFF//FFF-=--.99=--.9///\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1106:22927:3863\t141\t*\t0\t0\t*\t*\t0\t0\tAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGG\tAAAAAFFFFFFFGGGGGGFGGGHHGGHHHGGGGGGHGHGDFGHFGGGGFHHHHHGGGGGGGGFHGDFGGGGHGG?@EFHGEFEHEGFHHHHHF2FEHHGHGDCEAD?GFDFGGHBGHHFEHHHHHHHHHDFGHGHHGBDFG0FFHFGGFHHH=GGBF-AACEHEHHGGGHHHGHHFHCCFEBB0FFFFFF/;0;;FFFBFE.AA0BF0??-AD/////;:BFFBFFBBBFFFFFB/.9ADDAD-D;-;=A-\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t77\t*\t0\t0\t*\t*\t0\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTA\t@?AAAFFBFBFFFGGFGFGGGEFCGGHHHHFGHGHFHGHHHHGGFGGFGHHGHGHHHHGHGFFHHGGGGGHHHHHHHHHBFHHEFHHHHHHGF?FAGHGFHHHGDGFHHGGGHGHFHHHGHHHGHHFHHGFFGFHHHGHHHHFFHHHHH/FGHHHHGHGHG<C???B=@ABBFEF@=-AFFFFFFBFAFFDFFFFA?AFFCFFABEFFFFFFFFF?FFFDFFBFF;FFEFFEFFFFFFFAF///9FF/BB/\tYT:Z:UP\tRG:Z:rg1\n+M01368:8:000000000-A3GHV:1:1106:23625:4236\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGGGTGGGCTATTTAGGTTT\tBBBBBFFFFFFFEGGGGGGGGGGHHHHHHHHGHGGHHHHGFGGG?HGGHHHHHHHGGHGFGHGEEGFHHHHHHHHHHHFHHFHHGGCGGGHHHHBFGFFHGGGEFGHHGFFEEFHGGDGEHFHHHGGGCCCGHHG?EGFGGGFED@D?CEDFHEHGHFFHFHHGCGG.:CGGD:AEDCG?C?BFFFGGG/CEFBFEFFF/;:BBB;CFGD.:/:B:BB/BFFFBBFBFFAA9A..9-9@:/./;B/9/:/;\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\tRG:Z:rg1\n@@ -200,5 +203,3 @@\n M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH<1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\tRG:Z:rg1\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\tRG:Z:rg1\n"], "status": "failure"}}, {"id": "bowtie2/2.4.2+galaxy0-3", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 3, "time_seconds": 14.562331914901733, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "bowtie2/2.4.2+galaxy0-4", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 4, "time_seconds": 40.80794358253479, "inputs": {"library|input_1": {"src": "hda", "id": "298d305744ae5bae"}, "library|unaligned_file": false, "library|type": "paired_interleaved", "reference_genome|own_file": {"src": "hda", "id": "47c36b8ff6a4cd5b"}, "reference_genome|source": "history", "rg|read_group_id_conditional|ID": "rg1", "rg|PL": "CAPILLARY", "rg|rg_selector": "set", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "47c36b8ff6a4cd5b", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:50:17.838047", "update_time": "2024-08-09T18:50:33.351997", "galaxy_version": "24.1", "external_id": "gxy-sgbsv", "handler": null, "job_runner_name": null, "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/1/a/9/dataset_1a9e1d7e-7411-44bf-8737-6e2ad41e454e.dat' genome && ln -s -f '/galaxy/server/database/objects/1/a/9/dataset_1a9e1d7e-7411-44bf-8737-6e2ad41e454e.dat' genome.fa &&   ln -s '/galaxy/server/database/objects/7/9/0/dataset_79065f63-72bc-416f-b3cb-b985c6f465bd.dat' input_il.fastq &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   --interleaved 'input_il.fastq'                        --rg-id \"rg1\"  --rg \"PL:CAPILLARY\"              | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/f/e/3/dataset_fe3fb14b-ce28-48f5-b3c9-ccfc62842796.dat'", "user_email": "tests@fake.org", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "false", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"CN\": null, \"DS\": null, \"DT\": null, \"FO\": null, \"KS\": null, \"PG\": null, \"PI\": \"\", \"PL\": \"CAPILLARY\", \"PU\": null, \"__current_case__\": 1, \"read_group_id_conditional\": {\"ID\": \"rg1\", \"__current_case__\": 1, \"do_auto_name\": false}, \"read_group_lb_conditional\": {\"LB\": null, \"__current_case__\": 1, \"do_auto_name\": false}, \"read_group_sm_conditional\": {\"SM\": \"\", \"__current_case__\": 1, \"do_auto_name\": false}, \"rg_selector\": \"set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 63, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 3, \"aligned_file\": false, \"input_1\": {\"values\": [{\"id\": 62, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired_interleaved\", \"unaligned_file\": false}"}, "inputs": {"library|input_1": {"id": "298d305744ae5bae", "src": "hda", "uuid": "79065f63-72bc-416f-b3cb-b985c6f465bd"}, "reference_genome|own_file": {"id": "47c36b8ff6a4cd5b", "src": "hda", "uuid": "1a9e1d7e-7411-44bf-8737-6e2ad41e454e"}}, "outputs": {"output": {"id": "9330bc8ca090ade3", "src": "hda", "uuid": "fe3fb14b-ce28-48f5-b3c9-ccfc62842796"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/a/9/dataset_1a9e1d7e-7411-44bf-8737-6e2ad41e454e.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\nGetting block 4 of 58\nGetting block 5 of 58\nGetting block 7 of 58\nGetting block 6 of 58\nGetting block 8 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\n  Reserving size (388) for bucket 3\n  Reserving size (388) for bucket 4\n  Reserving size (388) for bucket 5\n  Reserving size (388) for bucket 7\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 7: 10%\n  bucket 1: 20%\n  bucket 8: 10%\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 8: 30%\n  bucket 5: 20%\n  bucket 3: 40%\n  bucket 6: 30%\n  bucket 2: 40%\n  bucket 8: 40%\n  bucket 7: 30%\n  bucket 4: 20%\n  bucket 1: 50%\n  bucket 3: 50%\n  bucket 5: 30%\n  bucket 2: 50%\n  bucket 6: 40%\n  bucket 8: 50%\n  bucket 3: 60%\n  bucket 1: 60%\n  bucket 7: 40%\n  bucket 2: 60%\n  bucket 4: 30%\n  bucket 6: 50%\n  bucket 8: 60%\n  bucket 3: 70%\n  bucket 5: 40%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 7: 50%\n  bucket 3: 80%\n  bucket 8: 70%\n  bucket 6: 60%\n  bucket 1: 80%\n  bucket 4: 40%\n  bucket 2: 80%\n  bucket 5: 50%\n  bucket 3: 90%\n  bucket 8: 80%\n  bucket 7: 60%\n  bucket 1: 90%\n  bucket 6: 70%\n  bucket 3: 100%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 4: 50%\n  bucket 8: 90%\n  bucket 1: 100%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 5: 60%\n  bucket 6: 80%\n  bucket 2: 100%\n  Sorting block of length 165 for bucket 2\n  bucket 8: 100%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 4: 60%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 6: 100%\n  bucket 7: 90%\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 4: 80%\n  bucket 5: 90%\n  bucket 4: 90%\n  bucket 5: 100%\n  bucket 4: 100%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\nGetting block 9 of 58\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 58\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 58\n  Entering block accumulator loop for bucket 11:\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\nGetting block 13 of 58\n  bucket 12: 10%\n  bucket 11: 20%\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 11: 30%\n  bucket 12: 20%\n  Entering block accumulator loop for bucket 13:\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 13: 10%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 13: 20%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 13: 30%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 13: 40%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  bucket 13: 50%\n  bucket 12: 90%\n  bucket 12: 100%\n  bucket 13: 60%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 13: 80%\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\nGetting block 15 of 58\n  Calculating Z arrays for bucket 14\n  Reserving size (388) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\nGetting block 16 of 58\n  Entering block accumulator loop for bucket 15:\n  Reserving size (388) for bucket 16\n  bucket 14: 10%\n  Calculating Z arrays for bucket 16\n  bucket 14: 20%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 14: 30%\n  bucket 16: 10%\n  bucket 14: 40%\n  bucket 16: 20%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 16: 30%\n  bucket 14: 60%\n  bucket 15: 30%\n  bucket 14: 70%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 14: 80%\n  bucket 16: 50%\n  bucket 14: 90%\n  bucket 15: 50%\n  bucket 14: 100%\n  bucket 16: 60%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  bucket 15: 60%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 16: 90%\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  bucket 15: 90%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  bucket 18: 80%\n  bucket 18: 90%\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\nGetting block 19 of 58\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\nGetting block 20 of 58\n  bucket 19: 60%\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 70%\n  bucket 20: 10%\n  bucket 19: 80%\n  bucket 20: 20%\n  bucket 19: 90%\n  bucket 20: 30%\n  bucket 19: 100%\n  bucket 20: 40%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 58\n  Reserving size (388) for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 21: 70%\n  bucket 22: 70%\n  bucket 21: 80%\n  bucket 22: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 23: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 60%\n  bucket 24: 80%\n  bucket 23: 70%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\nGetting block 26 of 58\n  Calculating Z arrays for bucket 25\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 60%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\nGetting block 28 of 58\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 28: 10%\n  bucket 27: 70%\n  bucket 28: 20%\n  bucket 27: 80%\n  bucket 28: 30%\n  bucket 27: 90%\n  bucket 28: 40%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  Sorting block time: 00:00:00\n  bucket 28: 80%\nReturning block of 335 for bucket 27\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\nGetting block 29 of 58\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  bucket 29: 20%\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 40%\n  bucket 30: 30%\n  bucket 29: 50%\n  bucket 30: 40%\n  bucket 29: 60%\n  bucket 30: 50%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 30: 60%\n  bucket 29: 90%\n  bucket 30: 70%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\nGetting block 31 of 58\n  Reserving size (388) for bucket 31\nGetting block 32 of 58\n  Calculating Z arrays for bucket 31\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 31: 20%\n  bucket 32: 30%\n  bucket 31: 30%\n  bucket 32: 40%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 32: 50%\n  bucket 31: 60%\n  bucket 32: 60%\n  bucket 31: 70%\n  bucket 32: 70%\n  bucket 31: 80%\n  bucket 32: 80%\n  buc\n..\n of length 349 for bucket 23\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 22: 100%\n  Sorting block of length 371 for bucket 22\n  (Using difference cover)\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 350 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\nGetting block 27 of 57\n  Calculating Z arrays for bucket 26\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\nGetting block 28 of 57\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\nGetting block 29 of 57\n  bucket 28: 50%\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 60%\n  bucket 29: 10%\n  bucket 28: 70%\n  bucket 29: 20%\n  bucket 28: 80%\n  bucket 29: 30%\n  bucket 28: 90%\n  bucket 29: 40%\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\nGetting block 31 of 57\n  Reserving size (388) for bucket 31\nGetting block 32 of 57\n  Calculating Z arrays for bucket 31\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 10%\n  bucket 32: 10%\n  bucket 31: 20%\n  bucket 32: 20%\n  bucket 31: 30%\n  bucket 32: 30%\n  bucket 31: 40%\n  bucket 32: 40%\n  bucket 31: 50%\n  bucket 32: 50%\n  bucket 31: 60%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 31: 70%\n  bucket 32: 80%\n  bucket 31: 80%\n  bucket 32: 90%\n  bucket 31: 90%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\nGetting block 35 of 57\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 10%\n  bucket 33: 20%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 20%\n  bucket 33: 30%\n  bucket 35: 10%\n  bucket 34: 30%\n  bucket 35: 20%\n  bucket 33: 40%\n  bucket 34: 40%\n  bucket 35: 30%\n  bucket 34: 50%\n  bucket 33: 50%\n  bucket 35: 40%\n  bucket 34: 60%\n  bucket 33: 60%\n  bucket 35: 50%\n  bucket 34: 70%\n  bucket 33: 70%\n  bucket 35: 60%\n  bucket 34: 80%\n  bucket 33: 80%\n  bucket 35: 70%\n  bucket 34: 90%\n  bucket 33: 90%\n  bucket 35: 80%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\nGetting block 37 of 57\n  bucket 36: 10%\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 20%\n  bucket 37: 10%\n  bucket 36: 30%\n  bucket 37: 20%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 37: 70%\n  bucket 36: 100%\n  bucket 37: 80%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\nGetting block 38 of 57\n  Reserving size (388) for bucket 38\nGetting block 39 of 57\n  Calculating Z arrays for bucket 38\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 10%\n  bucket 39: 10%\n  bucket 38: 20%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 39: 40%\n  bucket 38: 50%\n  bucket 39: 50%\n  bucket 38: 60%\n  bucket 39: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 39: 70%\n  bucket 38: 90%\n  bucket 39: 80%\n  bucket 38: 100%\n  bucket 39: 90%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 41 of 57\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\nGetting block 42 of 57\n  bucket 41: 10%\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 41: 20%\n  bucket 42: 20%\n  bucket 41: 30%\n  bucket 42: 30%\n  bucket 41: 40%\n  bucket 42: 40%\n  bucket 41: 50%\n  bucket 42: 50%\n  bucket 41: 60%\n  bucket 42: 60%\n  bucket 41: 70%\n  bucket 42: 70%\n  bucket 41: 80%\n  bucket 42: 80%\n  bucket 41: 90%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  bucket 41: 100%\n  (Using difference cover)\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 30%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 40%\n  bucket 44: 10%\n  bucket 43: 50%\n  bucket 44: 20%\n  bucket 43: 60%\n  bucket 44: 30%\n  bucket 43: 70%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 44: 60%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\nGetting block 46 of 57\nGetting block 47 of 57\n  Reserving size (388) for bucket 46\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 46\nGetting block 48 of 57\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 46: 10%\n  bucket 48: 10%\n  bucket 47: 10%\nGetting block 49 of 57\n  bucket 48: 20%\n  bucket 46: 20%\n  Reserving size (388) for bucket 49\n  bucket 47: 20%\n  Calculating Z arrays for bucket 49\n  bucket 48: 30%\n  Entering block accumulator loop for bucket 49:\n  bucket 46: 30%\n  bucket 48: 40%\n  bucket 47: 30%\n  bucket 49: 10%\n  bucket 48: 50%\n  bucket 47: 40%\n  bucket 46: 40%\n  bucket 49: 20%\n  bucket 48: 60%\n  bucket 46: 50%\n  bucket 47: 50%\n  bucket 48: 70%\n  bucket 49: 30%\n  bucket 48: 80%\n  bucket 49: 40%\n  bucket 47: 60%\n  bucket 46: 60%\n  bucket 48: 90%\n  bucket 49: 50%\n  bucket 47: 70%\n  bucket 46: 70%\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  bucket 49: 60%\n  (Using difference cover)\n  bucket 47: 80%\n  bucket 46: 80%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 47: 90%\n  bucket 46: 90%\n  bucket 49: 90%\n  bucket 47: 100%\n  bucket 49: 100%\n  Sorting block of length 217 for bucket 47\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nReturning block of 218 for bucket 47\nGetting block 50 of 57\n  Reserving size (388) for bucket 50\nGetting block 51 of 57\n  Calculating Z arrays for bucket 50\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 51:\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 50: 10%\n  bucket 51: 10%\n  Entering block accumulator loop for bucket 52:\n  bucket 50: 20%\n  bucket 51: 20%\n  bucket 52: 10%\n  bucket 50: 30%\n  bucket 51: 30%\n  bucket 52: 20%\n  bucket 51: 40%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 51: 50%\n  bucket 52: 30%\n  bucket 50: 60%\n  bucket 51: 60%\n  bucket 50: 70%\n  bucket 52: 40%\n  bucket 50: 80%\n  bucket 51: 70%\n  bucket 50: 90%\n  bucket 52: 50%\n  bucket 51: 80%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 52: 60%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  bucket 52: 70%\n  bucket 52: 80%\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\nGetting block 54 of 57\n  Calculating Z arrays for bucket 53\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 54: 10%\n  bucket 53: 10%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 20%\n  bucket 55: 10%\n  bucket 53: 20%\n  bucket 55: 20%\n  bucket 54: 30%\n  bucket 53: 30%\n  bucket 55: 30%\n  bucket 54: 40%\n  bucket 55: 40%\n  bucket 53: 40%\n  bucket 54: 50%\n  bucket 55: 50%\n  bucket 53: 50%\n  bucket 55: 60%\n  bucket 54: 60%\n  bucket 55: 70%\n  bucket 53: 60%\n  bucket 54: 70%\n  bucket 55: 80%\n  bucket 53: 70%\n  bucket 55: 90%\n  bucket 54: 80%\n  bucket 55: 100%\n  bucket 53: 80%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  bucket 53: 90%\n  bucket 54: 90%\n  bucket 53: 100%\n  bucket 54: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\nGetting block 57 of 57\n  Calculating Z arrays for bucket 56\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  Entering block accumulator loop for bucket 56:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 56: 10%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 56: 20%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 56: 30%\n  bucket 57: 70%\n  bucket 56: 40%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 56: 50%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "tool_stderr": "Building a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n50.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/1/a/9/dataset_1a9e1d7e-7411-44bf-8737-6e2ad41e454e.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\nGetting block 4 of 58\nGetting block 5 of 58\nGetting block 7 of 58\nGetting block 6 of 58\nGetting block 8 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\n  Reserving size (388) for bucket 3\n  Reserving size (388) for bucket 4\n  Reserving size (388) for bucket 5\n  Reserving size (388) for bucket 7\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  bucket 7: 10%\n  bucket 1: 20%\n  bucket 8: 10%\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 4: 10%\n  bucket 8: 20%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 8: 30%\n  bucket 5: 20%\n  bucket 3: 40%\n  bucket 6: 30%\n  bucket 2: 40%\n  bucket 8: 40%\n  bucket 7: 30%\n  bucket 4: 20%\n  bucket 1: 50%\n  bucket 3: 50%\n  bucket 5: 30%\n  bucket 2: 50%\n  bucket 6: 40%\n  bucket 8: 50%\n  bucket 3: 60%\n  bucket 1: 60%\n  bucket 7: 40%\n  bucket 2: 60%\n  bucket 4: 30%\n  bucket 6: 50%\n  bucket 8: 60%\n  bucket 3: 70%\n  bucket 5: 40%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 7: 50%\n  bucket 3: 80%\n  bucket 8: 70%\n  bucket 6: 60%\n  bucket 1: 80%\n  bucket 4: 40%\n  bucket 2: 80%\n  bucket 5: 50%\n  bucket 3: 90%\n  bucket 8: 80%\n  bucket 7: 60%\n  bucket 1: 90%\n  bucket 6: 70%\n  bucket 3: 100%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 4: 50%\n  bucket 8: 90%\n  bucket 1: 100%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 5: 60%\n  bucket 6: 80%\n  bucket 2: 100%\n  Sorting block of length 165 for bucket 2\n  bucket 8: 100%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 4: 60%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 6: 100%\n  bucket 7: 90%\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 4: 80%\n  bucket 5: 90%\n  bucket 4: 90%\n  bucket 5: 100%\n  bucket 4: 100%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\nGetting block 9 of 58\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 58\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 58\n  Entering block accumulator loop for bucket 11:\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\nGetting block 13 of 58\n  bucket 12: 10%\n  bucket 11: 20%\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 11: 30%\n  bucket 12: 20%\n  Entering block accumulator loop for bucket 13:\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 13: 10%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 13: 20%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 13: 30%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 13: 40%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  bucket 13: 50%\n  bucket 12: 90%\n  bucket 12: 100%\n  bucket 13: 60%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 13: 80%\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\nGetting block 14 of 58\n  Reserving size (388) for bucket 14\nGetting block 15 of 58\n  Calculating Z arrays for bucket 14\n  Reserving size (388) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\nGetting block 16 of 58\n  Entering block accumulator loop for bucket 15:\n  Reserving size (388) for bucket 16\n  bucket 14: 10%\n  Calculating Z arrays for bucket 16\n  bucket 14: 20%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 14: 30%\n  bucket 16: 10%\n  bucket 14: 40%\n  bucket 16: 20%\n  bucket 15: 20%\n  bucket 14: 50%\n  bucket 16: 30%\n  bucket 14: 60%\n  bucket 15: 30%\n  bucket 14: 70%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 14: 80%\n  bucket 16: 50%\n  bucket 14: 90%\n  bucket 15: 50%\n  bucket 14: 100%\n  bucket 16: 60%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  bucket 15: 60%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 16: 90%\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  bucket 15: 90%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\nGetting block 17 of 58\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  bucket 18: 80%\n  bucket 18: 90%\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\nGetting block 19 of 58\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\nGetting block 20 of 58\n  bucket 19: 60%\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 70%\n  bucket 20: 10%\n  bucket 19: 80%\n  bucket 20: 20%\n  bucket 19: 90%\n  bucket 20: 30%\n  bucket 19: 100%\n  bucket 20: 40%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 58\n  Reserving size (388) for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 21: 70%\n  bucket 22: 70%\n  bucket 21: 80%\n  bucket 22: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 40%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 23: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 60%\n  bucket 24: 80%\n  bucket 23: 70%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\nGetting block 26 of 58\n  Calculating Z arrays for bucket 25\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 26: 50%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 26: 60%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\nGetting block 28 of 58\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 28: 10%\n  bucket 27: 70%\n  bucket 28: 20%\n  bucket 27: 80%\n  bucket 28: 30%\n  bucket 27: 90%\n  bucket 28: 40%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  Sorting block time: 00:00:00\n  bucket 28: 80%\nReturning block of 335 for bucket 27\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\nGetting block 29 of 58\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  bucket 29: 20%\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 29: 40%\n  bucket 30: 30%\n  bucket 29: 50%\n  bucket 30: 40%\n  bucket 29: 60%\n  bucket 30: 50%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 30: 60%\n  bucket 29: 90%\n  bucket 30: 70%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\nGetting block 31 of 58\n  Reserving size (388) for bucket 31\nGetting block 32 of 58\n  Calculating Z arrays for bucket 31\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 31: 20%\n  bucket 32: 30%\n  bucket 31: 30%\n  bucket 32: 40%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 32: 50%\n  bucket 31: 60%\n  bucket 32: 60%\n  bucket 31: 70%\n  bucket 32: 70%\n  bucket 31: 80%\n  bucket 32: 80%\n  buc\n..\n of length 349 for bucket 23\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 22: 100%\n  Sorting block of length 371 for bucket 22\n  (Using difference cover)\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 372 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 350 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\nGetting block 27 of 57\n  Calculating Z arrays for bucket 26\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\nGetting block 28 of 57\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\nGetting block 29 of 57\n  bucket 28: 50%\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 60%\n  bucket 29: 10%\n  bucket 28: 70%\n  bucket 29: 20%\n  bucket 28: 80%\n  bucket 29: 30%\n  bucket 28: 90%\n  bucket 29: 40%\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\nGetting block 31 of 57\n  Reserving size (388) for bucket 31\nGetting block 32 of 57\n  Calculating Z arrays for bucket 31\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 10%\n  bucket 32: 10%\n  bucket 31: 20%\n  bucket 32: 20%\n  bucket 31: 30%\n  bucket 32: 30%\n  bucket 31: 40%\n  bucket 32: 40%\n  bucket 31: 50%\n  bucket 32: 50%\n  bucket 31: 60%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 31: 70%\n  bucket 32: 80%\n  bucket 31: 80%\n  bucket 32: 90%\n  bucket 31: 90%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\nGetting block 35 of 57\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 10%\n  bucket 33: 20%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 20%\n  bucket 33: 30%\n  bucket 35: 10%\n  bucket 34: 30%\n  bucket 35: 20%\n  bucket 33: 40%\n  bucket 34: 40%\n  bucket 35: 30%\n  bucket 34: 50%\n  bucket 33: 50%\n  bucket 35: 40%\n  bucket 34: 60%\n  bucket 33: 60%\n  bucket 35: 50%\n  bucket 34: 70%\n  bucket 33: 70%\n  bucket 35: 60%\n  bucket 34: 80%\n  bucket 33: 80%\n  bucket 35: 70%\n  bucket 34: 90%\n  bucket 33: 90%\n  bucket 35: 80%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\nGetting block 37 of 57\n  bucket 36: 10%\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 20%\n  bucket 37: 10%\n  bucket 36: 30%\n  bucket 37: 20%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 37: 70%\n  bucket 36: 100%\n  bucket 37: 80%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\nGetting block 38 of 57\n  Reserving size (388) for bucket 38\nGetting block 39 of 57\n  Calculating Z arrays for bucket 38\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 10%\n  bucket 39: 10%\n  bucket 38: 20%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 39: 40%\n  bucket 38: 50%\n  bucket 39: 50%\n  bucket 38: 60%\n  bucket 39: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 39: 70%\n  bucket 38: 90%\n  bucket 39: 80%\n  bucket 38: 100%\n  bucket 39: 90%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 41 of 57\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\nGetting block 42 of 57\n  bucket 41: 10%\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 41: 20%\n  bucket 42: 20%\n  bucket 41: 30%\n  bucket 42: 30%\n  bucket 41: 40%\n  bucket 42: 40%\n  bucket 41: 50%\n  bucket 42: 50%\n  bucket 41: 60%\n  bucket 42: 60%\n  bucket 41: 70%\n  bucket 42: 70%\n  bucket 41: 80%\n  bucket 42: 80%\n  bucket 41: 90%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  bucket 41: 100%\n  (Using difference cover)\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 30%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 40%\n  bucket 44: 10%\n  bucket 43: 50%\n  bucket 44: 20%\n  bucket 43: 60%\n  bucket 44: 30%\n  bucket 43: 70%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 44: 60%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\nGetting block 46 of 57\nGetting block 47 of 57\n  Reserving size (388) for bucket 46\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 46\nGetting block 48 of 57\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 46: 10%\n  bucket 48: 10%\n  bucket 47: 10%\nGetting block 49 of 57\n  bucket 48: 20%\n  bucket 46: 20%\n  Reserving size (388) for bucket 49\n  bucket 47: 20%\n  Calculating Z arrays for bucket 49\n  bucket 48: 30%\n  Entering block accumulator loop for bucket 49:\n  bucket 46: 30%\n  bucket 48: 40%\n  bucket 47: 30%\n  bucket 49: 10%\n  bucket 48: 50%\n  bucket 47: 40%\n  bucket 46: 40%\n  bucket 49: 20%\n  bucket 48: 60%\n  bucket 46: 50%\n  bucket 47: 50%\n  bucket 48: 70%\n  bucket 49: 30%\n  bucket 48: 80%\n  bucket 49: 40%\n  bucket 47: 60%\n  bucket 46: 60%\n  bucket 48: 90%\n  bucket 49: 50%\n  bucket 47: 70%\n  bucket 46: 70%\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  bucket 49: 60%\n  (Using difference cover)\n  bucket 47: 80%\n  bucket 46: 80%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 47: 90%\n  bucket 46: 90%\n  bucket 49: 90%\n  bucket 47: 100%\n  bucket 49: 100%\n  Sorting block of length 217 for bucket 47\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nReturning block of 218 for bucket 47\nGetting block 50 of 57\n  Reserving size (388) for bucket 50\nGetting block 51 of 57\n  Calculating Z arrays for bucket 50\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 51:\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 50: 10%\n  bucket 51: 10%\n  Entering block accumulator loop for bucket 52:\n  bucket 50: 20%\n  bucket 51: 20%\n  bucket 52: 10%\n  bucket 50: 30%\n  bucket 51: 30%\n  bucket 52: 20%\n  bucket 51: 40%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 51: 50%\n  bucket 52: 30%\n  bucket 50: 60%\n  bucket 51: 60%\n  bucket 50: 70%\n  bucket 52: 40%\n  bucket 50: 80%\n  bucket 51: 70%\n  bucket 50: 90%\n  bucket 52: 50%\n  bucket 51: 80%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 52: 60%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  bucket 52: 70%\n  bucket 52: 80%\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\nGetting block 54 of 57\n  Calculating Z arrays for bucket 53\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 54: 10%\n  bucket 53: 10%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 20%\n  bucket 55: 10%\n  bucket 53: 20%\n  bucket 55: 20%\n  bucket 54: 30%\n  bucket 53: 30%\n  bucket 55: 30%\n  bucket 54: 40%\n  bucket 55: 40%\n  bucket 53: 40%\n  bucket 54: 50%\n  bucket 55: 50%\n  bucket 53: 50%\n  bucket 55: 60%\n  bucket 54: 60%\n  bucket 55: 70%\n  bucket 53: 60%\n  bucket 54: 70%\n  bucket 55: 80%\n  bucket 53: 70%\n  bucket 55: 90%\n  bucket 54: 80%\n  bucket 55: 100%\n  bucket 53: 80%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  bucket 53: 90%\n  bucket 54: 90%\n  bucket 53: 100%\n  bucket 54: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\nGetting block 57 of 57\n  Calculating Z arrays for bucket 56\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  Entering block accumulator loop for bucket 56:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 56: 10%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 56: 20%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 56: 30%\n  bucket 57: 70%\n  bucket 56: 40%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 56: 50%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "stderr": "Building a SMALL index\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    2 (66.67%) aligned concordantly 0 times\n    1 (33.33%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    2 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    2 pairs aligned 0 times concordantly or discordantly; of these:\n      4 mates make up the pairs; of these:\n        3 (75.00%) aligned 0 times\n        1 (25.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n50.00% overall alignment rate\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:50:20", "plugin": "core", "name": "end_epoch", "raw_value": "1723229420.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:50:19", "plugin": "core", "name": "start_epoch", "raw_value": "1723229419.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_cxnns4m0.sam v. /tmp/history_bam_converted_to_sam_1oom0jtq.sam )\n--- local_file\n+++ history_data\n@@ -1,7 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n @RG\tID:rg1\tPL:CAPILLARY\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome --interleaved input_il.fastq --rg-id rg1 --rg PL:CAPILLARY\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 8 -x genome --rg-id rg1 --rg PL:CAPILLARY --interleaved input_il.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@8 -T /galaxy/server/database/jobs_directory/000/63/tmp -O bam -o /galaxy/server/database/objects/f/e/3/dataset_fe3fb14b-ce28-48f5-b3c9-ccfc62842796.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\tRG:Z:rg1\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t153\tchrM\t1\t3\t4M23I224M\t=\t1\t0\tCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCCCCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAG\tFB099BFFFBFBBFEF?EFFFB090FFFFFFFFFFD;;.GFFGFGFA0FGFFEFEGGGFBCE;BGHHFFGHGEHFHHHHGFE@ECCDCGGGGGEHFFFGGGGGBHHGFGGGCGHHGGGGGGHGGGGGGHHHDGCFFBHGGGGGHHHHHFHFHGGGHHHHGHGGGGGHHHGGHGHHHHHHHGGHGGHHGGHHHHHHHEHHHHHHHHGGGGHHHHHHHHHHHHHHHHGHHHGGGGGGGGGGFFFFCFFCCCCB\tAS:i:-99\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:23\tNM:i:29\tMD:Z:0G0A0T0C11A56A155\tYT:Z:UP\tRG:Z:rg1\n"], "status": "failure"}}, {"id": "bowtie2/2.4.2+galaxy0-5", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 5, "time_seconds": 12.21169638633728, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "bowtie2/2.4.2+galaxy0-6", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 6, "time_seconds": 43.580833435058594, "inputs": {"library|input_1": {"src": "hda", "id": "f4140e0646e88042"}, "library|input_2": {"src": "hda", "id": "a7e38f82b06b4899"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "4782a17e0d1e6846"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "4782a17e0d1e6846", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:51:14.125945", "update_time": "2024-08-09T18:51:29.546573", "galaxy_version": "24.1", "external_id": "gxy-mr4kl", "handler": null, "job_runner_name": null, "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/d/5/3/dataset_d53a3ba8-7c73-4958-90ca-6f52de3bda68.dat' genome && ln -s -f '/galaxy/server/database/objects/d/5/3/dataset_d53a3ba8-7c73-4958-90ca-6f52de3bda68.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/b/2/d/dataset_b2d985f1-f90b-49dd-b90f-f3969c61c2c6.dat' input_f.fastq.bz2 &&  ln -f -s '/galaxy/server/database/objects/7/8/6/dataset_786014f1-24b8-4ef8-a4da-f4f5c92738ac.dat' input_r.fastq.bz2 &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'   -1 'input_f.fastq.bz2' -2 'input_r.fastq.bz2'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/8/c/d/dataset_8cdcd615-b2c7-4b09-b27d-8002d176a57c.dat'", "user_email": "tests@fake.org", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "false", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 70, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": false, \"input_1\": {\"values\": [{\"id\": 68, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 69, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": false}"}, "inputs": {"library|input_1": {"id": "f4140e0646e88042", "src": "hda", "uuid": "b2d985f1-f90b-49dd-b90f-f3969c61c2c6"}, "library|input_2": {"id": "a7e38f82b06b4899", "src": "hda", "uuid": "786014f1-24b8-4ef8-a4da-f4f5c92738ac"}, "reference_genome|own_file": {"id": "4782a17e0d1e6846", "src": "hda", "uuid": "d53a3ba8-7c73-4958-90ca-6f52de3bda68"}}, "outputs": {"output": {"id": "9537f7e99b611cdf", "src": "hda", "uuid": "8cdcd615-b2c7-4b09-b27d-8002d176a57c"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/d/5/3/dataset_d53a3ba8-7c73-4958-90ca-6f52de3bda68.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\nGetting block 3 of 58\nGetting block 4 of 58\n  Entering block accumulator loop for bucket 1:\nGetting block 5 of 58\n  Calculating Z arrays for bucket 2\n  Reserving size (388) for bucket 3\n  Reserving size (388) for bucket 4\nGetting block 6 of 58\nGetting block 7 of 58\nGetting block 8 of 58\n  Reserving size (388) for bucket 5\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Reserving size (388) for bucket 8\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 8\n  bucket 2: 10%\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 8:\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 7: 10%\n  bucket 1: 40%\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 5: 10%\n  bucket 8: 10%\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 7: 20%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 6: 20%\n  bucket 1: 60%\n  bucket 4: 50%\n  bucket 5: 20%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 7: 30%\n  bucket 4: 60%\n  bucket 1: 70%\n  bucket 6: 30%\n  bucket 8: 20%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 2: 60%\n  bucket 5: 30%\n  bucket 1: 80%\n  bucket 7: 40%\n  bucket 4: 80%\n  bucket 6: 40%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 8: 30%\n  bucket 4: 90%\n  bucket 5: 40%\n  bucket 7: 50%\n  bucket 6: 50%\n  bucket 3: 70%\n  bucket 1: 100%\n  bucket 4: 100%\n  bucket 2: 80%\n  Sorting block of length 355 for bucket 1\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  (Using difference cover)\n  bucket 8: 40%\n  bucket 5: 50%\n  bucket 7: 60%\n  bucket 6: 60%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 8: 50%\n  bucket 2: 100%\n  bucket 7: 70%\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 5: 60%\n  bucket 3: 100%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 5: 70%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 5: 80%\n  bucket 7: 100%\n  bucket 8: 80%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 8: 90%\n  bucket 5: 100%\n  bucket 8: 100%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\nGetting block 9 of 58\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 58\n  bucket 9: 40%\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 50%\nGetting block 11 of 58\n  bucket 9: 60%\n  bucket 10: 10%\n  Reserving size (388) for bucket 11\nGetting block 12 of 58\n  Calculating Z arrays for bucket 11\n  Reserving size (388) for bucket 12\n  bucket 9: 70%\n  Calculating Z arrays for bucket 12\n  bucket 10: 20%\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 9: 80%\n  bucket 10: 30%\n  bucket 11: 10%\n  bucket 9: 90%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 10: 50%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 10: 60%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 10: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\n  bucket 10: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 10: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\nGetting block 13 of 58\n  Reserving size (388) for bucket 13\nGetting block 14 of 58\n  Calculating Z arrays for bucket 13\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  bucket 14: 100%\n  (Using difference cover)\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\nGetting block 15 of 58\n  Reserving size (388) for bucket 15\nGetting block 16 of 58\n  Calculating Z arrays for bucket 15\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 15: 10%\n  bucket 16: 20%\n  bucket 15: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 15: 30%\n  bucket 16: 50%\n  bucket 15: 40%\n  bucket 16: 60%\n  bucket 15: 50%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 15: 60%\n  bucket 16: 90%\n  bucket 15: 70%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\nGetting block 17 of 58\nGetting block 18 of 58\n  Reserving size (388) for bucket 17\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 17\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 58\n  bucket 17: 10%\n  Reserving size (388) for bucket 19\nGetting block 20 of 58\n  bucket 18: 10%\n  Calculating Z arrays for bucket 19\n  bucket 17: 20%\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 19: 10%\n  bucket 17: 40%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 17: 70%\n  bucket 20: 40%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 18: 60%\n  bucket 20: 60%\n  bucket 17: 90%\n  bucket 20: 70%\n  bucket 19: 60%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  bucket 20: 80%\n  bucket 19: 70%\n  bucket 20: 90%\n  bucket 18: 80%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\nGetting block 22 of 58\n  Calculating Z arrays for bucket 21\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 58\n  Entering block accumulator loop for bucket 23:\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 23: 60%\n  bucket 24: 60%\n  bucket 23: 70%\n  bucket 24: 70%\n  bucket 23: 80%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\nGetting block 26 of 58\n  Calculating Z arrays for bucket 25\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 25: 10%\n  bucket 26: 20%\n  bucket 25: 20%\n  bucket 26: 30%\n  bucket 25: 30%\n  bucket 26: 40%\n  bucket 25: 40%\n  bucket 26: 50%\n  bucket 25: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 25: 60%\n  bucket 26: 80%\n  bucket 25: 70%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 58\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 58\n  Entering block accumulator loop for bucket 28:\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 29: 40%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 29: 50%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\nGetting block 31 of 58\n  bucket 30: 10%\n  Reserving size (388) for bucket 31\nGetting block 32 of 58\n  Calculating Z arrays for bucket 31\n  bucket 30: 20%\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 30: 30%\n  bucket 31: 10%\n  bucket 32: 10%\n  bucket 30: 40%\n  bucket 32: 20%\n  bucket 30: 50%\n  bucket 31: 20%\n  bucket 30: 60%\n  bucket 32: 30%\n  bucket 30: 70%\n  bucket 31: 30%\n  bucket 32: 40%\n  bucket 30: 80%\n  bucket 32: 50%\n  bucket 31: 40%\n  bucket 30: 90%\n  bucket 32: 60%\n  bucket 31: 50%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  bucket 32: 70%\n  bucket 31: 60%\n  bucket 32: 80%\n  bucket 31: 70%\n  bucket 32: 90%\n  bucket 31: 80%\n  bucket 32: 100%\n  Sorting block of length 155 for buck\n..\n 20%\n  bucket 23: 60%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 23: 100%\n  Sorting block of length 349 for bucket 23\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 350 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 57\n  bucket 25: 10%\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\nGetting block 28 of 57\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\nGetting block 29 of 57\n  bucket 28: 20%\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 29: 10%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 29: 80%\n  bucket 28: 100%\n  bucket 29: 90%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\nGetting block 31 of 57\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 70%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 80%\n  bucket 31: 10%\n  bucket 30: 90%\n  bucket 31: 20%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 10%\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 32: 20%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 32: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 32: 40%\n  bucket 33: 60%\n  bucket 32: 50%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 32: 60%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  bucket 32: 70%\n  bucket 32: 80%\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\nGetting block 35 of 57\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 57\n  Entering block accumulator loop for bucket 35:\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 36: 10%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 35: 50%\n  bucket 36: 40%\n  bucket 35: 60%\n  bucket 36: 50%\n  bucket 35: 70%\n  bucket 36: 60%\n  bucket 35: 80%\n  bucket 36: 70%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\nGetting block 37 of 57\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\nGetting block 38 of 57\n  bucket 37: 10%\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 37: 20%\n  bucket 38: 20%\n  bucket 37: 30%\n  bucket 38: 30%\n  bucket 37: 40%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 37: 50%\n  bucket 38: 60%\n  bucket 37: 60%\n  bucket 38: 70%\n  bucket 37: 70%\n  bucket 38: 80%\n  bucket 37: 80%\n  bucket 38: 90%\n  bucket 37: 90%\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\nGetting block 39 of 57\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\nGetting block 41 of 57\n  Calculating Z arrays for bucket 40\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 10%\n  bucket 41: 10%\n  bucket 40: 20%\n  bucket 41: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 41: 30%\n  bucket 40: 50%\n  bucket 41: 40%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 41: 50%\n  bucket 40: 80%\n  bucket 41: 60%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\n  bucket 41: 100%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\nGetting block 42 of 57\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\n  bucket 43: 30%\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 40%\n  bucket 44: 10%\n  bucket 43: 50%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 43: 60%\n  bucket 44: 40%\n  bucket 43: 70%\n  bucket 44: 50%\n  bucket 43: 80%\n  bucket 44: 60%\n  bucket 43: 90%\n  bucket 44: 70%\n  bucket 43: 100%\n  bucket 44: 80%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\nGetting block 46 of 57\n  Calculating Z arrays for bucket 45\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 46: 10%\n  bucket 45: 20%\n  bucket 46: 20%\n  bucket 45: 30%\n  bucket 46: 30%\n  bucket 45: 40%\n  bucket 46: 40%\n  bucket 45: 50%\n  bucket 46: 50%\n  bucket 45: 60%\n  bucket 46: 60%\n  bucket 45: 70%\n  bucket 46: 70%\n  bucket 45: 80%\n  bucket 46: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  bucket 46: 90%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\nGetting block 48 of 57\n  Calculating Z arrays for bucket 47\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 47: 10%\n  bucket 48: 20%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 48: 30%\n  bucket 47: 40%\n  bucket 48: 40%\n  bucket 47: 50%\n  bucket 48: 50%\n  bucket 47: 60%\n  bucket 48: 60%\n  bucket 47: 70%\n  bucket 48: 70%\n  bucket 47: 80%\n  bucket 48: 80%\n  bucket 47: 90%\n  bucket 48: 90%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\nGetting block 50 of 57\n  Calculating Z arrays for bucket 49\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  Entering block accumulator loop for bucket 50:\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 10%\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 49: 20%\n  bucket 51: 10%\n  bucket 50: 20%\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 51: 20%\n  bucket 50: 30%\n  bucket 52: 20%\n  bucket 49: 30%\n  bucket 50: 40%\n  bucket 51: 30%\n  bucket 52: 30%\n  bucket 49: 40%\n  bucket 52: 40%\n  bucket 50: 50%\n  bucket 51: 40%\n  bucket 49: 50%\n  bucket 52: 50%\n  bucket 50: 60%\n  bucket 49: 60%\n  bucket 51: 50%\n  bucket 52: 60%\n  bucket 49: 70%\n  bucket 50: 70%\n  bucket 49: 80%\n  bucket 51: 60%\n  bucket 52: 70%\n  bucket 49: 90%\n  bucket 52: 80%\n  bucket 50: 80%\n  bucket 49: 100%\n  bucket 51: 70%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 52: 90%\n  bucket 50: 90%\n  bucket 51: 80%\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\nGetting block 54 of 57\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 20%\n  bucket 55: 10%\n  bucket 54: 30%\n  bucket 55: 20%\n  bucket 54: 40%\n  bucket 55: 30%\n  bucket 54: 50%\n  bucket 55: 40%\n  bucket 54: 60%\n  bucket 55: 50%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 55: 60%\n  bucket 54: 90%\n  bucket 55: 70%\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\nGetting block 57 of 57\n  Calculating Z arrays for bucket 56\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  Entering block accumulator loop for bucket 56:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 56: 10%\n  bucket 57: 30%\n  bucket 56: 20%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 56: 30%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 56: 40%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "tool_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/d/5/3/dataset_d53a3ba8-7c73-4958-90ca-6f52de3bda68.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\nGetting block 3 of 58\nGetting block 4 of 58\n  Entering block accumulator loop for bucket 1:\nGetting block 5 of 58\n  Calculating Z arrays for bucket 2\n  Reserving size (388) for bucket 3\n  Reserving size (388) for bucket 4\nGetting block 6 of 58\nGetting block 7 of 58\nGetting block 8 of 58\n  Reserving size (388) for bucket 5\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Reserving size (388) for bucket 8\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 8\n  bucket 2: 10%\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 8:\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 7: 10%\n  bucket 1: 40%\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 5: 10%\n  bucket 8: 10%\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 7: 20%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 6: 20%\n  bucket 1: 60%\n  bucket 4: 50%\n  bucket 5: 20%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 7: 30%\n  bucket 4: 60%\n  bucket 1: 70%\n  bucket 6: 30%\n  bucket 8: 20%\n  bucket 3: 50%\n  bucket 4: 70%\n  bucket 2: 60%\n  bucket 5: 30%\n  bucket 1: 80%\n  bucket 7: 40%\n  bucket 4: 80%\n  bucket 6: 40%\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 8: 30%\n  bucket 4: 90%\n  bucket 5: 40%\n  bucket 7: 50%\n  bucket 6: 50%\n  bucket 3: 70%\n  bucket 1: 100%\n  bucket 4: 100%\n  bucket 2: 80%\n  Sorting block of length 355 for bucket 1\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  (Using difference cover)\n  bucket 8: 40%\n  bucket 5: 50%\n  bucket 7: 60%\n  bucket 6: 60%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 8: 50%\n  bucket 2: 100%\n  bucket 7: 70%\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 5: 60%\n  bucket 3: 100%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 5: 70%\n  bucket 8: 70%\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 5: 80%\n  bucket 7: 100%\n  bucket 8: 80%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 8: 90%\n  bucket 5: 100%\n  bucket 8: 100%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\nGetting block 9 of 58\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 58\n  bucket 9: 40%\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 50%\nGetting block 11 of 58\n  bucket 9: 60%\n  bucket 10: 10%\n  Reserving size (388) for bucket 11\nGetting block 12 of 58\n  Calculating Z arrays for bucket 11\n  Reserving size (388) for bucket 12\n  bucket 9: 70%\n  Calculating Z arrays for bucket 12\n  bucket 10: 20%\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 9: 80%\n  bucket 10: 30%\n  bucket 11: 10%\n  bucket 9: 90%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 10: 50%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 10: 60%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 10: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\n  bucket 10: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 10: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\nGetting block 13 of 58\n  Reserving size (388) for bucket 13\nGetting block 14 of 58\n  Calculating Z arrays for bucket 13\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  bucket 14: 100%\n  (Using difference cover)\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\nGetting block 15 of 58\n  Reserving size (388) for bucket 15\nGetting block 16 of 58\n  Calculating Z arrays for bucket 15\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 15: 10%\n  bucket 16: 20%\n  bucket 15: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 15: 30%\n  bucket 16: 50%\n  bucket 15: 40%\n  bucket 16: 60%\n  bucket 15: 50%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 15: 60%\n  bucket 16: 90%\n  bucket 15: 70%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\nGetting block 17 of 58\nGetting block 18 of 58\n  Reserving size (388) for bucket 17\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 17\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 58\n  bucket 17: 10%\n  Reserving size (388) for bucket 19\nGetting block 20 of 58\n  bucket 18: 10%\n  Calculating Z arrays for bucket 19\n  bucket 17: 20%\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 19: 10%\n  bucket 17: 40%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 17: 70%\n  bucket 20: 40%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 18: 60%\n  bucket 20: 60%\n  bucket 17: 90%\n  bucket 20: 70%\n  bucket 19: 60%\n  bucket 18: 70%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  bucket 20: 80%\n  bucket 19: 70%\n  bucket 20: 90%\n  bucket 18: 80%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\nGetting block 22 of 58\n  Calculating Z arrays for bucket 21\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 21: 20%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 58\n  Entering block accumulator loop for bucket 23:\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 23: 20%\n  bucket 24: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 23: 60%\n  bucket 24: 60%\n  bucket 23: 70%\n  bucket 24: 70%\n  bucket 23: 80%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\nGetting block 26 of 58\n  Calculating Z arrays for bucket 25\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 25: 10%\n  bucket 26: 20%\n  bucket 25: 20%\n  bucket 26: 30%\n  bucket 25: 30%\n  bucket 26: 40%\n  bucket 25: 40%\n  bucket 26: 50%\n  bucket 25: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 25: 60%\n  bucket 26: 80%\n  bucket 25: 70%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\nGetting block 27 of 58\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 58\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 58\n  Entering block accumulator loop for bucket 28:\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 29: 40%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 29: 50%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\nGetting block 30 of 58\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\nGetting block 31 of 58\n  bucket 30: 10%\n  Reserving size (388) for bucket 31\nGetting block 32 of 58\n  Calculating Z arrays for bucket 31\n  bucket 30: 20%\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 30: 30%\n  bucket 31: 10%\n  bucket 32: 10%\n  bucket 30: 40%\n  bucket 32: 20%\n  bucket 30: 50%\n  bucket 31: 20%\n  bucket 30: 60%\n  bucket 32: 30%\n  bucket 30: 70%\n  bucket 31: 30%\n  bucket 32: 40%\n  bucket 30: 80%\n  bucket 32: 50%\n  bucket 31: 40%\n  bucket 30: 90%\n  bucket 32: 60%\n  bucket 31: 50%\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  bucket 32: 70%\n  bucket 31: 60%\n  bucket 32: 80%\n  bucket 31: 70%\n  bucket 32: 90%\n  bucket 31: 80%\n  bucket 32: 100%\n  Sorting block of length 155 for buck\n..\n 20%\n  bucket 23: 60%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 23: 100%\n  Sorting block of length 349 for bucket 23\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 350 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 57\n  bucket 25: 10%\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\nGetting block 28 of 57\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\nGetting block 29 of 57\n  bucket 28: 20%\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 29: 10%\n  bucket 28: 40%\n  bucket 29: 20%\n  bucket 28: 50%\n  bucket 29: 30%\n  bucket 28: 60%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 29: 80%\n  bucket 28: 100%\n  bucket 29: 90%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\nGetting block 31 of 57\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 70%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 80%\n  bucket 31: 10%\n  bucket 30: 90%\n  bucket 31: 20%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 10%\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 32: 20%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 32: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 32: 40%\n  bucket 33: 60%\n  bucket 32: 50%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 32: 60%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  bucket 32: 70%\n  bucket 32: 80%\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\nGetting block 35 of 57\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 57\n  Entering block accumulator loop for bucket 35:\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 36: 10%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 35: 50%\n  bucket 36: 40%\n  bucket 35: 60%\n  bucket 36: 50%\n  bucket 35: 70%\n  bucket 36: 60%\n  bucket 35: 80%\n  bucket 36: 70%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\nGetting block 37 of 57\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\nGetting block 38 of 57\n  bucket 37: 10%\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 37: 20%\n  bucket 38: 20%\n  bucket 37: 30%\n  bucket 38: 30%\n  bucket 37: 40%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 37: 50%\n  bucket 38: 60%\n  bucket 37: 60%\n  bucket 38: 70%\n  bucket 37: 70%\n  bucket 38: 80%\n  bucket 37: 80%\n  bucket 38: 90%\n  bucket 37: 90%\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\nGetting block 39 of 57\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\nGetting block 41 of 57\n  Calculating Z arrays for bucket 40\n  Reserving size (388) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 10%\n  bucket 41: 10%\n  bucket 40: 20%\n  bucket 41: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 41: 30%\n  bucket 40: 50%\n  bucket 41: 40%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 41: 50%\n  bucket 40: 80%\n  bucket 41: 60%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\n  bucket 41: 100%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\nGetting block 42 of 57\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\n  bucket 43: 30%\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 40%\n  bucket 44: 10%\n  bucket 43: 50%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 43: 60%\n  bucket 44: 40%\n  bucket 43: 70%\n  bucket 44: 50%\n  bucket 43: 80%\n  bucket 44: 60%\n  bucket 43: 90%\n  bucket 44: 70%\n  bucket 43: 100%\n  bucket 44: 80%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\nGetting block 46 of 57\n  Calculating Z arrays for bucket 45\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 46: 10%\n  bucket 45: 20%\n  bucket 46: 20%\n  bucket 45: 30%\n  bucket 46: 30%\n  bucket 45: 40%\n  bucket 46: 40%\n  bucket 45: 50%\n  bucket 46: 50%\n  bucket 45: 60%\n  bucket 46: 60%\n  bucket 45: 70%\n  bucket 46: 70%\n  bucket 45: 80%\n  bucket 46: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  bucket 46: 90%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\nGetting block 48 of 57\n  Calculating Z arrays for bucket 47\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 47: 10%\n  bucket 48: 20%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 48: 30%\n  bucket 47: 40%\n  bucket 48: 40%\n  bucket 47: 50%\n  bucket 48: 50%\n  bucket 47: 60%\n  bucket 48: 60%\n  bucket 47: 70%\n  bucket 48: 70%\n  bucket 47: 80%\n  bucket 48: 80%\n  bucket 47: 90%\n  bucket 48: 90%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\nGetting block 50 of 57\n  Calculating Z arrays for bucket 49\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  Entering block accumulator loop for bucket 50:\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 10%\nGetting block 52 of 57\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 49: 20%\n  bucket 51: 10%\n  bucket 50: 20%\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 51: 20%\n  bucket 50: 30%\n  bucket 52: 20%\n  bucket 49: 30%\n  bucket 50: 40%\n  bucket 51: 30%\n  bucket 52: 30%\n  bucket 49: 40%\n  bucket 52: 40%\n  bucket 50: 50%\n  bucket 51: 40%\n  bucket 49: 50%\n  bucket 52: 50%\n  bucket 50: 60%\n  bucket 49: 60%\n  bucket 51: 50%\n  bucket 52: 60%\n  bucket 49: 70%\n  bucket 50: 70%\n  bucket 49: 80%\n  bucket 51: 60%\n  bucket 52: 70%\n  bucket 49: 90%\n  bucket 52: 80%\n  bucket 50: 80%\n  bucket 49: 100%\n  bucket 51: 70%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 52: 90%\n  bucket 50: 90%\n  bucket 51: 80%\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\nGetting block 54 of 57\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 20%\n  bucket 55: 10%\n  bucket 54: 30%\n  bucket 55: 20%\n  bucket 54: 40%\n  bucket 55: 30%\n  bucket 54: 50%\n  bucket 55: 40%\n  bucket 54: 60%\n  bucket 55: 50%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 55: 60%\n  bucket 54: 90%\n  bucket 55: 70%\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\nGetting block 56 of 57\n  Reserving size (388) for bucket 56\nGetting block 57 of 57\n  Calculating Z arrays for bucket 56\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  Entering block accumulator loop for bucket 56:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 56: 10%\n  bucket 57: 30%\n  bucket 56: 20%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 56: 30%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 56: 40%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      8 (8.25%) aligned discordantly 1 time\n    ----\n    89 pairs aligned 0 times concordantly or discordantly; of these:\n      178 mates make up the pairs; of these:\n        153 (85.96%) aligned 0 times\n        25 (14.04%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n23.50% overall alignment rate\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:51:17", "plugin": "core", "name": "end_epoch", "raw_value": "1723229477.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:51:16", "plugin": "core", "name": "start_epoch", "raw_value": "1723229476.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_1f3llwy9.sam v. /tmp/history_bam_converted_to_sam_el004sex.sam )\n--- local_file\n+++ history_data\n@@ -1,36 +1,43 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/anton/miniconda2/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -1 /tmp/32192.inpipe1 -2 /tmp/32192.inpipe2\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 8 -x genome -1 /tmp/gxy-mr4kl-9dz8l_54mate1 -2 /tmp/gxy-mr4kl-9dz8l_54mate2\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@8 -T /galaxy/server/database/jobs_directory/000/70/tmp -O bam -o /galaxy/server/database/objects/8/c/d/dataset_8cdcd615-b2c7-4b09-b27d-8002d176a57c.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t40\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tAS:i:-45\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-41\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:18422:19051\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t-223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t-216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I209M5I5M1I5M\t=\t1\t223\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tAS:i:-143\tXN:i:0\tXM:i:9\tXO:i:3\tXG:i:28\tNM:i:37\tMD:Z:0G0A1C68A140A0A4T0G1T0\tYS:i:-135\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t1\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tAS:i:-138\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-135\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1106:6455:17124\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBAAFABDBBFGGGGGGGGGGHHHGHHGHHHHHHHHHGHHGHHGHHHGHGGGEGHHHHHHHHHHHHHGHHHGHHHGGHGGHHHHHHHHHHHHHHHHHHGHHHHHHHHGHHHHHGGCFEHHHGFHHHHGHHFFH?GGHHHHGHGHGHHCFGGGGGGGFFFFFFFFFFFFFFFFFFFFADFA?.FEFAFFFEFFFFFFFFFFFFDABFBBFFFFFFFFEFFBFFFFFFFFFFF/FFBFFFFFFADE>BFFF9\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1113:21679:18011\t73\tchrM\t1\t0\t201M1I9M1I22M1I3M3I10M\t=\t1\t0\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGAGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATATGTCTTTGATTCCTGCCTCTTCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAACTGTCTCTTATACACATATCCACGCCCACGAGACTAAGGCGAAGTTCATT\tAA>1>11F1D1DDFFFFGGG1FH3GHGHGHGHFHEC?EC0B1FBGFB1GHHH21AF2HH2FEGEHAE10AAE/>/FFHE?/E/?E1@EFFH?E@/EGGG//B11B//<@@C0F/<0<FFDGGCC?FF221<BDD11@<11@DDCGEF1<111F1<F1FBGHGHCF-CHHFA./</0CGHF<0CC/;C-:-;;09;FFBFBBFFBC0FFFGGFC0009C00090/-:--9--;-;AFFE;/99-9--/;///\tAS:i:-126\tXN:i:0\tXM:i:27\tXO:i:4\tXG:i:6\tNM:i:33\tMD:Z:67G4A26G27C19A53A2G1G4T0T0A2T0A0A0T0G1T0T0G0T1G2C4T2T0A0A2A1\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1113:21679:18011\t133\tchrM\t1\t0\t*\t=\t1\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCTGTCTCTTATACACATCTGACGCTGCCGACGACCGAGCTAGTTGAGATC\tBCCCBFFFFFFFGGGGGGGGGGHHHHHFHHHGHHHGFGHGGHGGHHHHHHGHHHHHHHGGGGFHHHHHHEGHHHHHHHHFGGFCGEHFHFGEGHHHFGGGGGHHHGGGEHGGGGGHHHHHHGDCCCGHHHHDGGGGCD/FCC-><FGFGEHEBDF0DGFFFFGGFFHCE.;.A;CF0;BFBFFGF/9C0;0CFGGF0F09FGGGFFFBBFEFFFB0FFEF0;09.:..9--::---;;-;;F00000:.00\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1113:25528:14016\t165\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBAABCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHGHHHHHHHHHGGGGHHHHHHHHHFHHHHHHHHHHHHGGGGGHHHHHHHGHHHHHHHHHHGGHHHHGHHGGHHHEGGGGGHHHHHHHHHGHHHHHGHHHHHGGHGHGHHGGGGGGGGGFEACFFFFFFFFFFFFFFFDFFFAFFFFBFAB@EFAAEFFFFF.ACF.BBFFEBFFFEB;FFFFFFFA/BFBFBBBFFFBFFFFFED.>DFFF.\tYT:Z:UP\n+M01368:8:000000000-A3GHV:1:1114:15066:16302\t99\tchrM\t1\t23\t4M19I228M\t=\t1\t241\tTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAACGGTTGTTAATTAATTATTGCTTGTAGGACA\tBBBBAFFBDFBFBGGGGGFGGGBGFFFHGFHHGFFFHGHHHGHHHHFFHHHGHGC?AEFFHEFBFFFGHHHHH1FDGFFHGHGHFEGCGC-<<AHHHGGGGGGGFHH0GHFCCCADGGG?.9/A-???DGGFFF.9F9/EE-;;BBBFFBFFFFFFFFFEFFFFBFFBBFFFFF/BFFBFFFFF-DBFFF;/BFF//BB//9/BEA---9:BFFFFFF/F/.;.:@9.BBFF/;BFF/;/////9/////.\tAS:i:-94\tXN:i:0\tXM:i:8\tXO:i:1\tXG:i:19\tNM:i:27\tMD:Z:0G1T0C68A128A1T0G13A13\tYS:i:-52\tYT:Z:CP\n+M01368:8:000000000-A3GHV:1:1114:16639:15258\t101\tchrM\t1\t0\t*\t=\t1\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGCGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTCCAATATTACAGGCGAACATACTTACTAAATTGTGT\t11>>ABFFFFFFGGCGC1BBF1GHHHBHHHHGFHGH1A100AA/GGEHGFBAA1FFD2FHHHHECG2F1BB/E0FC/A>EE/FGGFGEF1EGBBEHHCGGGHBGEHFHE0B?E--;C?CCGGG@A@GBFBBBB09?@??A-AB--ABE@=-=-9AE9A;FFFFFE=9-//;//;9FF/////;;///9B///;/B////9FFBB;--A@-;/9;9-:-/;;FFFE9BF?@;-9-99/B9F/://///99/;\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBABCBFBACCCFGGGGGGGGGGGHHGHHGHHHHGFGCHGHHGFFHEHHHHGGGGFGHHHHHHHHHHHHGHHHHHHHGGGGGHHHFFHHGHHHHHHHHHHHEHHHHHHHGHHGHGGEGEGHHHFHHHHGHHHHHHGGHHHHHGHGEGEHCGG-BGDFGFFFFAFFDFFFFEFFCFFDDFFFFFFFEC>;>=EF?AEFFFF;9;=DAFFFFBBFFFBFFF//;BFB.:FBFFBB/BFFFF/BFFE?EFAFEF9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tABA?AFBAB2>AFGGGGFFGD5GGHGFFHGHEGGGGHHHHFFHH5FHGHHHFFHEFHHHHHHGGHHHHHGFHGGHGGGGFHGGGFBHHHFGEGHHHHGHGGGGECEHHFHHGHHFFHFGGGHHHEGHDGHHGHGHFHHHECGCBCHHGFHHFHD1GFHEFHEF?GDCFFEFE0A@;@>BD/9BFBBBBFDFFFF99D=?>DDBFF-AFFEBB9BBEFEFAFFF//-@---;;FBBFBFB///;99999BA9\tYT:Z:UP\n********\n*SNIP *\n********\n M01368:8:000000000-A3GHV:1:1110:16700:6843\t141\t*\t0\t0\t*\t*\t0\t0\tGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTCTGTCTCTTATACACATTTGTCGCTC\tCBCCDFFFFFFFGGGGGGGGGGHHGHHHGGHFHHHGGGGGHHHHHHHHHHGHHHHHHHHHHHGGHGGHHHHHHHGBGFFHHHHHHGHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHFHHHHGHCG/GGHHGGGGGGAFGEEADAGGDFFFF00D>CFDDFFFB?AF?B;-@>.FEDFFFFF0BF-BDFFFFE00B0BF0FFFF:BFA0B0:BBFBBFFFFF0B0:000<00<BFBB0<00000<99.\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t77\t*\t0\t0\t*\t*\t0\t0\tATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGGGATAGACCTGTGATCCATCGTGATGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAAAAAAAAAATAG\tAABBBFFFFFFFCGGGCGGGGGGHHHHHGFHHHHHHGHHHGGGGGFHHGHFGGHHHGGFGGGHHGGGGGHHGGGGHGGHHHGGGGGGHHGHGDGGGGGGGGB/A<GFHFHHHGHBBGFEGGGGHFFFEF/EEGGHGGFEHFHHBA.<ADFFHFHB/CCGHFEFHHGHGEFFGGGGGFFFGGFGFFBFFGGBFGG??DGG?@9-ADFFFFB/@BD;./BFE?BFE/>99FE//BBFFF.9/FF?DA=@9./9\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1110:18014:7856\t141\t*\t0\t0\t*\t*\t0\t0\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGTAGAGCTCGGGGGTCGCCGTGTATTTTTACAAAAAA\tCDDDBFCDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHGHHHHHEGHHHHHEHGHGHHGGGCCGGHGHGCGGGGDHHHHFHGGGGGGGGGGGFGGFGAC-EFEGGGFFFGFF;DFFFBFFFFFFFFFFFFFFFFFFFEFFFBFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFB?DFF---;--D;9AFB0B:B0::00;0.;----.--.-9-:/00::090:0;..:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t77\t*\t0\t0\t*\t*\t0\t0\tATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTCCGAGCCCACGAGA\tABAAAFFFFFFFGGGGGGGGGGGHHGG4FDFGFGGCGGGHGHG?EGHEGFFDHFHHHHGGFE@EHHGEEEGFCCEFFGFG/EHHHHHBFBGGHFHFHEHGHEFGGGED/EFDEFFEHHBGHHCFFFDFGGHHGFFFHHHHGFG>0<0DGGFHBGHFBDFGHGFFGGAGHHGCGBHFFHHHFFFBFGGGGF/:FFFCB9F9FF0FEFE?FF0BED-D.//BF9//BBFF/BFFFEFFFFED-DCFF?.:BFA\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tABBBBFBBBBBFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHDGHHHGGGGHHHHHHHHHHHHGHHHHHHHHHGGGGGHHGHHHHGFGFHHHHHHHHGHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHGFHHHHHGFGHGHHGGGGFCGFGFFFFAFFFFFFFFFFA;BADFFFAFFFFFFFFFEFFFEFFFFFFF;FDBFFFFFFFFFFFFFFFFF/BFF/BFFFEBFFFEFFFFFFFFF@B@-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tAA3AAFFFFFFFGGGFGFFGGGGHGH4AGGGFHHCGEE2FGHHHHHHHHHHGFHGF53FHEGGFAF5CFHHGGFGHFHHGGHHHCHHHHHHHFHHGH?EEEG1FFFEHHFHFGGHHGG?F4FBGHGHCHEF0//-9--;0CFGG?@BGDGFFFFEFBBBDA?FFBFFFF=B;-9.AA9EFFFF/;9BD.//;9/9/B:/:BFBFFBFFF/B:BFF//;/B/FFFBFF.A-BFFFBA/F//BFFFBF/;/A-\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGACAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTA\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHCHHGDGGGGHGGHHHHHHHHGHGHHHGGGGGHFHHHHFHHHFFHHHHHFGCGGEHFHHFGGHFHGGGGGGHHFEEEAFEFFDFHGHHHHGGGGGGGHH0DGGGGCGHCC-<CCBGHHHGEFFFFHH.C/<AEGHHEG.EEA0GE0:FB0CFGF:A?FFBF??FG0B;FGGGGFGE?BBF;BFBFFFF/F/B?DDF.;.;:ADD.BA/BBFFB:BFE/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t77\t*\t0\t0\t*\t*\t0\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGCGGTGTCCACGCAATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\t1>>1AAFFFFFBGGFE1EEEEGGHGHHH2FGHHHFGFGHGCFGGGEFHGGEGGHHHHGHEFBFEGHHHGHHBEHHHHGHGFHHHGGGGHHEGGGGHHHGFHGHHHH1FHHG?G/AGF1GBFGEFFHF2FDD0FG<GDHBFDGFFCGH//B//?0GFFGFGGHHHFHFB.=1FDFB?FGH.C/.-:::CH0;CAB@-.;0CGFFFGG--9.A@GB>--99@=---AAABA-BF/B?A@F-9BBFF//BB/9/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t141\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATTGCGTGGACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tABBB>FFFFFFFGGGGGGGGGGHHHHHGHHHHGHHGGHHGGHGGHHHGHHHHFHHGHHAFGGGHHHHHGHHHHFHFHHHHHECGGGHGHHHEFHFHGGGGGGGGFGFFGFFEFGEGHHHGHHGGDGGGHGFGGGGGGGGE@GCGGHHHGHHHHHGHHHHFHHGEGFFEGCE.ECCECEHCGGFFE/AABFFG0CFE0BFFF9CFGG.F/BBBFFGFGGGFFFFFFBFEDAEFFFFFBFFFFFFF0;FEBF:\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTT\tAAABABBBBBBFGGGGGGGGGGHGHHGHGHHHHHHHHHGHHHGGHDGHHHGGGGHHHHHHHHHHHHHHHFHGHHHHGGHGGHHHFHHHHHCGHFFHHHHHHHHHHHHHGHGEFGAEEEEHHGHHGHGHHHHHHHGHHHHHHGHGHFFBC/BA?BGGGFFFFFFFFFFFFFFFC-@DDFFFFFFFEFAFFFFFFBFBFFFFFFFFFFFFFFFFBFF->@FFFFFFFFFFBFBFAD--.99;A?////:.9A.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t141\t*\t0\t0\t*\t*\t0\t0\tGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCAAGTGTAGTGCTCGGGGGGG\tBBCCBFFCCCCCGGGGGGGGGGGGGGHHHHHHGGGGGGHHFHGGGGGFGHGGGGGGHHHHHHHHHHFHHHHFHGFFHHGF?ECEFFFFFFHHHHHH?FHHHHHHHHHGFHHHHHHGGGFGHHHHFHHHHHHHHHHGGGFGFGCGGGGHHHHHHHHHHHGGFFHGHHHHHFFHFCGFHCCGHGHCGGHG?DGGGGGFBBFGFBFBBBGGGB0000;CD?DFFAFF9=--;...://;////////.------\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGGGCTGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCTTGAAGTAGGAACC\tAABABFFFFFFFF4GGGGEBGEFGHGGHGHGHHHGGHFBGFGGGGGHHEFHGEHFHFHEHHHHHGCGGGHFHHCFGHE@1EEEFFGB?EEEEHBGGGCHHGHHBEE@>EAHHFAEBDGGGCEFF?CEGFFHHHHHFHHHFHGHCGCAHHF<..C.D=0CD.GFHHHG.CAGHC:CHB0GGGFFB0:CFA.A-;9.;000CBBFFBFGA.9AA;A;EDDE.ABBFFFF9;BEFFF/BF//9/B//9:B//..\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBBFBBBBBFGGGGGGGGGGHFHHHHHHHHHHHHHHGHHHHGHFHHHGEEGGHHHGHHHHHHHHHHHHEHGHHGGGHGGHGHHHHHGHHHHGHHHHHHHHHHHHHHGHHHHHGEGCGHHHHHGHHHHHHHHHHHHHHGHFFGHGHHGGGDACDFFFFABFFFFFFFFFFD-BC?DA9.DFFBEA==B=?F.;ABBFBFEF-DAF/BFF9/FFFBB/9BFFFFFFF/BFBBFFFFFFF/9FEA?--B/;.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t77\t*\t0\t0\t*\t*\t0\t0\tCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGA\tAABBBBFFFFFFGGGFGGGGGGHHHGGHGGHHHHHHHHHHHGHHGGGGGHHHHHHHHHHHHHHHHHHGGCGDHHHHFGGHHHGGGGGFGGHGGGGHHGGGGHHHHHHGGGGGGHHGGGGDGGFGHGGFCDCHHHHGHHHHGHHFAGFGGEHFGEG.C<EGCECEFCFFHBGHE:GHHGFF0FFFB0CFGGGGAGFFF0;;FFGGGFFGFFCDD.DEFBEDD?9FFFFFFFFFFFFFFF/B./FB///;BF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t141\t*\t0\t0\t*\t*\t0\t0\tGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATT\tBBBBAFFFFFFFGGGGGGGGGGFGHHHHHGHHHHHHHHHHHHCGHHHHHHHGHHHHHHDGHHGGAECHHGHHHHHHHGHHHGHGFHHHHGGHGGHHFHHHHHHFHHHHHHHHH2GHHHHGHGHHFHHGGFGGGHHGHHHHHFHHHHEFHHHHEFGFFHGEHCFGDFDFFFFFCFFFFFFFFFFFFFAFBFFDFFFFFFFFADCF?9?EFBFB9EF-A.;BFFFFFFFBFFFFFFFFFFFFBFFFFFFFFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t77\t*\t0\t0\t*\t*\t0\t0\tGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGCTACAGTTCACTTTAGCTACCTCCAAGTGTTATG\tAA?AAFFFFFFFGGGGGFBFGGGGGGH5GHFEDHHGGGGCGFBGH?AEEHFFEEGHGHHHHGGG?0EHGHHGGGGGC?GEE/EE?GHHHGBHFHHHHHHGHHGHHHGGGCG/A@<FGGHHHHHHHFF/GFDGHHHHHHGFFFGHGGHABGHFHHHHHFHEGDGHGDDEEHHBEDDEGFGHGBFFBFFEGGGEFGFGFB000;F0F;FGGEGGEFFF;-.9//B///B9FFFFF/BFFB/:.BB//;FBFFF\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t141\t*\t0\t0\t*\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTGGAT\tCDDDBFFFFFFFGGGGGGGGGGHHHHHGGHHHGHHHGHHGGGGEHHGGHHHHHHHHHHHHHHGHHGHHHHHGGHHHHHFHHHHGCDCGHHHHHHHHEHHHGHGHHHGFHGGHGGHHHHHHHHFHHHFHHHGHHHHHHHHHFGGHHHHGGGEGAFHHGHHGGHHHHGHFBGFHGHGHGHGGHGGF@DAFEFBECAB=A.0BFFFEDF=A9.@D.-AAFFFA-:-..:.9/0:;0..-..0000::BFB09::\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t77\t*\t0\t0\t*\t*\t0\t0\tTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGA\tABBBBFFFFFFFGGGFGGGGGGHHHGHHGGHBGHGAGFFCAFGHGFFGHHGFHHHHHGGGGGHGHHHHHHHHE3BFFHHHGG0EDF@GHFFGGGHGGGGGGGGGGGGGHHGGEEFHGFHHDDG@DGGGHHGDGGGGGHGG?CF?HHGHHHGHGHHHFFHGGGHHHHGGCD.;0<C;CGGGGEFF/.;0;FFFBF/0;0CFGFFB..9B/;0CBFFBBFFFFBAC?DED9;B9AD;.FFFB/B/;FBA/B//\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBBBBCFCCCCCFGGGGGGGGGGHHHHHHHGHHHHHHHHGHHHHGHDGHHHGGGGHHHHHHHHHHHHHHHGHHHHHGGGEGGHHHHFHHHHHHHHHHHHHHHHHHHHHHGHHGHHGGGGGHHHHHHHHHHHGHHHFHHHHHHGHGHGHGGGGCGGFGGFFFFFFFFFFFFFBFFFFFFFFFFFFFFAFFFFEAEFFFFFFFFFFF9BFFBFFFFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFADAB-/BF.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t77\t*\t0\t0\t*\t*\t0\t0\tCGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTCTGATCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAACAAACACACATCCAGA\t>A33>FFFFFF@FFFGGGGFGGD4EGGGGGHHGFFGHFGGHHHFEFHECFHHHEHGAGBCCGCCEGGHGHEGFBFHFHHHHGGGHFHGHEGGGFEGEGG??@DBGHGGC-@FFGHFHFHB-??DA-DD@9:BEBG@B?E?A.ABBFBFA??F.FF/BFFB/B9B/9;BF9FF9FFFFFFFFFFFFFF?BB?;9EE;-;DDB9//;B-B@;ABFFEFFFF/-.9A.;//9/BF./B/..9.9:...//////\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tBCCDDFFFFFFFGGGGGGGGGGGHHHHHGGHHHGGGCGGHGHGGGGHHGGGGHHHHHHGGGEGGHHHFGGGGG?E1FE?/EEHHHHHGHHGHHHHGHFHGHGHHGDGGFG2FF2?GHHHHHGCCCFHGHGHHHHGHHFEHHFGHHGHH<1=DGHHHGHHGHGAGAEEDG.CGCGHC0CGBFHGFBBF0ABDDEFF@?--:BB@.;:BF;0.0:0.0:000:BF.-.------.9/;000::0;0:--.000\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tAABCCFFFFFFFGGGGGGGGGGHHHHHHHFHHHHGHHGHHGGGHGGHHHHHHHGHHHHHHGGGGGHHFHHHFGHHGGFHHHHHGGGGGHHHGHGGHHHGGGGGGHGHGGGGHHGGGGHHHHHEGDDFGFFFHHGGGGGCDAFCFGFDHHHHGGHGHHHHHHBCGEHHHHGGHG.ACGEHGG0CBFFF:A;BB0;09CGF00CFFFE0AA?//CFFFFFFFFFFFFFFFBEF;A.-=A--:BBFB90;;FE.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tCCCCCFFCCDCCGGGGGGGGGGHHHHHHHHHGGGGGHHHHHHHHHHHHHHHHHHHGHHHHHHHGHHHHFHFHHHGGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGGHHHFHHHGHHHHHHHHHHHHHHHHHHGHGHHHGGGFGHHHHHHHHFHHHHHF?1FHHGHGHGHGHHGGFFFFDBFBE;BCC.:BFFFFFFFFFFFFFF;AFFFFF-=-.AEDEFFFFF..9A;9FFFF0FFFFE00FFF0:BA.\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tAABBBFFFCCCBFGGGGGGGGGHHHHHHHHGGGGGGHHHG3FFHHHFGFGGGHHHGGGEHHGGGGHHHHHHGGGGGGHGHGGGGGGGDEGGGGEGGFHHHHHHHHHHHHGGGFGEHHGGFDGGGDFFGFHHHHGFCFHHHHHEFHFHGGFFGHHGGGHHHHDGHHHFHHHFFFFGFGGG.EFGGGGFGEBFGGGFGFGGGGFFBFGGBBFFFFFB/FEFF?///;A::AABBFFFBFFFFFFFFFBFFFF/\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tCCCCBFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHEHIHHGGGGHHHHHHHHHHHHHGHHHHHHHHGGGGGHHFHHHHHBGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHGHHHHHHHHHHHHHHHHHGHGHGHHGGGGCFFFFFFFFFFFFFFFFFFFFFFFFFF.CFFFFAF=D=EAEFFF0B:0AF-DAFBFFFFFFFFFBFFFFFFFFFFBFFFEFF9B900B0\tYT:Z:UP\n"], "status": "failure"}}, {"id": "bowtie2/2.4.2+galaxy0-7", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 7, "time_seconds": 41.36860251426697, "inputs": {"library|input_1": {"src": "hda", "id": "452099776231715a"}, "library|input_2": {"src": "hda", "id": "c745c6fdd4faf93f"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "ec6f8f50eefa05ee"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple"}, "job": {"model_class": "Job", "id": "ec6f8f50eefa05ee", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:51:57.086684", "update_time": "2024-08-09T18:52:11.052781", "galaxy_version": "24.1", "external_id": "gxy-rd75s", "handler": null, "job_runner_name": null, "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/3/d/a/dataset_3da5ce4c-39f4-492e-8564-fce119d446e4.dat' genome && ln -s -f '/galaxy/server/database/objects/3/d/a/dataset_3da5ce4c-39f4-492e-8564-fce119d446e4.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/c/9/3/dataset_c93898fd-50e4-49b2-836b-e42c7d5ea49c.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/2/2/a/dataset_22a3c7a6-125c-4557-8c4d-d3f3a1b275a5.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                 | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O bam -o '/galaxy/server/database/objects/9/3/5/dataset_935123ad-fd4b-4fad-9a17-b17b704822e2.dat'", "user_email": "tests@fake.org", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "false", "sam_options": "{\"__current_case__\": 1, \"sam_options_selector\": \"no\"}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 74, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": false, \"input_1\": {\"values\": [{\"id\": 72, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 73, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": false}"}, "inputs": {"library|input_1": {"id": "452099776231715a", "src": "hda", "uuid": "c93898fd-50e4-49b2-836b-e42c7d5ea49c"}, "library|input_2": {"id": "c745c6fdd4faf93f", "src": "hda", "uuid": "22a3c7a6-125c-4557-8c4d-d3f3a1b275a5"}, "reference_genome|own_file": {"id": "ec6f8f50eefa05ee", "src": "hda", "uuid": "3da5ce4c-39f4-492e-8564-fce119d446e4"}}, "outputs": {"output": {"id": "5e829ef9edecc74a", "src": "hda", "uuid": "935123ad-fd4b-4fad-9a17-b17b704822e2"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/d/a/dataset_3da5ce4c-39f4-492e-8564-fce119d446e4.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\nGetting block 3 of 58\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (388) for bucket 3\nGetting block 4 of 58\nGetting block 5 of 58\nGetting block 6 of 58\nGetting block 7 of 58\nGetting block 8 of 58\n  Calculating Z arrays for bucket 3\n  Reserving size (388) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Reserving size (388) for bucket 5\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  bucket 1: 20%\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 20%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 2: 40%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 1: 50%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 2: 50%\n  bucket 8: 20%\n  bucket 6: 30%\n  bucket 4: 30%\n  bucket 5: 30%\n  bucket 2: 60%\n  bucket 7: 20%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 8: 30%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 2: 80%\n  bucket 3: 50%\n  bucket 1: 70%\n  bucket 8: 40%\n  bucket 4: 50%\n  bucket 7: 30%\n  bucket 6: 50%\n  bucket 2: 90%\n  bucket 5: 50%\n  bucket 3: 60%\n  bucket 8: 50%\n  bucket 1: 80%\n  bucket 4: 60%\n  bucket 2: 100%\n  bucket 6: 60%\n  Sorting block of length 165 for bucket 2\n  bucket 5: 60%\n  bucket 7: 40%\n  bucket 3: 70%\n  bucket 8: 60%\n  bucket 4: 70%\n  bucket 1: 90%\n  bucket 6: 70%\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 4: 80%\n  bucket 8: 70%\n  bucket 3: 80%\n  bucket 7: 50%\n  bucket 1: 100%\n  bucket 6: 80%\n  bucket 4: 90%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 8: 80%\n  bucket 3: 90%\n  bucket 4: 100%\n  bucket 6: 90%\n  bucket 7: 60%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 8: 90%\n  bucket 3: 100%\n  bucket 6: 100%\n  Sorting block of length 370 for bucket 3\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 5: 100%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\nGetting block 9 of 58\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 58\n  Entering block accumulator loop for bucket 9:\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\nGetting block 12 of 58\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 30%\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 11: 80%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\nGetting block 13 of 58\n  Reserving size (388) for bucket 13\nGetting block 14 of 58\n  Calculating Z arrays for bucket 13\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\nGetting block 15 of 58\n  Reserving size (388) for bucket 15\nGetting block 16 of 58\nGetting block 17 of 58\n  Calculating Z arrays for bucket 15\n  Reserving size (388) for bucket 16\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 16\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 17: 10%\n  bucket 16: 20%\n  bucket 17: 20%\n  bucket 15: 20%\n  bucket 17: 30%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 17: 40%\n  bucket 15: 40%\n  bucket 16: 40%\n  bucket 17: 50%\n  bucket 16: 50%\n  bucket 15: 50%\n  bucket 17: 60%\n  bucket 16: 60%\n  bucket 15: 60%\n  bucket 17: 70%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 17: 80%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 17: 90%\n  bucket 16: 90%\n  bucket 15: 90%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  bucket 16: 100%\n  (Using difference cover)\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 58\n  bucket 18: 10%\n  Reserving size (388) for bucket 19\nGetting block 20 of 58\n  Calculating Z arrays for bucket 19\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 18: 30%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 18: 40%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 18: 50%\n  bucket 20: 30%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 20: 40%\n  bucket 18: 60%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 20: 50%\n  bucket 18: 70%\n  bucket 20: 60%\n  bucket 18: 80%\n  bucket 20: 70%\n  bucket 18: 90%\n  bucket 20: 80%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 58\n  bucket 21: 10%\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 58\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 21: 60%\n  bucket 23: 40%\n  bucket 21: 70%\n  bucket 22: 40%\n  bucket 23: 50%\n  bucket 21: 80%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 21: 90%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 21: 100%\n  bucket 22: 70%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  bucket 23: 80%\n  bucket 22: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\nGetting block 25 of 58\n  Calculating Z arrays for bucket 24\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 25: 30%\n  bucket 24: 50%\n  bucket 25: 40%\n  bucket 24: 60%\n  bucket 25: 50%\n  bucket 24: 70%\n  bucket 25: 60%\n  bucket 24: 80%\n  bucket 25: 70%\n  bucket 24: 90%\n  bucket 25: 80%\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\nGetting block 26 of 58\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 58\n  Entering block accumulator loop for bucket 26:\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 26: 40%\n  bucket 27: 30%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 58\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 58\n  bucket 28: 10%\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 20%\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 28: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 28: 60%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 28: 70%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\nGetting block 30 of 58\nGetting block 31 of 58\n  Reserving size (388) for bucket 30\n  Reserving size (388) for bucket 31\nGetting block 32 of 58\n  Calculating Z arrays for bucket 30\n  Calculating Z arrays for bucket 31\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 30: 10%\n  bucket 32: 10%\n  bucket 31: 10%\n  bucket 30: 20%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 31: 20%\n  bucket 30: 30%\n  bucket 32: 40%\n  bucket 31: 30%\n  bucket 32: 50%\n  bucket 30: 40%\n  bucket 31: 40%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 30: 50%\n  bucket 31: 50%\n  bucket 32: 80%\n  bucket 30: 60%\n  bucket 31: 60%\n  bucket 32: 90%\n  bucket 32: 100%\n  bucket 30: 70%\n  bucket 31: 70%\n  Sorting block of length 155 for bucket 32\n  (Using difference cover)\n  bucket 31: 80%\n  bucket 30: 80%\n  bucket 31: 90%\n  bucket 30: 90%\n  bucket 31: 100%\n  Sorting block of le\n..\n 70%\n  bucket 24: 10%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 24: 20%\n  bucket 23: 100%\n  Sorting block of length 349 for bucket 23\n  (Using difference cover)\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  Sorting block time: 00:00:00\nReturning block of 350 for bucket 23\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\nGetting block 27 of 57\n  Calculating Z arrays for bucket 26\n  Reserving size (388) for bucket 27\nGetting block 28 of 57\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Reserving size (388) for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 26: 20%\n  bucket 28: 20%\n  bucket 27: 20%\n  bucket 28: 30%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 28: 40%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 28: 50%\n  bucket 26: 50%\n  bucket 28: 60%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 28: 70%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 28: 80%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 28: 90%\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 20%\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 30%\n  bucket 30: 20%\n  bucket 29: 40%\n  bucket 30: 30%\n  bucket 29: 50%\n  bucket 30: 40%\n  bucket 29: 60%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 70%\n  bucket 30: 70%\n  bucket 29: 80%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 90%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\nGetting block 31 of 57\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 30%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 40%\n  bucket 33: 10%\n  bucket 32: 50%\n  bucket 33: 20%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 33: 30%\n  bucket 32: 80%\n  bucket 33: 40%\n  bucket 32: 90%\n  bucket 33: 50%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\nGetting block 35 of 57\n  Calculating Z arrays for bucket 34\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 10%\n  bucket 35: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 35: 20%\n  bucket 34: 40%\n  bucket 35: 30%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 35: 40%\n  bucket 34: 70%\n  bucket 35: 50%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 35: 60%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\nGetting block 37 of 57\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\nGetting block 38 of 57\n  bucket 37: 40%\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 50%\n  bucket 38: 10%\n  bucket 37: 60%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 37: 70%\n  bucket 38: 40%\n  bucket 37: 80%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 37: 90%\n  bucket 38: 70%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\nGetting block 39 of 57\n  Reserving size (388) for bucket 39\nGetting block 40 of 57\n  Calculating Z arrays for bucket 39\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 39:\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 10%\n  bucket 40: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 40: 20%\n  bucket 39: 40%\n  bucket 40: 30%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 40: 40%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 40: 50%\n  bucket 39: 90%\n  bucket 40: 60%\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  Sorting block time: 00:00:00\n  bucket 40: 100%\nReturning block of 388 for bucket 39\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 41 of 57\n  Reserving size (388) for bucket 41\nGetting block 42 of 57\n  Calculating Z arrays for bucket 41\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  bucket 42: 10%\n  bucket 41: 20%\n  bucket 42: 20%\n  bucket 41: 30%\n  bucket 42: 30%\n  bucket 41: 40%\n  bucket 42: 40%\n  bucket 41: 50%\n  bucket 42: 50%\n  bucket 41: 60%\n  bucket 42: 60%\n  bucket 41: 70%\n  bucket 42: 70%\n  bucket 41: 80%\n  bucket 42: 80%\n  bucket 41: 90%\n  bucket 42: 90%\n  bucket 41: 100%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 20%\n  bucket 44: 10%\n  bucket 43: 30%\n  bucket 44: 20%\n  bucket 43: 40%\n  bucket 44: 30%\n  bucket 43: 50%\n  bucket 44: 40%\n  bucket 43: 60%\n  bucket 44: 50%\n  bucket 43: 70%\n  bucket 44: 60%\n  bucket 43: 80%\n  bucket 44: 70%\n  bucket 43: 90%\n  bucket 44: 80%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\nGetting block 46 of 57\n  bucket 45: 20%\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 30%\n  bucket 46: 10%\n  bucket 45: 40%\n  bucket 46: 20%\n  bucket 45: 50%\n  bucket 46: 30%\n  bucket 45: 60%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 45: 70%\n  bucket 46: 60%\n  bucket 45: 80%\n  bucket 46: 70%\n  bucket 45: 90%\n  bucket 46: 80%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 30%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 40%\n  bucket 48: 10%\n  bucket 47: 50%\n  bucket 48: 20%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 48: 30%\n  bucket 47: 80%\n  bucket 48: 40%\n  bucket 47: 90%\n  bucket 48: 50%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 57\n  Entering block accumulator loop for bucket 49:\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 10%\n  bucket 50: 10%\n  bucket 49: 20%\n  bucket 50: 20%\n  bucket 49: 30%\n  bucket 50: 30%\n  bucket 49: 40%\n  bucket 50: 40%\n  bucket 49: 50%\n  bucket 50: 50%\n  bucket 49: 60%\n  bucket 50: 60%\n  bucket 49: 70%\n  bucket 50: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 52 of 57\nGetting block 51 of 57\n  Reserving size (388) for bucket 52\n  Reserving size (388) for bucket 51\nGetting block 53 of 57\n  Calculating Z arrays for bucket 52\n  Calculating Z arrays for bucket 51\n  Reserving size (388) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 52: 10%\n  bucket 51: 10%\n  bucket 53: 20%\n  bucket 52: 20%\n  bucket 51: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 52: 30%\n  bucket 51: 30%\n  bucket 53: 50%\n  bucket 52: 40%\n  bucket 51: 40%\n  bucket 53: 60%\n  bucket 51: 50%\n  bucket 52: 50%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 51: 60%\n  bucket 52: 60%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  bucket 51: 70%\n  bucket 52: 70%\n  bucket 51: 80%\n  bucket 52: 80%\n  bucket 51: 90%\n  bucket 52: 90%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\nGetting block 54 of 57\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 57\n  Entering block accumulator loop for bucket 55:\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 56: 10%\n  bucket 55: 20%\n  bucket 56: 20%\n  bucket 55: 30%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 55: 40%\n  bucket 56: 50%\n  bucket 55: 50%\n  bucket 56: 60%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 55: 80%\n  bucket 56: 90%\n  bucket 55: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "tool_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/3/d/a/dataset_3da5ce4c-39f4-492e-8564-fce119d446e4.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\nGetting block 3 of 58\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (388) for bucket 3\nGetting block 4 of 58\nGetting block 5 of 58\nGetting block 6 of 58\nGetting block 7 of 58\nGetting block 8 of 58\n  Calculating Z arrays for bucket 3\n  Reserving size (388) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Reserving size (388) for bucket 5\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  bucket 1: 20%\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 20%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 10%\n  bucket 5: 10%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 2: 40%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 1: 50%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 2: 50%\n  bucket 8: 20%\n  bucket 6: 30%\n  bucket 4: 30%\n  bucket 5: 30%\n  bucket 2: 60%\n  bucket 7: 20%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 8: 30%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 2: 80%\n  bucket 3: 50%\n  bucket 1: 70%\n  bucket 8: 40%\n  bucket 4: 50%\n  bucket 7: 30%\n  bucket 6: 50%\n  bucket 2: 90%\n  bucket 5: 50%\n  bucket 3: 60%\n  bucket 8: 50%\n  bucket 1: 80%\n  bucket 4: 60%\n  bucket 2: 100%\n  bucket 6: 60%\n  Sorting block of length 165 for bucket 2\n  bucket 5: 60%\n  bucket 7: 40%\n  bucket 3: 70%\n  bucket 8: 60%\n  bucket 4: 70%\n  bucket 1: 90%\n  bucket 6: 70%\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 4: 80%\n  bucket 8: 70%\n  bucket 3: 80%\n  bucket 7: 50%\n  bucket 1: 100%\n  bucket 6: 80%\n  bucket 4: 90%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 8: 80%\n  bucket 3: 90%\n  bucket 4: 100%\n  bucket 6: 90%\n  bucket 7: 60%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 8: 90%\n  bucket 3: 100%\n  bucket 6: 100%\n  Sorting block of length 370 for bucket 3\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 5: 100%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\nGetting block 9 of 58\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 58\n  Entering block accumulator loop for bucket 9:\n  Reserving size (388) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\nGetting block 12 of 58\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 30%\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 11: 80%\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\nGetting block 13 of 58\n  Reserving size (388) for bucket 13\nGetting block 14 of 58\n  Calculating Z arrays for bucket 13\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\nGetting block 15 of 58\n  Reserving size (388) for bucket 15\nGetting block 16 of 58\nGetting block 17 of 58\n  Calculating Z arrays for bucket 15\n  Reserving size (388) for bucket 16\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 16\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 17: 10%\n  bucket 16: 20%\n  bucket 17: 20%\n  bucket 15: 20%\n  bucket 17: 30%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 17: 40%\n  bucket 15: 40%\n  bucket 16: 40%\n  bucket 17: 50%\n  bucket 16: 50%\n  bucket 15: 50%\n  bucket 17: 60%\n  bucket 16: 60%\n  bucket 15: 60%\n  bucket 17: 70%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 17: 80%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 17: 90%\n  bucket 16: 90%\n  bucket 15: 90%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  bucket 16: 100%\n  (Using difference cover)\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 58\n  bucket 18: 10%\n  Reserving size (388) for bucket 19\nGetting block 20 of 58\n  Calculating Z arrays for bucket 19\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 18: 30%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 18: 40%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 18: 50%\n  bucket 20: 30%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 20: 40%\n  bucket 18: 60%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 20: 50%\n  bucket 18: 70%\n  bucket 20: 60%\n  bucket 18: 80%\n  bucket 20: 70%\n  bucket 18: 90%\n  bucket 20: 80%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\nGetting block 22 of 58\n  bucket 21: 10%\n  Reserving size (388) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 58\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 21: 60%\n  bucket 23: 40%\n  bucket 21: 70%\n  bucket 22: 40%\n  bucket 23: 50%\n  bucket 21: 80%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 21: 90%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 21: 100%\n  bucket 22: 70%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  bucket 23: 80%\n  bucket 22: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 211 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 24 of 58\n  Reserving size (388) for bucket 24\nGetting block 25 of 58\n  Calculating Z arrays for bucket 24\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 25: 30%\n  bucket 24: 50%\n  bucket 25: 40%\n  bucket 24: 60%\n  bucket 25: 50%\n  bucket 24: 70%\n  bucket 25: 60%\n  bucket 24: 80%\n  bucket 25: 70%\n  bucket 24: 90%\n  bucket 25: 80%\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 352 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\nGetting block 26 of 58\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 58\n  Entering block accumulator loop for bucket 26:\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 26: 40%\n  bucket 27: 30%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\nGetting block 28 of 58\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 58\n  bucket 28: 10%\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 20%\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 28: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 28: 60%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 28: 70%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\nGetting block 30 of 58\nGetting block 31 of 58\n  Reserving size (388) for bucket 30\n  Reserving size (388) for bucket 31\nGetting block 32 of 58\n  Calculating Z arrays for bucket 30\n  Calculating Z arrays for bucket 31\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 30: 10%\n  bucket 32: 10%\n  bucket 31: 10%\n  bucket 30: 20%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 31: 20%\n  bucket 30: 30%\n  bucket 32: 40%\n  bucket 31: 30%\n  bucket 32: 50%\n  bucket 30: 40%\n  bucket 31: 40%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 30: 50%\n  bucket 31: 50%\n  bucket 32: 80%\n  bucket 30: 60%\n  bucket 31: 60%\n  bucket 32: 90%\n  bucket 32: 100%\n  bucket 30: 70%\n  bucket 31: 70%\n  Sorting block of length 155 for bucket 32\n  (Using difference cover)\n  bucket 31: 80%\n  bucket 30: 80%\n  bucket 31: 90%\n  bucket 30: 90%\n  bucket 31: 100%\n  Sorting block of le\n..\n 70%\n  bucket 24: 10%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 24: 20%\n  bucket 23: 100%\n  Sorting block of length 349 for bucket 23\n  (Using difference cover)\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  Sorting block time: 00:00:00\nReturning block of 350 for bucket 23\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\nGetting block 26 of 57\n  Reserving size (388) for bucket 26\nGetting block 27 of 57\n  Calculating Z arrays for bucket 26\n  Reserving size (388) for bucket 27\nGetting block 28 of 57\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Reserving size (388) for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 26: 20%\n  bucket 28: 20%\n  bucket 27: 20%\n  bucket 28: 30%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 28: 40%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 28: 50%\n  bucket 26: 50%\n  bucket 28: 60%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 28: 70%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 28: 80%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 28: 90%\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 28: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  bucket 27: 90%\n  bucket 26: 100%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\nGetting block 29 of 57\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 20%\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 30%\n  bucket 30: 20%\n  bucket 29: 40%\n  bucket 30: 30%\n  bucket 29: 50%\n  bucket 30: 40%\n  bucket 29: 60%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 70%\n  bucket 30: 70%\n  bucket 29: 80%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 29: 90%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\nGetting block 31 of 57\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\nGetting block 33 of 57\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 30%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 40%\n  bucket 33: 10%\n  bucket 32: 50%\n  bucket 33: 20%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 33: 30%\n  bucket 32: 80%\n  bucket 33: 40%\n  bucket 32: 90%\n  bucket 33: 50%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\nGetting block 35 of 57\n  Calculating Z arrays for bucket 34\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 10%\n  bucket 35: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 35: 20%\n  bucket 34: 40%\n  bucket 35: 30%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 35: 40%\n  bucket 34: 70%\n  bucket 35: 50%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 35: 60%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\nGetting block 37 of 57\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\nGetting block 38 of 57\n  bucket 37: 40%\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 50%\n  bucket 38: 10%\n  bucket 37: 60%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 37: 70%\n  bucket 38: 40%\n  bucket 37: 80%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 37: 90%\n  bucket 38: 70%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\nGetting block 39 of 57\n  Reserving size (388) for bucket 39\nGetting block 40 of 57\n  Calculating Z arrays for bucket 39\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 39:\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 10%\n  bucket 40: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 40: 20%\n  bucket 39: 40%\n  bucket 40: 30%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 40: 40%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 40: 50%\n  bucket 39: 90%\n  bucket 40: 60%\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  Sorting block time: 00:00:00\n  bucket 40: 100%\nReturning block of 388 for bucket 39\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 41 of 57\n  Reserving size (388) for bucket 41\nGetting block 42 of 57\n  Calculating Z arrays for bucket 41\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  bucket 42: 10%\n  bucket 41: 20%\n  bucket 42: 20%\n  bucket 41: 30%\n  bucket 42: 30%\n  bucket 41: 40%\n  bucket 42: 40%\n  bucket 41: 50%\n  bucket 42: 50%\n  bucket 41: 60%\n  bucket 42: 60%\n  bucket 41: 70%\n  bucket 42: 70%\n  bucket 41: 80%\n  bucket 42: 80%\n  bucket 41: 90%\n  bucket 42: 90%\n  bucket 41: 100%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  bucket 42: 100%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\nGetting block 44 of 57\n  Reserving size (388) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 20%\n  bucket 44: 10%\n  bucket 43: 30%\n  bucket 44: 20%\n  bucket 43: 40%\n  bucket 44: 30%\n  bucket 43: 50%\n  bucket 44: 40%\n  bucket 43: 60%\n  bucket 44: 50%\n  bucket 43: 70%\n  bucket 44: 60%\n  bucket 43: 80%\n  bucket 44: 70%\n  bucket 43: 90%\n  bucket 44: 80%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\nGetting block 46 of 57\n  bucket 45: 20%\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 30%\n  bucket 46: 10%\n  bucket 45: 40%\n  bucket 46: 20%\n  bucket 45: 50%\n  bucket 46: 30%\n  bucket 45: 60%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 45: 70%\n  bucket 46: 60%\n  bucket 45: 80%\n  bucket 46: 70%\n  bucket 45: 90%\n  bucket 46: 80%\n  bucket 45: 100%\n  Sorting block of length 365 for bucket 45\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\nGetting block 48 of 57\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 30%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 40%\n  bucket 48: 10%\n  bucket 47: 50%\n  bucket 48: 20%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 48: 30%\n  bucket 47: 80%\n  bucket 48: 40%\n  bucket 47: 90%\n  bucket 48: 50%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 57\n  Entering block accumulator loop for bucket 49:\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 10%\n  bucket 50: 10%\n  bucket 49: 20%\n  bucket 50: 20%\n  bucket 49: 30%\n  bucket 50: 30%\n  bucket 49: 40%\n  bucket 50: 40%\n  bucket 49: 50%\n  bucket 50: 50%\n  bucket 49: 60%\n  bucket 50: 60%\n  bucket 49: 70%\n  bucket 50: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 52 of 57\nGetting block 51 of 57\n  Reserving size (388) for bucket 52\n  Reserving size (388) for bucket 51\nGetting block 53 of 57\n  Calculating Z arrays for bucket 52\n  Calculating Z arrays for bucket 51\n  Reserving size (388) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 52: 10%\n  bucket 51: 10%\n  bucket 53: 20%\n  bucket 52: 20%\n  bucket 51: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 52: 30%\n  bucket 51: 30%\n  bucket 53: 50%\n  bucket 52: 40%\n  bucket 51: 40%\n  bucket 53: 60%\n  bucket 51: 50%\n  bucket 52: 50%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 51: 60%\n  bucket 52: 60%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  bucket 51: 70%\n  bucket 52: 70%\n  bucket 51: 80%\n  bucket 52: 80%\n  bucket 51: 90%\n  bucket 52: 90%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\nGetting block 54 of 57\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 57\n  Entering block accumulator loop for bucket 55:\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 56: 10%\n  bucket 55: 20%\n  bucket 56: 20%\n  bucket 55: 30%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 55: 40%\n  bucket 56: 50%\n  bucket 55: 50%\n  bucket 56: 60%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 55: 80%\n  bucket 56: 90%\n  bucket 55: 90%\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:00\n", "stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:51:59", "plugin": "core", "name": "end_epoch", "raw_value": "1723229519.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:51:58", "plugin": "core", "name": "start_epoch", "raw_value": "1723229518.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_cy6w8dok.sam v. /tmp/history_bam_converted_to_sam_r025rhm_.sam )\n--- local_file\n+++ history_data\n@@ -1,69 +1,70 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrM\tLN:16569\n-@PG\tID:bowtie2\tPN:bowtie2\tVN:2.3.2\tCL:\"/Users/mvandenb/miniconda3/envs/mulled-v1-cf272fa72b0572012c68ee2cbf0c8f909a02f29be46918c2a23283da1d3d76b5/bin/bowtie2-align-s --wrapper basic-0 -p 1 -x genome -f -1 input_f.fasta -2 input_r.fasta\"\n+@PG\tID:bowtie2\tPN:bowtie2\tVN:2.4.2\tCL:\"/usr/local/bin/bowtie2-align-s --wrapper basic-0 -p 8 -x genome -f -1 input_f.fasta -2 input_r.fasta\"\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.11\tCL:samtools sort -@8 -T /galaxy/server/database/jobs_directory/000/74/tmp -O bam -o /galaxy/server/database/objects/9/3/5/dataset_935123ad-fd4b-4fad-9a17-b17b704822e2.dat\n M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tchrM\t1\t24\t1M10I240M\t=\t2\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-47\tXN:i:0\tXM:i:2\tXO:i:1\tXG:i:10\tNM:i:12\tMD:Z:0G71A168\tYS:i:-47\tYT:Z:CP\n M01368:8:000000000-A3GHV:1:1101:25545:21098\t165\tchrM\t1\t0\t*\t=\t1\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1101:5861:6452\t165\tchrM\t1\t0\t*\t=\t1\t0\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I208M11I6M\t=\t1\t-218\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-151\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:33\tNM:i:40\tMD:Z:0G0A1C68A141A0T0T1\tYS:i:-143\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1102:10677:23253\t97\tchrM\t1\t0\t4M22I208M11I6M\t=\t1\t218\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-151\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:33\tNM:i:40\tMD:Z:0G0A1C68A141A0T0T1\tYS:i:-143\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:21788:11027\t97\tchrM\t1\t0\t3M35I213M\t=\t6\t216\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-146\tXN:i:0\tXM:i:6\tXO:i:1\tXG:i:35\tNM:i:41\tMD:Z:1A0T69A140A0A0T0\tYS:i:-140\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1102:7765:18353\t101\tchrM\t1\t0\t*\t=\t1\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:11572:8264\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:12288:20635\t101\tchrM\t1\t0\t*\t=\t1\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1104:23670:4161\t165\tchrM\t1\t0\t*\t=\t1\t0\tCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t233M3I7M1I7M\t=\t1\t-247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-64\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:4\tNM:i:11\tMD:Z:72A158A1A0A1A6A0T2\tYS:i:-83\tYT:Z:DP\n+M01368:8:000000000-A3GHV:1:1105:15502:11453\t161\tchrM\t1\t23\t233M3I7M1I7M\t=\t1\t247\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACCTGTCTCTTATACACATCTG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-64\tXN:i:0\tXM:i:7\tXO:i:2\tXG:i:4\tNM:i:11\tMD:Z:72A158A1A0A1A6A0T2\tYS:i:-83\tYT:Z:DP\n M01368:8:000000000-A3GHV:1:1105:20577:18421\t101\tchrM\t1\t0\t*\t=\t1\t0\tGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:21099:2895\t101\tchrM\t1\t0\t*\t=\t1\t0\tTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:26469:19245\t165\tchrM\t1\t0\t*\t=\t1\t0\tGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1105:7169:17145\t101\tchrM\t1\t0\t*\t=\t1\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n M01368:8:000000000-A3GHV:1:1106:6455:17124\t101\tchrM\t1\t0\t*\t=\t1\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n********\n*SNIP *\n********\n-M01368:8:000000000-A3GHV:1:1111:13195:14562\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:7437:24508\t77\t*\t0\t0\t*\t*\t0\t0\tACACACTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTGTCTCTTATACACATCTCCGAGCCCACGAG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:7437:24508\t141\t*\t0\t0\t*\t*\t0\t0\tACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTCTGTCTCTTATACACATCTGACGCTGCCGAGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t77\t*\t0\t0\t*\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTGTCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:8665:25542\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGACAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t77\t*\t0\t0\t*\t*\t0\t0\tGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGCGGTGTCCACGCAATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1111:9655:13916\t141\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATTGCGTGGACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t77\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:10272:7828\t141\t*\t0\t0\t*\t*\t0\t0\tGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCAAGTGTAGTGCTCGGGGGGG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGGGCTGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCTTGAAGTAGGAACC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:16531\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t77\t*\t0\t0\t*\t*\t0\t0\tCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1112:9832:6701\t141\t*\t0\t0\t*\t*\t0\t0\tGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t77\t*\t0\t0\t*\t*\t0\t0\tGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGCTACAGTTCACTTTAGCTACCTCCAAGTGTTATG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:13532:8618\t141\t*\t0\t0\t*\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTGGAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:21679:18011\t77\t*\t0\t0\t*\t*\t0\t0\tGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGAGGGTGTGCACGCGATAGCATTGCGAGACGCTTGAGCCGGAGCACCCTATGTCGCAGTATATGTCTTTGATTCCTGCCTCTTCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAACTGTCTCTTATACACATATCCACGCCCACGAGACTAAGGCGAAGTTCATT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:21679:18011\t141\t*\t0\t0\t*\t*\t0\t0\tTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCTGTCTCTTATACACATCTGACGCTGCCGACGACCGAGCTAGTTGAGATC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t77\t*\t0\t0\t*\t*\t0\t0\tTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1113:5741:16959\t141\t*\t0\t0\t*\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t77\t*\t0\t0\t*\t*\t0\t0\tCGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTCTGATCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGCAACAAACACACATCCAGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:10130:11959\t141\t*\t0\t0\t*\t*\t0\t0\tATCAGAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGAGTTCTGTGGGGCCGGGGATCCTTATAAAAAAAATAGA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t77\t*\t0\t0\t*\t*\t0\t0\tCTTTAGTAAGTATGTTCGCCTGTAATATTGAACGTAGGTGCGATAAATAATAGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGGGGGCTATTTAGGTTTTT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:14540:5315\t141\t*\t0\t0\t*\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t77\t*\t0\t0\t*\t*\t0\t0\tGGATGAGGCAGGAATCAAAGACAGATACTGCGACATAGGGTGCTCCGGCTCCAGCGTCTCGCAATGCTATCGCGTGCACACCCCCCAGACGAAAATACCAAATGCATGGAGAGCTCCCGTGAGTGGTTAATAGGGTGATAGACCTGTGATCCATCGTGATGTCTTATTTAAGGGGAACGTGTGGGCTATTTAGGTTTTATGACCCTGAAGTAGGAACCAGATGTCGGATACAGTTCACTTTCTGTCTCTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n-M01368:8:000000000-A3GHV:1:1114:9184:6959\t141\t*\t0\t0\t*\t*\t0\t0\tAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCCTGTCTCTTA\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tYT:Z:UP\n"], "status": "failure"}}, {"id": "bowtie2/2.4.2+galaxy0-8", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 8, "time_seconds": 43.61268997192383, "inputs": {"library|input_1": {"src": "hda", "id": "c1669c9dc9d4c643"}, "library|input_2": {"src": "hda", "id": "ab69bfdb493c78bd"}, "library|unaligned_file": false, "library|paired_options|paired_options_selector": "no", "library|type": "paired", "reference_genome|own_file": {"src": "hda", "id": "c22adc34493a813e"}, "reference_genome|source": "history", "analysis_type|analysis_type_selector": "simple", "sam_options|reorder": true, "sam_options|sam_options_selector": "yes"}, "job": {"model_class": "Job", "id": "c22adc34493a813e", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bowtie2/bowtie2/2.4.2+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:52:38.826461", "update_time": "2024-08-09T18:52:54.348868", "galaxy_version": "24.1", "external_id": "gxy-r2968", "handler": null, "job_runner_name": null, "command_line": "set -o | grep -q pipefail && set -o pipefail; bowtie2-build --threads ${GALAXY_SLOTS:-4} '/galaxy/server/database/objects/2/5/d/dataset_25de06da-d95c-4bf9-b942-0df70cc72771.dat' genome && ln -s -f '/galaxy/server/database/objects/2/5/d/dataset_25de06da-d95c-4bf9-b942-0df70cc72771.dat' genome.fa &&   ln -f -s '/galaxy/server/database/objects/1/5/8/dataset_158701df-4f5d-48d8-ae1a-a72ef4d8bf4b.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/6/e/6/dataset_6e6727a8-3f7b-4739-8a84-c4e930e94ce4.dat' input_r.fasta &&   bowtie2  -p ${GALAXY_SLOTS:-4}  -x 'genome'  -f  -1 'input_f.fasta' -2 'input_r.fasta'                    --reorder   | samtools view -bS - -o '/galaxy/server/database/objects/b/0/d/dataset_b0d06266-984e-4fd1-9506-1dd668f1bf54.dat'", "user_email": "tests@fake.org", "command_version": "/usr/local/bin/bowtie2-align-s version 2.4.2\n64-bit\nBuilt on default-bf91a638-95fa-4b77-97c5-abccd9855c3e\nMon Nov  2 17:36:36 UTC 2020\nCompiler: gcc version 7.5.0 (crosstool-NG 1.24.0.131_87df0e6_dirty) \nOptions: -O3 -msse2 -funroll-loops -g3 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /usr/local/include -fdebug-prefix-map=/opt/conda/conda-bld/bowtie2_1604337828546/work=/usr/local/src/conda/bowtie2-2.4.2 -fdebug-prefix-map=/usr/local=/usr/local/src/conda-prefix -DPOPCNT_CAPABILITY -DWITH_TBB -std=c++11 -DNO_SPINLOCK -DWITH_QUEUELOCK=1\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "save_mapping_stats": "false", "sam_options": "{\"__current_case__\": 0, \"no_unal\": false, \"omit_sec_seq\": false, \"reorder\": true, \"sam_no_qname_trunc\": false, \"sam_opt\": false, \"sam_options_selector\": \"yes\", \"soft_clipped_unmapped_tlen\": false, \"xeq\": false}", "analysis_type": "{\"__current_case__\": 0, \"analysis_type_selector\": \"simple\", \"presets\": \"no_presets\"}", "rg": "{\"__current_case__\": 3, \"rg_selector\": \"do_not_set\"}", "reference_genome": "{\"__current_case__\": 1, \"own_file\": {\"values\": [{\"id\": 78, \"src\": \"hda\"}]}, \"source\": \"history\"}", "library": "{\"__current_case__\": 1, \"aligned_file\": false, \"input_1\": {\"values\": [{\"id\": 76, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 77, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"paired_options_selector\": \"no\"}, \"type\": \"paired\", \"unaligned_file\": false}"}, "inputs": {"library|input_1": {"id": "c1669c9dc9d4c643", "src": "hda", "uuid": "158701df-4f5d-48d8-ae1a-a72ef4d8bf4b"}, "library|input_2": {"id": "ab69bfdb493c78bd", "src": "hda", "uuid": "6e6727a8-3f7b-4739-8a84-c4e930e94ce4"}, "reference_genome|own_file": {"id": "c22adc34493a813e", "src": "hda", "uuid": "25de06da-d95c-4bf9-b942-0df70cc72771"}}, "outputs": {"output": {"id": "1e41b2637243a859", "src": "hda", "uuid": "b0d06266-984e-4fd1-9506-1dd668f1bf54"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/2/5/d/dataset_25de06da-d95c-4bf9-b942-0df70cc72771.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\n  Reserving size (388) for bucket 3\nGetting block 4 of 58\nGetting block 5 of 58\nGetting block 6 of 58\nGetting block 7 of 58\n  Entering block accumulator loop for bucket 1:\nGetting block 8 of 58\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Reserving size (388) for bucket 4\n  Reserving size (388) for bucket 5\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 5: 10%\n  bucket 1: 20%\n  bucket 7: 10%\n  bucket 4: 20%\n  bucket 8: 10%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 7: 20%\n  bucket 5: 30%\n  bucket 8: 20%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 1: 40%\n  bucket 4: 50%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 5: 50%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 4: 60%\n  bucket 1: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 4: 70%\n  bucket 3: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 5: 70%\n  bucket 8: 50%\n  bucket 4: 80%\n  bucket 6: 40%\n  bucket 7: 50%\n  bucket 5: 80%\n  bucket 3: 60%\n  bucket 8: 60%\n  bucket 4: 90%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 5: 90%\n  bucket 8: 70%\n  bucket 4: 100%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  bucket 6: 50%\n  bucket 3: 70%\n  bucket 7: 60%\n  bucket 5: 100%\n  bucket 2: 70%\n  bucket 8: 80%\n  bucket 1: 80%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 6: 60%\n  bucket 2: 80%\n  bucket 7: 70%\n  bucket 8: 90%\n  bucket 1: 90%\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 8: 100%\n  bucket 6: 70%\n  bucket 7: 80%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 2: 100%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 7: 90%\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\nGetting block 9 of 58\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 58\n  Reserving size (388) for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Calculating Z arrays for bucket 10\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 11: 10%\n  bucket 9: 30%\n  bucket 10: 20%\nGetting block 12 of 58\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 9: 40%\n  bucket 10: 30%\n  Entering block accumulator loop for bucket 12:\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 11: 20%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  (Using difference cover)\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\n  bucket 12: 80%\n  bucket 11: 90%\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\nGetting block 13 of 58\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 58\n  Entering block accumulator loop for bucket 13:\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 58\n  Entering block accumulator loop for bucket 14:\n  Reserving size (388) for bucket 15\n  bucket 13: 10%\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 15: 30%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 15: 40%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 15: 50%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 15: 60%\n  bucket 13: 80%\n  bucket 15: 70%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 15: 80%\n  bucket 13: 100%\n  bucket 14: 80%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  bucket 15: 90%\n  bucket 14: 90%\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\nGetting block 16 of 58\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\nGetting block 17 of 58\n  bucket 16: 30%\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 17: 10%\n  bucket 16: 60%\n  bucket 17: 20%\n  bucket 16: 70%\n  bucket 17: 30%\n  bucket 16: 80%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 16: 90%\n  bucket 17: 60%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\nGetting block 19 of 58\n  Calculating Z arrays for bucket 18\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 18:\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 58\n  bucket 18: 10%\n  bucket 19: 10%\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 18: 30%\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 18: 40%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 18: 50%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 18: 60%\n  bucket 19: 60%\n  bucket 18: 70%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 18: 80%\n  bucket 19: 80%\n  bucket 20: 50%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 20: 60%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\nGetting block 22 of 58\n  Calculating Z arrays for bucket 21\n  Reserving size (388) for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 22: 60%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\nReturning block of 211 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 58\n  Entering block accumulator loop for bucket 23:\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 20%\n  bucket 25: 10%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 25: 20%\n  bucket 24: 40%\n  bucket 23: 40%\n  bucket 25: 30%\n  bucket 24: 50%\n  bucket 25: 40%\n  bucket 24: 60%\n  bucket 23: 50%\n  bucket 25: 50%\n  bucket 24: 70%\n  bucket 25: 60%\n  bucket 23: 60%\n  bucket 24: 80%\n  bucket 25: 70%\n  bucket 24: 90%\n  bucket 23: 70%\n  bucket 25: 80%\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 23: 80%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  bucket 23: 90%\n  Sorting block time: 00:00:00\n  bucket 23: 100%\nReturning block of 352 for bucket 24\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\nGetting block 26 of 58\n  Reserving size (388) for bucket 26\nGetting block 27 of 58\nGetting block 28 of 58\n  Calculating Z arrays for bucket 26\n  Reserving size (388) for bucket 27\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\nGetting block 29 of 58\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 58\n  Entering block accumulator loop for bucket 29:\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 10%\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 29: 40%\n  bucket 30: 40%\n  bucket 29: 50%\n  bucket 30: 50%\n  bucket 29: 60%\n  bucket 30: 60%\n  bucket 29: 70%\n  bucket 30: 70%\n  bucket 29: 80%\n  bucket 30: 80%\n  bucket 29: 90%\n  bucket 30: 90%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\nGetting block 31 of 58\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 10%\nGetting block 33 of 58\n  bucket 31: 20%\n  bucket 32: 10%\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 31: 30%\n  bucket 32: 20%\n  bucket 33: 10%\n  bucket 31: 40%\n  bucket 32:\n..\nme: 00:00:00\nReturning block of 350 for bucket 23\nGetting block 24 of 57\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\nGetting block 26 of 57\n  Calculating Z arrays for bucket 25\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 25: 10%\n  bucket 26: 10%\n  Entering block accumulator loop for bucket 27:\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 27: 70%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 26: 100%\n  bucket 27: 90%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\nGetting block 28 of 57\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 57\n  Entering block accumulator loop for bucket 28:\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 29: 90%\n  bucket 28: 100%\n  bucket 29: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 57\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 30: 10%\n  bucket 31: 20%\n  bucket 30: 20%\n  bucket 31: 30%\n  bucket 30: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 30: 40%\n  bucket 31: 60%\n  bucket 30: 50%\n  bucket 31: 70%\n  bucket 30: 60%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\nGetting block 33 of 57\n  Calculating Z arrays for bucket 32\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 32:\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 10%\n  bucket 33: 10%\n  bucket 32: 20%\n  bucket 33: 20%\n  bucket 32: 30%\n  bucket 33: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 33: 40%\n  bucket 32: 60%\n  bucket 33: 50%\n  bucket 32: 70%\n  bucket 33: 60%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 33: 70%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\nGetting block 35 of 57\n  Calculating Z arrays for bucket 34\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 35: 10%\n  bucket 34: 30%\n  bucket 35: 20%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 35: 30%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 35: 40%\n  bucket 34: 80%\n  bucket 35: 50%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  bucket 35: 60%\n  bucket 35: 70%\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\nGetting block 37 of 57\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 30%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 40%\n  bucket 37: 10%\n  bucket 36: 50%\n  bucket 37: 20%\n  bucket 36: 60%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 36: 70%\n  bucket 37: 50%\n  bucket 36: 80%\n  bucket 37: 60%\n  bucket 36: 90%\n  bucket 37: 70%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\nGetting block 38 of 57\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\nGetting block 39 of 57\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 30%\n  bucket 39: 10%\n  bucket 38: 40%\n  bucket 39: 20%\n  bucket 38: 50%\n  bucket 39: 30%\n  bucket 38: 60%\n  bucket 39: 40%\n  bucket 38: 70%\n  bucket 39: 50%\n  bucket 38: 80%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 38: 90%\n  bucket 39: 80%\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 41 of 57\n  Reserving size (388) for bucket 41\nGetting block 42 of 57\n  Calculating Z arrays for bucket 41\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 41: 10%\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 20%\n  bucket 41: 20%\n  bucket 41: 30%\nGetting block 44 of 57\n  bucket 42: 30%\n  bucket 43: 10%\n  Reserving size (388) for bucket 44\n  bucket 41: 40%\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 41: 50%\n  bucket 42: 40%\n  bucket 44: 10%\n  bucket 43: 20%\n  bucket 41: 60%\n  bucket 42: 50%\n  bucket 44: 20%\n  bucket 43: 30%\n  bucket 41: 70%\n  bucket 44: 30%\n  bucket 42: 60%\n  bucket 44: 40%\n  bucket 43: 40%\n  bucket 41: 80%\n  bucket 42: 70%\n  bucket 44: 50%\n  bucket 41: 90%\n  bucket 44: 60%\n  bucket 43: 50%\n  bucket 42: 80%\n  bucket 41: 100%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  bucket 44: 70%\n  bucket 43: 60%\n  bucket 42: 90%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 42: 100%\n  bucket 43: 70%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  bucket 43: 80%\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\nGetting block 46 of 57\n  Calculating Z arrays for bucket 45\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 46: 10%\n  bucket 45: 20%\n  bucket 46: 20%\n  bucket 45: 30%\n  bucket 46: 30%\n  bucket 45: 40%\n  bucket 46: 40%\n  bucket 45: 50%\n  bucket 46: 50%\n  bucket 45: 60%\n  bucket 46: 60%\n  bucket 45: 70%\n  bucket 46: 70%\n  bucket 45: 80%\n  bucket 46: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  bucket 46: 90%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 57\n  Entering block accumulator loop for bucket 47:\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 47: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 47: 20%\n  bucket 48: 40%\n  bucket 47: 30%\n  bucket 48: 50%\n  bucket 47: 40%\n  bucket 48: 60%\n  bucket 47: 50%\n  bucket 48: 70%\n  bucket 47: 60%\n  bucket 48: 80%\n  bucket 47: 70%\n  bucket 48: 90%\n  bucket 47: 80%\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\nGetting block 50 of 57\n  bucket 49: 40%\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 50%\n  bucket 50: 10%\n  bucket 49: 60%\n  bucket 50: 20%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 49: 90%\n  bucket 50: 50%\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\nGetting block 52 of 57\n  Calculating Z arrays for bucket 51\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 52: 10%\n  bucket 51: 30%\n  bucket 52: 20%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 52: 30%\n  bucket 51: 60%\n  bucket 52: 40%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 52: 50%\n  bucket 51: 90%\n  bucket 52: 60%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\nGetting block 54 of 57\n  Calculating Z arrays for bucket 53\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 53: 20%\n  bucket 54: 30%\n  bucket 53: 30%\n  bucket 54: 40%\n  bucket 53: 40%\n  bucket 54: 50%\n  bucket 53: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 54: 80%\n  bucket 53: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  bucket 53: 90%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\nGetting block 56 of 57\n  Calculating Z arrays for bucket 55\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 56: 10%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 56: 20%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 56: 30%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 56: 40%\n  bucket 55: 90%\n  bucket 56: 50%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "tool_stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stdout": "Settings:\n  Output files: \"genome.*.bt2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Max bucket size: default\n  Max bucket size, sqrt multiplier: default\n  Max bucket size, len divisor: 32\n  Difference-cover sample period: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  /galaxy/server/database/objects/2/5/d/dataset_25de06da-d95c-4bf9-b942-0df70cc72771.dat\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\nbmax according to bmaxDivN setting: 517\nUsing parameters --bmax 388 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 388 --dcv 1024\nConstructing suffix-array element generator\nBuilding DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 86 sample suffixes\nGenerating random suffixes\nQSorting 86 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 86 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 12, merged 41; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 6; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 5, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 3, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 284.672 (target: 387)\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering Ebwt loop\nGetting block 1 of 58\n  Reserving size (388) for bucket 1\nGetting block 2 of 58\nGetting block 3 of 58\n  Calculating Z arrays for bucket 1\n  Reserving size (388) for bucket 2\n  Reserving size (388) for bucket 3\nGetting block 4 of 58\nGetting block 5 of 58\nGetting block 6 of 58\nGetting block 7 of 58\n  Entering block accumulator loop for bucket 1:\nGetting block 8 of 58\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Reserving size (388) for bucket 4\n  Reserving size (388) for bucket 5\n  Reserving size (388) for bucket 6\n  Reserving size (388) for bucket 7\n  Reserving size (388) for bucket 8\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 10%\n  bucket 4: 10%\n  bucket 3: 10%\n  bucket 5: 10%\n  bucket 1: 20%\n  bucket 7: 10%\n  bucket 4: 20%\n  bucket 8: 10%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 7: 20%\n  bucket 5: 30%\n  bucket 8: 20%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 2: 30%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 1: 40%\n  bucket 4: 50%\n  bucket 7: 30%\n  bucket 8: 30%\n  bucket 5: 50%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 4: 60%\n  bucket 1: 50%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 4: 70%\n  bucket 3: 50%\n  bucket 2: 50%\n  bucket 1: 60%\n  bucket 5: 70%\n  bucket 8: 50%\n  bucket 4: 80%\n  bucket 6: 40%\n  bucket 7: 50%\n  bucket 5: 80%\n  bucket 3: 60%\n  bucket 8: 60%\n  bucket 4: 90%\n  bucket 2: 60%\n  bucket 1: 70%\n  bucket 5: 90%\n  bucket 8: 70%\n  bucket 4: 100%\n  Sorting block of length 328 for bucket 4\n  (Using difference cover)\n  bucket 6: 50%\n  bucket 3: 70%\n  bucket 7: 60%\n  bucket 5: 100%\n  bucket 2: 70%\n  bucket 8: 80%\n  bucket 1: 80%\n  Sorting block of length 203 for bucket 5\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 6: 60%\n  bucket 2: 80%\n  bucket 7: 70%\n  bucket 8: 90%\n  bucket 1: 90%\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 8: 100%\n  bucket 6: 70%\n  bucket 7: 80%\n  Sorting block of length 171 for bucket 8\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 355 for bucket 1\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 2: 100%\n  Sorting block of length 370 for bucket 3\n  (Using difference cover)\n  bucket 7: 90%\n  Sorting block of length 165 for bucket 2\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 7: 100%\n  Sorting block of length 368 for bucket 7\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 339 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 356 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 166 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 329 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 369 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 204 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 172 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 6\nGetting block 9 of 58\n  Reserving size (388) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 58\n  Reserving size (388) for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Calculating Z arrays for bucket 10\nGetting block 11 of 58\n  Reserving size (388) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 11: 10%\n  bucket 9: 30%\n  bucket 10: 20%\nGetting block 12 of 58\n  Reserving size (388) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 9: 40%\n  bucket 10: 30%\n  Entering block accumulator loop for bucket 12:\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 11: 20%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 9: 100%\n  Sorting block of length 339 for bucket 9\n  bucket 10: 100%\n  Sorting block of length 357 for bucket 10\n  (Using difference cover)\n  (Using difference cover)\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  Sorting block time: 00:00:00\nReturning block of 358 for bucket 10\n  bucket 12: 80%\n  bucket 11: 90%\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 9\n  bucket 12: 90%\n  bucket 11: 100%\n  Sorting block of length 305 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 185 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 306 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 186 for bucket 12\nGetting block 13 of 58\n  Reserving size (388) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 58\n  Entering block accumulator loop for bucket 13:\n  Reserving size (388) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 58\n  Entering block accumulator loop for bucket 14:\n  Reserving size (388) for bucket 15\n  bucket 13: 10%\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 15: 30%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 15: 40%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 15: 50%\n  bucket 14: 50%\n  bucket 13: 70%\n  bucket 14: 60%\n  bucket 15: 60%\n  bucket 13: 80%\n  bucket 15: 70%\n  bucket 14: 70%\n  bucket 13: 90%\n  bucket 15: 80%\n  bucket 13: 100%\n  bucket 14: 80%\n  Sorting block of length 282 for bucket 13\n  (Using difference cover)\n  bucket 15: 90%\n  bucket 14: 90%\n  bucket 15: 100%\n  Sorting block of length 241 for bucket 15\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 339 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 283 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 340 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 242 for bucket 15\nGetting block 16 of 58\n  Reserving size (388) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\nGetting block 17 of 58\n  bucket 16: 30%\n  Reserving size (388) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 17: 10%\n  bucket 16: 60%\n  bucket 17: 20%\n  bucket 16: 70%\n  bucket 17: 30%\n  bucket 16: 80%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 16: 90%\n  bucket 17: 60%\n  bucket 16: 100%\n  Sorting block of length 379 for bucket 16\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 215 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 216 for bucket 17\nGetting block 18 of 58\n  Reserving size (388) for bucket 18\nGetting block 19 of 58\n  Calculating Z arrays for bucket 18\n  Reserving size (388) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 18:\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 58\n  bucket 18: 10%\n  bucket 19: 10%\n  Reserving size (388) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 18: 30%\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 18: 40%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 18: 50%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 18: 60%\n  bucket 19: 60%\n  bucket 18: 70%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 18: 80%\n  bucket 19: 80%\n  bucket 20: 50%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 20: 60%\n  bucket 18: 100%\n  Sorting block of length 378 for bucket 18\n  (Using difference cover)\n  bucket 19: 100%\n  Sorting block of length 334 for bucket 19\n  (Using difference cover)\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 19\n  bucket 20: 100%\n  Sorting block of length 313 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 314 for bucket 20\nGetting block 21 of 58\n  Reserving size (388) for bucket 21\nGetting block 22 of 58\n  Calculating Z arrays for bucket 21\n  Reserving size (388) for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 22: 60%\n  bucket 21: 100%\n  Sorting block of length 210 for bucket 21\n  (Using difference cover)\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 386 for bucket 22\n  (Using difference cover)\nReturning block of 211 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 387 for bucket 22\nGetting block 23 of 58\n  Reserving size (388) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 58\n  Entering block accumulator loop for bucket 23:\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 10%\n  bucket 24: 10%\nGetting block 25 of 58\n  Reserving size (388) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 20%\n  bucket 25: 10%\n  bucket 23: 30%\n  bucket 24: 30%\n  bucket 25: 20%\n  bucket 24: 40%\n  bucket 23: 40%\n  bucket 25: 30%\n  bucket 24: 50%\n  bucket 25: 40%\n  bucket 24: 60%\n  bucket 23: 50%\n  bucket 25: 50%\n  bucket 24: 70%\n  bucket 25: 60%\n  bucket 23: 60%\n  bucket 24: 80%\n  bucket 25: 70%\n  bucket 24: 90%\n  bucket 23: 70%\n  bucket 25: 80%\n  bucket 24: 100%\n  Sorting block of length 351 for bucket 24\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 23: 80%\n  bucket 25: 100%\n  Sorting block of length 105 for bucket 25\n  (Using difference cover)\n  bucket 23: 90%\n  Sorting block time: 00:00:00\n  bucket 23: 100%\nReturning block of 352 for bucket 24\n  Sorting block of length 238 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 239 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 106 for bucket 25\nGetting block 26 of 58\n  Reserving size (388) for bucket 26\nGetting block 27 of 58\nGetting block 28 of 58\n  Calculating Z arrays for bucket 26\n  Reserving size (388) for bucket 27\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 28: 80%\n  bucket 26: 100%\n  Sorting block of length 354 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 334 for bucket 27\n  (Using difference cover)\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 253 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 335 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 355 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 28\nGetting block 29 of 58\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 58\n  Entering block accumulator loop for bucket 29:\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 10%\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 29: 40%\n  bucket 30: 40%\n  bucket 29: 50%\n  bucket 30: 50%\n  bucket 29: 60%\n  bucket 30: 60%\n  bucket 29: 70%\n  bucket 30: 70%\n  bucket 29: 80%\n  bucket 30: 80%\n  bucket 29: 90%\n  bucket 30: 90%\n  bucket 29: 100%\n  Sorting block of length 289 for bucket 29\n  (Using difference cover)\n  bucket 30: 100%\n  Sorting block of length 345 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 290 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 346 for bucket 30\nGetting block 31 of 58\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\nGetting block 32 of 58\n  Reserving size (388) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 10%\nGetting block 33 of 58\n  bucket 31: 20%\n  bucket 32: 10%\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 31: 30%\n  bucket 32: 20%\n  bucket 33: 10%\n  bucket 31: 40%\n  bucket 32:\n..\nme: 00:00:00\nReturning block of 350 for bucket 23\nGetting block 24 of 57\n  Reserving size (388) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 245 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 246 for bucket 24\nGetting block 25 of 57\n  Reserving size (388) for bucket 25\nGetting block 26 of 57\n  Calculating Z arrays for bucket 25\n  Reserving size (388) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 57\n  Reserving size (388) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 25: 10%\n  bucket 26: 10%\n  Entering block accumulator loop for bucket 27:\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 27: 70%\n  bucket 25: 100%\n  Sorting block of length 286 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 26: 100%\n  bucket 27: 90%\n  Sorting block of length 384 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 359 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 287 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 360 for bucket 27\nGetting block 28 of 57\n  Reserving size (388) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 57\n  Entering block accumulator loop for bucket 28:\n  Reserving size (388) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 29: 90%\n  bucket 28: 100%\n  bucket 29: 100%\n  Sorting block of length 387 for bucket 28\n  (Using difference cover)\n  Sorting block of length 195 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 196 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 28\nGetting block 30 of 57\n  Reserving size (388) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 57\n  Reserving size (388) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 30: 10%\n  bucket 31: 20%\n  bucket 30: 20%\n  bucket 31: 30%\n  bucket 30: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 30: 40%\n  bucket 31: 60%\n  bucket 30: 50%\n  bucket 31: 70%\n  bucket 30: 60%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 31: 100%\n  Sorting block of length 310 for bucket 31\n  (Using difference cover)\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 257 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 311 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 258 for bucket 30\nGetting block 32 of 57\n  Reserving size (388) for bucket 32\nGetting block 33 of 57\n  Calculating Z arrays for bucket 32\n  Reserving size (388) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 32:\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 10%\n  bucket 33: 10%\n  bucket 32: 20%\n  bucket 33: 20%\n  bucket 32: 30%\n  bucket 33: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 33: 40%\n  bucket 32: 60%\n  bucket 33: 50%\n  bucket 32: 70%\n  bucket 33: 60%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 33: 70%\n  bucket 32: 100%\n  Sorting block of length 219 for bucket 32\n  (Using difference cover)\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 387 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 220 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 33\nGetting block 34 of 57\n  Reserving size (388) for bucket 34\nGetting block 35 of 57\n  Calculating Z arrays for bucket 34\n  Reserving size (388) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 35: 10%\n  bucket 34: 30%\n  bucket 35: 20%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 35: 30%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 35: 40%\n  bucket 34: 80%\n  bucket 35: 50%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 275 for bucket 34\n  (Using difference cover)\n  bucket 35: 60%\n  bucket 35: 70%\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 34\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 350 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 35\nGetting block 36 of 57\n  Reserving size (388) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\nGetting block 37 of 57\n  Reserving size (388) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 30%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 40%\n  bucket 37: 10%\n  bucket 36: 50%\n  bucket 37: 20%\n  bucket 36: 60%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 36: 70%\n  bucket 37: 50%\n  bucket 36: 80%\n  bucket 37: 60%\n  bucket 36: 90%\n  bucket 37: 70%\n  bucket 36: 100%\n  Sorting block of length 150 for bucket 36\n  (Using difference cover)\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 267 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 151 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 268 for bucket 37\nGetting block 38 of 57\n  Reserving size (388) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\nGetting block 39 of 57\n  Reserving size (388) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 30%\n  bucket 39: 10%\n  bucket 38: 40%\n  bucket 39: 20%\n  bucket 38: 50%\n  bucket 39: 30%\n  bucket 38: 60%\n  bucket 39: 40%\n  bucket 38: 70%\n  bucket 39: 50%\n  bucket 38: 80%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 38: 90%\n  bucket 39: 80%\n  bucket 38: 100%\n  Sorting block of length 337 for bucket 38\n  (Using difference cover)\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 387 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 338 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 388 for bucket 39\nGetting block 40 of 57\n  Reserving size (388) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 379 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 380 for bucket 40\nGetting block 41 of 57\n  Reserving size (388) for bucket 41\nGetting block 42 of 57\n  Calculating Z arrays for bucket 41\n  Reserving size (388) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 41: 10%\nGetting block 43 of 57\n  Reserving size (388) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 20%\n  bucket 41: 20%\n  bucket 41: 30%\nGetting block 44 of 57\n  bucket 42: 30%\n  bucket 43: 10%\n  Reserving size (388) for bucket 44\n  bucket 41: 40%\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 41: 50%\n  bucket 42: 40%\n  bucket 44: 10%\n  bucket 43: 20%\n  bucket 41: 60%\n  bucket 42: 50%\n  bucket 44: 20%\n  bucket 43: 30%\n  bucket 41: 70%\n  bucket 44: 30%\n  bucket 42: 60%\n  bucket 44: 40%\n  bucket 43: 40%\n  bucket 41: 80%\n  bucket 42: 70%\n  bucket 44: 50%\n  bucket 41: 90%\n  bucket 44: 60%\n  bucket 43: 50%\n  bucket 42: 80%\n  bucket 41: 100%\n  Sorting block of length 330 for bucket 41\n  (Using difference cover)\n  bucket 44: 70%\n  bucket 43: 60%\n  bucket 42: 90%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 42: 100%\n  bucket 43: 70%\n  Sorting block of length 188 for bucket 42\n  (Using difference cover)\n  bucket 44: 100%\n  Sorting block of length 366 for bucket 44\n  (Using difference cover)\n  bucket 43: 80%\n  Sorting block time: 00:00:00\nReturning block of 331 for bucket 41\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 321 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 367 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 189 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 322 for bucket 43\nGetting block 45 of 57\n  Reserving size (388) for bucket 45\nGetting block 46 of 57\n  Calculating Z arrays for bucket 45\n  Reserving size (388) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 46: 10%\n  bucket 45: 20%\n  bucket 46: 20%\n  bucket 45: 30%\n  bucket 46: 30%\n  bucket 45: 40%\n  bucket 46: 40%\n  bucket 45: 50%\n  bucket 46: 50%\n  bucket 45: 60%\n  bucket 46: 60%\n  bucket 45: 70%\n  bucket 46: 70%\n  bucket 45: 80%\n  bucket 46: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  bucket 46: 90%\n  Sorting block of length 365 for bucket 45\n  (Using difference cover)\n  bucket 46: 100%\n  Sorting block of length 253 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 366 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 254 for bucket 46\nGetting block 47 of 57\n  Reserving size (388) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 57\n  Entering block accumulator loop for bucket 47:\n  Reserving size (388) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 47: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 47: 20%\n  bucket 48: 40%\n  bucket 47: 30%\n  bucket 48: 50%\n  bucket 47: 40%\n  bucket 48: 60%\n  bucket 47: 50%\n  bucket 48: 70%\n  bucket 47: 60%\n  bucket 48: 80%\n  bucket 47: 70%\n  bucket 48: 90%\n  bucket 47: 80%\n  bucket 48: 100%\n  Sorting block of length 384 for bucket 48\n  (Using difference cover)\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 217 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 385 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 218 for bucket 47\nGetting block 49 of 57\n  Reserving size (388) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\nGetting block 50 of 57\n  bucket 49: 40%\n  Reserving size (388) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 50%\n  bucket 50: 10%\n  bucket 49: 60%\n  bucket 50: 20%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 49: 90%\n  bucket 50: 50%\n  bucket 49: 100%\n  Sorting block of length 112 for bucket 49\n  (Using difference cover)\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 49\n  bucket 50: 100%\n  Sorting block of length 275 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 276 for bucket 50\nGetting block 51 of 57\n  Reserving size (388) for bucket 51\nGetting block 52 of 57\n  Calculating Z arrays for bucket 51\n  Reserving size (388) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 52: 10%\n  bucket 51: 30%\n  bucket 52: 20%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 52: 30%\n  bucket 51: 60%\n  bucket 52: 40%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 52: 50%\n  bucket 51: 90%\n  bucket 52: 60%\n  bucket 51: 100%\n  Sorting block of length 350 for bucket 51\n  (Using difference cover)\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 378 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 351 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 379 for bucket 52\nGetting block 53 of 57\n  Reserving size (388) for bucket 53\nGetting block 54 of 57\n  Calculating Z arrays for bucket 53\n  Reserving size (388) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 53: 20%\n  bucket 54: 30%\n  bucket 53: 30%\n  bucket 54: 40%\n  bucket 53: 40%\n  bucket 54: 50%\n  bucket 53: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 54: 80%\n  bucket 53: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  bucket 53: 90%\n  Sorting block of length 237 for bucket 54\n  (Using difference cover)\n  bucket 53: 100%\n  Sorting block of length 370 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 238 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 371 for bucket 53\nGetting block 55 of 57\n  Reserving size (388) for bucket 55\nGetting block 56 of 57\n  Calculating Z arrays for bucket 55\n  Reserving size (388) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 56: 10%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 56: 20%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 56: 30%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 56: 40%\n  bucket 55: 90%\n  bucket 56: 50%\n  bucket 55: 100%\n  Sorting block of length 344 for bucket 55\n  (Using difference cover)\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  Sorting block time: 00:00:00\nReturning block of 345 for bucket 55\n  bucket 56: 100%\n  Sorting block of length 270 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 271 for bucket 56\nGetting block 57 of 57\n  Reserving size (388) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 132 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 133 for bucket 57\nExited Ebwt loop\nfchr[A]: 0\nfchr[C]: 5124\nfchr[G]: 10305\nfchr[T]: 12474\nfchr[$]: 16568\nExiting Ebwt::buildToDisk()\nReturning from initFromVector\nWrote 4200050 bytes to primary EBWT file: genome.rev.1.bt2\nWrote 4148 bytes to secondary EBWT file: genome.rev.2.bt2\nRe-opening _in1 and _in2 as input streams\nReturning from Ebwt constructor\nHeaders:\n    len: 16568\n    bwtLen: 16569\n    sz: 4142\n    bwtSz: 4143\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 20\n    eftabSz: 80\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 1036\n    offsSz: 4144\n    lineSz: 64\n    sideSz: 64\n    sideBwtSz: 48\n    sideBwtLen: 192\n    numSides: 87\n    numLines: 87\n    ebwtTotLen: 5568\n    ebwtTotSz: 5568\n    color: 0\n    reverse: 1\nTotal time for backward call to driver() for mirror index: 00:00:01\n", "stderr": "Building a SMALL index\n100 reads; of these:\n  100 (100.00%) were paired; of these:\n    97 (97.00%) aligned concordantly 0 times\n    3 (3.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    97 pairs aligned concordantly 0 times; of these:\n      7 (7.22%) aligned discordantly 1 time\n    ----\n    90 pairs aligned 0 times concordantly or discordantly; of these:\n      180 mates make up the pairs; of these:\n        156 (86.67%) aligned 0 times\n        24 (13.33%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n22.00% overall alignment rate\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:52:42", "plugin": "core", "name": "end_epoch", "raw_value": "1723229562.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:52:41", "plugin": "core", "name": "start_epoch", "raw_value": "1723229561.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "bowtie2/2.4.2+galaxy0-9", "has_data": true, "data": {"tool_id": "bowtie2", "tool_version": "2.4.2+galaxy0", "test_index": 9, "time_seconds": 12.710748672485352, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "datamash_reverse/1.1.0+galaxy2-0", "has_data": true, "data": {"tool_id": "datamash_reverse", "tool_version": "1.1.0+galaxy2", "test_index": 0, "time_seconds": 78.49568009376526, "inputs": {"in_file": {"src": "hda", "id": "c8102287cb46509e"}}, "job": {"model_class": "Job", "id": "038cd3546721811b", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/datamash_reverse/datamash_reverse/1.1.0+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:32:14.223211", "update_time": "2024-08-09T18:32:55.655629", "galaxy_version": "24.1", "external_id": "gxy-5k9nc", "handler": null, "job_runner_name": null, "command_line": "datamash reverse   < /galaxy/server/database/objects/b/2/6/dataset_b26027a2-890b-46b0-a089-363de2b92c65.dat > /galaxy/server/database/objects/8/e/e/dataset_8ee93db2-7098-4fb9-a513-c02445953557.dat", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"in_file": {"id": "c8102287cb46509e", "src": "hda", "uuid": "b26027a2-890b-46b0-a089-363de2b92c65"}}, "outputs": {"out_file": {"id": "038cd3546721811b", "src": "hda", "uuid": "8ee93db2-7098-4fb9-a513-c02445953557"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 18:32:42", "plugin": "core", "name": "end_epoch", "raw_value": "1723228362.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:32:42", "plugin": "core", "name": "start_epoch", "raw_value": "1723228362.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deeptools_plot_enrichment/3.3.2.0.0-0", "has_data": true, "data": {"tool_id": "deeptools_plot_enrichment", "tool_version": "3.3.2.0.0", "test_index": 0, "time_seconds": 69.5690701007843, "inputs": {"multibam_conditional|bamfiles": [{"src": "hda", "id": "42118efd96d42c6e"}, {"src": "hda", "id": "42118efd96d42c6e"}], "BED": [{"src": "hda", "id": "55fdb20e2aa00db7"}, {"src": "hda", "id": "55fdb20e2aa00db7"}], "advancedOpt|regionLabels": "up down", "advancedOpt|minMappingQuality": "0", "advancedOpt|showAdvancedOpt": "yes", "outRawCounts": true}, "job": {"model_class": "Job", "id": "d5a2037cf9e53c91", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/deeptools_plot_enrichment/deeptools_plot_enrichment/3.3.2.0.0", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:33:21.485936", "update_time": "2024-08-09T18:34:05.483996", "galaxy_version": "24.1", "external_id": "gxy-zhqp4", "handler": null, "job_runner_name": null, "command_line": "ln -s '/galaxy/server/database/objects/a/b/6/dataset_ab65d572-78ba-4c17-a055-22f1620c668b.dat' './0.bam' && ln -s '/galaxy/server/database/objects/_metadata_files/2/1/5/metadata_2158561f-03cd-4b00-a3da-a9c5cdbb5b28.dat' './0.bam.bai' && ln -s '/galaxy/server/database/objects/a/b/6/dataset_ab65d572-78ba-4c17-a055-22f1620c668b.dat' './1.bam' && ln -s '/galaxy/server/database/objects/_metadata_files/2/1/5/metadata_2158561f-03cd-4b00-a3da-a9c5cdbb5b28.dat' './1.bam.bai' &&   plotEnrichment --numberOfProcessors \"${GALAXY_SLOTS:-4}\"  --plotFile '/galaxy/server/database/objects/6/a/0/dataset_6a080821-744b-4b09-b4c1-349f299ddbae.dat'  --bamfiles '0.bam' '1.bam' --labels 'bowtie2 test1.bam' 'bowtie2 test1.bam'    --BED '/galaxy/server/database/objects/e/9/4/dataset_e941e78e-ce17-4e13-bc24-5968fd1d3a73.dat' '/galaxy/server/database/objects/e/9/4/dataset_e941e78e-ce17-4e13-bc24-5968fd1d3a73.dat' --regionLabels 'multiBamSummary_regions.bed' 'multiBamSummary_regions.bed'    --outRawCounts '/galaxy/server/database/objects/d/9/9/dataset_d994910f-fc3b-4bbf-83d9-a8296abd47d2.dat'  --plotFileFormat 'png'     --regionLabels up down           --plotWidth '20'  --plotHeight '20'   --numPlotsPerRow '4'  --alpha '0.9'", "user_email": "tests@fake.org", "command_version": "plotEnrichment 3.3.2", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "outRawCounts": "true", "advancedOpt": "{\"Offset\": \"\", \"__current_case__\": 1, \"alpha\": \"0.9\", \"attributeKey\": null, \"blackListFileName\": null, \"centerReads\": false, \"colors\": \"\", \"doExtendCustom\": {\"__current_case__\": 0, \"doExtend\": \"no\"}, \"ignoreDuplicates\": false, \"keepExons\": false, \"labels\": null, \"maxFragmentLength\": \"0\", \"minFragmentLength\": \"0\", \"minMappingQuality\": \"0\", \"numPlotsPerRow\": \"4\", \"perSample\": false, \"plotHeight\": \"20\", \"plotTitle\": \"\", \"plotWidth\": \"20\", \"regionLabels\": \"up down\", \"samFlagExclude\": \"\", \"samFlagInclude\": \"\", \"showAdvancedOpt\": \"yes\", \"variableScales\": false}", "outFileFormat": "\"png\"", "region": "\"\"", "custom_sample_labels_conditional": "{\"__current_case__\": 0, \"custom_labels_select\": \"No\"}", "multibam_conditional": "{\"__current_case__\": 0, \"bamfiles\": {\"values\": [{\"id\": 3, \"src\": \"hda\"}, {\"id\": 3, \"src\": \"hda\"}]}, \"orderMatters\": \"No\"}"}, "inputs": {"BED2": {"id": "55fdb20e2aa00db7", "src": "hda", "uuid": "e941e78e-ce17-4e13-bc24-5968fd1d3a73"}, "BED1": {"id": "55fdb20e2aa00db7", "src": "hda", "uuid": "e941e78e-ce17-4e13-bc24-5968fd1d3a73"}, "BED": {"id": "55fdb20e2aa00db7", "src": "hda", "uuid": "e941e78e-ce17-4e13-bc24-5968fd1d3a73"}, "multibam_conditional|bamfiles2": {"id": "42118efd96d42c6e", "src": "hda", "uuid": "ab65d572-78ba-4c17-a055-22f1620c668b"}, "multibam_conditional|bamfiles1": {"id": "42118efd96d42c6e", "src": "hda", "uuid": "ab65d572-78ba-4c17-a055-22f1620c668b"}, "multibam_conditional|bamfiles": {"id": "42118efd96d42c6e", "src": "hda", "uuid": "ab65d572-78ba-4c17-a055-22f1620c668b"}}, "outputs": {"outFileRawCounts": {"id": "a561e7f0926f15d0", "src": "hda", "uuid": "d994910f-fc3b-4bbf-83d9-a8296abd47d2"}, "outFileName": {"id": "d5a2037cf9e53c91", "src": "hda", "uuid": "6a080821-744b-4b09-b4c1-349f299ddbae"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:33:45", "plugin": "core", "name": "end_epoch", "raw_value": "1723228425.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:33:43", "plugin": "core", "name": "start_epoch", "raw_value": "1723228423.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "ivar_filtervariants/1.2.2+galaxy0-0", "has_data": true, "data": {"tool_id": "ivar_filtervariants", "tool_version": "1.2.2+galaxy0", "test_index": 0, "time_seconds": 38.19837784767151, "inputs": {"inputs": [{"src": "hda", "id": "36b412f0bfeda622"}, {"src": "hda", "id": "30d79bb5e4557077"}]}, "job": {"model_class": "Job", "id": "ca4e53bea1679520", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/ivar_filtervariants/ivar_filtervariants/1.2.2+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:29:26.319589", "update_time": "2024-08-09T19:29:42.652542", "galaxy_version": "24.1", "external_id": "gxy-b5fxh", "handler": null, "job_runner_name": null, "command_line": "ln -s '/galaxy/server/database/objects/7/8/c/dataset_78c94e15-b4b5-4481-b96b-382f49a390ae.dat' ./var_0.tsv && ln -s '/galaxy/server/database/objects/d/2/2/dataset_d22ca757-a07a-44a8-bb14-a5b7d82671a1.dat' ./var_1.tsv && ivar filtervariants -p filtered.tsv ./var_0.tsv ./var_1.tsv", "user_email": "tests@fake.org", "command_version": "iVar version 1.2.2", "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"inputs": {"id": "36b412f0bfeda622", "src": "hda", "uuid": "78c94e15-b4b5-4481-b96b-382f49a390ae"}, "inputs1": {"id": "36b412f0bfeda622", "src": "hda", "uuid": "78c94e15-b4b5-4481-b96b-382f49a390ae"}, "inputs2": {"id": "30d79bb5e4557077", "src": "hda", "uuid": "d22ca757-a07a-44a8-bb14-a5b7d82671a1"}}, "outputs": {"output_filtered": {"id": "93c9f238945ec339", "src": "hda", "uuid": "0eac9157-640c-4076-acab-dc0833566204"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 19:29:31", "plugin": "core", "name": "end_epoch", "raw_value": "1723231771.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:29:31", "plugin": "core", "name": "start_epoch", "raw_value": "1723231771.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "lofreq_indelqual/2.1.5+galaxy0-0", "has_data": true, "data": {"tool_id": "lofreq_indelqual", "tool_version": "2.1.5+galaxy0", "test_index": 0, "time_seconds": 12.417539596557617, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "lofreq_indelqual/2.1.5+galaxy0-1", "has_data": true, "data": {"tool_id": "lofreq_indelqual", "tool_version": "2.1.5+galaxy0", "test_index": 1, "time_seconds": 41.681111097335815, "inputs": {"reads": {"src": "hda", "id": "08aaf670f31ccaae"}, "strategy|reference_source|ref": {"src": "hda", "id": "23adb46486a7cc0c"}, "strategy|reference_source|ref_selector": "history", "strategy|selector": "dindel"}, "job": {"model_class": "Job", "id": "3585c8213847cc54", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:23:23.596409", "update_time": "2024-08-09T19:23:43.153503", "galaxy_version": "24.1", "external_id": "gxy-jv7xg", "handler": null, "job_runner_name": null, "command_line": "ln -s '/galaxy/server/database/objects/d/7/7/dataset_d77cacba-b700-4859-a5d2-1fc9a1fbee8d.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq indelqual --dindel --ref reference.fa -o output.bam /galaxy/server/database/objects/2/5/3/dataset_253ea71e-b1e1-48c9-ba6e-dabb4f3260e9.dat", "user_email": "tests@fake.org", "command_version": "2.1.5", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strategy": "{\"__current_case__\": 1, \"reference_source\": {\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 206, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}, \"selector\": \"dindel\"}"}, "inputs": {"reads": {"id": "08aaf670f31ccaae", "src": "hda", "uuid": "253ea71e-b1e1-48c9-ba6e-dabb4f3260e9"}, "strategy|reference_source|ref": {"id": "23adb46486a7cc0c", "src": "hda", "uuid": "d77cacba-b700-4859-a5d2-1fc9a1fbee8d"}}, "outputs": {"output": {"id": "370e28c8d123efa6", "src": "hda", "uuid": "56e21779-ff24-4425-bac1-0318ebfee1f6"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 19:23:30", "plugin": "core", "name": "end_epoch", "raw_value": "1723231410.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:23:30", "plugin": "core", "name": "start_epoch", "raw_value": "1723231410.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmp_ktlzx3uindelqual-out2.bam v. /tmp/tmpgzij390pindelqual-out2.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "lofreq_indelqual/2.1.5+galaxy0-2", "has_data": true, "data": {"tool_id": "lofreq_indelqual", "tool_version": "2.1.5+galaxy0", "test_index": 2, "time_seconds": 34.047141551971436, "inputs": {"reads": {"src": "hda", "id": "fc341470f14c9411"}, "strategy|insertions": "20", "strategy|selector": "uniform"}, "job": {"model_class": "Job", "id": "0f3ba92bc73ef1bc", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_indelqual/lofreq_indelqual/2.1.5+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:24:03.888932", "update_time": "2024-08-09T19:24:17.080169", "galaxy_version": "24.1", "external_id": "gxy-gp9f4", "handler": null, "job_runner_name": null, "command_line": "lofreq indelqual --uniform 20 -o output.bam /galaxy/server/database/objects/c/0/6/dataset_c0682379-891d-433d-b742-c0a7a863fc7f.dat", "user_email": "tests@fake.org", "command_version": "2.1.5", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "strategy": "{\"__current_case__\": 0, \"deletions\": \"\", \"insertions\": \"20\", \"selector\": \"uniform\"}"}, "inputs": {"reads": {"id": "fc341470f14c9411", "src": "hda", "uuid": "c0682379-891d-433d-b742-c0a7a863fc7f"}}, "outputs": {"output": {"id": "444d2f60e581e145", "src": "hda", "uuid": "fa095b15-cf05-4be2-960e-a52646da8c6a"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 19:24:05", "plugin": "core", "name": "end_epoch", "raw_value": "1723231445.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:24:05", "plugin": "core", "name": "start_epoch", "raw_value": "1723231445.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output:  different than expected, difference (using diff):\n( /tmp/tmp04oabsfoindelqual-out3.bam v. /tmp/tmp1m_1nsvkindelqual-out3.bam )\nBinary data detected, not displaying diff"], "status": "failure"}}, {"id": "medaka_consensus_pipeline/1.0.3+galaxy2-0", "has_data": true, "data": {"tool_id": "medaka_consensus_pipeline", "tool_version": "1.0.3+galaxy2", "test_index": 0, "time_seconds": 78.53811454772949, "inputs": {"i": {"src": "hda", "id": "d2215f638a6eab32"}, "d": {"src": "hda", "id": "1765870bb4e39cf0"}}, "job": {"model_class": "Job", "id": "1765870bb4e39cf0", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/medaka_consensus_pipeline/medaka_consensus_pipeline/1.0.3+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:53:31.569815", "update_time": "2024-08-09T18:54:25.685824", "galaxy_version": "24.1", "external_id": "gxy-2d88r", "handler": null, "job_runner_name": null, "command_line": "medaka_consensus -m r941_prom_high_g360 -b 100 -o results -t ${GALAXY_SLOTS:-4} -i '/galaxy/server/database/objects/b/d/a/dataset_bdacd8e4-146e-4775-971c-d64336b00ebf.dat' -d '/galaxy/server/database/objects/d/8/e/dataset_d8eed0ba-1471-45e5-906a-d51d8b071ea5.dat'  2>&1 | tee 'XXXX'", "user_email": "tests@fake.org", "command_version": "medaka 1.0.3", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "out": "[\"consensus\", \"probs\", \"calls\"]", "b": "\"100\"", "m": "\"r941_prom_high_g360\""}, "inputs": {"i": {"id": "d2215f638a6eab32", "src": "hda", "uuid": "bdacd8e4-146e-4775-971c-d64336b00ebf"}, "d": {"id": "1765870bb4e39cf0", "src": "hda", "uuid": "d8eed0ba-1471-45e5-906a-d51d8b071ea5"}}, "outputs": {"out_consensus": {"id": "0389735997e2a291", "src": "hda", "uuid": "1e117f29-82c3-4d5c-bece-933c28d5e1f3"}, "out_probs": {"id": "c9e17f8d5618d62a", "src": "hda", "uuid": "b4a3650b-3d0f-4160-a27a-3e7060d19d40"}, "out_calls": {"id": "6526601bf091254d", "src": "hda", "uuid": "a6b43194-2098-4e38-bf6a-05cf94f1034c"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "Checking program versions\nThis is medaka 1.0.3\nProgram    Version    Required   Pass     \nbcftools   1.10.2     1.9        True     \nbgzip      1.10.2     1.9        True     \nminimap2   2.17       2.11       True     \nsamtools   1.10       1.9        True     \ntabix      1.10.2     1.9        True     \nAligning basecalls to draft\nRemoving previous index file /galaxy/server/database/objects/d/8/e/dataset_d8eed0ba-1471-45e5-906a-d51d8b071ea5.dat.mmi\nRemoving previous index file /galaxy/server/database/objects/d/8/e/dataset_d8eed0ba-1471-45e5-906a-d51d8b071ea5.dat.fai\nConstructing minimap index.\n[M::mm_idx_gen::0.003*0.87] collected minimizers\n[M::mm_idx_gen::0.004*1.07] sorted minimizers\n[M::main::0.005*1.06] loaded/built the index for 1 target sequence(s)\n[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.05] distinct minimizers: 688 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.512\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -I 16G -x map-ont --MD -d /galaxy/server/database/objects/d/8/e/dataset_d8eed0ba-1471-45e5-906a-d51d8b071ea5.dat.mmi /galaxy/server/database/objects/d/8/e/dataset_d8eed0ba-1471-45e5-906a-d51d8b071ea5.dat\n[M::main] Real time: 0.007 sec; CPU: 0.006 sec; Peak RSS: 0.003 GB\n[M::main::0.002*1.80] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.002*1.71] mid_occ = 2\n[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.002*1.68] distinct minimizers: 688 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.512\n[M::worker_pipeline::0.031*3.59] mapped 125 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x map-ont --MD -t 8 -a -A 2 -B 4 -O 4,24 -E 2,1 /galaxy/server/database/objects/d/8/e/dataset_d8eed0ba-1471-45e5-906a-d51d8b071ea5.dat.mmi /galaxy/server/database/objects/b/d/a/dataset_bdacd8e4-146e-4775-971c-d64336b00ebf.dat\n[M::main] Real time: 0.033 sec; CPU: 0.113 sec; Peak RSS: 0.014 GB\nRunning medaka consensus\n[18:54:01 - Predict] Processing region(s): 4:0-3792\n[18:54:01 - Predict] Setting tensorflow threads to 8.\n[18:54:01 - Predict] Processing 1 long region(s) with batching.\n[18:54:01 - Predict] Using model: /usr/local/lib/python3.6/site-packages/medaka/data/r941_prom_high_g360_model.hdf5.\n[18:54:01 - ModelLoad] Building model with cudnn optimization: False\n[18:54:02 - DLoader] Initializing data loader\n[18:54:02 - Sampler] Initializing sampler for consensus of region 4:0-3792.\n[18:54:02 - PWorker] Running inference for 0.0M draft bases.\n[18:54:02 - Feature] Processed 4:0.0-3791.0 (median depth 78.0)\n[18:54:02 - Sampler] Took 0.02s to make features.\n[18:54:02 - Sampler] Region 4:0.0-3791.0 (7485 positions) is smaller than inference chunk length 10000, quarantining.\n[18:54:02 - PWorker] All done, 1 remainder regions.\n[18:54:02 - Predict] Processing 1 short region(s).\n[18:54:02 - ModelLoad] Building model with cudnn optimization: False\n[18:54:03 - DLoader] Initializing data loader\n[18:54:03 - Sampler] Initializing sampler for consensus of region 4:0-3792.\n[18:54:03 - PWorker] Running inference for 0.0M draft bases.\n[18:54:03 - Feature] Processed 4:0.0-3791.0 (median depth 78.0)\n[18:54:03 - Sampler] Took 0.02s to make features.\n[18:54:05 - PWorker] All done, 0 remainder regions.\n[18:54:05 - Predict] Finished processing all regions.\nUsing medaka stitch to create consensus.\n[18:54:07 - DataIndex] Loaded 1/1 (100.00%) sample files.\n[18:54:07 - Stitch] Stitching regions: ['4:0-']\n[18:54:07 - DataIndex] Loaded 1/1 (100.00%) sample files.\n[18:54:07 - Stitch] Processing 4:0-.\n[18:54:07 - Stitch] Used heuristic 0 times for 4:0-.\nPolished assembly written to results/consensus.fasta, have a nice day.\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "Checking program versions\nThis is medaka 1.0.3\nProgram    Version    Required   Pass     \nbcftools   1.10.2     1.9        True     \nbgzip      1.10.2     1.9        True     \nminimap2   2.17       2.11       True     \nsamtools   1.10       1.9        True     \ntabix      1.10.2     1.9        True     \nAligning basecalls to draft\nRemoving previous index file /galaxy/server/database/objects/d/8/e/dataset_d8eed0ba-1471-45e5-906a-d51d8b071ea5.dat.mmi\nRemoving previous index file /galaxy/server/database/objects/d/8/e/dataset_d8eed0ba-1471-45e5-906a-d51d8b071ea5.dat.fai\nConstructing minimap index.\n[M::mm_idx_gen::0.003*0.87] collected minimizers\n[M::mm_idx_gen::0.004*1.07] sorted minimizers\n[M::main::0.005*1.06] loaded/built the index for 1 target sequence(s)\n[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.05] distinct minimizers: 688 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.512\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -I 16G -x map-ont --MD -d /galaxy/server/database/objects/d/8/e/dataset_d8eed0ba-1471-45e5-906a-d51d8b071ea5.dat.mmi /galaxy/server/database/objects/d/8/e/dataset_d8eed0ba-1471-45e5-906a-d51d8b071ea5.dat\n[M::main] Real time: 0.007 sec; CPU: 0.006 sec; Peak RSS: 0.003 GB\n[M::main::0.002*1.80] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.002*1.71] mid_occ = 2\n[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.002*1.68] distinct minimizers: 688 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.512\n[M::worker_pipeline::0.031*3.59] mapped 125 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x map-ont --MD -t 8 -a -A 2 -B 4 -O 4,24 -E 2,1 /galaxy/server/database/objects/d/8/e/dataset_d8eed0ba-1471-45e5-906a-d51d8b071ea5.dat.mmi /galaxy/server/database/objects/b/d/a/dataset_bdacd8e4-146e-4775-971c-d64336b00ebf.dat\n[M::main] Real time: 0.033 sec; CPU: 0.113 sec; Peak RSS: 0.014 GB\nRunning medaka consensus\n[18:54:01 - Predict] Processing region(s): 4:0-3792\n[18:54:01 - Predict] Setting tensorflow threads to 8.\n[18:54:01 - Predict] Processing 1 long region(s) with batching.\n[18:54:01 - Predict] Using model: /usr/local/lib/python3.6/site-packages/medaka/data/r941_prom_high_g360_model.hdf5.\n[18:54:01 - ModelLoad] Building model with cudnn optimization: False\n[18:54:02 - DLoader] Initializing data loader\n[18:54:02 - Sampler] Initializing sampler for consensus of region 4:0-3792.\n[18:54:02 - PWorker] Running inference for 0.0M draft bases.\n[18:54:02 - Feature] Processed 4:0.0-3791.0 (median depth 78.0)\n[18:54:02 - Sampler] Took 0.02s to make features.\n[18:54:02 - Sampler] Region 4:0.0-3791.0 (7485 positions) is smaller than inference chunk length 10000, quarantining.\n[18:54:02 - PWorker] All done, 1 remainder regions.\n[18:54:02 - Predict] Processing 1 short region(s).\n[18:54:02 - ModelLoad] Building model with cudnn optimization: False\n[18:54:03 - DLoader] Initializing data loader\n[18:54:03 - Sampler] Initializing sampler for consensus of region 4:0-3792.\n[18:54:03 - PWorker] Running inference for 0.0M draft bases.\n[18:54:03 - Feature] Processed 4:0.0-3791.0 (median depth 78.0)\n[18:54:03 - Sampler] Took 0.02s to make features.\n[18:54:05 - PWorker] All done, 0 remainder regions.\n[18:54:05 - Predict] Finished processing all regions.\nUsing medaka stitch to create consensus.\n[18:54:07 - DataIndex] Loaded 1/1 (100.00%) sample files.\n[18:54:07 - Stitch] Stitching regions: ['4:0-']\n[18:54:07 - DataIndex] Loaded 1/1 (100.00%) sample files.\n[18:54:07 - Stitch] Processing 4:0-.\n[18:54:07 - Stitch] Used heuristic 0 times for 4:0-.\nPolished assembly written to results/consensus.fasta, have a nice day.\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "17 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "17.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:54:07", "plugin": "core", "name": "end_epoch", "raw_value": "1723229647.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:53:50", "plugin": "core", "name": "start_epoch", "raw_value": "1723229630.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "medaka_consensus_pipeline/1.0.3+galaxy2-1", "has_data": true, "data": {"tool_id": "medaka_consensus_pipeline", "tool_version": "1.0.3+galaxy2", "test_index": 1, "time_seconds": 70.08683037757874, "inputs": {"i": {"src": "hda", "id": "95bceafbb6d2abe9"}, "d": {"src": "hda", "id": "901511a9f9498fc8"}, "m": "r941_min_fast_g303", "b": "99", "out": ["consensus", "probs", "calls", "draft", "variants", "polished", "log"]}, "job": {"model_class": "Job", "id": "6526601bf091254d", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/medaka_consensus_pipeline/medaka_consensus_pipeline/1.0.3+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:54:53.324383", "update_time": "2024-08-09T18:55:34.455809", "galaxy_version": "24.1", "external_id": "gxy-tvznc", "handler": null, "job_runner_name": null, "command_line": "medaka_consensus -m r941_min_fast_g303 -b 99 -o results -v -t ${GALAXY_SLOTS:-4} -i '/galaxy/server/database/objects/a/d/e/dataset_adeba2c1-ce52-458c-a4e0-ecd006e42636.dat' -d '/galaxy/server/database/objects/8/a/9/dataset_8a9a3e90-9208-4788-8f64-a1c9676872cf.dat'  2>&1 | tee '/galaxy/server/database/objects/0/a/9/dataset_0a98a2ec-74ad-4af5-a0d3-5eda53a7f3b0.dat'", "user_email": "tests@fake.org", "command_version": "medaka 1.0.3", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "out": "[\"consensus\", \"probs\", \"calls\", \"draft\", \"variants\", \"polished\", \"log\"]", "b": "\"99\"", "m": "\"r941_min_fast_g303\""}, "inputs": {"i": {"id": "95bceafbb6d2abe9", "src": "hda", "uuid": "adeba2c1-ce52-458c-a4e0-ecd006e42636"}, "d": {"id": "901511a9f9498fc8", "src": "hda", "uuid": "8a9a3e90-9208-4788-8f64-a1c9676872cf"}}, "outputs": {"out_consensus": {"id": "93eaa40479286584", "src": "hda", "uuid": "99465e34-0ff3-491e-a97b-7c933c7a628a"}, "out_probs": {"id": "5a11e71ffd308222", "src": "hda", "uuid": "0b2f49b0-b9e9-45e4-885f-4d1cc88c38bb"}, "out_calls": {"id": "6cbb10a772569934", "src": "hda", "uuid": "07e79c41-05b3-467d-a4c9-09125ce10975"}, "out_draft": {"id": "15240e7d90b2e7bf", "src": "hda", "uuid": "616a5ac0-2cdf-42a5-8dea-88516f701e1e"}, "out_variants": {"id": "5dc47ab6bcf83ea5", "src": "hda", "uuid": "b92e5ff4-b79c-4251-8a8b-06133048bf66"}, "out_polished": {"id": "bd4c60715dc73b1d", "src": "hda", "uuid": "2952cd81-ad8e-460e-a818-737dbf273035"}, "out_log": {"id": "3987546ab903c87e", "src": "hda", "uuid": "0a98a2ec-74ad-4af5-a0d3-5eda53a7f3b0"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "Checking program versions\nThis is medaka 1.0.3\nProgram    Version    Required   Pass     \nbcftools   1.10.2     1.9        True     \nbgzip      1.10.2     1.9        True     \nminimap2   2.17       2.11       True     \nsamtools   1.10       1.9        True     \ntabix      1.10.2     1.9        True     \nAligning basecalls to draft\nRemoving previous index file /galaxy/server/database/objects/8/a/9/dataset_8a9a3e90-9208-4788-8f64-a1c9676872cf.dat.mmi\nRemoving previous index file /galaxy/server/database/objects/8/a/9/dataset_8a9a3e90-9208-4788-8f64-a1c9676872cf.dat.fai\nConstructing minimap index.\n[M::mm_idx_gen::0.004*1.15] collected minimizers\n[M::mm_idx_gen::0.005*1.10] sorted minimizers\n[M::main::0.006*1.08] loaded/built the index for 1 target sequence(s)\n[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.08] distinct minimizers: 688 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.512\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -I 16G -x map-ont --MD -d /galaxy/server/database/objects/8/a/9/dataset_8a9a3e90-9208-4788-8f64-a1c9676872cf.dat.mmi /galaxy/server/database/objects/8/a/9/dataset_8a9a3e90-9208-4788-8f64-a1c9676872cf.dat\n[M::main] Real time: 0.007 sec; CPU: 0.007 sec; Peak RSS: 0.003 GB\n[M::main::0.002*1.63] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.002*1.56] mid_occ = 2\n[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.003*1.51] distinct minimizers: 688 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.512\n[M::worker_pipeline::0.030*3.93] mapped 125 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x map-ont --MD -t 8 -a -A 2 -B 4 -O 4,24 -E 2,1 /galaxy/server/database/objects/8/a/9/dataset_8a9a3e90-9208-4788-8f64-a1c9676872cf.dat.mmi /galaxy/server/database/objects/a/d/e/dataset_adeba2c1-ce52-458c-a4e0-ecd006e42636.dat\n[M::main] Real time: 0.031 sec; CPU: 0.118 sec; Peak RSS: 0.014 GB\nRunning medaka consensus\n[18:55:09 - Predict] Processing region(s): 4:0-3792\n[18:55:09 - Predict] Setting tensorflow threads to 8.\n[18:55:09 - Predict] Processing 1 long region(s) with batching.\n[18:55:09 - Predict] Using model: /usr/local/lib/python3.6/site-packages/medaka/data/r941_min_fast_g303_model.hdf5.\n[18:55:09 - ModelLoad] Building model with cudnn optimization: False\n[18:55:10 - DLoader] Initializing data loader\n[18:55:10 - Sampler] Initializing sampler for consensus of region 4:0-3792.\n[18:55:10 - PWorker] Running inference for 0.0M draft bases.\n[18:55:10 - Feature] Processed 4:0.0-3791.0 (median depth 78.0)\n[18:55:10 - Sampler] Took 0.02s to make features.\n[18:55:10 - Sampler] Region 4:0.0-3791.0 (7485 positions) is smaller than inference chunk length 10000, quarantining.\n[18:55:10 - PWorker] All done, 1 remainder regions.\n[18:55:10 - Predict] Processing 1 short region(s).\n[18:55:10 - ModelLoad] Building model with cudnn optimization: False\n[18:55:11 - DLoader] Initializing data loader\n[18:55:11 - Sampler] Initializing sampler for consensus of region 4:0-3792.\n[18:55:11 - PWorker] Running inference for 0.0M draft bases.\n[18:55:11 - Feature] Processed 4:0.0-3791.0 (median depth 78.0)\n[18:55:11 - Sampler] Took 0.02s to make features.\n[18:55:14 - PWorker] All done, 0 remainder regions.\n[18:55:14 - Predict] Finished processing all regions.\nUsing medaka variant to create vcf and apply to draft.\n[18:55:17 - DataIndex] Loaded 1/1 (100.00%) sample files.\n[18:55:17 - Variants] Processing 4:0-.\nApplying variants\nApplied 4 variants\nVCF with changes made by medaka: results/variants.vcf.gz\n[18:55:19 - DataIndex] Loaded 1/1 (100.00%) sample files.\n[18:55:19 - Variants] Building interval tree\n[18:55:19 - Variants] Writing intervals for 4\n[18:55:19 - Variants] All done, bed file written to polished_regions_in_draft_coords.bed\nBED delineating regions which were polished (in draft coordinates): results/polished_regions_in_draft_coords.bed\nPolished assembly written to results/consensus.fasta, have a nice day.\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "Checking program versions\nThis is medaka 1.0.3\nProgram    Version    Required   Pass     \nbcftools   1.10.2     1.9        True     \nbgzip      1.10.2     1.9        True     \nminimap2   2.17       2.11       True     \nsamtools   1.10       1.9        True     \ntabix      1.10.2     1.9        True     \nAligning basecalls to draft\nRemoving previous index file /galaxy/server/database/objects/8/a/9/dataset_8a9a3e90-9208-4788-8f64-a1c9676872cf.dat.mmi\nRemoving previous index file /galaxy/server/database/objects/8/a/9/dataset_8a9a3e90-9208-4788-8f64-a1c9676872cf.dat.fai\nConstructing minimap index.\n[M::mm_idx_gen::0.004*1.15] collected minimizers\n[M::mm_idx_gen::0.005*1.10] sorted minimizers\n[M::main::0.006*1.08] loaded/built the index for 1 target sequence(s)\n[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.08] distinct minimizers: 688 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.512\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -I 16G -x map-ont --MD -d /galaxy/server/database/objects/8/a/9/dataset_8a9a3e90-9208-4788-8f64-a1c9676872cf.dat.mmi /galaxy/server/database/objects/8/a/9/dataset_8a9a3e90-9208-4788-8f64-a1c9676872cf.dat\n[M::main] Real time: 0.007 sec; CPU: 0.007 sec; Peak RSS: 0.003 GB\n[M::main::0.002*1.63] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.002*1.56] mid_occ = 2\n[M::mm_idx_stat] kmer size: 15; skip: 10; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.003*1.51] distinct minimizers: 688 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.512\n[M::worker_pipeline::0.030*3.93] mapped 125 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x map-ont --MD -t 8 -a -A 2 -B 4 -O 4,24 -E 2,1 /galaxy/server/database/objects/8/a/9/dataset_8a9a3e90-9208-4788-8f64-a1c9676872cf.dat.mmi /galaxy/server/database/objects/a/d/e/dataset_adeba2c1-ce52-458c-a4e0-ecd006e42636.dat\n[M::main] Real time: 0.031 sec; CPU: 0.118 sec; Peak RSS: 0.014 GB\nRunning medaka consensus\n[18:55:09 - Predict] Processing region(s): 4:0-3792\n[18:55:09 - Predict] Setting tensorflow threads to 8.\n[18:55:09 - Predict] Processing 1 long region(s) with batching.\n[18:55:09 - Predict] Using model: /usr/local/lib/python3.6/site-packages/medaka/data/r941_min_fast_g303_model.hdf5.\n[18:55:09 - ModelLoad] Building model with cudnn optimization: False\n[18:55:10 - DLoader] Initializing data loader\n[18:55:10 - Sampler] Initializing sampler for consensus of region 4:0-3792.\n[18:55:10 - PWorker] Running inference for 0.0M draft bases.\n[18:55:10 - Feature] Processed 4:0.0-3791.0 (median depth 78.0)\n[18:55:10 - Sampler] Took 0.02s to make features.\n[18:55:10 - Sampler] Region 4:0.0-3791.0 (7485 positions) is smaller than inference chunk length 10000, quarantining.\n[18:55:10 - PWorker] All done, 1 remainder regions.\n[18:55:10 - Predict] Processing 1 short region(s).\n[18:55:10 - ModelLoad] Building model with cudnn optimization: False\n[18:55:11 - DLoader] Initializing data loader\n[18:55:11 - Sampler] Initializing sampler for consensus of region 4:0-3792.\n[18:55:11 - PWorker] Running inference for 0.0M draft bases.\n[18:55:11 - Feature] Processed 4:0.0-3791.0 (median depth 78.0)\n[18:55:11 - Sampler] Took 0.02s to make features.\n[18:55:14 - PWorker] All done, 0 remainder regions.\n[18:55:14 - Predict] Finished processing all regions.\nUsing medaka variant to create vcf and apply to draft.\n[18:55:17 - DataIndex] Loaded 1/1 (100.00%) sample files.\n[18:55:17 - Variants] Processing 4:0-.\nApplying variants\nApplied 4 variants\nVCF with changes made by medaka: results/variants.vcf.gz\n[18:55:19 - DataIndex] Loaded 1/1 (100.00%) sample files.\n[18:55:19 - Variants] Building interval tree\n[18:55:19 - Variants] Writing intervals for 4\n[18:55:19 - Variants] All done, bed file written to polished_regions_in_draft_coords.bed\nBED delineating regions which were polished (in draft coordinates): results/polished_regions_in_draft_coords.bed\nPolished assembly written to results/consensus.fasta, have a nice day.\n", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "25 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "25.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:55:20", "plugin": "core", "name": "end_epoch", "raw_value": "1723229720.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:54:55", "plugin": "core", "name": "start_epoch", "raw_value": "1723229695.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "poretools_stats/0.6.1a1.0-0", "has_data": true, "data": {"tool_id": "poretools_stats", "tool_version": "0.6.1a1.0", "test_index": 0, "time_seconds": 64.30413269996643, "inputs": {"input": {"src": "hda", "id": "6e7bca49a30df365"}, "detailed": true, "type": "fwd"}, "job": {"model_class": "Job", "id": "901511a9f9498fc8", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats/0.6.1a1.0", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:56:01.748494", "update_time": "2024-08-09T18:56:42.006717", "galaxy_version": "24.1", "external_id": "gxy-sctpk", "handler": null, "job_runner_name": null, "command_line": "poretools stats --type fwd --full-tsv '/galaxy/server/database/objects/2/9/0/dataset_290db2f6-0667-4506-b57d-f36eb14a4faa.dat' > '/galaxy/server/database/objects/c/c/e/dataset_cced5f46-e5cd-4a85-abe6-64d0ac077b5b.dat'", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"fwd\"", "detailed": "true"}, "inputs": {"input": {"id": "6e7bca49a30df365", "src": "hda", "uuid": "290db2f6-0667-4506-b57d-f36eb14a4faa"}}, "outputs": {"output": {"id": "b3580880a27535c0", "src": "hda", "uuid": "cced5f46-e5cd-4a85-abe6-64d0ac077b5b"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:56:21", "plugin": "core", "name": "end_epoch", "raw_value": "1723229781.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:56:20", "plugin": "core", "name": "start_epoch", "raw_value": "1723229780.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_stats/0.6.1a1.0-1", "has_data": true, "data": {"tool_id": "poretools_stats", "tool_version": "0.6.1a1.0", "test_index": 1, "time_seconds": 40.874250173568726, "inputs": {"input": {"src": "hda", "id": "e92c01df9e41f022"}, "detailed": false, "type": "rev"}, "job": {"model_class": "Job", "id": "5a11e71ffd308222", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats/0.6.1a1.0", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:57:06.462744", "update_time": "2024-08-09T18:57:23.022194", "galaxy_version": "24.1", "external_id": "gxy-825jv", "handler": null, "job_runner_name": null, "command_line": "poretools stats --type rev  '/galaxy/server/database/objects/b/a/7/dataset_ba73934d-fadd-4dba-b453-f90aa60cbdcb.dat' > '/galaxy/server/database/objects/9/f/f/dataset_9ff0b1d0-c8db-4d8b-905d-3f6e3fa6f183.dat'", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"rev\"", "detailed": "false"}, "inputs": {"input": {"id": "e92c01df9e41f022", "src": "hda", "uuid": "ba73934d-fadd-4dba-b453-f90aa60cbdcb"}}, "outputs": {"output": {"id": "480cc46373988147", "src": "hda", "uuid": "9ff0b1d0-c8db-4d8b-905d-3f6e3fa6f183"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:57:09", "plugin": "core", "name": "end_epoch", "raw_value": "1723229829.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:57:08", "plugin": "core", "name": "start_epoch", "raw_value": "1723229828.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_stats/0.6.1a1.0-2", "has_data": true, "data": {"tool_id": "poretools_stats", "tool_version": "0.6.1a1.0", "test_index": 2, "time_seconds": 39.76085877418518, "inputs": {"input": {"src": "hda", "id": "9953cc0f16b7b68c"}, "detailed": true, "type": "2D"}, "job": {"model_class": "Job", "id": "15240e7d90b2e7bf", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats/0.6.1a1.0", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:57:47.901696", "update_time": "2024-08-09T18:58:03.004858", "galaxy_version": "24.1", "external_id": "gxy-wxd4w", "handler": null, "job_runner_name": null, "command_line": "poretools stats --type 2D --full-tsv '/galaxy/server/database/objects/3/5/a/dataset_35a500b2-e30e-47b6-88d1-7eec79300941.dat' > '/galaxy/server/database/objects/d/0/5/dataset_d0506b06-7cce-4f73-a68e-0cfa8f85a986.dat'", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"2D\"", "detailed": "true"}, "inputs": {"input": {"id": "9953cc0f16b7b68c", "src": "hda", "uuid": "35a500b2-e30e-47b6-88d1-7eec79300941"}}, "outputs": {"output": {"id": "3c542a19cba6b151", "src": "hda", "uuid": "d0506b06-7cce-4f73-a68e-0cfa8f85a986"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:57:50", "plugin": "core", "name": "end_epoch", "raw_value": "1723229870.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:57:49", "plugin": "core", "name": "start_epoch", "raw_value": "1723229869.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_stats/0.6.1a1.0-3", "has_data": true, "data": {"tool_id": "poretools_stats", "tool_version": "0.6.1a1.0", "test_index": 3, "time_seconds": 39.43054795265198, "inputs": {"input": {"src": "hda", "id": "403386f479c888cf"}, "detailed": false, "type": "best"}, "job": {"model_class": "Job", "id": "bd4c60715dc73b1d", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats/0.6.1a1.0", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:58:27.153023", "update_time": "2024-08-09T18:58:42.255732", "galaxy_version": "24.1", "external_id": "gxy-dr4tc", "handler": null, "job_runner_name": null, "command_line": "poretools stats --type best  '/galaxy/server/database/objects/3/4/5/dataset_3458e16b-b171-4fa9-bda1-8bbbe820c80b.dat' > '/galaxy/server/database/objects/f/4/c/dataset_f4c48ba7-d506-42fa-a816-23ef4f9c6203.dat'", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"best\"", "detailed": "false"}, "inputs": {"input": {"id": "403386f479c888cf", "src": "hda", "uuid": "3458e16b-b171-4fa9-bda1-8bbbe820c80b"}}, "outputs": {"output": {"id": "108fff642d33bc39", "src": "hda", "uuid": "f4c48ba7-d506-42fa-a816-23ef4f9c6203"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:58:30", "plugin": "core", "name": "end_epoch", "raw_value": "1723229910.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:58:28", "plugin": "core", "name": "start_epoch", "raw_value": "1723229908.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_stats/0.6.1a1.0-4", "has_data": true, "data": {"tool_id": "poretools_stats", "tool_version": "0.6.1a1.0", "test_index": 4, "time_seconds": 38.442506074905396, "inputs": {"input": {"src": "hda", "id": "54d22631bb65337e"}, "detailed": true, "type": "all"}, "job": {"model_class": "Job", "id": "6e7bca49a30df365", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats/0.6.1a1.0", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:59:05.509977", "update_time": "2024-08-09T18:59:20.962837", "galaxy_version": "24.1", "external_id": "gxy-kth5k", "handler": null, "job_runner_name": null, "command_line": "poretools stats --type all --full-tsv '/galaxy/server/database/objects/e/e/e/dataset_eeeb5893-45e2-4a3f-92c7-3d4328a2c3e2.dat' > '/galaxy/server/database/objects/b/b/2/dataset_bb2454d2-8f79-497a-aa1c-02d2da329d93.dat'", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\"", "detailed": "true"}, "inputs": {"input": {"id": "54d22631bb65337e", "src": "hda", "uuid": "eeeb5893-45e2-4a3f-92c7-3d4328a2c3e2"}}, "outputs": {"output": {"id": "3652981a901caf1b", "src": "hda", "uuid": "bb2454d2-8f79-497a-aa1c-02d2da329d93"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 18:59:08", "plugin": "core", "name": "end_epoch", "raw_value": "1723229948.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:59:08", "plugin": "core", "name": "start_epoch", "raw_value": "1723229948.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "salmonquantmerge/1.5.1+galaxy0-0", "has_data": true, "data": {"tool_id": "salmonquantmerge", "tool_version": "1.5.1+galaxy0", "test_index": 0, "time_seconds": 50.456037282943726, "inputs": {"quantfiles_0|quants": {"src": "hda", "id": "50aed79b9b7d443b"}, "quantfiles_0|names": "asdf", "quantfiles_1|quants": {"src": "hda", "id": "6c9ca7e28c901adc"}, "quantfiles_1|names": "qwerty"}, "job": {"model_class": "Job", "id": "3f49f72f8a6e37a7", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmonquantmerge/salmonquantmerge/1.5.1+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:20:46.281604", "update_time": "2024-08-09T19:21:14.352725", "galaxy_version": "24.1", "external_id": "gxy-6bcq8", "handler": null, "job_runner_name": null, "command_line": "rank_of_series=0 mkdir 0.quantmerge && ln -s /galaxy/server/database/objects/2/a/0/dataset_2a0f94bb-cac7-425a-81b6-5e7020dc41d7.dat 0.quantmerge/quant.sf && rank_of_series=1 mkdir 1.quantmerge && ln -s /galaxy/server/database/objects/b/5/e/dataset_b5e6bbfc-d249-4f6b-aa84-28e34b82872c.dat 1.quantmerge/quant.sf && salmon quantmerge --quants *.quantmerge --names 'asdf' 'qwerty' --column 'len'  -o qmergeout.tab", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "missing": "\"\"", "genes": "false", "column": "\"len\"", "quantfiles": "[{\"__index__\": 0, \"names\": \"asdf\", \"quants\": {\"values\": [{\"id\": 195, \"src\": \"hda\"}]}}, {\"__index__\": 1, \"names\": \"qwerty\", \"quants\": {\"values\": [{\"id\": 196, \"src\": \"hda\"}]}}]"}, "inputs": {"quantfiles_0|quants": {"id": "50aed79b9b7d443b", "src": "hda", "uuid": "2a0f94bb-cac7-425a-81b6-5e7020dc41d7"}, "quantfiles_1|quants": {"id": "6c9ca7e28c901adc", "src": "hda", "uuid": "b5e6bbfc-d249-4f6b-aa84-28e34b82872c"}}, "outputs": {"mergedfile": {"id": "175deaf7548a89f0", "src": "hda", "uuid": "e7150455-4ee4-4496-923b-c16e10e5af06"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "[2024-08-09 19:20:59.429] [mergeLog] [info] samples: [ 0.quantmerge, 1.quantmerge ]\n[2024-08-09 19:20:59.429] [mergeLog] [info] sample names : [ asdf, qwerty ]\n[2024-08-09 19:20:59.429] [mergeLog] [info] output column : LEN\n[2024-08-09 19:20:59.429] [mergeLog] [info] output file : qmergeout.tab\n[2024-08-09 19:20:59.429] [mergeLog] [info] Parsing 0.quantmerge/quant.sf\n[2024-08-09 19:20:59.431] [mergeLog] [info] Parsing 1.quantmerge/quant.sf\n[2024-08-09 19:20:59.445] [mergeLog] [warning] There were 3 missing entries (recorded as \"NA\") in the output\n", "tool_stderr": "Version Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###", "job_stdout": "", "job_stderr": "", "stdout": "[2024-08-09 19:20:59.429] [mergeLog] [info] samples: [ 0.quantmerge, 1.quantmerge ]\n[2024-08-09 19:20:59.429] [mergeLog] [info] sample names : [ asdf, qwerty ]\n[2024-08-09 19:20:59.429] [mergeLog] [info] output column : LEN\n[2024-08-09 19:20:59.429] [mergeLog] [info] output file : qmergeout.tab\n[2024-08-09 19:20:59.429] [mergeLog] [info] Parsing 0.quantmerge/quant.sf\n[2024-08-09 19:20:59.431] [mergeLog] [info] Parsing 1.quantmerge/quant.sf\n[2024-08-09 19:20:59.445] [mergeLog] [warning] There were 3 missing entries (recorded as \"NA\") in the output\n", "stderr": "Version Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 19:20:59", "plugin": "core", "name": "end_epoch", "raw_value": "1723231259.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:20:59", "plugin": "core", "name": "start_epoch", "raw_value": "1723231259.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_markdup/1.9+galaxy2-0", "has_data": true, "data": {"tool_id": "samtools_markdup", "tool_version": "1.9+galaxy2", "test_index": 0, "time_seconds": 37.126901626586914, "inputs": {"bamfile": {"src": "hda", "id": "db87f13f0037c84d"}}, "job": {"model_class": "Job", "id": "9cf22fa5556a0e25", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_markdup/samtools_markdup/1.9+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:04:22.585003", "update_time": "2024-08-09T19:04:39.008830", "galaxy_version": "24.1", "external_id": "gxy-722vq", "handler": null, "job_runner_name": null, "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&  samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T \"${TMPDIR:-.}\" -O sam -o coordsort.sam '/galaxy/server/database/objects/1/0/5/dataset_1051eac5-3387-496d-838d-3954315f6e5a.dat' &&  samtools markdup  -@ $addthreads    coordsort.sam '/galaxy/server/database/objects/e/0/b/dataset_e0bfe818-9095-41d5-a7fe-e38c4bdf949d.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.9 (using htslib 1.9)", "params": {"__input_ext": "\"sam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "supp": "false", "stats": "false", "maxlen": "\"\"", "remove": "false"}, "inputs": {"bamfile": {"id": "db87f13f0037c84d", "src": "hda", "uuid": "1051eac5-3387-496d-838d-3954315f6e5a"}}, "outputs": {"output": {"id": "a232c016c0290a9a", "src": "hda", "uuid": "e0bfe818-9095-41d5-a7fe-e38c4bdf949d"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 19:04:26", "plugin": "core", "name": "end_epoch", "raw_value": "1723230266.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:04:26", "plugin": "core", "name": "start_epoch", "raw_value": "1723230266.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output: Test output file (5_markdup.expected.bam) is missing. If you are using planemo, try adding --update_test_data to generate it."], "status": "failure"}}, {"id": "samtools_markdup/1.9+galaxy2-0", "has_data": true, "data": {"tool_id": "samtools_markdup", "tool_version": "1.9+galaxy2", "test_index": 0, "time_seconds": 35.39069199562073, "inputs": {"bamfile": {"src": "hda", "id": "95c764383628ca8a"}}, "job": {"model_class": "Job", "id": "63112856ba86c18d", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_markdup/samtools_markdup/1.9+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:06:23.952041", "update_time": "2024-08-09T19:06:38.194021", "galaxy_version": "24.1", "external_id": "gxy-q9s2k", "handler": null, "job_runner_name": null, "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&  samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T \"${TMPDIR:-.}\" -O sam -o coordsort.sam '/galaxy/server/database/objects/7/3/e/dataset_73edcf3f-dfe6-401e-9e56-a7b27d6a3a4f.dat' &&  samtools markdup  -@ $addthreads    coordsort.sam '/galaxy/server/database/objects/9/6/6/dataset_966f0b2f-bb1f-4de5-a52f-0a8762179514.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.9 (using htslib 1.9)", "params": {"__input_ext": "\"sam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "supp": "false", "stats": "false", "maxlen": "\"\"", "remove": "false"}, "inputs": {"bamfile": {"id": "95c764383628ca8a", "src": "hda", "uuid": "73edcf3f-dfe6-401e-9e56-a7b27d6a3a4f"}}, "outputs": {"output": {"id": "592dc3d35cd1ce6e", "src": "hda", "uuid": "966f0b2f-bb1f-4de5-a52f-0a8762179514"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 19:06:26", "plugin": "core", "name": "end_epoch", "raw_value": "1723230386.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:06:26", "plugin": "core", "name": "start_epoch", "raw_value": "1723230386.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output: Test output file (5_markdup.expected.bam) is missing. If you are using planemo, try adding --update_test_data to generate it."], "status": "failure"}}, {"id": "samtools_markdup/1.9+galaxy2-1", "has_data": true, "data": {"tool_id": "samtools_markdup", "tool_version": "1.9+galaxy2", "test_index": 1, "time_seconds": 34.70863652229309, "inputs": {"bamfile": {"src": "hda", "id": "0318215d60060df1"}, "remove": true}, "job": {"model_class": "Job", "id": "01313095b9f7b4a0", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_markdup/samtools_markdup/1.9+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:05:00.025599", "update_time": "2024-08-09T19:05:13.691956", "galaxy_version": "24.1", "external_id": "gxy-k5fnl", "handler": null, "job_runner_name": null, "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&  samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T \"${TMPDIR:-.}\" -O sam -o coordsort.sam '/galaxy/server/database/objects/6/3/d/dataset_63df2505-fdc8-4b32-98e2-3218828b98f2.dat' &&  samtools markdup  -@ $addthreads -r   coordsort.sam '/galaxy/server/database/objects/5/1/3/dataset_513feebe-75e2-43e6-84c6-29c2de7b34f4.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.9 (using htslib 1.9)", "params": {"__input_ext": "\"sam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "supp": "false", "stats": "false", "maxlen": "\"\"", "remove": "true"}, "inputs": {"bamfile": {"id": "0318215d60060df1", "src": "hda", "uuid": "63df2505-fdc8-4b32-98e2-3218828b98f2"}}, "outputs": {"output": {"id": "a27aa701fd20970a", "src": "hda", "uuid": "513feebe-75e2-43e6-84c6-29c2de7b34f4"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 19:05:01", "plugin": "core", "name": "end_epoch", "raw_value": "1723230301.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:05:01", "plugin": "core", "name": "start_epoch", "raw_value": "1723230301.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output: Test output file (6_remove_dups.expected.bam) is missing. If you are using planemo, try adding --update_test_data to generate it."], "status": "failure"}}, {"id": "samtools_markdup/1.9+galaxy2-1", "has_data": true, "data": {"tool_id": "samtools_markdup", "tool_version": "1.9+galaxy2", "test_index": 1, "time_seconds": 36.09936332702637, "inputs": {"bamfile": {"src": "hda", "id": "6271392987df07e7"}, "remove": true}, "job": {"model_class": "Job", "id": "6577eb098922925b", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_markdup/samtools_markdup/1.9+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:06:59.732303", "update_time": "2024-08-09T19:07:14.270899", "galaxy_version": "24.1", "external_id": "gxy-drn2g", "handler": null, "job_runner_name": null, "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&  samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T \"${TMPDIR:-.}\" -O sam -o coordsort.sam '/galaxy/server/database/objects/7/0/7/dataset_707ee99b-4364-49c5-a138-1e025ac1a112.dat' &&  samtools markdup  -@ $addthreads -r   coordsort.sam '/galaxy/server/database/objects/6/e/5/dataset_6e572948-292f-4b98-aacc-581c8f6d2b6f.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.9 (using htslib 1.9)", "params": {"__input_ext": "\"sam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "supp": "false", "stats": "false", "maxlen": "\"\"", "remove": "true"}, "inputs": {"bamfile": {"id": "6271392987df07e7", "src": "hda", "uuid": "707ee99b-4364-49c5-a138-1e025ac1a112"}}, "outputs": {"output": {"id": "bcee1b751778efb1", "src": "hda", "uuid": "6e572948-292f-4b98-aacc-581c8f6d2b6f"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 19:07:01", "plugin": "core", "name": "end_epoch", "raw_value": "1723230421.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:07:01", "plugin": "core", "name": "start_epoch", "raw_value": "1723230421.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output: Test output file (6_remove_dups.expected.bam) is missing. If you are using planemo, try adding --update_test_data to generate it."], "status": "failure"}}, {"id": "samtools_markdup/1.9+galaxy2-2", "has_data": true, "data": {"tool_id": "samtools_markdup", "tool_version": "1.9+galaxy2", "test_index": 2, "time_seconds": 11.601043224334717, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "samtools_markdup/1.9+galaxy2-2", "has_data": true, "data": {"tool_id": "samtools_markdup", "tool_version": "1.9+galaxy2", "test_index": 2, "time_seconds": 35.23308777809143, "inputs": {"bamfile": {"src": "hda", "id": "70cfc88fec2bd62f"}, "supp": true}, "job": {"model_class": "Job", "id": "4aec6dbd831065ec", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_markdup/samtools_markdup/1.9+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:07:35.557673", "update_time": "2024-08-09T19:07:49.589787", "galaxy_version": "24.1", "external_id": "gxy-qfhpf", "handler": null, "job_runner_name": null, "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&  ln -s '/galaxy/server/database/objects/e/0/6/dataset_e06535b2-4963-4272-88f0-038d5858876f.dat' coordsort.sam &&  samtools markdup  -@ $addthreads   -S coordsort.sam '/galaxy/server/database/objects/f/6/1/dataset_f61ecfc9-19e3-40a3-acab-47b28e3250de.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.9 (using htslib 1.9)", "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "supp": "true", "stats": "false", "maxlen": "\"\"", "remove": "false"}, "inputs": {"bamfile": {"id": "70cfc88fec2bd62f", "src": "hda", "uuid": "e06535b2-4963-4272-88f0-038d5858876f"}}, "outputs": {"output": {"id": "c5e0c27ddd11c4d9", "src": "hda", "uuid": "f61ecfc9-19e3-40a3-acab-47b28e3250de"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 19:07:38", "plugin": "core", "name": "end_epoch", "raw_value": "1723230458.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:07:38", "plugin": "core", "name": "start_epoch", "raw_value": "1723230458.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output: Test output file (7_mark_supp_dup.expected.bam) is missing. If you are using planemo, try adding --update_test_data to generate it."], "status": "failure"}}, {"id": "samtools_markdup/1.9+galaxy2-3", "has_data": true, "data": {"tool_id": "samtools_markdup", "tool_version": "1.9+galaxy2", "test_index": 3, "time_seconds": 36.044472455978394, "inputs": {"bamfile": {"src": "hda", "id": "d58df74ef53ce751"}, "stats": true}, "job": {"model_class": "Job", "id": "d5d2d86cd59e00c4", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_markdup/samtools_markdup/1.9+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:05:46.692879", "update_time": "2024-08-09T19:06:01.429012", "galaxy_version": "24.1", "external_id": "gxy-h2jbw", "handler": null, "job_runner_name": null, "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&  samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T \"${TMPDIR:-.}\" -O sam -o coordsort.sam '/galaxy/server/database/objects/6/2/5/dataset_625c33ac-c85b-4719-a3d9-ce5fed89f73f.dat' &&  samtools markdup  -@ $addthreads  -s  coordsort.sam '/galaxy/server/database/objects/b/0/d/dataset_b0d32756-b4c1-4e9e-b879-9d5cc640773e.dat' 2> '/galaxy/server/database/objects/8/2/8/dataset_828610c4-468a-4c5b-8c73-bf659ba3b85b.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.9 (using htslib 1.9)", "params": {"__input_ext": "\"sam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "supp": "false", "stats": "true", "maxlen": "\"\"", "remove": "false"}, "inputs": {"bamfile": {"id": "d58df74ef53ce751", "src": "hda", "uuid": "625c33ac-c85b-4719-a3d9-ce5fed89f73f"}}, "outputs": {"output": {"id": "e1c50565ef8746b6", "src": "hda", "uuid": "b0d32756-b4c1-4e9e-b879-9d5cc640773e"}, "stats_output": {"id": "f4c2dcadccf9498e", "src": "hda", "uuid": "828610c4-468a-4c5b-8c73-bf659ba3b85b"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 19:05:48", "plugin": "core", "name": "end_epoch", "raw_value": "1723230348.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:05:48", "plugin": "core", "name": "start_epoch", "raw_value": "1723230348.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output: Test output file (5_markdup.expected.bam) is missing. If you are using planemo, try adding --update_test_data to generate it.", "Output stats_output:  different than expected, difference (using diff):\n( /tmp/tmpwaa57sbmstats.txt v. /tmp/tmpxqty13m4stats.txt )\n--- local_file\n+++ history_data\n@@ -1,16 +1,5 @@\n-COMMAND: samtools markdup -@ 0 -s coordsort.sam /tmp/tmpea8lprdd/files/2/2/4/dataset_224df993-f6bf-4c7d-99a1-2e9dd51c2a57.dat\n-READ: 16\n-WRITTEN: 16\n-EXCLUDED: 3\n-EXAMINED: 13\n-PAIRED: 10\n-SINGLE: 3\n-DUPLICATE PAIR: 4\n-DUPLICATE SINGLE: 2\n-DUPLICATE PAIR OPTICAL: 0\n-DUPLICATE SINGLE OPTICAL: 0\n-DUPLICATE NON PRIMARY: 0\n-DUPLICATE NON PRIMARY OPTICAL: 0\n-DUPLICATE PRIMARY TOTAL: 6\n-DUPLICATE TOTAL: 6\n-ESTIMATED_LIBRARY_SIZE: 4\n+READ 16 WRITTEN 16 \n+EXCLUDED 3 EXAMINED 13\n+PAIRED 10 SINGLE 3\n+DULPICATE PAIR 4 DUPLICATE SINGLE 2\n+DUPLICATE TOTAL 6\n"], "status": "failure"}}, {"id": "samtools_markdup/1.9+galaxy2-3", "has_data": true, "data": {"tool_id": "samtools_markdup", "tool_version": "1.9+galaxy2", "test_index": 3, "time_seconds": 35.11080837249756, "inputs": {"bamfile": {"src": "hda", "id": "810846a82c8752b5"}, "stats": true}, "job": {"model_class": "Job", "id": "db87f13f0037c84d", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_markdup/samtools_markdup/1.9+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:08:10.809614", "update_time": "2024-08-09T19:08:24.538958", "galaxy_version": "24.1", "external_id": "gxy-nx6qd", "handler": null, "job_runner_name": null, "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&  samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T \"${TMPDIR:-.}\" -O sam -o coordsort.sam '/galaxy/server/database/objects/4/a/5/dataset_4a5f05da-2d9b-4754-9e83-1414646978f5.dat' &&  samtools markdup  -@ $addthreads  -s  coordsort.sam '/galaxy/server/database/objects/1/8/0/dataset_180b6dc0-9e3c-4b86-b1d9-58e837b9b82d.dat' 2> '/galaxy/server/database/objects/4/7/2/dataset_47209426-7c41-44dd-8d41-1143ee944ada.dat'", "user_email": "tests@fake.org", "command_version": "Version: 1.9 (using htslib 1.9)", "params": {"__input_ext": "\"sam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "supp": "false", "stats": "true", "maxlen": "\"\"", "remove": "false"}, "inputs": {"bamfile": {"id": "810846a82c8752b5", "src": "hda", "uuid": "4a5f05da-2d9b-4754-9e83-1414646978f5"}}, "outputs": {"output": {"id": "66f543e85e28736a", "src": "hda", "uuid": "180b6dc0-9e3c-4b86-b1d9-58e837b9b82d"}, "stats_output": {"id": "5b208ca4c31dff05", "src": "hda", "uuid": "47209426-7c41-44dd-8d41-1143ee944ada"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 19:08:12", "plugin": "core", "name": "end_epoch", "raw_value": "1723230492.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:08:12", "plugin": "core", "name": "start_epoch", "raw_value": "1723230492.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "output_problems": ["Output output: Test output file (5_markdup.expected.bam) is missing. If you are using planemo, try adding --update_test_data to generate it.", "Output stats_output:  different than expected, difference (using diff):\n( /tmp/tmpdo3a3saestats.txt v. /tmp/tmpe8or9guastats.txt )\n--- local_file\n+++ history_data\n@@ -1,16 +1,5 @@\n-COMMAND: samtools markdup -@ 0 -s coordsort.sam /tmp/tmpea8lprdd/files/2/2/4/dataset_224df993-f6bf-4c7d-99a1-2e9dd51c2a57.dat\n-READ: 16\n-WRITTEN: 16\n-EXCLUDED: 3\n-EXAMINED: 13\n-PAIRED: 10\n-SINGLE: 3\n-DUPLICATE PAIR: 4\n-DUPLICATE SINGLE: 2\n-DUPLICATE PAIR OPTICAL: 0\n-DUPLICATE SINGLE OPTICAL: 0\n-DUPLICATE NON PRIMARY: 0\n-DUPLICATE NON PRIMARY OPTICAL: 0\n-DUPLICATE PRIMARY TOTAL: 6\n-DUPLICATE TOTAL: 6\n-ESTIMATED_LIBRARY_SIZE: 4\n+READ 16 WRITTEN 16 \n+EXCLUDED 3 EXAMINED 13\n+PAIRED 10 SINGLE 3\n+DULPICATE PAIR 4 DUPLICATE SINGLE 2\n+DUPLICATE TOTAL 6\n"], "status": "failure"}}, {"id": "scanpy_compute_graph/1.8.1+3+galaxy0-0", "has_data": true, "data": {"tool_id": "scanpy_compute_graph", "tool_version": "1.8.1+3+galaxy0", "test_index": 0, "time_seconds": 0.22402095794677734, "execution_problem": "Input staging problem: Test input file (run_pca.h5) cannot be found.", "status": "error"}}, {"id": "scanpy_compute_graph/1.8.1+3+galaxy0-0", "has_data": true, "data": {"tool_id": "scanpy_compute_graph", "tool_version": "1.8.1+3+galaxy0", "test_index": 0, "time_seconds": 0.22096037864685059, "execution_problem": "Input staging problem: Test input file (run_pca.h5) cannot be found.", "status": "error"}}, {"id": "scanpy_compute_graph/1.8.1+3+galaxy0-1", "has_data": true, "data": {"tool_id": "scanpy_compute_graph", "tool_version": "1.8.1+3+galaxy0", "test_index": 1, "time_seconds": 0.15226078033447266, "execution_problem": "Input staging problem: Test input file (run_pca.h5) cannot be found.", "status": "error"}}, {"id": "scanpy_compute_graph/1.8.1+3+galaxy0-1", "has_data": true, "data": {"tool_id": "scanpy_compute_graph", "tool_version": "1.8.1+3+galaxy0", "test_index": 1, "time_seconds": 0.15535831451416016, "execution_problem": "Input staging problem: Test input file (run_pca.h5) cannot be found.", "status": "error"}}, {"id": "scanpy_remove_confounders/1.7.1+galaxy0-0", "has_data": true, "data": {"tool_id": "scanpy_remove_confounders", "tool_version": "1.7.1+galaxy0", "test_index": 0, "time_seconds": 54.23449897766113, "inputs": {"adata": {"src": "hda", "id": "979858082e55ae7a"}, "method|keys": "cell_type", "method|method": "pp.regress_out", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "bcc3fd8a4298bde3", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_remove_confounders/scanpy_remove_confounders/1.7.1+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:21:34.574217", "update_time": "2024-08-09T19:22:08.828815", "galaxy_version": "24.1", "external_id": "gxy-4fdqj", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/objects/4/7/7/dataset_477e0ee3-e840-47a5-9838-763d55ec5547.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/183/configs/tmpeflhuwb4' > '/galaxy/server/database/objects/7/c/9/dataset_7c9f591e-026f-4106-83c1-98316a41ce82.dat' && python '/galaxy/server/database/jobs_directory/000/183/configs/tmpeflhuwb4' >> '/galaxy/server/database/objects/7/c/9/dataset_7c9f591e-026f-4106-83c1-98316a41ce82.dat' && ls . >> '/galaxy/server/database/objects/7/c/9/dataset_7c9f591e-026f-4106-83c1-98316a41ce82.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 0, \"keys\": \"cell_type\", \"method\": \"pp.regress_out\"}"}, "inputs": {"adata": {"id": "979858082e55ae7a", "src": "hda", "uuid": "477e0ee3-e840-47a5-9838-763d55ec5547"}}, "outputs": {"anndata_out": {"id": "364007c2c1c64ef5", "src": "hda", "uuid": "21554265-fe55-43df-bdc2-fb69156baa07"}, "hidden_output": {"id": "1c444b8b896cad6d", "src": "hda", "uuid": "7c9f591e-026f-4106-83c1-98316a41ce82"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "[n_obs \u00d7 n_vars]\n-    640 \u00d7 11\n[obs]\n-    cell_type\n[uns]\n-    cell_type_colors\n-    highlights\n-    iroot\n", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_stdout": "", "job_stderr": "", "stdout": "[n_obs \u00d7 n_vars]\n-    640 \u00d7 11\n[obs]\n-    cell_type\n[uns]\n-    cell_type_colors\n-    highlights\n-    iroot\n", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:21:52", "plugin": "core", "name": "end_epoch", "raw_value": "1723231312.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:21:50", "plugin": "core", "name": "start_epoch", "raw_value": "1723231310.0000000"}, {"title": "Memory Allocated (MB)", "value": "32641", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "32641.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "scanpy_remove_confounders/1.7.1+galaxy0-1", "has_data": true, "data": {"tool_id": "scanpy_remove_confounders", "tool_version": "1.7.1+galaxy0", "test_index": 1, "time_seconds": 34.68190407752991, "inputs": {"adata": {"src": "hda", "id": "b44bd25893576c19"}, "method|key": "blobs", "method|method": "pp.combat", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "6302fc90c00b5813", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_remove_confounders/scanpy_remove_confounders/1.7.1+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:22:29.077254", "update_time": "2024-08-09T19:22:43.855000", "galaxy_version": "24.1", "external_id": "gxy-nmws5", "handler": null, "job_runner_name": null, "command_line": "cp '/galaxy/server/database/objects/1/1/6/dataset_116e9fde-e260-4799-9922-fb51c5443abd.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/185/configs/tmpnws1tthk' > '/galaxy/server/database/objects/4/3/7/dataset_43785e32-c606-433d-bf0f-0731126562f7.dat' && python '/galaxy/server/database/jobs_directory/000/185/configs/tmpnws1tthk' >> '/galaxy/server/database/objects/4/3/7/dataset_43785e32-c606-433d-bf0f-0731126562f7.dat' && ls . >> '/galaxy/server/database/objects/4/3/7/dataset_43785e32-c606-433d-bf0f-0731126562f7.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 2, \"key\": \"blobs\", \"method\": \"pp.combat\"}"}, "inputs": {"adata": {"id": "b44bd25893576c19", "src": "hda", "uuid": "116e9fde-e260-4799-9922-fb51c5443abd"}}, "outputs": {"anndata_out": {"id": "6eeaaeb1501245c5", "src": "hda", "uuid": "de06fddb-8d8f-49ca-982f-2ce23aea77b4"}, "hidden_output": {"id": "f2a74a8ba04a11d3", "src": "hda", "uuid": "43785e32-c606-433d-bf0f-0731126562f7"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "[n_obs \u00d7 n_vars]\n-    640 \u00d7 11\n[obs]\n-    blobs\n", "tool_stderr": "... storing 'blobs' as categorical\n", "job_stdout": "", "job_stderr": "", "stdout": "[n_obs \u00d7 n_vars]\n-    640 \u00d7 11\n[obs]\n-    blobs\n", "stderr": "... storing 'blobs' as categorical\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:22:32", "plugin": "core", "name": "end_epoch", "raw_value": "1723231352.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:22:30", "plugin": "core", "name": "start_epoch", "raw_value": "1723231350.0000000"}, {"title": "Memory Allocated (MB)", "value": "32641", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "32641.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "stringtie/2.1.1-0", "has_data": true, "data": {"tool_id": "stringtie", "tool_version": "2.1.1", "test_index": 0, "time_seconds": 45.750356912612915, "inputs": {"input_bam": {"src": "hda", "id": "34e5d54ed0d2628c"}}, "job": {"model_class": "Job", "id": "e92c01df9e41f022", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:59:44.879570", "update_time": "2024-08-09T19:00:07.501289", "galaxy_version": "24.1", "external_id": "gxy-qhvwg", "handler": null, "job_runner_name": null, "command_line": "mkdir -p ./special_de_output/sample1/ &&    stringtie '/galaxy/server/database/objects/b/f/3/dataset_bf387011-207a-41ab-8ed7-57b53f261c80.dat'    -o '/galaxy/server/database/objects/b/d/0/dataset_bd0be12e-973e-4c3c-9215-8b3aa990bfa6.dat' -p \"${GALAXY_SLOTS:-1}\"     -f '0.15' -m '200' -a '10' -j '1' -c '2' -g '50' -M '0.95'", "user_email": "tests@fake.org", "command_version": "2.1.1", "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"abundance_estimation\": false, \"bdist\": \"50\", \"bundle_fraction\": \"0.95\", \"disable_trimming\": false, \"fraction\": \"0.15\", \"min_anchor_cov\": \"1\", \"min_anchor_len\": \"10\", \"min_bundle_cov\": \"2\", \"min_tlen\": \"200\", \"multi_mapping\": false, \"name_prefix\": null, \"omit_sequences\": \"\"}", "guide": "{\"__current_case__\": 0, \"use_guide\": \"no\"}", "rna_strandness": "\"\"", "long_reads": "false"}, "inputs": {"input_bam": {"id": "34e5d54ed0d2628c", "src": "hda", "uuid": "bf387011-207a-41ab-8ed7-57b53f261c80"}}, "outputs": {"output_gtf": {"id": "7fc593161089c530", "src": "hda", "uuid": "bd0be12e-973e-4c3c-9215-8b3aa990bfa6"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 18:59:53", "plugin": "core", "name": "end_epoch", "raw_value": "1723229993.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:59:53", "plugin": "core", "name": "start_epoch", "raw_value": "1723229993.0000000"}, {"title": "Memory Allocated (MB)", "value": "26843", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "26843.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "stringtie/2.1.1-1", "has_data": true, "data": {"tool_id": "stringtie", "tool_version": "2.1.1", "test_index": 1, "time_seconds": 38.70844745635986, "inputs": {"input_bam": {"src": "hda", "id": "e785613344ff3e6e"}, "adv|fraction": "0.17"}, "job": {"model_class": "Job", "id": "9953cc0f16b7b68c", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:00:30.918920", "update_time": "2024-08-09T19:00:46.507792", "galaxy_version": "24.1", "external_id": "gxy-4k7kz", "handler": null, "job_runner_name": null, "command_line": "mkdir -p ./special_de_output/sample1/ &&    stringtie '/galaxy/server/database/objects/c/c/3/dataset_cc31cb4f-3650-4594-bad9-af9e28f77766.dat'    -o '/galaxy/server/database/objects/1/2/e/dataset_12e8ab62-e248-4962-bfaf-54821cb9fa0a.dat' -p \"${GALAXY_SLOTS:-1}\"     -f '0.17' -m '200' -a '10' -j '1' -c '2' -g '50' -M '0.95'", "user_email": "tests@fake.org", "command_version": "2.1.1", "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"abundance_estimation\": false, \"bdist\": \"50\", \"bundle_fraction\": \"0.95\", \"disable_trimming\": false, \"fraction\": \"0.17\", \"min_anchor_cov\": \"1\", \"min_anchor_len\": \"10\", \"min_bundle_cov\": \"2\", \"min_tlen\": \"200\", \"multi_mapping\": false, \"name_prefix\": null, \"omit_sequences\": \"\"}", "guide": "{\"__current_case__\": 0, \"use_guide\": \"no\"}", "rna_strandness": "\"\"", "long_reads": "false"}, "inputs": {"input_bam": {"id": "e785613344ff3e6e", "src": "hda", "uuid": "cc31cb4f-3650-4594-bad9-af9e28f77766"}}, "outputs": {"output_gtf": {"id": "3d80e6dd42347f8c", "src": "hda", "uuid": "12e8ab62-e248-4962-bfaf-54821cb9fa0a"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 19:00:33", "plugin": "core", "name": "end_epoch", "raw_value": "1723230033.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:00:33", "plugin": "core", "name": "start_epoch", "raw_value": "1723230033.0000000"}, {"title": "Memory Allocated (MB)", "value": "26843", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "26843.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "stringtie/2.1.1-2", "has_data": true, "data": {"tool_id": "stringtie", "tool_version": "2.1.1", "test_index": 2, "time_seconds": 12.80282211303711, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "stringtie/2.1.1-3", "has_data": true, "data": {"tool_id": "stringtie", "tool_version": "2.1.1", "test_index": 3, "time_seconds": 38.30125689506531, "inputs": {"input_bam": {"src": "hda", "id": "b7af533cd8a700b2"}, "guide|guide_source|ref_hist": {"src": "hda", "id": "bee46b0ba60e2a7e"}, "guide|guide_source|guide_gff_select": "history", "guide|use_guide": "yes", "adv|fraction": "0.17"}, "job": {"model_class": "Job", "id": "3652981a901caf1b", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:01:22.892201", "update_time": "2024-08-09T19:01:37.719116", "galaxy_version": "24.1", "external_id": "gxy-tk5w2", "handler": null, "job_runner_name": null, "command_line": "mkdir -p ./special_de_output/sample1/ &&   ln -s '/galaxy/server/database/objects/0/0/9/dataset_00918ba2-d08a-47b1-b665-4bf6f3a2d580.dat' guide.gff &&  stringtie '/galaxy/server/database/objects/9/d/8/dataset_9d8b0ee8-68ae-497d-82b0-842881aeb2a0.dat'    -o '/galaxy/server/database/objects/c/f/8/dataset_cf84b52a-80c1-4e5c-984d-6bceceb97839.dat' -p \"${GALAXY_SLOTS:-1}\"    -G guide.gff  -b ./special_de_output/sample1/  -f '0.17' -m '200' -a '10' -j '1' -c '2' -g '50' -M '0.95'", "user_email": "tests@fake.org", "command_version": "2.1.1", "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"abundance_estimation\": false, \"bdist\": \"50\", \"bundle_fraction\": \"0.95\", \"disable_trimming\": false, \"fraction\": \"0.17\", \"min_anchor_cov\": \"1\", \"min_anchor_len\": \"10\", \"min_bundle_cov\": \"2\", \"min_tlen\": \"200\", \"multi_mapping\": false, \"name_prefix\": null, \"omit_sequences\": \"\"}", "guide": "{\"__current_case__\": 1, \"coverage_file\": false, \"guide_source\": {\"__current_case__\": 1, \"guide_gff_select\": \"history\", \"ref_hist\": {\"values\": [{\"id\": 114, \"src\": \"hda\"}]}}, \"input_estimation\": false, \"special_outputs\": {\"__current_case__\": 2, \"special_outputs_select\": \"no\"}, \"use_guide\": \"yes\"}", "rna_strandness": "\"\"", "long_reads": "false"}, "inputs": {"input_bam": {"id": "b7af533cd8a700b2", "src": "hda", "uuid": "9d8b0ee8-68ae-497d-82b0-842881aeb2a0"}, "guide|guide_source|ref_hist": {"id": "bee46b0ba60e2a7e", "src": "hda", "uuid": "00918ba2-d08a-47b1-b665-4bf6f3a2d580"}}, "outputs": {"output_gtf": {"id": "3d2e6c01cca4d9fe", "src": "hda", "uuid": "cf84b52a-80c1-4e5c-984d-6bceceb97839"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 19:01:25", "plugin": "core", "name": "end_epoch", "raw_value": "1723230085.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:01:25", "plugin": "core", "name": "start_epoch", "raw_value": "1723230085.0000000"}, {"title": "Memory Allocated (MB)", "value": "26843", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "26843.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "stringtie/2.1.1-4", "has_data": true, "data": {"tool_id": "stringtie", "tool_version": "2.1.1", "test_index": 4, "time_seconds": 14.61011528968811, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "stringtie/2.1.1-5", "has_data": true, "data": {"tool_id": "stringtie", "tool_version": "2.1.1", "test_index": 5, "time_seconds": 40.210909366607666, "inputs": {"input_bam": {"src": "hda", "id": "4de92088ea6165b7"}, "guide|guide_source|ref_hist": {"src": "hda", "id": "24cbf756951f2b54"}, "guide|guide_source|guide_gff_select": "history", "guide|input_estimation": true, "guide|special_outputs|clustering": true, "guide|special_outputs|special_outputs_select": "deseq2", "guide|coverage_file": true, "guide|use_guide": "yes"}, "job": {"model_class": "Job", "id": "3c5706b396b22b0a", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:02:15.331582", "update_time": "2024-08-09T19:02:30.360092", "galaxy_version": "24.1", "external_id": "gxy-k9dxq", "handler": null, "job_runner_name": null, "command_line": "mkdir -p ./special_de_output/sample1/ &&   ln -s '/galaxy/server/database/objects/f/2/2/dataset_f22c4178-9149-43b8-b786-0e08bfda4dfc.dat' guide.gff &&  stringtie '/galaxy/server/database/objects/3/f/d/dataset_3fd2f5d7-85d0-4432-9422-9799dbdbd783.dat'    -o '/galaxy/server/database/objects/9/4/b/dataset_94b533e8-d6cf-42c2-b261-85958a7bfa35.dat' -p \"${GALAXY_SLOTS:-1}\"    -G guide.gff -C '/galaxy/server/database/objects/b/7/3/dataset_b73009b5-a028-4585-8595-e03638b35396.dat' -e -b ./special_de_output/sample1/  -f '0.15' -m '200' -a '10' -j '1' -c '2' -g '50' -M '0.95'    && ln -s '/galaxy/server/database/objects/9/4/b/dataset_94b533e8-d6cf-42c2-b261-85958a7bfa35.dat' ./special_de_output/sample1/output.gtf && TAB=$(printf '\\t') && CR=$(printf '\\r') && prepDE.py -i ./special_de_output/ -g gene_counts.csv -t transcript_counts.csv -l 75 -c --legend '/galaxy/server/database/objects/2/4/6/dataset_246ac82c-a13a-4dc2-986b-6e42626bdf78.dat' > /dev/null && sed -i.bak -e \"s/,/${TAB}/g\" -e \"s/${CR}//g\" '/galaxy/server/database/objects/2/4/6/dataset_246ac82c-a13a-4dc2-986b-6e42626bdf78.dat'  && sed -i.bak -e \"s/,/${TAB}/g\" -e \"s/${CR}//g\" gene_counts.csv transcript_counts.csv && head -n 1 gene_counts.csv | sed -e 's/sample1/stringtie_in1_bam/' > '/galaxy/server/database/objects/0/e/e/dataset_0ee961af-281b-49ae-b642-748ec1618fbd.dat' && head -n 1 transcript_counts.csv | sed -e 's/sample1/stringtie_in1_bam/' > '/galaxy/server/database/objects/c/b/d/dataset_cbda11ea-ec55-4507-a798-263b7243643b.dat' && tail -n +2 gene_counts.csv | sort -t\"${TAB}\" -k1,1 >> '/galaxy/server/database/objects/0/e/e/dataset_0ee961af-281b-49ae-b642-748ec1618fbd.dat' && tail -n +2 transcript_counts.csv | sort -t\"${TAB}\" -k1,1 >> '/galaxy/server/database/objects/c/b/d/dataset_cbda11ea-ec55-4507-a798-263b7243643b.dat'", "user_email": "tests@fake.org", "command_version": "2.1.1", "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"abundance_estimation\": false, \"bdist\": \"50\", \"bundle_fraction\": \"0.95\", \"disable_trimming\": false, \"fraction\": \"0.15\", \"min_anchor_cov\": \"1\", \"min_anchor_len\": \"10\", \"min_bundle_cov\": \"2\", \"min_tlen\": \"200\", \"multi_mapping\": false, \"name_prefix\": null, \"omit_sequences\": \"\"}", "guide": "{\"__current_case__\": 1, \"coverage_file\": true, \"guide_source\": {\"__current_case__\": 1, \"guide_gff_select\": \"history\", \"ref_hist\": {\"values\": [{\"id\": 119, \"src\": \"hda\"}]}}, \"input_estimation\": true, \"special_outputs\": {\"__current_case__\": 1, \"clustering\": true, \"key\": null, \"read_length\": \"75\", \"special_outputs_select\": \"deseq2\", \"string\": null}, \"use_guide\": \"yes\"}", "rna_strandness": "\"\"", "long_reads": "false"}, "inputs": {"input_bam": {"id": "4de92088ea6165b7", "src": "hda", "uuid": "3fd2f5d7-85d0-4432-9422-9799dbdbd783"}, "guide|guide_source|ref_hist": {"id": "24cbf756951f2b54", "src": "hda", "uuid": "f22c4178-9149-43b8-b786-0e08bfda4dfc"}}, "outputs": {"output_gtf": {"id": "9cf22fa5556a0e25", "src": "hda", "uuid": "94b533e8-d6cf-42c2-b261-85958a7bfa35"}, "coverage": {"id": "c68f06f8f6dd5983", "src": "hda", "uuid": "b73009b5-a028-4585-8595-e03638b35396"}, "gene_counts": {"id": "01313095b9f7b4a0", "src": "hda", "uuid": "0ee961af-281b-49ae-b642-748ec1618fbd"}, "transcript_counts": {"id": "2d5cfc9cb93a2d5d", "src": "hda", "uuid": "cbda11ea-ec55-4507-a798-263b7243643b"}, "legend": {"id": "c4e4177d42674143", "src": "hda", "uuid": "246ac82c-a13a-4dc2-986b-6e42626bdf78"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 19:02:17", "plugin": "core", "name": "end_epoch", "raw_value": "1723230137.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:02:17", "plugin": "core", "name": "start_epoch", "raw_value": "1723230137.0000000"}, {"title": "Memory Allocated (MB)", "value": "26843", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "26843.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "stringtie/2.1.1-6", "has_data": true, "data": {"tool_id": "stringtie", "tool_version": "2.1.1", "test_index": 6, "time_seconds": 37.57689094543457, "inputs": {"input_bam": {"src": "hda", "id": "d5d2d86cd59e00c4"}, "guide|guide_source|ref_hist": {"src": "hda", "id": "a24aeeb656c2fe4b"}, "guide|guide_source|guide_gff_select": "history", "guide|use_guide": "yes", "adv|abundance_estimation": true, "adv|fraction": "0.17"}, "job": {"model_class": "Job", "id": "bee46b0ba60e2a7e", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:02:55.273742", "update_time": "2024-08-09T19:03:09.807937", "galaxy_version": "24.1", "external_id": "gxy-9ckdl", "handler": null, "job_runner_name": null, "command_line": "mkdir -p ./special_de_output/sample1/ &&   ln -s '/galaxy/server/database/objects/f/f/f/dataset_fffe7dff-445a-4f77-b796-032b191a3a8f.dat' guide.gff &&  stringtie '/galaxy/server/database/objects/3/9/a/dataset_39ab9c18-a006-4ca3-b11e-04857d51d992.dat'    -o '/galaxy/server/database/objects/9/0/e/dataset_90e21f86-1c58-4878-b199-90dc32d62010.dat' -p \"${GALAXY_SLOTS:-1}\"    -G guide.gff  -b ./special_de_output/sample1/  -f '0.17' -m '200' -a '10' -j '1' -c '2' -g '50' -M '0.95'   -A '/galaxy/server/database/objects/9/d/c/dataset_9dc9b5c7-3b9a-4d8e-bde6-0787b61c1e61.dat'", "user_email": "tests@fake.org", "command_version": "2.1.1", "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"abundance_estimation\": true, \"bdist\": \"50\", \"bundle_fraction\": \"0.95\", \"disable_trimming\": false, \"fraction\": \"0.17\", \"min_anchor_cov\": \"1\", \"min_anchor_len\": \"10\", \"min_bundle_cov\": \"2\", \"min_tlen\": \"200\", \"multi_mapping\": false, \"name_prefix\": null, \"omit_sequences\": \"\"}", "guide": "{\"__current_case__\": 1, \"coverage_file\": false, \"guide_source\": {\"__current_case__\": 1, \"guide_gff_select\": \"history\", \"ref_hist\": {\"values\": [{\"id\": 126, \"src\": \"hda\"}]}}, \"input_estimation\": false, \"special_outputs\": {\"__current_case__\": 2, \"special_outputs_select\": \"no\"}, \"use_guide\": \"yes\"}", "rna_strandness": "\"\"", "long_reads": "false"}, "inputs": {"input_bam": {"id": "d5d2d86cd59e00c4", "src": "hda", "uuid": "39ab9c18-a006-4ca3-b11e-04857d51d992"}, "guide|guide_source|ref_hist": {"id": "a24aeeb656c2fe4b", "src": "hda", "uuid": "fffe7dff-445a-4f77-b796-032b191a3a8f"}}, "outputs": {"output_gtf": {"id": "63112856ba86c18d", "src": "hda", "uuid": "90e21f86-1c58-4878-b199-90dc32d62010"}, "gene_abundance_estimation": {"id": "4dff3ad29d6dbf63", "src": "hda", "uuid": "9dc9b5c7-3b9a-4d8e-bde6-0787b61c1e61"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 19:02:57", "plugin": "core", "name": "end_epoch", "raw_value": "1723230177.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:02:56", "plugin": "core", "name": "start_epoch", "raw_value": "1723230176.0000000"}, {"title": "Memory Allocated (MB)", "value": "26843", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "26843.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "stringtie/2.1.1-7", "has_data": true, "data": {"tool_id": "stringtie", "tool_version": "2.1.1", "test_index": 7, "time_seconds": 37.35183787345886, "inputs": {"input_bam": {"src": "hda", "id": "6577eb098922925b"}, "guide|guide_source|ref_hist": {"src": "hda", "id": "c0850144e04071bc"}, "guide|guide_source|guide_gff_select": "history", "guide|use_guide": "yes", "adv|fraction": "0.15"}, "job": {"model_class": "Job", "id": "1a472597e6c8608c", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:03:33.204203", "update_time": "2024-08-09T19:03:47.671304", "galaxy_version": "24.1", "external_id": "gxy-7nvfv", "handler": null, "job_runner_name": null, "command_line": "mkdir -p ./special_de_output/sample1/ &&   ln -s '/galaxy/server/database/objects/a/b/0/dataset_ab01b01c-bf2d-452f-98ce-df8dc6cad631.dat' guide.gff &&  stringtie '/galaxy/server/database/objects/7/c/e/dataset_7ce3cbaa-7e74-48b9-b9f9-58d9ae2da4b2.dat'    -o '/galaxy/server/database/objects/e/b/2/dataset_eb20f568-ab92-4879-97de-39e053695924.dat' -p \"${GALAXY_SLOTS:-1}\"    -G guide.gff  -b ./special_de_output/sample1/  -f '0.15' -m '200' -a '10' -j '1' -c '2' -g '50' -M '0.95'", "user_email": "tests@fake.org", "command_version": "2.1.1", "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"abundance_estimation\": false, \"bdist\": \"50\", \"bundle_fraction\": \"0.95\", \"disable_trimming\": false, \"fraction\": \"0.15\", \"min_anchor_cov\": \"1\", \"min_anchor_len\": \"10\", \"min_bundle_cov\": \"2\", \"min_tlen\": \"200\", \"multi_mapping\": false, \"name_prefix\": null, \"omit_sequences\": \"\"}", "guide": "{\"__current_case__\": 1, \"coverage_file\": false, \"guide_source\": {\"__current_case__\": 1, \"guide_gff_select\": \"history\", \"ref_hist\": {\"values\": [{\"id\": 130, \"src\": \"hda\"}]}}, \"input_estimation\": false, \"special_outputs\": {\"__current_case__\": 2, \"special_outputs_select\": \"no\"}, \"use_guide\": \"yes\"}", "rna_strandness": "\"\"", "long_reads": "false"}, "inputs": {"input_bam": {"id": "6577eb098922925b", "src": "hda", "uuid": "7ce3cbaa-7e74-48b9-b9f9-58d9ae2da4b2"}, "guide|guide_source|ref_hist": {"id": "c0850144e04071bc", "src": "hda", "uuid": "ab01b01c-bf2d-452f-98ce-df8dc6cad631"}}, "outputs": {"output_gtf": {"id": "4aec6dbd831065ec", "src": "hda", "uuid": "eb20f568-ab92-4879-97de-39e053695924"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 19:03:34", "plugin": "core", "name": "end_epoch", "raw_value": "1723230214.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:03:34", "plugin": "core", "name": "start_epoch", "raw_value": "1723230214.0000000"}, {"title": "Memory Allocated (MB)", "value": "26843", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "26843.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "stringtie/2.1.1-8", "has_data": true, "data": {"tool_id": "stringtie", "tool_version": "2.1.1", "test_index": 8, "time_seconds": 12.806034803390503, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "umi_tools_count/1.1.2+galaxy2-0", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 0, "time_seconds": 55.50465202331543, "inputs": {"input": {"src": "hda", "id": "c24f9b1dd43b9dde"}, "wide_format_cell_counts": false, "bc|extract_umi_method": "umis", "umi|method": "directional", "sc|gene_tag": "XF", "sc|skip_tags_regex": "^[__|Unassigned]", "sc|per_cell": false, "advanced|random_seed": "123456789"}, "job": {"model_class": "Job", "id": "c24f9b1dd43b9dde", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:34:31.954201", "update_time": "2024-08-09T18:35:02.972354", "galaxy_version": "24.1", "external_id": "gxy-wzwjp", "handler": null, "job_runner_name": null, "command_line": "ln -sf '/galaxy/server/database/objects/2/b/5/dataset_2b52cd4d-ac62-4cb0-8e3d-40c032fb8e2a.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/8/2/a/metadata_82a625b4-ada8-441e-a375-26e65cf21f0a.dat' 'input.bam.bai' &&   umi_tools count ''  --extract-umi-method umis   --method directional --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XF' --skip-tags-regex '^[__Unassigned]'     --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='123456789'  -I 'input.bam' -S '/galaxy/server/database/objects/f/1/9/dataset_f19ea8ff-7431-4f43-a999-f97f37977dd6.dat'  --log2stderr", "user_email": "tests@fake.org", "command_version": "", "params": {"wide_format_cell_counts": "false", "bc": "{\"__current_case__\": 2, \"extract_umi_method\": \"umis\"}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"directional\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XF\", \"gene_transcript_map\": null, \"per_cell\": false, \"per_contig\": false, \"skip_tags_regex\": \"^[__|Unassigned]\"}", "advanced": "{\"random_seed\": \"123456789\"}", "cond_extra": "{\"__current_case__\": 0, \"prepender\": \"none\"}", "log": "false", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"input": {"id": "c24f9b1dd43b9dde", "src": "hda", "uuid": "2b52cd4d-ac62-4cb0-8e3d-40c032fb8e2a"}}, "outputs": {"out_counts": {"id": "6cdd3c82809613b6", "src": "hda", "uuid": "f19ea8ff-7431-4f43-a999-f97f37977dd6"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/f/1/9/dataset_f19ea8ff-7431-4f43-a999-f97f37977dd6.dat --log2stderr\n# job started at Fri Aug  9 18:34:46 2024 on gxy-wzwjp-l6qh9 -- 13bbf4ca-55d5-40b0-b9b7-625706dc2fc2\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : False\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/f/1/9/dataset_f19ea8ff-7431-4f43-a999-f97f37977dd6.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : False\n2024-08-09 18:34:46,124 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/f/1/9/dataset_f19ea8ff-7431-4f43-a999-f97f37977dd6.dat --log2stderr\n2024-08-09 18:34:46,168 INFO Input Reads: 1203\n2024-08-09 18:34:46,168 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:34:46,168 INFO Number of (post deduplication) reads counted: 141\n# job finished in 0 seconds at Fri Aug  9 18:34:46 2024 --  0.71  0.40  0.00  0.00 -- 13bbf4ca-55d5-40b0-b9b7-625706dc2fc2\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/f/1/9/dataset_f19ea8ff-7431-4f43-a999-f97f37977dd6.dat --log2stderr\n# job started at Fri Aug  9 18:34:46 2024 on gxy-wzwjp-l6qh9 -- 13bbf4ca-55d5-40b0-b9b7-625706dc2fc2\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : False\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/f/1/9/dataset_f19ea8ff-7431-4f43-a999-f97f37977dd6.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : False\n2024-08-09 18:34:46,124 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/f/1/9/dataset_f19ea8ff-7431-4f43-a999-f97f37977dd6.dat --log2stderr\n2024-08-09 18:34:46,168 INFO Input Reads: 1203\n2024-08-09 18:34:46,168 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:34:46,168 INFO Number of (post deduplication) reads counted: 141\n# job finished in 0 seconds at Fri Aug  9 18:34:46 2024 --  0.71  0.40  0.00  0.00 -- 13bbf4ca-55d5-40b0-b9b7-625706dc2fc2\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:34:46", "plugin": "core", "name": "end_epoch", "raw_value": "1723228486.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:34:44", "plugin": "core", "name": "start_epoch", "raw_value": "1723228484.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "umi_tools_count/1.1.2+galaxy2-0", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 0, "time_seconds": 41.340104818344116, "inputs": {"input": {"src": "hda", "id": "9ddd09c20a0552b3"}, "wide_format_cell_counts": false, "bc|extract_umi_method": "umis", "umi|method": "directional", "sc|gene_tag": "XF", "sc|skip_tags_regex": "^[__|Unassigned]", "sc|per_cell": false, "advanced|random_seed": "123456789"}, "job": {"model_class": "Job", "id": "9ddd09c20a0552b3", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:39:29.541525", "update_time": "2024-08-09T18:39:45.856229", "galaxy_version": "24.1", "external_id": "gxy-frst4", "handler": null, "job_runner_name": null, "command_line": "ln -sf '/galaxy/server/database/objects/2/e/6/dataset_2e6ca143-f514-4795-a57c-9f770fb7dc01.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/3/b/5/metadata_3b54078d-2d00-4917-a814-6e732f55a98e.dat' 'input.bam.bai' &&   umi_tools count ''  --extract-umi-method umis   --method directional --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XF' --skip-tags-regex '^[__Unassigned]'     --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='123456789'  -I 'input.bam' -S '/galaxy/server/database/objects/b/9/c/dataset_b9ce5389-e45b-4d9f-ba2f-6602fd7912f9.dat'  --log2stderr", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "log": "false", "cond_extra": "{\"__current_case__\": 0, \"prepender\": \"none\"}", "advanced": "{\"random_seed\": \"123456789\"}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XF\", \"gene_transcript_map\": null, \"per_cell\": false, \"per_contig\": false, \"skip_tags_regex\": \"^[__|Unassigned]\"}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"directional\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "bc": "{\"__current_case__\": 2, \"extract_umi_method\": \"umis\"}", "wide_format_cell_counts": "false"}, "inputs": {"input": {"id": "9ddd09c20a0552b3", "src": "hda", "uuid": "2e6ca143-f514-4795-a57c-9f770fb7dc01"}}, "outputs": {"out_counts": {"id": "720e99fe8b3c55a6", "src": "hda", "uuid": "b9ce5389-e45b-4d9f-ba2f-6602fd7912f9"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/b/9/c/dataset_b9ce5389-e45b-4d9f-ba2f-6602fd7912f9.dat --log2stderr\n# job started at Fri Aug  9 18:39:32 2024 on gxy-frst4-lg8q4 -- 55de8cc2-b7e7-4b5b-ab80-79f55621b52f\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : False\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/b/9/c/dataset_b9ce5389-e45b-4d9f-ba2f-6602fd7912f9.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : False\n2024-08-09 18:39:32,749 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/b/9/c/dataset_b9ce5389-e45b-4d9f-ba2f-6602fd7912f9.dat --log2stderr\n2024-08-09 18:39:32,792 INFO Input Reads: 1203\n2024-08-09 18:39:32,792 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:39:32,792 INFO Number of (post deduplication) reads counted: 141\n# job finished in 0 seconds at Fri Aug  9 18:39:32 2024 --  0.66  0.35  0.00  0.00 -- 55de8cc2-b7e7-4b5b-ab80-79f55621b52f\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/b/9/c/dataset_b9ce5389-e45b-4d9f-ba2f-6602fd7912f9.dat --log2stderr\n# job started at Fri Aug  9 18:39:32 2024 on gxy-frst4-lg8q4 -- 55de8cc2-b7e7-4b5b-ab80-79f55621b52f\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : False\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/b/9/c/dataset_b9ce5389-e45b-4d9f-ba2f-6602fd7912f9.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : False\n2024-08-09 18:39:32,749 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/b/9/c/dataset_b9ce5389-e45b-4d9f-ba2f-6602fd7912f9.dat --log2stderr\n2024-08-09 18:39:32,792 INFO Input Reads: 1203\n2024-08-09 18:39:32,792 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:39:32,792 INFO Number of (post deduplication) reads counted: 141\n# job finished in 0 seconds at Fri Aug  9 18:39:32 2024 --  0.66  0.35  0.00  0.00 -- 55de8cc2-b7e7-4b5b-ab80-79f55621b52f\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:39:31", "plugin": "core", "name": "start_epoch", "raw_value": "1723228771.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:39:32", "plugin": "core", "name": "end_epoch", "raw_value": "1723228772.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "umi_tools_count/1.1.2+galaxy2-0", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 0, "time_seconds": 37.25797724723816, "inputs": {"input": {"src": "hda", "id": "ccc9cd6ed7371a21"}, "wide_format_cell_counts": false, "bc|extract_umi_method": "umis", "umi|method": "directional", "sc|gene_tag": "XF", "sc|skip_tags_regex": "^[__|Unassigned]", "sc|per_cell": false, "advanced|random_seed": "123456789"}, "job": {"model_class": "Job", "id": "ccc9cd6ed7371a21", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:44:04.977710", "update_time": "2024-08-09T18:44:20.491748", "galaxy_version": "24.1", "external_id": "gxy-d9fzs", "handler": null, "job_runner_name": null, "command_line": "ln -sf '/galaxy/server/database/objects/c/5/3/dataset_c53aff26-5c4b-4895-8e36-b5fbc23de04d.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/2/3/8/metadata_2384a901-5b0c-4de9-aa61-c25a5981c7aa.dat' 'input.bam.bai' &&   umi_tools count ''  --extract-umi-method umis   --method directional --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XF' --skip-tags-regex '^[__Unassigned]'     --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='123456789'  -I 'input.bam' -S '/galaxy/server/database/objects/2/3/2/dataset_232fc465-07b3-4d4a-a6dc-2a3c2a8ebd14.dat'  --log2stderr", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "log": "false", "cond_extra": "{\"__current_case__\": 0, \"prepender\": \"none\"}", "advanced": "{\"random_seed\": \"123456789\"}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XF\", \"gene_transcript_map\": null, \"per_cell\": false, \"per_contig\": false, \"skip_tags_regex\": \"^[__|Unassigned]\"}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"directional\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "bc": "{\"__current_case__\": 2, \"extract_umi_method\": \"umis\"}", "wide_format_cell_counts": "false"}, "inputs": {"input": {"id": "ccc9cd6ed7371a21", "src": "hda", "uuid": "c53aff26-5c4b-4895-8e36-b5fbc23de04d"}}, "outputs": {"out_counts": {"id": "9d4881db08a9e3ba", "src": "hda", "uuid": "232fc465-07b3-4d4a-a6dc-2a3c2a8ebd14"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/2/3/2/dataset_232fc465-07b3-4d4a-a6dc-2a3c2a8ebd14.dat --log2stderr\n# job started at Fri Aug  9 18:44:07 2024 on gxy-d9fzs-qftgv -- 1784f461-62b4-4fe1-b382-abe747b4bc3e\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : False\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/2/3/2/dataset_232fc465-07b3-4d4a-a6dc-2a3c2a8ebd14.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : False\n2024-08-09 18:44:07,808 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/2/3/2/dataset_232fc465-07b3-4d4a-a6dc-2a3c2a8ebd14.dat --log2stderr\n2024-08-09 18:44:07,843 INFO Input Reads: 1203\n2024-08-09 18:44:07,843 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:44:07,843 INFO Number of (post deduplication) reads counted: 141\n# job finished in 0 seconds at Fri Aug  9 18:44:07 2024 --  0.62  0.30  0.00  0.00 -- 1784f461-62b4-4fe1-b382-abe747b4bc3e\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/2/3/2/dataset_232fc465-07b3-4d4a-a6dc-2a3c2a8ebd14.dat --log2stderr\n# job started at Fri Aug  9 18:44:07 2024 on gxy-d9fzs-qftgv -- 1784f461-62b4-4fe1-b382-abe747b4bc3e\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : False\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/2/3/2/dataset_232fc465-07b3-4d4a-a6dc-2a3c2a8ebd14.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : False\n2024-08-09 18:44:07,808 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/2/3/2/dataset_232fc465-07b3-4d4a-a6dc-2a3c2a8ebd14.dat --log2stderr\n2024-08-09 18:44:07,843 INFO Input Reads: 1203\n2024-08-09 18:44:07,843 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:44:07,843 INFO Number of (post deduplication) reads counted: 141\n# job finished in 0 seconds at Fri Aug  9 18:44:07 2024 --  0.62  0.30  0.00  0.00 -- 1784f461-62b4-4fe1-b382-abe747b4bc3e\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:44:07", "plugin": "core", "name": "end_epoch", "raw_value": "1723229047.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:44:06", "plugin": "core", "name": "start_epoch", "raw_value": "1723229046.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "umi_tools_count/1.1.2+galaxy2-1", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 1, "time_seconds": 41.491918087005615, "inputs": {"input": {"src": "hda", "id": "169b52f89400c989"}, "wide_format_cell_counts": false, "bc|extract_umi_method": "umis", "umi|method": "directional", "sc|gene_tag": "XF", "sc|skip_tags_regex": "^[__|Unassigned]", "sc|per_cell": false, "advanced|random_seed": "123456789"}, "job": {"model_class": "Job", "id": "169b52f89400c989", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:35:29.057405", "update_time": "2024-08-09T18:35:44.316783", "galaxy_version": "24.1", "external_id": "gxy-nv8fh", "handler": null, "job_runner_name": null, "command_line": "samtools sort --no-PG '/galaxy/server/database/objects/3/4/f/dataset_34f3da24-56c4-45a5-9d2e-27672755f7cf.dat' > 'input.bam' && samtools index -b 'input.bam' &&   umi_tools count ''  --extract-umi-method umis   --method directional --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XF' --skip-tags-regex '^[__Unassigned]'     --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='123456789'  -I 'input.bam' -S '/galaxy/server/database/objects/7/3/4/dataset_734028ba-d4b1-48b8-a4bc-be95077d25b7.dat'  --log2stderr", "user_email": "tests@fake.org", "command_version": "", "params": {"wide_format_cell_counts": "false", "bc": "{\"__current_case__\": 2, \"extract_umi_method\": \"umis\"}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"directional\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XF\", \"gene_transcript_map\": null, \"per_cell\": false, \"per_contig\": false, \"skip_tags_regex\": \"^[__|Unassigned]\"}", "advanced": "{\"random_seed\": \"123456789\"}", "cond_extra": "{\"__current_case__\": 0, \"prepender\": \"none\"}", "log": "false", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"input": {"id": "169b52f89400c989", "src": "hda", "uuid": "34f3da24-56c4-45a5-9d2e-27672755f7cf"}}, "outputs": {"out_counts": {"id": "72ea42bce54b215a", "src": "hda", "uuid": "734028ba-d4b1-48b8-a4bc-be95077d25b7"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/7/3/4/dataset_734028ba-d4b1-48b8-a4bc-be95077d25b7.dat --log2stderr\n# job started at Fri Aug  9 18:35:32 2024 on gxy-nv8fh-ntrqh -- 8a078b77-60f9-415c-be02-7825e4faef6c\n# pid: 26, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : False\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/7/3/4/dataset_734028ba-d4b1-48b8-a4bc-be95077d25b7.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : False\n2024-08-09 18:35:32,243 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/7/3/4/dataset_734028ba-d4b1-48b8-a4bc-be95077d25b7.dat --log2stderr\n2024-08-09 18:35:32,282 INFO Input Reads: 1203\n2024-08-09 18:35:32,282 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:35:32,282 INFO Number of (post deduplication) reads counted: 141\n# job finished in 0 seconds at Fri Aug  9 18:35:32 2024 --  0.67  0.30  0.00  0.00 -- 8a078b77-60f9-415c-be02-7825e4faef6c\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/7/3/4/dataset_734028ba-d4b1-48b8-a4bc-be95077d25b7.dat --log2stderr\n# job started at Fri Aug  9 18:35:32 2024 on gxy-nv8fh-ntrqh -- 8a078b77-60f9-415c-be02-7825e4faef6c\n# pid: 26, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : False\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/7/3/4/dataset_734028ba-d4b1-48b8-a4bc-be95077d25b7.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : False\n2024-08-09 18:35:32,243 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/7/3/4/dataset_734028ba-d4b1-48b8-a4bc-be95077d25b7.dat --log2stderr\n2024-08-09 18:35:32,282 INFO Input Reads: 1203\n2024-08-09 18:35:32,282 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:35:32,282 INFO Number of (post deduplication) reads counted: 141\n# job finished in 0 seconds at Fri Aug  9 18:35:32 2024 --  0.67  0.30  0.00  0.00 -- 8a078b77-60f9-415c-be02-7825e4faef6c\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:35:32", "plugin": "core", "name": "end_epoch", "raw_value": "1723228532.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:35:31", "plugin": "core", "name": "start_epoch", "raw_value": "1723228531.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "umi_tools_count/1.1.2+galaxy2-1", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 1, "time_seconds": 41.366822719573975, "inputs": {"input": {"src": "hda", "id": "898a97bfd0b1bda1"}, "wide_format_cell_counts": false, "bc|extract_umi_method": "umis", "umi|method": "directional", "sc|gene_tag": "XF", "sc|skip_tags_regex": "^[__|Unassigned]", "sc|per_cell": false, "advanced|random_seed": "123456789"}, "job": {"model_class": "Job", "id": "898a97bfd0b1bda1", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:40:10.956938", "update_time": "2024-08-09T18:40:27.487539", "galaxy_version": "24.1", "external_id": "gxy-clh66", "handler": null, "job_runner_name": null, "command_line": "samtools sort --no-PG '/galaxy/server/database/objects/7/7/1/dataset_7713917f-ad06-41d6-b3f9-9b7cc0f75fff.dat' > 'input.bam' && samtools index -b 'input.bam' &&   umi_tools count ''  --extract-umi-method umis   --method directional --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XF' --skip-tags-regex '^[__Unassigned]'     --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='123456789'  -I 'input.bam' -S '/galaxy/server/database/objects/8/f/7/dataset_8f7017a7-6b6a-4f70-80ab-0edc5d6a4191.dat'  --log2stderr", "user_email": "tests@fake.org", "command_version": "", "params": {"wide_format_cell_counts": "false", "bc": "{\"__current_case__\": 2, \"extract_umi_method\": \"umis\"}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"directional\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XF\", \"gene_transcript_map\": null, \"per_cell\": false, \"per_contig\": false, \"skip_tags_regex\": \"^[__|Unassigned]\"}", "advanced": "{\"random_seed\": \"123456789\"}", "cond_extra": "{\"__current_case__\": 0, \"prepender\": \"none\"}", "log": "false", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"input": {"id": "898a97bfd0b1bda1", "src": "hda", "uuid": "7713917f-ad06-41d6-b3f9-9b7cc0f75fff"}}, "outputs": {"out_counts": {"id": "5eb6edbfb1cd2dd8", "src": "hda", "uuid": "8f7017a7-6b6a-4f70-80ab-0edc5d6a4191"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/8/f/7/dataset_8f7017a7-6b6a-4f70-80ab-0edc5d6a4191.dat --log2stderr\n# job started at Fri Aug  9 18:40:13 2024 on gxy-clh66-btwsg -- e6891743-0072-464f-87f2-21e762f5732d\n# pid: 26, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : False\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/8/f/7/dataset_8f7017a7-6b6a-4f70-80ab-0edc5d6a4191.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : False\n2024-08-09 18:40:13,868 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/8/f/7/dataset_8f7017a7-6b6a-4f70-80ab-0edc5d6a4191.dat --log2stderr\n2024-08-09 18:40:13,899 INFO Input Reads: 1203\n2024-08-09 18:40:13,899 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:40:13,900 INFO Number of (post deduplication) reads counted: 141\n# job finished in 0 seconds at Fri Aug  9 18:40:13 2024 --  0.66  0.30  0.00  0.00 -- e6891743-0072-464f-87f2-21e762f5732d\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/8/f/7/dataset_8f7017a7-6b6a-4f70-80ab-0edc5d6a4191.dat --log2stderr\n# job started at Fri Aug  9 18:40:13 2024 on gxy-clh66-btwsg -- e6891743-0072-464f-87f2-21e762f5732d\n# pid: 26, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : False\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/8/f/7/dataset_8f7017a7-6b6a-4f70-80ab-0edc5d6a4191.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : False\n2024-08-09 18:40:13,868 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/8/f/7/dataset_8f7017a7-6b6a-4f70-80ab-0edc5d6a4191.dat --log2stderr\n2024-08-09 18:40:13,899 INFO Input Reads: 1203\n2024-08-09 18:40:13,899 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:40:13,900 INFO Number of (post deduplication) reads counted: 141\n# job finished in 0 seconds at Fri Aug  9 18:40:13 2024 --  0.66  0.30  0.00  0.00 -- e6891743-0072-464f-87f2-21e762f5732d\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:40:12", "plugin": "core", "name": "start_epoch", "raw_value": "1723228812.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:40:14", "plugin": "core", "name": "end_epoch", "raw_value": "1723228814.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "umi_tools_count/1.1.2+galaxy2-1", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 1, "time_seconds": 37.31622838973999, "inputs": {"input": {"src": "hda", "id": "86b4a226476fa4d1"}, "wide_format_cell_counts": false, "bc|extract_umi_method": "umis", "umi|method": "directional", "sc|gene_tag": "XF", "sc|skip_tags_regex": "^[__|Unassigned]", "sc|per_cell": false, "advanced|random_seed": "123456789"}, "job": {"model_class": "Job", "id": "86b4a226476fa4d1", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:44:43.012836", "update_time": "2024-08-09T18:44:57.733732", "galaxy_version": "24.1", "external_id": "gxy-75wz4", "handler": null, "job_runner_name": null, "command_line": "samtools sort --no-PG '/galaxy/server/database/objects/9/d/c/dataset_9dc455d1-614a-4ae1-aef4-14b550d7b839.dat' > 'input.bam' && samtools index -b 'input.bam' &&   umi_tools count ''  --extract-umi-method umis   --method directional --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XF' --skip-tags-regex '^[__Unassigned]'     --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='123456789'  -I 'input.bam' -S '/galaxy/server/database/objects/f/b/3/dataset_fb3f69ff-7875-4793-bc01-e0034aeb23a4.dat'  --log2stderr", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "log": "false", "cond_extra": "{\"__current_case__\": 0, \"prepender\": \"none\"}", "advanced": "{\"random_seed\": \"123456789\"}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XF\", \"gene_transcript_map\": null, \"per_cell\": false, \"per_contig\": false, \"skip_tags_regex\": \"^[__|Unassigned]\"}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"directional\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "bc": "{\"__current_case__\": 2, \"extract_umi_method\": \"umis\"}", "wide_format_cell_counts": "false"}, "inputs": {"input": {"id": "86b4a226476fa4d1", "src": "hda", "uuid": "9dc455d1-614a-4ae1-aef4-14b550d7b839"}}, "outputs": {"out_counts": {"id": "602db47484bfc446", "src": "hda", "uuid": "fb3f69ff-7875-4793-bc01-e0034aeb23a4"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/f/b/3/dataset_fb3f69ff-7875-4793-bc01-e0034aeb23a4.dat --log2stderr\n# job started at Fri Aug  9 18:44:45 2024 on gxy-75wz4-dvkz2 -- ff64490d-3fe9-4cb8-8ca3-fda736b0f675\n# pid: 26, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : False\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/f/b/3/dataset_fb3f69ff-7875-4793-bc01-e0034aeb23a4.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : False\n2024-08-09 18:44:45,786 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/f/b/3/dataset_fb3f69ff-7875-4793-bc01-e0034aeb23a4.dat --log2stderr\n2024-08-09 18:44:45,819 INFO Input Reads: 1203\n2024-08-09 18:44:45,819 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:44:45,819 INFO Number of (post deduplication) reads counted: 141\n# job finished in 0 seconds at Fri Aug  9 18:44:45 2024 --  0.62  0.31  0.00  0.00 -- ff64490d-3fe9-4cb8-8ca3-fda736b0f675\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/f/b/3/dataset_fb3f69ff-7875-4793-bc01-e0034aeb23a4.dat --log2stderr\n# job started at Fri Aug  9 18:44:45 2024 on gxy-75wz4-dvkz2 -- ff64490d-3fe9-4cb8-8ca3-fda736b0f675\n# pid: 26, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : False\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/f/b/3/dataset_fb3f69ff-7875-4793-bc01-e0034aeb23a4.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : False\n2024-08-09 18:44:45,786 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/f/b/3/dataset_fb3f69ff-7875-4793-bc01-e0034aeb23a4.dat --log2stderr\n2024-08-09 18:44:45,819 INFO Input Reads: 1203\n2024-08-09 18:44:45,819 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:44:45,819 INFO Number of (post deduplication) reads counted: 141\n# job finished in 0 seconds at Fri Aug  9 18:44:45 2024 --  0.62  0.31  0.00  0.00 -- ff64490d-3fe9-4cb8-8ca3-fda736b0f675\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:44:46", "plugin": "core", "name": "end_epoch", "raw_value": "1723229086.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:44:44", "plugin": "core", "name": "start_epoch", "raw_value": "1723229084.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "umi_tools_count/1.1.2+galaxy2-2", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 2, "time_seconds": 39.9718234539032, "inputs": {"input": {"src": "hda", "id": "7f8b5b7c544e9da9"}, "wide_format_cell_counts": false, "bc|extract_umi_method": "umis", "umi|method": "directional", "sc|gene_tag": "XF", "sc|skip_tags_regex": "^[__|Unassigned]", "sc|per_cell": true, "advanced|random_seed": "123456789"}, "job": {"model_class": "Job", "id": "7f8b5b7c544e9da9", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:36:08.790233", "update_time": "2024-08-09T18:36:24.416216", "galaxy_version": "24.1", "external_id": "gxy-w6pdf", "handler": null, "job_runner_name": null, "command_line": "ln -sf '/galaxy/server/database/objects/2/6/5/dataset_265335dc-d910-4b64-8bc8-714eedd85ea3.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/6/f/5/metadata_6f5f05de-c8e8-420f-867a-8fc5c1931829.dat' 'input.bam.bai' &&   umi_tools count ''  --extract-umi-method umis   --method directional --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XF' --skip-tags-regex '^[__Unassigned]'  --per-cell   --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='123456789'  -I 'input.bam' -S '/galaxy/server/database/objects/5/6/c/dataset_56c3ef12-172e-4110-9e03-de6338651912.dat'  --log2stderr", "user_email": "tests@fake.org", "command_version": "", "params": {"wide_format_cell_counts": "false", "bc": "{\"__current_case__\": 2, \"extract_umi_method\": \"umis\"}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"directional\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XF\", \"gene_transcript_map\": null, \"per_cell\": true, \"per_contig\": false, \"skip_tags_regex\": \"^[__|Unassigned]\"}", "advanced": "{\"random_seed\": \"123456789\"}", "cond_extra": "{\"__current_case__\": 0, \"prepender\": \"none\"}", "log": "false", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"input": {"id": "7f8b5b7c544e9da9", "src": "hda", "uuid": "265335dc-d910-4b64-8bc8-714eedd85ea3"}}, "outputs": {"out_counts": {"id": "ac2f1c8ac83c7cfb", "src": "hda", "uuid": "56c3ef12-172e-4110-9e03-de6338651912"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/5/6/c/dataset_56c3ef12-172e-4110-9e03-de6338651912.dat --log2stderr\n# job started at Fri Aug  9 18:36:11 2024 on gxy-w6pdf-skz84 -- 70290618-f298-470d-ba96-34162432ed78\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/5/6/c/dataset_56c3ef12-172e-4110-9e03-de6338651912.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : False\n2024-08-09 18:36:11,520 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/5/6/c/dataset_56c3ef12-172e-4110-9e03-de6338651912.dat --log2stderr\n2024-08-09 18:36:11,553 INFO Input Reads: 1203\n2024-08-09 18:36:11,553 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:36:11,553 INFO Number of (post deduplication) reads counted: 145\n# job finished in 0 seconds at Fri Aug  9 18:36:11 2024 --  0.70  0.32  0.00  0.00 -- 70290618-f298-470d-ba96-34162432ed78\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/5/6/c/dataset_56c3ef12-172e-4110-9e03-de6338651912.dat --log2stderr\n# job started at Fri Aug  9 18:36:11 2024 on gxy-w6pdf-skz84 -- 70290618-f298-470d-ba96-34162432ed78\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/5/6/c/dataset_56c3ef12-172e-4110-9e03-de6338651912.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : False\n2024-08-09 18:36:11,520 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/5/6/c/dataset_56c3ef12-172e-4110-9e03-de6338651912.dat --log2stderr\n2024-08-09 18:36:11,553 INFO Input Reads: 1203\n2024-08-09 18:36:11,553 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:36:11,553 INFO Number of (post deduplication) reads counted: 145\n# job finished in 0 seconds at Fri Aug  9 18:36:11 2024 --  0.70  0.32  0.00  0.00 -- 70290618-f298-470d-ba96-34162432ed78\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:36:11", "plugin": "core", "name": "end_epoch", "raw_value": "1723228571.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:36:10", "plugin": "core", "name": "start_epoch", "raw_value": "1723228570.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "umi_tools_count/1.1.2+galaxy2-2", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 2, "time_seconds": 42.377620697021484, "inputs": {"input": {"src": "hda", "id": "f73917acb18cd649"}, "wide_format_cell_counts": false, "bc|extract_umi_method": "umis", "umi|method": "directional", "sc|gene_tag": "XF", "sc|skip_tags_regex": "^[__|Unassigned]", "sc|per_cell": true, "advanced|random_seed": "123456789"}, "job": {"model_class": "Job", "id": "f73917acb18cd649", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:40:54.453467", "update_time": "2024-08-09T18:41:09.790683", "galaxy_version": "24.1", "external_id": "gxy-spjgp", "handler": null, "job_runner_name": null, "command_line": "ln -sf '/galaxy/server/database/objects/4/8/a/dataset_48a99b25-d3d9-424c-9baf-c0dbf1905b89.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/0/a/9/metadata_0a95e25c-bee4-4513-b24f-2d32b0939ea3.dat' 'input.bam.bai' &&   umi_tools count ''  --extract-umi-method umis   --method directional --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XF' --skip-tags-regex '^[__Unassigned]'  --per-cell   --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='123456789'  -I 'input.bam' -S '/galaxy/server/database/objects/9/4/8/dataset_9481d45e-58f4-463e-ac38-d92a803d3508.dat'  --log2stderr", "user_email": "tests@fake.org", "command_version": "", "params": {"wide_format_cell_counts": "false", "bc": "{\"__current_case__\": 2, \"extract_umi_method\": \"umis\"}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"directional\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XF\", \"gene_transcript_map\": null, \"per_cell\": true, \"per_contig\": false, \"skip_tags_regex\": \"^[__|Unassigned]\"}", "advanced": "{\"random_seed\": \"123456789\"}", "cond_extra": "{\"__current_case__\": 0, \"prepender\": \"none\"}", "log": "false", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"input": {"id": "f73917acb18cd649", "src": "hda", "uuid": "48a99b25-d3d9-424c-9baf-c0dbf1905b89"}}, "outputs": {"out_counts": {"id": "c5b2b858eae9dc43", "src": "hda", "uuid": "9481d45e-58f4-463e-ac38-d92a803d3508"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/9/4/8/dataset_9481d45e-58f4-463e-ac38-d92a803d3508.dat --log2stderr\n# job started at Fri Aug  9 18:40:56 2024 on gxy-spjgp-rvcvg -- 86896aed-db61-49ba-b32d-1c080f3a4337\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/9/4/8/dataset_9481d45e-58f4-463e-ac38-d92a803d3508.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : False\n2024-08-09 18:40:56,969 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/9/4/8/dataset_9481d45e-58f4-463e-ac38-d92a803d3508.dat --log2stderr\n2024-08-09 18:40:57,004 INFO Input Reads: 1203\n2024-08-09 18:40:57,004 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:40:57,005 INFO Number of (post deduplication) reads counted: 145\n# job finished in 0 seconds at Fri Aug  9 18:40:57 2024 --  0.68  0.31  0.00  0.00 -- 86896aed-db61-49ba-b32d-1c080f3a4337\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/9/4/8/dataset_9481d45e-58f4-463e-ac38-d92a803d3508.dat --log2stderr\n# job started at Fri Aug  9 18:40:56 2024 on gxy-spjgp-rvcvg -- 86896aed-db61-49ba-b32d-1c080f3a4337\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/9/4/8/dataset_9481d45e-58f4-463e-ac38-d92a803d3508.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : False\n2024-08-09 18:40:56,969 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/9/4/8/dataset_9481d45e-58f4-463e-ac38-d92a803d3508.dat --log2stderr\n2024-08-09 18:40:57,004 INFO Input Reads: 1203\n2024-08-09 18:40:57,004 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:40:57,005 INFO Number of (post deduplication) reads counted: 145\n# job finished in 0 seconds at Fri Aug  9 18:40:57 2024 --  0.68  0.31  0.00  0.00 -- 86896aed-db61-49ba-b32d-1c080f3a4337\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:40:55", "plugin": "core", "name": "start_epoch", "raw_value": "1723228855.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:40:57", "plugin": "core", "name": "end_epoch", "raw_value": "1723228857.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "umi_tools_count/1.1.2+galaxy2-2", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 2, "time_seconds": 38.28272080421448, "inputs": {"input": {"src": "hda", "id": "cee0de11b2408326"}, "wide_format_cell_counts": false, "bc|extract_umi_method": "umis", "umi|method": "directional", "sc|gene_tag": "XF", "sc|skip_tags_regex": "^[__|Unassigned]", "sc|per_cell": true, "advanced|random_seed": "123456789"}, "job": {"model_class": "Job", "id": "cee0de11b2408326", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:45:20.705290", "update_time": "2024-08-09T18:45:36.183869", "galaxy_version": "24.1", "external_id": "gxy-xfpzn", "handler": null, "job_runner_name": null, "command_line": "ln -sf '/galaxy/server/database/objects/e/3/d/dataset_e3dac283-e276-47b6-b8cd-217d63dbefdc.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/4/d/9/metadata_4d9b6c4a-4cc1-4816-a94f-abe8992d5590.dat' 'input.bam.bai' &&   umi_tools count ''  --extract-umi-method umis   --method directional --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XF' --skip-tags-regex '^[__Unassigned]'  --per-cell   --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='123456789'  -I 'input.bam' -S '/galaxy/server/database/objects/b/b/6/dataset_bb69f97e-a39a-407d-9aa4-3557c59ff6d2.dat'  --log2stderr", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "log": "false", "cond_extra": "{\"__current_case__\": 0, \"prepender\": \"none\"}", "advanced": "{\"random_seed\": \"123456789\"}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XF\", \"gene_transcript_map\": null, \"per_cell\": true, \"per_contig\": false, \"skip_tags_regex\": \"^[__|Unassigned]\"}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"directional\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "bc": "{\"__current_case__\": 2, \"extract_umi_method\": \"umis\"}", "wide_format_cell_counts": "false"}, "inputs": {"input": {"id": "cee0de11b2408326", "src": "hda", "uuid": "e3dac283-e276-47b6-b8cd-217d63dbefdc"}}, "outputs": {"out_counts": {"id": "2c396b3d4bb822be", "src": "hda", "uuid": "bb69f97e-a39a-407d-9aa4-3557c59ff6d2"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/b/b/6/dataset_bb69f97e-a39a-407d-9aa4-3557c59ff6d2.dat --log2stderr\n# job started at Fri Aug  9 18:45:24 2024 on gxy-xfpzn-4gfsj -- a39ea4d4-a755-4a07-b331-c8d6fbc88339\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/b/b/6/dataset_bb69f97e-a39a-407d-9aa4-3557c59ff6d2.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : False\n2024-08-09 18:45:24,118 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/b/b/6/dataset_bb69f97e-a39a-407d-9aa4-3557c59ff6d2.dat --log2stderr\n2024-08-09 18:45:24,154 INFO Input Reads: 1203\n2024-08-09 18:45:24,154 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:45:24,154 INFO Number of (post deduplication) reads counted: 145\n# job finished in 0 seconds at Fri Aug  9 18:45:24 2024 --  0.64  0.28  0.00  0.00 -- a39ea4d4-a755-4a07-b331-c8d6fbc88339\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/b/b/6/dataset_bb69f97e-a39a-407d-9aa4-3557c59ff6d2.dat --log2stderr\n# job started at Fri Aug  9 18:45:24 2024 on gxy-xfpzn-4gfsj -- a39ea4d4-a755-4a07-b331-c8d6fbc88339\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/b/b/6/dataset_bb69f97e-a39a-407d-9aa4-3557c59ff6d2.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : False\n2024-08-09 18:45:24,118 INFO command: count  --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/b/b/6/dataset_bb69f97e-a39a-407d-9aa4-3557c59ff6d2.dat --log2stderr\n2024-08-09 18:45:24,154 INFO Input Reads: 1203\n2024-08-09 18:45:24,154 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:45:24,154 INFO Number of (post deduplication) reads counted: 145\n# job finished in 0 seconds at Fri Aug  9 18:45:24 2024 --  0.64  0.28  0.00  0.00 -- a39ea4d4-a755-4a07-b331-c8d6fbc88339\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:45:24", "plugin": "core", "name": "end_epoch", "raw_value": "1723229124.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:45:23", "plugin": "core", "name": "start_epoch", "raw_value": "1723229123.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "umi_tools_count/1.1.2+galaxy2-3", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 3, "time_seconds": 38.43875694274902, "inputs": {"input": {"src": "hda", "id": "f6911d7519def1ff"}, "wide_format_cell_counts": true, "bc|extract_umi_method": "umis", "umi|method": "directional", "sc|gene_tag": "XF", "sc|skip_tags_regex": "^[__|Unassigned]", "sc|per_cell": true, "advanced|random_seed": "123456789"}, "job": {"model_class": "Job", "id": "f6911d7519def1ff", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:36:47.635214", "update_time": "2024-08-09T18:37:03.007848", "galaxy_version": "24.1", "external_id": "gxy-6zgjn", "handler": null, "job_runner_name": null, "command_line": "ln -sf '/galaxy/server/database/objects/c/1/9/dataset_c1978b1a-1aa6-4325-92b2-dc9bbf64f064.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/4/4/f/metadata_44f29a3f-17da-450d-bfcd-b49b801cab76.dat' 'input.bam.bai' &&   umi_tools count '--wide-format-cell-counts'  --extract-umi-method umis   --method directional --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XF' --skip-tags-regex '^[__Unassigned]'  --per-cell   --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='123456789'  -I 'input.bam' -S '/galaxy/server/database/objects/9/b/8/dataset_9b8e2bde-39eb-4585-b08a-7e5d4d0718f7.dat'  --log2stderr", "user_email": "tests@fake.org", "command_version": "", "params": {"wide_format_cell_counts": "true", "bc": "{\"__current_case__\": 2, \"extract_umi_method\": \"umis\"}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"directional\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XF\", \"gene_transcript_map\": null, \"per_cell\": true, \"per_contig\": false, \"skip_tags_regex\": \"^[__|Unassigned]\"}", "advanced": "{\"random_seed\": \"123456789\"}", "cond_extra": "{\"__current_case__\": 0, \"prepender\": \"none\"}", "log": "false", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"input": {"id": "f6911d7519def1ff", "src": "hda", "uuid": "c1978b1a-1aa6-4325-92b2-dc9bbf64f064"}}, "outputs": {"out_counts": {"id": "5a39c1462b676537", "src": "hda", "uuid": "9b8e2bde-39eb-4585-b08a-7e5d4d0718f7"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/9/b/8/dataset_9b8e2bde-39eb-4585-b08a-7e5d4d0718f7.dat --log2stderr\n# job started at Fri Aug  9 18:36:50 2024 on gxy-6zgjn-q2sbj -- 8756cc8f-0722-4420-92ec-41322088839f\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/9/b/8/dataset_9b8e2bde-39eb-4585-b08a-7e5d4d0718f7.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:36:50,586 INFO command: count --wide-format-cell-counts --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/9/b/8/dataset_9b8e2bde-39eb-4585-b08a-7e5d4d0718f7.dat --log2stderr\n2024-08-09 18:36:50,616 INFO Input Reads: 1203\n2024-08-09 18:36:50,616 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:36:50,616 INFO Number of (post deduplication) reads counted: 145\n# job finished in 0 seconds at Fri Aug  9 18:36:50 2024 --  0.68  0.33  0.00  0.00 -- 8756cc8f-0722-4420-92ec-41322088839f\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/9/b/8/dataset_9b8e2bde-39eb-4585-b08a-7e5d4d0718f7.dat --log2stderr\n# job started at Fri Aug  9 18:36:50 2024 on gxy-6zgjn-q2sbj -- 8756cc8f-0722-4420-92ec-41322088839f\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/9/b/8/dataset_9b8e2bde-39eb-4585-b08a-7e5d4d0718f7.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:36:50,586 INFO command: count --wide-format-cell-counts --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/9/b/8/dataset_9b8e2bde-39eb-4585-b08a-7e5d4d0718f7.dat --log2stderr\n2024-08-09 18:36:50,616 INFO Input Reads: 1203\n2024-08-09 18:36:50,616 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:36:50,616 INFO Number of (post deduplication) reads counted: 145\n# job finished in 0 seconds at Fri Aug  9 18:36:50 2024 --  0.68  0.33  0.00  0.00 -- 8756cc8f-0722-4420-92ec-41322088839f\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:36:49", "plugin": "core", "name": "start_epoch", "raw_value": "1723228609.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:36:50", "plugin": "core", "name": "end_epoch", "raw_value": "1723228610.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "umi_tools_count/1.1.2+galaxy2-3", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 3, "time_seconds": 38.55265760421753, "inputs": {"input": {"src": "hda", "id": "17539ee350ba62fc"}, "wide_format_cell_counts": true, "bc|extract_umi_method": "umis", "umi|method": "directional", "sc|gene_tag": "XF", "sc|skip_tags_regex": "^[__|Unassigned]", "sc|per_cell": true, "advanced|random_seed": "123456789"}, "job": {"model_class": "Job", "id": "17539ee350ba62fc", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:41:33.439084", "update_time": "2024-08-09T18:41:48.297934", "galaxy_version": "24.1", "external_id": "gxy-dx577", "handler": null, "job_runner_name": null, "command_line": "ln -sf '/galaxy/server/database/objects/5/6/d/dataset_56d8842d-31e7-46b4-a91c-33ebd560dfe1.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/8/d/5/metadata_8d5a4c20-a222-434b-b77e-ace470d4fed6.dat' 'input.bam.bai' &&   umi_tools count '--wide-format-cell-counts'  --extract-umi-method umis   --method directional --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XF' --skip-tags-regex '^[__Unassigned]'  --per-cell   --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='123456789'  -I 'input.bam' -S '/galaxy/server/database/objects/8/b/0/dataset_8b045e4b-65c1-41d9-ab2a-a7072653bc7e.dat'  --log2stderr", "user_email": "tests@fake.org", "command_version": "", "params": {"wide_format_cell_counts": "true", "bc": "{\"__current_case__\": 2, \"extract_umi_method\": \"umis\"}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"directional\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XF\", \"gene_transcript_map\": null, \"per_cell\": true, \"per_contig\": false, \"skip_tags_regex\": \"^[__|Unassigned]\"}", "advanced": "{\"random_seed\": \"123456789\"}", "cond_extra": "{\"__current_case__\": 0, \"prepender\": \"none\"}", "log": "false", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"input": {"id": "17539ee350ba62fc", "src": "hda", "uuid": "56d8842d-31e7-46b4-a91c-33ebd560dfe1"}}, "outputs": {"out_counts": {"id": "dc0ebf1e60ba2f16", "src": "hda", "uuid": "8b045e4b-65c1-41d9-ab2a-a7072653bc7e"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/8/b/0/dataset_8b045e4b-65c1-41d9-ab2a-a7072653bc7e.dat --log2stderr\n# job started at Fri Aug  9 18:41:35 2024 on gxy-dx577-f7cww -- 004a1916-4bc9-475a-bf80-a0a05276ce2c\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/8/b/0/dataset_8b045e4b-65c1-41d9-ab2a-a7072653bc7e.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:41:35,903 INFO command: count --wide-format-cell-counts --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/8/b/0/dataset_8b045e4b-65c1-41d9-ab2a-a7072653bc7e.dat --log2stderr\n2024-08-09 18:41:35,944 INFO Input Reads: 1203\n2024-08-09 18:41:35,945 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:41:35,945 INFO Number of (post deduplication) reads counted: 145\n# job finished in 0 seconds at Fri Aug  9 18:41:35 2024 --  0.65  0.32  0.00  0.00 -- 004a1916-4bc9-475a-bf80-a0a05276ce2c\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/8/b/0/dataset_8b045e4b-65c1-41d9-ab2a-a7072653bc7e.dat --log2stderr\n# job started at Fri Aug  9 18:41:35 2024 on gxy-dx577-f7cww -- 004a1916-4bc9-475a-bf80-a0a05276ce2c\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/8/b/0/dataset_8b045e4b-65c1-41d9-ab2a-a7072653bc7e.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:41:35,903 INFO command: count --wide-format-cell-counts --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/8/b/0/dataset_8b045e4b-65c1-41d9-ab2a-a7072653bc7e.dat --log2stderr\n2024-08-09 18:41:35,944 INFO Input Reads: 1203\n2024-08-09 18:41:35,945 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:41:35,945 INFO Number of (post deduplication) reads counted: 145\n# job finished in 0 seconds at Fri Aug  9 18:41:35 2024 --  0.65  0.32  0.00  0.00 -- 004a1916-4bc9-475a-bf80-a0a05276ce2c\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:41:36", "plugin": "core", "name": "end_epoch", "raw_value": "1723228896.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:41:34", "plugin": "core", "name": "start_epoch", "raw_value": "1723228894.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "umi_tools_count/1.1.2+galaxy2-3", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 3, "time_seconds": 38.69863224029541, "inputs": {"input": {"src": "hda", "id": "05e83142e885c001"}, "wide_format_cell_counts": true, "bc|extract_umi_method": "umis", "umi|method": "directional", "sc|gene_tag": "XF", "sc|skip_tags_regex": "^[__|Unassigned]", "sc|per_cell": true, "advanced|random_seed": "123456789"}, "job": {"model_class": "Job", "id": "05e83142e885c001", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:45:59.091183", "update_time": "2024-08-09T18:46:15.047834", "galaxy_version": "24.1", "external_id": "gxy-hbpd2", "handler": null, "job_runner_name": null, "command_line": "ln -sf '/galaxy/server/database/objects/e/d/c/dataset_edceaffc-cc61-4aba-b96a-defe7d915ec4.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/5/8/d/metadata_58d8da91-7c27-4194-89ff-fc7f557f8e2c.dat' 'input.bam.bai' &&   umi_tools count '--wide-format-cell-counts'  --extract-umi-method umis   --method directional --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XF' --skip-tags-regex '^[__Unassigned]'  --per-cell   --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='123456789'  -I 'input.bam' -S '/galaxy/server/database/objects/7/f/b/dataset_7fb4906e-7778-4706-8c86-63fd28e8102a.dat'  --log2stderr", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "log": "false", "cond_extra": "{\"__current_case__\": 0, \"prepender\": \"none\"}", "advanced": "{\"random_seed\": \"123456789\"}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XF\", \"gene_transcript_map\": null, \"per_cell\": true, \"per_contig\": false, \"skip_tags_regex\": \"^[__|Unassigned]\"}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"directional\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "bc": "{\"__current_case__\": 2, \"extract_umi_method\": \"umis\"}", "wide_format_cell_counts": "true"}, "inputs": {"input": {"id": "05e83142e885c001", "src": "hda", "uuid": "edceaffc-cc61-4aba-b96a-defe7d915ec4"}}, "outputs": {"out_counts": {"id": "422290475ad9cc37", "src": "hda", "uuid": "7fb4906e-7778-4706-8c86-63fd28e8102a"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/7/f/b/dataset_7fb4906e-7778-4706-8c86-63fd28e8102a.dat --log2stderr\n# job started at Fri Aug  9 18:46:02 2024 on gxy-hbpd2-zp2th -- 73bec3a3-c530-4f02-8272-415f1f9e3228\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/7/f/b/dataset_7fb4906e-7778-4706-8c86-63fd28e8102a.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:46:02,147 INFO command: count --wide-format-cell-counts --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/7/f/b/dataset_7fb4906e-7778-4706-8c86-63fd28e8102a.dat --log2stderr\n2024-08-09 18:46:02,182 INFO Input Reads: 1203\n2024-08-09 18:46:02,183 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:46:02,183 INFO Number of (post deduplication) reads counted: 145\n# job finished in 0 seconds at Fri Aug  9 18:46:02 2024 --  0.62  0.32  0.00  0.00 -- 73bec3a3-c530-4f02-8272-415f1f9e3228\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/7/f/b/dataset_7fb4906e-7778-4706-8c86-63fd28e8102a.dat --log2stderr\n# job started at Fri Aug  9 18:46:02 2024 on gxy-hbpd2-zp2th -- 73bec3a3-c530-4f02-8272-415f1f9e3228\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XF\n# gene_transcript_map                     : None\n# get_umi_method                          : umis\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : directional\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 123456789\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^[__Unassigned]\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/7/f/b/dataset_7fb4906e-7778-4706-8c86-63fd28e8102a.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:46:02,147 INFO command: count --wide-format-cell-counts --extract-umi-method umis --method directional --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XF --skip-tags-regex ^[__Unassigned] --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=123456789 -I input.bam -S /galaxy/server/database/objects/7/f/b/dataset_7fb4906e-7778-4706-8c86-63fd28e8102a.dat --log2stderr\n2024-08-09 18:46:02,182 INFO Input Reads: 1203\n2024-08-09 18:46:02,183 INFO Read skipped - assigned tag matches skip_regex: 120\n2024-08-09 18:46:02,183 INFO Number of (post deduplication) reads counted: 145\n# job finished in 0 seconds at Fri Aug  9 18:46:02 2024 --  0.62  0.32  0.00  0.00 -- 73bec3a3-c530-4f02-8272-415f1f9e3228\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:46:02", "plugin": "core", "name": "end_epoch", "raw_value": "1723229162.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:46:01", "plugin": "core", "name": "start_epoch", "raw_value": "1723229161.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "umi_tools_count/1.1.2+galaxy2-4", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 4, "time_seconds": 38.7733039855957, "inputs": {"input": {"src": "hda", "id": "769b35b257e916a2"}, "umi|method": "unique", "sc|gene_tag": "XT", "sc|per_cell": true, "advanced|random_seed": "0"}, "job": {"model_class": "Job", "id": "769b35b257e916a2", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:37:26.205826", "update_time": "2024-08-09T18:37:41.888063", "galaxy_version": "24.1", "external_id": "gxy-b6hjj", "handler": null, "job_runner_name": null, "command_line": "ln -sf '/galaxy/server/database/objects/5/5/1/dataset_551b3f2c-f5d6-4171-a473-c2b567b6ab18.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/6/f/a/metadata_6fa50edd-ead8-424c-9202-32f5b4512df5.dat' 'input.bam.bai' &&   umi_tools count '--wide-format-cell-counts'  --extract-umi-method read_id --umi-separator '_'   --method unique --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XT'  --per-cell   --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='0'  -I 'input.bam' -S '/galaxy/server/database/objects/0/0/7/dataset_00746fe8-1e7a-41e0-987a-533dd31300f1.dat'  --log2stderr", "user_email": "tests@fake.org", "command_version": "", "params": {"wide_format_cell_counts": "true", "bc": "{\"__current_case__\": 0, \"extract_umi_method\": \"read_id\", \"umi_separator\": \"_\"}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"unique\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XT\", \"gene_transcript_map\": null, \"per_cell\": true, \"per_contig\": false, \"skip_tags_regex\": \"\"}", "advanced": "{\"random_seed\": \"0\"}", "cond_extra": "{\"__current_case__\": 0, \"prepender\": \"none\"}", "log": "false", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"input": {"id": "769b35b257e916a2", "src": "hda", "uuid": "551b3f2c-f5d6-4171-a473-c2b567b6ab18"}}, "outputs": {"out_counts": {"id": "10ea18cd522311b4", "src": "hda", "uuid": "00746fe8-1e7a-41e0-987a-533dd31300f1"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/0/0/7/dataset_00746fe8-1e7a-41e0-987a-533dd31300f1.dat --log2stderr\n# job started at Fri Aug  9 18:37:29 2024 on gxy-b6hjj-22wl7 -- 81bc5add-6128-4f0e-836f-71d3f0c0c4f8\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/0/0/7/dataset_00746fe8-1e7a-41e0-987a-533dd31300f1.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:37:29,338 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/0/0/7/dataset_00746fe8-1e7a-41e0-987a-533dd31300f1.dat --log2stderr\n2024-08-09 18:37:29,376 INFO Input Reads: 39\n2024-08-09 18:37:29,376 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Aug  9 18:37:29 2024 --  0.65  0.29  0.00  0.00 -- 81bc5add-6128-4f0e-836f-71d3f0c0c4f8\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/0/0/7/dataset_00746fe8-1e7a-41e0-987a-533dd31300f1.dat --log2stderr\n# job started at Fri Aug  9 18:37:29 2024 on gxy-b6hjj-22wl7 -- 81bc5add-6128-4f0e-836f-71d3f0c0c4f8\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/0/0/7/dataset_00746fe8-1e7a-41e0-987a-533dd31300f1.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:37:29,338 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/0/0/7/dataset_00746fe8-1e7a-41e0-987a-533dd31300f1.dat --log2stderr\n2024-08-09 18:37:29,376 INFO Input Reads: 39\n2024-08-09 18:37:29,376 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Aug  9 18:37:29 2024 --  0.65  0.29  0.00  0.00 -- 81bc5add-6128-4f0e-836f-71d3f0c0c4f8\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:37:28", "plugin": "core", "name": "start_epoch", "raw_value": "1723228648.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:37:29", "plugin": "core", "name": "end_epoch", "raw_value": "1723228649.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "umi_tools_count/1.1.2+galaxy2-4", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 4, "time_seconds": 38.61639857292175, "inputs": {"input": {"src": "hda", "id": "86586599643262a9"}, "umi|method": "unique", "sc|gene_tag": "XT", "sc|per_cell": true, "advanced|random_seed": "0"}, "job": {"model_class": "Job", "id": "86586599643262a9", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:42:11.914873", "update_time": "2024-08-09T18:42:27.303879", "galaxy_version": "24.1", "external_id": "gxy-pvxw5", "handler": null, "job_runner_name": null, "command_line": "ln -sf '/galaxy/server/database/objects/9/d/7/dataset_9d7eba1a-20ad-499d-b6f3-cf35f7201fcf.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/1/1/4/metadata_1145e912-c131-4246-9bd8-059c329a592d.dat' 'input.bam.bai' &&   umi_tools count '--wide-format-cell-counts'  --extract-umi-method read_id --umi-separator '_'   --method unique --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XT'  --per-cell   --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='0'  -I 'input.bam' -S '/galaxy/server/database/objects/f/5/6/dataset_f562f1a8-abc1-46f6-be06-8a8958b66deb.dat'  --log2stderr", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "log": "false", "cond_extra": "{\"__current_case__\": 0, \"prepender\": \"none\"}", "advanced": "{\"random_seed\": \"0\"}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XT\", \"gene_transcript_map\": null, \"per_cell\": true, \"per_contig\": false, \"skip_tags_regex\": \"\"}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"unique\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "bc": "{\"__current_case__\": 0, \"extract_umi_method\": \"read_id\", \"umi_separator\": \"_\"}", "wide_format_cell_counts": "true"}, "inputs": {"input": {"id": "86586599643262a9", "src": "hda", "uuid": "9d7eba1a-20ad-499d-b6f3-cf35f7201fcf"}}, "outputs": {"out_counts": {"id": "ba8efece3ca4ee27", "src": "hda", "uuid": "f562f1a8-abc1-46f6-be06-8a8958b66deb"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/f/5/6/dataset_f562f1a8-abc1-46f6-be06-8a8958b66deb.dat --log2stderr\n# job started at Fri Aug  9 18:42:14 2024 on gxy-pvxw5-p2hrr -- 995a86c4-0508-4afe-86e9-506276e7e93f\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/f/5/6/dataset_f562f1a8-abc1-46f6-be06-8a8958b66deb.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:42:14,936 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/f/5/6/dataset_f562f1a8-abc1-46f6-be06-8a8958b66deb.dat --log2stderr\n2024-08-09 18:42:14,964 INFO Input Reads: 39\n2024-08-09 18:42:14,964 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Aug  9 18:42:14 2024 --  0.63  0.32  0.00  0.00 -- 995a86c4-0508-4afe-86e9-506276e7e93f\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/f/5/6/dataset_f562f1a8-abc1-46f6-be06-8a8958b66deb.dat --log2stderr\n# job started at Fri Aug  9 18:42:14 2024 on gxy-pvxw5-p2hrr -- 995a86c4-0508-4afe-86e9-506276e7e93f\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/f/5/6/dataset_f562f1a8-abc1-46f6-be06-8a8958b66deb.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:42:14,936 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/f/5/6/dataset_f562f1a8-abc1-46f6-be06-8a8958b66deb.dat --log2stderr\n2024-08-09 18:42:14,964 INFO Input Reads: 39\n2024-08-09 18:42:14,964 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Aug  9 18:42:14 2024 --  0.63  0.32  0.00  0.00 -- 995a86c4-0508-4afe-86e9-506276e7e93f\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:42:15", "plugin": "core", "name": "end_epoch", "raw_value": "1723228935.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:42:13", "plugin": "core", "name": "start_epoch", "raw_value": "1723228933.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "umi_tools_count/1.1.2+galaxy2-4", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 4, "time_seconds": 13.390945196151733, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "umi_tools_count/1.1.2+galaxy2-5", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 5, "time_seconds": 40.60241389274597, "inputs": {"input": {"src": "hda", "id": "5580c79bc2004862"}, "umi|method": "unique", "sc|gene_tag": "XT", "sc|per_cell": true, "advanced|random_seed": "0", "cond_extra|custom_label": "test", "cond_extra|prepender": "string"}, "job": {"model_class": "Job", "id": "5580c79bc2004862", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:38:06.108244", "update_time": "2024-08-09T18:38:22.614484", "galaxy_version": "24.1", "external_id": "gxy-skm6l", "handler": null, "job_runner_name": null, "command_line": "ln -sf '/galaxy/server/database/objects/a/2/d/dataset_a2d161ad-ca80-4e5d-a7ca-16f6097ff180.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/8/4/8/metadata_8487b51a-f01e-463d-ac12-ddcd37d61bb6.dat' 'input.bam.bai' &&   umi_tools count '--wide-format-cell-counts'  --extract-umi-method read_id --umi-separator '_'   --method unique --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XT'  --per-cell   --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='0'  -I 'input.bam' -S '/galaxy/server/database/objects/a/d/2/dataset_ad2dd0b0-3dae-4ae9-b784-31efe04b7b64.dat'  --log2stderr  && sed -i -r '1s|\\b([ACGT]+)\\b|'\"test\"'_\\1|g' '/galaxy/server/database/objects/a/d/2/dataset_ad2dd0b0-3dae-4ae9-b784-31efe04b7b64.dat'", "user_email": "tests@fake.org", "command_version": "", "params": {"wide_format_cell_counts": "true", "bc": "{\"__current_case__\": 0, \"extract_umi_method\": \"read_id\", \"umi_separator\": \"_\"}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"unique\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XT\", \"gene_transcript_map\": null, \"per_cell\": true, \"per_contig\": false, \"skip_tags_regex\": \"\"}", "advanced": "{\"random_seed\": \"0\"}", "cond_extra": "{\"__current_case__\": 2, \"custom_label\": \"test\", \"prepender\": \"string\"}", "log": "false", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"input": {"id": "5580c79bc2004862", "src": "hda", "uuid": "a2d161ad-ca80-4e5d-a7ca-16f6097ff180"}}, "outputs": {"out_counts": {"id": "6d3487fab05935f6", "src": "hda", "uuid": "ad2dd0b0-3dae-4ae9-b784-31efe04b7b64"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/a/d/2/dataset_ad2dd0b0-3dae-4ae9-b784-31efe04b7b64.dat --log2stderr\n# job started at Fri Aug  9 18:38:09 2024 on gxy-skm6l-74gcx -- 4fc13e69-7013-4a12-8d4c-2ae8d6e31234\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/a/d/2/dataset_ad2dd0b0-3dae-4ae9-b784-31efe04b7b64.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:38:09,556 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/a/d/2/dataset_ad2dd0b0-3dae-4ae9-b784-31efe04b7b64.dat --log2stderr\n2024-08-09 18:38:09,584 INFO Input Reads: 39\n2024-08-09 18:38:09,584 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Aug  9 18:38:09 2024 --  0.63  0.32  0.00  0.00 -- 4fc13e69-7013-4a12-8d4c-2ae8d6e31234\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/a/d/2/dataset_ad2dd0b0-3dae-4ae9-b784-31efe04b7b64.dat --log2stderr\n# job started at Fri Aug  9 18:38:09 2024 on gxy-skm6l-74gcx -- 4fc13e69-7013-4a12-8d4c-2ae8d6e31234\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/a/d/2/dataset_ad2dd0b0-3dae-4ae9-b784-31efe04b7b64.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:38:09,556 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/a/d/2/dataset_ad2dd0b0-3dae-4ae9-b784-31efe04b7b64.dat --log2stderr\n2024-08-09 18:38:09,584 INFO Input Reads: 39\n2024-08-09 18:38:09,584 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Aug  9 18:38:09 2024 --  0.63  0.32  0.00  0.00 -- 4fc13e69-7013-4a12-8d4c-2ae8d6e31234\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:38:08", "plugin": "core", "name": "start_epoch", "raw_value": "1723228688.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:38:09", "plugin": "core", "name": "end_epoch", "raw_value": "1723228689.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "umi_tools_count/1.1.2+galaxy2-5", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 5, "time_seconds": 37.16000509262085, "inputs": {"input": {"src": "hda", "id": "8e4d1d85c24762c3"}, "umi|method": "unique", "sc|gene_tag": "XT", "sc|per_cell": true, "advanced|random_seed": "0", "cond_extra|custom_label": "test", "cond_extra|prepender": "string"}, "job": {"model_class": "Job", "id": "8e4d1d85c24762c3", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:42:48.953125", "update_time": "2024-08-09T18:43:04.417576", "galaxy_version": "24.1", "external_id": "gxy-8qrd4", "handler": null, "job_runner_name": null, "command_line": "ln -sf '/galaxy/server/database/objects/8/c/8/dataset_8c88808c-e006-4b01-ad1d-1e9d5bd8dc1b.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/7/3/5/metadata_735d596a-cb4f-4524-be98-f6c94476fedf.dat' 'input.bam.bai' &&   umi_tools count '--wide-format-cell-counts'  --extract-umi-method read_id --umi-separator '_'   --method unique --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XT'  --per-cell   --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='0'  -I 'input.bam' -S '/galaxy/server/database/objects/9/d/c/dataset_9dc9697f-12d7-4d22-bb9e-3dadae28dbc8.dat'  --log2stderr  && sed -i -r '1s|\\b([ACGT]+)\\b|'\"test\"'_\\1|g' '/galaxy/server/database/objects/9/d/c/dataset_9dc9697f-12d7-4d22-bb9e-3dadae28dbc8.dat'", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "log": "false", "cond_extra": "{\"__current_case__\": 2, \"custom_label\": \"test\", \"prepender\": \"string\"}", "advanced": "{\"random_seed\": \"0\"}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XT\", \"gene_transcript_map\": null, \"per_cell\": true, \"per_contig\": false, \"skip_tags_regex\": \"\"}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"unique\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "bc": "{\"__current_case__\": 0, \"extract_umi_method\": \"read_id\", \"umi_separator\": \"_\"}", "wide_format_cell_counts": "true"}, "inputs": {"input": {"id": "8e4d1d85c24762c3", "src": "hda", "uuid": "8c88808c-e006-4b01-ad1d-1e9d5bd8dc1b"}}, "outputs": {"out_counts": {"id": "1e86427258ef324e", "src": "hda", "uuid": "9dc9697f-12d7-4d22-bb9e-3dadae28dbc8"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/9/d/c/dataset_9dc9697f-12d7-4d22-bb9e-3dadae28dbc8.dat --log2stderr\n# job started at Fri Aug  9 18:42:51 2024 on gxy-8qrd4-glbnl -- 2f242f0a-4475-45c7-bfdd-3c448d015669\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/9/d/c/dataset_9dc9697f-12d7-4d22-bb9e-3dadae28dbc8.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:42:51,769 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/9/d/c/dataset_9dc9697f-12d7-4d22-bb9e-3dadae28dbc8.dat --log2stderr\n2024-08-09 18:42:51,788 INFO Input Reads: 39\n2024-08-09 18:42:51,788 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Aug  9 18:42:51 2024 --  0.59  0.30  0.00  0.00 -- 2f242f0a-4475-45c7-bfdd-3c448d015669\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/9/d/c/dataset_9dc9697f-12d7-4d22-bb9e-3dadae28dbc8.dat --log2stderr\n# job started at Fri Aug  9 18:42:51 2024 on gxy-8qrd4-glbnl -- 2f242f0a-4475-45c7-bfdd-3c448d015669\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/9/d/c/dataset_9dc9697f-12d7-4d22-bb9e-3dadae28dbc8.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:42:51,769 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/9/d/c/dataset_9dc9697f-12d7-4d22-bb9e-3dadae28dbc8.dat --log2stderr\n2024-08-09 18:42:51,788 INFO Input Reads: 39\n2024-08-09 18:42:51,788 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Aug  9 18:42:51 2024 --  0.59  0.30  0.00  0.00 -- 2f242f0a-4475-45c7-bfdd-3c448d015669\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:42:51", "plugin": "core", "name": "end_epoch", "raw_value": "1723228971.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:42:50", "plugin": "core", "name": "start_epoch", "raw_value": "1723228970.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "umi_tools_count/1.1.2+galaxy2-5", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 5, "time_seconds": 37.669593334198, "inputs": {"input": {"src": "hda", "id": "247b8545a99450fb"}, "umi|method": "unique", "sc|gene_tag": "XT", "sc|per_cell": true, "advanced|random_seed": "0", "cond_extra|custom_label": "test", "cond_extra|prepender": "string"}, "job": {"model_class": "Job", "id": "247b8545a99450fb", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:46:50.500342", "update_time": "2024-08-09T18:47:06.182782", "galaxy_version": "24.1", "external_id": "gxy-sdk7w", "handler": null, "job_runner_name": null, "command_line": "ln -sf '/galaxy/server/database/objects/8/4/3/dataset_843d19de-4e7f-4978-b89e-a32ed0f41bab.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/f/6/4/metadata_f64f6d34-31c0-420e-885f-95cf7b4835ed.dat' 'input.bam.bai' &&   umi_tools count '--wide-format-cell-counts'  --extract-umi-method read_id --umi-separator '_'   --method unique --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XT'  --per-cell   --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='0'  -I 'input.bam' -S '/galaxy/server/database/objects/2/b/1/dataset_2b15a67c-fde9-460f-8429-78c7b25e7b03.dat'  --log2stderr  && sed -i -r '1s|\\b([ACGT]+)\\b|'\"test\"'_\\1|g' '/galaxy/server/database/objects/2/b/1/dataset_2b15a67c-fde9-460f-8429-78c7b25e7b03.dat'", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "log": "false", "cond_extra": "{\"__current_case__\": 2, \"custom_label\": \"test\", \"prepender\": \"string\"}", "advanced": "{\"random_seed\": \"0\"}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XT\", \"gene_transcript_map\": null, \"per_cell\": true, \"per_contig\": false, \"skip_tags_regex\": \"\"}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"unique\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "bc": "{\"__current_case__\": 0, \"extract_umi_method\": \"read_id\", \"umi_separator\": \"_\"}", "wide_format_cell_counts": "true"}, "inputs": {"input": {"id": "247b8545a99450fb", "src": "hda", "uuid": "843d19de-4e7f-4978-b89e-a32ed0f41bab"}}, "outputs": {"out_counts": {"id": "7efa52efbecc59fb", "src": "hda", "uuid": "2b15a67c-fde9-460f-8429-78c7b25e7b03"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/2/b/1/dataset_2b15a67c-fde9-460f-8429-78c7b25e7b03.dat --log2stderr\n# job started at Fri Aug  9 18:46:54 2024 on gxy-sdk7w-ksnkq -- 45c26052-c5f8-4f40-a408-eb553e87b6a9\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/2/b/1/dataset_2b15a67c-fde9-460f-8429-78c7b25e7b03.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:46:54,096 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/2/b/1/dataset_2b15a67c-fde9-460f-8429-78c7b25e7b03.dat --log2stderr\n2024-08-09 18:46:54,121 INFO Input Reads: 39\n2024-08-09 18:46:54,121 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Aug  9 18:46:54 2024 --  0.65  0.32  0.00  0.00 -- 45c26052-c5f8-4f40-a408-eb553e87b6a9\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/2/b/1/dataset_2b15a67c-fde9-460f-8429-78c7b25e7b03.dat --log2stderr\n# job started at Fri Aug  9 18:46:54 2024 on gxy-sdk7w-ksnkq -- 45c26052-c5f8-4f40-a408-eb553e87b6a9\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/2/b/1/dataset_2b15a67c-fde9-460f-8429-78c7b25e7b03.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:46:54,096 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/2/b/1/dataset_2b15a67c-fde9-460f-8429-78c7b25e7b03.dat --log2stderr\n2024-08-09 18:46:54,121 INFO Input Reads: 39\n2024-08-09 18:46:54,121 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Aug  9 18:46:54 2024 --  0.65  0.32  0.00  0.00 -- 45c26052-c5f8-4f40-a408-eb553e87b6a9\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:46:54", "plugin": "core", "name": "end_epoch", "raw_value": "1723229214.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:46:53", "plugin": "core", "name": "start_epoch", "raw_value": "1723229213.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "umi_tools_count/1.1.2+galaxy2-6", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 6, "time_seconds": 40.95981955528259, "inputs": {"input": {"src": "hda", "id": "e9ebe6931c6f819d"}, "umi|method": "unique", "sc|gene_tag": "XT", "sc|per_cell": true, "advanced|random_seed": "0", "cond_extra|prepender": "dataset name"}, "job": {"model_class": "Job", "id": "e9ebe6931c6f819d", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:38:47.442575", "update_time": "2024-08-09T18:39:03.640172", "galaxy_version": "24.1", "external_id": "gxy-qkcxk", "handler": null, "job_runner_name": null, "command_line": "ln -sf '/galaxy/server/database/objects/d/c/d/dataset_dcde8109-251f-49b2-896d-06c456603780.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/e/4/2/metadata_e42a79df-d322-495c-b8f5-6aa300bcf34a.dat' 'input.bam.bai' &&   umi_tools count '--wide-format-cell-counts'  --extract-umi-method read_id --umi-separator '_'   --method unique --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XT'  --per-cell   --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='0'  -I 'input.bam' -S '/galaxy/server/database/objects/5/4/9/dataset_54905ce8-5831-4708-b401-e1a2eb64bad5.dat'  --log2stderr  && sed -i -r '1s|\\b([ACGT]+)\\b|'\"fc_ENSDARG00000019692\"'_\\1|g' '/galaxy/server/database/objects/5/4/9/dataset_54905ce8-5831-4708-b401-e1a2eb64bad5.dat'", "user_email": "tests@fake.org", "command_version": "", "params": {"wide_format_cell_counts": "true", "bc": "{\"__current_case__\": 0, \"extract_umi_method\": \"read_id\", \"umi_separator\": \"_\"}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"unique\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XT\", \"gene_transcript_map\": null, \"per_cell\": true, \"per_contig\": false, \"skip_tags_regex\": \"\"}", "advanced": "{\"random_seed\": \"0\"}", "cond_extra": "{\"__current_case__\": 1, \"prepender\": \"dataset name\"}", "log": "false", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"input": {"id": "e9ebe6931c6f819d", "src": "hda", "uuid": "dcde8109-251f-49b2-896d-06c456603780"}}, "outputs": {"out_counts": {"id": "38120c4679f27960", "src": "hda", "uuid": "54905ce8-5831-4708-b401-e1a2eb64bad5"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/5/4/9/dataset_54905ce8-5831-4708-b401-e1a2eb64bad5.dat --log2stderr\n# job started at Fri Aug  9 18:38:51 2024 on gxy-qkcxk-pxfmh -- 0aaabde1-013b-4a4e-ac7e-72aa8976295a\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/5/4/9/dataset_54905ce8-5831-4708-b401-e1a2eb64bad5.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:38:51,074 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/5/4/9/dataset_54905ce8-5831-4708-b401-e1a2eb64bad5.dat --log2stderr\n2024-08-09 18:38:51,102 INFO Input Reads: 39\n2024-08-09 18:38:51,102 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Aug  9 18:38:51 2024 --  0.74  0.35  0.00  0.00 -- 0aaabde1-013b-4a4e-ac7e-72aa8976295a\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/5/4/9/dataset_54905ce8-5831-4708-b401-e1a2eb64bad5.dat --log2stderr\n# job started at Fri Aug  9 18:38:51 2024 on gxy-qkcxk-pxfmh -- 0aaabde1-013b-4a4e-ac7e-72aa8976295a\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/5/4/9/dataset_54905ce8-5831-4708-b401-e1a2eb64bad5.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:38:51,074 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/5/4/9/dataset_54905ce8-5831-4708-b401-e1a2eb64bad5.dat --log2stderr\n2024-08-09 18:38:51,102 INFO Input Reads: 39\n2024-08-09 18:38:51,102 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Aug  9 18:38:51 2024 --  0.74  0.35  0.00  0.00 -- 0aaabde1-013b-4a4e-ac7e-72aa8976295a\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:38:49", "plugin": "core", "name": "start_epoch", "raw_value": "1723228729.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:38:51", "plugin": "core", "name": "end_epoch", "raw_value": "1723228731.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}]}, "status": "success"}}, {"id": "umi_tools_count/1.1.2+galaxy2-6", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 6, "time_seconds": 37.69709897041321, "inputs": {"input": {"src": "hda", "id": "22389ca8d14023c2"}, "umi|method": "unique", "sc|gene_tag": "XT", "sc|per_cell": true, "advanced|random_seed": "0", "cond_extra|prepender": "dataset name"}, "job": {"model_class": "Job", "id": "22389ca8d14023c2", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:43:27.509100", "update_time": "2024-08-09T18:43:42.099906", "galaxy_version": "24.1", "external_id": "gxy-pfbtq", "handler": null, "job_runner_name": null, "command_line": "ln -sf '/galaxy/server/database/objects/f/5/8/dataset_f5857fbf-38ab-46a5-a033-ba8e84d9572e.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/4/e/8/metadata_4e801b31-4aa8-49cd-88d7-8538e74bcb50.dat' 'input.bam.bai' &&   umi_tools count '--wide-format-cell-counts'  --extract-umi-method read_id --umi-separator '_'   --method unique --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XT'  --per-cell   --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='0'  -I 'input.bam' -S '/galaxy/server/database/objects/a/e/d/dataset_aed9c47f-a53b-49ca-9c46-8868026be081.dat'  --log2stderr  && sed -i -r '1s|\\b([ACGT]+)\\b|'\"fc_ENSDARG00000019692\"'_\\1|g' '/galaxy/server/database/objects/a/e/d/dataset_aed9c47f-a53b-49ca-9c46-8868026be081.dat'", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "log": "false", "cond_extra": "{\"__current_case__\": 1, \"prepender\": \"dataset name\"}", "advanced": "{\"random_seed\": \"0\"}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XT\", \"gene_transcript_map\": null, \"per_cell\": true, \"per_contig\": false, \"skip_tags_regex\": \"\"}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"unique\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "bc": "{\"__current_case__\": 0, \"extract_umi_method\": \"read_id\", \"umi_separator\": \"_\"}", "wide_format_cell_counts": "true"}, "inputs": {"input": {"id": "22389ca8d14023c2", "src": "hda", "uuid": "f5857fbf-38ab-46a5-a033-ba8e84d9572e"}}, "outputs": {"out_counts": {"id": "e9f544cda870be15", "src": "hda", "uuid": "aed9c47f-a53b-49ca-9c46-8868026be081"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/a/e/d/dataset_aed9c47f-a53b-49ca-9c46-8868026be081.dat --log2stderr\n# job started at Fri Aug  9 18:43:30 2024 on gxy-pfbtq-rv5nt -- dc5e3c94-bac0-407d-9834-b1447f99662a\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/a/e/d/dataset_aed9c47f-a53b-49ca-9c46-8868026be081.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:43:30,014 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/a/e/d/dataset_aed9c47f-a53b-49ca-9c46-8868026be081.dat --log2stderr\n2024-08-09 18:43:30,041 INFO Input Reads: 39\n2024-08-09 18:43:30,042 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Aug  9 18:43:30 2024 --  0.64  0.32  0.00  0.00 -- dc5e3c94-bac0-407d-9834-b1447f99662a\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/a/e/d/dataset_aed9c47f-a53b-49ca-9c46-8868026be081.dat --log2stderr\n# job started at Fri Aug  9 18:43:30 2024 on gxy-pfbtq-rv5nt -- dc5e3c94-bac0-407d-9834-b1447f99662a\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/a/e/d/dataset_aed9c47f-a53b-49ca-9c46-8868026be081.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:43:30,014 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/a/e/d/dataset_aed9c47f-a53b-49ca-9c46-8868026be081.dat --log2stderr\n2024-08-09 18:43:30,041 INFO Input Reads: 39\n2024-08-09 18:43:30,042 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Aug  9 18:43:30 2024 --  0.64  0.32  0.00  0.00 -- dc5e3c94-bac0-407d-9834-b1447f99662a\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:43:30", "plugin": "core", "name": "end_epoch", "raw_value": "1723229010.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:43:29", "plugin": "core", "name": "start_epoch", "raw_value": "1723229009.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "umi_tools_count/1.1.2+galaxy2-6", "has_data": true, "data": {"tool_id": "umi_tools_count", "tool_version": "1.1.2+galaxy2", "test_index": 6, "time_seconds": 39.35668969154358, "inputs": {"input": {"src": "hda", "id": "256298802ac2a14e"}, "umi|method": "unique", "sc|gene_tag": "XT", "sc|per_cell": true, "advanced|random_seed": "0", "cond_extra|prepender": "dataset name"}, "job": {"model_class": "Job", "id": "256298802ac2a14e", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/umi_tools_count/umi_tools_count/1.1.2+galaxy2", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T18:47:29.023046", "update_time": "2024-08-09T18:47:45.605221", "galaxy_version": "24.1", "external_id": "gxy-q5hnn", "handler": null, "job_runner_name": null, "command_line": "ln -sf '/galaxy/server/database/objects/7/8/e/dataset_78eb2e91-563b-4d78-8e75-87b039371c63.dat' 'input.bam' && ln -sf '/galaxy/server/database/objects/_metadata_files/3/8/f/metadata_38f09aef-9244-460c-90be-bd38ac25fd39.dat' 'input.bam.bai' &&   umi_tools count '--wide-format-cell-counts'  --extract-umi-method read_id --umi-separator '_'   --method unique --edit-distance-threshold 1  --soft-clip-threshold 4    --gene-tag 'XT'  --per-cell   --mapping-quality 0 --unmapped-reads discard   --subset 1.0      --random-seed='0'  -I 'input.bam' -S '/galaxy/server/database/objects/a/4/4/dataset_a44fcedc-84e9-46aa-ba66-899d090daced.dat'  --log2stderr  && sed -i -r '1s|\\b([ACGT]+)\\b|'\"fc_ENSDARG00000019692\"'_\\1|g' '/galaxy/server/database/objects/a/4/4/dataset_a44fcedc-84e9-46aa-ba66-899d090daced.dat'", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "log": "false", "cond_extra": "{\"__current_case__\": 1, \"prepender\": \"dataset name\"}", "advanced": "{\"random_seed\": \"0\"}", "sc": "{\"assigned_status_tag\": null, \"gene_tag\": \"XT\", \"gene_transcript_map\": null, \"per_cell\": true, \"per_contig\": false, \"skip_tags_regex\": \"\"}", "sambam": "{\"chimeric_pairs\": null, \"chrom\": \"\", \"ignore_tlen\": false, \"ignore_umi\": false, \"mapping_quality\": \"0\", \"paired\": false, \"subset\": \"1.0\", \"unmapped_reads\": \"discard\", \"unpaired_reads\": null}", "umi": "{\"edit_distance_threshold\": \"1\", \"method\": \"unique\", \"read_length\": false, \"soft_clip_threshold\": \"4\", \"spliced_is_unique\": false}", "bc": "{\"__current_case__\": 0, \"extract_umi_method\": \"read_id\", \"umi_separator\": \"_\"}", "wide_format_cell_counts": "true"}, "inputs": {"input": {"id": "256298802ac2a14e", "src": "hda", "uuid": "78eb2e91-563b-4d78-8e75-87b039371c63"}}, "outputs": {"out_counts": {"id": "8d6594fa5e6c08ab", "src": "hda", "uuid": "a44fcedc-84e9-46aa-ba66-899d090daced"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/a/4/4/dataset_a44fcedc-84e9-46aa-ba66-899d090daced.dat --log2stderr\n# job started at Fri Aug  9 18:47:32 2024 on gxy-q5hnn-c4mfq -- 0c893d98-0705-4e41-8104-eb080a662130\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/a/4/4/dataset_a44fcedc-84e9-46aa-ba66-899d090daced.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:47:32,424 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/a/4/4/dataset_a44fcedc-84e9-46aa-ba66-899d090daced.dat --log2stderr\n2024-08-09 18:47:32,447 INFO Input Reads: 39\n2024-08-09 18:47:32,447 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Aug  9 18:47:32 2024 --  0.61  0.36  0.00  0.00 -- 0c893d98-0705-4e41-8104-eb080a662130\n", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "# UMI-tools version: 1.1.2\n# output generated by count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/a/4/4/dataset_a44fcedc-84e9-46aa-ba66-899d090daced.dat --log2stderr\n# job started at Fri Aug  9 18:47:32 2024 on gxy-q5hnn-c4mfq -- 0c893d98-0705-4e41-8104-eb080a662130\n# pid: 25, system: Linux 6.1.90+ #1 SMP PREEMPT_DYNAMIC Thu Jun 27 21:06:48 UTC 2024 x86_64\n# assigned_tag                            : None\n# cell_tag                                : None\n# cell_tag_delim                          : None\n# cell_tag_split                          : -\n# chimeric_pairs                          : use\n# chrom                                   : None\n# compresslevel                           : 6\n# filter_umi                              : None\n# gene_tag                                : XT\n# gene_transcript_map                     : None\n# get_umi_method                          : read_id\n# ignore_tlen                             : False\n# ignore_umi                              : False\n# in_sam                                  : False\n# log2stderr                              : True\n# loglevel                                : 1\n# mapping_quality                         : 0\n# method                                  : unique\n# no_sort_output                          : False\n# out_sam                                 : False\n# output_unmapped                         : False\n# paired                                  : False\n# per_cell                                : True\n# per_contig                              : False\n# per_gene                                : False\n# random_seed                             : 0\n# read_length                             : False\n# short_help                              : None\n# skip_regex                              : ^(__|Unassigned)\n# soft_clip_threshold                     : 4.0\n# spliced                                 : False\n# stderr                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdin                                   : <_io.TextIOWrapper name='input.bam' mode='r' encoding='UTF-8'>\n# stdlog                                  : <_io.TextIOWrapper name='<stderr>' mode='w' encoding='utf-8'>\n# stdout                                  : <_io.TextIOWrapper name='/galaxy/server/database/objects/a/4/4/dataset_a44fcedc-84e9-46aa-ba66-899d090daced.dat' mode='w' encoding='UTF-8'>\n# subset                                  : 1.0\n# threshold                               : 1\n# timeit_file                             : None\n# timeit_header                           : None\n# timeit_name                             : all\n# tmpdir                                  : None\n# umi_sep                                 : _\n# umi_tag                                 : RX\n# umi_tag_delim                           : None\n# umi_tag_split                           : None\n# umi_whitelist                           : None\n# umi_whitelist_paired                    : None\n# unmapped_reads                          : discard\n# unpaired_reads                          : use\n# wide_format_cell_counts                 : True\n2024-08-09 18:47:32,424 INFO command: count --wide-format-cell-counts --extract-umi-method read_id --umi-separator _ --method unique --edit-distance-threshold 1 --soft-clip-threshold 4 --gene-tag XT --per-cell --mapping-quality 0 --unmapped-reads discard --subset 1.0 --random-seed=0 -I input.bam -S /galaxy/server/database/objects/a/4/4/dataset_a44fcedc-84e9-46aa-ba66-899d090daced.dat --log2stderr\n2024-08-09 18:47:32,447 INFO Input Reads: 39\n2024-08-09 18:47:32,447 INFO Number of (post deduplication) reads counted: 12\n# job finished in 0 seconds at Fri Aug  9 18:47:32 2024 --  0.61  0.36  0.00  0.00 -- 0c893d98-0705-4e41-8104-eb080a662130\n", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-08-09 18:47:32", "plugin": "core", "name": "end_epoch", "raw_value": "1723229252.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 18:47:31", "plugin": "core", "name": "start_epoch", "raw_value": "1723229251.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "vcfallelicprimitives/1.0.0_rc3+galaxy0-0", "has_data": true, "data": {"tool_id": "vcfallelicprimitives", "tool_version": "1.0.0_rc3+galaxy0", "test_index": 0, "time_seconds": 37.54069423675537, "inputs": {"input": {"src": "hda", "id": "afc60e3b2d698e2a"}}, "job": {"model_class": "Job", "id": "3c7f90c2cae7a425", "history_id": "c8102287cb46509e", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/vcfallelicprimitives/vcfallelicprimitives/1.0.0_rc3+galaxy0", "state": "ok", "exit_code": 0, "create_time": "2024-08-09T19:28:33.290810", "update_time": "2024-08-09T19:28:51.132744", "galaxy_version": "24.1", "external_id": "gxy-csvm2", "handler": null, "job_runner_name": null, "command_line": "cat '/galaxy/server/database/objects/d/6/6/dataset_d6671338-c577-4b6f-971f-030d6ef21410.dat' | vcfallelicprimitives  -t 'Split primitives' -L \"200\"  > '/galaxy/server/database/objects/d/5/3/dataset_d5385040-385a-485e-969d-72e57b4bd8b4.dat'", "user_email": "tests@fake.org", "command_version": "", "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "keep_geno": "false", "keep_info": "false", "max_length": "\"200\"", "t_option": "\"Split primitives\"", "m_option": "false"}, "inputs": {"input": {"id": "afc60e3b2d698e2a", "src": "hda", "uuid": "d6671338-c577-4b6f-971f-030d6ef21410"}}, "outputs": {"out_file1": {"id": "e2db1fa1f1175e84", "src": "hda", "uuid": "d5385040-385a-485e-969d-72e57b4bd8b4"}}, "copied_from_job_id": null, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stdout": "", "stderr": "", "job_messages": [], "dependencies": [], "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-08-09 19:28:38", "plugin": "core", "name": "end_epoch", "raw_value": "1723231718.0000000"}, {"title": "Job Start Time", "value": "2024-08-09 19:28:38", "plugin": "core", "name": "start_epoch", "raw_value": "1723231718.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "vcfprimers/1.0.0_rc3+galaxy0-0", "has_data": true, "data": {"tool_id": "vcfprimers", "tool_version": "1.0.0_rc3+galaxy0", "test_index": 0, "time_seconds": 11.315711498260498, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}], "galaxy_url": "http://35.243.174.153:8000/galaxy/"}