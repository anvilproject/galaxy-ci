{
    "model_class": "Job",
    "id": "2255c01f80efeb62",
    "state": "error",
    "exit_code": null,
    "update_time": "2024-05-10T07:10:17.494133",
    "create_time": "2024-05-10T07:09:50.145091",
    "galaxy_version": "23.1",
    "command_version": "",
    "copied_from_job_id": null,
    "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0",
    "history_id": "0366d8be2fc957e6",
    "external_id": "gxy-69lvw",
    "command_line": "mkdir ./index && mkdir ./output && salmon index -i ./index --kmerLen '31' --gencode --transcripts '/galaxy/server/database/objects/2/5/2/dataset_25253b43-a93a-4f20-8bf0-f487de8d71e5.dat' && cp '/galaxy/server/database/objects/5/9/4/dataset_594e0c99-aa18-4251-bb52-17fa4b7fb7e7.dat' ./mate1.fastq.gz && gunzip ./mate1.fastq.gz && cp '/galaxy/server/database/objects/9/5/6/dataset_95666630-b929-4593-88e5-204dd1e384b8.dat' ./mate2.fastq.gz && gunzip ./mate2.fastq.gz  && ln -s '/galaxy/server/database/objects/d/3/d/dataset_d3d1d934-22bb-4811-82b6-98ac2ff198cb.dat' ./alevinmap.tsv && salmon alevin -l A -i ./index -1 ./mate1.fastq -2 ./mate2.fastq -o ./output -p \"${GALAXY_SLOTS:-4}\" --chromium --tgMap ./alevinmap.tsv --keepCBFraction '1.0'   --dumpFeatures  --dumpMtx --freqThreshold '5'  && gunzip output/alevin/quants_mat.mtx.gz  && gunzip output/alevin/quants_tier_mat.gz  && gunzip output/aux_info/fld.gz && gunzip output/aux_info/observed_bias.gz && gunzip output/aux_info/observed_bias_3p.gz",
    "traceback": "Traceback (most recent call last):\n  File \"/galaxy/server/lib/galaxy/jobs/runners/__init__.py\", line 649, in _finish_or_resubmit_job\n    job_wrapper.finish(\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1961, in finish\n    self._finish_dataset(output_name, dataset, job, context, final_job_state, remote_metadata_directory)\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1778, in _finish_dataset\n    dataset.datatype.set_meta(dataset, overwrite=False)\n  File \"/galaxy/server/lib/galaxy/datatypes/tabular.py\", line 1689, in set_meta\n    for line in dataset_fh:\n  File \"/usr/local/lib/python3.10/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 19: invalid start byte\n",
    "params": {
        "__input_ext": "\"input\"",
        "dbkey": "\"?\"",
        "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",
        "optional": "{\"dumpBfh\": false, \"dumpFeatures\": true, \"dumpMtx\": true, \"dumpUmiGraph\": false, \"expectCells\": \"\", \"forceCells\": \"\", \"freqThreshold\": \"5\", \"keepCBFraction\": \"1.0\", \"lowRegionMinNumBarcodes\": \"\", \"maxNumBarcodes\": \"\", \"minScoreFraction\": \"\", \"mrna\": null, \"noDedup\": false, \"numCellBootstraps\": \"\", \"rrna\": null, \"whitelist\": null}",
        "allout": "false",
        "protocol": "\"--chromium\"",
        "pairstraight": "{\"__current_case__\": 0, \"file1\": {\"values\": [{\"id\": 303, \"src\": \"hda\"}]}, \"file2\": {\"values\": [{\"id\": 304, \"src\": \"hda\"}]}, \"libtype\": {\"__current_case__\": 0, \"strandedness\": \"A\"}, \"readselect\": \"paired\"}",
        "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 302, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}"
    },
    "inputs": {
        "refTranscriptSource|s_index|fasta": {
            "id": "e0d1a12b4d5ef3d2",
            "src": "hda",
            "uuid": "25253b43-a93a-4f20-8bf0-f487de8d71e5"
        },
        "pairstraight|file1": {
            "id": "a5a0c7e11e49d016",
            "src": "hda",
            "uuid": "594e0c99-aa18-4251-bb52-17fa4b7fb7e7"
        },
        "pairstraight|file2": {
            "id": "80da9f1371c6d08b",
            "src": "hda",
            "uuid": "95666630-b929-4593-88e5-204dd1e384b8"
        },
        "tgmap": {
            "id": "b31aac871b1fa833",
            "src": "hda",
            "uuid": "d3d1d934-22bb-4811-82b6-98ac2ff198cb"
        }
    },
    "outputs": {
        "quants_tier_mat": {
            "id": "4d832c8477c62ae7",
            "src": "hda",
            "uuid": "469a620d-e5ad-46f5-9146-c89643218d7e"
        },
        "observed_bias": {
            "id": "589b754e5be8b26c",
            "src": "hda",
            "uuid": "bc7b49af-b32d-49d0-8011-b1abece1ddd6"
        },
        "observed_bias_3p": {
            "id": "76d0614fe2ab9d0c",
            "src": "hda",
            "uuid": "fe95d468-c6e9-43e6-abb7-d1d15451b8b3"
        },
        "flenDist_txt": {
            "id": "5aea381405da399d",
            "src": "hda",
            "uuid": "a42494b9-76ec-4640-adc9-f44e0e021d7e"
        },
        "quants_mat_mtx": {
            "id": "13df5ae499623b6f",
            "src": "hda",
            "uuid": "d1f4e1c2-2239-442e-a5c7-e252c9c0246a"
        },
        "raw_cb_frequency_txt": {
            "id": "ac13f66f572b37af",
            "src": "hda",
            "uuid": "92e013df-e9c2-403c-8853-947343e1a9be"
        },
        "quants_mat_cols_txt": {
            "id": "9e5612c5f0e87ede",
            "src": "hda",
            "uuid": "b1d8991b-25b0-4ada-bdad-ec0672517c30"
        },
        "quants_mat_rows_txt": {
            "id": "13f8e7c80871be9e",
            "src": "hda",
            "uuid": "d3a23740-30e7-4357-9aa9-9261229292e6"
        },
        "featureDump_txt": {
            "id": "6cc848942cd79cde",
            "src": "hda",
            "uuid": "80eb76bc-078b-465b-837d-6e6bd711c51a"
        },
        "whitelist_txt": {
            "id": "2e7374db310b5a97",
            "src": "hda",
            "uuid": "94a49f59-e485-4c16-ae3f-28845ac4c37d"
        },
        "expected_bias": {
            "id": "2a246ae891fede02",
            "src": "hda",
            "uuid": "fe8a22a2-835c-4674-9e09-e68a7c0800fd"
        }
    },
    "output_collections": {},
    "tool_stdout": "",
    "tool_stderr": "",
    "job_stdout": null,
    "job_stderr": null,
    "stderr": "",
    "stdout": "",
    "job_messages": [],
    "dependencies": [],
    "user_email": "tests@fake.org",
    "job_metrics": []
}
