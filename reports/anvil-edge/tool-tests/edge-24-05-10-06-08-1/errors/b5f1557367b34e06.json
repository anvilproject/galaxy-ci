{
    "model_class": "Job",
    "id": "b5f1557367b34e06",
    "state": "error",
    "exit_code": null,
    "update_time": "2024-05-10T07:11:48.405266",
    "create_time": "2024-05-10T07:11:32.157555",
    "galaxy_version": "23.1",
    "command_version": null,
    "copied_from_job_id": null,
    "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0",
    "history_id": "0366d8be2fc957e6",
    "external_id": "gxy-9cdwd",
    "command_line": "mkdir ./index && mkdir ./output && salmon index -i ./index --kmerLen '31' --gencode --transcripts '/galaxy/server/database/objects/3/8/f/dataset_38f7a57d-e38c-4939-aa62-33f711eeb5f2.dat' && cp '/galaxy/server/database/objects/3/7/9/dataset_3790a5da-8936-4f3a-8f4a-cb6011ff7be1.dat' ./mate1.fastq.gz && gunzip ./mate1.fastq.gz && cp '/galaxy/server/database/objects/f/e/8/dataset_fe87b0d4-d4bf-4ac2-98ea-1f3de806aed4.dat' ./mate2.fastq.gz && gunzip ./mate2.fastq.gz  && ln -s '/galaxy/server/database/objects/b/3/a/dataset_b3a29730-5182-49e1-9a74-eb933aaf4321.dat' ./alevinmap.tsv && salmon alevin -l A -i ./index -1 ./mate1.fastq -2 ./mate2.fastq -o ./output -p \"${GALAXY_SLOTS:-4}\" --chromium --tgMap ./alevinmap.tsv --keepCBFraction '1.0'   --dumpFeatures  --dumpMtx --freqThreshold '5'  && gunzip output/alevin/quants_mat.mtx.gz  && gunzip output/alevin/quants_tier_mat.gz  && gunzip output/aux_info/fld.gz && gunzip output/aux_info/observed_bias.gz && gunzip output/aux_info/observed_bias_3p.gz",
    "traceback": "Traceback (most recent call last):\n  File \"/galaxy/server/lib/galaxy/jobs/runners/__init__.py\", line 649, in _finish_or_resubmit_job\n    job_wrapper.finish(\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1961, in finish\n    self._finish_dataset(output_name, dataset, job, context, final_job_state, remote_metadata_directory)\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1778, in _finish_dataset\n    dataset.datatype.set_meta(dataset, overwrite=False)\n  File \"/galaxy/server/lib/galaxy/datatypes/tabular.py\", line 1689, in set_meta\n    for line in dataset_fh:\n  File \"/usr/local/lib/python3.10/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 1: invalid start byte\n",
    "params": {
        "__input_ext": "\"input\"",
        "dbkey": "\"?\"",
        "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",
        "optional": "{\"dumpBfh\": false, \"dumpFeatures\": true, \"dumpMtx\": true, \"dumpUmiGraph\": false, \"expectCells\": \"\", \"forceCells\": \"\", \"freqThreshold\": \"5\", \"keepCBFraction\": \"1.0\", \"lowRegionMinNumBarcodes\": \"\", \"maxNumBarcodes\": \"\", \"minScoreFraction\": \"\", \"mrna\": null, \"noDedup\": false, \"numCellBootstraps\": \"\", \"rrna\": null, \"whitelist\": null}",
        "allout": "false",
        "protocol": "\"--chromium\"",
        "pairstraight": "{\"__current_case__\": 0, \"file1\": {\"values\": [{\"id\": 336, \"src\": \"hda\"}]}, \"file2\": {\"values\": [{\"id\": 337, \"src\": \"hda\"}]}, \"libtype\": {\"__current_case__\": 0, \"strandedness\": \"A\"}, \"readselect\": \"paired\"}",
        "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 335, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}"
    },
    "inputs": {
        "refTranscriptSource|s_index|fasta": {
            "id": "77a1a71a8c28d0ec",
            "src": "hda",
            "uuid": "38f7a57d-e38c-4939-aa62-33f711eeb5f2"
        },
        "pairstraight|file1": {
            "id": "c680a4a4fad54bf8",
            "src": "hda",
            "uuid": "3790a5da-8936-4f3a-8f4a-cb6011ff7be1"
        },
        "pairstraight|file2": {
            "id": "cb6d049932741946",
            "src": "hda",
            "uuid": "fe87b0d4-d4bf-4ac2-98ea-1f3de806aed4"
        },
        "tgmap": {
            "id": "211c86ac73cf0a17",
            "src": "hda",
            "uuid": "b3a29730-5182-49e1-9a74-eb933aaf4321"
        }
    },
    "outputs": {
        "quants_mat_mtx": {
            "id": "e6aded538a051495",
            "src": "hda",
            "uuid": "8eab53d3-57d8-4996-91c8-f8a81c10f556"
        },
        "raw_cb_frequency_txt": {
            "id": "93b7b5ab87ea23f4",
            "src": "hda",
            "uuid": "2b4f5b58-6003-4467-b619-e95abd78eff3"
        },
        "quants_mat_cols_txt": {
            "id": "55b5314207d23b08",
            "src": "hda",
            "uuid": "1c701962-b13b-4ca5-858e-2285d4afc258"
        },
        "quants_mat_rows_txt": {
            "id": "4909e7ab0b924724",
            "src": "hda",
            "uuid": "8f1cb809-00b8-4da7-9251-10341baa8d9d"
        },
        "quants_tier_mat": {
            "id": "910dfd992bb8462e",
            "src": "hda",
            "uuid": "bfaad2a6-a132-45a3-a62d-1cce2f2afe3c"
        },
        "featureDump_txt": {
            "id": "0eff74f4491335f3",
            "src": "hda",
            "uuid": "c81e5a15-2179-4162-b897-89de8bbe363b"
        },
        "whitelist_txt": {
            "id": "f91a91500b85438c",
            "src": "hda",
            "uuid": "b0da2509-0b78-4f05-80e8-60f81d2b9d20"
        },
        "expected_bias": {
            "id": "442bcd001008c711",
            "src": "hda",
            "uuid": "70936b2f-5993-4563-9cf2-580ba279446c"
        },
        "observed_bias": {
            "id": "551a861706ad2543",
            "src": "hda",
            "uuid": "4ac283a7-2885-43fa-bc8c-19ad31e90462"
        },
        "observed_bias_3p": {
            "id": "65716dbc4a2e05c3",
            "src": "hda",
            "uuid": "9ce22bd0-77b4-4906-bddd-f8e80a630e23"
        },
        "flenDist_txt": {
            "id": "fe1ff0d387980289",
            "src": "hda",
            "uuid": "3c9eba47-4b5e-4939-b5a1-17e5b131fac7"
        }
    },
    "output_collections": {},
    "tool_stdout": "",
    "tool_stderr": "",
    "job_stdout": null,
    "job_stderr": null,
    "stderr": "",
    "stdout": "",
    "job_messages": [],
    "dependencies": [],
    "user_email": "tests@fake.org",
    "job_metrics": []
}
