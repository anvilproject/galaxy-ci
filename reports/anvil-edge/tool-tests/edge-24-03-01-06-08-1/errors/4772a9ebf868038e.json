{
    "model_class": "Job",
    "id": "4772a9ebf868038e",
    "state": "error",
    "exit_code": null,
    "update_time": "2024-03-01T07:12:41.499872",
    "create_time": "2024-03-01T07:12:13.054503",
    "galaxy_version": "23.1",
    "command_version": null,
    "copied_from_job_id": null,
    "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0",
    "history_id": "58919cd564b7e2fd",
    "external_id": "gxy-76bb2",
    "command_line": "mkdir ./index && mkdir ./output && salmon index -i ./index --kmerLen '31' --gencode --transcripts '/galaxy/server/database/objects/e/6/e/dataset_e6e211a4-336a-476f-8e75-4275e85e15ed.dat' && cp '/galaxy/server/database/objects/f/9/e/dataset_f9eb0e6f-1746-407d-a1d2-f81bc380918a.dat' ./mate1.fastq.gz && gunzip ./mate1.fastq.gz && cp '/galaxy/server/database/objects/c/1/f/dataset_c1fe1c1e-a592-40c9-8536-52eef9e399e5.dat' ./mate2.fastq.gz && gunzip ./mate2.fastq.gz  && ln -s '/galaxy/server/database/objects/e/f/3/dataset_ef32a3fe-4f29-4a0b-83c7-da070e2b1231.dat' ./alevinmap.tsv && salmon alevin -l A -i ./index -1 ./mate1.fastq -2 ./mate2.fastq -o ./output -p \"${GALAXY_SLOTS:-4}\" --chromium --tgMap ./alevinmap.tsv --keepCBFraction '1.0'   --dumpFeatures  --dumpMtx --freqThreshold '5'  && gunzip output/alevin/quants_mat.mtx.gz  && gunzip output/alevin/quants_tier_mat.gz  && gunzip output/aux_info/fld.gz && gunzip output/aux_info/observed_bias.gz && gunzip output/aux_info/observed_bias_3p.gz",
    "traceback": "Traceback (most recent call last):\n  File \"/galaxy/server/lib/galaxy/jobs/runners/__init__.py\", line 649, in _finish_or_resubmit_job\n    job_wrapper.finish(\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1961, in finish\n    self._finish_dataset(output_name, dataset, job, context, final_job_state, remote_metadata_directory)\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1778, in _finish_dataset\n    dataset.datatype.set_meta(dataset, overwrite=False)\n  File \"/galaxy/server/lib/galaxy/datatypes/tabular.py\", line 1689, in set_meta\n    for line in dataset_fh:\n  File \"/usr/local/lib/python3.10/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 1: invalid start byte\n",
    "params": {
        "__input_ext": "\"input\"",
        "dbkey": "\"?\"",
        "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",
        "optional": "{\"dumpBfh\": false, \"dumpFeatures\": true, \"dumpMtx\": true, \"dumpUmiGraph\": false, \"expectCells\": \"\", \"forceCells\": \"\", \"freqThreshold\": \"5\", \"keepCBFraction\": \"1.0\", \"lowRegionMinNumBarcodes\": \"\", \"maxNumBarcodes\": \"\", \"minScoreFraction\": \"\", \"mrna\": null, \"noDedup\": false, \"numCellBootstraps\": \"\", \"rrna\": null, \"whitelist\": null}",
        "allout": "false",
        "protocol": "\"--chromium\"",
        "pairstraight": "{\"__current_case__\": 0, \"file1\": {\"values\": [{\"id\": 309, \"src\": \"hda\"}]}, \"file2\": {\"values\": [{\"id\": 310, \"src\": \"hda\"}]}, \"libtype\": {\"__current_case__\": 0, \"strandedness\": \"A\"}, \"readselect\": \"paired\"}",
        "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 308, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}"
    },
    "inputs": {
        "tgmap": {
            "id": "541efdecb879a2f3",
            "src": "hda",
            "uuid": "ef32a3fe-4f29-4a0b-83c7-da070e2b1231"
        },
        "pairstraight|file2": {
            "id": "6c695e3d498b52af",
            "src": "hda",
            "uuid": "c1fe1c1e-a592-40c9-8536-52eef9e399e5"
        },
        "pairstraight|file1": {
            "id": "150c0cdb2a738aa0",
            "src": "hda",
            "uuid": "f9eb0e6f-1746-407d-a1d2-f81bc380918a"
        },
        "refTranscriptSource|s_index|fasta": {
            "id": "22da218e33d64327",
            "src": "hda",
            "uuid": "e6e211a4-336a-476f-8e75-4275e85e15ed"
        }
    },
    "outputs": {
        "flenDist_txt": {
            "id": "0bbf57ea9a326601",
            "src": "hda",
            "uuid": "0828e82d-9709-4d69-8b63-6ee7144607de"
        },
        "observed_bias_3p": {
            "id": "a6759f7afa5b5949",
            "src": "hda",
            "uuid": "bcc04f9b-205f-4603-ae26-fb2690c600de"
        },
        "observed_bias": {
            "id": "af4cc36a7f9c1bf6",
            "src": "hda",
            "uuid": "562ca251-1231-438d-a2c8-14968414cda2"
        },
        "expected_bias": {
            "id": "60a951af89c97fc8",
            "src": "hda",
            "uuid": "8cf5db17-5b04-4d6a-aa72-080d0e320f46"
        },
        "whitelist_txt": {
            "id": "7eaf4ecb517ecfea",
            "src": "hda",
            "uuid": "3ba2952d-78dd-4923-8765-0066c40ca9c2"
        },
        "featureDump_txt": {
            "id": "5e774d23c5067299",
            "src": "hda",
            "uuid": "0cfba307-ec5c-4590-a8f5-a5f059884700"
        },
        "quants_tier_mat": {
            "id": "6a2cdd421f4b5bda",
            "src": "hda",
            "uuid": "f928ef4c-fdf7-4c78-8a18-ff5a874b28cc"
        },
        "quants_mat_rows_txt": {
            "id": "c88783a08f3f78c8",
            "src": "hda",
            "uuid": "e430b074-9831-4c0f-be43-5a6a28ce661f"
        },
        "quants_mat_cols_txt": {
            "id": "dab775212211fd63",
            "src": "hda",
            "uuid": "d7b0061a-cd4b-4a06-8b8f-6e09ecfc79e2"
        },
        "raw_cb_frequency_txt": {
            "id": "08a5944f5a95023f",
            "src": "hda",
            "uuid": "4366f9bf-92bd-48fc-82fb-a828ff48a7d7"
        },
        "quants_mat_mtx": {
            "id": "ad6986d9290c2fa5",
            "src": "hda",
            "uuid": "08931bd3-6117-4923-a63a-c8de783fd4c0"
        }
    },
    "output_collections": {},
    "tool_stdout": "",
    "tool_stderr": "",
    "job_stdout": null,
    "job_stderr": null,
    "stderr": "",
    "stdout": "",
    "job_messages": [],
    "dependencies": [],
    "user_email": "tests@fake.org",
    "job_metrics": []
}
