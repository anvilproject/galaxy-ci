<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Results (powered by Planemo)"
           tests="187"
           errors="19"
           failures="23"
           skip="0">
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat (Test #1)" name="0" time="109.96169400215149">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Picked up _JAVA_OPTIONS: -Xmx4G -Xms1G
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat (Test #2)" name="1" time="27.33670997619629">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 1, "time_seconds": 27.33670997619629, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat", "tool_version": "1.3.1+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat (Test #3)" name="2" time="18.802542686462402">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 2, "time_seconds": 18.802542686462402, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat", "tool_version": "1.3.1+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat (Test #4)" name="3" time="40.236847162246704">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Picked up _JAVA_OPTIONS: -Xmx4G -Xms1G
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat (Test #5)" name="4" time="11.461859464645386">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 4, "time_seconds": 11.461859464645386, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat", "tool_version": "1.3.1+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/sailfish/sailfish (Test #1)" name="0" time="60.16824388504028">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Version Info: This is the most recent version of Sailfishwriting log to ./index_dir/logs/sailfish_index.logRapMap Indexer[Step 1 of 4] : counting k-mersElapsed time: 0.00196388sReplaced 0 non-ATCG nucleotidesClipped poly-A tails from 0 transcriptsBuilding rank-select dictionary and saving to disk doneElapsed time: 8.976e-05sWriting sequence data to file . . . doneElapsed time: 0.000233411s[info] Building 32-bit suffix array (length of generalized text is 28577)Building suffix array . . . successsaving to disk . . . doneElapsed time: 0.00010791sdoneElapsed time: 0.0156553sprocessed 0 positionskhash had 18955 keyssaving hash to disk . . . doneElapsed time: 0.00143533sVersion Info: This is the most recent version of Sailfish# sailfish (quasi-mapping-based) v0.9.2# [ program ] => sailfish # [ command ] => quant # [ index ] => { ./index_dir }# [ mates1 ] => { ./mate1.fastq }# [ mates2 ] => { ./mate2.fastq }# [ libType ] => { IU }# [ output ] => { ./results }# [ threads ] => { 6 }# [ gcSizeSamp ] => { 1 }# [ gcSpeedSamp ] => { 1 }# [ fldMean ] => { 200 }# [ fldSD ] => { 80 }# [ maxReadOcc ] => { 200 }# [ maxFragLen ] => { 1000 }# [ txpAggregationKey ] => { gene_id }# [ numBiasSamples ] => { 1000000 }# [ numFragSamples ] => { 10000 }# [ numGibbsSamples ] => { 0 }# [ numBootstraps ] => { 0 }Logs will be written to ./results/logs[2023-05-17 11:21:56.769] [jointLog] [info] parsing read library formatthere is 1 libLoading 32-bit quasi index[2023-05-17 11:21:56.816] [jointLog] [info] Loading Quasi indexIndex contained 15 targetsLoaded targets[2023-05-17 11:21:56.822] [jointLog] [info] doneDone Quasi-Mapping [2023-05-17 11:21:56.848] [jointLog] [info] Gathered fragment lengths from all threads[2023-05-17 11:21:56.848] [jointLog] [warning] Sailfish saw fewer then 10000 uniquely mapped reads so 200 will be used as the mean fragment length and 80 as the standard deviation for effective length correction[2023-05-17 11:21:56.849] [jointLog] [info] Estimating effective lengths[2023-05-17 11:21:56.857] [jointLog] [info] Computed 21 rich equivalence classes for further processing[2023-05-17 11:21:56.857] [jointLog] [info] Counted 10000 total reads in the equivalence classes [2023-05-17 11:21:56.857] [jointLog] [info] Starting optimizer:[2023-05-17 11:21:56.858] [jointLog] [info] Optimizing over 21 equivalence classes[2023-05-17 11:21:56.858] [jointLog] [info] iteration = 0 | max rel diff. = 14.873[2023-05-17 11:21:56.858] [jointLog] [info] iteration = 64 | max rel diff. = 0.00117687[2023-05-17 11:21:56.858] [jointLog] [info] Finished optimizer[2023-05-17 11:21:56.858] [jointLog] [info] writing output [2023-05-17 11:21:56.819] [stderrLog] [info] Loading Suffix Array [2023-05-17 11:21:56.819] [stderrLog] [info] Loading Position Hash[2023-05-17 11:21:56.820] [stderrLog] [info] Loading Transcript Info [2023-05-17 11:21:56.822] [stderrLog] [info] Loading Rank-Select Bit Array[2023-05-17 11:21:56.822] [stderrLog] [info] There were 15 set bits in the bit array[2023-05-17 11:21:56.822] [stderrLog] [info] Computing transcript lengths[2023-05-17 11:21:56.822] [stderrLog] [info] Waiting to finish loading hash[2023-05-17 11:21:56.822] [stderrLog] [info] Done loading index
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/sailfish/sailfish (Test #2)" name="1" time="63.779574155807495">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Version Info: This is the most recent version of Sailfishwriting log to ./index_dir/logs/sailfish_index.logRapMap Indexer[Step 1 of 4] : counting k-mersElapsed time: 0.00094143sReplaced 0 non-ATCG nucleotidesClipped poly-A tails from 0 transcriptsBuilding rank-select dictionary and saving to disk doneElapsed time: 0.00012588sWriting sequence data to file . . . doneElapsed time: 0.00010464s[info] Building 32-bit suffix array (length of generalized text is 28577)Building suffix array . . . successsaving to disk . . . doneElapsed time: 0.00012729sdoneElapsed time: 0.00313365sprocessed 0 positionskhash had 18955 keyssaving hash to disk . . . doneElapsed time: 0.00100812sVersion Info: This is the most recent version of Sailfish# sailfish (quasi-mapping-based) v0.9.2# [ program ] => sailfish # [ command ] => quant # [ index ] => { ./index_dir }# [ mates1 ] => { /dev/fd/63 }# [ mates2 ] => { /dev/fd/62 }# [ libType ] => { IU }# [ output ] => { ./results }# [ threads ] => { 6 }# [ gcSizeSamp ] => { 1 }# [ gcSpeedSamp ] => { 1 }# [ fldMean ] => { 200 }# [ fldSD ] => { 80 }# [ maxReadOcc ] => { 200 }# [ maxFragLen ] => { 1000 }# [ txpAggregationKey ] => { gene_id }# [ numBiasSamples ] => { 1000000 }# [ numFragSamples ] => { 10000 }# [ numGibbsSamples ] => { 0 }# [ numBootstraps ] => { 0 }Logs will be written to ./results/logs[2023-05-17 11:22:03.392] [jointLog] [info] parsing read library formatthere is 1 libLoading 32-bit quasi indexIndex contained 15 targetsLoaded targets[2023-05-17 11:22:03.434] [jointLog] [info] Loading Quasi index[2023-05-17 11:22:03.440] [jointLog] [info] done[2023-05-17 11:22:03.462] [jointLog] [info] Gathered fragment lengths from all threads[2023-05-17 11:22:03.462] [jointLog] [warning] Sailfish saw fewer then 10000 uniquely mapped reads so 200 will be used as the mean fragment length and 80 as the standard deviation for effective length correction[2023-05-17 11:22:03.462] [jointLog] [info] Estimating effective lengthsDone Quasi-Mapping [2023-05-17 11:22:03.471] [jointLog] [info] Computed 21 rich equivalence classes for further processing[2023-05-17 11:22:03.471] [jointLog] [info] Counted 10000 total reads in the equivalence classes [2023-05-17 11:22:03.472] [jointLog] [info] Starting optimizer:[2023-05-17 11:22:03.472] [jointLog] [info] Optimizing over 21 equivalence classes[2023-05-17 11:22:03.472] [jointLog] [info] iteration = 0 | max rel diff. = 14.873[2023-05-17 11:22:03.472] [jointLog] [info] iteration = 64 | max rel diff. = 0.00117687[2023-05-17 11:22:03.472] [jointLog] [info] Finished optimizer[2023-05-17 11:22:03.472] [jointLog] [info] writing output [2023-05-17 11:22:03.436] [stderrLog] [info] Loading Suffix Array [2023-05-17 11:22:03.436] [stderrLog] [info] Loading Position Hash[2023-05-17 11:22:03.438] [stderrLog] [info] Loading Transcript Info [2023-05-17 11:22:03.439] [stderrLog] [info] Loading Rank-Select Bit Array[2023-05-17 11:22:03.439] [stderrLog] [info] There were 15 set bits in the bit array[2023-05-17 11:22:03.440] [stderrLog] [info] Computing transcript lengths[2023-05-17 11:22:03.440] [stderrLog] [info] Waiting to finish loading hash[2023-05-17 11:22:03.440] [stderrLog] [info] Done loading index
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/sailfish/sailfish (Test #3)" name="2" time="67.51230025291443">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Version Info: This is the most recent version of Sailfishwriting log to ./index_dir/logs/sailfish_index.logRapMap Indexer[Step 1 of 4] : counting k-mersElapsed time: 0.00171636sReplaced 0 non-ATCG nucleotidesClipped poly-A tails from 0 transcriptsBuilding rank-select dictionary and saving to disk doneElapsed time: 0.00017944sWriting sequence data to file . . . doneElapsed time: 0.000208041s[info] Building 32-bit suffix array (length of generalized text is 28577)Building suffix array . . . successsaving to disk . . . doneElapsed time: 0.0001184sdoneElapsed time: 0.0162791sprocessed 0 positionskhash had 18955 keyssaving hash to disk . . . doneElapsed time: 0.00107569sVersion Info: This is the most recent version of Sailfish# sailfish (quasi-mapping-based) v0.9.2# [ program ] => sailfish # [ command ] => quant # [ index ] => { ./index_dir }# [ mates1 ] => { ./mate1.fastq }# [ mates2 ] => { ./mate2.fastq }# [ libType ] => { IU }# [ output ] => { ./results }# [ biasCorrect ] => { }# [ threads ] => { 6 }# [ gcSizeSamp ] => { 1 }# [ gcSpeedSamp ] => { 1 }# [ fldMean ] => { 200 }# [ fldSD ] => { 80 }# [ maxReadOcc ] => { 200 }# [ maxFragLen ] => { 1000 }# [ txpAggregationKey ] => { gene_id }# [ numBiasSamples ] => { 1000000 }# [ numFragSamples ] => { 10000 }# [ numGibbsSamples ] => { 0 }# [ numBootstraps ] => { 0 }Logs will be written to ./results/logs[2023-05-17 11:23:04.427] [jointLog] [info] parsing read library formatthere is 1 libLoading 32-bit quasi indexIndex contained 15 targetsLoaded targets[2023-05-17 11:23:04.690] [jointLog] [info] Loading Quasi index[2023-05-17 11:23:04.698] [jointLog] [info] done[2023-05-17 11:23:04.735] [jointLog] [info] Gathered fragment lengths from all threads[2023-05-17 11:23:04.735] [jointLog] [warning] Sailfish saw fewer then 10000 uniquely mapped reads so 200 will be used as the mean fragment length and 80 as the standard deviation for effective length correction[2023-05-17 11:23:04.737] [jointLog] [info] Estimating effective lengthsDone Quasi-Mapping [2023-05-17 11:23:04.693] [stderrLog] [info] Loading Suffix Array [2023-05-17 11:23:04.694] [stderrLog] [info] Loading Position Hash[2023-05-17 11:23:04.695] [stderrLog] [info] Loading Transcript Info [2023-05-17 11:23:04.697] [stderrLog] [info] Loading Rank-Select Bit Array[2023-05-17 11:23:04.697] [stderrLog] [info] There were 15 set bits in the bit array[2023-05-17 11:23:04.698] [stderrLog] [info] Computing transcript lengths[2023-05-17 11:23:04.698] [stderrLog] [info] Waiting to finish loading hash[2023-05-17 11:23:04.698] [stderrLog] [info] Done loading index[2023-05-17 11:23:04.783] [jointLog] [info] Computed 21 rich equivalence classes for further processing[2023-05-17 11:23:04.784] [jointLog] [info] Counted 10000 total reads in the equivalence classes [2023-05-17 11:23:04.784] [jointLog] [info] Starting optimizer:[2023-05-17 11:23:04.785] [jointLog] [info] Optimizing over 21 equivalence classes[2023-05-17 11:23:04.785] [jointLog] [info] iteration = 0 | max rel diff. = 14.873[2023-05-17 11:23:04.785] [jointLog] [info] iteration 50, recomputing effective lengths[2023-05-17 11:23:04.787] [jointLog] [info] iteration = 63 | max rel diff. = 0.00199953[2023-05-17 11:23:04.787] [jointLog] [info] Finished optimizer[2023-05-17 11:23:04.787] [jointLog] [info] writing output 
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/sailfish/sailfish (Test #4)" name="3" time="72.79326319694519">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Version Info: This is the most recent version of Sailfishwriting log to ./index_dir/logs/sailfish_index.logRapMap Indexer[Step 1 of 4] : counting k-mersElapsed time: 0.00172958sReplaced 0 non-ATCG nucleotidesClipped poly-A tails from 0 transcriptsBuilding rank-select dictionary and saving to disk doneElapsed time: 0.00011907sWriting sequence data to file . . . doneElapsed time: 0.00041238s[info] Building 32-bit suffix array (length of generalized text is 28577)Building suffix array . . . successsaving to disk . . . doneElapsed time: 0.00011555sdoneElapsed time: 0.0159098sprocessed 0 positionskhash had 18955 keyssaving hash to disk . . . doneElapsed time: 0.00102101sVersion Info: This is the most recent version of Sailfish# sailfish (quasi-mapping-based) v0.9.2# [ program ] => sailfish # [ command ] => quant # [ index ] => { ./index_dir }# [ mates1 ] => { ./mate1.fastq }# [ mates2 ] => { ./mate2.fastq }# [ libType ] => { IU }# [ output ] => { ./results }# [ biasCorrect ] => { }# [ threads ] => { 6 }# [ gcSizeSamp ] => { 1 }# [ gcSpeedSamp ] => { 1 }# [ fldMean ] => { 200 }# [ fldSD ] => { 80 }# [ maxReadOcc ] => { 200 }# [ geneMap ] => { ./geneMap.tabular }# [ maxFragLen ] => { 1000 }# [ txpAggregationKey ] => { gene_id }# [ numBiasSamples ] => { 1000000 }# [ numFragSamples ] => { 10000 }# [ numGibbsSamples ] => { 0 }# [ numBootstraps ] => { 0 }Logs will be written to ./results/logs[2023-05-17 11:23:10.674] [jointLog] [info] parsing read library formatthere is 1 libLoading 32-bit quasi indexIndex contained 15 targetsLoaded targets[2023-05-17 11:23:10.940] [stderrLog] [info] Loading Position Hash[2023-05-17 11:23:10.940] [stderrLog] [info] Loading Suffix Array [2023-05-17 11:23:10.943] [stderrLog] [info] Loading Transcript Info [2023-05-17 11:23:10.945] [stderrLog] [info] Loading Rank-Select Bit Array[2023-05-17 11:23:10.945] [stderrLog] [info] There were 15 set bits in the bit array[2023-05-17 11:23:10.946] [stderrLog] [info] Computing transcript lengths[2023-05-17 11:23:10.946] [stderrLog] [info] Waiting to finish loading hash[2023-05-17 11:23:10.946] [stderrLog] [info] Done loading indexDone Quasi-Mapping [2023-05-17 11:23:10.936] [jointLog] [info] Loading Quasi index[2023-05-17 11:23:10.946] [jointLog] [info] done[2023-05-17 11:23:10.977] [jointLog] [info] Gathered fragment lengths from all threads[2023-05-17 11:23:10.977] [jointLog] [warning] Sailfish saw fewer then 10000 uniquely mapped reads so 200 will be used as the mean fragment length and 80 as the standard deviation for effective length correction[2023-05-17 11:23:10.978] [jointLog] [info] Estimating effective lengths[2023-05-17 11:23:11.053] [jointLog] [info] Computed 21 rich equivalence classes for further processing[2023-05-17 11:23:11.053] [jointLog] [info] Counted 10000 total reads in the equivalence classes [2023-05-17 11:23:11.053] [jointLog] [info] Starting optimizer:[2023-05-17 11:23:11.054] [jointLog] [info] Optimizing over 21 equivalence classes[2023-05-17 11:23:11.054] [jointLog] [info] iteration = 0 | max rel diff. = 14.873[2023-05-17 11:23:11.054] [jointLog] [info] iteration 50, recomputing effective lengths[2023-05-17 11:23:11.055] [jointLog] [info] iteration = 63 | max rel diff. = 0.00199953[2023-05-17 11:23:11.055] [jointLog] [info] Finished optimizer[2023-05-17 11:23:11.055] [jointLog] [info] writing output Computing gene-level abundance estimatesThere were 3 transcripts mapping to 3 genesWARNING: couldn't find transcript named [NR_031764]; returning transcript  as it's own genedoneAggregating expressions to gene level . . . done
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon (Test #1)" name="0" time="49.775607109069824">
        
            
            <system-out><![CDATA[
            Threads = 2Vertex length = 31Hash functions = 5Filter size = 1048576Capacity = 2Files: ./index/ref_k31_fixed.fa--------------------------------------------------------------------------------Round 0, 0:1048576PassFillingFiltering100200True junctions count = 14False junctions count = 19Hash table size = 33Candidate marks count = 57--------------------------------------------------------------------------------Reallocating bifurcations time: 0True marks count: 51Edges construction time: 0--------------------------------------------------------------------------------Distinct junctions = 14for info, total work write each  : 2.331    total work inram from level 3 : 4.322  total work raw : 25.000 Bitarray          105024  bits (100.00 %)   (array + ranks )final hash             0  bits (0.00 %) (nb in final hash 0)
            ]]></system-out>
            <system-err><![CDATA[
            Version Info: ### PLEASE UPGRADE SALMON ###### A newer version of salmon with important bug fixes and improvements is available. #######The newest version, available at https://github.com/COMBINE-lab/salmon/releasescontains new features, improvements, and bug fixes; please upgrade at yourearliest convenience.###Sign up for the salmon mailing list to hear about new versions, features and updates at:https://oceangenomics.com/subscribe###[2023-05-17 10:56:05.838] [jLog] [warning] The salmon index is being built without any decoy sequences.  It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be provided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.[2023-05-17 10:56:05.838] [jLog] [info] building indexout : ./index[2023-05-17 10:56:05.840] [puff::index::jointLog] [info] Running fixFasta[Step 1 of 4] : counting k-mers[2023-05-17 10:56:05.852] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides[2023-05-17 10:56:05.852] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcriptswrote 15 cleaned references[2023-05-17 10:56:05.874] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers[2023-05-17 10:56:05.877] [puff::index::jointLog] [info] ntHll estimated 54811 distinct k-mers, setting filter size to 2^20allowedIn: 12Max Junction ID: 70seen.size():569 kmerInfo.size():71approximateContigTotalLength: 17465counters for complex kmers:(prec>1 & succ>1)=0 | (succ>1 & isStart)=0 | (prec>1 & isEnd)=0 | (isStart & isEnd)=0contig count: 24 element count: 19592 complex nodes: 0# of ones in rank vector: 23[2023-05-17 10:56:05.969] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.[2023-05-17 10:56:05.969] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory ./indexsize = 19592-----------------------------------------| Loading contigs | Time = 2.4379 ms-----------------------------------------size = 19592-----------------------------------------| Loading contig boundaries | Time = 1.7927 ms-----------------------------------------Number of ones: 23Number of ones per inventory item: 512Inventory entries filled: 123[2023-05-17 10:56:05.974] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.[2023-05-17 10:56:05.974] [puff::index::jointLog] [info] contig count for validation: 23[2023-05-17 10:56:05.975] [puff::index::jointLog] [info] Total # of Contigs : 23[2023-05-17 10:56:05.975] [puff::index::jointLog] [info] Total # of numerical Contigs : 23[2023-05-17 10:56:05.976] [puff::index::jointLog] [info] Total # of contig vec entries: 36[2023-05-17 10:56:05.976] [puff::index::jointLog] [info] bits per offset entry 6[2023-05-17 10:56:05.976] [puff::index::jointLog] [info] Done constructing the contig vector. 24[2023-05-17 10:56:05.994] [puff::index::jointLog] [info] # segments = 23[2023-05-17 10:56:05.994] [puff::index::jointLog] [info] total length = 19592[2023-05-17 10:56:05.995] [puff::index::jointLog] [info] Reading the reference files ...[2023-05-17 10:56:06.011] [puff::index::jointLog] [info] positional integer width = 15[2023-05-17 10:56:06.011] [puff::index::jointLog] [info] seqSize = 19592[2023-05-17 10:56:06.011] [puff::index::jointLog] [info] rankSize = 19592[2023-05-17 10:56:06.011] [puff::index::jointLog] [info] edgeVecSize = 0[2023-05-17 10:56:06.011] [puff::index::jointLog] [info] num keys = 18902[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   ela.. sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[2023-05-17 10:56:06.188] [puff::index::jointLog] [info] mphf size = 0.0125198 MB[2023-05-17 10:56:06.189] [puff::index::jointLog] [info] chunk size = 9796[2023-05-17 10:56:06.189] [puff::index::jointLog] [info] chunk 0 = [0, 9796)[2023-05-17 10:56:06.189] [puff::index::jointLog] [info] chunk 1 = [9796, 19562)[2023-05-17 10:56:06.190] [puff::index::jointLog] [info] finished populating pos vector[2023-05-17 10:56:06.190] [puff::index::jointLog] [info] writing index components[2023-05-17 10:56:06.222] [puff::index::jointLog] [info] finished writing dense pufferfish index[2023-05-17 10:56:06.232] [jLog] [info] done building indexVersion Info: ### PLEASE UPGRADE SALMON ###### A newer version of salmon with important bug fixes and improvements is available. #######The newest version, available at https://github.com/COMBINE-lab/salmon/releasescontains new features, improvements, and bug fixes; please upgrade at yourearliest convenience.###Sign up for the salmon mailing list to hear about new versions, features and updates at:https://oceangenomics.com/subscribe###### salmon (selective-alignment-based) v1.3.0### [ program ] => salmon ### [ command ] => quant ### [ index ] => { ./index }### [ libType ] => { U }### [ unmatedReads ] => { ./single.fasta }### [ threads ] => { 6 }### [ writeMappings ] => { ./output/samout.sam }### [ incompatPrior ] => { 0.0 }### [ biasSpeedSamp ] => { 5 }### [ fldMax ] => { 1000 }### [ fldMean ] => { 250 }### [ fldSD ] => { 25 }### [ forgettingFactor ] => { 0.65 }### [ maxReadOcc ] => { 100 }### [ numBiasSamples ] => { 2000000 }### [ numAuxModelSamples ] => { 5000000 }### [ numPreAuxModelSamples ] => { 5000 }### [ numGibbsSamples ] => { 0 }### [ numBootstraps ] => { 0 }### [ thinningFactor ] => { 16 }### [ sigDigits ] => { 3 }### [ vbPrior ] => { 1e-05 }### [ output ] => { ./output }Logs will be written to ./output/logs[2023-05-17 10:56:07.027] [jointLog] [info] setting maxHashResizeThreads to 6[2023-05-17 10:56:07.027] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.[2023-05-17 10:56:07.027] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65[2023-05-17 10:56:07.027] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.[2023-05-17 10:56:07.027] [jointLog] [info] parsing read library format[2023-05-17 10:56:07.027] [jointLog] [info] There is 1 library.-----------------------------------------| Loading contig table | Time = 1.5149 ms-----------------------------------------size = 24-----------------------------------------| Loading contig offsets | Time = 2.4701 ms----------------------------------------------------------------------------------| Loading reference lengths | Time = 993.33 us-----------------------------------------[2023-05-17 10:56:07.197] [jointLog] [info] Loading pufferfish index[2023-05-17 10:56:07.199] [jointLog] [info] Loading dense pufferfish index.-----------------------------------------| Loading mphf table | Time = 1.5605 ms-----------------------------------------size = 19592Number of ones: 23Number of ones per inventory item: 512Inventory entries filled: 1-----------------------------------------| Loading contig boundaries | Time = 1.5506 ms-----------------------------------------size = 19592-----------------------------------------| Loading sequence | Time = 1.5479 ms-----------------------------------------size = 18902-----------------------------------------| Loading positions | Time = 3.0079 ms-----------------------------------------size = 28562-----------------------------------------| Loading reference sequence | Time = 1.3106 ms----------------------------------------------------------------------------------| Loading reference accumulative lengths | Time = 1.0277 ms-----------------------------------------[2023-05-17 10:56:07.218] [jointLog] [info] done[2023-05-17 10:56:07.218] [jointLog] [info] Index contained 15 targets[2023-05-17 10:56:07.218] [jointLog] [info] Number of decoys : 0[2023-05-17 10:56:07.274] [jointLog] [info] Computed 15 rich equivalence classes for further processing[2023-05-17 10:56:07.274] [jointLog] [info] Counted 15 total reads in the equivalence classes [2023-05-17 10:56:07.276] [jointLog] [info] Number of mappings discarded because of alignment score : 5[2023-05-17 10:56:07.276] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 0[2023-05-17 10:56:07.276] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0[2023-05-17 10:56:07.276] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0[2023-05-17 10:56:07.276] [jointLog] [warning] Only 15 fragments were mapped, but the number of burn-in fragments was set to 5000000.The effective lengths have been computed using the observed mappings.[2023-05-17 10:56:07.276] [jointLog] [info] Mapping rate = 100%[2023-05-17 10:56:07.276] [jointLog] [info] finished quantifyLibrary()[2023-05-17 10:56:07.283] [jointLog] [info] Starting optimizer[2023-05-17 10:56:07.284] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate[2023-05-17 10:56:07.284] [jointLog] [info] iteration = 0 | max rel diff. = 0[2023-05-17 10:56:07.285] [jointLog] [info] iteration = 100 | max rel diff. = 0[2023-05-17 10:56:07.285] [jointLog] [info] Finished optimizer[2023-05-17 10:56:07.285] [jointLog] [info] writing output [2023-05-17 10:56:07.293] [jointLog] [warning] NOTE: Read Lib [[ ./single.fasta ]] :Detected a *potential* strand bias > 1% in an unstranded protocol check the file: ./output/lib_format_counts.json for details
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon (Test #2)" name="1" time="53.44216728210449">
        
            
            <system-out><![CDATA[
            Threads = 2Vertex length = 31Hash functions = 5Filter size = 1048576Capacity = 2Files: ./index/ref_k31_fixed.fa--------------------------------------------------------------------------------Round 0, 0:1048576PassFillingFiltering100200True junctions count = 14False junctions count = 17Hash table size = 31Candidate marks count = 54--------------------------------------------------------------------------------Reallocating bifurcations time: 0True marks count: 51Edges construction time: 0--------------------------------------------------------------------------------Distinct junctions = 14for info, total work write each  : 2.331    total work inram from level 3 : 4.322  total work raw : 25.000 Bitarray          105024  bits (100.00 %)   (array + ranks )final hash             0  bits (0.00 %) (nb in final hash 0)
            ]]></system-out>
            <system-err><![CDATA[
            Version Info: ### PLEASE UPGRADE SALMON ###### A newer version of salmon with important bug fixes and improvements is available. #######The newest version, available at https://github.com/COMBINE-lab/salmon/releasescontains new features, improvements, and bug fixes; please upgrade at yourearliest convenience.###Sign up for the salmon mailing list to hear about new versions, features and updates at:https://oceangenomics.com/subscribe###[2023-05-17 10:56:15.903] [jLog] [warning] The salmon index is being built without any decoy sequences.  It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be provided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.[2023-05-17 10:56:15.903] [jLog] [info] building indexout : ./index[2023-05-17 10:56:15.905] [puff::index::jointLog] [info] Running fixFasta[Step 1 of 4] : counting k-mers[2023-05-17 10:56:15.918] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides[2023-05-17 10:56:15.918] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcriptswrote 15 cleaned references[2023-05-17 10:56:15.940] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers[2023-05-17 10:56:15.942] [puff::index::jointLog] [info] ntHll estimated 54811 distinct k-mers, setting filter size to 2^20allowedIn: 12Max Junction ID: 70seen.size():569 kmerInfo.size():71approximateContigTotalLength: 17465counters for complex kmers:(prec>1 & succ>1)=0 | (succ>1 & isStart)=0 | (prec>1 & isEnd)=0 | (isStart & isEnd)=0contig count: 24 element count: 19592 complex nodes: 0# of ones in rank vector: 23[2023-05-17 10:56:16.040] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.[2023-05-17 10:56:16.040] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory ./indexsize = 19592-----------------------------------------| Loading contigs | Time = 1.9413 ms-----------------------------------------size = 19592-----------------------------------------| Loading contig boundaries | Time = 1.4631 ms-----------------------------------------Number of ones: 23Number of ones per inventory item: 512Inventory entries filled: 123[2023-05-17 10:56:16.044] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.[2023-05-17 10:56:16.044] [puff::index::jointLog] [info] contig count for validation: 23[2023-05-17 10:56:16.044] [puff::index::jointLog] [info] Total # of Contigs : 23[2023-05-17 10:56:16.044] [puff::index::jointLog] [info] Total # of numerical Contigs : 23[2023-05-17 10:56:16.046] [puff::index::jointLog] [info] Total # of contig vec entries: 36[2023-05-17 10:56:16.046] [puff::index::jointLog] [info] bits per offset entry 6[2023-05-17 10:56:16.046] [puff::index::jointLog] [info] Done constructing the contig vector. 24[2023-05-17 10:56:16.074] [puff::index::jointLog] [info] # segments = 23[2023-05-17 10:56:16.074] [puff::index::jointLog] [info] total length = 19592[2023-05-17 10:56:16.074] [puff::index::jointLog] [info] Reading the reference files ...[2023-05-17 10:56:16.094] [puff::index::jointLog] [info] positional integer width = 15[2023-05-17 10:56:16.094] [puff::index::jointLog] [info] seqSize = 19592[2023-05-17 10:56:16.094] [puff::index::jointLog] [info] rankSize = 19592[2023-05-17 10:56:16.094] [puff::index::jointLog] [info] edgeVecSize = 0[2023-05-17 10:56:16.094] [puff::index::jointLog] [info] num keys = 18902[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   ela..   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[2023-05-17 10:56:16.252] [puff::index::jointLog] [info] mphf size = 0.0125198 MB[2023-05-17 10:56:16.252] [puff::index::jointLog] [info] chunk size = 9796[2023-05-17 10:56:16.252] [puff::index::jointLog] [info] chunk 0 = [0, 9796)[2023-05-17 10:56:16.252] [puff::index::jointLog] [info] chunk 1 = [9796, 19562)[2023-05-17 10:56:16.254] [puff::index::jointLog] [info] finished populating pos vector[2023-05-17 10:56:16.254] [puff::index::jointLog] [info] writing index components[2023-05-17 10:56:16.281] [puff::index::jointLog] [info] finished writing dense pufferfish index[2023-05-17 10:56:16.291] [jLog] [info] done building indexVersion Info: ### PLEASE UPGRADE SALMON ###### A newer version of salmon with important bug fixes and improvements is available. #######The newest version, available at https://github.com/COMBINE-lab/salmon/releasescontains new features, improvements, and bug fixes; please upgrade at yourearliest convenience.###Sign up for the salmon mailing list to hear about new versions, features and updates at:https://oceangenomics.com/subscribe###### salmon (selective-alignment-based) v1.3.0### [ program ] => salmon ### [ command ] => quant ### [ index ] => { ./index }### [ libType ] => { U }### [ unmatedReads ] => { ./single.fasta }### [ threads ] => { 6 }### [ incompatPrior ] => { 0.0 }### [ biasSpeedSamp ] => { 5 }### [ fldMax ] => { 1000 }### [ fldMean ] => { 250 }### [ fldSD ] => { 25 }### [ forgettingFactor ] => { 0.65 }### [ maxReadOcc ] => { 100 }### [ numBiasSamples ] => { 2000000 }### [ numAuxModelSamples ] => { 5000000 }### [ numPreAuxModelSamples ] => { 5000 }### [ numGibbsSamples ] => { 0 }### [ numBootstraps ] => { 0 }### [ thinningFactor ] => { 16 }### [ sigDigits ] => { 3 }### [ vbPrior ] => { 1e-05 }### [ output ] => { ./output }Logs will be written to ./output/logs[2023-05-17 10:56:16.374] [jointLog] [info] setting maxHashResizeThreads to 6[2023-05-17 10:56:16.374] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.[2023-05-17 10:56:16.374] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65[2023-05-17 10:56:16.374] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.[2023-05-17 10:56:16.374] [jointLog] [info] parsing read library format[2023-05-17 10:56:16.374] [jointLog] [info] There is 1 library.[2023-05-17 10:56:16.433] [jointLog] [info] Loading pufferfish index[2023-05-17 10:56:16.434] [jointLog] [info] Loading dense pufferfish index.-----------------------------------------| Loading contig table | Time = 2.0729 ms-----------------------------------------size = 24-----------------------------------------| Loading contig offsets | Time = 6.6324 ms----------------------------------------------------------------------------------| Loading reference lengths | Time = 1.4936 ms----------------------------------------------------------------------------------| Loading mphf table | Time = 1.9358 ms-----------------------------------------size = 19592Number of ones: 23Number of ones per inventory item: 512Inventory entries filled: 1-----------------------------------------| Loading contig boundaries | Time = 1.9218 ms-----------------------------------------size = 19592-----------------------------------------| Loading sequence | Time = 1.9562 ms-----------------------------------------size = 18902-----------------------------------------| Loading positions | Time = 2.686 ms-----------------------------------------size = 28562-----------------------------------------| Loading reference sequence | Time = 2.2366 ms----------------------------------------------------------------------------------| Loading reference accumulative lengths | Time = 790.52 us-----------------------------------------[2023-05-17 10:56:16.461] [jointLog] [info] done[2023-05-17 10:56:16.461] [jointLog] [info] Index contained 15 targets[2023-05-17 10:56:16.461] [jointLog] [info] Number of decoys : 0[2023-05-17 10:56:16.513] [jointLog] [info] Computed 15 rich equivalence classes for further processing[2023-05-17 10:56:16.513] [jointLog] [info] Counted 15 total reads in the equivalence classes [2023-05-17 10:56:16.514] [jointLog] [info] Number of mappings discarded because of alignment score : 5[2023-05-17 10:56:16.514] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 0[2023-05-17 10:56:16.514] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0[2023-05-17 10:56:16.514] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0[2023-05-17 10:56:16.515] [jointLog] [warning] Only 15 fragments were mapped, but the number of burn-in fragments was set to 5000000.The effective lengths have been computed using the observed mappings.[2023-05-17 10:56:16.515] [jointLog] [info] Mapping rate = 100%[2023-05-17 10:56:16.515] [jointLog] [info] finished quantifyLibrary()[2023-05-17 10:56:16.521] [jointLog] [info] Starting optimizer[2023-05-17 10:56:16.522] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate[2023-05-17 10:56:16.522] [jointLog] [info] iteration = 0 | max rel diff. = 0[2023-05-17 10:56:16.523] [jointLog] [info] iteration = 100 | max rel diff. = 0[2023-05-17 10:56:16.523] [jointLog] [info] Finished optimizer[2023-05-17 10:56:16.523] [jointLog] [info] writing output [2023-05-17 10:56:16.531] [jointLog] [warning] NOTE: Read Lib [[ ./single.fasta ]] :Detected a *potential* strand bias > 1% in an unstranded protocol check the file: ./output/lib_format_counts.json for details
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon (Test #3)" name="2" time="41.73170876502991">
        
            
            <system-out><![CDATA[
            Threads = 2Vertex length = 31Hash functions = 5Filter size = 1048576Capacity = 2Files: ./index/ref_k31_fixed.fa--------------------------------------------------------------------------------Round 0, 0:1048576PassFillingFiltering100200True junctions count = 14False junctions count = 19Hash table size = 33Candidate marks count = 57--------------------------------------------------------------------------------Reallocating bifurcations time: 0True marks count: 51Edges construction time: 0--------------------------------------------------------------------------------Distinct junctions = 14for info, total work write each  : 2.331    total work inram from level 3 : 4.322  total work raw : 25.000 Bitarray          105024  bits (100.00 %)   (array + ranks )final hash             0  bits (0.00 %) (nb in final hash 0)
            ]]></system-out>
            <system-err><![CDATA[
            Version Info: ### PLEASE UPGRADE SALMON ###### A newer version of salmon with important bug fixes and improvements is available. #######The newest version, available at https://github.com/COMBINE-lab/salmon/releasescontains new features, improvements, and bug fixes; please upgrade at yourearliest convenience.###Sign up for the salmon mailing list to hear about new versions, features and updates at:https://oceangenomics.com/subscribe###[2023-05-17 10:56:51.544] [jLog] [warning] The salmon index is being built without any decoy sequences.  It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be provided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.[2023-05-17 10:56:51.544] [jLog] [info] building indexout : ./index[2023-05-17 10:56:51.544] [puff::index::jointLog] [info] Running fixFasta[Step 1 of 4] : counting k-mers[2023-05-17 10:56:51.558] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides[2023-05-17 10:56:51.558] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcriptswrote 15 cleaned references[2023-05-17 10:56:51.578] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers[2023-05-17 10:56:51.580] [puff::index::jointLog] [info] ntHll estimated 54811 distinct k-mers, setting filter size to 2^20allowedIn: 12Max Junction ID: 70seen.size():569 kmerInfo.size():71approximateContigTotalLength: 17465counters for complex kmers:(prec>1 & succ>1)=0 | (succ>1 & isStart)=0 | (prec>1 & isEnd)=0 | (isStart & isEnd)=0contig count: 24 element count: 19592 complex nodes: 0# of ones in rank vector: 23[2023-05-17 10:56:51.660] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.[2023-05-17 10:56:51.660] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory ./indexsize = 19592-----------------------------------------| Loading contigs | Time = 1.7912 ms-----------------------------------------size = 19592-----------------------------------------| Loading contig boundaries | Time = 1.4973 ms-----------------------------------------Number of ones: 23Number of ones per inventory item: 512Inventory entries filled: 123[2023-05-17 10:56:51.664] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.[2023-05-17 10:56:51.664] [puff::index::jointLog] [info] contig count for validation: 23[2023-05-17 10:56:51.665] [puff::index::jointLog] [info] Total # of Contigs : 23[2023-05-17 10:56:51.665] [puff::index::jointLog] [info] Total # of numerical Contigs : 23[2023-05-17 10:56:51.665] [puff::index::jointLog] [info] Total # of contig vec entries: 36[2023-05-17 10:56:51.665] [puff::index::jointLog] [info] bits per offset entry 6[2023-05-17 10:56:51.665] [puff::index::jointLog] [info] Done constructing the contig vector. 24[2023-05-17 10:56:51.685] [puff::index::jointLog] [info] # segments = 23[2023-05-17 10:56:51.685] [puff::index::jointLog] [info] total length = 19592[2023-05-17 10:56:51.685] [puff::index::jointLog] [info] Reading the reference files ...[2023-05-17 10:56:51.704] [puff::index::jointLog] [info] positional integer width = 15[2023-05-17 10:56:51.704] [puff::index::jointLog] [info] seqSize = 19592[2023-05-17 10:56:51.704] [puff::index::jointLog] [info] rankSize = 19592[2023-05-17 10:56:51.704] [puff::index::jointLog] [info] edgeVecSize = 0[2023-05-17 10:56:51.704] [puff::index::jointLog] [info] num keys = 18902[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   ela..   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[2023-05-17 10:56:51.823] [puff::index::jointLog] [info] mphf size = 0.0125198 MB[2023-05-17 10:56:51.823] [puff::index::jointLog] [info] chunk size = 9796[2023-05-17 10:56:51.823] [puff::index::jointLog] [info] chunk 0 = [0, 9796)[2023-05-17 10:56:51.823] [puff::index::jointLog] [info] chunk 1 = [9796, 19562)[2023-05-17 10:56:51.825] [puff::index::jointLog] [info] finished populating pos vector[2023-05-17 10:56:51.825] [puff::index::jointLog] [info] writing index components[2023-05-17 10:56:51.845] [puff::index::jointLog] [info] finished writing dense pufferfish index[2023-05-17 10:56:51.853] [jLog] [info] done building indexVersion Info: ### PLEASE UPGRADE SALMON ###### A newer version of salmon with important bug fixes and improvements is available. #######The newest version, available at https://github.com/COMBINE-lab/salmon/releasescontains new features, improvements, and bug fixes; please upgrade at yourearliest convenience.###Sign up for the salmon mailing list to hear about new versions, features and updates at:https://oceangenomics.com/subscribe###### salmon (selective-alignment-based) v1.3.0### [ program ] => salmon ### [ command ] => quant ### [ index ] => { ./index }### [ libType ] => { U }### [ unmatedReads ] => { ./single.fasta }### [ threads ] => { 6 }### [ incompatPrior ] => { 0.0 }### [ biasSpeedSamp ] => { 5 }### [ fldMax ] => { 1000 }### [ fldMean ] => { 250 }### [ fldSD ] => { 25 }### [ forgettingFactor ] => { 0.65 }### [ maxReadOcc ] => { 100 }### [ numBiasSamples ] => { 2000000 }### [ numAuxModelSamples ] => { 5000000 }### [ numPreAuxModelSamples ] => { 5000 }### [ numGibbsSamples ] => { 0 }### [ numBootstraps ] => { 0 }### [ thinningFactor ] => { 16 }### [ sigDigits ] => { 3 }### [ vbPrior ] => { 1e-05 }### [ output ] => { ./output }Logs will be written to ./output/logs[2023-05-17 10:56:51.932] [jointLog] [info] setting maxHashResizeThreads to 6[2023-05-17 10:56:51.932] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.[2023-05-17 10:56:51.932] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65[2023-05-17 10:56:51.932] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.[2023-05-17 10:56:51.932] [jointLog] [info] parsing read library format[2023-05-17 10:56:51.932] [jointLog] [info] There is 1 library.-----------------------------------------| Loading contig table | Time = 1.237 ms-----------------------------------------[2023-05-17 10:56:51.987] [jointLog] [info] Loading pufferfish index[2023-05-17 10:56:51.988] [jointLog] [info] Loading dense pufferfish index.size = 24-----------------------------------------| Loading contig offsets | Time = 2.5459 ms----------------------------------------------------------------------------------| Loading reference lengths | Time = 872.52 us----------------------------------------------------------------------------------| Loading mphf table | Time = 1.4646 ms-----------------------------------------size = 19592Number of ones: 23Number of ones per inventory item: 512Inventory entries filled: 1-----------------------------------------| Loading contig boundaries | Time = 1.9692 ms-----------------------------------------size = 19592-----------------------------------------| Loading sequence | Time = 1.5542 ms-----------------------------------------size = 18902-----------------------------------------| Loading positions | Time = 2.7505 ms-----------------------------------------size = 28562-----------------------------------------| Loading reference sequence | Time = 1.7254 ms----------------------------------------------------------------------------------| Loading reference accumulative lengths | Time = 1.1578 ms-----------------------------------------[2023-05-17 10:56:52.008] [jointLog] [info] done[2023-05-17 10:56:52.008] [jointLog] [info] Index contained 15 targets[2023-05-17 10:56:52.008] [jointLog] [info] Number of decoys : 0[2023-05-17 10:56:52.058] [jointLog] [info] Computed 15 rich equivalence classes for further processing[2023-05-17 10:56:52.058] [jointLog] [info] Counted 15 total reads in the equivalence classes [2023-05-17 10:56:52.059] [jointLog] [info] Number of mappings discarded because of alignment score : 5[2023-05-17 10:56:52.059] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 0[2023-05-17 10:56:52.059] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0[2023-05-17 10:56:52.059] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0[2023-05-17 10:56:52.059] [jointLog] [warning] Only 15 fragments were mapped, but the number of burn-in fragments was set to 5000000.The effective lengths have been computed using the observed mappings.[2023-05-17 10:56:52.059] [jointLog] [info] Mapping rate = 100%[2023-05-17 10:56:52.059] [jointLog] [info] finished quantifyLibrary()[2023-05-17 10:56:52.067] [jointLog] [info] Starting optimizer[2023-05-17 10:56:52.068] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate[2023-05-17 10:56:52.068] [jointLog] [info] iteration = 0 | max rel diff. = 0[2023-05-17 10:56:52.069] [jointLog] [info] iteration = 100 | max rel diff. = 0[2023-05-17 10:56:52.070] [jointLog] [info] Finished optimizer[2023-05-17 10:56:52.070] [jointLog] [info] writing output [2023-05-17 10:56:52.078] [jointLog] [warning] NOTE: Read Lib [[ ./single.fasta ]] :Detected a *potential* strand bias > 1% in an unstranded protocol check the file: ./output/lib_format_counts.json for details
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon (Test #4)" name="3" time="40.69178628921509">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "quant_type|afile": {   "id": "75e4942bdf820da1",   "src": "hda"  },  "quant_type|noErrorModel": true,  "quant_type|numErrorBins": "5",  "quant_type|qtype": "alignment",  "quant_type|sampleOut": true,  "quant_type|sampleUnaligned": true,  "quant_type|transcript": {   "id": "f3ed2e547fd97f11",   "src": "hda"  } }, "job": {  "command_line": "salmon quant -t \u0027/galaxy/server/database/objects/d/8/c/dataset_d8c35673-05a0-4ad3-b547-451647b17fdf.dat\u0027 -l \u0027U\u0027 -a \u0027/galaxy/server/database/objects/3/5/5/dataset_35517072-5d31-492c-bb13-9084f177422a.dat\u0027 --threads \"${GALAXY_SLOTS:-4}\"  --noErrorModel --numErrorBins \u00275\u0027 --sampleOut --sampleUnaligned         --incompatPrior \u00270.0\u0027       --biasSpeedSamp \u00275\u0027 --fldMax \u00271000\u0027 --fldMean \u0027250\u0027 --fldSD \u002725\u0027 --forgettingFactor \u00270.65\u0027  --maxReadOcc \u0027100\u0027     --numBiasSamples \u00272000000\u0027 --numAuxModelSamples \u00275000000\u0027 --numPreAuxModelSamples \u00275000\u0027  --numGibbsSamples \u00270\u0027  --numBootstraps \u00270\u0027  --thinningFactor \u002716\u0027  --sigDigits \u00273\u0027 --vbPrior \u00271e-05\u0027   -o ./output   \u0026\u0026 samtools sort -@ ${GALAXY_SLOTS} --output-fmt=BAM -o ./output/bamout.bam ./output/postSample.bam",  "command_version": "",  "create_time": "2023-05-17T10:56:50.003135",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-pkbpz",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "2dd828bc733b7e54",  "inputs": {   "afile": {    "id": "75e4942bdf820da1",    "src": "hda",    "uuid": "35517072-5d31-492c-bb13-9084f177422a"   },   "transcript": {    "id": "f3ed2e547fd97f11",    "src": "hda",    "uuid": "d8c35673-05a0-4ad3-b547-451647b17fdf"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1684321017.0000000",    "title": "Job End Time",    "value": "2023-05-17 10:56:57"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1684321016.0000000",    "title": "Job Start Time",    "value": "2023-05-17 10:56:56"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "51539.0000000",    "title": "Memory Allocated (MB)",    "value": "51539"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "6.0000000",    "title": "Cores Allocated",    "value": "6"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_quant": {    "id": "b0efcd9631ebbbf0",    "src": "hda",    "uuid": "6b3d8ec4-c95d-42ba-8e9f-32c2c3a96c9e"   },   "postSample": {    "id": "74e9b20f206e80b8",    "src": "hda",    "uuid": "8e43f0dd-6ab8-4699-98ba-e82c8439bbde"   }  },  "params": {   "__input_ext": "\"bam\"",   "adv": "{\"biasSpeedSamp\": \"5\", \"bootstrapReproject\": false, \"dumpEq\": false, \"dumpEqWeights\": false, \"fldMax\": \"1000\", \"fldMean\": \"250\", \"fldSD\": \"25\", \"forgettingFactor\": \"0.65\", \"initUniform\": false, \"maxReadOcc\": \"100\", \"minAssignedFrags\": \"\", \"noBiasLengthThreshold\": false, \"noEffectiveLengthCorrection\": false, \"noFragLengthDist\": false, \"noGammaDraw\": false, \"noLengthCorrection\": false, \"numAuxModelSamples\": \"5000000\", \"numBiasSamples\": \"2000000\", \"numBootstraps\": \"0\", \"numGibbsSamples\": \"0\", \"numPreAuxModelSamples\": \"5000\", \"perTranscriptPrior\": false, \"rangeFactorizationBins\": \"0\", \"sigDigits\": \"3\", \"skipQuant\": false, \"thinningFactor\": \"16\", \"useEM\": false, \"vbPrior\": \"1e-05\", \"writeOrphanLinks\": false, \"writeUnmappedNames\": false}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "gcBias": "false",   "geneMap": null,   "incompatPrior": "\"0.0\"",   "meta": "false",   "quant_type": "{\"__current_case__\": 1, \"afile\": {\"values\": [{\"id\": 212, \"src\": \"hda\"}]}, \"discardOrphans\": false, \"gencode\": false, \"noErrorModel\": true, \"numErrorBins\": \"5\", \"qtype\": \"alignment\", \"sampleOut\": true, \"sampleUnaligned\": true, \"strandedness\": \"U\", \"transcript\": {\"values\": [{\"id\": 213, \"src\": \"hda\"}]}}",   "seqBias": "false"  },  "state": "ok",  "stderr": "Version Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###\n# salmon (alignment-based) v1.3.0\n# [ program ] =\u003e salmon \n# [ command ] =\u003e quant \n# [ targets ] =\u003e { /galaxy/server/database/objects/d/8/c/dataset_d8c35673-05a0-4ad3-b547-451647b17fdf.dat }\n# [ libType ] =\u003e { U }\n# [ alignments ] =\u003e { /galaxy/server/database/objects/3/5/5/dataset_35517072-5d31-492c-bb13-9084f177422a.dat }\n# [ threads ] =\u003e { 6 }\n# [ noErrorModel ] =\u003e { }\n# [ numErrorBins ] =\u003e { 5 }\n# [ sampleOut ] =\u003e { }\n# [ sampleUnaligned ] =\u003e { }\n# [ incompatPrior ] =\u003e { 0.0 }\n# [ biasSpeedSamp ] =\u003e { 5 }\n# [ fldMax ] =\u003e { 1000 }\n# [ fldMean ] =\u003e { 250 }\n# [ fldSD ] =\u003e { 25 }\n# [ forgettingFactor ] =\u003e { 0.65 }\n# [ maxReadOcc ] =\u003e { 100 }\n# [ numBiasSamples ] =\u003e { 2000000 }\n# [ numAuxModelSamples ] =\u003e { 5000000 }\n# [ numPreAuxModelSamples ] =\u003e { 5000 }\n# [ numGibbsSamples ] =\u003e { 0 }\n# [ numBootstraps ] =\u003e { 0 }\n# [ thinningFactor ] =\u003e { 16 }\n# [ sigDigits ] =\u003e { 3 }\n# [ vbPrior ] =\u003e { 1e-05 }\n# [ output ] =\u003e { ./output }\nLogs will be written to ./output/logs\n[2023-05-17 10:56:56.255] [jointLog] [info] setting maxHashResizeThreads to 6\n[2023-05-17 10:56:56.255] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.\nLibrary format { type:single end, relative orientation:none, strandedness:unstranded }\n[2023-05-17 10:56:56.256] [jointLog] [info] numQuantThreads = 3\nparseThreads = 3\nChecking that provided alignment files have consistent headers . . . done\nPopulating targets from aln = \"/galaxy/server/database/objects/3/5/5/dataset_35517072-5d31-492c-bb13-9084f177422a.dat\", fasta = \"/galaxy/server/database/objects/d/8/c/dataset_d8c35673-05a0-4ad3-b547-451647b17fdf.dat\" . . .done\n\n\n\n\n\r\r\u001b[0;32mprocessed\u001b[0;31m 0 \u001b[0;32mreads in current round\u001b[0;0m\r\r\u001b[0;32mprocessed\u001b[0;31m 28503 \u001b[0;32mreads in current round\u001b[0;0m\n\r\rkilling thread 0 . . . done\r\rkilling thread 1 . . . done\r\rkilling thread 2 . . . done\n\n# observed = 28503 / # required = 50000000\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\nResetting BAMQueue from file(s) [ \"/galaxy/server/database/objects/3/5/5/dataset_35517072-5d31-492c-bb13-9084f177422a.dat\" ] . . . done\n\r\r\u001b[32mprocessed\u001b[31m 0 \u001b[32mreads\u001b[0m\nkilling thread 0 . . . done\r\rkilling thread 1 . . . done\r\rkilling thread 2 . . . done\r\r\n# observed = 28503 mapped fragments.\u001b[F\u001b[F\u001b[F\u001b[FWaiting on output thread\ndone\n\n\n\n\n\nFreeing memory used by read queue . . . \nJoined parsing thread . . . \"/galaxy/server/database/objects/3/5/5/dataset_35517072-5d31-492c-bb13-9084f177422a.dat\" \nClosed all files . . . \nEmptied frag queue. . . [2023-05-17 10:56:56.541] [jointLog] [info] replaced 0 non-ACGT nucleotides with random nucleotides\n[2023-05-17 10:56:56.717] [jointLog] [info] \n\n\nCompleted first pass through the alignment file.\nTotal # of mapped reads : 28503\n# of uniquely mapped reads : 28502\n# ambiguously mapped reads : 1\n\n\n\n[2023-05-17 10:56:56.725] [jointLog] [info] Computed 18 rich equivalence classes for further processing\n[2023-05-17 10:56:56.725] [jointLog] [info] Counted 28503 total reads in the equivalence classes \n[2023-05-17 10:56:56.725] [jointLog] [warning] Only 28503 fragments were mapped, but the number of burn-in fragments was set to 5000000.\nThe effective lengths have been computed using the observed mappings.\n\n[2023-05-17 10:56:56.727] [jointLog] [info] starting optimizer\n[2023-05-17 10:56:56.727] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate\n[2023-05-17 10:56:56.727] [jointLog] [info] iteration = 0 | max rel diff. = 21.8815\n[2023-05-17 10:56:56.728] [jointLog] [info] iteration = 100 | max rel diff. = 0\n[2023-05-17 10:56:56.728] [jointLog] [info] finished optimizer\n[2023-05-17 10:56:56.728] [jointLog] [info] writing output\n[2023-05-17 10:56:56.735] [jointLog] [info] Sampling alignments; outputting results to ./output/postSample.bam\n\n\nEmptied Alignemnt Group Pool. . \nEmptied Alignment Group Queue. . . done\n[bam_sort_core] merging from 0 files and 6 in-memory blocks...\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon/1.3.0+galaxy1",  "tool_stderr": "Version Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###\n# salmon (alignment-based) v1.3.0\n# [ program ] =\u003e salmon \n# [ command ] =\u003e quant \n# [ targets ] =\u003e { /galaxy/server/database/objects/d/8/c/dataset_d8c35673-05a0-4ad3-b547-451647b17fdf.dat }\n# [ libType ] =\u003e { U }\n# [ alignments ] =\u003e { /galaxy/server/database/objects/3/5/5/dataset_35517072-5d31-492c-bb13-9084f177422a.dat }\n# [ threads ] =\u003e { 6 }\n# [ noErrorModel ] =\u003e { }\n# [ numErrorBins ] =\u003e { 5 }\n# [ sampleOut ] =\u003e { }\n# [ sampleUnaligned ] =\u003e { }\n# [ incompatPrior ] =\u003e { 0.0 }\n# [ biasSpeedSamp ] =\u003e { 5 }\n# [ fldMax ] =\u003e { 1000 }\n# [ fldMean ] =\u003e { 250 }\n# [ fldSD ] =\u003e { 25 }\n# [ forgettingFactor ] =\u003e { 0.65 }\n# [ maxReadOcc ] =\u003e { 100 }\n# [ numBiasSamples ] =\u003e { 2000000 }\n# [ numAuxModelSamples ] =\u003e { 5000000 }\n# [ numPreAuxModelSamples ] =\u003e { 5000 }\n# [ numGibbsSamples ] =\u003e { 0 }\n# [ numBootstraps ] =\u003e { 0 }\n# [ thinningFactor ] =\u003e { 16 }\n# [ sigDigits ] =\u003e { 3 }\n# [ vbPrior ] =\u003e { 1e-05 }\n# [ output ] =\u003e { ./output }\nLogs will be written to ./output/logs\n[2023-05-17 10:56:56.255] [jointLog] [info] setting maxHashResizeThreads to 6\n[2023-05-17 10:56:56.255] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.\nLibrary format { type:single end, relative orientation:none, strandedness:unstranded }\n[2023-05-17 10:56:56.256] [jointLog] [info] numQuantThreads = 3\nparseThreads = 3\nChecking that provided alignment files have consistent headers . . . done\nPopulating targets from aln = \"/galaxy/server/database/objects/3/5/5/dataset_35517072-5d31-492c-bb13-9084f177422a.dat\", fasta = \"/galaxy/server/database/objects/d/8/c/dataset_d8c35673-05a0-4ad3-b547-451647b17fdf.dat\" . . .done\n\n\n\n\n\r\r\u001b[0;32mprocessed\u001b[0;31m 0 \u001b[0;32mreads in current round\u001b[0;0m\r\r\u001b[0;32mprocessed\u001b[0;31m 28503 \u001b[0;32mreads in current round\u001b[0;0m\n\r\rkilling thread 0 . . . done\r\rkilling thread 1 . . . done\r\rkilling thread 2 . . . done\n\n# observed = 28503 / # required = 50000000\u001b[A\u001b[A\u001b[A\u001b[A\u001b[A\n\n\n\nResetting BAMQueue from file(s) [ \"/galaxy/server/database/objects/3/5/5/dataset_35517072-5d31-492c-bb13-9084f177422a.dat\" ] . . . done\n\r\r\u001b[32mprocessed\u001b[31m 0 \u001b[32mreads\u001b[0m\nkilling thread 0 . . . done\r\rkilling thread 1 . . . done\r\rkilling thread 2 . . . done\r\r\n# observed = 28503 mapped fragments.\u001b[F\u001b[F\u001b[F\u001b[FWaiting on output thread\ndone\n\n\n\n\n\nFreeing memory used by read queue . . . \nJoined parsing thread . . . \"/galaxy/server/database/objects/3/5/5/dataset_35517072-5d31-492c-bb13-9084f177422a.dat\" \nClosed all files . . . \nEmptied frag queue. . . [2023-05-17 10:56:56.541] [jointLog] [info] replaced 0 non-ACGT nucleotides with random nucleotides\n[2023-05-17 10:56:56.717] [jointLog] [info] \n\n\nCompleted first pass through the alignment file.\nTotal # of mapped reads : 28503\n# of uniquely mapped reads : 28502\n# ambiguously mapped reads : 1\n\n\n\n[2023-05-17 10:56:56.725] [jointLog] [info] Computed 18 rich equivalence classes for further processing\n[2023-05-17 10:56:56.725] [jointLog] [info] Counted 28503 total reads in the equivalence classes \n[2023-05-17 10:56:56.725] [jointLog] [warning] Only 28503 fragments were mapped, but the number of burn-in fragments was set to 5000000.\nThe effective lengths have been computed using the observed mappings.\n\n[2023-05-17 10:56:56.727] [jointLog] [info] starting optimizer\n[2023-05-17 10:56:56.727] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate\n[2023-05-17 10:56:56.727] [jointLog] [info] iteration = 0 | max rel diff. = 21.8815\n[2023-05-17 10:56:56.728] [jointLog] [info] iteration = 100 | max rel diff. = 0\n[2023-05-17 10:56:56.728] [jointLog] [info] finished optimizer\n[2023-05-17 10:56:56.728] [jointLog] [info] writing output\n[2023-05-17 10:56:56.735] [jointLog] [info] Sampling alignments; outputting results to ./output/postSample.bam\n\n\nEmptied Alignemnt Group Pool. . \nEmptied Alignment Group Queue. . . done\n[bam_sort_core] merging from 0 files and 6 in-memory blocks...\n",  "tool_stdout": "",  "traceback": null,  "update_time": "2023-05-17T10:57:08.195880",  "user_email": "tests@fake.org" }, "output_problems": [  "Output postSample:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_6s_gi1u9.sam v. /tmp/history_bam_converted_to_sam_qo_wrl9h.sam )\n--- local_file\n+++ history_data\n@@ -1,5 +1,6 @@\n @HD\tVN:1.0\tSO:coordinate\n @PG\tID:rapmap\tPN:rapmap\tVN:0.6.0\n+@PG\tID:samtools\tPN:samtools\tPP:rapmap\tVN:1.10\tCL:samtools sort -@ 6 --output-fmt=BAM -o ./output/bamout.bam ./output/postSample.bam\n @SQ\tSN:NM_001168316\tLN:2283\n @SQ\tSN:NM_174914\tLN:2385\n @SQ\tSN:NR_031764\tLN:1853\n@@ -5014,8 +5015,8 @@\n 1043:NM_174914:1249:169\t419\tNM_174914\t1250\t1\t50M\t=\t1369\t169\tTGAGAACACTGACACTTCCATATCACCCCTTGGGGTAGGTGAGCAAAGGC\t*\tNH:i:2\tHI:i:2\tAS:i:0\n 6249:NR_031764:1249:146\t355\tNM_174914\t1250\t1\t50M\t=\t1346\t146\tTGAGAACACTGACACTTCCATATCACCCCTTGGGGTAGGTGAGCAAAGGC\t*\tNH:i:3\tHI:i:2\tAS:i:0\n 1366:NM_174914:1104:195\t339\tNM_174914\t1250\t1\t50M\t=\t1105\t-195\tTGAGAACACTGACACTTCCATATCACCCCTTGGGGTAGGTGAGCAAAGGC\t*\tNH:i:3\tHI:i:2\tAS:i:0\n+6246:NM_174914:1117:184\t403\tNM_174914\t1252\t1\t50M\t=\t1118\t-184\tAGAACACTGACACTTCCATATCACCCCTTGGGGTAGGTGAGCAAAGGCAT\t*\tNH:i:3\tHI:i:2\tAS:i:0\n 2822:NR_031764:1132:169\t403\tNM_174914\t1252\t1\t50M\t=\t1133\t-169\tAGAACACTGACACTTCCATATCACCCCTTGGGGTAGGTGAGCAAAGGCAT\t*\tNH:i:3\tHI:i:2\tAS:i:0\n-6246:NM_174914:1117:184\t403\tNM_174914\t1252\t1\t50M\t=\t1118\t-184\tAGAACACTGACACTTCCATATCACCCCTTGGGGTAGGTGAGCAAAGGCAT\t*\tNH:i:3\tHI:i:2\tAS:i:0\n 6516:NM_174914:1111:191\t403\tNM_174914\t1253\t1\t50M\t=\t1112\t-191\tGAACACTGACACTTCCATATCACCCCTTGGGGTAGGTGAGCAAAGGCATT\t*\tNH:i:3\tHI:i:2\tAS:i:0\n 7029:NM_174914:1253:199\t419\tNM_174914\t1254\t1\t50M\t=\t1403\t199\tAACACTGACACTTCCATATCACCCCTTGGGGTAGGTGAGCAAAGGCATTG\t*\tNH:i:2\tHI:i:2\tAS:i:0\n 6563:NM_174914:1254:180\t419\tNM_174914\t1255\t1\t50M\t=\t1385\t180\tACACTGACACTTCCATATCACCCCTTGGGGTAGGTGAGCAAAGGCATTGT\t*\tNH:i:2\tHI:i:2\tAS:i:0\n@@ -18013,9 +18014,9 @@\n 2071:NM_022658:827:189\t83\tNM_022658\t967\t1\t50M\t=\t828\t-189\tGCAGATAAATTGAGAAGTTTACGACTGTCATTTGCTTTTATAGAGAATAG\t*\tNH:i:1\tHI:i:1\tAS:i:0\n 2980:NM_022658:826:190\t83\tNM_022658\t967\t1\t50M\t=\t827\t-190\tGCAGATAAATTGAGAAGTTTACGACTGTCATTTGCTTTTATAGAGAATAG\t*\tNH:i:1\tHI:i:1\tAS:i:0\n 9883:NM_022658:822:194\t147\tNM_022658\t967\t1\t50M\t=\t823\t-194\tGCAGATAAATTGAGAAGTTTACGACTGTCATTTGCTTTTATAGAGAATAG\t*\tNH:i:1\tHI:i:1\tAS:i:0\n-8889:NM_022658:967:163\t163\tNM_022658\t968\t1\t50M\t=\t1081\t163\tCAGATAAATTGAGAAGTTTACGACTGTCATTTGCTTTTATAGAGAATAGA\t*\tNH:i:1\tHI:i:1\tAS:i:0\n 1395:NM_022658:967:112\t99\tNM_022658\t968\t1\t50M\t=\t1030\t112\tCAGATAAATTGAGAAGTTTACGACTGTCATTTGCTTTTATAGAGAATAGA\t*\tNH:i:1\tHI:i:1\tAS:i:0\n 5474:NM_022658:967:171\t99\tNM_022658\t968\t1\t50M\t=\t1089\t171\tCAGATAAATTGAGAAGTTTACGACTGTCATTTGCTTTTATAGAGAATAGA\t*\tNH:i:1\tHI:i:1\tAS:i:0\n+8889:NM_022658:967:163\t163\tNM_022658\t968\t1\t50M\t=\t1081\t163\tCAGATAAATTGAGAAGTTTACGACTGTCATTTGCTTTTATAGAGAATAGA\t*\tNH:i:1\tHI:i:1\tAS:i:0\n 1989:NM_022658:833:184\t147\tNM_022658\t968\t1\t50M\t=\t834\t-184\tCAGATAAATTGAGAAGTTTACGACTGTCATTTGCTTTTATAGAGAATAGA\t*\tNH:i:1\tHI:i:1\tAS:i:0\n 7622:NM_022658:968:140\t99\tNM_022658\t969\t1\t50M\t=\t1059\t140\tAGATAAATTGAGAAGTTTACGACTGTCATTTGCTTTTATAGAGAATAGAA\t*\tNH:i:1\tHI:i:1\tAS:i:0\n 1913:NM_022658:831:187\t83\tNM_022658\t969\t1\t50M\t=\t832\t-187\tAGATAAATTGAGAAGTTTACGACTGTCATTTGCTTTTATAGAGAATAGAA\t*\tNH:i:1\tHI:i:1\tAS:i:0\n@@ -21014,10 +21015,10 @@\n 6895:NM_022658:1622:182\t163\tNM_022658\t1623\t1\t50M\t=\t1755\t182\tAACCATCCCATGGTCACTCGGGCCCATGCCTTCCTCTCCTTCGCTGTTTG\t*\tNH:i:1\tHI:i:1\tAS:i:0\n 9607:NM_022658:1622:191\t163\tNM_022658\t1623\t1\t50M\t=\t1764\t191\tAACCATCCCATGGTCACTCGGGCCCATGCCTTCCTCTCCTTCGCTGTTTG\t*\tNH:i:1\tHI:i:1\tAS:i:0\n 4730:NM_022658:1623:193\t163\tNM_022658\t1624\t1\t50M\t=\t1767\t193\tACCATCCCATGGTCACTCGGGCCCATGCCTTCCTCTCCTTCGCTGTTTGA\t*\tNH:i:1\tHI:i:1\tAS:i:0\n-2703:NM_022658:1473:200\t83\tNM_022658\t1624\t1\t50M\t=\t1474\t-200\tACCATCCCATGGTCACTCGGGCCCATGCCTTCCTCTCCTTCGCTGTTTGA\t*\tNH:i:1\tHI:i:1\tAS:i:0\n 4601:NM_022658:1476:197\t147\tNM_022658\t1624\t1\t50M\t=\t1477\t-197\tACCATCCCATGGTCACTCGGGCCCATGCCTTCCTCTCCTTCGCTGTTTGA\t*\tNH:i:1\tHI:i:1\tAS:i:0\n 6103:NM_022658:1489:184\t83\tNM_022658\t1624\t1\t50M\t=\t1490\t-184\tACCATCCCATGGTCACTCGGGCCCATGCCTTCCTCTCCTTCGCTGTTTGA\t*\tNH:i:1\tHI:i:1\tAS:i:0\n 7438:NM_022658:1508:165\t83\tNM_022658\t1624\t1\t50M\t=\t1509\t-165\tACCATCCCATGGTCACTCGGGCCCATGCCTTCCTCTCCTTCGCTGTTTGA\t*\tNH:i:1\tHI:i:1\tAS:i:0\n+2703:NM_022658:1473:200\t83\tNM_022658\t1624\t1\t50M\t=\t1474\t-200\tACCATCCCATGGTCACTCGGGCCCATGCCTTCCTCTCCTTCGCTGTTTGA\t*\tNH:i:1\tHI:i:1\tAS:i:0\n 9163:NM_022658:1624:152\t163\tNM_022658\t1625\t1\t50M\t=\t1727\t152\tCCATCCCATGGTCACTCGGGCCCATGCCTTCCTCTCCTTCGCTGTTTGAT\t*\tNH:i:1\tHI:i:1\tAS:i:0\n" ], "status": "failure", "test_index": 3, "time_seconds": 40.69178628921509, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon", "tool_version": "1.3.0+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Version Info: ### PLEASE UPGRADE SALMON ###### A newer version of salmon with important bug fixes and improvements is available. #######The newest version, available at https://github.com/COMBINE-lab/salmon/releasescontains new features, improvements, and bug fixes; please upgrade at yourearliest convenience.###Sign up for the salmon mailing list to hear about new versions, features and updates at:https://oceangenomics.com/subscribe#### salmon (alignment-based) v1.3.0# [ program ] => salmon # [ command ] => quant # [ targets ] => { /galaxy/server/database/objects/d/8/c/dataset_d8c35673-05a0-4ad3-b547-451647b17fdf.dat }# [ libType ] => { U }# [ alignments ] => { /galaxy/server/database/objects/3/5/5/dataset_35517072-5d31-492c-bb13-9084f177422a.dat }# [ threads ] => { 6 }# [ noErrorModel ] => { }# [ numErrorBins ] => { 5 }# [ sampleOut ] => { }# [ sampleUnaligned ] => { }# [ incompatPrior ] => { 0.0 }# [ biasSpeedSamp ] => { 5 }# [ fldMax ] => { 1000 }# [ fldMean ] => { 250 }# [ fldSD ] => { 25 }# [ forgettingFactor ] => { 0.65 }# [ maxReadOcc ] => { 100 }# [ numBiasSamples ] => { 2000000 }# [ numAuxModelSamples ] => { 5000000 }# [ numPreAuxModelSamples ] => { 5000 }# [ numGibbsSamples ] => { 0 }# [ numBootstraps ] => { 0 }# [ thinningFactor ] => { 16 }# [ sigDigits ] => { 3 }# [ vbPrior ] => { 1e-05 }# [ output ] => { ./output }Logs will be written to ./output/logs[2023-05-17 10:56:56.255] [jointLog] [info] setting maxHashResizeThreads to 6[2023-05-17 10:56:56.255] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.Library format { type:single end, relative orientation:none, strandedness:unstranded }[2023-05-17 10:56:56.256] [jointLog] [info] numQuantThreads = 3parseThreads = 3Checking that provided alignment files have consistent headers . . . donePopulating targets from aln = "/galaxy/server/database/objects/3/5/5/dataset_35517072-5d31-492c-bb13-9084f177422a.dat", fasta = "/galaxy/server/database/objects/d/8/c/dataset_d8c35673-05a0-4ad3-b547-451647b17fdf.dat" . . .done[0;32mprocessed[0;31m 0 [0;32mreads in current round[0;0m[0;32mprocessed[0;31m 28503 [0;32mreads in current round[0;0mkilling thread 0 . . . donekilling thread 1 . . . donekilling thread 2 . . . done# observed = 28503 / # required = 50000000[A[A[A[A[AResetting BAMQueue from file(s) [ "/galaxy/server/database/objects/3/5/5/dataset_35517072-5d31-492c-bb13-9084f177422a.dat" ] . . . done[32mprocessed[31m 0 [32mreads[0mkilling thread 0 . . . donekilling thread 1 . . . donekilling thread 2 . . . done# observed = 28503 mapped fragments.[F[F[F[FWaiting on output threaddoneFreeing memory used by read queue . . . Joined parsing thread . . . "/galaxy/server/database/objects/3/5/5/dataset_35517072-5d31-492c-bb13-9084f177422a.dat" Closed all files . . . Emptied frag queue. . . [2023-05-17 10:56:56.541] [jointLog] [info] replaced 0 non-ACGT nucleotides with random nucleotides[2023-05-17 10:56:56.717] [jointLog] [info] Completed first pass through the alignment file.Total # of mapped reads : 28503# of uniquely mapped reads : 28502# ambiguously mapped reads : 1[2023-05-17 10:56:56.725] [jointLog] [info] Computed 18 rich equivalence classes for further processing[2023-05-17 10:56:56.725] [jointLog] [info] Counted 28503 total reads in the equivalence classes [2023-05-17 10:56:56.725] [jointLog] [warning] Only 28503 fragments were mapped, but the number of burn-in fragments was set to 5000000.The effective lengths have been computed using the observed mappings.[2023-05-17 10:56:56.727] [jointLog] [info] starting optimizer[2023-05-17 10:56:56.727] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate[2023-05-17 10:56:56.727] [jointLog] [info] iteration = 0 | max rel diff. = 21.8815[2023-05-17 10:56:56.728] [jointLog] [info] iteration = 100 | max rel diff. = 0[2023-05-17 10:56:56.728] [jointLog] [info] finished optimizer[2023-05-17 10:56:56.728] [jointLog] [info] writing output[2023-05-17 10:56:56.735] [jointLog] [info] Sampling alignments; outputting results to ./output/postSample.bamEmptied Alignemnt Group Pool. . Emptied Alignment Group Queue. . . done[bam_sort_core] merging from 0 files and 6 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon (Test #5)" name="4" time="38.457385540008545">
        
            
            <system-out><![CDATA[
            Threads = 2Vertex length = 31Hash functions = 5Filter size = 1048576Capacity = 2Files: ./index/ref_k31_fixed.fa--------------------------------------------------------------------------------Round 0, 0:1048576PassFillingFiltering100200True junctions count = 14False junctions count = 18Hash table size = 32Candidate marks count = 55--------------------------------------------------------------------------------Reallocating bifurcations time: 0True marks count: 51Edges construction time: 0--------------------------------------------------------------------------------Distinct junctions = 14for info, total work write each  : 2.331    total work inram from level 3 : 4.322  total work raw : 25.000 Bitarray          105024  bits (100.00 %)   (array + ranks )final hash             0  bits (0.00 %) (nb in final hash 0)
            ]]></system-out>
            <system-err><![CDATA[
            Version Info: ### PLEASE UPGRADE SALMON ###### A newer version of salmon with important bug fixes and improvements is available. #######The newest version, available at https://github.com/COMBINE-lab/salmon/releasescontains new features, improvements, and bug fixes; please upgrade at yourearliest convenience.###Sign up for the salmon mailing list to hear about new versions, features and updates at:https://oceangenomics.com/subscribe###[2023-05-17 10:57:30.129] [jLog] [warning] The salmon index is being built without any decoy sequences.  It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be provided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.[2023-05-17 10:57:30.129] [jLog] [info] building indexout : ./index[2023-05-17 10:57:30.131] [puff::index::jointLog] [info] Running fixFasta[Step 1 of 4] : counting k-mers[2023-05-17 10:57:30.144] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides[2023-05-17 10:57:30.144] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcriptswrote 15 cleaned references[2023-05-17 10:57:30.166] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers[2023-05-17 10:57:30.168] [puff::index::jointLog] [info] ntHll estimated 54811 distinct k-mers, setting filter size to 2^20allowedIn: 12Max Junction ID: 70seen.size():569 kmerInfo.size():71approximateContigTotalLength: 17465counters for complex kmers:(prec>1 & succ>1)=0 | (succ>1 & isStart)=0 | (prec>1 & isEnd)=0 | (isStart & isEnd)=0contig count: 24 element count: 19592 complex nodes: 0# of ones in rank vector: 23[2023-05-17 10:57:30.247] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.[2023-05-17 10:57:30.247] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory ./indexsize = 19592-----------------------------------------| Loading contigs | Time = 1.8425 ms-----------------------------------------size = 19592-----------------------------------------| Loading contig boundaries | Time = 1.5727 ms-----------------------------------------Number of ones: 23Number of ones per inventory item: 512Inventory entries filled: 123[2023-05-17 10:57:30.250] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.[2023-05-17 10:57:30.250] [puff::index::jointLog] [info] contig count for validation: 23[2023-05-17 10:57:30.252] [puff::index::jointLog] [info] Total # of Contigs : 23[2023-05-17 10:57:30.252] [puff::index::jointLog] [info] Total # of numerical Contigs : 23[2023-05-17 10:57:30.252] [puff::index::jointLog] [info] Total # of contig vec entries: 36[2023-05-17 10:57:30.252] [puff::index::jointLog] [info] bits per offset entry 6[2023-05-17 10:57:30.252] [puff::index::jointLog] [info] Done constructing the contig vector. 24[2023-05-17 10:57:30.272] [puff::index::jointLog] [info] # segments = 23[2023-05-17 10:57:30.272] [puff::index::jointLog] [info] total length = 19592[2023-05-17 10:57:30.272] [puff::index::jointLog] [info] Reading the reference files ...[2023-05-17 10:57:30.288] [puff::index::jointLog] [info] positional integer width = 15[2023-05-17 10:57:30.288] [puff::index::jointLog] [info] seqSize = 19592[2023-05-17 10:57:30.288] [puff::index::jointLog] [info] rankSize = 19592[2023-05-17 10:57:30.288] [puff::index::jointLog] [info] edgeVecSize = 0[2023-05-17 10:57:30.288] [puff::index::jointLog] [info] num keys = 18902[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   ela..sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[2023-05-17 10:57:30.428] [puff::index::jointLog] [info] mphf size = 0.0125198 MB[2023-05-17 10:57:30.428] [puff::index::jointLog] [info] chunk size = 9796[2023-05-17 10:57:30.428] [puff::index::jointLog] [info] chunk 0 = [0, 9796)[2023-05-17 10:57:30.429] [puff::index::jointLog] [info] chunk 1 = [9796, 19562)[2023-05-17 10:57:30.430] [puff::index::jointLog] [info] finished populating pos vector[2023-05-17 10:57:30.430] [puff::index::jointLog] [info] writing index components[2023-05-17 10:57:30.453] [puff::index::jointLog] [info] finished writing dense pufferfish index[2023-05-17 10:57:30.463] [jLog] [info] done building indexVersion Info: ### PLEASE UPGRADE SALMON ###### A newer version of salmon with important bug fixes and improvements is available. #######The newest version, available at https://github.com/COMBINE-lab/salmon/releasescontains new features, improvements, and bug fixes; please upgrade at yourearliest convenience.###Sign up for the salmon mailing list to hear about new versions, features and updates at:https://oceangenomics.com/subscribe###### salmon (selective-alignment-based) v1.3.0### [ program ] => salmon ### [ command ] => quant ### [ index ] => { ./index }### [ libType ] => { U }### [ unmatedReads ] => { ./single.fasta }### [ threads ] => { 6 }### [ validateMappings ] => { }### [ minScoreFraction ] => { 0.65 }### [ ma ] => { 2 }### [ mp ] => { 4 }### [ go ] => { 5 }### [ ge ] => { 3 }### [ allowDovetail ] => { }### [ recoverOrphans ] => { }### [ incompatPrior ] => { 0.0 }### [ biasSpeedSamp ] => { 5 }### [ fldMax ] => { 1000 }### [ fldMean ] => { 250 }### [ fldSD ] => { 25 }### [ forgettingFactor ] => { 0.65 }### [ maxReadOcc ] => { 100 }### [ numBiasSamples ] => { 2000000 }### [ numAuxModelSamples ] => { 5000000 }### [ numPreAuxModelSamples ] => { 5000 }### [ numGibbsSamples ] => { 0 }### [ numBootstraps ] => { 0 }### [ thinningFactor ] => { 16 }### [ sigDigits ] => { 3 }### [ vbPrior ] => { 1e-05 }### [ output ] => { ./output }Logs will be written to ./output/logs[2023-05-17 10:57:30.544] [jointLog] [info] setting maxHashResizeThreads to 6[2023-05-17 10:57:30.544] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.[2023-05-17 10:57:30.544] [jointLog] [warning] You set the mismatch penalty as 4, but it should be negative.  It is being negated to -4.[2023-05-17 10:57:30.544] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.[2023-05-17 10:57:30.544] [jointLog] [info] parsing read library format[2023-05-17 10:57:30.544] [jointLog] [info] There is 1 library.-----------------------------------------| Loading contig table | Time = 1.1791 ms-----------------------------------------size = 24-----------------------------------------| Loading contig offsets | Time = 2.424 ms-----------------------------------------[2023-05-17 10:57:30.597] [jointLog] [info] Loading pufferfish index[2023-05-17 10:57:30.599] [jointLog] [info] Loading dense pufferfish index.-----------------------------------------| Loading reference lengths | Time = 892.38 us----------------------------------------------------------------------------------| Loading mphf table | Time = 1.3238 ms-----------------------------------------size = 19592Number of ones: 23Number of ones per inventory item: 512Inventory entries filled: 1-----------------------------------------| Loading contig boundaries | Time = 1.3861 ms-----------------------------------------size = 19592-----------------------------------------| Loading sequence | Time = 1.5731 ms-----------------------------------------size = 18902-----------------------------------------| Loading positions | Time = 2.6375 ms-----------------------------------------size = 28562-----------------------------------------| Loading reference sequence | Time = 1.7278 ms----------------------------------------------------------------------------------| Loading reference accumulative lengths | Time = 954.67 us-----------------------------------------[2023-05-17 10:57:30.618] [jointLog] [info] done[2023-05-17 10:57:30.618] [jointLog] [info] Index contained 15 targets[2023-05-17 10:57:30.618] [jointLog] [info] Number of decoys : 0[2023-05-17 10:57:30.670] [jointLog] [info] Computed 15 rich equivalence classes for further processing[2023-05-17 10:57:30.670] [jointLog] [info] Counted 15 total reads in the equivalence classes [2023-05-17 10:57:30.672] [jointLog] [info] Number of orphans recovered using orphan rescue : 0[2023-05-17 10:57:30.672] [jointLog] [info] Number of mappings discarded because of alignment score : 6[2023-05-17 10:57:30.672] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 0[2023-05-17 10:57:30.672] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0[2023-05-17 10:57:30.672] [jointLog] [warning] Only 15 fragments were mapped, but the number of burn-in fragments was set to 5000000.The effective lengths have been computed using the observed mappings.[2023-05-17 10:57:30.672] [jointLog] [info] Mapping rate = 100%[2023-05-17 10:57:30.672] [jointLog] [info] finished quantifyLibrary()[2023-05-17 10:57:30.680] [jointLog] [info] Starting optimizer[2023-05-17 10:57:30.680] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate[2023-05-17 10:57:30.680] [jointLog] [info] iteration = 0 | max rel diff. = 0[2023-05-17 10:57:30.682] [jointLog] [info] iteration = 100 | max rel diff. = 0[2023-05-17 10:57:30.682] [jointLog] [info] Finished optimizer[2023-05-17 10:57:30.682] [jointLog] [info] writing output [2023-05-17 10:57:30.691] [jointLog] [warning] NOTE: Read Lib [[ ./single.fasta ]] :Detected a *potential* strand bias > 1% in an unstranded protocol check the file: ./output/lib_format_counts.json for details
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon (Test #6)" name="5" time="37.80837941169739">
        
            
            <system-out><![CDATA[
            Threads = 2Vertex length = 31Hash functions = 5Filter size = 1048576Capacity = 2Files: ./index/ref_k31_fixed.fa--------------------------------------------------------------------------------Round 0, 0:1048576PassFillingFiltering100200True junctions count = 14False junctions count = 19Hash table size = 33Candidate marks count = 56--------------------------------------------------------------------------------Reallocating bifurcations time: 0True marks count: 51Edges construction time: 0--------------------------------------------------------------------------------Distinct junctions = 14for info, total work write each  : 2.331    total work inram from level 3 : 4.322  total work raw : 25.000 Bitarray          105024  bits (100.00 %)   (array + ranks )final hash             0  bits (0.00 %) (nb in final hash 0)
            ]]></system-out>
            <system-err><![CDATA[
            Version Info: ### PLEASE UPGRADE SALMON ###### A newer version of salmon with important bug fixes and improvements is available. #######The newest version, available at https://github.com/COMBINE-lab/salmon/releasescontains new features, improvements, and bug fixes; please upgrade at yourearliest convenience.###Sign up for the salmon mailing list to hear about new versions, features and updates at:https://oceangenomics.com/subscribe###[2023-05-17 10:57:35.835] [jLog] [warning] The salmon index is being built without any decoy sequences.  It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be provided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.[2023-05-17 10:57:35.835] [jLog] [info] building indexout : ./index[2023-05-17 10:57:35.836] [puff::index::jointLog] [info] Running fixFasta[Step 1 of 4] : counting k-mers[2023-05-17 10:57:35.845] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides[2023-05-17 10:57:35.845] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcriptswrote 15 cleaned references[2023-05-17 10:57:35.868] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers[2023-05-17 10:57:35.870] [puff::index::jointLog] [info] ntHll estimated 54811 distinct k-mers, setting filter size to 2^20allowedIn: 12Max Junction ID: 70seen.size():569 kmerInfo.size():71approximateContigTotalLength: 17465counters for complex kmers:(prec>1 & succ>1)=0 | (succ>1 & isStart)=0 | (prec>1 & isEnd)=0 | (isStart & isEnd)=0contig count: 24 element count: 19592 complex nodes: 0# of ones in rank vector: 23[2023-05-17 10:57:35.957] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.[2023-05-17 10:57:35.957] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory ./indexsize = 19592-----------------------------------------| Loading contigs | Time = 1.6133 ms-----------------------------------------size = 19592-----------------------------------------| Loading contig boundaries | Time = 1.5107 ms-----------------------------------------Number of ones: 23Number of ones per inventory item: 512Inventory entries filled: 123[2023-05-17 10:57:35.960] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.[2023-05-17 10:57:35.960] [puff::index::jointLog] [info] contig count for validation: 23[2023-05-17 10:57:35.961] [puff::index::jointLog] [info] Total # of Contigs : 23[2023-05-17 10:57:35.961] [puff::index::jointLog] [info] Total # of numerical Contigs : 23[2023-05-17 10:57:35.962] [puff::index::jointLog] [info] Total # of contig vec entries: 36[2023-05-17 10:57:35.962] [puff::index::jointLog] [info] bits per offset entry 6[2023-05-17 10:57:35.962] [puff::index::jointLog] [info] Done constructing the contig vector. 24[2023-05-17 10:57:35.978] [puff::index::jointLog] [info] # segments = 23[2023-05-17 10:57:35.978] [puff::index::jointLog] [info] total length = 19592[2023-05-17 10:57:35.978] [puff::index::jointLog] [info] Reading the reference files ...[2023-05-17 10:57:35.995] [puff::index::jointLog] [info] positional integer width = 15[2023-05-17 10:57:35.995] [puff::index::jointLog] [info] seqSize = 19592[2023-05-17 10:57:35.995] [puff::index::jointLog] [info] rankSize = 19592[2023-05-17 10:57:35.995] [puff::index::jointLog] [info] edgeVecSize = 0[2023-05-17 10:57:35.995] [puff::index::jointLog] [info] num keys = 18902[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  18.6 %   ela..  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[2023-05-17 10:57:36.166] [puff::index::jointLog] [info] mphf size = 0.0125198 MB[2023-05-17 10:57:36.167] [puff::index::jointLog] [info] chunk size = 9796[2023-05-17 10:57:36.167] [puff::index::jointLog] [info] chunk 0 = [0, 9796)[2023-05-17 10:57:36.167] [puff::index::jointLog] [info] chunk 1 = [9796, 19562)[2023-05-17 10:57:36.168] [puff::index::jointLog] [info] finished populating pos vector[2023-05-17 10:57:36.168] [puff::index::jointLog] [info] writing index components[2023-05-17 10:57:36.194] [puff::index::jointLog] [info] finished writing dense pufferfish index[2023-05-17 10:57:36.204] [jLog] [info] done building indexVersion Info: ### PLEASE UPGRADE SALMON ###### A newer version of salmon with important bug fixes and improvements is available. #######The newest version, available at https://github.com/COMBINE-lab/salmon/releasescontains new features, improvements, and bug fixes; please upgrade at yourearliest convenience.###Sign up for the salmon mailing list to hear about new versions, features and updates at:https://oceangenomics.com/subscribe###### salmon (selective-alignment-based) v1.3.0### [ program ] => salmon ### [ command ] => quant ### [ index ] => { ./index }### [ libType ] => { U }### [ unmatedReads ] => { ./single.fasta }### [ threads ] => { 6 }### [ seqBias ] => { }### [ gcBias ] => { }### [ incompatPrior ] => { 0.0 }### [ dumpEq ] => { }### [ minAssignedFrags ] => { 10 }### [ biasSpeedSamp ] => { 5 }### [ fldMax ] => { 1000 }### [ fldMean ] => { 250 }### [ fldSD ] => { 25 }### [ forgettingFactor ] => { 0.65 }### [ initUniform ] => { }### [ maxReadOcc ] => { 100 }### [ numBiasSamples ] => { 2000000 }### [ numAuxModelSamples ] => { 5000000 }### [ numPreAuxModelSamples ] => { 5000 }### [ useEM ] => { }### [ numGibbsSamples ] => { 0 }### [ noGammaDraw ] => { }### [ numBootstraps ] => { 0 }### [ thinningFactor ] => { 16 }### [ sigDigits ] => { 3 }### [ vbPrior ] => { 1e-05 }### [ output ] => { ./output }Logs will be written to ./output/logs[2023-05-17 10:57:36.284] [jointLog] [info] setting maxHashResizeThreads to 6[2023-05-17 10:57:36.284] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.[2023-05-17 10:57:36.284] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65[2023-05-17 10:57:36.284] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.[2023-05-17 10:57:36.284] [jointLog] [info] parsing read library format[2023-05-17 10:57:36.284] [jointLog] [info] There is 1 library.-----------------------------------------| Loading contig table | Time = 1.3839 ms-----------------------------------------[2023-05-17 10:57:36.340] [jointLog] [info] Loading pufferfish index[2023-05-17 10:57:36.341] [jointLog] [info] Loading dense pufferfish index.size = 24-----------------------------------------| Loading contig offsets | Time = 2.3491 ms----------------------------------------------------------------------------------| Loading reference lengths | Time = 989.61 us----------------------------------------------------------------------------------| Loading mphf table | Time = 1.4381 ms-----------------------------------------size = 19592Number of ones: 23Number of ones per inventory item: 512Inventory entries filled: 1-----------------------------------------| Loading contig boundaries | Time = 1.703 ms-----------------------------------------size = 19592-----------------------------------------| Loading sequence | Time = 1.9603 ms-----------------------------------------size = 18902-----------------------------------------| Loading positions | Time = 3.0306 ms-----------------------------------------size = 28562-----------------------------------------| Loading reference sequence | Time = 1.7769 ms----------------------------------------------------------------------------------| Loading reference accumulative lengths | Time = 1.6023 ms-----------------------------------------[2023-05-17 10:57:36.362] [jointLog] [info] done[2023-05-17 10:57:36.362] [jointLog] [info] Index contained 15 targets[2023-05-17 10:57:36.362] [jointLog] [info] Number of decoys : 0[2023-05-17 10:57:36.362] [jointLog] [warning] Fragment GC bias correction is currently *experimental* in single-end libraries.  Please use this option with caution.[2023-05-17 10:57:36.412] [jointLog] [info] Computed 15 rich equivalence classes for further processing[2023-05-17 10:57:36.412] [jointLog] [info] Counted 15 total reads in the equivalence classes [2023-05-17 10:57:36.414] [jointLog] [info] Number of mappings discarded because of alignment score : 5[2023-05-17 10:57:36.414] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 0[2023-05-17 10:57:36.414] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0[2023-05-17 10:57:36.414] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0[2023-05-17 10:57:36.414] [jointLog] [warning] Only 15 fragments were mapped, but the number of burn-in fragments was set to 5000000.The effective lengths have been computed using the observed mappings.[2023-05-17 10:57:36.414] [jointLog] [info] Mapping rate = 100%[2023-05-17 10:57:36.414] [jointLog] [info] finished quantifyLibrary()[2023-05-17 10:57:36.420] [jointLog] [info] Starting optimizer[2023-05-17 10:57:36.421] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate[2023-05-17 10:57:36.421] [jointLog] [info] iteration = 0 | max rel diff. = 49[2023-05-17 10:57:36.421] [jointLog] [info] iteration 3, adjusting effective lengths to account for biases[2023-05-17 10:57:36.425] [jointLog] [info] Computed expected counts (for bias correction)[2023-05-17 10:57:36.427] [jointLog] [info] processed bias for 20.0% of the transcripts[2023-05-17 10:57:36.427] [jointLog] [info] processed bias for 33.3% of the transcripts[2023-05-17 10:57:36.427] [jointLog] [info] processed bias for 33.3% of the transcripts[2023-05-17 10:57:36.427] [jointLog] [info] processed bias for 33.3% of the transcripts[2023-05-17 10:57:36.427] [jointLog] [info] processed bias for 33.3% of the transcripts[2023-05-17 10:57:36.428] [jointLog] [info] processed bias for 46.7% of the transcripts[2023-05-17 10:57:36.428] [jointLog] [info] processed bias for 46.7% of the transcripts[2023-05-17 10:57:36.428] [jointLog] [info] processed bias for 80.0% of the transcripts[2023-05-17 10:57:36.428] [jointLog] [info] processed bias for 80.0% of the transcripts[2023-05-17 10:57:36.429] [jointLog] [info] processed bias for 100.0% of the transcripts[2023-05-17 10:57:36.430] [jointLog] [info] iteration = 100 | max rel diff. = 0[2023-05-17 10:57:36.430] [jointLog] [info] Finished optimizer[2023-05-17 10:57:36.430] [jointLog] [info] writing output [2023-05-17 10:57:36.438] [jointLog] [info] writing equivalence class counts.[2023-05-17 10:57:36.439] [jointLog] [info] Collapsing factorization information into simplified equivalence classes.[2023-05-17 10:57:36.439] [jointLog] [info] done.[2023-05-17 10:57:36.445] [jointLog] [info] done writing equivalence class counts.[2023-05-17 10:57:36.446] [jointLog] [warning] NOTE: Read Lib [[ ./single.fasta ]] :Detected a *potential* strand bias > 1% in an unstranded protocol check the file: ./output/lib_format_counts.json for details
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon (Test #7)" name="6" time="25.096648693084717">
        
            <error type="error" message="parameter 'index': requires a value, but no legal values defined"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027index\u0027: requires a value, but no legal values defined", "inputs": {  "quant_type|input|single_or_paired|input_mate1": {   "id": "4bc44a1acb738af1",   "src": "hda"  },  "quant_type|input|single_or_paired|input_mate2": {   "id": "72393ed53dc05ccc",   "src": "hda"  },  "quant_type|input|single_or_paired|single_or_paired_opts": "paired",  "quant_type|input|single_or_paired|strandedness": "U",  "quant_type|qtype": "reads",  "quant_type|refTranscriptSource|TranscriptSource": "indexed",  "quant_type|refTranscriptSource|index": "hg19_transcript_subset" }, "status": "error", "test_index": 6, "time_seconds": 25.096648693084717, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon", "tool_version": "1.3.0+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_AddCommentsToBam (Test #1)" name="0" time="32.437849283218384">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G10:43:53.231 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_AddOrReplaceReadGroups (Test #1)" name="0" time="46.18191719055176">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:42:03.705 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_BedToIntervalList (Test #1)" name="0" time="34.895172119140625">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G10:45:04.371 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G10:45:05.128 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CASM (Test #1)" name="0" time="38.79568600654602">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:51:05.194 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CleanSam (Test #1)" name="0" time="33.54696869850159">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:49:48.102 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectBaseDistributionByCycle (Test #1)" name="0" time="40.94648313522339">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G10:52:37.203 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.soERROR2023-05-17 10:52:37ProcessExecutorDuring startup - Warning messages:ERROR2023-05-17 10:52:37ProcessExecutor1: Setting LC_CTYPE failed, using "C" ERROR2023-05-17 10:52:37ProcessExecutor2: Setting LC_COLLATE failed, using "C" ERROR2023-05-17 10:52:37ProcessExecutor3: Setting LC_TIME failed, using "C" ERROR2023-05-17 10:52:37ProcessExecutor4: Setting LC_MESSAGES failed, using "C" ERROR2023-05-17 10:52:37ProcessExecutor5: Setting LC_MONETARY failed, using "C" ERROR2023-05-17 10:52:37ProcessExecutor6: Setting LC_PAPER failed, using "C" ERROR2023-05-17 10:52:37ProcessExecutor7: Setting LC_MEASUREMENT failed, using "C" 
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectGcBiasMetrics (Test #1)" name="0" time="37.52899932861328">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G10:45:31.861 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.soERROR2023-05-17 10:45:32ProcessExecutorDuring startup - Warning messages:ERROR2023-05-17 10:45:32ProcessExecutor1: Setting LC_CTYPE failed, using "C" ERROR2023-05-17 10:45:32ProcessExecutor2: Setting LC_COLLATE failed, using "C" ERROR2023-05-17 10:45:32ProcessExecutor3: Setting LC_TIME failed, using "C" ERROR2023-05-17 10:45:32ProcessExecutor4: Setting LC_MESSAGES failed, using "C" ERROR2023-05-17 10:45:32ProcessExecutor5: Setting LC_MONETARY failed, using "C" ERROR2023-05-17 10:45:32ProcessExecutor6: Setting LC_PAPER failed, using "C" ERROR2023-05-17 10:45:32ProcessExecutor7: Setting LC_MEASUREMENT failed, using "C" 
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectHsMetrics (Test #1)" name="0" time="39.96958589553833">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G10:54:21.036 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectInsertSizeMetrics (Test #1)" name="0" time="37.78070402145386">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:44:29.387 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.soERROR2023-05-17 10:44:29ProcessExecutorDuring startup - Warning messages:ERROR2023-05-17 10:44:29ProcessExecutor1: Setting LC_CTYPE failed, using "C" ERROR2023-05-17 10:44:29ProcessExecutor2: Setting LC_COLLATE failed, using "C" ERROR2023-05-17 10:44:29ProcessExecutor3: Setting LC_TIME failed, using "C" ERROR2023-05-17 10:44:29ProcessExecutor4: Setting LC_MESSAGES failed, using "C" ERROR2023-05-17 10:44:29ProcessExecutor5: Setting LC_MONETARY failed, using "C" ERROR2023-05-17 10:44:29ProcessExecutor6: Setting LC_PAPER failed, using "C" ERROR2023-05-17 10:44:29ProcessExecutor7: Setting LC_MEASUREMENT failed, using "C" 
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectRnaSeqMetrics (Test #1)" name="0" time="57.32819676399231">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:46:01.702 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so[Wed May 17 10:46:01 GMT 2023] CollectRnaSeqMetrics REF_FLAT=refFlat.tab STRAND_SPECIFICITY=NONE MINIMUM_LENGTH=500 CHART_OUTPUT=/galaxy/server/database/objects/2/8/2/dataset_282888e9-297f-45f1-b9f8-a8ab3b3dd84b.dat RRNA_FRAGMENT_PERCENTAGE=0.8 METRIC_ACCUMULATION_LEVEL=[ALL_READS] INPUT=picard_CollectRnaSeqMetrics_bam OUTPUT=/galaxy/server/database/objects/6/0/4/dataset_604626be-31e3-4b05-8fea-5d8155a15205.dat ASSUME_SORTED=true TMP_DIR=[/galaxy/server/database/jobs_directory/000/92/tmp] VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=localref.fa    STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false[Wed May 17 10:46:01 GMT 2023] Executing as root@gxy-mbr49-vgxh4 on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOTINFO2023-05-17 10:46:01CollectRnaSeqMetricsLoaded 20 genes.INFO2023-05-17 10:46:02RExecutorExecuting R script via command: Rscript /tmp/script1730224635442758512.R /galaxy/server/database/objects/6/0/4/dataset_604626be-31e3-4b05-8fea-5d8155a15205.dat /galaxy/server/database/objects/2/8/2/dataset_282888e9-297f-45f1-b9f8-a8ab3b3dd84b.dat picard_CollectRnaSeqMetrics_bam ERROR2023-05-17 10:46:02ProcessExecutorDuring startup - Warning messages:ERROR2023-05-17 10:46:02ProcessExecutor1: Setting LC_CTYPE failed, using "C" ERROR2023-05-17 10:46:02ProcessExecutor2: Setting LC_COLLATE failed, using "C" ERROR2023-05-17 10:46:02ProcessExecutor3: Setting LC_TIME failed, using "C" ERROR2023-05-17 10:46:02ProcessExecutor4: Setting LC_MESSAGES failed, using "C" ERROR2023-05-17 10:46:02ProcessExecutor5: Setting LC_MONETARY failed, using "C" ERROR2023-05-17 10:46:02ProcessExecutor6: Setting LC_PAPER failed, using "C" ERROR2023-05-17 10:46:02ProcessExecutor7: Setting LC_MEASUREMENT failed, using "C" INFO2023-05-17 10:46:02ProcessExecutornull device INFO2023-05-17 10:46:02ProcessExecutor          1 [Wed May 17 10:46:02 GMT 2023] picard.analysis.CollectRnaSeqMetrics done. Elapsed time: 0.02 minutes.Runtime.totalMemory()=1029177344
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectRnaSeqMetrics (Test #2)" name="1" time="40.74874472618103">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:46:13.685 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so[Wed May 17 10:46:13 GMT 2023] CollectRnaSeqMetrics REF_FLAT=refFlat.tab STRAND_SPECIFICITY=NONE MINIMUM_LENGTH=500 CHART_OUTPUT=/galaxy/server/database/objects/8/c/f/dataset_8cf68b52-5c64-4ba4-88a0-f9bfc6469ca0.dat RRNA_FRAGMENT_PERCENTAGE=0.8 METRIC_ACCUMULATION_LEVEL=[ALL_READS] INPUT=picard_CollectRnaSeqMetrics_bam OUTPUT=/galaxy/server/database/objects/7/3/6/dataset_736283fe-ea39-42cc-9294-2628d0b53db3.dat ASSUME_SORTED=true TMP_DIR=[/galaxy/server/database/jobs_directory/000/96/tmp] VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=localref.fa    STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false[Wed May 17 10:46:13 GMT 2023] Executing as root@gxy-fmzkz-wwvnv on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOTINFO2023-05-17 10:46:13CollectRnaSeqMetricsLoaded 20 genes.INFO2023-05-17 10:46:14RExecutorExecuting R script via command: Rscript /tmp/script8991003148832502963.R /galaxy/server/database/objects/7/3/6/dataset_736283fe-ea39-42cc-9294-2628d0b53db3.dat /galaxy/server/database/objects/8/c/f/dataset_8cf68b52-5c64-4ba4-88a0-f9bfc6469ca0.dat picard_CollectRnaSeqMetrics_bam ERROR2023-05-17 10:46:14ProcessExecutorDuring startup - Warning messages:ERROR2023-05-17 10:46:14ProcessExecutor1: Setting LC_CTYPE failed, using "C" ERROR2023-05-17 10:46:14ProcessExecutor2: Setting LC_COLLATE failed, using "C" ERROR2023-05-17 10:46:14ProcessExecutor3: Setting LC_TIME failed, using "C" ERROR2023-05-17 10:46:14ProcessExecutor4: Setting LC_MESSAGES failed, using "C" ERROR2023-05-17 10:46:14ProcessExecutor5: Setting LC_MONETARY failed, using "C" ERROR2023-05-17 10:46:14ProcessExecutor6: Setting LC_PAPER failed, using "C" ERROR2023-05-17 10:46:14ProcessExecutor7: Setting LC_MEASUREMENT failed, using "C" INFO2023-05-17 10:46:14ProcessExecutornull device INFO2023-05-17 10:46:14ProcessExecutor          1 [Wed May 17 10:46:14 GMT 2023] picard.analysis.CollectRnaSeqMetrics done. Elapsed time: 0.01 minutes.Runtime.totalMemory()=1029177344
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectRnaSeqMetrics (Test #3)" name="2" time="50.853200912475586">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:46:53.092 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so[Wed May 17 10:46:53 GMT 2023] CollectRnaSeqMetrics REF_FLAT=refFlat.tab STRAND_SPECIFICITY=NONE MINIMUM_LENGTH=500 CHART_OUTPUT=/galaxy/server/database/objects/0/4/1/dataset_041e3d50-7b3f-49de-96a2-174a8aeccf94.dat RRNA_FRAGMENT_PERCENTAGE=0.8 METRIC_ACCUMULATION_LEVEL=[ALL_READS] INPUT=picard_CollectRnaSeqMetrics_bam OUTPUT=/galaxy/server/database/objects/d/0/4/dataset_d043fc81-cac8-4d95-b407-5e234420c7fe.dat ASSUME_SORTED=true TMP_DIR=[/galaxy/server/database/jobs_directory/000/103/tmp] VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=localref.fa    STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false[Wed May 17 10:46:53 GMT 2023] Executing as root@gxy-wmcr5-ptqqq on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOTINFO2023-05-17 10:46:53CollectRnaSeqMetricsLoaded 37 genes.INFO2023-05-17 10:46:53RExecutorExecuting R script via command: Rscript /tmp/script1925220455778945835.R /galaxy/server/database/objects/d/0/4/dataset_d043fc81-cac8-4d95-b407-5e234420c7fe.dat /galaxy/server/database/objects/0/4/1/dataset_041e3d50-7b3f-49de-96a2-174a8aeccf94.dat picard_CollectRnaSeqMetrics_bam ERROR2023-05-17 10:46:53ProcessExecutorDuring startup - Warning messages:ERROR2023-05-17 10:46:53ProcessExecutor1: Setting LC_CTYPE failed, using "C" ERROR2023-05-17 10:46:53ProcessExecutor2: Setting LC_COLLATE failed, using "C" ERROR2023-05-17 10:46:53ProcessExecutor3: Setting LC_TIME failed, using "C" ERROR2023-05-17 10:46:53ProcessExecutor4: Setting LC_MESSAGES failed, using "C" ERROR2023-05-17 10:46:53ProcessExecutor5: Setting LC_MONETARY failed, using "C" ERROR2023-05-17 10:46:53ProcessExecutor6: Setting LC_PAPER failed, using "C" ERROR2023-05-17 10:46:53ProcessExecutor7: Setting LC_MEASUREMENT failed, using "C" INFO2023-05-17 10:46:53ProcessExecutornull device INFO2023-05-17 10:46:53ProcessExecutor          1 [Wed May 17 10:46:53 GMT 2023] picard.analysis.CollectRnaSeqMetrics done. Elapsed time: 0.01 minutes.Runtime.totalMemory()=1029177344
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectRnaSeqMetrics (Test #4)" name="3" time="42.19624733924866">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:46:55.098 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so[Wed May 17 10:46:55 GMT 2023] CollectRnaSeqMetrics REF_FLAT=refFlat.tab STRAND_SPECIFICITY=NONE MINIMUM_LENGTH=500 CHART_OUTPUT=/galaxy/server/database/objects/8/8/9/dataset_889e55b8-03be-467a-9717-21bb83fa4aa8.dat RRNA_FRAGMENT_PERCENTAGE=0.8 METRIC_ACCUMULATION_LEVEL=[ALL_READS] INPUT=picard_CollectRnaSeqMetrics_bam OUTPUT=/galaxy/server/database/objects/9/9/5/dataset_99516024-5df7-432f-946a-bfce7570deea.dat ASSUME_SORTED=true TMP_DIR=[/galaxy/server/database/jobs_directory/000/104/tmp] VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=localref.fa    STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false[Wed May 17 10:46:55 GMT 2023] Executing as root@gxy-gx6wv-k8gwg on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOTINFO2023-05-17 10:46:55CollectRnaSeqMetricsLoaded 17 genes.INFO2023-05-17 10:46:55RExecutorExecuting R script via command: Rscript /tmp/script6342822222105506749.R /galaxy/server/database/objects/9/9/5/dataset_99516024-5df7-432f-946a-bfce7570deea.dat /galaxy/server/database/objects/8/8/9/dataset_889e55b8-03be-467a-9717-21bb83fa4aa8.dat picard_CollectRnaSeqMetrics_bam ERROR2023-05-17 10:46:55ProcessExecutorDuring startup - Warning messages:ERROR2023-05-17 10:46:55ProcessExecutor1: Setting LC_CTYPE failed, using "C" ERROR2023-05-17 10:46:55ProcessExecutor2: Setting LC_COLLATE failed, using "C" ERROR2023-05-17 10:46:55ProcessExecutor3: Setting LC_TIME failed, using "C" ERROR2023-05-17 10:46:55ProcessExecutor4: Setting LC_MESSAGES failed, using "C" ERROR2023-05-17 10:46:55ProcessExecutor5: Setting LC_MONETARY failed, using "C" ERROR2023-05-17 10:46:55ProcessExecutor6: Setting LC_PAPER failed, using "C" ERROR2023-05-17 10:46:55ProcessExecutor7: Setting LC_MEASUREMENT failed, using "C" INFO2023-05-17 10:46:55ProcessExecutornull device INFO2023-05-17 10:46:55ProcessExecutor          1 [Wed May 17 10:46:55 GMT 2023] picard.analysis.CollectRnaSeqMetrics done. Elapsed time: 0.01 minutes.Runtime.totalMemory()=1029177344
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectWgsMetrics (Test #1)" name="0" time="37.76772165298462">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G10:51:43.412 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_DownsampleSam (Test #1)" name="0" time="41.03407144546509">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:42:03.887 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_EstimateLibraryComplexity (Test #1)" name="0" time="39.78445816040039">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:54:25.171 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_FastqToSam (Test #1)" name="0" time="37.9846978187561">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:44:53.981 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_FilterSamReads (Test #1)" name="0" time="54.809916257858276">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:55:19.292 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:55:21.170 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_FilterSamReads (Test #2)" name="1" time="42.064350605010986">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:55:21.073 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:55:22.894 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_FixMateInformation (Test #1)" name="0" time="37.30932426452637">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:44:16.394 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MarkDuplicates (Test #1)" name="0" time="47.00913977622986">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:47:29.294 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MarkDuplicates (Test #2)" name="1" time="46.5173556804657">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:47:31.189 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MarkDuplicates (Test #3)" name="2" time="70.92845463752747">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:48:21.889 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MarkDuplicatesWithMateCigar (Test #1)" name="0" time="37.60212302207947">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G10:43:19.294 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MeanQualityByCycle (Test #1)" name="0" time="36.92467427253723">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G10:51:17.812 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.soERROR2023-05-17 10:51:18ProcessExecutorDuring startup - Warning messages:ERROR2023-05-17 10:51:18ProcessExecutor1: Setting LC_CTYPE failed, using "C" ERROR2023-05-17 10:51:18ProcessExecutor2: Setting LC_COLLATE failed, using "C" ERROR2023-05-17 10:51:18ProcessExecutor3: Setting LC_TIME failed, using "C" ERROR2023-05-17 10:51:18ProcessExecutor4: Setting LC_MESSAGES failed, using "C" ERROR2023-05-17 10:51:18ProcessExecutor5: Setting LC_MONETARY failed, using "C" ERROR2023-05-17 10:51:18ProcessExecutor6: Setting LC_PAPER failed, using "C" ERROR2023-05-17 10:51:18ProcessExecutor7: Setting LC_MEASUREMENT failed, using "C" 
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MergeBamAlignment (Test #1)" name="0" time="40.98125433921814">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G10:53:04.279 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G10:53:05.182 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MergeSamFiles (Test #1)" name="0" time="18.956799507141113">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 0, "time_seconds": 18.956799507141113, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MergeSamFiles", "tool_version": "2.18.2.1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_NormalizeFasta (Test #1)" name="0" time="34.63652038574219">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:42:39.785 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_QualityScoreDistribution (Test #1)" name="0" time="58.650919914245605">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:43:36.789 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.soERROR2023-05-17 10:43:37ProcessExecutorDuring startup - Warning messages:ERROR2023-05-17 10:43:37ProcessExecutor1: Setting LC_CTYPE failed, using "C" ERROR2023-05-17 10:43:37ProcessExecutor2: Setting LC_COLLATE failed, using "C" ERROR2023-05-17 10:43:37ProcessExecutor3: Setting LC_TIME failed, using "C" ERROR2023-05-17 10:43:37ProcessExecutor4: Setting LC_MESSAGES failed, using "C" ERROR2023-05-17 10:43:37ProcessExecutor5: Setting LC_MONETARY failed, using "C" ERROR2023-05-17 10:43:37ProcessExecutor6: Setting LC_PAPER failed, using "C" ERROR2023-05-17 10:43:37ProcessExecutor7: Setting LC_MEASUREMENT failed, using "C" 
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_ReorderSam (Test #1)" name="0" time="39.07149815559387">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:51:54.384 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:51:56.008 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_ReplaceSamHeader (Test #1)" name="0" time="46.14512276649475">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:48:26.113 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_RevertOriginalBaseQualitiesAndAddMateCigar (Test #1)" name="0" time="26.066296577453613">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "inputFile": {   "id": "c89272d749b1672d",   "src": "hda"  },  "max_records_to_examine": "10000",  "restore_original_qualities": true,  "validation_stringency": "LENIENT" }, "job": {  "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-\u0027-Xmx2048m -Xms256m\u0027} \u0026\u0026 export _JAVA_OPTIONS \u0026\u0026  picard RevertOriginalBaseQualitiesAndAddMateCigar  INPUT=\u0027/galaxy/server/database/objects/4/b/9/dataset_4b909fe1-b948-4645-88d3-e9c9b0aa75f5.dat\u0027 OUTPUT=\"/galaxy/server/database/objects/2/7/d/dataset_27dbb66c-403e-4ecd-a928-46d0140938e2.dat\"  RESTORE_ORIGINAL_QUALITIES=\"true\" MAX_RECORDS_TO_EXAMINE=\"10000\"  SORT_ORDER=coordinate VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo \u0027TMP_DIR=$TMPDIR\u0027 ; else if [ -n \"$TEMP\" ] ; then echo \u0027TMP_DIR=$TEMP\u0027 ; fi ; fi`",  "command_version": null,  "create_time": "2023-05-17T10:53:10.441195",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-hgb7d",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "07337dcbd696c9c4",  "inputs": {   "inputFile": {    "id": "c89272d749b1672d",    "src": "hda",    "uuid": "4b909fe1-b948-4645-88d3-e9c9b0aa75f5"   },   "inputFile1": {    "id": "c89272d749b1672d",    "src": "hda",    "uuid": "4b909fe1-b948-4645-88d3-e9c9b0aa75f5"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "outFile": {    "id": "c425259b0cb60700",    "src": "hda",    "uuid": "27dbb66c-403e-4ecd-a928-46d0140938e2"   }  },  "params": {   "__input_ext": "\"bam\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "max_records_to_examine": "\"10000\"",   "restore_original_qualities": "true",   "validation_stringency": "\"LENIENT\""  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_RevertOriginalBaseQualitiesAndAddMateCigar/2.18.2.1",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2023-05-17T10:53:17.233720",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_RevertOriginalBaseQualitiesAndAddMateCigar/2.18.2.1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_RevertOriginalBaseQualitiesAndAddMateCigar/2.18.2.1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 0, "time_seconds": 26.066296577453613, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_RevertOriginalBaseQualitiesAndAddMateCigar", "tool_version": "2.18.2.1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_RevertSam (Test #1)" name="0" time="36.26162767410278">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G10:42:41.990 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SamToFastq (Test #1)" name="0" time="36.49792170524597">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:50:03.391 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SamToFastq (Test #2)" name="1" time="38.89043426513672">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:50:23.281 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SamToFastq (Test #3)" name="2" time="37.326024770736694">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G10:50:39.596 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SortSam (Test #1)" name="0" time="39.38120794296265">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx10G -Xms1G10:53:43.614 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SortSam (Test #2)" name="1" time="36.07522630691528">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx10G -Xms1G10:53:40.608 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_ValidateSamFile (Test #1)" name="0" time="40.39037585258484">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G10:52:22.276 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics (Test #1)" name="0" time="45.263535499572754">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G10:49:09.859 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so[Wed May 17 10:49:09 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=localref.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false[Wed May 17 10:49:09 GMT 2023] Executing as root@gxy-js5n2-gvj2z on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT[Wed May 17 10:49:10 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.00 minutes.Runtime.totalMemory()=1029177344
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics (Test #2)" name="1" time="35.460670948028564">
        
            
                <error type="error" message="Tool exit code: 1"><![CDATA[
                    { "inputs": {  "context_size": "1",  "contexts_to_print": "AAA,CAA,AAC,AAT,AAG",  "inputFile": {   "id": "7e5aee6137ac18fe",   "src": "hda"  },  "reference_source|reference_source_selector": "cached" }, "job": {  "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-\u0027-Xmx2048m -Xms256m\u0027} \u0026\u0026 export _JAVA_OPTIONS \u0026\u0026   ln -f -s \u0027/galaxy/server/database/objects/5/7/d/dataset_57dde1a1-9033-4b34-acf8-6d6eb6339afa.dat\u0027 \u0027picard_ARRG_test1_bam\u0027 \u0026\u0026      picard CollectSequencingArtifactMetrics I=\u0027picard_ARRG_test1_bam\u0027 O=\u0027OutPut\u0027 R=\u0027/cvmfs/data.galaxyproject.org/managed/picard_index/apiMel4/apiMel4.fa\u0027 AS=false CONTEXT_SIZE=1 INCLUDE_DUPLICATES=\u0027false\u0027 CONTEXTS_TO_PRINT=\u0027AAA\u0027 CONTEXTS_TO_PRINT=\u0027CAA\u0027 CONTEXTS_TO_PRINT=\u0027AAC\u0027 CONTEXTS_TO_PRINT=\u0027AAT\u0027 CONTEXTS_TO_PRINT=\u0027AAG\u0027 MINIMUM_QUALITY_SCORE=\u002730\u0027 INCLUDE_UNPAIRED=\u0027false\u0027 MAXIMUM_INSERT_SIZE=\u0027600\u0027 MINIMUM_INSERT_SIZE=\u002730\u0027 MINIMUM_MAPPING_QUALITY=\u002720\u0027 VALIDATION_STRINGENCY=\u0027LENIENT\u0027;",  "command_version": "",  "create_time": "2023-05-17T10:49:22.888235",  "dependencies": [],  "exit_code": 1,  "external_id": "gxy-2wx66",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "eeed0fde9c8378bf",  "inputs": {   "inputFile": {    "id": "7e5aee6137ac18fe",    "src": "hda",    "uuid": "57dde1a1-9033-4b34-acf8-6d6eb6339afa"   }  },  "job_messages": [   {    "code_desc": "",    "desc": "Fatal error: Exit code 1 ()",    "error_level": 3,    "exit_code": 1,    "type": "exit_code"   }  ],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "2 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1684320567.0000000",    "title": "Job End Time",    "value": "2023-05-17 10:49:27"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1684320565.0000000",    "title": "Job Start Time",    "value": "2023-05-17 10:49:25"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "12240.0000000",    "title": "Memory Allocated (MB)",    "value": "12240"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "3.0000000",    "title": "Cores Allocated",    "value": "3"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "err_summary": {    "id": "d9f7f759a0a69bad",    "src": "hda",    "uuid": "0964349a-a19f-4183-bf1e-ae38da06cb67"   },   "pos_details": {    "id": "ecd575ca6f5048e5",    "src": "hda",    "uuid": "a85ceec0-bd0f-4337-8803-0f813dc6a02a"   },   "pos_summary": {    "id": "41b241fbfd6a0043",    "src": "hda",    "uuid": "50fa31b5-82c8-4be4-8249-22689826d269"   },   "pre_details": {    "id": "a18bbe7fe7e7a56c",    "src": "hda",    "uuid": "aa49be88-9a08-4abc-8035-cf192aec73af"   },   "pre_summary": {    "id": "0e85274659a02ed1",    "src": "hda",    "uuid": "23b7b648-3711-48a8-bfd5-4c4b03cd3200"   }  },  "params": {   "__input_ext": "\"bam\"",   "assume_sorted": "false",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/hg38.len\"",   "context_size": "\"1\"",   "contexts_to_print": "\"AAA,CAA,AAC,AAT,AAG\"",   "dbkey": "\"hg38\"",   "duplicates": "false",   "max_size": "\"600\"",   "min_quality_score": "\"30\"",   "min_size": "\"30\"",   "minim_map_quality": "\"20\"",   "reference_source": "{\"__current_case__\": 0, \"ref_file\": \"apiMel4\", \"reference_source_selector\": \"cached\"}",   "unpaired": "false",   "validation_stringency": "\"LENIENT\""  },  "state": "error",  "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n10:49:25.814 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 17 10:49:25 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=/cvmfs/data.galaxyproject.org/managed/picard_index/apiMel4/apiMel4.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 17 10:49:25 GMT 2023] Executing as root@gxy-2wx66-gw77c on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\n[Wed May 17 10:49:27 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.03 minutes.\nRuntime.totalMemory()=1029177344\nTo get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp\nException in thread \"main\" htsjdk.samtools.util.SequenceUtil$SequenceListsDifferException: Sequence dictionaries are not the same size (1, 5321)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceListsEqual(SequenceUtil.java:237)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:320)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:306)\n\tat picard.analysis.SinglePassSamProgram.makeItSo(SinglePassSamProgram.java:107)\n\tat picard.analysis.SinglePassSamProgram.doWork(SinglePassSamProgram.java:84)\n\tat picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:282)\n\tat picard.cmdline.PicardCommandLine.instanceMain(PicardCommandLine.java:98)\n\tat picard.cmdline.PicardCommandLine.main(PicardCommandLine.java:108)\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics/2.18.2.2",  "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n10:49:25.814 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 17 10:49:25 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=/cvmfs/data.galaxyproject.org/managed/picard_index/apiMel4/apiMel4.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 17 10:49:25 GMT 2023] Executing as root@gxy-2wx66-gw77c on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\n[Wed May 17 10:49:27 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.03 minutes.\nRuntime.totalMemory()=1029177344\nTo get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp\nException in thread \"main\" htsjdk.samtools.util.SequenceUtil$SequenceListsDifferException: Sequence dictionaries are not the same size (1, 5321)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceListsEqual(SequenceUtil.java:237)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:320)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:306)\n\tat picard.analysis.SinglePassSamProgram.makeItSo(SinglePassSamProgram.java:107)\n\tat picard.analysis.SinglePassSamProgram.doWork(SinglePassSamProgram.java:84)\n\tat picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:282)\n\tat picard.cmdline.PicardCommandLine.instanceMain(PicardCommandLine.java:98)\n\tat picard.cmdline.PicardCommandLine.main(PicardCommandLine.java:108)\n",  "tool_stdout": "",  "traceback": null,  "update_time": "2023-05-17T10:49:37.685947",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics/2.18.2.2, exit_code: 1, stderr: /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n10:49:25.814 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 17 10:49:25 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=/cvmfs/data.galaxyproject.org/managed/picard_index/apiMel4/apiMel4.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 17 10:49:25 GMT 2023] Executing as root@gxy-2wx66-gw77c on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\n[Wed May 17 10:49:27 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.03 minutes.\nRuntime.totalMemory()=1029177344\nTo get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp\nException in thread \"main\" htsjdk.samtools.util.SequenceUtil$SequenceListsDifferException: Sequence dictionaries are not the same size (1, 5321)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceListsEqual(SequenceUtil.java:237)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:320)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:306)\n\tat picard.analysis.SinglePassSamProgram.makeItSo(SinglePassSamProgram.java:107)\n\tat picard.analysis.SinglePassSamProgram.doWork(SinglePassSamProgram.java:84)\n\tat picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:282)\n\tat picard.cmdline.PicardCommandLine.instanceMain(PicardCommandLine.java:98)\n\tat picard.cmdline.PicardCommandLine.main(PicardCommandLine.java:108)\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics/2.18.2.2, exit_code: 1, stderr: /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n10:49:25.814 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 17 10:49:25 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=/cvmfs/data.galaxyproject.org/managed/picard_index/apiMel4/apiMel4.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 17 10:49:25 GMT 2023] Executing as root@gxy-2wx66-gw77c on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\n[Wed May 17 10:49:27 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.03 minutes.\nRuntime.totalMemory()=1029177344\nTo get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp\nException in thread \"main\" htsjdk.samtools.util.SequenceUtil$SequenceListsDifferException: Sequence dictionaries are not the same size (1, 5321)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceListsEqual(SequenceUtil.java:237)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:320)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:306)\n\tat picard.analysis.SinglePassSamProgram.makeItSo(SinglePassSamProgram.java:107)\n\tat picard.analysis.SinglePassSamProgram.doWork(SinglePassSamProgram.java:84)\n\tat picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:282)\n\tat picard.cmdline.PicardCommandLine.instanceMain(PicardCommandLine.java:98)\n\tat picard.cmdline.PicardCommandLine.main(PicardCommandLine.java:108)\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics/2.18.2.2, exit_code: 1, stderr: /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n10:49:25.814 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 17 10:49:25 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=/cvmfs/data.galaxyproject.org/managed/picard_index/apiMel4/apiMel4.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 17 10:49:25 GMT 2023] Executing as root@gxy-2wx66-gw77c on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\n[Wed May 17 10:49:27 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.03 minutes.\nRuntime.totalMemory()=1029177344\nTo get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp\nException in thread \"main\" htsjdk.samtools.util.SequenceUtil$SequenceListsDifferException: Sequence dictionaries are not the same size (1, 5321)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceListsEqual(SequenceUtil.java:237)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:320)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:306)\n\tat picard.analysis.SinglePassSamProgram.makeItSo(SinglePassSamProgram.java:107)\n\tat picard.analysis.SinglePassSamProgram.doWork(SinglePassSamProgram.java:84)\n\tat picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:282)\n\tat picard.cmdline.PicardCommandLine.instanceMain(PicardCommandLine.java:98)\n\tat picard.cmdline.PicardCommandLine.main(PicardCommandLine.java:108)\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics/2.18.2.2, exit_code: 1, stderr: /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n10:49:25.814 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 17 10:49:25 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=/cvmfs/data.galaxyproject.org/managed/picard_index/apiMel4/apiMel4.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 17 10:49:25 GMT 2023] Executing as root@gxy-2wx66-gw77c on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\n[Wed May 17 10:49:27 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.03 minutes.\nRuntime.totalMemory()=1029177344\nTo get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp\nException in thread \"main\" htsjdk.samtools.util.SequenceUtil$SequenceListsDifferException: Sequence dictionaries are not the same size (1, 5321)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceListsEqual(SequenceUtil.java:237)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:320)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:306)\n\tat picard.analysis.SinglePassSamProgram.makeItSo(SinglePassSamProgram.java:107)\n\tat picard.analysis.SinglePassSamProgram.doWork(SinglePassSamProgram.java:84)\n\tat picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:282)\n\tat picard.cmdline.PicardCommandLine.instanceMain(PicardCommandLine.java:98)\n\tat picard.cmdline.PicardCommandLine.main(PicardCommandLine.java:108)\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics/2.18.2.2, exit_code: 1, stderr: /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n10:49:25.814 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 17 10:49:25 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=/cvmfs/data.galaxyproject.org/managed/picard_index/apiMel4/apiMel4.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 17 10:49:25 GMT 2023] Executing as root@gxy-2wx66-gw77c on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\n[Wed May 17 10:49:27 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.03 minutes.\nRuntime.totalMemory()=1029177344\nTo get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp\nException in thread \"main\" htsjdk.samtools.util.SequenceUtil$SequenceListsDifferException: Sequence dictionaries are not the same size (1, 5321)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceListsEqual(SequenceUtil.java:237)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:320)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:306)\n\tat picard.analysis.SinglePassSamProgram.makeItSo(SinglePassSamProgram.java:107)\n\tat picard.analysis.SinglePassSamProgram.doWork(SinglePassSamProgram.java:84)\n\tat picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:282)\n\tat picard.cmdline.PicardCommandLine.instanceMain(PicardCommandLine.java:98)\n\tat picard.cmdline.PicardCommandLine.main(PicardCommandLine.java:108)\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics/2.18.2.2, exit_code: 1, stderr: /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n10:49:25.814 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 17 10:49:25 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=/cvmfs/data.galaxyproject.org/managed/picard_index/apiMel4/apiMel4.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 17 10:49:25 GMT 2023] Executing as root@gxy-2wx66-gw77c on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\n[Wed May 17 10:49:27 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.03 minutes.\nRuntime.totalMemory()=1029177344\nTo get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp\nException in thread \"main\" htsjdk.samtools.util.SequenceUtil$SequenceListsDifferException: Sequence dictionaries are not the same size (1, 5321)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceListsEqual(SequenceUtil.java:237)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:320)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:306)\n\tat picard.analysis.SinglePassSamProgram.makeItSo(SinglePassSamProgram.java:107)\n\tat picard.analysis.SinglePassSamProgram.doWork(SinglePassSamProgram.java:84)\n\tat picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:282)\n\tat picard.cmdline.PicardCommandLine.instanceMain(PicardCommandLine.java:98)\n\tat picard.cmdline.PicardCommandLine.main(PicardCommandLine.java:108)\n." ], "status": "failure", "test_index": 1, "time_seconds": 35.460670948028564, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics", "tool_version": "2.18.2.2"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directoryPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G10:49:25.814 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so[Wed May 17 10:49:25 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=/cvmfs/data.galaxyproject.org/managed/picard_index/apiMel4/apiMel4.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false[Wed May 17 10:49:25 GMT 2023] Executing as root@gxy-2wx66-gw77c on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT[Wed May 17 10:49:27 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.03 minutes.Runtime.totalMemory()=1029177344To get help, see http://broadinstitute.github.io/picard/index.html#GettingHelpException in thread "main" htsjdk.samtools.util.SequenceUtil$SequenceListsDifferException: Sequence dictionaries are not the same size (1, 5321)at htsjdk.samtools.util.SequenceUtil.assertSequenceListsEqual(SequenceUtil.java:237)at htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:320)at htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:306)at picard.analysis.SinglePassSamProgram.makeItSo(SinglePassSamProgram.java:107)at picard.analysis.SinglePassSamProgram.doWork(SinglePassSamProgram.java:84)at picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:282)at picard.cmdline.PicardCommandLine.instanceMain(PicardCommandLine.java:98)at picard.cmdline.PicardCommandLine.main(PicardCommandLine.java:108)
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2 (Test #1)" name="0" time="148.77602171897888">
        
            
            <system-out><![CDATA[
            primary factor: Treatment ---------------------DESeq2 run informationsample table:                                TreatmentGSM461176_untreat_single.counts UntreatedGSM461177_untreat_paired.counts UntreatedGSM461178_untreat_paired.counts UntreatedGSM461182_untreat_single.counts UntreatedGSM461179_treat_single.counts     TreatedGSM461180_treat_paired.counts     TreatedGSM461181_treat_paired.counts     Treateddesign formula:~Treatment7 samples with counts over 3999 genesusing disperion fit type: parametric summary of resultsTreatment: Treated vs Untreatedout of 3429 with nonzero total read countadjusted p-value < 0.1LFC > 0 (up)       : 148, 4.3%LFC < 0 (down)     : 152, 4.4%outliers [1]       : 2, 0.058%low counts [2]     : 659, 19%(mean count < 3)[1] see 'cooksCutoff' argument of ?results[2] see 'independentFiltering' argument of ?resultsNULLSession information:R version 3.5.1 (2018-07-02)Platform: x86_64-conda_cos6-linux-gnu (64-bit)Running under: Buildroot 2014.02Matrix products: defaultBLAS/LAPACK: /usr/local/lib/R/lib/libRblas.solocale:[1] Cattached base packages: [1] parallel  stats4    tools     stats     graphics  grDevices utils     [8] datasets  methods   base     other attached packages: [1] rjson_0.2.20                gplots_3.0.1                [3] RColorBrewer_1.1-2          DESeq2_1.22.1               [5] SummarizedExperiment_1.12.0 DelayedArray_0.8.0          [7] BiocParallel_1.16.2         matrixStats_0.54.0          [9] Biobase_2.42.0              GenomicRanges_1.34.0       [11] GenomeInfoDb_1.18.1         IRanges_2.16.0             [13] S4Vectors_0.20.1            BiocGenerics_0.28.0        [15] getopt_1.20.2              loaded via a namespace (and not attached): [1] bit64_0.9-7            splines_3.5.1          gtools_3.8.1           [4] Formula_1.2-3          latticeExtra_0.6-28    blob_1.1.1             [7] GenomeInfoDbData_1.2.0 pillar_1.3.1           RSQLite_2.1.1         [10] backports_1.1.3        lattice_0.20-38        digest_0.6.18         [13] XVector_0.22.0         checkmate_1.8.5        colorspace_1.4-0      [16] htmltools_0.3.6        Matrix_1.2-15          plyr_1.8.4            [19] XML_3.98-1.16          pkgconfig_2.0.2        genefilter_1.64.0     [22] zlibbioc_1.28.0        xtable_1.8-3           scales_1.0.0          [25] gdata_2.18.0           htmlTable_1.13.1       tibble_2.0.1          [28] annotate_1.60.0        ggplot2_3.1.0          nnet_7.3-12           [31] lazyeval_0.2.1         survival_2.43-3        magrittr_1.5          [34] crayon_1.3.4           memoise_1.1.0          foreign_0.8-71        [37] data.table_1.12.0      stringr_1.3.1          munsell_0.5.0         [40] locfit_1.5-9.1         cluster_2.0.7-1        AnnotationDbi_1.44.0  [43] compiler_3.5.1         caTools_1.17.1.1       rlang_0.3.1           [46] grid_3.5.1             RCurl_1.95-4.11        rstudioapi_0.9.0      [49] htmlwidgets_1.3        bitops_1.0-6           base64enc_0.1-3       [52] gtable_0.2.0           DBI_1.0.0              gridExtra_2.3         [55] knitr_1.21             bit_1.1-12             Hmisc_4.1-1           [58] KernSmooth_2.23-15     stringi_1.2.4          Rcpp_1.0.0            [61] geneplotter_1.60.0     rpart_4.1-13           acepack_1.4.1         [64] xfun_0.4              
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honoredestimating size factorsestimating dispersionsgene-wise dispersion estimatesmean-dispersion relationshipfinal dispersion estimatesfitting model and testing
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2 (Test #2)" name="1" time="131.4611644744873">
        
            
            <system-out><![CDATA[
            primary factor: Treatment ---------------------DESeq2 run informationsample table:                                TreatmentGSM461176_untreat_single.counts UntreatedGSM461177_untreat_paired.counts UntreatedGSM461178_untreat_paired.counts UntreatedGSM461182_untreat_single.counts UntreatedGSM461179_treat_single.counts     TreatedGSM461180_treat_paired.counts     TreatedGSM461181_treat_paired.counts     Treateddesign formula:~W_1 + Treatment7 samples with counts over 3999 genesusing disperion fit type: parametric summary of resultsTreatment: Treated vs Untreatedout of 3429 with nonzero total read countadjusted p-value < 0.1LFC > 0 (up)       : 179, 5.2%LFC < 0 (down)     : 208, 6.1%outliers [1]       : 0, 0%low counts [2]     : 725, 21%(mean count < 4)[1] see 'cooksCutoff' argument of ?results[2] see 'independentFiltering' argument of ?resultsNULLSession information:R version 3.5.1 (2018-07-02)Platform: x86_64-conda_cos6-linux-gnu (64-bit)Running under: Buildroot 2014.02Matrix products: defaultBLAS/LAPACK: /usr/local/lib/R/lib/libRblas.solocale:[1] Cattached base packages: [1] parallel  stats4    tools     stats     graphics  grDevices utils     [8] datasets  methods   base     other attached packages: [1] rjson_0.2.20                gplots_3.0.1                [3] RColorBrewer_1.1-2          DESeq2_1.22.1               [5] SummarizedExperiment_1.12.0 DelayedArray_0.8.0          [7] BiocParallel_1.16.2         matrixStats_0.54.0          [9] Biobase_2.42.0              GenomicRanges_1.34.0       [11] GenomeInfoDb_1.18.1         IRanges_2.16.0             [13] S4Vectors_0.20.1            BiocGenerics_0.28.0        [15] getopt_1.20.2              loaded via a namespace (and not attached): [1] bit64_0.9-7            splines_3.5.1          gtools_3.8.1           [4] Formula_1.2-3          latticeExtra_0.6-28    blob_1.1.1             [7] GenomeInfoDbData_1.2.0 pillar_1.3.1           RSQLite_2.1.1         [10] backports_1.1.3        lattice_0.20-38        digest_0.6.18         [13] XVector_0.22.0         checkmate_1.8.5        colorspace_1.4-0      [16] htmltools_0.3.6        Matrix_1.2-15          plyr_1.8.4            [19] XML_3.98-1.16          pkgconfig_2.0.2        genefilter_1.64.0     [22] zlibbioc_1.28.0        xtable_1.8-3           scales_1.0.0          [25] gdata_2.18.0           htmlTable_1.13.1       tibble_2.0.1          [28] annotate_1.60.0        ggplot2_3.1.0          nnet_7.3-12           [31] lazyeval_0.2.1         survival_2.43-3        magrittr_1.5          [34] crayon_1.3.4           memoise_1.1.0          foreign_0.8-71        [37] data.table_1.12.0      stringr_1.3.1          munsell_0.5.0         [40] locfit_1.5-9.1         cluster_2.0.7-1        AnnotationDbi_1.44.0  [43] compiler_3.5.1         caTools_1.17.1.1       rlang_0.3.1           [46] grid_3.5.1             RCurl_1.95-4.11        rstudioapi_0.9.0      [49] htmlwidgets_1.3        bitops_1.0-6           base64enc_0.1-3       [52] gtable_0.2.0           DBI_1.0.0              gridExtra_2.3         [55] knitr_1.21             bit_1.1-12             Hmisc_4.1-1           [58] KernSmooth_2.23-15     stringi_1.2.4          Rcpp_1.0.0            [61] geneplotter_1.60.0     rpart_4.1-13           acepack_1.4.1         [64] xfun_0.4              
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honoredestimating size factorsestimating dispersionsgene-wise dispersion estimatesmean-dispersion relationshipfinal dispersion estimatesfitting model and testing
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2 (Test #3)" name="2" time="106.48033952713013">
        
            
            <system-out><![CDATA[
            primary factor: Treatment ---------------------DESeq2 run informationsample table:                                         TreatmentGSM461176_untreat_single.counts.noheader UntreatedGSM461177_untreat_paired.counts.noheader UntreatedGSM461178_untreat_paired.counts.noheader UntreatedGSM461182_untreat_single.counts.noheader UntreatedGSM461179_treat_single.counts.noheader     TreatedGSM461180_treat_paired.counts.noheader     TreatedGSM461181_treat_paired.counts.noheader     Treateddesign formula:~Treatment7 samples with counts over 3999 genesusing disperion fit type: parametric summary of resultsTreatment: Treated vs Untreatedout of 3429 with nonzero total read countadjusted p-value < 0.1LFC > 0 (up)       : 148, 4.3%LFC < 0 (down)     : 152, 4.4%outliers [1]       : 2, 0.058%low counts [2]     : 659, 19%(mean count < 3)[1] see 'cooksCutoff' argument of ?results[2] see 'independentFiltering' argument of ?resultsNULLSession information:R version 3.5.1 (2018-07-02)Platform: x86_64-conda_cos6-linux-gnu (64-bit)Running under: Buildroot 2014.02Matrix products: defaultBLAS/LAPACK: /usr/local/lib/R/lib/libRblas.solocale:[1] Cattached base packages: [1] parallel  stats4    tools     stats     graphics  grDevices utils     [8] datasets  methods   base     other attached packages: [1] rjson_0.2.20                gplots_3.0.1                [3] RColorBrewer_1.1-2          DESeq2_1.22.1               [5] SummarizedExperiment_1.12.0 DelayedArray_0.8.0          [7] BiocParallel_1.16.2         matrixStats_0.54.0          [9] Biobase_2.42.0              GenomicRanges_1.34.0       [11] GenomeInfoDb_1.18.1         IRanges_2.16.0             [13] S4Vectors_0.20.1            BiocGenerics_0.28.0        [15] getopt_1.20.2              loaded via a namespace (and not attached): [1] bit64_0.9-7            splines_3.5.1          gtools_3.8.1           [4] Formula_1.2-3          latticeExtra_0.6-28    blob_1.1.1             [7] GenomeInfoDbData_1.2.0 pillar_1.3.1           RSQLite_2.1.1         [10] backports_1.1.3        lattice_0.20-38        digest_0.6.18         [13] XVector_0.22.0         checkmate_1.8.5        colorspace_1.4-0      [16] htmltools_0.3.6        Matrix_1.2-15          plyr_1.8.4            [19] XML_3.98-1.16          pkgconfig_2.0.2        genefilter_1.64.0     [22] zlibbioc_1.28.0        xtable_1.8-3           scales_1.0.0          [25] gdata_2.18.0           htmlTable_1.13.1       tibble_2.0.1          [28] annotate_1.60.0        ggplot2_3.1.0          nnet_7.3-12           [31] lazyeval_0.2.1         survival_2.43-3        magrittr_1.5          [34] crayon_1.3.4           memoise_1.1.0          foreign_0.8-71        [37] data.table_1.12.0      stringr_1.3.1          munsell_0.5.0         [40] locfit_1.5-9.1         cluster_2.0.7-1        AnnotationDbi_1.44.0  [43] compiler_3.5.1         caTools_1.17.1.1       rlang_0.3.1           [46] grid_3.5.1             RCurl_1.95-4.11        rstudioapi_0.9.0      [49] htmlwidgets_1.3        bitops_1.0-6           base64enc_0.1-3       [52] gtable_0.2.0           DBI_1.0.0              gridExtra_2.3         [55] knitr_1.21             bit_1.1-12             Hmisc_4.1-1           [58] KernSmooth_2.23-15     stringi_1.2.4          Rcpp_1.0.0            [61] geneplotter_1.60.0     rpart_4.1-13           acepack_1.4.1         [64] xfun_0.4              
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honoredestimating size factorsestimating dispersionsgene-wise dispersion estimatesmean-dispersion relationshipfinal dispersion estimatesfitting model and testing
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2 (Test #4)" name="3" time="90.16473460197449">
        
            
            <system-out><![CDATA[
            primary factor: Treatment ---------------------DESeq2 run informationsample table:                       Treatmentsailfish_quant.sf4.tab Untreatedsailfish_quant.sf5.tab Untreatedsailfish_quant.sf6.tab Untreatedsailfish_quant.sf1.tab   Treatedsailfish_quant.sf2.tab   Treatedsailfish_quant.sf3.tab   Treateddesign formula:~Treatment6 samples with counts over 10 genesusing disperion fit type: parametric summary of resultsTreatment: Treated vs Untreatedout of 8 with nonzero total read countadjusted p-value < 0.1LFC > 0 (up)       : 0, 0%LFC < 0 (down)     : 0, 0%outliers [1]       : 0, 0%low counts [2]     : 0, 0%(mean count < 0)[1] see 'cooksCutoff' argument of ?results[2] see 'independentFiltering' argument of ?resultsNULLSession information:R version 3.5.1 (2018-07-02)Platform: x86_64-conda_cos6-linux-gnu (64-bit)Running under: Buildroot 2014.02Matrix products: defaultBLAS/LAPACK: /usr/local/lib/R/lib/libRblas.solocale:[1] Cattached base packages: [1] parallel  stats4    tools     stats     graphics  grDevices utils     [8] datasets  methods   base     other attached packages: [1] tximport_1.10.0             rjson_0.2.20                [3] gplots_3.0.1                RColorBrewer_1.1-2          [5] DESeq2_1.22.1               SummarizedExperiment_1.12.0 [7] DelayedArray_0.8.0          BiocParallel_1.16.2         [9] matrixStats_0.54.0          Biobase_2.42.0             [11] GenomicRanges_1.34.0        GenomeInfoDb_1.18.1        [13] IRanges_2.16.0              S4Vectors_0.20.1           [15] BiocGenerics_0.28.0         getopt_1.20.2              loaded via a namespace (and not attached): [1] jsonlite_1.6           bit64_0.9-7            splines_3.5.1          [4] gtools_3.8.1           Formula_1.2-3          latticeExtra_0.6-28    [7] blob_1.1.1             GenomeInfoDbData_1.2.0 pillar_1.3.1          [10] RSQLite_2.1.1          backports_1.1.3        lattice_0.20-38       [13] digest_0.6.18          XVector_0.22.0         checkmate_1.8.5       [16] colorspace_1.4-0       htmltools_0.3.6        Matrix_1.2-15         [19] plyr_1.8.4             XML_3.98-1.16          pkgconfig_2.0.2       [22] genefilter_1.64.0      zlibbioc_1.28.0        xtable_1.8-3          [25] scales_1.0.0           gdata_2.18.0           htmlTable_1.13.1      [28] tibble_2.0.1           annotate_1.60.0        ggplot2_3.1.0         [31] nnet_7.3-12            lazyeval_0.2.1         survival_2.43-3       [34] magrittr_1.5           crayon_1.3.4           memoise_1.1.0         [37] foreign_0.8-71         data.table_1.12.0      stringr_1.3.1         [40] munsell_0.5.0          locfit_1.5-9.1         cluster_2.0.7-1       [43] AnnotationDbi_1.44.0   compiler_3.5.1         caTools_1.17.1.1      [46] rlang_0.3.1            grid_3.5.1             RCurl_1.95-4.11       [49] rstudioapi_0.9.0       htmlwidgets_1.3        bitops_1.0-6          [52] base64enc_0.1-3        gtable_0.2.0           DBI_1.0.0             [55] gridExtra_2.3          knitr_1.21             bit_1.1-12            [58] Hmisc_4.1-1            KernSmooth_2.23-15     stringi_1.2.4         [61] Rcpp_1.0.0             geneplotter_1.60.0     rpart_4.1-13          [64] acepack_1.4.1          xfun_0.4              
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honoredreading in files with read.delim (install 'readr' package for speed up)1 2 3 4 5 6 summarizing abundancesummarizing countssummarizing lengthusing counts and average transcript lengths from tximportestimating size factorsusing 'avgTxLength' from assays(dds), correcting for library sizeestimating dispersionsgene-wise dispersion estimatesmean-dispersion relationship-- note: fitType='parametric', but the dispersion trend was not well captured by the   function: y = a/x + b, and a local regression fit was automatically substituted.   specify fitType='local' or 'mean' to avoid this message next time.final dispersion estimatesfitting model and testingWarning message:In lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :  Estimated rdf < 1.0; not estimating variance
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2 (Test #5)" name="4" time="10.557075262069702">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 4, "time_seconds": 10.557075262069702, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2", "tool_version": "2.11.40.6+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2 (Test #6)" name="5" time="105.44258117675781">
        
            
            <system-out><![CDATA[
            primary factor: Treatment ---------------------DESeq2 run informationsample table:                       Treatmentsailfish_quant.sf4.tab Untreatedsailfish_quant.sf5.tab Untreatedsailfish_quant.sf6.tab Untreatedsailfish_quant.sf1.tab   Treatedsailfish_quant.sf2.tab   Treatedsailfish_quant.sf3.tab   Treateddesign formula:~Treatment6 samples with counts over 11 genesusing disperion fit type: parametric summary of resultsTreatment: Treated vs Untreatedout of 9 with nonzero total read countadjusted p-value < 0.1LFC > 0 (up)       : 0, 0%LFC < 0 (down)     : 0, 0%outliers [1]       : 0, 0%low counts [2]     : 0, 0%(mean count < 0)[1] see 'cooksCutoff' argument of ?results[2] see 'independentFiltering' argument of ?resultsNULLSession information:R version 3.5.1 (2018-07-02)Platform: x86_64-conda_cos6-linux-gnu (64-bit)Running under: Buildroot 2014.02Matrix products: defaultBLAS/LAPACK: /usr/local/lib/R/lib/libRblas.solocale:[1] Cattached base packages: [1] parallel  stats4    tools     stats     graphics  grDevices utils     [8] datasets  methods   base     other attached packages: [1] GenomicFeatures_1.34.1      AnnotationDbi_1.44.0        [3] tximport_1.10.0             rjson_0.2.20                [5] gplots_3.0.1                RColorBrewer_1.1-2          [7] DESeq2_1.22.1               SummarizedExperiment_1.12.0 [9] DelayedArray_0.8.0          BiocParallel_1.16.2        [11] matrixStats_0.54.0          Biobase_2.42.0             [13] GenomicRanges_1.34.0        GenomeInfoDb_1.18.1        [15] IRanges_2.16.0              S4Vectors_0.20.1           [17] BiocGenerics_0.28.0         getopt_1.20.2              loaded via a namespace (and not attached): [1] bitops_1.0-6             bit64_0.9-7              progress_1.2.0           [4] httr_1.4.0               backports_1.1.3          R6_2.3.0                 [7] rpart_4.1-13             KernSmooth_2.23-15       Hmisc_4.1-1             [10] DBI_1.0.0                lazyeval_0.2.1           colorspace_1.4-0        [13] nnet_7.3-12              gridExtra_2.3            prettyunits_1.0.2       [16] bit_1.1-12               compiler_3.5.1           htmlTable_1.13.1        [19] rtracklayer_1.42.1       caTools_1.17.1.1         scales_1.0.0            [22] checkmate_1.8.5          genefilter_1.64.0        stringr_1.3.1           [25] digest_0.6.18            Rsamtools_1.34.0         foreign_0.8-71          [28] XVector_0.22.0           base64enc_0.1-3          pkgconfig_2.0.2         [31] htmltools_0.3.6          htmlwidgets_1.3          rlang_0.3.1             [34] rstudioapi_0.9.0         RSQLite_2.1.1            jsonlite_1.6            [37] gtools_3.8.1             acepack_1.4.1            RCurl_1.95-4.11         [40] magrittr_1.5             GenomeInfoDbData_1.2.0   Formula_1.2-3           [43] Matrix_1.2-15            Rcpp_1.0.0               munsell_0.5.0           [46] stringi_1.2.4            zlibbioc_1.28.0          plyr_1.8.4              [49] grid_3.5.1               blob_1.1.1               gdata_2.18.0            [52] crayon_1.3.4             lattice_0.20-38          Biostrings_2.50.1       [55] splines_3.5.1            annotate_1.60.0          hms_0.4.2               [58] locfit_1.5-9.1           knitr_1.21               pillar_1.3.1            [61] geneplotter_1.60.0       biomaRt_2.38.0           XML_3.98-1.16           [64] latticeExtra_0.6-28      data.table_1.12.0        gtable_0.2.0            [67] assertthat_0.2.0         ggplot2_3.1.0            xfun_0.4                [70] xtable_1.8-3             survival_2.43-3          tibble_2.0.1            [73] GenomicAlignments_1.18.0 memoise_1.1.0            cluster_2.0.7-1         
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honoredImport genomic features from the file as a GRanges object ... OKPrepare the 'metadata' data frame ... OKMake the TxDb object ... OK'select()' returned 1:1 mapping between keys and columnsreading in files with read.delim (install 'readr' package for speed up)1 2 3 4 5 6 reading in files with read.delim (install 'readr' package for speed up)1 2 3 4 5 6 summarizing abundancesummarizing countssummarizing lengthusing counts and average transcript lengths from tximportWarning message:In .get_cds_IDX(type, phase) :  The "phase" metadata column contains non-NA values for features of type  stop_codon. This information was ignored.estimating size factorsusing 'avgTxLength' from assays(dds), correcting for library sizeestimating dispersionsgene-wise dispersion estimatesmean-dispersion relationship-- note: fitType='parametric', but the dispersion trend was not well captured by the   function: y = a/x + b, and a local regression fit was automatically substituted.   specify fitType='local' or 'mean' to avoid this message next time.final dispersion estimatesfitting model and testingWarning message:In lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :  Estimated rdf < 1.0; not estimating variance
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2 (Test #7)" name="6" time="109.32207226753235">
        
            
            <system-out><![CDATA[
            primary factor: Treatment ---------------------DESeq2 run informationsample table:  Treatment4 Untreated5 Untreated6 Untreated1   Treated2   Treated3   Treateddesign formula:~Treatment6 samples with counts over 10 genesusing disperion fit type: parametric summary of resultsTreatment: Treated vs Untreatedout of 8 with nonzero total read countadjusted p-value < 0.1LFC > 0 (up)       : 0, 0%LFC < 0 (down)     : 0, 0%outliers [1]       : 0, 0%low counts [2]     : 0, 0%(mean count < 0)[1] see 'cooksCutoff' argument of ?results[2] see 'independentFiltering' argument of ?resultsNULLSession information:R version 3.5.1 (2018-07-02)Platform: x86_64-conda_cos6-linux-gnu (64-bit)Running under: Buildroot 2014.02Matrix products: defaultBLAS/LAPACK: /usr/local/lib/R/lib/libRblas.solocale:[1] Cattached base packages: [1] parallel  stats4    tools     stats     graphics  grDevices utils     [8] datasets  methods   base     other attached packages: [1] tximport_1.10.0             rjson_0.2.20                [3] gplots_3.0.1                RColorBrewer_1.1-2          [5] DESeq2_1.22.1               SummarizedExperiment_1.12.0 [7] DelayedArray_0.8.0          BiocParallel_1.16.2         [9] matrixStats_0.54.0          Biobase_2.42.0             [11] GenomicRanges_1.34.0        GenomeInfoDb_1.18.1        [13] IRanges_2.16.0              S4Vectors_0.20.1           [15] BiocGenerics_0.28.0         getopt_1.20.2              loaded via a namespace (and not attached): [1] jsonlite_1.6           bit64_0.9-7            splines_3.5.1          [4] gtools_3.8.1           Formula_1.2-3          latticeExtra_0.6-28    [7] blob_1.1.1             GenomeInfoDbData_1.2.0 pillar_1.3.1          [10] RSQLite_2.1.1          backports_1.1.3        lattice_0.20-38       [13] digest_0.6.18          XVector_0.22.0         checkmate_1.8.5       [16] colorspace_1.4-0       htmltools_0.3.6        Matrix_1.2-15         [19] plyr_1.8.4             XML_3.98-1.16          pkgconfig_2.0.2       [22] genefilter_1.64.0      zlibbioc_1.28.0        xtable_1.8-3          [25] scales_1.0.0           gdata_2.18.0           htmlTable_1.13.1      [28] tibble_2.0.1           annotate_1.60.0        ggplot2_3.1.0         [31] nnet_7.3-12            lazyeval_0.2.1         survival_2.43-3       [34] magrittr_1.5           crayon_1.3.4           memoise_1.1.0         [37] foreign_0.8-71         data.table_1.12.0      stringr_1.3.1         [40] munsell_0.5.0          locfit_1.5-9.1         cluster_2.0.7-1       [43] AnnotationDbi_1.44.0   compiler_3.5.1         caTools_1.17.1.1      [46] rlang_0.3.1            grid_3.5.1             RCurl_1.95-4.11       [49] rstudioapi_0.9.0       htmlwidgets_1.3        bitops_1.0-6          [52] base64enc_0.1-3        gtable_0.2.0           DBI_1.0.0             [55] gridExtra_2.3          knitr_1.21             bit_1.1-12            [58] Hmisc_4.1-1            KernSmooth_2.23-15     stringi_1.2.4         [61] Rcpp_1.0.0             geneplotter_1.60.0     rpart_4.1-13          [64] acepack_1.4.1          xfun_0.4              
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honoredreading in files with read.delim (install 'readr' package for speed up)1 2 3 4 5 6 summarizing abundancesummarizing countssummarizing lengthusing counts and average transcript lengths from tximportestimating size factorsusing 'avgTxLength' from assays(dds), correcting for library sizeestimating dispersionsgene-wise dispersion estimatesmean-dispersion relationship-- note: fitType='parametric', but the dispersion trend was not well captured by the   function: y = a/x + b, and a local regression fit was automatically substituted.   specify fitType='local' or 'mean' to avoid this message next time.final dispersion estimatesfitting model and testingWarning message:In lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :  Estimated rdf < 1.0; not estimating variance
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2 (Test #8)" name="7" time="21.018024921417236">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 7, "time_seconds": 21.018024921417236, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2", "tool_version": "2.11.40.6+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/edger/edger (Test #1)" name="0" time="50.212477684020996">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "adv|normalisationOption": "TMM",  "input|counts": {   "id": "1ae817c66af2ebc0",   "src": "hda"  },  "input|fact|rep_factor_0|factorName": "Genotype",  "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT",  "input|format": "matrix",  "rep_contrast_0|contrast": "Mut-WT",  "rep_contrast_1|contrast": "WT-Mut" }, "job": {  "command_line": "Rscript \u0027/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/edger/334ce9b1bac5/edger/edger.R\u0027  -R \u0027/galaxy/server/database/objects/4/e/2/dataset_4e24f972-976a-439f-9647-e88f92d26d7f.dat\u0027 -o \u0027/galaxy/server/database/jobs_directory/000/341/working/dataset_4e24f972-976a-439f-9647-e88f92d26d7f_files\u0027  -m \u0027/galaxy/server/database/objects/2/d/8/dataset_2d80fb7a-f06f-4543-af3c-9516d271dfb4.dat\u0027 -i \u0027Genotype::Mut,Mut,Mut,WT,WT,WT\u0027   -C \u0027Mut-WT,WT-Mut\u0027    -l \u00270.0\u0027 -p \u00270.05\u0027 -d \u0027BH\u0027 -n \u0027TMM\u0027 -b  \u0026\u0026 mkdir ./output_dir  \u0026\u0026 cp \u0027/galaxy/server/database/jobs_directory/000/341/working/dataset_4e24f972-976a-439f-9647-e88f92d26d7f_files\u0027/*.tsv output_dir/",  "command_version": null,  "create_time": "2023-05-17T11:16:48.310336",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-bl7rb",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "93ca6d7a603fdcc5",  "inputs": {   "counts": {    "id": "1ae817c66af2ebc0",    "src": "hda",    "uuid": "2d80fb7a-f06f-4543-af3c-9516d271dfb4"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {   "outTables": {    "id": "58e06a3c60db3bf4",    "src": "hdca"   }  },  "outputs": {   "outReport": {    "id": "ac5d7f47cbc158e6",    "src": "hda",    "uuid": "4e24f972-976a-439f-9647-e88f92d26d7f"   }  },  "params": {   "__input_ext": "\"tabular\"",   "adv": "{\"lfc\": \"0.0\", \"lrtOption\": false, \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true}",   "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}",   "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 432, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}",   "out": "{\"normCounts\": false, \"rdaOption\": false, \"rscript\": false}",   "rep_contrast": "[{\"__index__\": 0, \"contrast\": \"Mut-WT\"}, {\"__index__\": 1, \"contrast\": \"WT-Mut\"}]"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2023-05-17T11:17:16.226446",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1, exit_code: None, stderr: .",  "Output collection \u0027outTables\u0027: expected to have 2 elements, but it had 0." ], "status": "failure", "test_index": 0, "time_seconds": 50.212477684020996, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger", "tool_version": "3.24.1+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/edger/edger (Test #2)" name="1" time="9.849330425262451">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 1, "time_seconds": 9.849330425262451, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger", "tool_version": "3.24.1+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/edger/edger (Test #11)" name="10" time="50.12833905220032">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honored
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/edger/edger (Test #12)" name="11" time="36.29359483718872">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honored
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/edger/edger (Test #3)" name="2" time="39.55420970916748">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honored
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/edger/edger (Test #4)" name="3" time="36.49723553657532">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honored
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/edger/edger (Test #5)" name="4" time="38.116684675216675">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honored
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/edger/edger (Test #6)" name="5" time="54.835588693618774">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honored
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/edger/edger (Test #7)" name="6" time="37.842047691345215">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honored
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/edger/edger (Test #8)" name="7" time="69.32426691055298">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honored
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/edger/edger (Test #9)" name="8" time="90.02170586585999">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honored
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/edger/edger (Test #10)" name="9" time="37.27412414550781">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Warning message:In Sys.setlocale("LC_MESSAGES", "en_US.UTF-8") :  OS reports request to set locale to "en_US.UTF-8" cannot be honored
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts (Test #1)" name="0" time="43.21202039718628">
        
            
                <error type="error" message="Tool exit code: 127"><![CDATA[
                    { "inputs": {  "alignment": {   "id": "7bb310d2f59ce46d",   "src": "hda"  },  "anno|anno_select": "history",  "anno|reference_gene_sets": {   "id": "0716a7c1d0d22c67",   "src": "hda"  },  "format": "tabdel_medium",  "include_feature_length_file": true }, "job": {  "command_line": "export FC_PATH=$(command -v featureCounts | sed \u0027s@/bin/featureCounts$@@\u0027) \u0026\u0026  featureCounts  -a \u0027/galaxy/server/database/objects/4/4/b/dataset_44b3d847-053e-41f4-8e04-f4d5240ec9ad.dat\u0027 -F \"GTF\"  -o \"output\" -T ${GALAXY_SLOTS:-2}  -s  0 -t \u0027exon\u0027 -g \u0027gene_id\u0027            -Q  12  --minOverlap  1 --fracOverlap 0 --fracOverlapFeature 0         -C  \u0027/galaxy/server/database/objects/6/9/f/dataset_69f0899c-10ca-423a-a818-6adc6db89e22.dat\u0027  \u0026\u0026 grep -v \"^#\" \"output\" | sed -e \u0027s|/galaxy/server/database/objects/6/9/f/dataset_69f0899c-10ca-423a-a818-6adc6db89e22.dat|featureCounts_input1.bam|g\u0027 \u003e body.txt \u0026\u0026 cut -f 1,7 body.txt \u003e expression_matrix.txt  \u0026\u0026 cut -f 6 body.txt \u003e gene_lengths.txt \u0026\u0026 paste expression_matrix.txt gene_lengths.txt \u003e expression_matrix.txt.bak \u0026\u0026 mv -f expression_matrix.txt.bak \u0027/galaxy/server/database/objects/4/3/7/dataset_4375ca73-00f5-45cc-b048-dbf9954e22ab.dat\u0027  \u0026\u0026 cut -f 1,6 body.txt \u003e \u0027/galaxy/server/database/objects/3/f/b/dataset_3fb61eb5-3e84-470d-b687-e6e35443e5b6.dat\u0027   \u0026\u0026 sed -e \u0027s|/galaxy/server/database/objects/6/9/f/dataset_69f0899c-10ca-423a-a818-6adc6db89e22.dat|featureCounts_input1.bam|g\u0027 \u0027output.summary\u0027 \u003e \u0027/galaxy/server/database/objects/f/1/1/dataset_f117d66c-9d10-401c-a233-43410b86217f.dat\u0027",  "command_version": "featureCounts v1.6.2",  "create_time": "2023-05-17T11:43:49.308896",  "dependencies": [],  "exit_code": 127,  "external_id": "gxy-stfpm",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "8d02759eea50ea03",  "inputs": {   "alignment": {    "id": "7bb310d2f59ce46d",    "src": "hda",    "uuid": "69f0899c-10ca-423a-a818-6adc6db89e22"   },   "reference_gene_sets": {    "id": "0716a7c1d0d22c67",    "src": "hda",    "uuid": "44b3d847-053e-41f4-8e04-f4d5240ec9ad"   }  },  "job_messages": [   {    "code_desc": "",    "desc": "Fatal error: Exit code 127 ()",    "error_level": 3,    "exit_code": 127,    "type": "exit_code"   }  ],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1684323835.0000000",    "title": "Job End Time",    "value": "2023-05-17 11:43:55"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1684323834.0000000",    "title": "Job Start Time",    "value": "2023-05-17 11:43:54"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "19327.0000000",    "title": "Memory Allocated (MB)",    "value": "19327"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "8.0000000",    "title": "Cores Allocated",    "value": "8"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_feature_lengths": {    "id": "2a2b839727f6c8c6",    "src": "hda",    "uuid": "3fb61eb5-3e84-470d-b687-e6e35443e5b6"   },   "output_medium": {    "id": "a275718f408b0b18",    "src": "hda",    "uuid": "4375ca73-00f5-45cc-b048-dbf9954e22ab"   },   "output_summary": {    "id": "be8ed0928a205967",    "src": "hda",    "uuid": "f117d66c-9d10-401c-a233-43410b86217f"   }  },  "params": {   "__input_ext": "\"input\"",   "anno": "{\"__current_case__\": 2, \"anno_select\": \"history\", \"reference_gene_sets\": {\"values\": [{\"id\": 698, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/hg38.len\"",   "dbkey": "\"hg38\"",   "extended_parameters": "{\"R\": false, \"by_read_group\": false, \"contribute_to_multiple_features\": false, \"count_split_alignments_only\": false, \"exon_exon_junction_read_counting_enabled\": {\"__current_case__\": 1, \"count_exon_exon_junction_reads\": false}, \"frac_overlap\": \"0\", \"frac_overlap_feature\": \"0\", \"gff_feature_attribute\": \"gene_id\", \"gff_feature_type\": \"exon\", \"ignore_dup\": false, \"largest_overlap\": false, \"long_reads\": false, \"mapping_quality\": \"12\", \"min_overlap\": \"1\", \"multimapping_enabled\": {\"__current_case__\": 1, \"multimapping_counts\": \"\"}, \"primary\": false, \"read_extension_3p\": \"0\", \"read_extension_5p\": \"0\", \"read_reduction\": \"\", \"summarization_level\": false}",   "format": "\"tabdel_medium\"",   "include_feature_length_file": "true",   "pe_parameters": "{\"exclude_chimerics\": true, \"fragment_counting_enabled\": {\"__current_case__\": 1, \"fragment_counting\": \"\"}, \"only_both_ends\": false}",   "strand_specificity": "\"0\""  },  "state": "error",  "stderr": "\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ \u003c|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n\t  v1.6.2\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                           S dataset_69f0899c-10ca-423a-a818-6adc6db89e ... ||\n||                                                                            ||\n||             Output file : output                                           ||\n||                 Summary : output.summary                                   ||\n||              Annotation : dataset_44b3d847-053e-41f4-8e04-f4d5240ec9ad ... ||\n||      Dir for temp files : ./                                               ||\n||                                                                            ||\n||                 Threads : 8                                                ||\n||                   Level : meta-feature level                               ||\n||              Paired-end : no                                               ||\n||      Multimapping reads : not counted                                      ||\n|| Multi-overlapping reads : not counted                                      ||\n||   Min overlapping bases : 1                                                ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file dataset_44b3d847-053e-41f4-8e04-f4d5240ec9ad.dat ...  ||\n||    Features : 680                                                          ||\n||    Meta-features : 2                                                       ||\n||    Chromosomes/contigs : 1                                                 ||\n||                                                                            ||\n|| Process BAM file dataset_69f0899c-10ca-423a-a818-6adc6db89e22.dat...       ||\n||    Single-end reads are included.                                          ||\n||    Assign reads to features...                                             ||\n||    Total reads : 6236                                                      ||\n||    Successfully assigned reads : 158 (2.5%)                                ||\n||    Running time : 0.00 minutes                                             ||\n||                                                                            ||\n||                         Read assignment finished.                          ||\n||                                                                            ||\n|| Summary of counting results can be found in file \"output.summary\"          ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n/galaxy/server/database/jobs_directory/000/560/tool_script.sh: line 23: paste: command not found\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/1.6.2",  "tool_stderr": "\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ \u003c|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n\t  v1.6.2\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                           S dataset_69f0899c-10ca-423a-a818-6adc6db89e ... ||\n||                                                                            ||\n||             Output file : output                                           ||\n||                 Summary : output.summary                                   ||\n||              Annotation : dataset_44b3d847-053e-41f4-8e04-f4d5240ec9ad ... ||\n||      Dir for temp files : ./                                               ||\n||                                                                            ||\n||                 Threads : 8                                                ||\n||                   Level : meta-feature level                               ||\n||              Paired-end : no                                               ||\n||      Multimapping reads : not counted                                      ||\n|| Multi-overlapping reads : not counted                                      ||\n||   Min overlapping bases : 1                                                ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file dataset_44b3d847-053e-41f4-8e04-f4d5240ec9ad.dat ...  ||\n||    Features : 680                                                          ||\n||    Meta-features : 2                                                       ||\n||    Chromosomes/contigs : 1                                                 ||\n||                                                                            ||\n|| Process BAM file dataset_69f0899c-10ca-423a-a818-6adc6db89e22.dat...       ||\n||    Single-end reads are included.                                          ||\n||    Assign reads to features...                                             ||\n||    Total reads : 6236                                                      ||\n||    Successfully assigned reads : 158 (2.5%)                                ||\n||    Running time : 0.00 minutes                                             ||\n||                                                                            ||\n||                         Read assignment finished.                          ||\n||                                                                            ||\n|| Summary of counting results can be found in file \"output.summary\"          ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n/galaxy/server/database/jobs_directory/000/560/tool_script.sh: line 23: paste: command not found\n",  "tool_stdout": "",  "traceback": null,  "update_time": "2023-05-17T11:44:06.248598",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/1.6.2, exit_code: 127, stderr: \n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ \u003c|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n\t  v1.6.2\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                           S dataset_69f0899c-10ca-423a-a818-6adc6db89e ... ||\n||                                                                            ||\n||             Output file : output                                           ||\n||                 Summary : output.summary                                   ||\n||              Annotation : dataset_44b3d847-053e-41f4-8e04-f4d5240ec9ad ... ||\n||      Dir for temp files : ./                                               ||\n||                                                                            ||\n||                 Threads : 8                                                ||\n||                   Level : meta-feature level                               ||\n||              Paired-end : no                                               ||\n||      Multimapping reads : not counted                                      ||\n|| Multi-overlapping reads : not counted                                      ||\n||   Min overlapping bases : 1                                                ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file dataset_44b3d847-053e-41f4-8e04-f4d5240ec9ad.dat ...  ||\n||    Features : 680                                                          ||\n||    Meta-features : 2                                                       ||\n||    Chromosomes/contigs : 1                                                 ||\n||                                                                            ||\n|| Process BAM file dataset_69f0899c-10ca-423a-a818-6adc6db89e22.dat...       ||\n||    Single-end reads are included.                                          ||\n||    Assign reads to features...                                             ||\n||    Total reads : 6236                                                      ||\n||    Successfully assigned reads : 158 (2.5%)                                ||\n||    Running time : 0.00 minutes                                             ||\n||                                                                            ||\n||                         Read assignment finished.                          ||\n||                                                                            ||\n|| Summary of counting results can be found in file \"output.summary\"          ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n/galaxy/server/database/jobs_directory/000/560/tool_script.sh: line 23: paste: command not found\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/1.6.2, exit_code: 127, stderr: \n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ \u003c|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n\t  v1.6.2\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                           S dataset_69f0899c-10ca-423a-a818-6adc6db89e ... ||\n||                                                                            ||\n||             Output file : output                                           ||\n||                 Summary : output.summary                                   ||\n||              Annotation : dataset_44b3d847-053e-41f4-8e04-f4d5240ec9ad ... ||\n||      Dir for temp files : ./                                               ||\n||                                                                            ||\n||                 Threads : 8                                                ||\n||                   Level : meta-feature level                               ||\n||              Paired-end : no                                               ||\n||      Multimapping reads : not counted                                      ||\n|| Multi-overlapping reads : not counted                                      ||\n||   Min overlapping bases : 1                                                ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file dataset_44b3d847-053e-41f4-8e04-f4d5240ec9ad.dat ...  ||\n||    Features : 680                                                          ||\n||    Meta-features : 2                                                       ||\n||    Chromosomes/contigs : 1                                                 ||\n||                                                                            ||\n|| Process BAM file dataset_69f0899c-10ca-423a-a818-6adc6db89e22.dat...       ||\n||    Single-end reads are included.                                          ||\n||    Assign reads to features...                                             ||\n||    Total reads : 6236                                                      ||\n||    Successfully assigned reads : 158 (2.5%)                                ||\n||    Running time : 0.00 minutes                                             ||\n||                                                                            ||\n||                         Read assignment finished.                          ||\n||                                                                            ||\n|| Summary of counting results can be found in file \"output.summary\"          ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n/galaxy/server/database/jobs_directory/000/560/tool_script.sh: line 23: paste: command not found\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/1.6.2, exit_code: 127, stderr: \n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ \u003c|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n\t  v1.6.2\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                           S dataset_69f0899c-10ca-423a-a818-6adc6db89e ... ||\n||                                                                            ||\n||             Output file : output                                           ||\n||                 Summary : output.summary                                   ||\n||              Annotation : dataset_44b3d847-053e-41f4-8e04-f4d5240ec9ad ... ||\n||      Dir for temp files : ./                                               ||\n||                                                                            ||\n||                 Threads : 8                                                ||\n||                   Level : meta-feature level                               ||\n||              Paired-end : no                                               ||\n||      Multimapping reads : not counted                                      ||\n|| Multi-overlapping reads : not counted                                      ||\n||   Min overlapping bases : 1                                                ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file dataset_44b3d847-053e-41f4-8e04-f4d5240ec9ad.dat ...  ||\n||    Features : 680                                                          ||\n||    Meta-features : 2                                                       ||\n||    Chromosomes/contigs : 1                                                 ||\n||                                                                            ||\n|| Process BAM file dataset_69f0899c-10ca-423a-a818-6adc6db89e22.dat...       ||\n||    Single-end reads are included.                                          ||\n||    Assign reads to features...                                             ||\n||    Total reads : 6236                                                      ||\n||    Successfully assigned reads : 158 (2.5%)                                ||\n||    Running time : 0.00 minutes                                             ||\n||                                                                            ||\n||                         Read assignment finished.                          ||\n||                                                                            ||\n|| Summary of counting results can be found in file \"output.summary\"          ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n/galaxy/server/database/jobs_directory/000/560/tool_script.sh: line 23: paste: command not found\n." ], "status": "failure", "test_index": 0, "time_seconds": 43.21202039718628, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts", "tool_version": "1.6.2"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
                    ==========     _____ _    _ ____  _____  ______          _____          =====         / ____| |  | |  _ \|  __ \|  ____|   /\   |  __ \           =====      | (___ | |  | | |_) | |__) | |__     /  \  | |  | |            ====      \___ \| |  | |  _ <|  _  /|  __|   / /\ \ | |  | |              ====    ____) | |__| | |_) | | \ \| |____ / ____ \| |__| |        ==========   |_____/ \____/|____/|_|  \_\______/_/    \_\_____/  v1.6.2//========================== featureCounts setting ===========================\\||                                                                            ||||             Input files : 1 BAM file                                       ||||                           S dataset_69f0899c-10ca-423a-a818-6adc6db89e ... ||||                                                                            ||||             Output file : output                                           ||||                 Summary : output.summary                                   ||||              Annotation : dataset_44b3d847-053e-41f4-8e04-f4d5240ec9ad ... ||||      Dir for temp files : ./                                               ||||                                                                            ||||                 Threads : 8                                                ||||                   Level : meta-feature level                               ||||              Paired-end : no                                               ||||      Multimapping reads : not counted                                      |||| Multi-overlapping reads : not counted                                      ||||   Min overlapping bases : 1                                                ||||                                                                            ||\\===================== http://subread.sourceforge.net/ ======================////================================= Running ==================================\\||                                                                            |||| Load annotation file dataset_44b3d847-053e-41f4-8e04-f4d5240ec9ad.dat ...  ||||    Features : 680                                                          ||||    Meta-features : 2                                                       ||||    Chromosomes/contigs : 1                                                 ||||                                                                            |||| Process BAM file dataset_69f0899c-10ca-423a-a818-6adc6db89e22.dat...       ||||    Single-end reads are included.                                          ||||    Assign reads to features...                                             ||||    Total reads : 6236                                                      ||||    Successfully assigned reads : 158 (2.5%)                                ||||    Running time : 0.00 minutes                                             ||||                                                                            ||||                         Read assignment finished.                          ||||                                                                            |||| Summary of counting results can be found in file "output.summary"          ||||                                                                            ||\\===================== http://subread.sourceforge.net/ ======================///galaxy/server/database/jobs_directory/000/560/tool_script.sh: line 23: paste: command not found
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts (Test #2)" name="1" time="46.38045263290405">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
                    ==========     _____ _    _ ____  _____  ______          _____          =====         / ____| |  | |  _ \|  __ \|  ____|   /\   |  __ \           =====      | (___ | |  | | |_) | |__) | |__     /  \  | |  | |            ====      \___ \| |  | |  _ <|  _  /|  __|   / /\ \ | |  | |              ====    ____) | |__| | |_) | | \ \| |____ / ____ \| |__| |        ==========   |_____/ \____/|____/|_|  \_\______/_/    \_\_____/  v1.6.2//========================== featureCounts setting ===========================\\||                                                                            ||||             Input files : 1 BAM file                                       ||||                           S dataset_caf7354d-10ce-425c-b3a4-787f174376 ... ||||                                                                            ||||             Output file : output                                           ||||                 Summary : output.summary                                   ||||              Annotation : dataset_dc0f8945-9773-4c10-b341-ad6bcf996d5e ... ||||      Dir for temp files : ./                                               ||||                                                                            ||||                 Threads : 8                                                ||||                   Level : meta-feature level                               ||||              Paired-end : no                                               ||||      Multimapping reads : not counted                                      |||| Multi-overlapping reads : not counted                                      ||||   Min overlapping bases : 1                                                ||||                                                                            ||\\===================== http://subread.sourceforge.net/ ======================////================================= Running ==================================\\||                                                                            |||| Load annotation file dataset_dc0f8945-9773-4c10-b341-ad6bcf996d5e.dat ...  ||||    Features : 680                                                          ||||    Meta-features : 2                                                       ||||    Chromosomes/contigs : 1                                                 ||||                                                                            |||| Process BAM file dataset_caf7354d-10ce-425c-b3a4-787f174376a6.dat...       ||||    Single-end reads are included.                                          ||||    Assign reads to features...                                             ||||    Total reads : 6236                                                      ||||    Successfully assigned reads : 158 (2.5%)                                ||||    Running time : 0.00 minutes                                             ||||                                                                            ||||                         Read assignment finished.                          ||||                                                                            |||| Summary of counting results can be found in file "output.summary"          ||||                                                                            ||\\===================== http://subread.sourceforge.net/ ======================//
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts (Test #3)" name="2" time="39.78693962097168">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
                    ==========     _____ _    _ ____  _____  ______          _____          =====         / ____| |  | |  _ \|  __ \|  ____|   /\   |  __ \           =====      | (___ | |  | | |_) | |__) | |__     /  \  | |  | |            ====      \___ \| |  | |  _ <|  _  /|  __|   / /\ \ | |  | |              ====    ____) | |__| | |_) | | \ \| |____ / ____ \| |__| |        ==========   |_____/ \____/|____/|_|  \_\______/_/    \_\_____/  v1.6.2//========================== featureCounts setting ===========================\\||                                                                            ||||             Input files : 1 BAM file                                       ||||                           S dataset_caf7354d-10ce-425c-b3a4-787f174376 ... ||||                                                                            ||||             Output file : output                                           ||||                 Summary : output.summary                                   ||||              Annotation : dataset_dc0f8945-9773-4c10-b341-ad6bcf996d5e ... ||||       Junction Counting : <output_file>.jcounts                            ||||      Dir for temp files : ./                                               ||||                                                                            ||||                 Threads : 8                                                ||||                   Level : meta-feature level                               ||||              Paired-end : no                                               ||||      Multimapping reads : not counted                                      |||| Multi-overlapping reads : not counted                                      ||||   Min overlapping bases : 1                                                ||||                                                                            ||\\===================== http://subread.sourceforge.net/ ======================////================================= Running ==================================\\||                                                                            |||| Load annotation file dataset_dc0f8945-9773-4c10-b341-ad6bcf996d5e.dat ...  ||||    Features : 680                                                          ||||    Meta-features : 2                                                       ||||    Chromosomes/contigs : 1                                                 ||||                                                                            |||| Process BAM file dataset_caf7354d-10ce-425c-b3a4-787f174376a6.dat...       ||||    Single-end reads are included.                                          ||||    Assign reads to features...                                             ||||    Total reads : 6236                                                      ||||    Successfully assigned reads : 158 (2.5%)                                ||||    Running time : 0.00 minutes                                             ||||                                                                            ||||                 Found 0 junctions in all the input files.                  ||||                                                                            ||||                         Read assignment finished.                          ||||                                                                            |||| Summary of counting results can be found in file "output.summary"          ||||                                                                            ||\\===================== http://subread.sourceforge.net/ ======================//
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts (Test #4)" name="3" time="16.691800117492676">
        
            <error type="error" message="parameter 'bgenome': an invalid option (None) was selected, please verify"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027bgenome\u0027: an invalid option (None) was selected, please verify", "inputs": {  "alignment": {   "id": "759ec7662328f3d5",   "src": "hda"  },  "anno|anno_select": "builtin",  "extended_parameters|R": true,  "format": "tabdel_short" }, "status": "error", "test_index": 3, "time_seconds": 16.691800117492676, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts", "tool_version": "1.6.2"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts (Test #5)" name="4" time="17.0176944732666">
        
            <error type="error" message="parameter 'reference_gene_sets_builtin': an invalid option (None) was selected, please verify"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027reference_gene_sets_builtin\u0027: an invalid option (None) was selected, please verify", "inputs": {  "alignment": {   "id": "9fb10bc693b040b1",   "src": "hda"  },  "anno|anno_select": "cached",  "format": "tabdel_medium",  "include_feature_length_file": true }, "status": "error", "test_index": 4, "time_seconds": 17.0176944732666, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts", "tool_version": "1.6.2"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts (Test #6)" name="5" time="39.61244535446167">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
                    ==========     _____ _    _ ____  _____  ______          _____          =====         / ____| |  | |  _ \|  __ \|  ____|   /\   |  __ \           =====      | (___ | |  | | |_) | |__) | |__     /  \  | |  | |            ====      \___ \| |  | |  _ <|  _  /|  __|   / /\ \ | |  | |              ====    ____) | |__| | |_) | | \ \| |____ / ____ \| |__| |        ==========   |_____/ \____/|____/|_|  \_\______/_/    \_\_____/  v1.6.2//========================== featureCounts setting ===========================\\||                                                                            ||||             Input files : 1 BAM file                                       ||||                           S dataset_f434b1b4-86bd-49f0-bd8b-3bbf40134a ... ||||                                                                            ||||             Output file : output                                           ||||                 Summary : output.summary                                   ||||              Annotation : dataset_6934241d-ca18-405e-b57d-2aff3d4b0bf2 ... ||||      Assignment details : <input_file>.featureCounts.bam                   ||||                      (Note that files are saved to the output directory)   ||||                                                                            ||||      Dir for temp files : ./                                               ||||                                                                            ||||                 Threads : 8                                                ||||                   Level : meta-feature level                               ||||              Paired-end : no                                               ||||      Multimapping reads : not counted                                      |||| Multi-overlapping reads : not counted                                      ||||   Min overlapping bases : 1                                                ||||                                                                            ||\\===================== http://subread.sourceforge.net/ ======================////================================= Running ==================================\\||                                                                            |||| Load annotation file dataset_6934241d-ca18-405e-b57d-2aff3d4b0bf2.dat ...  ||||    Features : 1398                                                         ||||    Meta-features : 1389                                                    ||||    Chromosomes/contigs : 32                                                ||||                                                                            |||| Process BAM file dataset_f434b1b4-86bd-49f0-bd8b-3bbf40134a8f.dat...       ||||    Single-end reads are included.                                          ||||    Assign reads to features...                                             ||||    Total reads : 8936                                                      ||||    Successfully assigned reads : 14 (0.2%)                                 ||||    Running time : 0.01 minutes                                             ||||                                                                            ||||                         Read assignment finished.                          ||||                                                                            |||| Summary of counting results can be found in file "output.summary"          ||||                                                                            ||\\===================== http://subread.sourceforge.net/ ======================//[bam_sort_core] merging from 0 files and 8 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts (Test #1)" name="0" time="53.10618352890015">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
                    ==========     _____ _    _ ____  _____  ______          _____          =====         / ____| |  | |  _ \|  __ \|  ____|   /\   |  __ \           =====      | (___ | |  | | |_) | |__) | |__     /  \  | |  | |            ====      \___ \| |  | |  _ <|  _  /|  __|   / /\ \ | |  | |              ====    ____) | |__| | |_) | | \ \| |____ / ____ \| |__| |        ==========   |_____/ \____/|____/|_|  \_\______/_/    \_\_____/  v2.0.1//========================== featureCounts setting ===========================\\||                                                                            ||||             Input files : 1 BAM file                                       ||||                           o dataset_37719096-6e8f-4663-9e72-58ebdf635e ... ||||                                                                            ||||             Output file : output                                           ||||                 Summary : output.summary                                   ||||              Annotation : dataset_5f95f8fb-2234-43ce-b7ad-7632c5245a27 ... ||||      Dir for temp files : ./                                               ||||                                                                            ||||                 Threads : 8                                                ||||                   Level : meta-feature level                               ||||              Paired-end : no                                               ||||      Multimapping reads : not counted                                      |||| Multi-overlapping reads : not counted                                      ||||   Min overlapping bases : 1                                                ||||                                                                            ||\\============================================================================////================================= Running ==================================\\||                                                                            |||| Load annotation file dataset_5f95f8fb-2234-43ce-b7ad-7632c5245a27.dat ...  ||||    Features : 680                                                          ||||    Meta-features : 2                                                       ||||    Chromosomes/contigs : 1                                                 ||||                                                                            |||| Process BAM file dataset_37719096-6e8f-4663-9e72-58ebdf635eed.dat...       ||||    Single-end reads are included.                                          ||||    Total alignments : 6236                                                 ||||    Successfully assigned alignments : 158 (2.5%)                           ||||    Running time : 0.00 minutes                                             ||||                                                                            |||| Write the final count table.                                               |||| Write the read assignment summary.                                         ||||                                                                            |||| Summary of counting results can be found in file "output.summary"          ||||                                                                            ||\\============================================================================//
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts (Test #2)" name="1" time="42.55613851547241">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
                    ==========     _____ _    _ ____  _____  ______          _____          =====         / ____| |  | |  _ \|  __ \|  ____|   /\   |  __ \           =====      | (___ | |  | | |_) | |__) | |__     /  \  | |  | |            ====      \___ \| |  | |  _ <|  _  /|  __|   / /\ \ | |  | |              ====    ____) | |__| | |_) | | \ \| |____ / ____ \| |__| |        ==========   |_____/ \____/|____/|_|  \_\______/_/    \_\_____/  v2.0.1//========================== featureCounts setting ===========================\\||                                                                            ||||             Input files : 1 BAM file                                       ||||                           o dataset_37719096-6e8f-4663-9e72-58ebdf635e ... ||||                                                                            ||||             Output file : output                                           ||||                 Summary : output.summary                                   ||||              Annotation : dataset_5f95f8fb-2234-43ce-b7ad-7632c5245a27 ... ||||      Dir for temp files : ./                                               ||||                                                                            ||||                 Threads : 8                                                ||||                   Level : meta-feature level                               ||||              Paired-end : no                                               ||||      Multimapping reads : not counted                                      |||| Multi-overlapping reads : not counted                                      ||||   Min overlapping bases : 1                                                ||||                                                                            ||\\============================================================================////================================= Running ==================================\\||                                                                            |||| Load annotation file dataset_5f95f8fb-2234-43ce-b7ad-7632c5245a27.dat ...  ||||    Features : 680                                                          ||||    Meta-features : 2                                                       ||||    Chromosomes/contigs : 1                                                 ||||                                                                            |||| Process BAM file dataset_37719096-6e8f-4663-9e72-58ebdf635eed.dat...       ||||    Single-end reads are included.                                          ||||    Total alignments : 6236                                                 ||||    Successfully assigned alignments : 158 (2.5%)                           ||||    Running time : 0.00 minutes                                             ||||                                                                            |||| Write the final count table.                                               |||| Write the read assignment summary.                                         ||||                                                                            |||| Summary of counting results can be found in file "output.summary"          ||||                                                                            ||\\============================================================================//
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts (Test #3)" name="2" time="37.303210973739624">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
                    ==========     _____ _    _ ____  _____  ______          _____          =====         / ____| |  | |  _ \|  __ \|  ____|   /\   |  __ \           =====      | (___ | |  | | |_) | |__) | |__     /  \  | |  | |            ====      \___ \| |  | |  _ <|  _  /|  __|   / /\ \ | |  | |              ====    ____) | |__| | |_) | | \ \| |____ / ____ \| |__| |        ==========   |_____/ \____/|____/|_|  \_\______/_/    \_\_____/  v2.0.1//========================== featureCounts setting ===========================\\||                                                                            ||||             Input files : 1 BAM file                                       ||||                           o dataset_aab3b15c-0ca7-440d-956c-a6c0ac8664 ... ||||                                                                            ||||             Output file : output                                           ||||                 Summary : output.summary                                   ||||              Annotation : dataset_5298d6f5-2ee2-42d9-9b10-c8edaa5f2aba ... ||||      Dir for temp files : ./                                               ||||       Junction Counting : <output_file>.jcounts                            ||||                                                                            ||||                 Threads : 8                                                ||||                   Level : meta-feature level                               ||||              Paired-end : no                                               ||||      Multimapping reads : not counted                                      |||| Multi-overlapping reads : not counted                                      ||||   Min overlapping bases : 1                                                ||||                                                                            ||\\============================================================================////================================= Running ==================================\\||                                                                            |||| Load annotation file dataset_5298d6f5-2ee2-42d9-9b10-c8edaa5f2aba.dat ...  ||||    Features : 680                                                          ||||    Meta-features : 2                                                       ||||    Chromosomes/contigs : 1                                                 ||||                                                                            |||| Process BAM file dataset_aab3b15c-0ca7-440d-956c-a6c0ac866403.dat...       ||||    Single-end reads are included.                                          ||||    Total alignments : 6236                                                 ||||    Successfully assigned alignments : 158 (2.5%)                           ||||    Running time : 0.00 minutes                                             ||||                                                                            |||| Write the final count table.                                               |||| Write the junction count table.                                            |||| Write the read assignment summary.                                         ||||                                                                            |||| Summary of counting results can be found in file "output.summary"          ||||                                                                            ||\\============================================================================//
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts (Test #4)" name="3" time="19.69658350944519">
        
            <error type="error" message="parameter 'bgenome': an invalid option (None) was selected, please verify"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027bgenome\u0027: an invalid option (None) was selected, please verify", "inputs": {  "alignment": {   "id": "30615cb5890cae47",   "src": "hda"  },  "anno|anno_select": "builtin",  "extended_parameters|R": true,  "format": "tabdel_short" }, "status": "error", "test_index": 3, "time_seconds": 19.69658350944519, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts", "tool_version": "2.0.1+galaxy2"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts (Test #5)" name="4" time="16.87629747390747">
        
            <error type="error" message="parameter 'reference_gene_sets_builtin': an invalid option (None) was selected, please verify"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027reference_gene_sets_builtin\u0027: an invalid option (None) was selected, please verify", "inputs": {  "alignment": {   "id": "6374f3d49a830e1e",   "src": "hda"  },  "anno|anno_select": "cached",  "format": "tabdel_medium",  "include_feature_length_file": true }, "status": "error", "test_index": 4, "time_seconds": 16.87629747390747, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts", "tool_version": "2.0.1+galaxy2"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts (Test #6)" name="5" time="36.99680733680725">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
                    ==========     _____ _    _ ____  _____  ______          _____          =====         / ____| |  | |  _ \|  __ \|  ____|   /\   |  __ \           =====      | (___ | |  | | |_) | |__) | |__     /  \  | |  | |            ====      \___ \| |  | |  _ <|  _  /|  __|   / /\ \ | |  | |              ====    ____) | |__| | |_) | | \ \| |____ / ____ \| |__| |        ==========   |_____/ \____/|____/|_|  \_\______/_/    \_\_____/  v2.0.1//========================== featureCounts setting ===========================\\||                                                                            ||||             Input files : 1 BAM file                                       ||||                           o dataset_3076a75e-09ce-4cc8-9b4b-d08a3c2a1f ... ||||                                                                            ||||             Output file : output                                           ||||                 Summary : output.summary                                   ||||              Annotation : dataset_2fc247ad-27dc-4886-85c4-7f36065f8b9f ... ||||      Dir for temp files : ./                                               ||||      Assignment details : <input_file>.featureCounts.bam                   ||||                      (Note that files are saved to the output directory)   ||||                                                                            ||||                                                                            ||||                 Threads : 8                                                ||||                   Level : meta-feature level                               ||||              Paired-end : no                                               ||||      Multimapping reads : not counted                                      |||| Multi-overlapping reads : not counted                                      ||||   Min overlapping bases : 1                                                ||||                                                                            ||\\============================================================================////================================= Running ==================================\\||                                                                            |||| Load annotation file dataset_2fc247ad-27dc-4886-85c4-7f36065f8b9f.dat ...  ||||    Features : 1398                                                         ||||    Meta-features : 1389                                                    ||||    Chromosomes/contigs : 32                                                ||||                                                                            |||| Process BAM file dataset_3076a75e-09ce-4cc8-9b4b-d08a3c2a1f39.dat...       ||||    Single-end reads are included.                                          ||||    Total alignments : 8936                                                 ||||    Successfully assigned alignments : 14 (0.2%)                            ||||    Running time : 0.00 minutes                                             ||||                                                                            |||| Write the final count table.                                               |||| Write the read assignment summary.                                         ||||                                                                            |||| Summary of counting results can be found in file "output.summary"          ||||                                                                            ||\\============================================================================//[bam_sort_core] merging from 0 files and 8 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #1)" name="0" time="60.567078828811646">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adv|reporting_options|reporting_options_selector": "advanced",  "library|input_1": {   "id": "a2f9314be41ad773",   "src": "hda"  },  "library|input_2": {   "id": "a89ab907f525a25d",   "src": "hda"  },  "library|type": "paired",  "reference_genome|history_item": {   "id": "d06a2e57ef3eb2d3",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/b/7/3/dataset_b731ac0c-edea-4a92-818a-129f3ed9278b.dat\u0027 genome.fa \u0026\u0026 hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome \u0026\u0026        ln -f -s \u0027/galaxy/server/database/objects/f/a/a/dataset_faac18c5-b7d9-4064-8ad7-4e9538e6b668.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/8/3/4/dataset_834421e2-df62-4c85-ad62-c95728f4eedf.dat\u0027 input_r.fastq \u0026\u0026     hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027genome\u0027    -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027                                | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/3/2/c/dataset_32cf9c47-832f-4167-9251-f9007ed79823.dat\u0027",  "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2023-05-17T11:23:47.258373",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-wd8g4",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "bde8e2ea52f7e29c",  "inputs": {   "history_item": {    "id": "d06a2e57ef3eb2d3",    "src": "hda",    "uuid": "b731ac0c-edea-4a92-818a-129f3ed9278b"   },   "input_1": {    "id": "a2f9314be41ad773",    "src": "hda",    "uuid": "faac18c5-b7d9-4064-8ad7-4e9538e6b668"   },   "input_2": {    "id": "a89ab907f525a25d",    "src": "hda",    "uuid": "834421e2-df62-4c85-ad62-c95728f4eedf"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1684322645.0000000",    "title": "Job End Time",    "value": "2023-05-17 11:24:05"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1684322645.0000000",    "title": "Job Start Time",    "value": "2023-05-17 11:24:05"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "21474.0000000",    "title": "Memory Allocated (MB)",    "value": "21474"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "8.0000000",    "title": "Cores Allocated",    "value": "8"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "b94a7e8839ea9a34",    "src": "hda",    "uuid": "32cf9c47-832f-4167-9251-f9007ed79823"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 1, \"max_primary\": \"\", \"reporting_options_selector\": \"advanced\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 505, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 506, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}",   "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 504, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "ok",  "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n",  "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Calculating Z arrays for bucket 2\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 1\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  Entering block accumulator loop for bucket 6:\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 7\n  bucket 6: 10%\n  Calculating Z arrays for bucket 4\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 20%\n  bucket 6: 20%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 5: 20%\n  bucket 1: 10%\n  bucket 6: 30%\n  bucket 2: 30%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 6: 40%\n  bucket 7: 10%\n  bucket 5: 30%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 6: 50%\n  bucket 1: 30%\n  bucket 7: 20%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 7: 30%\n  bucket 6: 60%\n  bucket 4: 40%\n  bucket 5: 40%\n  bucket 3: 40%\n  bucket 7: 40%\n  bucket 1: 40%\n  bucket 4: 50%\n  bucket 6: 70%\n  bucket 2: 50%\n  bucket 5: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 1: 50%\n  bucket 2: 60%\n  bucket 7: 50%\n  bucket 1: 60%\n  bucket 5: 60%\n  bucket 4: 70%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 4: 80%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 5: 70%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 3: 60%\n  bucket 7: 70%\n  bucket 4: 90%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 2: 100%\n  bucket 4: 100%\n  bucket 3: 70%\n  Sorting block of length 845 for bucket 2\n  bucket 7: 80%\n  bucket 5: 90%\n  bucket 3: 80%\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 1: 100%\n  bucket 7: 100%\n  Sorting block of length 940 for bucket 1\n  bucket 3: 90%\n  bucket 5: 100%\n  Sorting block of length 739 for bucket 7\n  bucket 3: 100%\n  (Using difference cover)\n  Sorting block of length 923 for bucket 5\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  (Using difference cover)\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7",  "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n",  "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Calculating Z arrays for bucket 2\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 1\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  Entering block accumulator loop for bucket 6:\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 7\n  bucket 6: 10%\n  Calculating Z arrays for bucket 4\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 20%\n  bucket 6: 20%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  bucket 5: 20%\n  bucket 1: 10%\n  bucket 6: 30%\n  bucket 2: 30%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 6: 40%\n  bucket 7: 10%\n  bucket 5: 30%\n  bucket 4: 20%\n  bucket 3: 20%\n  bucket 6: 50%\n  bucket 1: 30%\n  bucket 7: 20%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 4: 30%\n  bucket 7: 30%\n  bucket 6: 60%\n  bucket 4: 40%\n  bucket 5: 40%\n  bucket 3: 40%\n  bucket 7: 40%\n  bucket 1: 40%\n  bucket 4: 50%\n  bucket 6: 70%\n  bucket 2: 50%\n  bucket 5: 50%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 1: 50%\n  bucket 2: 60%\n  bucket 7: 50%\n  bucket 1: 60%\n  bucket 5: 60%\n  bucket 4: 70%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 4: 80%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 5: 70%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 3: 60%\n  bucket 7: 70%\n  bucket 4: 90%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 2: 100%\n  bucket 4: 100%\n  bucket 3: 70%\n  Sorting block of length 845 for bucket 2\n  bucket 7: 80%\n  bucket 5: 90%\n  bucket 3: 80%\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 1: 100%\n  bucket 7: 100%\n  Sorting block of length 940 for bucket 1\n  bucket 3: 90%\n  bucket 5: 100%\n  Sorting block of length 739 for bucket 7\n  bucket 3: 100%\n  (Using difference cover)\n  Sorting block of length 923 for bucket 5\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  (Using difference cover)\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n",  "traceback": null,  "update_time": "2023-05-17T11:24:18.662212",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_rcumr8pq.sam v. /tmp/history_bam_converted_to_sam_xac4stus.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/399/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/3/2/c/dataset_32cf9c47-832f-4167-9251-f9007ed79823.dat\n phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n phiX174_36_572_1:0:0_0:0:0_8\t83\tphiX174\t503\t60\t70M\t=\t36\t-537\tGAGTAACAAAGTTTGGATTGCTACTGACCGCTCTCGTGCTCGTCGCTGCGTTGAGGCTTGCGTTTATGGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n" ], "status": "failure", "test_index": 0, "time_seconds": 60.567078828811646, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7"}
                ]]></error>
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 12 sample suffixesGenerating random suffixesQSorting 12 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 12 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 1, merged 7; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 768.571 (target: 1009)Getting block 1 of 7  Reserving size (1010) for bucket 1Getting block 2 of 7  Reserving size (1010) for bucket 2Getting block 3 of 7  Reserving size (1010) for bucket 3Getting block 5 of 7  Reserving size (1010) for bucket 5  Calculating Z arrays for bucket 2Getting block 6 of 7  Reserving size (1010) for bucket 6  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Calculating Z arrays for bucket 1Getting block 4 of 7  Reserving size (1010) for bucket 4  Entering block accumulator loop for bucket 6:Getting block 7 of 7  Reserving size (1010) for bucket 7  bucket 2: 10%  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 7  bucket 6: 10%  Calculating Z arrays for bucket 4  bucket 5: 10%  Entering block accumulator loop for bucket 7:  bucket 2: 20%  bucket 6: 20%  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 4:  bucket 5: 20%  bucket 1: 10%  bucket 6: 30%  bucket 2: 30%  bucket 4: 10%  bucket 1: 20%  bucket 3: 10%  bucket 6: 40%  bucket 7: 10%  bucket 5: 30%  bucket 4: 20%  bucket 3: 20%  bucket 6: 50%  bucket 1: 30%  bucket 7: 20%  bucket 3: 30%  bucket 2: 40%  bucket 4: 30%  bucket 7: 30%  bucket 6: 60%  bucket 4: 40%  bucket 5: 40%  bucket 3: 40%  bucket 7: 40%  bucket 1: 40%  bucket 4: 50%  bucket 6: 70%  bucket 2: 50%  bucket 5: 50%  bucket 3: 50%  bucket 4: 60%  bucket 1: 50%  bucket 2: 60%  bucket 7: 50%  bucket 1: 60%  bucket 5: 60%  bucket 4: 70%  bucket 6: 80%  bucket 7: 60%  bucket 4: 80%  bucket 2: 70%  bucket 1: 70%  bucket 2: 80%  bucket 1: 80%  bucket 5: 70%  bucket 1: 90%  bucket 2: 90%  bucket 3: 60%  bucket 7: 70%  bucket 4: 90%  bucket 5: 80%  bucket 6: 90%  bucket 2: 100%  bucket 4: 100%  bucket 3: 70%  Sorting block of length 845 for bucket 2  bucket 7: 80%  bucket 5: 90%  bucket 3: 80%  bucket 7: 90%  bucket 6: 100%  Sorting block of length 972 for bucket 4  (Using difference cover)  Sorting block of length 517 for bucket 6  (Using difference cover)  bucket 1: 100%  bucket 7: 100%  Sorting block of length 940 for bucket 1  bucket 3: 90%  bucket 5: 100%  Sorting block of length 739 for bucket 7  bucket 3: 100%  (Using difference cover)  Sorting block of length 923 for bucket 5  Sorting block of length 444 for bucket 3  (Using difference cover)  (Using difference cover)  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 973 for bucket 4Returning block of 518 for bucket 6  Sorting block time: 00:00:00Returning block of 846 for bucket 2  Sorting block time: 00:00:00Returning block of 445 for bucket 3  Sorting block time: 00:00:00Returning block of 941 for bucket 1  Sorting block time: 00:00:00Returning block of 924 for bucket 5  Sorting block time: 00:00:00Returning block of 740 for bucket 7
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 1010 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HierEbwt constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #2)" name="1" time="47.22922134399414">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "library|input_1": {   "id": "a2f9314be41ad773",   "src": "hda"  },  "library|input_2": {   "id": "a89ab907f525a25d",   "src": "hda"  },  "library|type": "paired",  "reference_genome|history_item": {   "id": "d06a2e57ef3eb2d3",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/b/7/3/dataset_b731ac0c-edea-4a92-818a-129f3ed9278b.dat\u0027 genome.fa \u0026\u0026 hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome \u0026\u0026        ln -f -s \u0027/galaxy/server/database/objects/f/a/a/dataset_faac18c5-b7d9-4064-8ad7-4e9538e6b668.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/8/3/4/dataset_834421e2-df62-4c85-ad62-c95728f4eedf.dat\u0027 input_r.fastq \u0026\u0026     hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027genome\u0027    -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027                                | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/e/7/8/dataset_e78559ff-60e6-4a3f-91e4-9c461828e26a.dat\u0027",  "command_version": null,  "create_time": "2023-05-17T11:23:55.464096",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-xnbs5",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "584ab9a35b2beb3f",  "inputs": {   "history_item": {    "id": "d06a2e57ef3eb2d3",    "src": "hda",    "uuid": "b731ac0c-edea-4a92-818a-129f3ed9278b"   },   "input_1": {    "id": "a2f9314be41ad773",    "src": "hda",    "uuid": "faac18c5-b7d9-4064-8ad7-4e9538e6b668"   },   "input_2": {    "id": "a89ab907f525a25d",    "src": "hda",    "uuid": "834421e2-df62-4c85-ad62-c95728f4eedf"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "bf074b001b0d9974",    "src": "hda",    "uuid": "e78559ff-60e6-4a3f-91e4-9c461828e26a"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 505, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 506, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}",   "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 504, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2023-05-17T11:24:15.831012",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7, exit_code: None, stderr: ." ], "status": "failure", "test_index": 1, "time_seconds": 47.22922134399414, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #11)" name="10" time="38.7126202583313">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 12 sample suffixesGenerating random suffixesQSorting 12 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 12 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 1, merged 7; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 768.571 (target: 1009)Getting block 1 of 7  Reserving size (1010) for bucket 1Getting block 2 of 7Getting block 3 of 7  Reserving size (1010) for bucket 3  Calculating Z arrays for bucket 1  Reserving size (1010) for bucket 2Getting block 6 of 7  Reserving size (1010) for bucket 6  Entering block accumulator loop for bucket 1:Getting block 4 of 7  Reserving size (1010) for bucket 4  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 2  bucket 1: 10%Getting block 5 of 7  Entering block accumulator loop for bucket 2:  bucket 1: 20%  Entering block accumulator loop for bucket 4:Getting block 7 of 7  Reserving size (1010) for bucket 7  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 3:  bucket 2: 10%  Reserving size (1010) for bucket 5  Entering block accumulator loop for bucket 6:  Calculating Z arrays for bucket 7  bucket 1: 30%  bucket 6: 10%  Calculating Z arrays for bucket 5  bucket 2: 20%  bucket 1: 40%  bucket 3: 10%  bucket 2: 30%  bucket 1: 50%  bucket 6: 20%  bucket 4: 10%  Entering block accumulator loop for bucket 5:  bucket 1: 60%  bucket 2: 40%  Entering block accumulator loop for bucket 7:  bucket 3: 20%  bucket 6: 30%  bucket 1: 70%  bucket 4: 20%  bucket 7: 10%  bucket 2: 50%  bucket 5: 10%  bucket 1: 80%  bucket 6: 40%  bucket 3: 30%  bucket 1: 90%  bucket 4: 30%  bucket 2: 60%  bucket 7: 20%  bucket 6: 50%  bucket 1: 100%  Sorting block of length 940 for bucket 1  (Using difference cover)  bucket 7: 30%  bucket 2: 70%  bucket 3: 40%  bucket 6: 60%  bucket 2: 80%  bucket 5: 20%  bucket 4: 40%  bucket 7: 40%  bucket 3: 50%  bucket 6: 70%  bucket 2: 90%  bucket 7: 50%  bucket 4: 50%  bucket 5: 30%  bucket 7: 60%  bucket 3: 60%  bucket 2: 100%  bucket 6: 80%  bucket 7: 70%  Sorting block of length 845 for bucket 2  (Using difference cover)  bucket 4: 60%  bucket 7: 80%  bucket 3: 70%  bucket 6: 90%  bucket 5: 40%  bucket 4: 70%  bucket 7: 90%  bucket 3: 80%  bucket 6: 100%  Sorting block of length 517 for bucket 6  bucket 5: 50%  (Using difference cover)  bucket 7: 100%  bucket 4: 80%  Sorting block of length 739 for bucket 7  (Using difference cover)  bucket 3: 90%  bucket 5: 60%  bucket 4: 90%  bucket 3: 100%  bucket 5: 70%  bucket 4: 100%  Sorting block of length 444 for bucket 3  Sorting block of length 972 for bucket 4  (Using difference cover)  (Using difference cover)  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 923 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 941 for bucket 1  Sorting block time: 00:00:00Returning block of 924 for bucket 5  Sorting block time: 00:00:00Returning block of 846 for bucket 2  Sorting block time: 00:00:00Returning block of 740 for bucket 7  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 445 for bucket 3Returning block of 518 for bucket 6  Sorting block time: 00:00:00Returning block of 973 for bucket 4
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 1010 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HierEbwt constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00HISAT2 summary stats:Total reads: 10Aligned 0 time: 0 (0.00%)Aligned 1 time: 10 (100.00%)Aligned >1 times: 0 (0.00%)Overall alignment rate: 100.00%
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #12)" name="11" time="38.574188470840454">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "library|input_1": {   "id": "36cc3edbe7faff7e",   "src": "hda"  },  "library|type": "paired_interleaved",  "reference_genome|history_item": {   "id": "827db461b3f83a79",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/6/a/2/dataset_6a2ceaf5-0a40-4528-a765-3363e031f278.dat\u0027 genome.fa \u0026\u0026 hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome \u0026\u0026        ln -f -s \u0027/galaxy/server/database/objects/a/a/b/dataset_aabfc386-6e61-4f04-b06a-3f085f100193.dat\u0027 input_f.fastq \u0026\u0026    hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027genome\u0027    -1 \u003c(seqtk seq -1 input_f.fastq) -2 \u003c(seqtk seq -2 input_f.fastq)                                | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/3/7/8/dataset_378857f4-3ce8-4c25-988b-8e13d3ddfdba.dat\u0027",  "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2023-05-17T11:29:05.289252",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-c9t8t",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "044bee3413493aac",  "inputs": {   "history_item": {    "id": "827db461b3f83a79",    "src": "hda",    "uuid": "6a2ceaf5-0a40-4528-a765-3363e031f278"   },   "input_1": {    "id": "36cc3edbe7faff7e",    "src": "hda",    "uuid": "aabfc386-6e61-4f04-b06a-3f085f100193"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1684322949.0000000",    "title": "Job End Time",    "value": "2023-05-17 11:29:09"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1684322949.0000000",    "title": "Job Start Time",    "value": "2023-05-17 11:29:09"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "21474.0000000",    "title": "Memory Allocated (MB)",    "value": "21474"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "8.0000000",    "title": "Cores Allocated",    "value": "8"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "b891f27452c879c4",    "src": "hda",    "uuid": "378857f4-3ce8-4c25-988b-8e13d3ddfdba"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 546, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}",   "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 545, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "ok",  "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n",  "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  Calculating Z arrays for bucket 2\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 50%\n  bucket 2: 10%\n  bucket 1: 60%\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  bucket 2: 20%\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 2: 40%\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\n  bucket 1: 80%\n  Calculating Z arrays for bucket 4\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 6\nGetting block 7 of 7\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 50%\n  Reserving size (1010) for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 60%\n  bucket 3: 20%\n  bucket 6: 10%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 1: 100%\n  bucket 6: 20%\n  Calculating Z arrays for bucket 7\n  bucket 4: 30%\n  bucket 6: 30%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 80%\n  bucket 3: 40%\n  bucket 6: 40%\n  Calculating Z arrays for bucket 5\n  bucket 3: 50%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 7: 10%\n  bucket 6: 50%\n  bucket 2: 90%\n  bucket 4: 40%\n  bucket 3: 60%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 60%\n  bucket 2: 100%\n  Sorting block of length 845 for bucket 2\n  bucket 4: 50%\n  bucket 5: 10%\n  bucket 3: 70%\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 5: 20%\n  bucket 3: 80%\n  bucket 6: 70%\n  bucket 7: 20%\n  bucket 5: 30%\n  bucket 6: 80%\n  bucket 3: 90%\n  bucket 7: 30%\n  bucket 4: 70%\n  bucket 7: 40%\n  bucket 6: 90%\n  bucket 5: 40%\n  bucket 3: 100%\n  Sorting block time: 00:00:00\n  bucket 6: 100%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\nReturning block of 941 for bucket 1\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 5: 50%\nReturning block of 846 for bucket 2\n  bucket 7: 50%\n  bucket 4: 90%\n  bucket 7: 60%\n  bucket 5: 60%\n  bucket 4: 100%\n  bucket 7: 70%\n  Sorting block of length 972 for bucket 4\n  bucket 5: 70%\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7",  "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n",  "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  Calculating Z arrays for bucket 2\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 50%\n  bucket 2: 10%\n  bucket 1: 60%\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  bucket 2: 20%\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 2: 40%\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\n  bucket 1: 80%\n  Calculating Z arrays for bucket 4\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 6\nGetting block 7 of 7\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 50%\n  Reserving size (1010) for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 2: 60%\n  bucket 3: 20%\n  bucket 6: 10%\n  bucket 1: 90%\n  bucket 2: 70%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 1: 100%\n  bucket 6: 20%\n  Calculating Z arrays for bucket 7\n  bucket 4: 30%\n  bucket 6: 30%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 80%\n  bucket 3: 40%\n  bucket 6: 40%\n  Calculating Z arrays for bucket 5\n  bucket 3: 50%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 7: 10%\n  bucket 6: 50%\n  bucket 2: 90%\n  bucket 4: 40%\n  bucket 3: 60%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 60%\n  bucket 2: 100%\n  Sorting block of length 845 for bucket 2\n  bucket 4: 50%\n  bucket 5: 10%\n  bucket 3: 70%\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 5: 20%\n  bucket 3: 80%\n  bucket 6: 70%\n  bucket 7: 20%\n  bucket 5: 30%\n  bucket 6: 80%\n  bucket 3: 90%\n  bucket 7: 30%\n  bucket 4: 70%\n  bucket 7: 40%\n  bucket 6: 90%\n  bucket 5: 40%\n  bucket 3: 100%\n  Sorting block time: 00:00:00\n  bucket 6: 100%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\nReturning block of 941 for bucket 1\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 5: 50%\nReturning block of 846 for bucket 2\n  bucket 7: 50%\n  bucket 4: 90%\n  bucket 7: 60%\n  bucket 5: 60%\n  bucket 4: 100%\n  bucket 7: 70%\n  Sorting block of length 972 for bucket 4\n  bucket 5: 70%\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n",  "traceback": null,  "update_time": "2023-05-17T11:29:20.214389",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_as5ujc5v.sam v. /tmp/history_bam_converted_to_sam_0hkfqyvs.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome -1 /dev/fd/63 -2 /dev/fd/62\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/435/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/3/7/8/dataset_378857f4-3ce8-4c25-988b-8e13d3ddfdba.dat\n phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n phiX174_36_572_1:0:0_0:0:0_8\t83\tphiX174\t503\t60\t70M\t=\t36\t-537\tGAGTAACAAAGTTTGGATTGCTACTGACCGCTCTCGTGCTCGTCGCTGCGTTGAGGCTTGCGTTTATGGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n" ], "status": "failure", "test_index": 11, "time_seconds": 38.574188470840454, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7"}
                ]]></error>
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 12 sample suffixesGenerating random suffixesQSorting 12 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 12 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 1, merged 7; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 768.571 (target: 1009)Getting block 1 of 7  Reserving size (1010) for bucket 1  Calculating Z arrays for bucket 1  Entering block accumulator loop for bucket 1:  bucket 1: 10%  bucket 1: 20%  bucket 1: 30%Getting block 2 of 7  Reserving size (1010) for bucket 2  Calculating Z arrays for bucket 2  bucket 1: 40%  Entering block accumulator loop for bucket 2:  bucket 1: 50%  bucket 2: 10%  bucket 1: 60%Getting block 5 of 7  Reserving size (1010) for bucket 5  bucket 2: 20%Getting block 4 of 7  Reserving size (1010) for bucket 4  bucket 2: 30%  bucket 1: 70%  bucket 2: 40%Getting block 3 of 7  Reserving size (1010) for bucket 3  bucket 1: 80%  Calculating Z arrays for bucket 4Getting block 6 of 7  Reserving size (1010) for bucket 6  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 4:  Calculating Z arrays for bucket 6Getting block 7 of 7  Entering block accumulator loop for bucket 3:  bucket 2: 50%  Reserving size (1010) for bucket 7  Entering block accumulator loop for bucket 6:  bucket 3: 10%  bucket 4: 10%  bucket 2: 60%  bucket 3: 20%  bucket 6: 10%  bucket 1: 90%  bucket 2: 70%  bucket 3: 30%  bucket 4: 20%  bucket 1: 100%  bucket 6: 20%  Calculating Z arrays for bucket 7  bucket 4: 30%  bucket 6: 30%  Entering block accumulator loop for bucket 7:  bucket 2: 80%  bucket 3: 40%  bucket 6: 40%  Calculating Z arrays for bucket 5  bucket 3: 50%  Sorting block of length 940 for bucket 1  (Using difference cover)  bucket 7: 10%  bucket 6: 50%  bucket 2: 90%  bucket 4: 40%  bucket 3: 60%  Entering block accumulator loop for bucket 5:  bucket 6: 60%  bucket 2: 100%  Sorting block of length 845 for bucket 2  bucket 4: 50%  bucket 5: 10%  bucket 3: 70%  (Using difference cover)  bucket 4: 60%  bucket 5: 20%  bucket 3: 80%  bucket 6: 70%  bucket 7: 20%  bucket 5: 30%  bucket 6: 80%  bucket 3: 90%  bucket 7: 30%  bucket 4: 70%  bucket 7: 40%  bucket 6: 90%  bucket 5: 40%  bucket 3: 100%  Sorting block time: 00:00:00  bucket 6: 100%  Sorting block of length 444 for bucket 3  (Using difference cover)  bucket 4: 80%Returning block of 941 for bucket 1  Sorting block of length 517 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00  bucket 5: 50%Returning block of 846 for bucket 2  bucket 7: 50%  bucket 4: 90%  bucket 7: 60%  bucket 5: 60%  bucket 4: 100%  bucket 7: 70%  Sorting block of length 972 for bucket 4  bucket 5: 70%  (Using difference cover)  bucket 7: 80%  bucket 7: 90%  bucket 5: 80%  bucket 5: 90%  bucket 7: 100%  Sorting block of length 739 for bucket 7  (Using difference cover)  bucket 5: 100%  Sorting block of length 923 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 518 for bucket 6  Sorting block time: 00:00:00Returning block of 445 for bucket 3  Sorting block time: 00:00:00Returning block of 740 for bucket 7  Sorting block time: 00:00:00Returning block of 924 for bucket 5  Sorting block time: 00:00:00Returning block of 973 for bucket 4
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 1010 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HierEbwt constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #13)" name="12" time="40.10374617576599">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "library|input_1": {   "id": "47f7d899e420a67f",   "src": "hda"  },  "library|type": "paired_interleaved",  "reference_genome|history_item": {   "id": "0c33942335e654c7",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/d/1/f/dataset_d1f7a945-77e9-4e38-96be-32616d9fe11f.dat\u0027 genome.fa \u0026\u0026 hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome \u0026\u0026        ln -f -s \u0027/galaxy/server/database/objects/2/8/c/dataset_28c4049e-ba2f-446c-974c-83f815d3bbac.dat\u0027 input_f.fastq.bz2 \u0026\u0026    hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027genome\u0027    -1 \u003c(bzcat input_f.fastq.bz2 | seqtk seq -1 /dev/stdin) -2 \u003c(bzcat input_f.fastq.bz2 | seqtk seq -2 /dev/stdin)                                | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/9/e/f/dataset_9ef958a3-d929-4599-bff8-66733ddc830c.dat\u0027",  "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2023-05-17T11:29:41.592060",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-r4njk",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "d8d4fbde941e5ff5",  "inputs": {   "history_item": {    "id": "0c33942335e654c7",    "src": "hda",    "uuid": "d1f7a945-77e9-4e38-96be-32616d9fe11f"   },   "input_1": {    "id": "47f7d899e420a67f",    "src": "hda",    "uuid": "28c4049e-ba2f-446c-974c-83f815d3bbac"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1684322987.0000000",    "title": "Job End Time",    "value": "2023-05-17 11:29:47"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1684322986.0000000",    "title": "Job Start Time",    "value": "2023-05-17 11:29:46"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "21474.0000000",    "title": "Memory Allocated (MB)",    "value": "21474"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "8.0000000",    "title": "Cores Allocated",    "value": "8"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "b28e56aaa469562f",    "src": "hda",    "uuid": "9ef958a3-d929-4599-bff8-66733ddc830c"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 551, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}",   "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 552, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "ok",  "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n",  "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 1:\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  bucket 1: 10%\n  Calculating Z arrays for bucket 6\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  bucket 3: 10%\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 20%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 30%\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 3: 40%\n  bucket 1: 40%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 3: 50%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 3: 60%\n  bucket 6: 30%\n  bucket 1: 60%\n  bucket 5: 20%\n  bucket 7: 20%\n  bucket 2: 30%\n  bucket 3: 70%\n  bucket 1: 70%\n  bucket 4: 20%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 5: 30%\n  bucket 1: 80%\n  bucket 3: 80%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 3: 90%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 2: 50%\n  bucket 4: 30%\n  bucket 1: 100%\n  bucket 6: 60%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 5: 50%\n  bucket 2: 60%\n  bucket 7: 50%\n  bucket 3: 100%\n  bucket 6: 70%\n  bucket 2: 70%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 2: 80%\n  bucket 4: 40%\n  bucket 7: 70%\n  bucket 6: 90%\n  bucket 5: 70%\n  bucket 2: 90%\n  bucket 4: 50%\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 2: 100%\n  bucket 5: 80%\n  Sorting block of length 845 for bucket 2\n  bucket 4: 60%\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 7: 90%\n  bucket 5: 100%\n  bucket 4: 70%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\nReturning block of 924 for bucket 5\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7",  "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n",  "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 1:\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  bucket 1: 10%\n  Calculating Z arrays for bucket 6\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  bucket 3: 10%\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 20%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 30%\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 10%\n  bucket 3: 40%\n  bucket 1: 40%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 3: 50%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 3: 60%\n  bucket 6: 30%\n  bucket 1: 60%\n  bucket 5: 20%\n  bucket 7: 20%\n  bucket 2: 30%\n  bucket 3: 70%\n  bucket 1: 70%\n  bucket 4: 20%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 5: 30%\n  bucket 1: 80%\n  bucket 3: 80%\n  bucket 2: 40%\n  bucket 1: 90%\n  bucket 3: 90%\n  bucket 5: 40%\n  bucket 6: 50%\n  bucket 7: 40%\n  bucket 2: 50%\n  bucket 4: 30%\n  bucket 1: 100%\n  bucket 6: 60%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 5: 50%\n  bucket 2: 60%\n  bucket 7: 50%\n  bucket 3: 100%\n  bucket 6: 70%\n  bucket 2: 70%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 2: 80%\n  bucket 4: 40%\n  bucket 7: 70%\n  bucket 6: 90%\n  bucket 5: 70%\n  bucket 2: 90%\n  bucket 4: 50%\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 2: 100%\n  bucket 5: 80%\n  Sorting block of length 845 for bucket 2\n  bucket 4: 60%\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 7: 90%\n  bucket 5: 100%\n  bucket 4: 70%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\nReturning block of 924 for bucket 5\n",  "traceback": null,  "update_time": "2023-05-17T11:29:57.145598",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_7ppunlfl.sam v. /tmp/history_bam_converted_to_sam_916u4_ru.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome -1 /dev/fd/63 -2 /dev/fd/62\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/440/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/9/e/f/dataset_9ef958a3-d929-4599-bff8-66733ddc830c.dat\n phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n phiX174_36_572_1:0:0_0:0:0_8\t83\tphiX174\t503\t60\t70M\t=\t36\t-537\tGAGTAACAAAGTTTGGATTGCTACTGACCGCTCTCGTGCTCGTCGCTGCGTTGAGGCTTGCGTTTATGGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n" ], "status": "failure", "test_index": 12, "time_seconds": 40.10374617576599, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7"}
                ]]></error>
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 12 sample suffixesGenerating random suffixesQSorting 12 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 12 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 1, merged 7; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 768.571 (target: 1009)Getting block 1 of 7  Reserving size (1010) for bucket 1  Calculating Z arrays for bucket 1Getting block 3 of 7  Reserving size (1010) for bucket 3Getting block 2 of 7  Reserving size (1010) for bucket 2  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 2Getting block 7 of 7  Reserving size (1010) for bucket 7  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 1:Getting block 6 of 7  Reserving size (1010) for bucket 6  bucket 1: 10%  Calculating Z arrays for bucket 6Getting block 5 of 7  Reserving size (1010) for bucket 5Getting block 4 of 7  Reserving size (1010) for bucket 4  bucket 3: 10%  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 6:  bucket 3: 20%  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 2:  bucket 1: 20%  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 5:  bucket 3: 30%  bucket 6: 10%  Entering block accumulator loop for bucket 7:  bucket 1: 30%  Entering block accumulator loop for bucket 4:  bucket 2: 10%  bucket 3: 40%  bucket 1: 40%  bucket 5: 10%  bucket 6: 20%  bucket 7: 10%  bucket 3: 50%  bucket 2: 20%  bucket 4: 10%  bucket 1: 50%  bucket 3: 60%  bucket 6: 30%  bucket 1: 60%  bucket 5: 20%  bucket 7: 20%  bucket 2: 30%  bucket 3: 70%  bucket 1: 70%  bucket 4: 20%  bucket 6: 40%  bucket 7: 30%  bucket 5: 30%  bucket 1: 80%  bucket 3: 80%  bucket 2: 40%  bucket 1: 90%  bucket 3: 90%  bucket 5: 40%  bucket 6: 50%  bucket 7: 40%  bucket 2: 50%  bucket 4: 30%  bucket 1: 100%  bucket 6: 60%  Sorting block of length 940 for bucket 1  (Using difference cover)  bucket 5: 50%  bucket 2: 60%  bucket 7: 50%  bucket 3: 100%  bucket 6: 70%  bucket 2: 70%  Sorting block of length 444 for bucket 3  (Using difference cover)  bucket 5: 60%  bucket 6: 80%  bucket 7: 60%  bucket 2: 80%  bucket 4: 40%  bucket 7: 70%  bucket 6: 90%  bucket 5: 70%  bucket 2: 90%  bucket 4: 50%  bucket 6: 100%  Sorting block of length 517 for bucket 6  (Using difference cover)  bucket 7: 80%  bucket 2: 100%  bucket 5: 80%  Sorting block of length 845 for bucket 2  bucket 4: 60%  (Using difference cover)  bucket 5: 90%  bucket 7: 90%  bucket 5: 100%  bucket 4: 70%  Sorting block of length 923 for bucket 5  (Using difference cover)  bucket 7: 100%  Sorting block of length 739 for bucket 7  (Using difference cover)  bucket 4: 80%  bucket 4: 90%  bucket 4: 100%  Sorting block of length 972 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 941 for bucket 1  Sorting block time: 00:00:00Returning block of 518 for bucket 6  Sorting block time: 00:00:00Returning block of 445 for bucket 3  Sorting block time: 00:00:00Returning block of 740 for bucket 7  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 846 for bucket 2  Sorting block time: 00:00:00Returning block of 973 for bucket 4Returning block of 924 for bucket 5
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 1010 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HierEbwt constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #14)" name="13" time="41.11449074745178">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "library|input_1": {   "id": "79581cecb60b0509",   "src": "hda"  },  "library|type": "paired_interleaved",  "reference_genome|history_item": {   "id": "0c33942335e654c7",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/d/1/f/dataset_d1f7a945-77e9-4e38-96be-32616d9fe11f.dat\u0027 genome.fa \u0026\u0026 hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome \u0026\u0026        ln -f -s \u0027/galaxy/server/database/objects/4/a/7/dataset_4a7cf1dd-2b7a-4e09-a4e4-117289a7164e.dat\u0027 input_f.fastq.gz \u0026\u0026    hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027genome\u0027    -1 \u003c(seqtk seq -1 input_f.fastq.gz) -2 \u003c(seqtk seq -2 input_f.fastq.gz)                                | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/9/e/3/dataset_9e37dfc0-1560-4cde-a3e4-7db470eeb13f.dat\u0027",  "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2023-05-17T11:29:45.626202",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-th89f",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "8a95d337788072b3",  "inputs": {   "history_item": {    "id": "0c33942335e654c7",    "src": "hda",    "uuid": "d1f7a945-77e9-4e38-96be-32616d9fe11f"   },   "input_1": {    "id": "79581cecb60b0509",    "src": "hda",    "uuid": "4a7cf1dd-2b7a-4e09-a4e4-117289a7164e"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1684322991.0000000",    "title": "Job End Time",    "value": "2023-05-17 11:29:51"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1684322990.0000000",    "title": "Job Start Time",    "value": "2023-05-17 11:29:50"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "21474.0000000",    "title": "Memory Allocated (MB)",    "value": "21474"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "8.0000000",    "title": "Cores Allocated",    "value": "8"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "9da34851ea4af61a",    "src": "hda",    "uuid": "9e37dfc0-1560-4cde-a3e4-7db470eeb13f"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 553, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}",   "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 552, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "ok",  "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n",  "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 4 of 7\nGetting block 3 of 7\n  Reserving size (1010) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 1\nGetting block 7 of 7\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Reserving size (1010) for bucket 3\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 3\n  Reserving size (1010) for bucket 7\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 7\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 1: 20%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 10%\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 7: 10%\n  bucket 4: 10%\n  bucket 1: 40%\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  bucket 5: 20%\n  bucket 3: 40%\n  bucket 7: 20%\n  Calculating Z arrays for bucket 6\n  bucket 1: 50%\n  bucket 5: 30%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 7: 30%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 5: 40%\n  Entering block accumulator loop for bucket 6:\n  bucket 7: 40%\n  bucket 1: 80%\n  bucket 3: 70%\n  bucket 5: 50%\n  bucket 1: 90%\n  bucket 7: 50%\n  bucket 6: 10%\n  bucket 3: 80%\n  bucket 5: 60%\n  bucket 1: 100%\n  bucket 7: 60%\n  bucket 4: 20%\n  bucket 6: 20%\n  bucket 7: 70%\n  bucket 3: 90%\n  bucket 2: 30%\n  bucket 5: 70%\n  bucket 6: 30%\n  bucket 3: 100%\n  bucket 2: 40%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 4: 30%\n  bucket 6: 40%\n  bucket 5: 80%\n  bucket 2: 50%\n  bucket 7: 90%\n  bucket 4: 40%\n  bucket 6: 50%\n  bucket 2: 60%\n  bucket 5: 90%\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 4: 50%\n  bucket 6: 60%\n  bucket 5: 100%\n  bucket 2: 70%\n  bucket 4: 60%\n  Sorting block of length 923 for bucket 5\n  bucket 2: 80%\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 6: 80%\n  bucket 4: 80%\n  bucket 2: 100%\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7",  "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n",  "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 4 of 7\nGetting block 3 of 7\n  Reserving size (1010) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 1\nGetting block 7 of 7\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Reserving size (1010) for bucket 3\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 3\n  Reserving size (1010) for bucket 7\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 7\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 1: 20%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 10%\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 7: 10%\n  bucket 4: 10%\n  bucket 1: 40%\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  bucket 5: 20%\n  bucket 3: 40%\n  bucket 7: 20%\n  Calculating Z arrays for bucket 6\n  bucket 1: 50%\n  bucket 5: 30%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 7: 30%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 5: 40%\n  Entering block accumulator loop for bucket 6:\n  bucket 7: 40%\n  bucket 1: 80%\n  bucket 3: 70%\n  bucket 5: 50%\n  bucket 1: 90%\n  bucket 7: 50%\n  bucket 6: 10%\n  bucket 3: 80%\n  bucket 5: 60%\n  bucket 1: 100%\n  bucket 7: 60%\n  bucket 4: 20%\n  bucket 6: 20%\n  bucket 7: 70%\n  bucket 3: 90%\n  bucket 2: 30%\n  bucket 5: 70%\n  bucket 6: 30%\n  bucket 3: 100%\n  bucket 2: 40%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 4: 30%\n  bucket 6: 40%\n  bucket 5: 80%\n  bucket 2: 50%\n  bucket 7: 90%\n  bucket 4: 40%\n  bucket 6: 50%\n  bucket 2: 60%\n  bucket 5: 90%\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 4: 50%\n  bucket 6: 60%\n  bucket 5: 100%\n  bucket 2: 70%\n  bucket 4: 60%\n  Sorting block of length 923 for bucket 5\n  bucket 2: 80%\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 6: 80%\n  bucket 4: 80%\n  bucket 2: 100%\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n",  "traceback": null,  "update_time": "2023-05-17T11:30:01.510387",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_h8u5arsp.sam v. /tmp/history_bam_converted_to_sam_52pdydy9.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome -1 /dev/fd/63 -2 /dev/fd/62\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/441/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/9/e/3/dataset_9e37dfc0-1560-4cde-a3e4-7db470eeb13f.dat\n phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n phiX174_36_572_1:0:0_0:0:0_8\t83\tphiX174\t503\t60\t70M\t=\t36\t-537\tGAGTAACAAAGTTTGGATTGCTACTGACCGCTCTCGTGCTCGTCGCTGCGTTGAGGCTTGCGTTTATGGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n" ], "status": "failure", "test_index": 13, "time_seconds": 41.11449074745178, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7"}
                ]]></error>
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 12 sample suffixesGenerating random suffixesQSorting 12 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 12 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 1, merged 7; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 768.571 (target: 1009)Getting block 1 of 7  Reserving size (1010) for bucket 1Getting block 2 of 7  Reserving size (1010) for bucket 2Getting block 4 of 7Getting block 3 of 7  Reserving size (1010) for bucket 4  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 1Getting block 7 of 7Getting block 5 of 7  Reserving size (1010) for bucket 5  Reserving size (1010) for bucket 3  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 3  Reserving size (1010) for bucket 7  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 3:  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 3: 10%  Entering block accumulator loop for bucket 5:  Calculating Z arrays for bucket 7  bucket 2: 10%  Entering block accumulator loop for bucket 4:  bucket 3: 20%  bucket 1: 20%  bucket 2: 20%  Entering block accumulator loop for bucket 7:  bucket 5: 10%  bucket 1: 30%  bucket 3: 30%  bucket 7: 10%  bucket 4: 10%  bucket 1: 40%Getting block 6 of 7  Reserving size (1010) for bucket 6  bucket 5: 20%  bucket 3: 40%  bucket 7: 20%  Calculating Z arrays for bucket 6  bucket 1: 50%  bucket 5: 30%  bucket 3: 50%  bucket 1: 60%  bucket 7: 30%  bucket 1: 70%  bucket 3: 60%  bucket 5: 40%  Entering block accumulator loop for bucket 6:  bucket 7: 40%  bucket 1: 80%  bucket 3: 70%  bucket 5: 50%  bucket 1: 90%  bucket 7: 50%  bucket 6: 10%  bucket 3: 80%  bucket 5: 60%  bucket 1: 100%  bucket 7: 60%  bucket 4: 20%  bucket 6: 20%  bucket 7: 70%  bucket 3: 90%  bucket 2: 30%  bucket 5: 70%  bucket 6: 30%  bucket 3: 100%  bucket 2: 40%  Sorting block of length 444 for bucket 3  (Using difference cover)  Sorting block of length 940 for bucket 1  (Using difference cover)  bucket 7: 80%  bucket 4: 30%  bucket 6: 40%  bucket 5: 80%  bucket 2: 50%  bucket 7: 90%  bucket 4: 40%  bucket 6: 50%  bucket 2: 60%  bucket 5: 90%  bucket 7: 100%  Sorting block of length 739 for bucket 7  (Using difference cover)  bucket 4: 50%  bucket 6: 60%  bucket 5: 100%  bucket 2: 70%  bucket 4: 60%  Sorting block of length 923 for bucket 5  bucket 2: 80%  (Using difference cover)  bucket 6: 70%  bucket 4: 70%  bucket 2: 90%  bucket 6: 80%  bucket 4: 80%  bucket 2: 100%  Sorting block of length 845 for bucket 2  (Using difference cover)  bucket 4: 90%  bucket 4: 100%  Sorting block of length 972 for bucket 4  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 517 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 445 for bucket 3  Sorting block time: 00:00:00Returning block of 740 for bucket 7  Sorting block time: 00:00:00Returning block of 941 for bucket 1  Sorting block time: 00:00:00Returning block of 518 for bucket 6  Sorting block time: 00:00:00Returning block of 846 for bucket 2  Sorting block time: 00:00:00Returning block of 973 for bucket 4  Sorting block time: 00:00:00Returning block of 924 for bucket 5
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 1010 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HierEbwt constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #15)" name="14" time="40.311392307281494">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "library|input_1": {   "id": "9d5ccd357eaf2356",   "src": "hda"  },  "library|type": "paired_interleaved",  "reference_genome|history_item": {   "id": "efe7562ca5b9a8b7",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/e/e/d/dataset_eed4deea-1842-48e5-89ab-620dee7edc5c.dat\u0027 genome.fa \u0026\u0026 hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome \u0026\u0026        ln -f -s \u0027/galaxy/server/database/objects/2/e/8/dataset_2e8235d7-36cd-41aa-8346-a3a79404d596.dat\u0027 input_f.fasta \u0026\u0026    hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027genome\u0027  -f   -1 \u003c(seqtk seq -1 input_f.fasta) -2 \u003c(seqtk seq -2 input_f.fasta)                                | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/c/4/9/dataset_c49a4f56-9965-427b-bda7-40a321012813.dat\u0027",  "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2023-05-17T11:30:21.713018",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-t8bfz",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "6fe25aed70716125",  "inputs": {   "history_item": {    "id": "efe7562ca5b9a8b7",    "src": "hda",    "uuid": "eed4deea-1842-48e5-89ab-620dee7edc5c"   },   "input_1": {    "id": "9d5ccd357eaf2356",    "src": "hda",    "uuid": "2e8235d7-36cd-41aa-8346-a3a79404d596"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1684323027.0000000",    "title": "Job End Time",    "value": "2023-05-17 11:30:27"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1684323026.0000000",    "title": "Job Start Time",    "value": "2023-05-17 11:30:26"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "21474.0000000",    "title": "Memory Allocated (MB)",    "value": "21474"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "8.0000000",    "title": "Cores Allocated",    "value": "8"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "8d02759eea50ea03",    "src": "hda",    "uuid": "c49a4f56-9965-427b-bda7-40a321012813"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 557, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}",   "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 558, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "ok",  "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    3 (30.00%) aligned concordantly 0 times\n    7 (70.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        3 (50.00%) aligned 0 times\n        3 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n85.00% overall alignment rate\n",  "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\n  Calculating Z arrays for bucket 1\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 3:\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  bucket 1: 10%\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  bucket 1: 20%\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Entering block accumulator loop for bucket 4:\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\nGetting block 5 of 7\n  Calculating Z arrays for bucket 6\n  bucket 3: 20%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 30%\n  bucket 3: 30%\n  Reserving size (1010) for bucket 5\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 40%\n  bucket 4: 10%\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 5\n  bucket 1: 40%\n  bucket 7: 20%\n  bucket 3: 50%\n  bucket 7: 30%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 60%\n  bucket 4: 20%\n  bucket 7: 40%\n  bucket 2: 20%\n  bucket 5: 10%\n  bucket 3: 70%\n  bucket 4: 30%\n  bucket 7: 50%\n  bucket 2: 30%\n  bucket 5: 20%\n  bucket 3: 80%\n  bucket 6: 10%\n  bucket 1: 50%\n  bucket 7: 60%\n  bucket 3: 90%\n  bucket 7: 70%\n  bucket 6: 20%\n  bucket 4: 40%\n  bucket 5: 30%\n  bucket 3: 100%\n  bucket 7: 80%\n  bucket 6: 30%\n  bucket 4: 50%\n  bucket 2: 40%\n  bucket 5: 40%\n  bucket 7: 90%\n  Sorting block of length 444 for bucket 3\n  bucket 2: 50%\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 1: 60%\n  bucket 7: 100%\n  bucket 5: 50%\n  Sorting block of length 739 for bucket 7\n  bucket 6: 40%\n  (Using difference cover)\n  bucket 1: 70%\n  bucket 5: 60%\n  bucket 4: 70%\n  bucket 6: 50%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 5: 70%\n  bucket 4: 80%\n  bucket 6: 60%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 5: 80%\n  bucket 4: 90%\n  bucket 6: 70%\n  bucket 2: 80%\n  bucket 1: 100%\n  bucket 5: 90%\n  bucket 4: 100%\n  Sorting block of length 940 for bucket 1\n  bucket 2: 90%\n  bucket 5: 100%\n  bucket 2: 100%\n  Sorting block of length 972 for bucket 4\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block of length 923 for bucket 5\n  bucket 6: 80%\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7",  "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    3 (30.00%) aligned concordantly 0 times\n    7 (70.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        3 (50.00%) aligned 0 times\n        3 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n85.00% overall alignment rate\n",  "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\n  Calculating Z arrays for bucket 1\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 3:\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  bucket 1: 10%\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  bucket 1: 20%\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Entering block accumulator loop for bucket 4:\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\nGetting block 5 of 7\n  Calculating Z arrays for bucket 6\n  bucket 3: 20%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 30%\n  bucket 3: 30%\n  Reserving size (1010) for bucket 5\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 40%\n  bucket 4: 10%\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 5\n  bucket 1: 40%\n  bucket 7: 20%\n  bucket 3: 50%\n  bucket 7: 30%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 60%\n  bucket 4: 20%\n  bucket 7: 40%\n  bucket 2: 20%\n  bucket 5: 10%\n  bucket 3: 70%\n  bucket 4: 30%\n  bucket 7: 50%\n  bucket 2: 30%\n  bucket 5: 20%\n  bucket 3: 80%\n  bucket 6: 10%\n  bucket 1: 50%\n  bucket 7: 60%\n  bucket 3: 90%\n  bucket 7: 70%\n  bucket 6: 20%\n  bucket 4: 40%\n  bucket 5: 30%\n  bucket 3: 100%\n  bucket 7: 80%\n  bucket 6: 30%\n  bucket 4: 50%\n  bucket 2: 40%\n  bucket 5: 40%\n  bucket 7: 90%\n  Sorting block of length 444 for bucket 3\n  bucket 2: 50%\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 1: 60%\n  bucket 7: 100%\n  bucket 5: 50%\n  Sorting block of length 739 for bucket 7\n  bucket 6: 40%\n  (Using difference cover)\n  bucket 1: 70%\n  bucket 5: 60%\n  bucket 4: 70%\n  bucket 6: 50%\n  bucket 2: 60%\n  bucket 1: 80%\n  bucket 5: 70%\n  bucket 4: 80%\n  bucket 6: 60%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 5: 80%\n  bucket 4: 90%\n  bucket 6: 70%\n  bucket 2: 80%\n  bucket 1: 100%\n  bucket 5: 90%\n  bucket 4: 100%\n  Sorting block of length 940 for bucket 1\n  bucket 2: 90%\n  bucket 5: 100%\n  bucket 2: 100%\n  Sorting block of length 972 for bucket 4\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block of length 923 for bucket 5\n  bucket 6: 80%\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n",  "traceback": null,  "update_time": "2023-05-17T11:30:37.873679",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam__21l9gem.sam v. /tmp/history_bam_converted_to_sam_dxnzm4pn.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tCL:\"/usr/local/bin/../Cellar/hisat2/2.0.5/bin/hisat2-align-s --wrapper basic-0 -x genome -f -1 /dev/fd/63 -2 /dev/fd/62\"\tVN:2.0.5\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome -f -1 /dev/fd/63 -2 /dev/fd/62\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/446/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/c/4/9/dataset_c49a4f56-9965-427b-bda7-40a321012813.dat\n phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-6\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-6\tYT:Z:CP\tNH:i:1\n phiX174_36_572_1:0:0_0:0:0_8\t83\tphiX174\t503\t60\t70M\t=\t36\t-537\tGAGTAACAAAGTTTGGATTGCTACTGACCGCTCTCGTGCTCGTCGCTGCGTTGAGGCTTGCGTTTATGGT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-6\tYT:Z:CP\tNH:i:1\n" ], "status": "failure", "test_index": 14, "time_seconds": 40.311392307281494, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7"}
                ]]></error>
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 12 sample suffixesGenerating random suffixesQSorting 12 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 12 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 1, merged 7; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 768.571 (target: 1009)Getting block 1 of 7  Reserving size (1010) for bucket 1Getting block 3 of 7  Reserving size (1010) for bucket 3  Calculating Z arrays for bucket 1Getting block 4 of 7  Reserving size (1010) for bucket 4  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 3:Getting block 2 of 7  Reserving size (1010) for bucket 2  bucket 1: 10%  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 4  bucket 3: 10%  bucket 1: 20%Getting block 6 of 7  Reserving size (1010) for bucket 6  Entering block accumulator loop for bucket 4:Getting block 7 of 7  Reserving size (1010) for bucket 7Getting block 5 of 7  Calculating Z arrays for bucket 6  bucket 3: 20%  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 6:  bucket 1: 30%  bucket 3: 30%  Reserving size (1010) for bucket 5  Entering block accumulator loop for bucket 7:  bucket 3: 40%  bucket 4: 10%  bucket 7: 10%  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 5  bucket 1: 40%  bucket 7: 20%  bucket 3: 50%  bucket 7: 30%  bucket 2: 10%  Entering block accumulator loop for bucket 5:  bucket 3: 60%  bucket 4: 20%  bucket 7: 40%  bucket 2: 20%  bucket 5: 10%  bucket 3: 70%  bucket 4: 30%  bucket 7: 50%  bucket 2: 30%  bucket 5: 20%  bucket 3: 80%  bucket 6: 10%  bucket 1: 50%  bucket 7: 60%  bucket 3: 90%  bucket 7: 70%  bucket 6: 20%  bucket 4: 40%  bucket 5: 30%  bucket 3: 100%  bucket 7: 80%  bucket 6: 30%  bucket 4: 50%  bucket 2: 40%  bucket 5: 40%  bucket 7: 90%  Sorting block of length 444 for bucket 3  bucket 2: 50%  (Using difference cover)  bucket 4: 60%  bucket 1: 60%  bucket 7: 100%  bucket 5: 50%  Sorting block of length 739 for bucket 7  bucket 6: 40%  (Using difference cover)  bucket 1: 70%  bucket 5: 60%  bucket 4: 70%  bucket 6: 50%  bucket 2: 60%  bucket 1: 80%  bucket 5: 70%  bucket 4: 80%  bucket 6: 60%  bucket 2: 70%  bucket 1: 90%  bucket 5: 80%  bucket 4: 90%  bucket 6: 70%  bucket 2: 80%  bucket 1: 100%  bucket 5: 90%  bucket 4: 100%  Sorting block of length 940 for bucket 1  bucket 2: 90%  bucket 5: 100%  bucket 2: 100%  Sorting block of length 972 for bucket 4  Sorting block of length 845 for bucket 2  (Using difference cover)  (Using difference cover)  Sorting block of length 923 for bucket 5  bucket 6: 80%  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 517 for bucket 6  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 740 for bucket 7  Sorting block time: 00:00:00Returning block of 445 for bucket 3  Sorting block time: 00:00:00Returning block of 941 for bucket 1  Sorting block time: 00:00:00Returning block of 518 for bucket 6  Sorting block time: 00:00:00Returning block of 973 for bucket 4  Sorting block time: 00:00:00Returning block of 924 for bucket 5  Sorting block time: 00:00:00Returning block of 846 for bucket 2
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 1010 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HierEbwt constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    3 (30.00%) aligned concordantly 0 times    7 (70.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    3 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    3 pairs aligned 0 times concordantly or discordantly; of these:      6 mates make up the pairs; of these:        3 (50.00%) aligned 0 times        3 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times85.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #16)" name="15" time="40.07591676712036">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adv|spliced_options|novel_splicesite_outfile": true,  "adv|spliced_options|spliced_options_selector": "advanced",  "library|input_1": {   "id": "5c20efb3950a3a41",   "src": "hda"  },  "library|rna_strandness": "R",  "library|type": "single",  "reference_genome|history_item": {   "id": "efe7562ca5b9a8b7",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/e/e/d/dataset_eed4deea-1842-48e5-89ab-620dee7edc5c.dat\u0027 genome.fa \u0026\u0026 hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome \u0026\u0026        ln -f -s \u0027/galaxy/server/database/objects/0/7/d/dataset_07d7d321-e284-40f5-85b2-996618d88612.dat\u0027 input_f.fastq \u0026\u0026    hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027genome\u0027     -U \u0027input_f.fastq\u0027      --rna-strandness R             --pen-cansplice 0 --pen-noncansplice 12 --pen-canintronlen G,-8.0,1.0 --pen-noncanintronlen G,-8.0,1.0  --min-intronlen 20 --max-intronlen 500000   --novel-splicesite-outfile \u0027/galaxy/server/database/objects/4/c/3/dataset_4c3bd83e-f4ce-4b40-890c-1b4ad7487cdc.dat\u0027                | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/2/1/a/dataset_21a44e40-fe85-430d-8181-498f5938c2d0.dat\u0027",  "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2023-05-17T11:30:26.341560",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-njszc",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "343813814641f91a",  "inputs": {   "history_item": {    "id": "efe7562ca5b9a8b7",    "src": "hda",    "uuid": "eed4deea-1842-48e5-89ab-620dee7edc5c"   },   "input_1": {    "id": "5c20efb3950a3a41",    "src": "hda",    "uuid": "07d7d321-e284-40f5-85b2-996618d88612"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1684323031.0000000",    "title": "Job End Time",    "value": "2023-05-17 11:30:31"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1684323030.0000000",    "title": "Job Start Time",    "value": "2023-05-17 11:30:30"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "21474.0000000",    "title": "Memory Allocated (MB)",    "value": "21474"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "8.0000000",    "title": "Cores Allocated",    "value": "8"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "novel_splicesite_output": {    "id": "179ed282528f6572",    "src": "hda",    "uuid": "4c3bd83e-f4ce-4b40-890c-1b4ad7487cdc"   },   "output_alignments": {    "id": "232ca3da8cb94641",    "src": "hda",    "uuid": "21a44e40-fe85-430d-8181-498f5938c2d0"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 1, \"canonical_penalty\": \"0\", \"coefficient\": \"1.0\", \"constant_term\": \"-8.0\", \"function_type\": \"G\", \"known_splice_gtf\": null, \"max_intron\": \"500000\", \"min_intron\": \"20\", \"nc_coefficient\": \"1.0\", \"nc_constant_term\": \"-8.0\", \"nc_function_type\": \"G\", \"no_spliced_alignment_options\": {\"__current_case__\": 1, \"no_spliced_alignment\": \"\"}, \"noncanonical_penalty\": \"12\", \"notmplen\": false, \"novel_splicesite_outfile\": true, \"spliced_options_selector\": \"advanced\", \"tma\": \"\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 559, \"src\": \"hda\"}]}, \"rna_strandness\": \"R\", \"type\": \"single\"}",   "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 558, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "ok",  "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were unpaired; of these:\n    0 (0.00%) aligned 0 times\n    10 (100.00%) aligned exactly 1 time\n    0 (0.00%) aligned \u003e1 times\n100.00% overall alignment rate\n",  "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\nGetting block 2 of 7\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\n  Reserving size (1010) for bucket 2\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  Calculating Z arrays for bucket 2\n  Reserving size (1010) for bucket 1\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  bucket 2: 10%\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 1\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 6:\n  bucket 7: 10%\n  bucket 2: 30%\n  bucket 4: 10%\n  bucket 2: 40%\n  bucket 1: 10%\n  bucket 6: 10%\n  bucket 7: 20%\n  Calculating Z arrays for bucket 5\n  bucket 2: 50%\n  bucket 7: 30%\n  bucket 1: 20%\n  bucket 6: 20%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 2: 60%\n  bucket 7: 40%\n  bucket 6: 30%\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 5:\n  bucket 7: 50%\n  bucket 6: 40%\n  bucket 4: 30%\n  bucket 7: 60%\n  bucket 2: 70%\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 80%\n  bucket 4: 40%\n  bucket 6: 50%\n  bucket 7: 70%\n  bucket 5: 20%\n  bucket 1: 40%\n  bucket 2: 90%\n  bucket 3: 10%\n  bucket 4: 50%\n  bucket 7: 80%\n  bucket 5: 30%\n  bucket 2: 100%\n  bucket 1: 50%\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  bucket 3: 20%\n  bucket 7: 90%\n  bucket 5: 40%\n  bucket 4: 60%\n  bucket 6: 60%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 1: 70%\n  bucket 6: 70%\n  bucket 5: 50%\n  bucket 7: 100%\n  bucket 4: 70%\n  bucket 1: 80%\n  bucket 3: 40%\n  bucket 6: 80%\n  bucket 5: 60%\n  bucket 1: 90%\n  bucket 3: 50%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 5: 70%\n  bucket 1: 100%\n  bucket 3: 60%\n  bucket 6: 90%\n  Sorting block of length 940 for bucket 1\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 4: 100%\n  bucket 5: 90%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7",  "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were unpaired; of these:\n    0 (0.00%) aligned 0 times\n    10 (100.00%) aligned exactly 1 time\n    0 (0.00%) aligned \u003e1 times\n100.00% overall alignment rate\n",  "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\nGetting block 2 of 7\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\n  Reserving size (1010) for bucket 2\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  Calculating Z arrays for bucket 2\n  Reserving size (1010) for bucket 1\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  bucket 2: 10%\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 1\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 6:\n  bucket 7: 10%\n  bucket 2: 30%\n  bucket 4: 10%\n  bucket 2: 40%\n  bucket 1: 10%\n  bucket 6: 10%\n  bucket 7: 20%\n  Calculating Z arrays for bucket 5\n  bucket 2: 50%\n  bucket 7: 30%\n  bucket 1: 20%\n  bucket 6: 20%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 2: 60%\n  bucket 7: 40%\n  bucket 6: 30%\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 5:\n  bucket 7: 50%\n  bucket 6: 40%\n  bucket 4: 30%\n  bucket 7: 60%\n  bucket 2: 70%\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 80%\n  bucket 4: 40%\n  bucket 6: 50%\n  bucket 7: 70%\n  bucket 5: 20%\n  bucket 1: 40%\n  bucket 2: 90%\n  bucket 3: 10%\n  bucket 4: 50%\n  bucket 7: 80%\n  bucket 5: 30%\n  bucket 2: 100%\n  bucket 1: 50%\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  bucket 3: 20%\n  bucket 7: 90%\n  bucket 5: 40%\n  bucket 4: 60%\n  bucket 6: 60%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 1: 70%\n  bucket 6: 70%\n  bucket 5: 50%\n  bucket 7: 100%\n  bucket 4: 70%\n  bucket 1: 80%\n  bucket 3: 40%\n  bucket 6: 80%\n  bucket 5: 60%\n  bucket 1: 90%\n  bucket 3: 50%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 5: 70%\n  bucket 1: 100%\n  bucket 3: 60%\n  bucket 6: 90%\n  Sorting block of length 940 for bucket 1\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 4: 100%\n  bucket 5: 90%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n",  "traceback": null,  "update_time": "2023-05-17T11:30:40.701951",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_c9cma35m.sam v. /tmp/history_bam_converted_to_sam_2r449nig.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/berntm/miniconda3/envs/mulled-v1-dc6f63e1868acbc3942929987e34de2bf48adbca1b58f06d3967ba62f134dab2/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome --rna-strandness R --pen-cansplice 0 --pen-noncansplice 12 --pen-canintronlen G,-8.0,1.0 --pen-noncanintronlen G,-8.0,1.0 --min-intronlen 20 --max-intronlen 500000 --novel-splicesite-outfile /tmp/tmpw1ltmaqi/files/0/5/a/dataset_05a3c64c-55b8-43ae-970e-778b359793ee.dat -U input_f.fastq\"\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome --rna-strandness R --pen-cansplice 0 --pen-noncansplice 12 --pen-canintronlen G,-8.0,1.0 --pen-noncanintronlen G,-8.0,1.0 --min-intronlen 20 --max-intronlen 500000 --novel-splicesite-outfile /galaxy/server/database/objects/4/c/3/dataset_4c3bd83e-f4ce-4b40-890c-1b4ad7487cdc.dat -U input_f.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/447/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/2/1/a/dataset_21a44e40-fe85-430d-8181-498f5938c2d0.dat\n phiX174_185_708_0:0:0_1:0:0_5/1\t0\tphiX174\t185\t60\t70M\t*\t0\t0\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYT:Z:UU\tXS:A:-\tNH:i:1\n phiX174_36_572_1:0:0_0:0:0_8/1\t16\tphiX174\t503\t60\t70M\t*\t0\t0\tGAGTAACAAAGTTTGGATTGCTACTGACCGCTCTCGTGCTCGTCGCTGCGTTGAGGCTTGCGTTTATGGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYT:Z:UU\tXS:A:+\tNH:i:1\n phiX174_1141_1609_1:0:0_1:0:0_4/1\t0\tphiX174\t1141\t60\t70M\t*\t0\t0\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:24G45\tYT:Z:UU\tXS:A:-\tNH:i:1\n" ], "status": "failure", "test_index": 15, "time_seconds": 40.07591676712036, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7"}
                ]]></error>
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 12 sample suffixesGenerating random suffixesQSorting 12 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 12 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 1, merged 7; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 768.571 (target: 1009)Getting block 1 of 7Getting block 2 of 7Getting block 3 of 7  Reserving size (1010) for bucket 3  Reserving size (1010) for bucket 2Getting block 4 of 7  Reserving size (1010) for bucket 4  Calculating Z arrays for bucket 2  Reserving size (1010) for bucket 1Getting block 6 of 7  Reserving size (1010) for bucket 6  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 4Getting block 7 of 7  Reserving size (1010) for bucket 7Getting block 5 of 7  Reserving size (1010) for bucket 5  bucket 2: 10%  Calculating Z arrays for bucket 7  Calculating Z arrays for bucket 6  Calculating Z arrays for bucket 1  bucket 2: 20%  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 4:  Entering block accumulator loop for bucket 6:  bucket 7: 10%  bucket 2: 30%  bucket 4: 10%  bucket 2: 40%  bucket 1: 10%  bucket 6: 10%  bucket 7: 20%  Calculating Z arrays for bucket 5  bucket 2: 50%  bucket 7: 30%  bucket 1: 20%  bucket 6: 20%  bucket 4: 20%  bucket 1: 30%  bucket 2: 60%  bucket 7: 40%  bucket 6: 30%  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 5:  bucket 7: 50%  bucket 6: 40%  bucket 4: 30%  bucket 7: 60%  bucket 2: 70%  bucket 5: 10%  Entering block accumulator loop for bucket 3:  bucket 2: 80%  bucket 4: 40%  bucket 6: 50%  bucket 7: 70%  bucket 5: 20%  bucket 1: 40%  bucket 2: 90%  bucket 3: 10%  bucket 4: 50%  bucket 7: 80%  bucket 5: 30%  bucket 2: 100%  bucket 1: 50%  Sorting block of length 845 for bucket 2  (Using difference cover)  bucket 3: 20%  bucket 7: 90%  bucket 5: 40%  bucket 4: 60%  bucket 6: 60%  bucket 1: 60%  bucket 3: 30%  bucket 1: 70%  bucket 6: 70%  bucket 5: 50%  bucket 7: 100%  bucket 4: 70%  bucket 1: 80%  bucket 3: 40%  bucket 6: 80%  bucket 5: 60%  bucket 1: 90%  bucket 3: 50%  Sorting block of length 739 for bucket 7  (Using difference cover)  bucket 4: 80%  bucket 5: 70%  bucket 1: 100%  bucket 3: 60%  bucket 6: 90%  Sorting block of length 940 for bucket 1  bucket 4: 90%  (Using difference cover)  bucket 5: 80%  bucket 6: 100%  Sorting block of length 517 for bucket 6  (Using difference cover)  bucket 3: 70%  bucket 4: 100%  bucket 5: 90%  Sorting block of length 972 for bucket 4  (Using difference cover)  bucket 3: 80%  bucket 5: 100%  Sorting block of length 923 for bucket 5  (Using difference cover)  bucket 3: 90%  bucket 3: 100%  Sorting block of length 444 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 846 for bucket 2  Sorting block time: 00:00:00Returning block of 941 for bucket 1  Sorting block time: 00:00:00Returning block of 445 for bucket 3  Sorting block time: 00:00:00Returning block of 973 for bucket 4  Sorting block time: 00:00:00Returning block of 740 for bucket 7  Sorting block time: 00:00:00Returning block of 518 for bucket 6  Sorting block time: 00:00:00Returning block of 924 for bucket 5
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 1010 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HierEbwt constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were unpaired; of these:    0 (0.00%) aligned 0 times    10 (100.00%) aligned exactly 1 time    0 (0.00%) aligned >1 times100.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #17)" name="16" time="40.09881949424744">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adv|sam_options|chr_text": "--add-chrname",  "adv|sam_options|no_unal": true,  "adv|sam_options|omit_sec_seq": true,  "adv|sam_options|read_groups|read_groups_0|rg": "BC:test1",  "adv|sam_options|read_groups|read_groups_1|rg": "CN:test2",  "adv|sam_options|read_groups|rg_labels": "Yes",  "adv|sam_options|sam_options_selector": "advanced",  "library|input_1": {   "id": "b0e68f442214505d",   "src": "hda"  },  "library|type": "paired_interleaved",  "reference_genome|history_item": {   "id": "a13f00377b352775",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/4/a/a/dataset_4aa736df-85f6-4016-9605-80b505768ed6.dat\u0027 genome.fa \u0026\u0026 hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome \u0026\u0026        ln -f -s \u0027/galaxy/server/database/objects/a/f/4/dataset_af4213d9-e54f-4e04-8913-57fccd302f47.dat\u0027 input_f.fastq.bz2 \u0026\u0026    hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027genome\u0027    -1 \u003c(bzcat input_f.fastq.bz2 | seqtk seq -1 /dev/stdin) -2 \u003c(bzcat input_f.fastq.bz2 | seqtk seq -2 /dev/stdin)                        --no-unal --rg-id \u0027read_group\u0027 --rg \u0027BC:test1\u0027 --rg \u0027CN:test2\u0027 --add-chrname --omit-sec-seq         | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/d/7/8/dataset_d78929f3-678e-4764-bf3c-4fcfd9e2259e.dat\u0027",  "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2023-05-17T11:31:01.920577",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-h9lw7",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "c12e33c820b38184",  "inputs": {   "history_item": {    "id": "a13f00377b352775",    "src": "hda",    "uuid": "4aa736df-85f6-4016-9605-80b505768ed6"   },   "input_1": {    "id": "b0e68f442214505d",    "src": "hda",    "uuid": "af4213d9-e54f-4e04-8913-57fccd302f47"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1684323067.0000000",    "title": "Job End Time",    "value": "2023-05-17 11:31:07"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1684323066.0000000",    "title": "Job Start Time",    "value": "2023-05-17 11:31:06"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "21474.0000000",    "title": "Memory Allocated (MB)",    "value": "21474"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "8.0000000",    "title": "Cores Allocated",    "value": "8"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "59a6baaaebfad7b2",    "src": "hda",    "uuid": "d78929f3-678e-4764-bf3c-4fcfd9e2259e"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 1, \"chr_text\": \"--add-chrname\", \"no_unal\": true, \"omit_sec_seq\": true, \"read_groups\": {\"__current_case__\": 1, \"read_groups\": [{\"__index__\": 0, \"rg\": \"BC:test1\"}, {\"__index__\": 1, \"rg\": \"CN:test2\"}], \"rg_id\": \"read_group\", \"rg_labels\": \"Yes\"}, \"sam_options_selector\": \"advanced\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 564, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}",   "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 565, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "ok",  "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n",  "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\nGetting block 7 of 7\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Reserving size (1010) for bucket 7\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 5\n  bucket 1: 10%\n  Calculating Z arrays for bucket 7\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 5:\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 7: 10%\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 5: 10%\n  bucket 7: 20%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 6: 20%\n  bucket 7: 30%\n  bucket 1: 30%\n  bucket 4: 40%\n  bucket 5: 20%\n  bucket 4: 50%\n  bucket 2: 20%\n  bucket 6: 30%\n  bucket 3: 20%\n  bucket 7: 40%\n  bucket 1: 40%\n  bucket 7: 50%\n  bucket 6: 40%\n  bucket 2: 30%\n  bucket 5: 30%\n  bucket 4: 60%\n  bucket 3: 30%\n  bucket 7: 60%\n  bucket 1: 50%\n  bucket 6: 50%\n  bucket 2: 40%\n  bucket 4: 70%\n  bucket 7: 70%\n  bucket 1: 60%\n  bucket 6: 60%\n  bucket 5: 40%\n  bucket 3: 40%\n  bucket 6: 70%\n  bucket 4: 80%\n  bucket 7: 80%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 7: 90%\n  bucket 6: 80%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 4: 90%\n  bucket 1: 80%\n  bucket 7: 100%\n  bucket 6: 90%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 6: 100%\n  bucket 3: 60%\n  Sorting block of length 517 for bucket 6\n  bucket 4: 100%\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 70%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  bucket 5: 50%\n  bucket 2: 90%\n  bucket 1: 100%\n  bucket 3: 80%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 2: 100%\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  bucket 5: 70%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7",  "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n",  "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\nGetting block 7 of 7\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Reserving size (1010) for bucket 7\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 5\n  bucket 1: 10%\n  Calculating Z arrays for bucket 7\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 5:\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  bucket 7: 10%\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 5: 10%\n  bucket 7: 20%\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 6: 20%\n  bucket 7: 30%\n  bucket 1: 30%\n  bucket 4: 40%\n  bucket 5: 20%\n  bucket 4: 50%\n  bucket 2: 20%\n  bucket 6: 30%\n  bucket 3: 20%\n  bucket 7: 40%\n  bucket 1: 40%\n  bucket 7: 50%\n  bucket 6: 40%\n  bucket 2: 30%\n  bucket 5: 30%\n  bucket 4: 60%\n  bucket 3: 30%\n  bucket 7: 60%\n  bucket 1: 50%\n  bucket 6: 50%\n  bucket 2: 40%\n  bucket 4: 70%\n  bucket 7: 70%\n  bucket 1: 60%\n  bucket 6: 60%\n  bucket 5: 40%\n  bucket 3: 40%\n  bucket 6: 70%\n  bucket 4: 80%\n  bucket 7: 80%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 7: 90%\n  bucket 6: 80%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 4: 90%\n  bucket 1: 80%\n  bucket 7: 100%\n  bucket 6: 90%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 6: 100%\n  bucket 3: 60%\n  Sorting block of length 517 for bucket 6\n  bucket 4: 100%\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 3: 70%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  bucket 5: 50%\n  bucket 2: 90%\n  bucket 1: 100%\n  bucket 3: 80%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 2: 100%\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 3: 100%\n  bucket 5: 70%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n",  "traceback": null,  "update_time": "2023-05-17T11:31:18.023473",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_67j60x3j.sam v. /tmp/history_bam_converted_to_sam__t5_kadi.sam )\n--- local_file\n+++ history_data\n@@ -1,7 +1,9 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:chrphiX174\tLN:5386\n @RG\tID:read_group\tBC:test1\tCN:test2\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/berntm/miniconda3/envs/mulled-v1-dc6f63e1868acbc3942929987e34de2bf48adbca1b58f06d3967ba62f134dab2/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome --rg-id read_group --rg BC:test1 --rg CN:test2 --add-chrname --omit-sec-seq --passthrough -1 /dev/fd/63 -2 /dev/fd/62\"\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome --rg-id read_group --rg BC:test1 --rg CN:test2 --add-chrname --omit-sec-seq --passthrough -1 /dev/fd/63 -2 /dev/fd/62\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/453/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/d/7/8/dataset_d78929f3-678e-4764-bf3c-4fcfd9e2259e.dat\n phiX174_36_572_1:0:0_0:0:0_8\t163\tchrphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tRG:Z:read_group\tNH:i:1\n phiX174_185_708_0:0:0_1:0:0_5\t99\tchrphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tRG:Z:read_group\tNH:i:1\n phiX174_36_572_1:0:0_0:0:0_8\t83\tchrphiX174\t503\t60\t70M\t=\t36\t-537\tGAGTAACAAAGTTTGGATTGCTACTGACCGCTCTCGTGCTCGTCGCTGCGTTGAGGCTTGCGTTTATGGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tRG:Z:read_group\tNH:i:1\n" ], "status": "failure", "test_index": 16, "time_seconds": 40.09881949424744, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7"}
                ]]></error>
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 12 sample suffixesGenerating random suffixesQSorting 12 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 12 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 1, merged 7; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 768.571 (target: 1009)Getting block 1 of 7  Reserving size (1010) for bucket 1Getting block 3 of 7  Reserving size (1010) for bucket 3Getting block 4 of 7  Reserving size (1010) for bucket 4Getting block 2 of 7  Reserving size (1010) for bucket 2Getting block 6 of 7  Reserving size (1010) for bucket 6Getting block 7 of 7Getting block 5 of 7  Reserving size (1010) for bucket 5  Reserving size (1010) for bucket 7  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 4:  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 5  bucket 1: 10%  Calculating Z arrays for bucket 7  bucket 4: 10%  Entering block accumulator loop for bucket 6:  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 5:  bucket 4: 20%  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 3:  bucket 7: 10%  bucket 6: 10%  bucket 4: 30%  bucket 5: 10%  bucket 7: 20%  bucket 1: 20%  bucket 3: 10%  bucket 2: 10%  bucket 6: 20%  bucket 7: 30%  bucket 1: 30%  bucket 4: 40%  bucket 5: 20%  bucket 4: 50%  bucket 2: 20%  bucket 6: 30%  bucket 3: 20%  bucket 7: 40%  bucket 1: 40%  bucket 7: 50%  bucket 6: 40%  bucket 2: 30%  bucket 5: 30%  bucket 4: 60%  bucket 3: 30%  bucket 7: 60%  bucket 1: 50%  bucket 6: 50%  bucket 2: 40%  bucket 4: 70%  bucket 7: 70%  bucket 1: 60%  bucket 6: 60%  bucket 5: 40%  bucket 3: 40%  bucket 6: 70%  bucket 4: 80%  bucket 7: 80%  bucket 2: 50%  bucket 1: 70%  bucket 7: 90%  bucket 6: 80%  bucket 3: 50%  bucket 2: 60%  bucket 4: 90%  bucket 1: 80%  bucket 7: 100%  bucket 6: 90%  Sorting block of length 739 for bucket 7  (Using difference cover)  bucket 2: 70%  bucket 1: 90%  bucket 6: 100%  bucket 3: 60%  Sorting block of length 517 for bucket 6  bucket 4: 100%  (Using difference cover)  bucket 2: 80%  bucket 3: 70%  Sorting block of length 972 for bucket 4  (Using difference cover)  bucket 5: 50%  bucket 2: 90%  bucket 1: 100%  bucket 3: 80%  Sorting block of length 940 for bucket 1  (Using difference cover)  bucket 5: 60%  bucket 2: 100%  Sorting block of length 845 for bucket 2  (Using difference cover)  bucket 3: 90%  bucket 3: 100%  bucket 5: 70%  Sorting block of length 444 for bucket 3  (Using difference cover)  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 923 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 518 for bucket 6  Sorting block time: 00:00:00Returning block of 740 for bucket 7  Sorting block time: 00:00:00Returning block of 445 for bucket 3  Sorting block time: 00:00:00Returning block of 846 for bucket 2  Sorting block time: 00:00:00Returning block of 924 for bucket 5  Sorting block time: 00:00:00Returning block of 973 for bucket 4  Sorting block time: 00:00:00Returning block of 941 for bucket 1
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 1010 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HierEbwt constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #3)" name="2" time="128.21661520004272">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "library|input_1": {   "id": "9904bce208940d8d",   "src": "hda"  },  "library|input_2": {   "id": "d5dca764463a6318",   "src": "hda"  },  "library|type": "paired",  "reference_genome|source": "indexed" }, "job": {  "command_line": "ln -f -s \u0027/galaxy/server/database/objects/a/0/3/dataset_a03e6619-8cae-44d7-bab3-c7fa9f610c66.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/d/8/f/dataset_d8f0831d-dcbc-4c59-ae0b-c95c0c567272.dat\u0027 input_r.fastq \u0026\u0026     hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027/cvmfs/data.galaxyproject.org/managed/hisat2_index/apiMel4/apiMel4\u0027    -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027                                | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/7/2/b/dataset_72bf8382-6f9e-411e-b348-a24746b0a3bb.dat\u0027",  "command_version": null,  "create_time": "2023-05-17T11:24:38.309886",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-8gktg",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "409199958a923c56",  "inputs": {   "input_1": {    "id": "9904bce208940d8d",    "src": "hda",    "uuid": "a03e6619-8cae-44d7-bab3-c7fa9f610c66"   },   "input_2": {    "id": "d5dca764463a6318",    "src": "hda",    "uuid": "d8f0831d-dcbc-4c59-ae0b-c95c0c567272"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "30a15f17cbe14a8b",    "src": "hda",    "uuid": "72bf8382-6f9e-411e-b348-a24746b0a3bb"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/phiX.len\"",   "dbkey": "\"phiX\"",   "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 509, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 510, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}",   "reference_genome": "{\"__current_case__\": 0, \"index\": \"apiMel4\", \"source\": \"indexed\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2023-05-17T11:26:24.269384",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7, exit_code: None, stderr: ." ], "status": "failure", "test_index": 2, "time_seconds": 128.21661520004272, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #4)" name="3" time="136.23106932640076">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adv|input_options|input_options_selector": "advanced",  "adv|input_options|trim3": "15",  "adv|input_options|trim5": "15",  "library|input_1": {   "id": "a845a28d92de1533",   "src": "hda"  },  "library|input_2": {   "id": "ce0f5f68704f08a5",   "src": "hda"  },  "library|type": "paired",  "reference_genome|history_item": {   "id": "8eb3c0e5881bb05e",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/e/7/4/dataset_e7478c06-512f-444f-a54b-b679a96f9d0e.dat\u0027 genome.fa \u0026\u0026 hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome \u0026\u0026        ln -f -s \u0027/galaxy/server/database/objects/0/0/7/dataset_0070ddcf-85b6-4bbb-99cc-693a4730ee8d.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/d/6/8/dataset_d68ce354-f605-4b53-a82c-660afdc97bee.dat\u0027 input_r.fastq \u0026\u0026     hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027genome\u0027    -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027         --trim5 \u002715\u0027 --trim3 \u002715\u0027 --phred33                          | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/1/a/f/dataset_1af8def2-42d4-426a-ad78-86dd6e1891f4.dat\u0027",  "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2023-05-17T11:24:46.226185",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-r4tkw",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "95c211fcb2d18b7a",  "inputs": {   "history_item": {    "id": "8eb3c0e5881bb05e",    "src": "hda",    "uuid": "e7478c06-512f-444f-a54b-b679a96f9d0e"   },   "input_1": {    "id": "a845a28d92de1533",    "src": "hda",    "uuid": "0070ddcf-85b6-4bbb-99cc-693a4730ee8d"   },   "input_2": {    "id": "ce0f5f68704f08a5",    "src": "hda",    "uuid": "d68ce354-f605-4b53-a82c-660afdc97bee"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1684322784.0000000",    "title": "Job End Time",    "value": "2023-05-17 11:26:24"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1684322784.0000000",    "title": "Job Start Time",    "value": "2023-05-17 11:26:24"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "21474.0000000",    "title": "Memory Allocated (MB)",    "value": "21474"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "8.0000000",    "title": "Cores Allocated",    "value": "8"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "b0989f6549617ae2",    "src": "hda",    "uuid": "1af8def2-42d4-426a-ad78-86dd6e1891f4"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 512, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 513, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}",   "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 511, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "ok",  "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    71 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    71 pairs aligned 0 times concordantly or discordantly; of these:\n      142 mates make up the pairs; of these:\n        74 (52.11%) aligned 0 times\n        68 (47.89%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n92.60% overall alignment rate\n",  "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Calculating Z arrays for bucket 1\nGetting block 3 of 7\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Reserving size (1010) for bucket 3\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Reserving size (1010) for bucket 2\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 6\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 2\n  bucket 4: 10%\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 1:\n  bucket 4: 30%\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 7: 20%\n  bucket 6: 10%\n  bucket 4: 40%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 7: 30%\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 7: 40%\n  bucket 4: 50%\n  bucket 1: 40%\n  bucket 7: 50%\n  bucket 3: 20%\n  bucket 4: 60%\n  bucket 7: 60%\n  bucket 2: 20%\n  bucket 7: 70%\n  bucket 4: 70%\n  bucket 3: 30%\n  bucket 6: 20%\n  bucket 1: 50%\n  bucket 4: 80%\n  bucket 2: 30%\n  bucket 7: 80%\n  bucket 4: 90%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 7: 90%\n  bucket 3: 50%\n  bucket 4: 100%\n  bucket 2: 50%\n  Sorting block of length 972 for bucket 4\n  bucket 7: 100%\n  (Using difference cover)\n  bucket 1: 60%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 6: 30%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 6: 40%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 6: 50%\n  bucket 3: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 2: 100%\n  bucket 3: 100%\n  bucket 6: 60%\n  bucket 1: 100%\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7",  "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    71 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    71 pairs aligned 0 times concordantly or discordantly; of these:\n      142 mates make up the pairs; of these:\n        74 (52.11%) aligned 0 times\n        68 (47.89%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n92.60% overall alignment rate\n",  "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Calculating Z arrays for bucket 1\nGetting block 3 of 7\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Reserving size (1010) for bucket 3\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Reserving size (1010) for bucket 2\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 6\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 2\n  bucket 4: 10%\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 1:\n  bucket 4: 30%\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 7: 20%\n  bucket 6: 10%\n  bucket 4: 40%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 7: 30%\n  bucket 1: 30%\n  bucket 3: 10%\n  bucket 7: 40%\n  bucket 4: 50%\n  bucket 1: 40%\n  bucket 7: 50%\n  bucket 3: 20%\n  bucket 4: 60%\n  bucket 7: 60%\n  bucket 2: 20%\n  bucket 7: 70%\n  bucket 4: 70%\n  bucket 3: 30%\n  bucket 6: 20%\n  bucket 1: 50%\n  bucket 4: 80%\n  bucket 2: 30%\n  bucket 7: 80%\n  bucket 4: 90%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 7: 90%\n  bucket 3: 50%\n  bucket 4: 100%\n  bucket 2: 50%\n  Sorting block of length 972 for bucket 4\n  bucket 7: 100%\n  (Using difference cover)\n  bucket 1: 60%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 6: 30%\n  bucket 2: 60%\n  bucket 3: 60%\n  bucket 1: 70%\n  bucket 2: 70%\n  bucket 6: 40%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 1: 80%\n  bucket 6: 50%\n  bucket 3: 80%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 2: 100%\n  bucket 3: 100%\n  bucket 6: 60%\n  bucket 1: 100%\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  Entering block accumulator loop for bucket 5:\n  bucket 5: 10%\n  bucket 5: 20%\n  bucket 5: 30%\n  bucket 5: 40%\n  bucket 5: 50%\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n",  "traceback": null,  "update_time": "2023-05-17T11:26:34.786228",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_yjrbq11l.sam v. /tmp/history_bam_converted_to_sam_ov96tzgr.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome --trim5 15 --trim3 15 --phred33 -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome --trim5 15 --trim3 15 --phred33 -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/407/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/1/a/f/dataset_1af8def2-42d4-426a-ad78-86dd6e1891f4.dat\n phiX174_17_543_2:0:0_2:0:0_1e\t163\tphiX174\t32\t60\t40M\t=\t489\t497\tACACTTTCGGATATTTCTGATGAGTCGAAAACTTATCTTG\t2222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:31A8\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_21_568_3:0:0_0:0:0_79\t163\tphiX174\t36\t60\t40M\t=\t514\t518\tTTTCGGATATTTGTGATGAGTCGAAAAATTATCTTGATAA\t2222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:12C27\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_22_543_0:0:0_1:0:0_188\t99\tphiX174\t37\t60\t40M\t=\t489\t492\tTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAA\t2222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:40\tYS:i:0\tYT:Z:CP\tNH:i:1\n" ], "status": "failure", "test_index": 3, "time_seconds": 136.23106932640076, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7"}
                ]]></error>
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 12 sample suffixesGenerating random suffixesQSorting 12 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 12 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 1, merged 7; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 768.571 (target: 1009)Getting block 1 of 7  Reserving size (1010) for bucket 1Getting block 2 of 7  Calculating Z arrays for bucket 1Getting block 3 of 7Getting block 5 of 7  Reserving size (1010) for bucket 5  Reserving size (1010) for bucket 3Getting block 4 of 7  Reserving size (1010) for bucket 4Getting block 6 of 7  Reserving size (1010) for bucket 6  Reserving size (1010) for bucket 2  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 6Getting block 7 of 7  Reserving size (1010) for bucket 7  Entering block accumulator loop for bucket 6:  Entering block accumulator loop for bucket 4:  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 7  Calculating Z arrays for bucket 2  bucket 4: 10%  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 3:  bucket 4: 20%  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 1:  bucket 4: 30%  bucket 7: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 7: 20%  bucket 6: 10%  bucket 4: 40%  bucket 1: 20%  bucket 2: 10%  bucket 7: 30%  bucket 1: 30%  bucket 3: 10%  bucket 7: 40%  bucket 4: 50%  bucket 1: 40%  bucket 7: 50%  bucket 3: 20%  bucket 4: 60%  bucket 7: 60%  bucket 2: 20%  bucket 7: 70%  bucket 4: 70%  bucket 3: 30%  bucket 6: 20%  bucket 1: 50%  bucket 4: 80%  bucket 2: 30%  bucket 7: 80%  bucket 4: 90%  bucket 3: 40%  bucket 2: 40%  bucket 7: 90%  bucket 3: 50%  bucket 4: 100%  bucket 2: 50%  Sorting block of length 972 for bucket 4  bucket 7: 100%  (Using difference cover)  bucket 1: 60%  Sorting block of length 739 for bucket 7  (Using difference cover)  bucket 6: 30%  bucket 2: 60%  bucket 3: 60%  bucket 1: 70%  bucket 2: 70%  bucket 6: 40%  bucket 3: 70%  bucket 2: 80%  bucket 1: 80%  bucket 6: 50%  bucket 3: 80%  bucket 1: 90%  bucket 2: 90%  bucket 3: 90%  bucket 2: 100%  bucket 3: 100%  bucket 6: 60%  bucket 1: 100%  Sorting block of length 845 for bucket 2  (Using difference cover)  Sorting block of length 940 for bucket 1  (Using difference cover)  Sorting block of length 444 for bucket 3  (Using difference cover)  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 517 for bucket 6  (Using difference cover)  Entering block accumulator loop for bucket 5:  bucket 5: 10%  bucket 5: 20%  bucket 5: 30%  bucket 5: 40%  bucket 5: 50%  bucket 5: 60%  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 923 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 740 for bucket 7  Sorting block time: 00:00:00Returning block of 973 for bucket 4  Sorting block time: 00:00:00Returning block of 941 for bucket 1  Sorting block time: 00:00:00Returning block of 846 for bucket 2  Sorting block time: 00:00:00Returning block of 445 for bucket 3  Sorting block time: 00:00:00Returning block of 518 for bucket 6  Sorting block time: 00:00:00Returning block of 924 for bucket 5
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 1010 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HierEbwt constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    71 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    71 pairs aligned 0 times concordantly or discordantly; of these:      142 mates make up the pairs; of these:        74 (52.11%) aligned 0 times        68 (47.89%) aligned exactly 1 time        0 (0.00%) aligned >1 times92.60% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #5)" name="4" time="44.46951127052307">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adv|input_options|input_options_selector": "advanced",  "adv|input_options|trim3": "15",  "adv|input_options|trim5": "15",  "library|input_1": {   "id": "2178533f32efcc24",   "src": "hda"  },  "library|input_2": {   "id": "507aadc534c442ef",   "src": "hda"  },  "library|paired_options|no_discordant": true,  "library|paired_options|no_mixed": true,  "library|paired_options|paired_options_selector": "advanced",  "library|type": "paired",  "reference_genome|history_item": {   "id": "6d317b8477d9117d",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/b/1/4/dataset_b14047c3-8bb0-4ba9-b3c7-6311a20cf26d.dat\u0027 genome.fa \u0026\u0026 hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome \u0026\u0026        ln -f -s \u0027/galaxy/server/database/objects/9/d/5/dataset_9d56e918-d3c8-4299-a805-544afa9970fe.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/3/a/9/dataset_3a95da2f-b258-459e-acb0-c7d32e3b0f1d.dat\u0027 input_r.fastq \u0026\u0026     hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027genome\u0027    -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027  --fr --no-mixed --no-discordant        --trim5 \u002715\u0027 --trim3 \u002715\u0027 --phred33                          | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/d/5/3/dataset_d53e945d-8988-4a3f-819e-b84ee8087ac2.dat\u0027",  "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2023-05-17T11:26:50.106831",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-qr2br",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "eb124ac67b6fb230",  "inputs": {   "history_item": {    "id": "6d317b8477d9117d",    "src": "hda",    "uuid": "b14047c3-8bb0-4ba9-b3c7-6311a20cf26d"   },   "input_1": {    "id": "2178533f32efcc24",    "src": "hda",    "uuid": "9d56e918-d3c8-4299-a805-544afa9970fe"   },   "input_2": {    "id": "507aadc534c442ef",    "src": "hda",    "uuid": "3a95da2f-b258-459e-acb0-c7d32e3b0f1d"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1684322818.0000000",    "title": "Job End Time",    "value": "2023-05-17 11:26:58"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1684322817.0000000",    "title": "Job Start Time",    "value": "2023-05-17 11:26:57"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "21474.0000000",    "title": "Memory Allocated (MB)",    "value": "21474"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "8.0000000",    "title": "Cores Allocated",    "value": "8"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "c06fe406896868c8",    "src": "hda",    "uuid": "d53e945d-8988-4a3f-819e-b84ee8087ac2"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 517, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 518, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"fr_rf_ff\": \"--fr\", \"no_discordant\": true, \"no_mixed\": true, \"paired_options_selector\": \"advanced\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}",   "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 519, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "ok",  "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n85.80% overall alignment rate\n",  "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  Calculating Z arrays for bucket 1\nGetting block 5 of 7\n  Calculating Z arrays for bucket 2\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Calculating Z arrays for bucket 4\n  Reserving size (1010) for bucket 5\n  Entering block accumulator loop for bucket 1:\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 6\n  bucket 4: 10%\n  bucket 2: 10%\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 20%\n  bucket 2: 20%\n  Calculating Z arrays for bucket 7\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 10%\n  bucket 4: 30%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 4: 40%\n  bucket 5: 10%\n  bucket 2: 50%\n  bucket 3: 30%\n  bucket 6: 10%\n  bucket 4: 50%\n  bucket 1: 50%\n  bucket 5: 20%\n  bucket 4: 60%\n  bucket 7: 10%\n  bucket 1: 60%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 3: 40%\n  bucket 4: 70%\n  bucket 1: 70%\n  bucket 5: 30%\n  bucket 2: 60%\n  bucket 6: 30%\n  bucket 4: 80%\n  bucket 3: 50%\n  bucket 1: 80%\n  bucket 7: 30%\n  bucket 5: 40%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 3: 60%\n  bucket 4: 90%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 2: 80%\n  bucket 1: 100%\n  bucket 6: 50%\n  bucket 2: 90%\n  bucket 4: 100%\n  bucket 5: 60%\n  bucket 2: 100%\n  bucket 6: 60%\n  bucket 3: 70%\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  Sorting block of length 940 for bucket 1\n  bucket 7: 40%\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 3: 80%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 3: 90%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 3: 100%\n  bucket 5: 90%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 7: 70%\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 7: 80%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7",  "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n85.80% overall alignment rate\n",  "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  Calculating Z arrays for bucket 1\nGetting block 5 of 7\n  Calculating Z arrays for bucket 2\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Calculating Z arrays for bucket 4\n  Reserving size (1010) for bucket 5\n  Entering block accumulator loop for bucket 1:\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 6\n  bucket 4: 10%\n  bucket 2: 10%\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 20%\n  bucket 2: 20%\n  Calculating Z arrays for bucket 7\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 10%\n  bucket 4: 30%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 4: 40%\n  bucket 5: 10%\n  bucket 2: 50%\n  bucket 3: 30%\n  bucket 6: 10%\n  bucket 4: 50%\n  bucket 1: 50%\n  bucket 5: 20%\n  bucket 4: 60%\n  bucket 7: 10%\n  bucket 1: 60%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 3: 40%\n  bucket 4: 70%\n  bucket 1: 70%\n  bucket 5: 30%\n  bucket 2: 60%\n  bucket 6: 30%\n  bucket 4: 80%\n  bucket 3: 50%\n  bucket 1: 80%\n  bucket 7: 30%\n  bucket 5: 40%\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 3: 60%\n  bucket 4: 90%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 2: 80%\n  bucket 1: 100%\n  bucket 6: 50%\n  bucket 2: 90%\n  bucket 4: 100%\n  bucket 5: 60%\n  bucket 2: 100%\n  bucket 6: 60%\n  bucket 3: 70%\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  Sorting block of length 940 for bucket 1\n  bucket 7: 40%\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 3: 80%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 3: 90%\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 3: 100%\n  bucket 5: 90%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 7: 70%\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 7: 80%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n",  "traceback": null,  "update_time": "2023-05-17T11:27:08.579063",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_6jg52gam.sam v. /tmp/history_bam_converted_to_sam_c9700v0d.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome --fr --no-mixed --no-discordant --trim5 15 --trim3 15 --phred33 -1 /tmp/3453.inpipe1 -2 /tmp/3453.inpipe2\"\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome --fr --no-mixed --no-discordant --trim5 15 --trim3 15 --phred33 -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/413/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/d/5/3/dataset_d53e945d-8988-4a3f-819e-b84ee8087ac2.dat\n phiX174_17_543_2:0:0_2:0:0_1e\t163\tphiX174\t32\t60\t40M\t=\t489\t497\tACACTTTCGGATATTTCTGATGAGTCGAAAACTTATCTTG\t2222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:31A8\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_21_568_3:0:0_0:0:0_79\t163\tphiX174\t36\t60\t40M\t=\t514\t518\tTTTCGGATATTTGTGATGAGTCGAAAAATTATCTTGATAA\t2222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:12C27\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_22_543_0:0:0_1:0:0_188\t99\tphiX174\t37\t60\t40M\t=\t489\t492\tTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAA\t2222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:40\tYS:i:0\tYT:Z:CP\tNH:i:1\n@@ -885,12 +887,12 @@\n phiX174_3424_3922_2:0:0_2:0:0_58\t141\t*\t0\t0\t*\t*\t0\t0\tGACAAATTAGAGCCAATACCATCAGCTTTACCTTCTTTCC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1971_2492_1:0:0_4:0:0_74\t77\t*\t0\t0\t*\t*\t0\t0\tTTTCTATGAAGGATGTTTTCCGTTCAGGTGATTCGTCTAA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1971_2492_1:0:0_4:0:0_74\t141\t*\t0\t0\t*\t*\t0\t0\tTAAGAAGCAGGCGTAACAGAAGTGAGAACCAGCTTATCAG\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_4468_5007_1:0:0_3:0:0_88\t77\t*\t0\t0\t*\t*\t0\t0\tTATAACTGGAAGCTTTAAGGGGCTCACCTTTAGCAACAAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_4468_5007_1:0:0_3:0:0_88\t141\t*\t0\t0\t*\t*\t0\t0\tTGGAGGCCTCCACTATGAAATCGCGTAGAGGCTTTACTAT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_354_848_1:0:0_3:0:0_89\t77\t*\t0\t0\t*\t*\t0\t0\tTGCACTTAATTTTTGACGGACGTTTTCTTCTGCGTCATTA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_354_848_1:0:0_3:0:0_89\t141\t*\t0\t0\t*\t*\t0\t0\tACCACTAATAGGTAAGAAATCATGAGTCAAGTTACTGAAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2991_3536_3:0:0_1:0:0_8e\t77\t*\t0\t0\t*\t*\t0\t0\tCTCATTTTTTGCATATACCTGGTCTTTCGTATTCTGGCGT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2991_3536_3:0:0_1:0:0_8e\t141\t*\t0\t0\t*\t*\t0\t0\tCAAACAGCCGCCTCCGGTGGCATTCAATGTGCTGTGCTTG\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_4468_5007_1:0:0_3:0:0_88\t77\t*\t0\t0\t*\t*\t0\t0\tTATAACTGGAAGCTTTAAGGGGCTCACCTTTAGCAACAAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_4468_5007_1:0:0_3:0:0_88\t141\t*\t0\t0\t*\t*\t0\t0\tTGGAGGCCTCCACTATGAAATCGCGTAGAGGCTTTACTAT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3846_4285_4:0:0_2:1:0_90\t77\t*\t0\t0\t*\t*\t0\t0\tAAATTCTGGAAAGACGGTAAAGCTGATGGTATTTTCTCTA\t2222222222222222222222222222222222222222\tYT:Z:UP\n********\n*SNIP *\n********\n phiX174_1559_2008_1:0:0_2:0:0_171\t141\t*\t0\t0\t*\t*\t0\t0\tCATAGAAATTTCACGCGGCGGCAAGATGCCATACACAACA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2632_3141_3:0:0_4:0:0_176\t77\t*\t0\t0\t*\t*\t0\t0\tGATCAGGGTTAGGAACATAAGAGCCTTGAATGGCAGATTT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2632_3141_3:0:0_4:0:0_176\t141\t*\t0\t0\t*\t*\t0\t0\tCCTAAAATTTTTGCCTGTTAGGTTCGCTTTTAGTCTTCTT\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_319_728_0:0:0_3:0:0_182\t77\t*\t0\t0\t*\t*\t0\t0\tAATAATGTTTTCCGTCAATTGCGCGCCTTCCATGATGAGA\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_319_728_0:0:0_3:0:0_182\t141\t*\t0\t0\t*\t*\t0\t0\tGAGCGTGGATTACTATCTGAGTCCGATGCTGTTCAACCAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3490_3952_0:0:0_3:0:0_181\t77\t*\t0\t0\t*\t*\t0\t0\tTATATGCACAAAATGAGATGCTTGCTTATCAACAGAAGGA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3490_3952_0:0:0_3:0:0_181\t141\t*\t0\t0\t*\t*\t0\t0\tGAGGGTGTCAATCCTTACTGTAATTTCCTAGACAAATTAG\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_319_728_0:0:0_3:0:0_182\t77\t*\t0\t0\t*\t*\t0\t0\tAATAATGTTTTCCGTCAATTGCGCGCCTTCCATGATGAGA\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_319_728_0:0:0_3:0:0_182\t141\t*\t0\t0\t*\t*\t0\t0\tGAGCGTGGATTACTATCTGAGTCCGATGCTGTTCAACCAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2952_3480_3:0:0_3:0:0_186\t77\t*\t0\t0\t*\t*\t0\t0\tTGCCAGCAATCTCTTTTTGAGTCTCATTTTGGATCTCGGC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2952_3480_3:0:0_3:0:0_186\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTCTGGTGTCGCCATGTCTAAATTGTTTGGAGGCGGTC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3190_3751_0:0:0_2:0:0_198\t77\t*\t0\t0\t*\t*\t0\t0\tCTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACT\t2222222222222222222222222222222222222222\tYT:Z:UP\n@@ -991,10 +993,10 @@\n phiX174_3517_3986_3:0:0_2:0:0_1b6\t141\t*\t0\t0\t*\t*\t0\t0\tATCAACAGAAGGAGTCTACTGCTCGCGTTGCTTCTAATAT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_812_1266_2:1:0_3:0:0_1cf\t77\t*\t0\t0\t*\t*\t0\t0\tTTAATCGACTTTTCACCATAAACGTGACGATGAGGGACAT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_812_1266_2:1:0_3:0:0_1cf\t141\t*\t0\t0\t*\t*\t0\t0\tACGTGCAGAAGGAGTGATGAAATGTCTAAAGGTAAAAAAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_4630_5196_3:0:0_2:0:0_1d4\t77\t*\t0\t0\t*\t*\t0\t0\tACAGATTTGTCATTGTGAGCATATTCATCCCGAAGTTGCG\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_4630_5196_3:0:0_2:0:0_1d4\t141\t*\t0\t0\t*\t*\t0\t0\tACTCTATTCGTGATATTGGTCGAATGGTTCTTGCTGCCGA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_4737_5203_2:0:0_4:0:0_1d1\t77\t*\t0\t0\t*\t*\t0\t0\tGCTAATGGCCGTCTTCATTTCCATGCGGTGCATTTTATGC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_4737_5203_2:0:0_4:0:0_1d1\t141\t*\t0\t0\t*\t*\t0\t0\tTCCGTGGACAGATTTTTCATTTTGAGCATAATCATCCCGA\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_4630_5196_3:0:0_2:0:0_1d4\t77\t*\t0\t0\t*\t*\t0\t0\tACAGATTTGTCATTGTGAGCATATTCATCCCGAAGTTGCG\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_4630_5196_3:0:0_2:0:0_1d4\t141\t*\t0\t0\t*\t*\t0\t0\tACTCTATTCGTGATATTGGTCGAATGGTTCTTGCTGCCGA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3223_3567_2:0:0_3:0:0_1e0\t77\t*\t0\t0\t*\t*\t0\t0\tTTGGACTTGGTGGCAAGTCTGCCGCAGATAAAGTAAAGGA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3223_3567_2:0:0_3:0:0_1e0\t141\t*\t0\t0\t*\t*\t0\t0\tCAGTCGACTCCTTCTGTTGAAAAGCAAGCATCTCATTATG\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_4404_4767_2:0:0_4:0:0_1e5\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTACCATACTCAGGGACACAAAAATACTGATCGCAGTC\t2222222222222222222222222222222222222222\tYT:Z:UP\n" ], "status": "failure", "test_index": 4, "time_seconds": 44.46951127052307, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7"}
                ]]></error>
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 12 sample suffixesGenerating random suffixesQSorting 12 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 12 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 1, merged 7; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 768.571 (target: 1009)Getting block 1 of 7  Reserving size (1010) for bucket 1Getting block 2 of 7  Reserving size (1010) for bucket 2Getting block 4 of 7  Reserving size (1010) for bucket 4  Calculating Z arrays for bucket 1Getting block 5 of 7  Calculating Z arrays for bucket 2Getting block 6 of 7  Reserving size (1010) for bucket 6  Calculating Z arrays for bucket 4  Reserving size (1010) for bucket 5  Entering block accumulator loop for bucket 1:Getting block 3 of 7  Reserving size (1010) for bucket 3Getting block 7 of 7  Reserving size (1010) for bucket 7  bucket 1: 10%  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 2:  bucket 1: 20%  Entering block accumulator loop for bucket 4:  Calculating Z arrays for bucket 6  bucket 4: 10%  bucket 2: 10%  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 3:  bucket 4: 20%  bucket 2: 20%  Calculating Z arrays for bucket 7  bucket 2: 30%  Entering block accumulator loop for bucket 6:  bucket 3: 10%  bucket 4: 30%  bucket 1: 30%  Entering block accumulator loop for bucket 5:  bucket 2: 40%  Entering block accumulator loop for bucket 7:  bucket 3: 20%  bucket 1: 40%  bucket 4: 40%  bucket 5: 10%  bucket 2: 50%  bucket 3: 30%  bucket 6: 10%  bucket 4: 50%  bucket 1: 50%  bucket 5: 20%  bucket 4: 60%  bucket 7: 10%  bucket 1: 60%  bucket 7: 20%  bucket 6: 20%  bucket 3: 40%  bucket 4: 70%  bucket 1: 70%  bucket 5: 30%  bucket 2: 60%  bucket 6: 30%  bucket 4: 80%  bucket 3: 50%  bucket 1: 80%  bucket 7: 30%  bucket 5: 40%  bucket 2: 70%  bucket 1: 90%  bucket 3: 60%  bucket 4: 90%  bucket 5: 50%  bucket 6: 40%  bucket 2: 80%  bucket 1: 100%  bucket 6: 50%  bucket 2: 90%  bucket 4: 100%  bucket 5: 60%  bucket 2: 100%  bucket 6: 60%  bucket 3: 70%  Sorting block of length 845 for bucket 2  (Using difference cover)  Sorting block of length 972 for bucket 4  (Using difference cover)  Sorting block of length 940 for bucket 1  bucket 7: 40%  (Using difference cover)  bucket 5: 70%  bucket 3: 80%  bucket 6: 70%  bucket 7: 50%  bucket 3: 90%  bucket 5: 80%  bucket 6: 80%  bucket 7: 60%  bucket 3: 100%  bucket 5: 90%  Sorting block of length 444 for bucket 3  (Using difference cover)  bucket 6: 90%  bucket 7: 70%  bucket 5: 100%  Sorting block of length 923 for bucket 5  (Using difference cover)  bucket 6: 100%  bucket 7: 80%  Sorting block of length 517 for bucket 6  (Using difference cover)  bucket 7: 90%  bucket 7: 100%  Sorting block of length 739 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 846 for bucket 2  Sorting block time: 00:00:00Returning block of 941 for bucket 1  Sorting block time: 00:00:00Returning block of 973 for bucket 4  Sorting block time: 00:00:00Returning block of 924 for bucket 5  Sorting block time: 00:00:00Returning block of 445 for bucket 3  Sorting block time: 00:00:00Returning block of 740 for bucket 7  Sorting block time: 00:00:00Returning block of 518 for bucket 6
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 1010 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HierEbwt constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:01500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times85.80% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #6)" name="5" time="36.88115477561951">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 12 sample suffixesGenerating random suffixesQSorting 12 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 12 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 1, merged 7; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 768.571 (target: 1009)Getting block 1 of 7  Reserving size (1010) for bucket 1Getting block 2 of 7  Reserving size (1010) for bucket 2  Calculating Z arrays for bucket 1Getting block 4 of 7  Calculating Z arrays for bucket 2Getting block 5 of 7Getting block 3 of 7  Reserving size (1010) for bucket 3  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 1:  Reserving size (1010) for bucket 4  Reserving size (1010) for bucket 5  Calculating Z arrays for bucket 4  bucket 2: 10%Getting block 7 of 7  Reserving size (1010) for bucket 7  Calculating Z arrays for bucket 3  bucket 1: 10%  Entering block accumulator loop for bucket 4:  Calculating Z arrays for bucket 7  Calculating Z arrays for bucket 5  bucket 1: 20%  Entering block accumulator loop for bucket 3:Getting block 6 of 7  Reserving size (1010) for bucket 6  bucket 2: 20%  Entering block accumulator loop for bucket 5:  Calculating Z arrays for bucket 6  bucket 4: 10%  bucket 2: 30%  Entering block accumulator loop for bucket 6:  bucket 1: 30%  bucket 2: 40%  Entering block accumulator loop for bucket 7:  bucket 1: 40%  bucket 3: 10%  bucket 4: 20%  bucket 1: 50%  bucket 4: 30%  bucket 3: 20%  bucket 6: 10%  bucket 5: 10%  bucket 1: 60%  bucket 7: 10%  bucket 3: 30%  bucket 1: 70%  bucket 6: 20%  bucket 5: 20%  bucket 2: 50%  bucket 1: 80%  bucket 7: 20%  bucket 3: 40%  bucket 1: 90%  bucket 2: 60%  bucket 5: 30%  bucket 7: 30%  bucket 4: 40%  bucket 6: 30%  bucket 1: 100%  Sorting block of length 940 for bucket 1  (Using difference cover)  bucket 2: 70%  bucket 5: 40%  bucket 7: 40%  bucket 3: 50%  bucket 6: 40%  bucket 4: 50%  bucket 2: 80%  bucket 7: 50%  bucket 5: 50%  bucket 6: 50%  bucket 3: 60%  bucket 2: 90%  bucket 7: 60%  bucket 5: 60%  bucket 6: 60%  bucket 5: 70%  bucket 7: 70%  bucket 4: 60%  bucket 2: 100%  bucket 6: 70%  bucket 5: 80%  Sorting block of length 845 for bucket 2  bucket 3: 70%  (Using difference cover)  bucket 4: 70%  bucket 5: 90%  bucket 7: 80%  bucket 4: 80%  bucket 3: 80%  bucket 6: 80%  bucket 5: 100%  bucket 7: 90%  Sorting block of length 923 for bucket 5  (Using difference cover)  bucket 3: 90%  bucket 4: 90%  bucket 7: 100%  bucket 6: 90%  Sorting block of length 739 for bucket 7  (Using difference cover)  bucket 3: 100%  bucket 6: 100%  Sorting block of length 517 for bucket 6  (Using difference cover)  Sorting block of length 444 for bucket 3  (Using difference cover)  bucket 4: 100%  Sorting block of length 972 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00Returning block of 941 for bucket 1  Sorting block time: 00:00:00Returning block of 973 for bucket 4  Sorting block time: 00:00:00Returning block of 518 for bucket 6  Sorting block time: 00:00:00Returning block of 924 for bucket 5  Sorting block time: 00:00:00Returning block of 846 for bucket 2  Sorting block time: 00:00:00Returning block of 740 for bucket 7  Sorting block time: 00:00:00Returning block of 445 for bucket 3
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 1010 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HierEbwt constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:003 reads; of these:  3 (100.00%) were unpaired; of these:    3 (100.00%) aligned 0 times    0 (0.00%) aligned exactly 1 time    0 (0.00%) aligned >1 times0.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #7)" name="6" time="43.13132357597351">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 12 sample suffixesGenerating random suffixesQSorting 12 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 12 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 1, merged 7; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 768.571 (target: 1009)Getting block 1 of 7Getting block 2 of 7  Reserving size (1010) for bucket 2Getting block 3 of 7  Reserving size (1010) for bucket 3Getting block 4 of 7  Reserving size (1010) for bucket 4Getting block 5 of 7  Reserving size (1010) for bucket 5Getting block 6 of 7  Reserving size (1010) for bucket 6  Reserving size (1010) for bucket 1  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 6  Calculating Z arrays for bucket 1Getting block 7 of 7  Entering block accumulator loop for bucket 6:  Calculating Z arrays for bucket 4  Reserving size (1010) for bucket 7  Entering block accumulator loop for bucket 5:  bucket 6: 10%  Calculating Z arrays for bucket 7  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 1:  bucket 5: 10%  Entering block accumulator loop for bucket 4:  bucket 7: 10%  Entering block accumulator loop for bucket 3:  bucket 1: 10%  bucket 6: 20%  bucket 4: 10%  bucket 7: 20%  bucket 5: 20%  Entering block accumulator loop for bucket 2:  bucket 6: 30%  bucket 3: 10%  bucket 7: 30%  bucket 4: 20%  bucket 5: 30%  bucket 2: 10%  bucket 1: 20%  bucket 5: 40%  bucket 7: 40%  bucket 6: 40%  bucket 3: 20%  bucket 4: 30%  bucket 1: 30%  bucket 7: 50%  bucket 6: 50%  bucket 5: 50%  bucket 2: 20%  bucket 1: 40%  bucket 4: 40%  bucket 6: 60%  bucket 3: 30%  bucket 7: 60%  bucket 2: 30%  bucket 5: 60%  bucket 4: 50%  bucket 3: 40%  bucket 7: 70%  bucket 6: 70%  bucket 5: 70%  bucket 2: 40%  bucket 4: 60%  bucket 3: 50%  bucket 7: 80%  bucket 6: 80%  bucket 2: 50%  bucket 5: 80%  bucket 7: 90%  bucket 1: 50%  bucket 3: 60%  bucket 4: 70%  bucket 5: 90%  bucket 6: 90%  bucket 7: 100%  bucket 1: 60%  bucket 2: 60%  bucket 6: 100%  bucket 3: 70%  bucket 5: 100%  bucket 4: 80%  bucket 2: 70%  bucket 3: 80%  bucket 1: 70%  Sorting block of length 923 for bucket 5  (Using difference cover)  Sorting block of length 517 for bucket 6  bucket 2: 80%  Sorting block of length 739 for bucket 7  bucket 1: 80%  bucket 2: 90%  bucket 1: 90%  bucket 3: 90%  bucket 2: 100%  bucket 4: 90%  Sorting block of length 845 for bucket 2  (Using difference cover)  bucket 1: 100%  bucket 3: 100%  bucket 4: 100%  Sorting block of length 444 for bucket 3  Sorting block of length 940 for bucket 1  Sorting block of length 972 for bucket 4  (Using difference cover)  (Using difference cover)  (Using difference cover)  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 846 for bucket 2  Sorting block time: 00:00:00Returning block of 941 for bucket 1  Sorting block time: 00:00:00Returning block of 924 for bucket 5  Sorting block time: 00:00:00Returning block of 973 for bucket 4  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 740 for bucket 7Returning block of 518 for bucket 6  Sorting block time: 00:00:00Returning block of 445 for bucket 3
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 1010 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HierEbwt constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:003 reads; of these:  3 (100.00%) were paired; of these:    3 (100.00%) aligned concordantly 0 times    0 (0.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    3 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    3 pairs aligned 0 times concordantly or discordantly; of these:      6 mates make up the pairs; of these:        6 (100.00%) aligned 0 times        0 (0.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times0.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #8)" name="7" time="42.61902165412903">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adv|input_options|input_options_selector": "advanced",  "adv|input_options|trim3": "15",  "adv|input_options|trim5": "15",  "library|input_1": {   "id": "394fde84c6829f98",   "src": "hda"  },  "library|input_2": {   "id": "e14d861893070c07",   "src": "hda"  },  "library|paired_options|no_discordant": true,  "library|paired_options|no_mixed": true,  "library|paired_options|paired_options_selector": "advanced",  "library|type": "paired",  "reference_genome|history_item": {   "id": "99c67f3dd345f1e5",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/e/d/0/dataset_ed0471d1-9c41-46a7-ae06-e2fd2d305dbf.dat\u0027 genome.fa \u0026\u0026 hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome \u0026\u0026        ln -f -s \u0027/galaxy/server/database/objects/3/8/1/dataset_381c83ae-2554-46f2-b776-5ec9497c6f0a.dat\u0027 input_f.fastq.gz \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/3/c/4/dataset_3c474616-5644-4031-90b6-dbb1a7040496.dat\u0027 input_r.fastq.gz \u0026\u0026     hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027genome\u0027    -1 \u0027input_f.fastq.gz\u0027 -2 \u0027input_r.fastq.gz\u0027  --fr --no-mixed --no-discordant        --trim5 \u002715\u0027 --trim3 \u002715\u0027 --phred33                          | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/1/4/f/dataset_14f559b7-7f40-42e4-93b8-5843d322a8b5.dat\u0027",  "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2023-05-17T11:27:40.330997",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-gb9sq",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "faa737ef6c5c3e03",  "inputs": {   "history_item": {    "id": "99c67f3dd345f1e5",    "src": "hda",    "uuid": "ed0471d1-9c41-46a7-ae06-e2fd2d305dbf"   },   "input_1": {    "id": "394fde84c6829f98",    "src": "hda",    "uuid": "381c83ae-2554-46f2-b776-5ec9497c6f0a"   },   "input_2": {    "id": "e14d861893070c07",    "src": "hda",    "uuid": "3c474616-5644-4031-90b6-dbb1a7040496"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1684322864.0000000",    "title": "Job End Time",    "value": "2023-05-17 11:27:44"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1684322863.0000000",    "title": "Job Start Time",    "value": "2023-05-17 11:27:43"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "21474.0000000",    "title": "Memory Allocated (MB)",    "value": "21474"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "8.0000000",    "title": "Cores Allocated",    "value": "8"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "6925384e2f9bf2e9",    "src": "hda",    "uuid": "14f559b7-7f40-42e4-93b8-5843d322a8b5"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 527, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 528, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"fr_rf_ff\": \"--fr\", \"no_discordant\": true, \"no_mixed\": true, \"paired_options_selector\": \"advanced\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}",   "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 526, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "ok",  "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n85.80% overall alignment rate\n",  "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  Calculating Z arrays for bucket 1\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\nGetting block 4 of 7\n  Entering block accumulator loop for bucket 3:\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Entering block accumulator loop for bucket 2:\n  bucket 3: 10%\n  Calculating Z arrays for bucket 5\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Reserving size (1010) for bucket 4\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  Calculating Z arrays for bucket 6\n  bucket 3: 20%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 30%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 3: 40%\n  bucket 5: 10%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 3: 50%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 1: 30%\n  bucket 3: 60%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 5: 30%\n  bucket 4: 20%\n  bucket 6: 10%\n  bucket 1: 50%\n  Calculating Z arrays for bucket 7\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 4: 40%\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 50%\n  bucket 6: 20%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 5: 40%\n  bucket 3: 70%\n  bucket 7: 10%\n  bucket 1: 80%\n  bucket 6: 30%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 7: 20%\n  bucket 2: 60%\n  bucket 1: 100%\n  bucket 6: 40%\n  bucket 7: 30%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 6: 50%\n  bucket 2: 70%\n  bucket 3: 80%\n  bucket 7: 40%\n  bucket 4: 80%\n  bucket 6: 60%\n  bucket 7: 50%\n  bucket 4: 90%\n  bucket 6: 70%\n  bucket 3: 90%\n  bucket 5: 50%\n  bucket 7: 60%\n  bucket 3: 100%\n  bucket 5: 60%\n  bucket 4: 100%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 5: 70%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 2: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 5: 80%\n  bucket 2: 90%\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 5: 90%\n  Sorting block of length 845 for bucket 2\n  bucket 5: 100%\n  (Using difference cover)\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7",  "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n85.80% overall alignment rate\n",  "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  Calculating Z arrays for bucket 1\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\nGetting block 4 of 7\n  Entering block accumulator loop for bucket 3:\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Entering block accumulator loop for bucket 2:\n  bucket 3: 10%\n  Calculating Z arrays for bucket 5\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Reserving size (1010) for bucket 4\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  Calculating Z arrays for bucket 6\n  bucket 3: 20%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 30%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  bucket 3: 40%\n  bucket 5: 10%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 3: 50%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 1: 30%\n  bucket 3: 60%\n  bucket 2: 30%\n  bucket 1: 40%\n  bucket 5: 30%\n  bucket 4: 20%\n  bucket 6: 10%\n  bucket 1: 50%\n  Calculating Z arrays for bucket 7\n  bucket 4: 30%\n  bucket 2: 40%\n  bucket 4: 40%\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 50%\n  bucket 6: 20%\n  bucket 2: 50%\n  bucket 1: 70%\n  bucket 5: 40%\n  bucket 3: 70%\n  bucket 7: 10%\n  bucket 1: 80%\n  bucket 6: 30%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 7: 20%\n  bucket 2: 60%\n  bucket 1: 100%\n  bucket 6: 40%\n  bucket 7: 30%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 6: 50%\n  bucket 2: 70%\n  bucket 3: 80%\n  bucket 7: 40%\n  bucket 4: 80%\n  bucket 6: 60%\n  bucket 7: 50%\n  bucket 4: 90%\n  bucket 6: 70%\n  bucket 3: 90%\n  bucket 5: 50%\n  bucket 7: 60%\n  bucket 3: 100%\n  bucket 5: 60%\n  bucket 4: 100%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 5: 70%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 2: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 5: 80%\n  bucket 2: 90%\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 5: 90%\n  Sorting block of length 845 for bucket 2\n  bucket 5: 100%\n  (Using difference cover)\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n",  "traceback": null,  "update_time": "2023-05-17T11:27:54.702612",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_cbpzn341.sam v. /tmp/history_bam_converted_to_sam_ds8ykd2u.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome --fr --no-mixed --no-discordant --trim5 15 --trim3 15 --phred33 -1 /tmp/3453.inpipe1 -2 /tmp/3453.inpipe2\"\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome --fr --no-mixed --no-discordant --trim5 15 --trim3 15 --phred33 -1 /tmp/78.inpipe1 -2 /tmp/78.inpipe2\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/421/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/1/4/f/dataset_14f559b7-7f40-42e4-93b8-5843d322a8b5.dat\n phiX174_17_543_2:0:0_2:0:0_1e\t163\tphiX174\t32\t60\t40M\t=\t489\t497\tACACTTTCGGATATTTCTGATGAGTCGAAAACTTATCTTG\t2222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:31A8\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_21_568_3:0:0_0:0:0_79\t163\tphiX174\t36\t60\t40M\t=\t514\t518\tTTTCGGATATTTGTGATGAGTCGAAAAATTATCTTGATAA\t2222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:12C27\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_22_543_0:0:0_1:0:0_188\t99\tphiX174\t37\t60\t40M\t=\t489\t492\tTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAA\t2222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:40\tYS:i:0\tYT:Z:CP\tNH:i:1\n@@ -885,8 +887,6 @@\n phiX174_3424_3922_2:0:0_2:0:0_58\t141\t*\t0\t0\t*\t*\t0\t0\tGACAAATTAGAGCCAATACCATCAGCTTTACCTTCTTTCC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1971_2492_1:0:0_4:0:0_74\t77\t*\t0\t0\t*\t*\t0\t0\tTTTCTATGAAGGATGTTTTCCGTTCAGGTGATTCGTCTAA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1971_2492_1:0:0_4:0:0_74\t141\t*\t0\t0\t*\t*\t0\t0\tTAAGAAGCAGGCGTAACAGAAGTGAGAACCAGCTTATCAG\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_4468_5007_1:0:0_3:0:0_88\t77\t*\t0\t0\t*\t*\t0\t0\tTATAACTGGAAGCTTTAAGGGGCTCACCTTTAGCAACAAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_4468_5007_1:0:0_3:0:0_88\t141\t*\t0\t0\t*\t*\t0\t0\tTGGAGGCCTCCACTATGAAATCGCGTAGAGGCTTTACTAT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_354_848_1:0:0_3:0:0_89\t77\t*\t0\t0\t*\t*\t0\t0\tTGCACTTAATTTTTGACGGACGTTTTCTTCTGCGTCATTA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_354_848_1:0:0_3:0:0_89\t141\t*\t0\t0\t*\t*\t0\t0\tACCACTAATAGGTAAGAAATCATGAGTCAAGTTACTGAAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2991_3536_3:0:0_1:0:0_8e\t77\t*\t0\t0\t*\t*\t0\t0\tCTCATTTTTTGCATATACCTGGTCTTTCGTATTCTGGCGT\t2222222222222222222222222222222222222222\tYT:Z:UP\n@@ -895,6 +895,8 @@\n phiX174_3846_4285_4:0:0_2:1:0_90\t141\t*\t0\t0\t*\t*\t0\t0\tTCATCCATTAACTTCTCAGTAACAGATACAAACTAATCAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2441_2902_2:1:0_1:0:0_98\t77\t*\t0\t0\t*\t*\t0\t0\tCTTCTGTAACTCCAGCTTCTTCTGCACCTGTTTTACAGAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2441_2902_2:1:0_1:0:0_98\t141\t*\t0\t0\t*\t*\t0\t0\tTAACCTGATTCAGCGAAACCAATCCGCGGCATTTAGTAGC\t2222222222222222222222222222222222222222\tYT:Z:UP\n********\n*SNIP *\n********\n phiX174_1559_2008_1:0:0_2:0:0_171\t77\t*\t0\t0\t*\t*\t0\t0\tGACATTATGGGTCTGCAAGCTGCTTCTGCTAATTTGCATA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1559_2008_1:0:0_2:0:0_171\t141\t*\t0\t0\t*\t*\t0\t0\tCATAGAAATTTCACGCGGCGGCAAGATGCCATACACAACA\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_2632_3141_3:0:0_4:0:0_176\t77\t*\t0\t0\t*\t*\t0\t0\tGATCAGGGTTAGGAACATAAGAGCCTTGAATGGCAGATTT\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_2632_3141_3:0:0_4:0:0_176\t141\t*\t0\t0\t*\t*\t0\t0\tCCTAAAATTTTTGCCTGTTAGGTTCGCTTTTAGTCTTCTT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3490_3952_0:0:0_3:0:0_181\t77\t*\t0\t0\t*\t*\t0\t0\tTATATGCACAAAATGAGATGCTTGCTTATCAACAGAAGGA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3490_3952_0:0:0_3:0:0_181\t141\t*\t0\t0\t*\t*\t0\t0\tGAGGGTGTCAATCCTTACTGTAATTTCCTAGACAAATTAG\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_319_728_0:0:0_3:0:0_182\t77\t*\t0\t0\t*\t*\t0\t0\tAATAATGTTTTCCGTCAATTGCGCGCCTTCCATGATGAGA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_319_728_0:0:0_3:0:0_182\t141\t*\t0\t0\t*\t*\t0\t0\tGAGCGTGGATTACTATCTGAGTCCGATGCTGTTCAACCAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2632_3141_3:0:0_4:0:0_176\t77\t*\t0\t0\t*\t*\t0\t0\tGATCAGGGTTAGGAACATAAGAGCCTTGAATGGCAGATTT\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2632_3141_3:0:0_4:0:0_176\t141\t*\t0\t0\t*\t*\t0\t0\tCCTAAAATTTTTGCCTGTTAGGTTCGCTTTTAGTCTTCTT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2952_3480_3:0:0_3:0:0_186\t77\t*\t0\t0\t*\t*\t0\t0\tTGCCAGCAATCTCTTTTTGAGTCTCATTTTGGATCTCGGC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2952_3480_3:0:0_3:0:0_186\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTCTGGTGTCGCCATGTCTAAATTGTTTGGAGGCGGTC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3190_3751_0:0:0_2:0:0_198\t77\t*\t0\t0\t*\t*\t0\t0\tCTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3190_3751_0:0:0_2:0:0_198\t141\t*\t0\t0\t*\t*\t0\t0\tTGATTGTGCGTTTGCTTATGAACTAAGTCAACCTCAGCAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1446_1947_4:0:0_2:0:0_1a2\t77\t*\t0\t0\t*\t*\t0\t0\tAAGATGATGCTCGTTCTGGTTTCCGTTGCTGCCCTGTCAA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1446_1947_4:0:0_2:0:0_1a2\t141\t*\t0\t0\t*\t*\t0\t0\tTAAGTCAAAGCACCTTTAGCGTTAAGGTACTGAATCTCTT\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_659_1076_3:0:0_0:0:0_1a6\t77\t*\t0\t0\t*\t*\t0\t0\tGGAAGCCAAGATGGGAAAGGTCATGCGGCATACGCTCGGC\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_659_1076_3:0:0_0:0:0_1a6\t141\t*\t0\t0\t*\t*\t0\t0\tTCTCATGAATGAAGGCGCTGAATTTACGGAAAACATTATT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1089_1572_0:0:0_4:0:0_1a4\t77\t*\t0\t0\t*\t*\t0\t0\tGTCGTGAATTGGCGAGAAAGCTCAGTCTGAGGAGGAAGCG\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1089_1572_0:0:0_4:0:0_1a4\t141\t*\t0\t0\t*\t*\t0\t0\tCGGTTATCGCTGGCGACTCCTTCGAGATGGACGCCGTTGG\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_659_1076_3:0:0_0:0:0_1a6\t77\t*\t0\t0\t*\t*\t0\t0\tGGAAGCCAAGATGGGAAAGGTCATGCGGCATACGCTCGGC\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_659_1076_3:0:0_0:0:0_1a6\t141\t*\t0\t0\t*\t*\t0\t0\tTCTCATGAATGAAGGCGCTGAATTTACGGAAAACATTATT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3517_3986_3:0:0_2:0:0_1b6\t77\t*\t0\t0\t*\t*\t0\t0\tTCCAAGATTTGGAGGCATGAAAACATACAAATGGGAGGGT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3517_3986_3:0:0_2:0:0_1b6\t141\t*\t0\t0\t*\t*\t0\t0\tATCAACAGAAGGAGTCTACTGCTCGCGTTGCTTCTAATAT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_812_1266_2:1:0_3:0:0_1cf\t77\t*\t0\t0\t*\t*\t0\t0\tTTAATCGACTTTTCACCATAAACGTGACGATGAGGGACAT\t2222222222222222222222222222222222222222\tYT:Z:UP\n" ], "status": "failure", "test_index": 7, "time_seconds": 42.61902165412903, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7"}
                ]]></error>
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 12 sample suffixesGenerating random suffixesQSorting 12 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 12 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 1, merged 7; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 768.571 (target: 1009)Getting block 1 of 7  Reserving size (1010) for bucket 1Getting block 2 of 7  Reserving size (1010) for bucket 2  Calculating Z arrays for bucket 1Getting block 3 of 7  Reserving size (1010) for bucket 3  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 3Getting block 4 of 7  Entering block accumulator loop for bucket 3:Getting block 5 of 7  Reserving size (1010) for bucket 5  Entering block accumulator loop for bucket 2:  bucket 3: 10%  Calculating Z arrays for bucket 5Getting block 6 of 7  Reserving size (1010) for bucket 6  Reserving size (1010) for bucket 4Getting block 7 of 7  Reserving size (1010) for bucket 7  Calculating Z arrays for bucket 6  bucket 3: 20%  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 5:  bucket 3: 30%  bucket 2: 10%  Entering block accumulator loop for bucket 4:  bucket 1: 10%  bucket 3: 40%  bucket 5: 10%  bucket 2: 20%  bucket 4: 10%  bucket 1: 20%  bucket 3: 50%  Entering block accumulator loop for bucket 6:  bucket 5: 20%  bucket 1: 30%  bucket 3: 60%  bucket 2: 30%  bucket 1: 40%  bucket 5: 30%  bucket 4: 20%  bucket 6: 10%  bucket 1: 50%  Calculating Z arrays for bucket 7  bucket 4: 30%  bucket 2: 40%  bucket 4: 40%  bucket 1: 60%  Entering block accumulator loop for bucket 7:  bucket 4: 50%  bucket 6: 20%  bucket 2: 50%  bucket 1: 70%  bucket 5: 40%  bucket 3: 70%  bucket 7: 10%  bucket 1: 80%  bucket 6: 30%  bucket 4: 60%  bucket 1: 90%  bucket 7: 20%  bucket 2: 60%  bucket 1: 100%  bucket 6: 40%  bucket 7: 30%  Sorting block of length 940 for bucket 1  (Using difference cover)  bucket 4: 70%  bucket 6: 50%  bucket 2: 70%  bucket 3: 80%  bucket 7: 40%  bucket 4: 80%  bucket 6: 60%  bucket 7: 50%  bucket 4: 90%  bucket 6: 70%  bucket 3: 90%  bucket 5: 50%  bucket 7: 60%  bucket 3: 100%  bucket 5: 60%  bucket 4: 100%  Sorting block of length 444 for bucket 3  (Using difference cover)  bucket 7: 70%  bucket 5: 70%  Sorting block of length 972 for bucket 4  (Using difference cover)  bucket 6: 80%  bucket 2: 80%  bucket 7: 80%  bucket 6: 90%  bucket 5: 80%  bucket 2: 90%  bucket 6: 100%  Sorting block of length 517 for bucket 6  (Using difference cover)  bucket 2: 100%  bucket 5: 90%  Sorting block of length 845 for bucket 2  bucket 5: 100%  (Using difference cover)  Sorting block of length 923 for bucket 5  (Using difference cover)  bucket 7: 90%  bucket 7: 100%  Sorting block of length 739 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 941 for bucket 1  Sorting block time: 00:00:00Returning block of 445 for bucket 3  Sorting block time: 00:00:00Returning block of 846 for bucket 2  Sorting block time: 00:00:00Returning block of 518 for bucket 6  Sorting block time: 00:00:00Returning block of 924 for bucket 5  Sorting block time: 00:00:00Returning block of 973 for bucket 4  Sorting block time: 00:00:00Returning block of 740 for bucket 7
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 1010 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HierEbwt constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times85.80% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #9)" name="8" time="45.81026864051819">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adv|input_options|input_options_selector": "advanced",  "adv|input_options|trim3": "15",  "adv|input_options|trim5": "15",  "library|input_1": {   "id": "4f7b0ebec8fe3e66",   "src": "hda"  },  "library|input_2": {   "id": "0e0a2c2971af6ebb",   "src": "hda"  },  "library|paired_options|no_discordant": true,  "library|paired_options|no_mixed": true,  "library|paired_options|paired_options_selector": "advanced",  "library|type": "paired",  "reference_genome|history_item": {   "id": "50bc426a69a4a5f8",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/9/9/9/dataset_9994cfe2-cb40-4175-ab07-11d19b26a414.dat\u0027 genome.fa \u0026\u0026 hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome \u0026\u0026        ln -f -s \u0027/galaxy/server/database/objects/4/3/7/dataset_437fcfd1-9e65-4714-859f-6ebd09fc424e.dat\u0027 input_f.fastq.bz2 \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/3/e/e/dataset_3ee76f2c-fafd-49dc-bcf9-83be12ecfc1e.dat\u0027 input_r.fastq.bz2 \u0026\u0026     hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027genome\u0027    -1 \u0027input_f.fastq.bz2\u0027 -2 \u0027input_r.fastq.bz2\u0027  --fr --no-mixed --no-discordant        --trim5 \u002715\u0027 --trim3 \u002715\u0027 --phred33                          | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/8/e/1/dataset_8e161d20-51bc-4081-aed7-9eb26be3f982.dat\u0027",  "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2023-05-17T11:28:24.292377",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-kvkhx",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "a9ae8482df166ad4",  "inputs": {   "history_item": {    "id": "50bc426a69a4a5f8",    "src": "hda",    "uuid": "9994cfe2-cb40-4175-ab07-11d19b26a414"   },   "input_1": {    "id": "4f7b0ebec8fe3e66",    "src": "hda",    "uuid": "437fcfd1-9e65-4714-859f-6ebd09fc424e"   },   "input_2": {    "id": "0e0a2c2971af6ebb",    "src": "hda",    "uuid": "3ee76f2c-fafd-49dc-bcf9-83be12ecfc1e"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1684322907.0000000",    "title": "Job End Time",    "value": "2023-05-17 11:28:27"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1684322906.0000000",    "title": "Job Start Time",    "value": "2023-05-17 11:28:26"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "21474.0000000",    "title": "Memory Allocated (MB)",    "value": "21474"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "8.0000000",    "title": "Cores Allocated",    "value": "8"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "7ec8b846d16aea8e",    "src": "hda",    "uuid": "8e161d20-51bc-4081-aed7-9eb26be3f982"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 536, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 537, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"fr_rf_ff\": \"--fr\", \"no_discordant\": true, \"no_mixed\": true, \"paired_options_selector\": \"advanced\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}",   "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 538, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "ok",  "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n85.80% overall alignment rate\n",  "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\nGetting block 5 of 7\n  Entering block accumulator loop for bucket 2:\n  Reserving size (1010) for bucket 5\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 4\n  bucket 2: 10%\n  Calculating Z arrays for bucket 3\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  Calculating Z arrays for bucket 6\n  bucket 3: 10%\n  Calculating Z arrays for bucket 7\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 20%\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 10%\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 7: 10%\n  bucket 1: 70%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 80%\n  bucket 6: 20%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 5: 30%\n  bucket 1: 90%\n  bucket 6: 30%\n  bucket 3: 50%\n  bucket 7: 20%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 4: 40%\n  bucket 1: 100%\n  bucket 2: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 4: 50%\n  bucket 2: 50%\n  bucket 5: 60%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 7: 40%\n  bucket 5: 70%\n  bucket 3: 70%\n  bucket 2: 60%\n  bucket 6: 60%\n  bucket 4: 70%\n  bucket 5: 80%\n  bucket 3: 80%\n  bucket 7: 50%\n  bucket 6: 70%\n  bucket 2: 70%\n  bucket 4: 80%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 7: 70%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 3: 100%\n  bucket 2: 90%\n  bucket 6: 100%\n  bucket 7: 90%\n  bucket 4: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7",  "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n85.80% overall alignment rate\n",  "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\nGetting block 5 of 7\n  Entering block accumulator loop for bucket 2:\n  Reserving size (1010) for bucket 5\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 4\n  bucket 2: 10%\n  Calculating Z arrays for bucket 3\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  Calculating Z arrays for bucket 6\n  bucket 3: 10%\n  Calculating Z arrays for bucket 7\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 20%\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 10%\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 7: 10%\n  bucket 1: 70%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 1: 80%\n  bucket 6: 20%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 5: 30%\n  bucket 1: 90%\n  bucket 6: 30%\n  bucket 3: 50%\n  bucket 7: 20%\n  bucket 6: 40%\n  bucket 5: 40%\n  bucket 4: 40%\n  bucket 1: 100%\n  bucket 2: 40%\n  bucket 5: 50%\n  bucket 6: 50%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 4: 50%\n  bucket 2: 50%\n  bucket 5: 60%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 7: 40%\n  bucket 5: 70%\n  bucket 3: 70%\n  bucket 2: 60%\n  bucket 6: 60%\n  bucket 4: 70%\n  bucket 5: 80%\n  bucket 3: 80%\n  bucket 7: 50%\n  bucket 6: 70%\n  bucket 2: 70%\n  bucket 4: 80%\n  bucket 5: 90%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 7: 70%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 3: 100%\n  bucket 2: 90%\n  bucket 6: 100%\n  bucket 7: 90%\n  bucket 4: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n",  "traceback": null,  "update_time": "2023-05-17T11:28:37.742118",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_8nhh541c.sam v. /tmp/history_bam_converted_to_sam_kfuhgsvr.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome --fr --no-mixed --no-discordant --trim5 15 --trim3 15 --phred33 -1 /tmp/3453.inpipe1 -2 /tmp/3453.inpipe2\"\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome --fr --no-mixed --no-discordant --trim5 15 --trim3 15 --phred33 -1 /tmp/78.inpipe1 -2 /tmp/78.inpipe2\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/428/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/8/e/1/dataset_8e161d20-51bc-4081-aed7-9eb26be3f982.dat\n phiX174_17_543_2:0:0_2:0:0_1e\t163\tphiX174\t32\t60\t40M\t=\t489\t497\tACACTTTCGGATATTTCTGATGAGTCGAAAACTTATCTTG\t2222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:31A8\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_21_568_3:0:0_0:0:0_79\t163\tphiX174\t36\t60\t40M\t=\t514\t518\tTTTCGGATATTTGTGATGAGTCGAAAAATTATCTTGATAA\t2222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:12C27\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_22_543_0:0:0_1:0:0_188\t99\tphiX174\t37\t60\t40M\t=\t489\t492\tTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAA\t2222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:40\tYS:i:0\tYT:Z:CP\tNH:i:1\n@@ -869,12 +871,12 @@\n phiX174_1822_2393_2:0:0_0:0:0_19\t141\t*\t0\t0\t*\t*\t0\t0\tTGAGCAAGGCACTATGTTAACTCTTGCGCTTGTTCGTTTT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3543_4018_1:0:0_2:0:0_20\t77\t*\t0\t0\t*\t*\t0\t0\tGTTGCGTCTATTATGGAAAACACCAAACTTTCCAAGCAAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3543_4018_1:0:0_2:0:0_20\t141\t*\t0\t0\t*\t*\t0\t0\tGAAGGGTAATAAGAACGAACCATAACAAAGCCTCGAAGAT\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_2738_3250_0:0:0_3:0:0_23\t77\t*\t0\t0\t*\t*\t0\t0\tAAATCACGCAACTTATCAGACACTGCAGAAGTGCCAGCCT\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_2738_3250_0:0:0_3:0:0_23\t141\t*\t0\t0\t*\t*\t0\t0\tATTATACCGTCAAGGACTGTGTGACTATTGACGTCCTTCC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1043_1520_4:0:0_1:0:0_2f\t77\t*\t0\t0\t*\t*\t0\t0\tTGTTTTTGAGATGGCAGCAACGGAAACCATAACGAGCATC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1043_1520_4:0:0_1:0:0_2f\t141\t*\t0\t0\t*\t*\t0\t0\tTTCCTTGCTGTACAGCTTGGTCGTCTTATTACCATTTCAA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2530_2954_5:0:0_2:0:0_32\t77\t*\t0\t0\t*\t*\t0\t0\tGCTGGTAATGGAGGTTTTCTTCATATCATTCAGATGGATA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2530_2954_5:0:0_2:0:0_32\t141\t*\t0\t0\t*\t*\t0\t0\tACCAAACATAAATCACCTCACTTAAGTGGCTTGAGACAAA\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2738_3250_0:0:0_3:0:0_23\t77\t*\t0\t0\t*\t*\t0\t0\tAAATCACGCAACTTATCAGACACTGCAGAAGTGCCAGCCT\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2738_3250_0:0:0_3:0:0_23\t141\t*\t0\t0\t*\t*\t0\t0\tATTATACCGTCAAGGACTGTGTGACTATTGACGTCCTTCC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_4734_5225_0:0:0_2:0:0_42\t77\t*\t0\t0\t*\t*\t0\t0\tACAGCTAATGGCCGTCTTCATTTCCATGCGGTGCATTTTA\t2222222222222222222222222222222222222222\tYT:Z:UP\n********\n*SNIP *\n********\n-phiX174_2475_3030_2:0:0_4:0:0_13c\t141\t*\t0\t0\t*\t*\t0\t0\tCTGCTTTTTGACCTCCTCCCAACAATTTAGACATGGCGCC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_4023_4465_2:0:0_4:0:0_13e\t77\t*\t0\t0\t*\t*\t0\t0\tATCGAGTCTCTTAAACCTGCTATTGAGGCTTGTGGCATTT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_4023_4465_2:0:0_4:0:0_13e\t141\t*\t0\t0\t*\t*\t0\t0\tTTTTTGGGGTAATTATAGTCATGGCGAATATCCTTAATAG\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2494_2909_4:0:0_1:0:0_145\t77\t*\t0\t0\t*\t*\t0\t0\tTCTTTAATAACCTGATTCAGCGAAACCAATCCGCGGCATT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2494_2909_4:0:0_1:0:0_145\t141\t*\t0\t0\t*\t*\t0\t0\tTCGTCAACGTAATCTTTTGAAAGTTTGACGGTTAATGCTG\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2475_3030_2:0:0_4:0:0_13c\t77\t*\t0\t0\t*\t*\t0\t0\tAGAGACACCTAAAGCTACATCGTCCACGTTATATTTTGAT\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2475_3030_2:0:0_4:0:0_13c\t141\t*\t0\t0\t*\t*\t0\t0\tCTGCTTTTTGACCTCCTCCCAACAATTTAGACATGGCGCC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3672_4168_0:0:0_2:0:0_14b\t77\t*\t0\t0\t*\t*\t0\t0\tAGAATGTCTTCCACGAGCTTGATGCGGTTATCCATCTGCT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3672_4168_0:0:0_2:0:0_14b\t141\t*\t0\t0\t*\t*\t0\t0\tCGCAAGGTTAGTGCTGAGGTTGACTTAGTTCATCAGCAAA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2409_2834_3:1:0_0:0:0_14d\t77\t*\t0\t0\t*\t*\t0\t0\tTTCAACCTTTTTTTCTGATAAGCTGGAACTCACTTCTGTA\t2222222222222222222222222222222222222222\tYT:Z:UP\n@@ -973,12 +975,12 @@\n phiX174_1559_2008_1:0:0_2:0:0_171\t141\t*\t0\t0\t*\t*\t0\t0\tCATAGAAATTTCACGCGGCGGCAAGATGCCATACACAACA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2632_3141_3:0:0_4:0:0_176\t77\t*\t0\t0\t*\t*\t0\t0\tGATCAGGGTTAGGAACATAAGAGCCTTGAATGGCAGATTT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2632_3141_3:0:0_4:0:0_176\t141\t*\t0\t0\t*\t*\t0\t0\tCCTAAAATTTTTGCCTGTTAGGTTCGCTTTTAGTCTTCTT\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_3490_3952_0:0:0_3:0:0_181\t77\t*\t0\t0\t*\t*\t0\t0\tTATATGCACAAAATGAGATGCTTGCTTATCAACAGAAGGA\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_3490_3952_0:0:0_3:0:0_181\t141\t*\t0\t0\t*\t*\t0\t0\tGAGGGTGTCAATCCTTACTGTAATTTCCTAGACAAATTAG\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_319_728_0:0:0_3:0:0_182\t77\t*\t0\t0\t*\t*\t0\t0\tAATAATGTTTTCCGTCAATTGCGCGCCTTCCATGATGAGA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_319_728_0:0:0_3:0:0_182\t141\t*\t0\t0\t*\t*\t0\t0\tGAGCGTGGATTACTATCTGAGTCCGATGCTGTTCAACCAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2952_3480_3:0:0_3:0:0_186\t77\t*\t0\t0\t*\t*\t0\t0\tTGCCAGCAATCTCTTTTTGAGTCTCATTTTGGATCTCGGC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2952_3480_3:0:0_3:0:0_186\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTCTGGTGTCGCCATGTCTAAATTGTTTGGAGGCGGTC\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3490_3952_0:0:0_3:0:0_181\t77\t*\t0\t0\t*\t*\t0\t0\tTATATGCACAAAATGAGATGCTTGCTTATCAACAGAAGGA\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3490_3952_0:0:0_3:0:0_181\t141\t*\t0\t0\t*\t*\t0\t0\tGAGGGTGTCAATCCTTACTGTAATTTCCTAGACAAATTAG\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3190_3751_0:0:0_2:0:0_198\t77\t*\t0\t0\t*\t*\t0\t0\tCTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3190_3751_0:0:0_2:0:0_198\t141\t*\t0\t0\t*\t*\t0\t0\tTGATTGTGCGTTTGCTTATGAACTAAGTCAACCTCAGCAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1446_1947_4:0:0_2:0:0_1a2\t77\t*\t0\t0\t*\t*\t0\t0\tAAGATGATGCTCGTTCTGGTTTCCGTTGCTGCCCTGTCAA\t2222222222222222222222222222222222222222\tYT:Z:UP\n" ], "status": "failure", "test_index": 8, "time_seconds": 45.81026864051819, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7"}
                ]]></error>
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 12 sample suffixesGenerating random suffixesQSorting 12 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 12 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 1, merged 7; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 768.571 (target: 1009)Getting block 1 of 7  Reserving size (1010) for bucket 1Getting block 2 of 7  Reserving size (1010) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2Getting block 4 of 7  Reserving size (1010) for bucket 4Getting block 3 of 7  Reserving size (1010) for bucket 3Getting block 5 of 7  Entering block accumulator loop for bucket 2:  Reserving size (1010) for bucket 5  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 4  bucket 2: 10%  Calculating Z arrays for bucket 3Getting block 6 of 7  Reserving size (1010) for bucket 6Getting block 7 of 7  Reserving size (1010) for bucket 7  bucket 1: 10%  Entering block accumulator loop for bucket 3:  bucket 1: 20%  bucket 2: 20%  Entering block accumulator loop for bucket 4:  bucket 1: 30%  Calculating Z arrays for bucket 6  bucket 3: 10%  Calculating Z arrays for bucket 7  bucket 1: 40%  Entering block accumulator loop for bucket 5:  bucket 3: 20%  bucket 1: 50%  Entering block accumulator loop for bucket 7:  bucket 4: 10%  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 3: 30%  bucket 1: 60%  bucket 7: 10%  bucket 1: 70%  bucket 6: 10%  bucket 5: 20%  bucket 4: 20%  bucket 2: 30%  bucket 1: 80%  bucket 6: 20%  bucket 4: 30%  bucket 3: 40%  bucket 5: 30%  bucket 1: 90%  bucket 6: 30%  bucket 3: 50%  bucket 7: 20%  bucket 6: 40%  bucket 5: 40%  bucket 4: 40%  bucket 1: 100%  bucket 2: 40%  bucket 5: 50%  bucket 6: 50%  Sorting block of length 940 for bucket 1  (Using difference cover)  bucket 7: 30%  bucket 4: 50%  bucket 2: 50%  bucket 5: 60%  bucket 3: 60%  bucket 4: 60%  bucket 7: 40%  bucket 5: 70%  bucket 3: 70%  bucket 2: 60%  bucket 6: 60%  bucket 4: 70%  bucket 5: 80%  bucket 3: 80%  bucket 7: 50%  bucket 6: 70%  bucket 2: 70%  bucket 4: 80%  bucket 5: 90%  bucket 6: 80%  bucket 7: 60%  bucket 2: 80%  bucket 3: 90%  bucket 4: 90%  bucket 7: 70%  bucket 5: 100%  bucket 6: 90%  Sorting block of length 923 for bucket 5  (Using difference cover)  bucket 7: 80%  bucket 3: 100%  bucket 2: 90%  bucket 6: 100%  bucket 7: 90%  bucket 4: 100%  Sorting block of length 517 for bucket 6  (Using difference cover)  Sorting block of length 972 for bucket 4  (Using difference cover)  bucket 7: 100%  Sorting block of length 444 for bucket 3  (Using difference cover)  bucket 2: 100%  Sorting block of length 739 for bucket 7  (Using difference cover)  Sorting block of length 845 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 941 for bucket 1  Sorting block time: 00:00:00Returning block of 445 for bucket 3  Sorting block time: 00:00:00Returning block of 924 for bucket 5  Sorting block time: 00:00:00Returning block of 518 for bucket 6  Sorting block time: 00:00:00Returning block of 973 for bucket 4  Sorting block time: 00:00:00Returning block of 846 for bucket 2  Sorting block time: 00:00:00Returning block of 740 for bucket 7
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 1010 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HierEbwt constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:01500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times85.80% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #10)" name="9" time="46.59922528266907">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "library|input_1": {   "id": "c34c7571c4391a56",   "src": "hda"  },  "library|input_2": {   "id": "2e47be3e7aba55d7",   "src": "hda"  },  "library|rna_strandness": "FR",  "library|type": "paired",  "reference_genome|history_item": {   "id": "50bc426a69a4a5f8",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/9/9/9/dataset_9994cfe2-cb40-4175-ab07-11d19b26a414.dat\u0027 genome.fa \u0026\u0026 hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome \u0026\u0026        ln -f -s \u0027/galaxy/server/database/objects/8/f/0/dataset_8f05deca-de17-434a-8ada-8454c6dd3d2a.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/2/4/d/dataset_24d4c833-1ceb-41d6-b31c-d18c92c2f209.dat\u0027 input_r.fastq \u0026\u0026     hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027genome\u0027    -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027      --rna-strandness FR                           | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/0/3/2/dataset_032ea928-6ef6-4063-af8c-97f4561db400.dat\u0027",  "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2023-05-17T11:28:27.701542",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-mkjhl",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "78b297f155091a27",  "inputs": {   "history_item": {    "id": "50bc426a69a4a5f8",    "src": "hda",    "uuid": "9994cfe2-cb40-4175-ab07-11d19b26a414"   },   "input_1": {    "id": "c34c7571c4391a56",    "src": "hda",    "uuid": "8f05deca-de17-434a-8ada-8454c6dd3d2a"   },   "input_2": {    "id": "2e47be3e7aba55d7",    "src": "hda",    "uuid": "24d4c833-1ceb-41d6-b31c-d18c92c2f209"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1684322911.0000000",    "title": "Job End Time",    "value": "2023-05-17 11:28:31"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1684322911.0000000",    "title": "Job Start Time",    "value": "2023-05-17 11:28:31"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "21474.0000000",    "title": "Memory Allocated (MB)",    "value": "21474"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "8.0000000",    "title": "Cores Allocated",    "value": "8"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "3365dbdb831ebdc8",    "src": "hda",    "uuid": "032ea928-6ef6-4063-af8c-97f4561db400"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 539, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 540, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"FR\", \"type\": \"paired\"}",   "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 538, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "ok",  "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n",  "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  Reserving size (1010) for bucket 1\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\nGetting block 3 of 7\n  Calculating Z arrays for bucket 2\n  Reserving size (1010) for bucket 3\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 1\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  bucket 5: 10%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 20%\n  bucket 1: 10%\n  bucket 7: 10%\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 5: 30%\n  bucket 7: 20%\n  bucket 3: 40%\n  bucket 2: 20%\n  bucket 4: 10%\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  bucket 3: 50%\n  bucket 1: 20%\n  bucket 2: 30%\n  Calculating Z arrays for bucket 6\n  bucket 4: 20%\n  bucket 3: 60%\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 40%\n  bucket 2: 40%\n  bucket 1: 30%\n  bucket 7: 40%\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 3: 70%\n  bucket 5: 50%\n  bucket 7: 50%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 6: 20%\n  bucket 7: 60%\n  bucket 5: 60%\n  bucket 1: 50%\n  bucket 7: 70%\n  bucket 2: 60%\n  bucket 6: 30%\n  bucket 4: 40%\n  bucket 1: 60%\n  bucket 5: 70%\n  bucket 7: 80%\n  bucket 6: 40%\n  bucket 7: 90%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 7: 100%\n  bucket 3: 80%\n  bucket 4: 50%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 1: 80%\n  bucket 3: 90%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 1: 90%\n  bucket 3: 100%\n  bucket 4: 60%\n  bucket 5: 100%\n  bucket 2: 80%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 4: 80%\n  bucket 6: 80%\n  bucket 2: 100%\n  bucket 6: 90%\n  Sorting block of length 845 for bucket 2\n  bucket 4: 90%\n  bucket 6: 100%\n  bucket 4: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7",  "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n",  "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  Reserving size (1010) for bucket 1\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\nGetting block 3 of 7\n  Calculating Z arrays for bucket 2\n  Reserving size (1010) for bucket 3\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 1\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  bucket 5: 10%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 20%\n  bucket 1: 10%\n  bucket 7: 10%\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 5: 30%\n  bucket 7: 20%\n  bucket 3: 40%\n  bucket 2: 20%\n  bucket 4: 10%\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  bucket 3: 50%\n  bucket 1: 20%\n  bucket 2: 30%\n  Calculating Z arrays for bucket 6\n  bucket 4: 20%\n  bucket 3: 60%\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 40%\n  bucket 2: 40%\n  bucket 1: 30%\n  bucket 7: 40%\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 3: 70%\n  bucket 5: 50%\n  bucket 7: 50%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 6: 20%\n  bucket 7: 60%\n  bucket 5: 60%\n  bucket 1: 50%\n  bucket 7: 70%\n  bucket 2: 60%\n  bucket 6: 30%\n  bucket 4: 40%\n  bucket 1: 60%\n  bucket 5: 70%\n  bucket 7: 80%\n  bucket 6: 40%\n  bucket 7: 90%\n  bucket 2: 70%\n  bucket 1: 70%\n  bucket 5: 80%\n  bucket 6: 50%\n  bucket 7: 100%\n  bucket 3: 80%\n  bucket 4: 50%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 1: 80%\n  bucket 3: 90%\n  bucket 5: 90%\n  bucket 6: 60%\n  bucket 1: 90%\n  bucket 3: 100%\n  bucket 4: 60%\n  bucket 5: 100%\n  bucket 2: 80%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 4: 80%\n  bucket 6: 80%\n  bucket 2: 100%\n  bucket 6: 90%\n  Sorting block of length 845 for bucket 2\n  bucket 4: 90%\n  bucket 6: 100%\n  bucket 4: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n",  "traceback": null,  "update_time": "2023-05-17T11:28:41.510748",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_mdwxun4p.sam v. /tmp/history_bam_converted_to_sam_5v3m8t3g.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome --rna-strandness FR -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome --rna-strandness FR -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/429/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/0/3/2/dataset_032ea928-6ef6-4063-af8c-97f4561db400.dat\n phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tXS:A:-\tNH:i:1\n phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tXS:A:+\tNH:i:1\n phiX174_36_572_1:0:0_0:0:0_8\t83\tphiX174\t503\t60\t70M\t=\t36\t-537\tGAGTAACAAAGTTTGGATTGCTACTGACCGCTCTCGTGCTCGTCGCTGCGTTGAGGCTTGCGTTTATGGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tXS:A:-\tNH:i:1\n" ], "status": "failure", "test_index": 9, "time_seconds": 46.59922528266907, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7"}
                ]]></error>
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 12 sample suffixesGenerating random suffixesQSorting 12 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 12 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 1, merged 7; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 1, merged 1; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 768.571 (target: 1009)Getting block 1 of 7Getting block 2 of 7  Reserving size (1010) for bucket 2  Reserving size (1010) for bucket 1Getting block 4 of 7  Reserving size (1010) for bucket 4Getting block 3 of 7  Calculating Z arrays for bucket 2  Reserving size (1010) for bucket 3Getting block 5 of 7  Reserving size (1010) for bucket 5  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 1Getting block 7 of 7  Reserving size (1010) for bucket 7  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 3:  bucket 2: 10%  bucket 5: 10%  bucket 3: 10%  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 7:  bucket 3: 20%  bucket 1: 10%  bucket 7: 10%  bucket 5: 20%  Entering block accumulator loop for bucket 4:  bucket 3: 30%  bucket 5: 30%  bucket 7: 20%  bucket 3: 40%  bucket 2: 20%  bucket 4: 10%Getting block 6 of 7  Reserving size (1010) for bucket 6  bucket 3: 50%  bucket 1: 20%  bucket 2: 30%  Calculating Z arrays for bucket 6  bucket 4: 20%  bucket 3: 60%  bucket 7: 30%  Entering block accumulator loop for bucket 6:  bucket 5: 40%  bucket 2: 40%  bucket 1: 30%  bucket 7: 40%  bucket 6: 10%  bucket 4: 30%  bucket 3: 70%  bucket 5: 50%  bucket 7: 50%  bucket 1: 40%  bucket 2: 50%  bucket 6: 20%  bucket 7: 60%  bucket 5: 60%  bucket 1: 50%  bucket 7: 70%  bucket 2: 60%  bucket 6: 30%  bucket 4: 40%  bucket 1: 60%  bucket 5: 70%  bucket 7: 80%  bucket 6: 40%  bucket 7: 90%  bucket 2: 70%  bucket 1: 70%  bucket 5: 80%  bucket 6: 50%  bucket 7: 100%  bucket 3: 80%  bucket 4: 50%  Sorting block of length 739 for bucket 7  (Using difference cover)  bucket 1: 80%  bucket 3: 90%  bucket 5: 90%  bucket 6: 60%  bucket 1: 90%  bucket 3: 100%  bucket 4: 60%  bucket 5: 100%  bucket 2: 80%  Sorting block of length 923 for bucket 5  (Using difference cover)  Sorting block of length 444 for bucket 3  (Using difference cover)  bucket 1: 100%  Sorting block of length 940 for bucket 1  (Using difference cover)  bucket 6: 70%  bucket 4: 70%  bucket 2: 90%  bucket 4: 80%  bucket 6: 80%  bucket 2: 100%  bucket 6: 90%  Sorting block of length 845 for bucket 2  bucket 4: 90%  bucket 6: 100%  bucket 4: 100%  Sorting block of length 517 for bucket 6  (Using difference cover)  Sorting block of length 972 for bucket 4  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 740 for bucket 7  Sorting block time: 00:00:00Returning block of 973 for bucket 4  Sorting block time: 00:00:00Returning block of 924 for bucket 5  Sorting block time: 00:00:00Returning block of 445 for bucket 3  Sorting block time: 00:00:00Returning block of 846 for bucket 2  Sorting block time: 00:00:00Returning block of 518 for bucket 6  Sorting block time: 00:00:00Returning block of 941 for bucket 1
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 1010 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HierEbwt constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #1)" name="0" time="52.025420904159546">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60Getting block 4 of 60  Calculating Z arrays for bucket 1Getting block 3 of 60Getting block 5 of 60Getting block 7 of 60  Reserving size (126) for bucket 7  Reserving size (126) for bucket 2  Reserving size (126) for bucket 4  Calculating Z arrays for bucket 2  Reserving size (126) for bucket 3  Entering block accumulator loop for bucket 1:Getting block 6 of 60  Reserving size (126) for bucket 6  Reserving size (126) for bucket 5  Calculating Z arrays for bucket 7  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 7:  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 3:  bucket 1: 10%Getting block 8 of 60  bucket 3: 10%  Entering block accumulator loop for bucket 4:  bucket 1: 20%  Entering block accumulator loop for bucket 5:  bucket 3: 20%  bucket 2: 10%  bucket 4: 10%  Entering block accumulator loop for bucket 6:  Reserving size (126) for bucket 8  bucket 4: 20%  bucket 3: 30%  bucket 5: 10%  Calculating Z arrays for bucket 8  bucket 2: 20%  Entering block accumulator loop for bucket 8:  bucket 5: 20%  bucket 7: 10%  bucket 1: 30%  bucket 4: 30%  bucket 2: 30%  bucket 3: 40%  bucket 7: 20%  bucket 5: 30%  bucket 8: 10%  bucket 4: 40%  bucket 3: 50%  bucket 6: 10%  bucket 7: 30%  bucket 4: 50%  bucket 1: 40%  bucket 2: 40%  bucket 5: 40%  bucket 7: 40%  bucket 4: 60%  bucket 3: 60%  bucket 1: 50%  bucket 8: 20%  bucket 6: 20%  bucket 7: 50%  bucket 3: 70%  bucket 5: 50%  bucket 1: 60%  bucket 4: 70%  bucket 7: 60%  bucket 2: 50%  bucket 8: 30%  bucket 3: 80%  bucket 5: 60%  bucket 4: 80%  bucket 7: 70%  bucket 2: 60%  bucket 3: 90%  bucket 8: 40%  bucket 5: 70%  bucket 4: 90%  bucket 2: 70%  bucket 7: 80%  bucket 3: 100%  bucket 6: 30%  bucket 2: 80%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 1: 70%  bucket 8: 50%  bucket 4: 100%  bucket 5: 80%  bucket 7: 90%  bucket 2: 90%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 6: 40%  bucket 1: 80%  bucket 2: 100%  bucket 5: 90%  bucket 8: 60%  bucket 7: 100%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 6: 50%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 5: 100%  bucket 1: 90%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 8: 70%  bucket 1: 100%  bucket 6: 60%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 8: 80%  bucket 6: 70%  bucket 8: 90%  bucket 6: 80%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 6: 90%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 91 for bucket 6Getting block 9 of 60  Reserving size (126) for bucket 9Getting block 10 of 60  Calculating Z arrays for bucket 9  Reserving size (126) for bucket 10Getting block 11 of 60  Entering block accumulator loop for bucket 9:  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 10  Calculating Z arrays for bucket 11  bucket 9: 10%  bucket 9: 20%  Entering block accumulator loop for bucket 10:  Entering block accumulator loop for bucket 11:  bucket 9: 30%  bucket 10: 10%  bucket 11: 10%  bucket 9: 40%  bucket 10: 20%  bucket 11: 20%  bucket 9: 50%  bucket 10: 30%  bucket 11: 30%  bucket 9: 60%  bucket 11: 40%  bucket 10: 40%  bucket 11: 50%  bucket 9: 70%  bucket 10: 50%  bucket 11: 60%  bucket 9: 80%  bucket 10: 60%  bucket 11: 70%  bucket 9: 90%  bucket 11: 80%  bucket 10: 70%  bucket 11: 90%  bucket 9: 100%  bucket 10: 80%  bucket 11: 100%  Sorting block of length 124 for bucket 9  Sorting block of length 95 for bucket 11  (Using difference cover)  (Using difference cover)  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 125 for bucket 9Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%Getting block 13 of 60  bucket 12: 40%  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  bucket 12: 50%  bucket 12: 60%  Entering block accumulator loop for bucket 13:  bucket 12: 70%  bucket 13: 10%  bucket 12: 80%  bucket 13: 20%  bucket 12: 90%  bucket 13: 30%  bucket 12: 100%  bucket 13: 40%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14Getting block 16 of 60Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 14:  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  Entering block accumulator loop for bucket 16:  bucket 14: 40%  bucket 16: 10%  bucket 14: 50%  bucket 16: 20%  bucket 14: 60%  bucket 16: 30%  Entering block accumulator loop for bucket 15:  bucket 16: 40%  bucket 14: 70%  bucket 15: 10%  bucket 16: 50%  bucket 14: 80%  bucket 15: 20%  bucket 16: 60%  bucket 14: 90%  bucket 16: 70%  bucket 15: 30%  bucket 16: 80%  bucket 14: 100%  bucket 15: 40%  Sorting block of length 82 for bucket 14  bucket 16: 90%  (Using difference cover)  bucket 15: 50%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 101 for bucket 16Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  Entering block accumulator loop for bucket 17:  bucket 18: 40%  bucket 17: 10%  bucket 18: 50%  bucket 17: 20%  bucket 18: 60%  bucket 17: 30%  bucket 18: 70%  bucket 17: 40%  bucket 18: 80%  bucket 17: 50%  bucket 18: 90%  bucket 17: 60%  bucket 18: 100%  bucket 17: 70%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 50%  bucket 19: 60%  Entering block accumulator loop for bucket 20:  bucket 19: 70%  bucket 19: 80%  bucket 20: 10%  bucket 19: 90%  bucket 20: 20%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%Getting block 21 of 60  bucket 20: 80%  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block time: 00:00:00  Sorting block of length 54 for bucket 21  (Using difference cover)Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23Getting block 24 of 60  Entering block accumulator loop for bucket 23:  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  bucket 23: 10%  bucket 23: 20%  Entering block accumulator loop for bucket 24:  bucket 23: 30%  bucket 23: 40%  bucket 24: 10%  bucket 23: 50%  bucket 24: 20%  bucket 23: 60%  bucket 24: 30%  bucket 24: 40%  bucket 23: 70%  bucket 24: 50%  bucket 23: 80%  bucket 24: 60%  bucket 24: 70%  bucket 23: 90%  bucket 24: 80%  bucket 23: 100%  bucket 24: 90%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Entering block accumulator loop for bucket 25:  Calculating Z arrays for bucket 26  bucket 25: 10%  Entering block accumulator loop for bucket 26:  bucket 25: 20%  bucket 25: 30%  bucket 26: 10%  bucket 25: 40%  bucket 26: 20%  bucket 25: 50%  bucket 25: 60%  bucket 26: 30%  bucket 25: 70%  bucket 26: 40%  bucket 25: 80%  bucket 26: 50%  bucket 25: 90%  bucket 26: 60%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Calculating Z arrays for bucket 28Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 28:  Entering block accumulator loop for bucket 30:  bucket 29: 10%  bucket 29: 20%  bucket 30: 10%  bucket 29: 30%  bucket 28: 10%  bucket 29: 40%  bucket 30: 20%  bucket 28: 20%  bucket 29: 50%  bucket 29: 60%  bucket 30: 30%  bucket 28: 30%  bucket 29: 70%  bucket 30: 40%  bucket 29: 80%  bucket 30: 50%  bucket 28: 40%  bucket 29: 90%  bucket 30: 60%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 28: 50%  bucket 30: 70%  bucket 28: 60%  bucket 30: 80%  bucket 28: 70%  bucket 30: 90%  bucket 28: 80%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00  bucket 28: 90%Returning block of 52 for bucket 29  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31Getting block 32 of 60  Entering block accumulator loop for bucket 31:  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  bucket 31: 10%  bucket 31: 20%  Entering block accumulator loop for bucket 32:  bucket 31: 30%Getting block 33 of 60  bucket 31: 40%  bucket 32: 10%  bucket 31: 50%  bucket 32: 20%  bucket 31: 60%  bucket 32: 30%  bucket 31: 70%  bucket 32: 40%  bucket 31: 80%  bucket 32: 50%  bucket 31: 90%  bucket 32: 60%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 70%  bucket 32: 80%  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Entering block accumulator loop for bucket 33:  Sorting block time: 00:00:00Returning block of 111 for bucket 31  bucket 33: 10%  bucket 33: 20%  bucket 33: 30%  bucket 33: 40%  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 34: 20%  bucket 34: 30%  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Entering block accumulator loop for bucket 36:  Calculating Z arrays for bucket 37  bucket 36: 10%  Entering block accumulator loop for bucket 37:  bucket 36: 20%  bucket 37: 10%  bucket 36: 30%  bucket 37: 20%  bucket 36: 40%  bucket 37: 30%  bucket 36: 50%  bucket 37: 40%  bucket 36: 60%Getting block 38 of 60  bucket 37: 50%  Reserving size (126) for bucket 38  bucket 36: 70%  Calculating Z arrays for bucket 38  bucket 36: 80%  bucket 37: 60%  bucket 36: 90%  bucket 37: 70%  Entering block accumulator loop for bucket 38:  bucket 37: 80%  bucket 36: 100%  bucket 38: 10%  bucket 37: 90%  bucket 38: 20%  bucket 37: 100%  bucket 38: 30%  Sorting block of length 120 for bucket 36  bucket 38: 40%  (Using difference cover)  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  bucket 39: 10%  Entering block accumulator loop for bucket 40:  bucket 39: 20%  bucket 40: 10%  bucket 39: 30%  bucket 40: 20%  bucket 39: 40%  bucket 40: 30%  bucket 39: 50%  bucket 40: 40%  bucket 39: 60%  bucket 40: 50%  bucket 39: 70%  bucket 40: 60%  bucket 39: 80%  bucket 40: 70%  bucket 39: 90%  bucket 40: 80%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 41:  Entering block accumulator loop for bucket 42:  bucket 41: 10%  bucket 42: 10%  bucket 41: 20%  bucket 42: 20%  bucket 41: 30%  bucket 42: 30%  bucket 41: 40%  bucket 42: 40%  bucket 41: 50%  bucket 42: 50%  bucket 41: 60%  bucket 42: 60%  bucket 41: 70%  bucket 42: 70%  bucket 41: 80%  bucket 42: 80%  bucket 41: 90%  bucket 42: 90%  bucket 41: 100%  bucket 42: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  Sorting block time: 00:00:00  bucket 45: 10%Returning block of 67 for bucket 44  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46Getting block 47 of 60  Calculating Z arrays for bucket 46  Reserving size (126) for bucket 47Getting block 48 of 60  Entering block accumulator loop for bucket 46:  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 47  Calculating Z arrays for bucket 48  bucket 46: 10%  bucket 46: 20%  Entering block accumulator loop for bucket 47:  bucket 46: 30%  Entering block accumulator loop for bucket 48:  bucket 46: 40%  bucket 47: 10%  bucket 46: 50%  bucket 48: 10%  bucket 46: 60%  bucket 47: 20%  bucket 46: 70%  bucket 48: 20%  bucket 47: 30%  bucket 46: 80%  bucket 47: 40%  bucket 48: 30%  bucket 47: 50%  bucket 48: 40%  bucket 47: 60%  bucket 48: 50%  bucket 47: 70%  bucket 46: 90%  bucket 47: 80%  bucket 48: 60%  bucket 46: 100%  Sorting block of length 69 for bucket 46  bucket 47: 90%  (Using difference cover)  bucket 48: 70%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 49:  bucket 49: 10%  Entering block accumulator loop for bucket 50:  bucket 49: 20%  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 49: 30%Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  bucket 49: 40%  Reserving size (126) for bucket 52  bucket 49: 50%  bucket 50: 50%  Calculating Z arrays for bucket 52  bucket 50: 60%  bucket 49: 60%  Entering block accumulator loop for bucket 51:  bucket 50: 70%  bucket 49: 70%  Entering block accumulator loop for bucket 52:  bucket 50: 80%  bucket 49: 80%  bucket 51: 10%  bucket 52: 10%  bucket 50: 90%  bucket 49: 90%  bucket 52: 20%  bucket 51: 20%  bucket 50: 100%  bucket 52: 30%  bucket 49: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 51: 30%  bucket 52: 40%  bucket 51: 40%  bucket 52: 50%  Sorting block time: 00:00:00  bucket 51: 50%Returning block of 109 for bucket 50  bucket 52: 60%  bucket 51: 60%  bucket 52: 70%  bucket 51: 70%  bucket 52: 80%  bucket 51: 80%  bucket 52: 90%  bucket 51: 90%  bucket 52: 100%  Sorting block time: 00:00:00  bucket 51: 100%Returning block of 75 for bucket 49  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53Getting block 54 of 60  Entering block accumulator loop for bucket 53:  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  bucket 53: 10%  Entering block accumulator loop for bucket 54:  bucket 53: 20%  bucket 54: 10%  bucket 53: 30%  bucket 54: 20%  bucket 53: 40%  bucket 54: 30%  bucket 53: 50%  bucket 54: 40%  bucket 53: 60%  bucket 54: 50%  bucket 53: 70%  bucket 54: 60%  bucket 53: 80%  bucket 54: 70%  bucket 53: 90%  bucket 54: 80%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:Getting block 57 of 60  Reserving size (126) for bucket 57  bucket 56: 10%  Calculating Z arrays for bucket 57  bucket 56: 20%  bucket 56: 30%  Entering block accumulator loop for bucket 57:  bucket 56: 40%  bucket 57: 10%  bucket 56: 50%  bucket 57: 20%  bucket 56: 60%  bucket 57: 30%  bucket 56: 70%  bucket 57: 40%  bucket 56: 80%  bucket 57: 50%  bucket 57: 60%  bucket 56: 90%  bucket 57: 70%  bucket 56: 100%  Sorting block of length 55 for bucket 56  bucket 57: 80%  (Using difference cover)  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58Getting block 59 of 60  Entering block accumulator loop for bucket 58:  Reserving size (126) for bucket 59  bucket 58: 10%  Calculating Z arrays for bucket 59  bucket 58: 20%  Entering block accumulator loop for bucket 59:  bucket 58: 30%  bucket 59: 10%  bucket 58: 40%  bucket 59: 20%  bucket 58: 50%  bucket 59: 30%  bucket 59: 40%  bucket 59: 50%  bucket 58: 60%  bucket 59: 60%  bucket 58: 70%  bucket 59: 70%  bucket 58: 80%  bucket 58: 90%  bucket 59: 80%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #2)" name="1" time="51.61335349082947">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60  Calculating Z arrays for bucket 1Getting block 3 of 60Getting block 5 of 60  Entering block accumulator loop for bucket 1:  Reserving size (126) for bucket 2  Reserving size (126) for bucket 5  bucket 1: 10%  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 2Getting block 4 of 60  Entering block accumulator loop for bucket 2:Getting block 8 of 60  Reserving size (126) for bucket 8  Reserving size (126) for bucket 4  Entering block accumulator loop for bucket 5:  bucket 2: 10%  Calculating Z arrays for bucket 4Getting block 6 of 60Getting block 7 of 60  Reserving size (126) for bucket 7  Calculating Z arrays for bucket 8  Calculating Z arrays for bucket 7  bucket 5: 10%  bucket 2: 20%  Reserving size (126) for bucket 6  Reserving size (126) for bucket 3  Entering block accumulator loop for bucket 4:  bucket 2: 30%  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 8:  bucket 1: 20%  bucket 7: 10%  bucket 2: 40%  bucket 4: 10%  bucket 8: 10%  Calculating Z arrays for bucket 6  bucket 2: 50%  Calculating Z arrays for bucket 3  bucket 1: 30%  bucket 8: 20%  bucket 4: 20%  bucket 1: 40%  bucket 7: 20%  bucket 2: 60%  Entering block accumulator loop for bucket 6:  bucket 7: 30%  bucket 8: 30%  bucket 2: 70%  bucket 7: 40%  bucket 4: 30%  bucket 5: 20%  bucket 6: 10%  bucket 2: 80%  bucket 7: 50%  bucket 4: 40%  bucket 1: 50%  bucket 7: 60%  bucket 6: 20%  Entering block accumulator loop for bucket 3:  bucket 8: 40%  bucket 7: 70%  bucket 5: 30%  bucket 3: 10%  bucket 8: 50%  bucket 7: 80%  bucket 4: 50%  bucket 6: 30%  bucket 5: 40%  bucket 7: 90%  bucket 8: 60%  bucket 4: 60%  bucket 5: 50%  bucket 2: 90%  bucket 4: 70%  bucket 8: 70%  bucket 7: 100%  bucket 4: 80%  bucket 5: 60%  bucket 6: 40%  bucket 2: 100%  bucket 5: 70%  bucket 6: 50%  bucket 4: 90%  bucket 3: 20%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block of length 84 for bucket 2  bucket 5: 80%  (Using difference cover)  bucket 3: 30%  bucket 1: 60%  bucket 4: 100%  bucket 6: 60%  bucket 8: 80%  bucket 5: 90%  bucket 3: 40%  bucket 1: 70%  bucket 3: 50%  Sorting block of length 68 for bucket 4  bucket 6: 70%  (Using difference cover)  bucket 5: 100%  bucket 3: 60%  bucket 1: 80%  bucket 8: 90%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 6: 80%  bucket 3: 70%  bucket 1: 90%  bucket 8: 100%  bucket 6: 90%  bucket 1: 100%  bucket 6: 100%  Sorting block of length 42 for bucket 1  bucket 3: 80%  Sorting block time: 00:00:00  (Using difference cover)  Sorting block of length 90 for bucket 6  (Using difference cover)Returning block of 76 for bucket 7  bucket 3: 90%  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 3: 100%  Sorting block of length 106 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 107 for bucket 3Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 10%Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  bucket 9: 20%  Entering block accumulator loop for bucket 10:  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  Entering block accumulator loop for bucket 11:  bucket 9: 50%  bucket 10: 20%  bucket 9: 60%  bucket 11: 10%  bucket 10: 30%  bucket 9: 70%  bucket 11: 20%  bucket 9: 80%  bucket 10: 40%  bucket 11: 30%  bucket 9: 90%  bucket 10: 50%  bucket 11: 40%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 60%  bucket 11: 50%  bucket 10: 70%  bucket 11: 60%  bucket 10: 80%  bucket 11: 70%  bucket 10: 90%  bucket 11: 80%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 12 of 60Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  Entering block accumulator loop for bucket 12:  bucket 13: 40%  bucket 13: 50%  bucket 12: 10%  bucket 13: 60%  bucket 12: 20%  bucket 13: 70%  bucket 12: 30%  bucket 13: 80%  bucket 12: 40%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16Getting block 17 of 60  Calculating Z arrays for bucket 16  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Entering block accumulator loop for bucket 17:  Entering block accumulator loop for bucket 16:  bucket 17: 10%  Calculating Z arrays for bucket 18  bucket 17: 20%  Entering block accumulator loop for bucket 18:  bucket 16: 10%  bucket 17: 30%  bucket 18: 10%  bucket 17: 40%  bucket 18: 20%  bucket 16: 20%  bucket 18: 30%  bucket 17: 50%  bucket 18: 40%  bucket 16: 30%  bucket 17: 60%  bucket 18: 50%  bucket 16: 40%  bucket 18: 60%  bucket 16: 50%  bucket 17: 70%  bucket 16: 60%  bucket 18: 70%  bucket 17: 80%  bucket 16: 70%  bucket 18: 80%  bucket 17: 90%  bucket 16: 80%  bucket 18: 90%  bucket 17: 100%  bucket 16: 90%  Sorting block of length 39 for bucket 17  bucket 18: 100%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  (Using difference cover)  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 19  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  Entering block accumulator loop for bucket 19:  bucket 20: 10%  bucket 19: 10%  bucket 20: 20%  bucket 20: 30%  bucket 19: 20%  bucket 20: 40%  bucket 19: 30%  bucket 20: 50%  bucket 19: 40%  bucket 20: 60%  bucket 19: 50%  bucket 20: 70%  bucket 19: 60%  bucket 20: 80%  bucket 19: 70%  bucket 20: 90%  bucket 19: 80%  bucket 20: 100%  bucket 19: 90%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21Getting block 22 of 60  Entering block accumulator loop for bucket 21:  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  bucket 21: 10%  Entering block accumulator loop for bucket 22:  bucket 21: 20%  bucket 22: 10%  bucket 21: 30%  bucket 22: 20%  bucket 21: 40%  bucket 22: 30%  bucket 21: 50%  bucket 22: 40%  bucket 21: 60%  bucket 22: 50%  bucket 21: 70%  bucket 22: 60%  bucket 21: 80%  bucket 22: 70%  bucket 21: 90%  bucket 22: 80%  bucket 21: 100%  bucket 22: 90%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%Getting block 24 of 60  bucket 23: 20%  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  bucket 23: 30%  bucket 23: 40%  Entering block accumulator loop for bucket 24:  bucket 23: 50%  bucket 23: 60%  bucket 24: 10%  bucket 23: 70%  bucket 24: 20%  bucket 23: 80%  bucket 24: 30%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  Sorting block time: 00:00:00  (Using difference cover)Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)Getting block 26 of 60  Reserving size (126) for bucket 26  Sorting block time: 00:00:00  Calculating Z arrays for bucket 26Returning block of 67 for bucket 25  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  Sorting block time: 00:00:00Returning block of 120 for bucket 27  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 30:  bucket 29: 10%  bucket 30: 10%  bucket 29: 20%  bucket 30: 20%  bucket 29: 30%  bucket 30: 30%  bucket 29: 40%  bucket 30: 40%  bucket 29: 50%  bucket 30: 50%  bucket 29: 60%  bucket 30: 60%  bucket 29: 70%  bucket 29: 80%  bucket 30: 70%  bucket 30: 80%  bucket 29: 90%  bucket 30: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%Getting block 32 of 60  bucket 31: 60%  Reserving size (126) for bucket 32  bucket 31: 70%  Calculating Z arrays for bucket 32  bucket 31: 80%  bucket 31: 90%  Entering block accumulator loop for bucket 32:  bucket 31: 100%  Sorting block of length 110 for bucket 31  bucket 32: 10%  (Using difference cover)  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  Sorting block time: 00:00:00Returning block of 111 for bucket 31  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 33: 20%Getting block 34 of 60  bucket 33: 30%  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  bucket 33: 40%  bucket 33: 50%  Entering block accumulator loop for bucket 34:  bucket 33: 60%  bucket 34: 10%  bucket 33: 70%  bucket 34: 20%  bucket 33: 80%  bucket 34: 30%  bucket 34: 40%  bucket 33: 90%  bucket 34: 50%  bucket 33: 100%  bucket 34: 60%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%Getting block 36 of 60  Reserving size (126) for bucket 36  bucket 35: 30%  Calculating Z arrays for bucket 36  bucket 35: 40%  Entering block accumulator loop for bucket 36:  bucket 35: 50%  bucket 36: 10%  bucket 36: 20%Getting block 37 of 60  Reserving size (126) for bucket 37  bucket 35: 60%  bucket 36: 30%  Calculating Z arrays for bucket 37  bucket 35: 70%  bucket 36: 40%  bucket 35: 80%  Entering block accumulator loop for bucket 37:  bucket 36: 50%  bucket 35: 90%  bucket 36: 60%  bucket 35: 100%  bucket 37: 10%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 36: 70%  bucket 37: 20%  bucket 36: 80%  bucket 37: 30%  bucket 36: 90%  bucket 37: 40%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 37: 50%  bucket 37: 60%  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 38:  Entering block accumulator loop for bucket 39:  bucket 38: 10%  bucket 39: 10%  bucket 39: 20%  bucket 39: 30%  bucket 38: 20%  bucket 39: 40%  bucket 39: 50%  bucket 38: 30%  bucket 39: 60%  bucket 38: 40%  bucket 39: 70%  bucket 38: 50%  bucket 38: 60%  bucket 39: 80%  bucket 38: 70%  bucket 39: 90%  bucket 38: 80%  bucket 39: 100%  bucket 38: 90%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 40 of 60Getting block 41 of 60  Reserving size (126) for bucket 41  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Calculating Z arrays for bucket 41Getting block 42 of 60  Entering block accumulator loop for bucket 41:  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 41: 10%  bucket 40: 20%  bucket 41: 20%  bucket 40: 30%  bucket 41: 30%  bucket 40: 40%  Reserving size (126) for bucket 42  bucket 41: 40%  bucket 40: 50%  bucket 41: 50%  bucket 40: 60%  bucket 41: 60%  bucket 40: 70%  bucket 41: 70%  bucket 40: 80%  bucket 41: 80%  bucket 40: 90%  Calculating Z arrays for bucket 42  bucket 40: 100%  bucket 41: 90%  Sorting block of length 41 for bucket 40  (Using difference cover)  Entering block accumulator loop for bucket 42:  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 10%  bucket 42: 20%  bucket 42: 30%  bucket 42: 40%  bucket 42: 50%  bucket 42: 60%  Sorting block time: 00:00:00Returning block of 42 for bucket 40  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%  bucket 43: 70%  bucket 43: 80%Getting block 44 of 60  bucket 43: 90%  Reserving size (126) for bucket 44  bucket 43: 100%  Calculating Z arrays for bucket 44  Sorting block of length 121 for bucket 43  (Using difference cover)  Entering block accumulator loop for bucket 44:  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  Sorting block time: 00:00:00Returning block of 122 for bucket 43  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Entering block accumulator loop for bucket 45:  Calculating Z arrays for bucket 46  bucket 45: 10%  Entering block accumulator loop for bucket 46:  bucket 45: 20%  bucket 45: 30%  bucket 46: 10%  bucket 45: 40%  bucket 45: 50%  bucket 46: 20%  bucket 45: 60%  bucket 46: 30%  bucket 45: 70%  bucket 46: 40%  bucket 45: 80%Getting block 47 of 60  bucket 46: 50%  bucket 45: 90%  bucket 46: 60%  bucket 45: 100%  Reserving size (126) for bucket 47  Sorting block of length 79 for bucket 45  bucket 46: 70%  Calculating Z arrays for bucket 47  bucket 46: 80%  (Using difference cover)  bucket 46: 90%  Entering block accumulator loop for bucket 47:  bucket 46: 100%  bucket 47: 10%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 20%  Sorting block time: 00:00:00Returning block of 80 for bucket 45  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  Sorting block time: 00:00:00Returning block of 70 for bucket 46  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  Sorting block time: 00:00:00Returning block of 114 for bucket 48  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:Getting block 51 of 60  Reserving size (126) for bucket 51  bucket 50: 10%  Calculating Z arrays for bucket 51  bucket 50: 20%  Entering block accumulator loop for bucket 51:  bucket 50: 30%  bucket 50: 40%  bucket 51: 10%  bucket 50: 50%  bucket 51: 20%  bucket 50: 60%  bucket 51: 30%  bucket 50: 70%  bucket 51: 40%  bucket 50: 80%  bucket 51: 50%  bucket 50: 90%  bucket 51: 60%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 52:  bucket 52: 10%  bucket 52: 20%  bucket 52: 30%  bucket 52: 40%Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  bucket 52: 50%  bucket 52: 60%  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  Entering block accumulator loop for bucket 53:  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  Sorting block time: 00:00:00Returning block of 107 for bucket 52  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 55:  Entering block accumulator loop for bucket 54:  bucket 55: 10%  bucket 54: 10%  bucket 55: 20%  bucket 54: 20%  bucket 55: 30%  bucket 54: 30%  bucket 55: 40%  bucket 54: 40%  bucket 55: 50%  bucket 54: 50%  bucket 55: 60%  bucket 54: 60%  bucket 55: 70%  bucket 54: 70%  bucket 55: 80%  bucket 54: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 56  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 56:  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 56: 10%  bucket 57: 20%  bucket 56: 20%  bucket 57: 30%  bucket 56: 30%  bucket 57: 40%  bucket 56: 40%  bucket 57: 50%  bucket 56: 50%  bucket 57: 60%  bucket 56: 60%  bucket 57: 70%  bucket 56: 70%  bucket 57: 80%  bucket 57: 90%  bucket 56: 80%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 59:  bucket 59: 10%  bucket 59: 20%  bucket 59: 30%  Sorting block time: 00:00:00Returning block of 114 for bucket 58  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #11)" name="10" time="39.158353090286255">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 3 of 60  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 1Getting block 2 of 60  Entering block accumulator loop for bucket 1:  Reserving size (126) for bucket 2Getting block 4 of 60  Reserving size (126) for bucket 4  Calculating Z arrays for bucket 2  bucket 1: 10%  Calculating Z arrays for bucket 4Getting block 5 of 60  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 4:  Reserving size (126) for bucket 5  bucket 1: 20%  Calculating Z arrays for bucket 5  bucket 4: 10%  bucket 1: 30%  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 5:Getting block 6 of 60  Reserving size (126) for bucket 6  bucket 4: 20%  bucket 1: 40%Getting block 7 of 60  bucket 1: 50%  bucket 4: 30%  bucket 1: 60%  Entering block accumulator loop for bucket 3:  bucket 2: 10%  bucket 5: 10%  Calculating Z arrays for bucket 6  bucket 4: 40%  bucket 1: 70%  bucket 3: 10%  bucket 2: 20%  bucket 4: 50%  Reserving size (126) for bucket 7  bucket 2: 30%  bucket 5: 20%  bucket 1: 80%  bucket 4: 60%  bucket 3: 20%  bucket 1: 90%  Calculating Z arrays for bucket 7  bucket 2: 40%  bucket 5: 30%  bucket 4: 70%  Entering block accumulator loop for bucket 6:Getting block 8 of 60  Entering block accumulator loop for bucket 7:  Reserving size (126) for bucket 8  bucket 5: 40%  bucket 3: 30%  bucket 1: 100%  bucket 7: 10%  bucket 5: 50%  bucket 6: 10%  Calculating Z arrays for bucket 8  bucket 7: 20%  bucket 4: 80%  bucket 5: 60%  bucket 6: 20%  bucket 3: 40%  bucket 4: 90%  Sorting block of length 42 for bucket 1  bucket 6: 30%  (Using difference cover)  Entering block accumulator loop for bucket 8:  bucket 5: 70%  bucket 7: 30%  bucket 2: 50%  bucket 6: 40%  bucket 7: 40%  bucket 4: 100%  bucket 3: 50%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 2: 60%  bucket 3: 60%  bucket 8: 10%  bucket 7: 50%  bucket 3: 70%  bucket 5: 80%  bucket 8: 20%  bucket 5: 90%  bucket 2: 70%  bucket 8: 30%  Sorting block time: 00:00:00  bucket 5: 100%Returning block of 43 for bucket 1  bucket 8: 40%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 7: 60%  bucket 2: 80%  bucket 6: 50%  bucket 3: 80%  bucket 6: 60%  bucket 8: 50%  bucket 2: 90%  Sorting block time: 00:00:00  bucket 3: 90%Returning block of 69 for bucket 4  bucket 7: 70%  bucket 3: 100%  bucket 6: 70%  bucket 2: 100%  Sorting block of length 106 for bucket 3  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 8: 60%  bucket 7: 80%  bucket 6: 80%  bucket 8: 70%  bucket 7: 90%  bucket 8: 80%  bucket 6: 90%  bucket 8: 90%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 7: 100%  bucket 8: 100%  Sorting block of length 75 for bucket 7  Sorting block of length 94 for bucket 8  Sorting block time: 00:00:00  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00  (Using difference cover)  Sorting block time: 00:00:00Returning block of 64 for bucket 5Returning block of 85 for bucket 2Returning block of 91 for bucket 6Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 107 for bucket 3Getting block 9 of 60Getting block 10 of 60  Reserving size (126) for bucket 10  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  Calculating Z arrays for bucket 9  bucket 10: 30%  bucket 10: 40%  Entering block accumulator loop for bucket 9:  bucket 10: 50%  bucket 9: 10%  bucket 10: 60%  bucket 9: 20%  bucket 10: 70%  bucket 9: 30%Getting block 11 of 60  bucket 10: 80%  bucket 9: 40%  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  bucket 10: 90%  bucket 9: 50%  bucket 10: 100%  bucket 9: 60%  Sorting block of length 89 for bucket 10  (Using difference cover)  Entering block accumulator loop for bucket 11:  bucket 9: 70%  bucket 11: 10%  bucket 11: 20%  bucket 9: 80%  bucket 11: 30%  bucket 9: 90%  bucket 11: 40%  bucket 11: 50%  bucket 9: 100%  Sorting block of length 124 for bucket 9  bucket 11: 60%  (Using difference cover)  bucket 11: 70%  Sorting block time: 00:00:00Returning block of 90 for bucket 10  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  bucket 12: 30%  bucket 12: 40%  Entering block accumulator loop for bucket 13:  bucket 12: 50%  bucket 13: 10%  bucket 12: 60%  bucket 13: 20%  bucket 13: 30%  bucket 12: 70%  bucket 13: 40%  bucket 12: 80%  bucket 13: 50%  bucket 13: 60%  bucket 12: 90%  bucket 13: 70%  bucket 12: 100%  Sorting block of length 82 for bucket 12  bucket 13: 80%  (Using difference cover)  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  bucket 14: 10%  Entering block accumulator loop for bucket 15:  bucket 14: 20%  bucket 14: 30%  bucket 15: 10%  bucket 14: 40%  bucket 15: 20%  bucket 14: 50%  bucket 15: 30%  bucket 14: 60%  bucket 15: 40%  bucket 14: 70%  bucket 15: 50%  bucket 14: 80%  bucket 15: 60%  bucket 14: 90%  bucket 15: 70%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 10%  Entering block accumulator loop for bucket 18:  bucket 17: 20%  bucket 18: 10%  bucket 18: 20%  bucket 17: 30%  bucket 18: 30%  bucket 17: 40%  bucket 18: 40%  bucket 17: 50%  bucket 18: 50%  bucket 17: 60%  bucket 18: 60%  bucket 17: 70%  bucket 18: 70%  bucket 18: 80%  bucket 17: 80%  bucket 18: 90%  bucket 17: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19Getting block 20 of 60  Entering block accumulator loop for bucket 19:  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 10%  Entering block accumulator loop for bucket 20:  bucket 19: 20%  bucket 20: 10%  bucket 19: 30%  bucket 20: 20%  bucket 19: 40%  bucket 20: 30%  bucket 19: 50%  bucket 20: 40%  bucket 19: 60%  bucket 20: 50%  bucket 19: 70%  bucket 20: 60%  bucket 19: 80%  bucket 20: 70%  bucket 19: 90%  bucket 20: 80%  bucket 19: 100%  bucket 20: 90%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 21 of 60Getting block 22 of 60  Reserving size (126) for bucket 22Getting block 23 of 60  Calculating Z arrays for bucket 22  Reserving size (126) for bucket 23  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 23  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 22:  Entering block accumulator loop for bucket 23:  bucket 22: 10%  Entering block accumulator loop for bucket 21:  bucket 23: 10%  bucket 22: 20%  bucket 21: 10%  bucket 23: 20%  bucket 22: 30%  bucket 21: 20%  bucket 23: 30%  bucket 22: 40%  bucket 21: 30%  bucket 23: 40%  bucket 21: 40%  bucket 22: 50%  bucket 23: 50%  bucket 21: 50%  bucket 22: 60%  bucket 23: 60%  bucket 21: 60%  bucket 22: 70%  bucket 23: 70%  bucket 22: 80%  bucket 21: 70%  bucket 23: 80%  bucket 22: 90%  bucket 21: 80%  bucket 23: 90%  bucket 22: 100%  bucket 21: 90%  Sorting block of length 80 for bucket 22  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 21: 100%  (Using difference cover)  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 24 of 60  Reserving size (126) for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 24  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 24:  bucket 24: 10%  Entering block accumulator loop for bucket 25:  bucket 24: 20%  bucket 24: 30%  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 24: 40%  bucket 25: 50%  bucket 24: 50%  bucket 25: 60%  bucket 24: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 24: 70%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 50%  bucket 26: 60%  Entering block accumulator loop for bucket 27:  bucket 26: 70%  bucket 27: 10%  bucket 26: 80%  bucket 27: 20%  bucket 26: 90%  bucket 27: 30%  bucket 26: 100%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  Sorting block of length 107 for bucket 26  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%Getting block 30 of 60  bucket 29: 40%  Reserving size (126) for bucket 30  bucket 29: 50%  Calculating Z arrays for bucket 30  bucket 29: 60%Getting block 31 of 60  bucket 29: 70%  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  bucket 29: 80%  Entering block accumulator loop for bucket 30:  bucket 29: 90%  bucket 30: 10%  Entering block accumulator loop for bucket 31:  bucket 30: 20%  bucket 29: 100%  Sorting block of length 51 for bucket 29  bucket 30: 30%  (Using difference cover)  bucket 31: 10%  bucket 30: 40%  bucket 31: 20%  bucket 30: 50%  bucket 30: 60%  bucket 31: 30%  bucket 30: 70%  bucket 31: 40%  bucket 30: 80%  Sorting block time: 00:00:00  bucket 31: 50%Returning block of 52 for bucket 29  bucket 30: 90%  bucket 31: 60%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  bucket 32: 90%  bucket 32: 100%  Entering block accumulator loop for bucket 33:  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 33: 10%  bucket 33: 20%  bucket 33: 30%  bucket 33: 40%  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  Sorting block time: 00:00:00Returning block of 126 for bucket 32  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60Getting block 35 of 60  Reserving size (126) for bucket 35  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 35  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 35:  Entering block accumulator loop for bucket 34:  bucket 35: 10%  bucket 34: 10%  bucket 35: 20%  bucket 34: 20%  bucket 35: 30%  bucket 35: 40%  bucket 34: 30%  bucket 35: 50%  bucket 34: 40%  bucket 35: 60%  bucket 34: 50%  bucket 35: 70%  bucket 34: 60%  bucket 35: 80%  bucket 34: 70%  bucket 35: 90%  bucket 34: 80%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 36: 20%Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  bucket 36: 30%  bucket 36: 40%  Entering block accumulator loop for bucket 37:  bucket 36: 50%  bucket 37: 10%  bucket 36: 60%  bucket 37: 20%  bucket 36: 70%  bucket 37: 30%  bucket 36: 80%  bucket 37: 40%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  bucket 37: 50%  bucket 37: 60%  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%Getting block 39 of 60  bucket 38: 20%  Reserving size (126) for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Calculating Z arrays for bucket 39  bucket 38: 30%  Entering block accumulator loop for bucket 40:  Entering block accumulator loop for bucket 39:  bucket 38: 40%  bucket 40: 10%  bucket 39: 10%  bucket 38: 50%  bucket 40: 20%  bucket 38: 60%  bucket 40: 30%  bucket 38: 70%  bucket 39: 20%  bucket 40: 40%  bucket 38: 80%  bucket 39: 30%  bucket 40: 50%  bucket 38: 90%  bucket 39: 40%  bucket 40: 60%  bucket 38: 100%  bucket 39: 50%  Sorting block of length 117 for bucket 38  bucket 40: 70%  (Using difference cover)  bucket 39: 60%  bucket 40: 80%  bucket 39: 70%  bucket 40: 90%  bucket 39: 80%  bucket 40: 100%  bucket 39: 90%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Entering block accumulator loop for bucket 41:  Calculating Z arrays for bucket 42  bucket 41: 10%  Entering block accumulator loop for bucket 42:  bucket 41: 20%  bucket 42: 10%  bucket 41: 30%  bucket 42: 20%  bucket 41: 40%  bucket 42: 30%  bucket 41: 50%  bucket 42: 40%  bucket 41: 60%  bucket 42: 50%  bucket 41: 70%  bucket 42: 60%  bucket 41: 80%  bucket 42: 70%  bucket 42: 80%  bucket 41: 90%  bucket 42: 90%  bucket 41: 100%  bucket 42: 100%  Sorting block of length 88 for bucket 41  Sorting block of length 119 for bucket 42  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 44:  Entering block accumulator loop for bucket 45:  bucket 44: 10%  bucket 43: 50%  bucket 45: 10%  bucket 44: 20%  bucket 44: 30%  bucket 45: 20%  bucket 43: 60%  bucket 44: 40%  bucket 44: 50%  bucket 45: 30%  bucket 44: 60%  bucket 45: 40%  bucket 44: 70%  bucket 43: 70%  bucket 45: 50%  bucket 44: 80%  bucket 43: 80%  bucket 45: 60%  bucket 44: 90%  bucket 43: 90%  bucket 44: 100%  bucket 45: 70%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 43: 100%  Sorting block of length 121 for bucket 43  bucket 45: 80%  bucket 45: 90%  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%Getting block 47 of 60  Reserving size (126) for bucket 47  bucket 46: 60%  bucket 46: 70%  Calculating Z arrays for bucket 47  bucket 46: 80%  bucket 46: 90%  Entering block accumulator loop for bucket 47:  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  Sorting block time: 00:00:00  bucket 47: 60%Returning block of 70 for bucket 46  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  Entering block accumulator loop for bucket 51:  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  bucket 51: 10%  bucket 51: 20%  Entering block accumulator loop for bucket 52:  bucket 51: 30%  bucket 52: 10%  bucket 51: 40%  bucket 52: 20%  bucket 51: 50%  bucket 52: 30%  bucket 51: 60%  bucket 52: 40%  bucket 51: 70%  bucket 52: 50%  bucket 51: 80%  bucket 52: 60%  bucket 51: 90%  bucket 52: 70%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 80%Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  bucket 52: 90%  Sorting block time: 00:00:00Returning block of 92 for bucket 51  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  Sorting block time: 00:00:00Returning block of 107 for bucket 52  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60Getting block 55 of 60  Reserving size (126) for bucket 55  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 54:  Entering block accumulator loop for bucket 55:  bucket 54: 10%  bucket 55: 10%  bucket 54: 20%  bucket 55: 20%  bucket 54: 30%  bucket 55: 30%  bucket 54: 40%  bucket 55: 40%  bucket 54: 50%  bucket 55: 50%  bucket 54: 60%  bucket 55: 60%  bucket 54: 70%  bucket 55: 70%  bucket 54: 80%  bucket 55: 80%  bucket 54: 90%  bucket 55: 90%  bucket 54: 100%  bucket 55: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:Getting block 59 of 60  bucket 58: 10%Getting block 60 of 60  Reserving size (126) for bucket 60  bucket 58: 20%  Calculating Z arrays for bucket 60  bucket 58: 30%  Entering block accumulator loop for bucket 60:  bucket 58: 40%  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  bucket 58: 50%  bucket 58: 60%  bucket 60: 10%  bucket 58: 70%  bucket 60: 20%  bucket 58: 80%  bucket 60: 30%  bucket 58: 90%  bucket 60: 40%  bucket 58: 100%  bucket 60: 50%  Sorting block of length 113 for bucket 58  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  (Using difference cover)  Sorting block of length 101 for bucket 60  (Using difference cover)  Entering block accumulator loop for bucket 59:  bucket 59: 10%  bucket 59: 20%  bucket 59: 30%  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00HISAT2 summary stats:Total reads: 10Aligned 0 time: 0 (0.00%)Aligned 1 time: 10 (100.00%)Aligned >1 times: 0 (0.00%)Overall alignment rate: 100.00%
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #12)" name="11" time="37.972919940948486">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 3 of 60  Reserving size (126) for bucket 3Getting block 4 of 60  Reserving size (126) for bucket 4  Calculating Z arrays for bucket 3Getting block 2 of 60Getting block 8 of 60Getting block 6 of 60  Reserving size (126) for bucket 6  Reserving size (126) for bucket 8  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 3:  bucket 1: 10%  Calculating Z arrays for bucket 8Getting block 7 of 60Getting block 5 of 60  bucket 1: 20%  Reserving size (126) for bucket 5  Reserving size (126) for bucket 7  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 7  bucket 1: 30%  Entering block accumulator loop for bucket 6:  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 4  bucket 6: 10%  bucket 3: 10%  bucket 1: 40%  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 4:  Entering block accumulator loop for bucket 2:  bucket 3: 20%  bucket 1: 50%  bucket 5: 10%  bucket 7: 10%  bucket 1: 60%  bucket 3: 30%  bucket 6: 20%  Entering block accumulator loop for bucket 8:  bucket 1: 70%  bucket 8: 10%  bucket 4: 10%  bucket 6: 30%  bucket 1: 80%  bucket 7: 20%  bucket 3: 40%  bucket 8: 20%  bucket 1: 90%  bucket 5: 20%  bucket 7: 30%  bucket 8: 30%  bucket 4: 20%  bucket 2: 10%  bucket 8: 40%  bucket 3: 50%  bucket 7: 40%  bucket 2: 20%  bucket 5: 30%  bucket 6: 40%  bucket 3: 60%  bucket 1: 100%  bucket 7: 50%  bucket 8: 50%  bucket 4: 30%  Sorting block of length 42 for bucket 1  bucket 6: 50%  (Using difference cover)  bucket 3: 70%  bucket 7: 60%  bucket 8: 60%  bucket 6: 60%  bucket 2: 30%  bucket 3: 80%  bucket 5: 40%  bucket 6: 70%  bucket 2: 40%  bucket 5: 50%  bucket 7: 70%  bucket 3: 90%  bucket 2: 50%  bucket 6: 80%  bucket 8: 70%  bucket 4: 40%  bucket 7: 80%  bucket 2: 60%  bucket 3: 100%  bucket 4: 50%  bucket 6: 90%  bucket 5: 60%  bucket 8: 80%  bucket 7: 90%  Sorting block of length 106 for bucket 3  bucket 5: 70%  (Using difference cover)  bucket 8: 90%  bucket 7: 100%  bucket 4: 60%  bucket 6: 100%  bucket 5: 80%  Sorting block of length 90 for bucket 6  bucket 4: 70%  Sorting block of length 75 for bucket 7  bucket 8: 100%  (Using difference cover)  bucket 2: 70%  bucket 5: 90%  bucket 4: 80%  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 2: 80%  bucket 5: 100%  bucket 4: 90%  Sorting block of length 63 for bucket 5  (Using difference cover)  (Using difference cover)  bucket 2: 90%  bucket 4: 100%  Sorting block time: 00:00:00  Sorting block of length 68 for bucket 4  (Using difference cover)Returning block of 43 for bucket 1  bucket 2: 100%  Sorting block of length 84 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 64 for bucket 5Getting block 9 of 60  Reserving size (126) for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 9  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 10: 40%  bucket 9: 50%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 9: 70%  bucket 9: 80%  bucket 10: 70%  bucket 9: 90%  bucket 10: 80%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 90%Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12Getting block 13 of 60  Entering block accumulator loop for bucket 12:  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 12: 10%  bucket 13: 20%  bucket 12: 20%  bucket 13: 30%  bucket 12: 30%  bucket 13: 40%  bucket 12: 40%  bucket 13: 50%  bucket 12: 50%  bucket 13: 60%  bucket 12: 60%  bucket 13: 70%  bucket 12: 70%  bucket 13: 80%  bucket 12: 80%  bucket 13: 90%  bucket 12: 90%  bucket 13: 100%  bucket 12: 100%  Sorting block of length 85 for bucket 13  Sorting block of length 82 for bucket 12  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Calculating Z arrays for bucket 14Getting block 16 of 60  Entering block accumulator loop for bucket 14:  Entering block accumulator loop for bucket 15:  bucket 14: 10%  bucket 15: 10%  bucket 14: 20%  bucket 14: 30%  bucket 15: 20%  bucket 14: 40%  bucket 15: 30%  bucket 14: 50%  bucket 15: 40%  bucket 14: 60%  bucket 15: 50%  bucket 14: 70%  bucket 15: 60%  bucket 14: 80%  bucket 15: 70%  bucket 14: 90%  bucket 15: 80%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 20%  Entering block accumulator loop for bucket 18:  bucket 17: 30%  bucket 18: 10%  bucket 17: 40%  bucket 17: 50%  bucket 18: 20%  bucket 17: 60%  bucket 18: 30%  bucket 17: 70%  bucket 18: 40%  bucket 17: 80%  bucket 18: 50%  bucket 17: 90%  bucket 18: 60%  bucket 17: 100%  bucket 18: 70%  Sorting block of length 39 for bucket 17  bucket 18: 80%Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  bucket 18: 90%  (Using difference cover)  Entering block accumulator loop for bucket 19:  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:Getting block 21 of 60  bucket 20: 10%  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  Entering block accumulator loop for bucket 21:  bucket 20: 50%  bucket 20: 60%  bucket 21: 10%  bucket 20: 70%  bucket 21: 20%  bucket 20: 80%  bucket 21: 30%  bucket 20: 90%  bucket 21: 40%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 22:  Entering block accumulator loop for bucket 23:  bucket 22: 10%  bucket 23: 10%  bucket 22: 20%  bucket 23: 20%  bucket 22: 30%  bucket 23: 30%  bucket 22: 40%  bucket 23: 40%  bucket 23: 50%  bucket 22: 50%  bucket 23: 60%  bucket 22: 60%  bucket 23: 70%  bucket 23: 80%  bucket 22: 70%  bucket 23: 90%  bucket 22: 80%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%Getting block 26 of 60  bucket 25: 70%  Reserving size (126) for bucket 26  bucket 25: 80%  Calculating Z arrays for bucket 26  bucket 25: 90%  bucket 25: 100%  Entering block accumulator loop for bucket 26:  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  Sorting block time: 00:00:00Returning block of 67 for bucket 25  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28Getting block 29 of 60  Entering block accumulator loop for bucket 28:  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 10%  bucket 28: 20%  Entering block accumulator loop for bucket 29:  bucket 28: 30%  bucket 28: 40%  bucket 29: 10%  bucket 28: 50%  bucket 29: 20%  bucket 28: 60%  bucket 29: 30%  bucket 28: 70%  bucket 28: 80%  bucket 29: 40%  bucket 28: 90%  bucket 29: 50%  bucket 28: 100%  bucket 29: 60%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%Getting block 31 of 60  bucket 30: 30%  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  Entering block accumulator loop for bucket 31:  bucket 30: 70%  bucket 30: 80%  bucket 31: 10%  bucket 30: 90%  bucket 31: 20%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 34:  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 34: 10%  bucket 33: 20%  bucket 34: 20%  bucket 33: 30%  bucket 34: 30%  bucket 33: 40%Getting block 35 of 60  bucket 34: 40%  bucket 33: 50%  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  bucket 33: 60%  bucket 34: 50%  bucket 33: 70%  Entering block accumulator loop for bucket 35:  bucket 33: 80%  bucket 34: 60%  bucket 33: 90%  bucket 35: 10%  bucket 33: 100%  bucket 34: 70%  Sorting block of length 44 for bucket 33  bucket 35: 20%  (Using difference cover)  bucket 34: 80%  bucket 35: 30%  bucket 35: 40%  bucket 34: 90%  bucket 35: 50%  bucket 34: 100%  bucket 35: 60%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Entering block accumulator loop for bucket 36:  Calculating Z arrays for bucket 37  bucket 36: 10%  Entering block accumulator loop for bucket 37:  bucket 36: 20%  bucket 37: 10%  bucket 36: 30%  bucket 37: 20%  bucket 36: 40%  bucket 37: 30%  bucket 36: 50%  bucket 37: 40%  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  bucket 37: 50%  bucket 36: 90%  bucket 37: 60%  bucket 36: 100%  bucket 37: 70%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%Getting block 39 of 60  bucket 38: 100%Getting block 40 of 60  Reserving size (126) for bucket 40  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 39:  Sorting block of length 117 for bucket 38  (Using difference cover)  Entering block accumulator loop for bucket 40:  bucket 39: 10%  bucket 40: 10%  bucket 39: 20%  bucket 39: 30%  bucket 40: 20%  Sorting block time: 00:00:00Returning block of 118 for bucket 38  bucket 39: 40%  bucket 40: 30%  bucket 39: 50%  bucket 40: 40%  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 40: 50%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  Sorting block time: 00:00:00Returning block of 126 for bucket 39  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%  bucket 41: 40%  bucket 41: 50%  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:Getting block 43 of 60Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Reserving size (126) for bucket 43  bucket 42: 10%  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 44:  bucket 42: 20%  bucket 44: 10%  bucket 42: 30%  bucket 44: 20%  Entering block accumulator loop for bucket 43:  bucket 44: 30%  bucket 42: 40%  bucket 43: 10%  bucket 44: 40%  bucket 42: 50%  bucket 43: 20%  bucket 44: 50%  bucket 42: 60%  bucket 43: 30%  bucket 44: 60%  bucket 42: 70%  bucket 43: 40%  bucket 44: 70%  bucket 42: 80%  bucket 44: 80%  bucket 43: 50%  bucket 42: 90%  bucket 43: 60%  bucket 44: 90%  bucket 42: 100%  bucket 43: 70%  Sorting block of length 119 for bucket 42  bucket 43: 80%  (Using difference cover)  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%Getting block 47 of 60  Reserving size (126) for bucket 47  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  Sorting block time: 00:00:00  bucket 47: 30%Returning block of 70 for bucket 46  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48Getting block 49 of 60  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  Reserving size (126) for bucket 49  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  Sorting block time: 00:00:00Returning block of 114 for bucket 48  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  bucket 50: 20%  Entering block accumulator loop for bucket 51:  bucket 50: 30%  bucket 51: 10%  bucket 50: 40%  bucket 51: 20%  bucket 50: 50%  bucket 51: 30%  bucket 50: 60%  bucket 51: 40%  bucket 50: 70%  bucket 51: 50%  bucket 50: 80%  bucket 51: 60%  bucket 50: 90%  bucket 51: 70%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 52:  bucket 52: 10%  bucket 52: 20%  bucket 52: 30%  bucket 52: 40%  bucket 52: 50%  bucket 52: 60%  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  Sorting block time: 00:00:00  bucket 53: 80%Returning block of 107 for bucket 52  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 55:  Entering block accumulator loop for bucket 54:  bucket 55: 10%  bucket 54: 10%  bucket 55: 20%  bucket 54: 20%  bucket 55: 30%  bucket 54: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 54: 40%  bucket 55: 70%  bucket 55: 80%  bucket 54: 50%  bucket 55: 90%  bucket 54: 60%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 56 of 60Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 57:  Entering block accumulator loop for bucket 56:  bucket 57: 10%  bucket 56: 10%  bucket 57: 20%  bucket 56: 20%  bucket 57: 30%  bucket 56: 30%  bucket 57: 40%  bucket 56: 40%  bucket 57: 50%  bucket 56: 50%  bucket 57: 60%  bucket 56: 60%  bucket 57: 70%  bucket 56: 70%  bucket 57: 80%  bucket 56: 80%  bucket 57: 90%  bucket 56: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 58:  bucket 58: 10%  Entering block accumulator loop for bucket 59:  bucket 58: 20%  bucket 59: 10%  bucket 58: 30%  bucket 59: 20%  bucket 58: 40%  bucket 59: 30%  bucket 58: 50%  bucket 59: 40%  bucket 58: 60%  bucket 59: 50%  bucket 58: 70%  bucket 59: 60%  bucket 58: 80%  bucket 59: 70%  bucket 58: 90%  bucket 59: 80%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #13)" name="12" time="39.7935152053833">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 4 of 60  Reserving size (126) for bucket 4  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 4Getting block 3 of 60Getting block 5 of 60  Reserving size (126) for bucket 5  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 5  Reserving size (126) for bucket 3Getting block 2 of 60  Entering block accumulator loop for bucket 4:  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 3:Getting block 7 of 60  bucket 5: 10%  bucket 3: 10%  bucket 1: 10%Getting block 6 of 60  Reserving size (126) for bucket 6Getting block 8 of 60  Reserving size (126) for bucket 8  Reserving size (126) for bucket 7  Calculating Z arrays for bucket 8  Calculating Z arrays for bucket 2  bucket 5: 20%  bucket 1: 20%  bucket 4: 10%  Calculating Z arrays for bucket 7  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 2:  bucket 5: 30%  Entering block accumulator loop for bucket 8:  bucket 1: 30%  bucket 3: 20%  bucket 2: 10%  bucket 1: 40%  bucket 4: 20%  bucket 8: 10%  Entering block accumulator loop for bucket 7:  bucket 3: 30%  bucket 2: 20%  bucket 5: 40%  bucket 8: 20%  bucket 4: 30%  bucket 1: 50%  Entering block accumulator loop for bucket 6:  bucket 3: 40%  bucket 2: 30%  bucket 1: 60%  bucket 8: 30%  bucket 5: 50%  bucket 4: 40%  bucket 3: 50%  bucket 2: 40%  bucket 6: 10%  bucket 1: 70%  bucket 7: 10%  bucket 8: 40%  bucket 3: 60%  bucket 2: 50%  bucket 1: 80%  bucket 6: 20%  bucket 8: 50%  bucket 5: 60%  bucket 3: 70%  bucket 4: 50%  bucket 1: 90%  bucket 2: 60%  bucket 8: 60%  bucket 6: 30%  bucket 3: 80%  bucket 7: 20%  bucket 4: 60%  bucket 2: 70%  bucket 8: 70%  bucket 6: 40%  bucket 3: 90%  bucket 1: 100%  bucket 5: 70%  bucket 2: 80%  bucket 4: 70%  bucket 6: 50%  bucket 8: 80%  bucket 3: 100%  Sorting block of length 42 for bucket 1  (Using difference cover)  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 5: 80%  bucket 7: 30%  bucket 8: 90%  bucket 6: 60%  bucket 4: 80%  bucket 2: 90%  bucket 5: 90%  bucket 7: 40%  bucket 6: 70%  bucket 2: 100%  bucket 4: 90%  bucket 8: 100%  Sorting block of length 84 for bucket 2  (Using difference cover)  Sorting block of length 94 for bucket 8  bucket 6: 80%  bucket 7: 50%  bucket 5: 100%  bucket 4: 100%  bucket 7: 60%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 6: 90%  Sorting block of length 63 for bucket 5  bucket 7: 70%  (Using difference cover)  bucket 6: 100%  bucket 7: 80%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 7: 90%  (Using difference cover)  bucket 7: 100%  Sorting block time: 00:00:00  Sorting block of length 75 for bucket 7  (Using difference cover)Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 69 for bucket 4Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%Getting block 10 of 60  bucket 9: 60%  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 70%  Entering block accumulator loop for bucket 10:  bucket 9: 80%  bucket 10: 10%  bucket 9: 90%  bucket 10: 20%  bucket 10: 30%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block time: 00:00:00  Sorting block of length 89 for bucket 10  (Using difference cover)Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11Getting block 12 of 60  Calculating Z arrays for bucket 11  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 12: 50%  bucket 11: 50%  bucket 12: 60%  bucket 11: 60%  bucket 12: 70%  bucket 11: 70%  bucket 12: 80%  bucket 11: 80%  bucket 12: 90%  bucket 11: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  bucket 11: 100%  (Using difference cover)  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:Getting block 15 of 60  Reserving size (126) for bucket 15  Entering block accumulator loop for bucket 14:  bucket 13: 10%  Calculating Z arrays for bucket 15  bucket 13: 20%  bucket 14: 10%  Entering block accumulator loop for bucket 15:  bucket 14: 20%  bucket 13: 30%  bucket 15: 10%  bucket 13: 40%  bucket 15: 20%  bucket 13: 50%  bucket 14: 30%  bucket 15: 30%  bucket 13: 60%  bucket 14: 40%  bucket 15: 40%  bucket 13: 70%  bucket 14: 50%  bucket 15: 50%  bucket 13: 80%  bucket 14: 60%  bucket 15: 60%  bucket 13: 90%  bucket 15: 70%  bucket 14: 70%  bucket 13: 100%  bucket 15: 80%  bucket 14: 80%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 15: 90%  bucket 14: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16Getting block 17 of 60  Entering block accumulator loop for bucket 16:  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  bucket 16: 10%  bucket 16: 20%  Entering block accumulator loop for bucket 17:  bucket 16: 30%  bucket 17: 10%  bucket 16: 40%  bucket 17: 20%  bucket 16: 50%  bucket 17: 30%  bucket 16: 60%  bucket 17: 40%  bucket 16: 70%  bucket 17: 50%  bucket 16: 80%  bucket 17: 60%  bucket 16: 90%  bucket 17: 70%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Entering block accumulator loop for bucket 18:  Calculating Z arrays for bucket 19  bucket 18: 10%  Entering block accumulator loop for bucket 19:  bucket 18: 20%  bucket 19: 10%  bucket 18: 30%  bucket 19: 20%  bucket 18: 40%  bucket 19: 30%  bucket 18: 50%  bucket 19: 40%  bucket 18: 60%  bucket 19: 50%  bucket 18: 70%  bucket 19: 60%  bucket 18: 80%  bucket 19: 70%  bucket 18: 90%  bucket 19: 80%  bucket 18: 100%  bucket 19: 90%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  Entering block accumulator loop for bucket 22:  bucket 23: 10%  bucket 22: 10%  bucket 23: 20%  bucket 22: 20%  bucket 23: 30%  bucket 22: 30%  bucket 23: 40%  bucket 22: 40%  bucket 23: 50%  bucket 22: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  bucket 22: 60%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00  Sorting block time: 00:00:00Returning block of 65 for bucket 23Returning block of 81 for bucket 22Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24Getting block 26 of 60Getting block 25 of 60  Entering block accumulator loop for bucket 24:  Reserving size (126) for bucket 25  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Calculating Z arrays for bucket 25  bucket 24: 10%  bucket 24: 20%  Entering block accumulator loop for bucket 26:  Entering block accumulator loop for bucket 25:  bucket 24: 30%  bucket 24: 40%  bucket 26: 10%  bucket 25: 10%  bucket 24: 50%  bucket 26: 20%  bucket 25: 20%  bucket 24: 60%  bucket 26: 30%  bucket 25: 30%  bucket 24: 70%  bucket 26: 40%  bucket 25: 40%  bucket 24: 80%  bucket 26: 50%  bucket 25: 50%  bucket 24: 90%  bucket 26: 60%  bucket 25: 60%  bucket 24: 100%  Sorting block of length 68 for bucket 24  bucket 26: 70%  (Using difference cover)  bucket 25: 70%  bucket 26: 80%  bucket 25: 80%  bucket 26: 90%  bucket 25: 90%  bucket 26: 100%  bucket 25: 100%  Sorting block of length 107 for bucket 26  Sorting block of length 66 for bucket 25  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%Getting block 30 of 60  Reserving size (126) for bucket 30  bucket 29: 50%  Calculating Z arrays for bucket 30  bucket 29: 60%  bucket 29: 70%  Entering block accumulator loop for bucket 30:  bucket 29: 80%  bucket 30: 10%  bucket 29: 90%  bucket 30: 20%  bucket 29: 100%  bucket 30: 30%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  Sorting block time: 00:00:00  bucket 30: 90%Returning block of 52 for bucket 29  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 33  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 33:  Entering block accumulator loop for bucket 34:  bucket 33: 10%  bucket 34: 10%  bucket 33: 20%  bucket 34: 20%  bucket 33: 30%  bucket 34: 30%  bucket 33: 40%  bucket 34: 40%  bucket 33: 50%  bucket 34: 50%  bucket 33: 60%  bucket 34: 60%  bucket 33: 70%  bucket 34: 70%  bucket 33: 80%  bucket 34: 80%  bucket 33: 90%  bucket 34: 90%  bucket 33: 100%  bucket 34: 100%  Sorting block of length 44 for bucket 33  Sorting block of length 122 for bucket 34  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 35 of 60  Reserving size (126) for bucket 35Getting block 36 of 60  Calculating Z arrays for bucket 35  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 35:  Entering block accumulator loop for bucket 36:  bucket 35: 10%  bucket 36: 10%  bucket 36: 20%  bucket 35: 20%  bucket 36: 30%  bucket 35: 30%  bucket 36: 40%  bucket 35: 40%  bucket 36: 50%  bucket 35: 50%  bucket 36: 60%  bucket 35: 60%  bucket 36: 70%  bucket 35: 70%  bucket 36: 80%  bucket 35: 80%  bucket 36: 90%  bucket 35: 90%  bucket 36: 100%  bucket 35: 100%  Sorting block of length 120 for bucket 36  Sorting block of length 112 for bucket 35  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%  bucket 37: 20%  bucket 37: 30%  bucket 37: 40%  bucket 37: 50%Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  bucket 37: 60%  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 37: 70%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 37: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:  bucket 39: 10%Getting block 41 of 60  bucket 39: 20%  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  bucket 39: 30%  bucket 39: 40%  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%  bucket 41: 40%  bucket 41: 50%  bucket 41: 60%  bucket 39: 50%  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  Sorting block time: 00:00:00  bucket 40: 30%Returning block of 126 for bucket 39  bucket 40: 40%  bucket 40: 50%  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 42:  bucket 42: 10%  Entering block accumulator loop for bucket 43:  bucket 42: 20%  bucket 43: 10%  bucket 42: 30%  bucket 43: 20%  bucket 42: 40%  bucket 43: 30%  bucket 42: 50%  bucket 43: 40%  bucket 42: 60%  bucket 43: 50%  bucket 42: 70%  bucket 43: 60%  bucket 42: 80%  bucket 43: 70%  bucket 42: 90%  bucket 43: 80%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%Getting block 46 of 60  Reserving size (126) for bucket 46  bucket 45: 60%  Calculating Z arrays for bucket 46  bucket 45: 70%  bucket 45: 80%  Entering block accumulator loop for bucket 46:  bucket 45: 90%  bucket 46: 10%  bucket 45: 100%  Sorting block of length 79 for bucket 45  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  (Using difference cover)  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%Getting block 48 of 60  bucket 47: 50%  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  bucket 47: 60%  bucket 47: 70%  Entering block accumulator loop for bucket 48:  bucket 47: 80%  bucket 48: 10%  bucket 47: 90%  bucket 48: 20%  bucket 48: 30%  bucket 47: 100%  bucket 48: 40%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 51: 10%  bucket 51: 20%  bucket 51: 30%  bucket 51: 40%  bucket 51: 50%  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52Getting block 53 of 60  Entering block accumulator loop for bucket 52:  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  bucket 52: 10%  bucket 52: 20%  Entering block accumulator loop for bucket 53:  bucket 52: 30%  bucket 53: 10%  bucket 52: 40%  bucket 53: 20%  bucket 52: 50%  bucket 53: 30%  bucket 53: 40%  bucket 52: 60%  bucket 52: 70%  bucket 53: 50%  bucket 52: 80%  bucket 53: 60%  bucket 52: 90%  bucket 53: 70%  bucket 52: 100%  bucket 53: 80%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 54  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  Sorting block time: 00:00:00Returning block of 80 for bucket 55  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 57:Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  bucket 57: 10%  Entering block accumulator loop for bucket 58:  Entering block accumulator loop for bucket 59:  bucket 57: 20%  bucket 58: 10%  bucket 59: 10%  bucket 57: 30%  bucket 58: 20%  bucket 59: 20%  bucket 57: 40%  bucket 58: 30%  bucket 59: 30%  bucket 57: 50%  bucket 59: 40%  bucket 57: 60%  bucket 59: 50%  bucket 57: 70%  bucket 59: 60%  bucket 57: 80%  bucket 58: 40%  bucket 59: 70%  bucket 57: 90%  bucket 58: 50%  bucket 57: 100%  Sorting block of length 85 for bucket 57  bucket 58: 60%  (Using difference cover)  bucket 59: 80%  bucket 58: 70%  bucket 59: 90%  bucket 58: 80%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 110 for bucket 59  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #14)" name="13" time="39.32543754577637">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 3 of 60  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 3Getting block 5 of 60Getting block 6 of 60  Reserving size (126) for bucket 6Getting block 7 of 60  Reserving size (126) for bucket 7  Entering block accumulator loop for bucket 1:  Reserving size (126) for bucket 5Getting block 4 of 60  Reserving size (126) for bucket 4Getting block 2 of 60  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 3:  Calculating Z arrays for bucket 2  bucket 1: 10%  Entering block accumulator loop for bucket 7:  bucket 3: 10%  Entering block accumulator loop for bucket 4:  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  Entering block accumulator loop for bucket 2:  bucket 7: 10%  bucket 3: 20%  bucket 6: 10%  bucket 7: 20%  bucket 2: 10%  bucket 6: 20%Getting block 8 of 60  Reserving size (126) for bucket 8  bucket 7: 30%  bucket 4: 10%  bucket 7: 40%  bucket 4: 20%  bucket 5: 10%  bucket 2: 20%  bucket 6: 30%  bucket 1: 20%  bucket 7: 50%  bucket 3: 30%  bucket 2: 30%  bucket 3: 40%  Calculating Z arrays for bucket 8  bucket 6: 40%  bucket 2: 40%  bucket 3: 50%  bucket 6: 50%  bucket 7: 60%  bucket 5: 20%  bucket 3: 60%  bucket 6: 60%  bucket 7: 70%  bucket 4: 30%  bucket 1: 30%  Entering block accumulator loop for bucket 8:  bucket 1: 40%  bucket 4: 40%  bucket 6: 70%  bucket 2: 50%  bucket 5: 30%  bucket 7: 80%  bucket 2: 60%  bucket 4: 50%  bucket 7: 90%  bucket 1: 50%  bucket 2: 70%  bucket 6: 80%  bucket 7: 100%  bucket 3: 70%  bucket 4: 60%  bucket 2: 80%  bucket 8: 10%  bucket 2: 90%  bucket 6: 90%  bucket 3: 80%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 5: 40%  bucket 2: 100%  bucket 8: 20%  bucket 6: 100%  bucket 1: 60%  bucket 5: 50%  bucket 4: 70%  bucket 1: 70%  Sorting block of length 84 for bucket 2  bucket 3: 90%  (Using difference cover)  bucket 4: 80%  bucket 5: 60%  bucket 8: 30%  bucket 1: 80%  bucket 3: 100%  bucket 8: 40%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 5: 70%  bucket 1: 90%  bucket 8: 50%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 5: 80%  bucket 1: 100%  bucket 4: 90%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 5: 90%  bucket 8: 60%  bucket 5: 100%  bucket 4: 100%  Sorting block of length 63 for bucket 5  bucket 8: 70%  (Using difference cover)  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 64 for bucket 5Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%Getting block 10 of 60  Reserving size (126) for bucket 10  bucket 9: 90%  Calculating Z arrays for bucket 10  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 80%Getting block 13 of 60  bucket 11: 90%  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 12:  bucket 11: 100%  Sorting block of length 95 for bucket 11  Entering block accumulator loop for bucket 13:  bucket 12: 10%  bucket 13: 10%  (Using difference cover)  bucket 12: 20%  bucket 13: 20%  bucket 12: 30%  bucket 13: 30%  bucket 12: 40%  bucket 13: 40%  bucket 12: 50%  bucket 13: 50%  bucket 12: 60%  bucket 13: 60%  bucket 12: 70%  bucket 13: 70%  bucket 12: 80%  Sorting block time: 00:00:00Returning block of 96 for bucket 11  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  Sorting block time: 00:00:00Returning block of 83 for bucket 14  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 17: 10%  bucket 18: 20%  bucket 17: 20%  bucket 18: 30%  bucket 17: 30%  bucket 18: 40%  bucket 17: 40%  bucket 18: 50%  bucket 17: 50%  bucket 18: 60%  bucket 17: 60%  bucket 18: 70%  bucket 17: 70%  bucket 18: 80%  bucket 17: 80%  bucket 18: 90%  bucket 17: 90%  bucket 18: 100%  bucket 17: 100%  Sorting block of length 122 for bucket 18  Sorting block of length 39 for bucket 17  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 19:  bucket 19: 10%  Entering block accumulator loop for bucket 20:  bucket 19: 20%Getting block 21 of 60  Reserving size (126) for bucket 21  bucket 20: 10%  Calculating Z arrays for bucket 21  bucket 19: 30%  bucket 20: 20%  bucket 19: 40%  Entering block accumulator loop for bucket 21:  bucket 19: 50%  bucket 20: 30%  bucket 19: 60%  bucket 20: 40%  bucket 21: 10%  bucket 19: 70%  bucket 20: 50%  bucket 21: 20%  bucket 19: 80%  bucket 20: 60%  bucket 21: 30%  bucket 19: 90%  bucket 20: 70%  bucket 21: 40%  bucket 19: 100%  bucket 20: 80%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 21: 50%  bucket 20: 90%  bucket 21: 60%  bucket 20: 100%  bucket 21: 70%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 21: 80%  Sorting block time: 00:00:00Returning block of 108 for bucket 19  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  Entering block accumulator loop for bucket 23:  bucket 22: 50%  bucket 23: 10%  bucket 22: 60%  bucket 23: 20%  bucket 22: 70%  bucket 23: 30%Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  bucket 22: 80%  bucket 23: 40%  bucket 22: 90%  bucket 23: 50%  bucket 22: 100%  bucket 23: 60%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  Sorting block time: 00:00:00  bucket 24: 60%Returning block of 65 for bucket 23  bucket 24: 70%  bucket 24: 80%  Sorting block time: 00:00:00  bucket 24: 90%Returning block of 81 for bucket 22  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 25:  Entering block accumulator loop for bucket 26:  bucket 25: 10%  bucket 26: 10%  bucket 25: 20%  bucket 26: 20%  bucket 25: 30%  bucket 26: 30%  bucket 25: 40%  bucket 26: 40%  bucket 25: 50%  bucket 26: 50%  bucket 25: 60%  bucket 26: 60%  bucket 25: 70%  bucket 26: 70%  bucket 25: 80%  bucket 26: 80%  bucket 25: 90%  bucket 26: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 28: 10%  bucket 29: 90%  bucket 28: 20%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  bucket 30: 10%  bucket 30: 20%  Entering block accumulator loop for bucket 31:  bucket 30: 30%  bucket 31: 10%  bucket 30: 40%  bucket 31: 20%  bucket 31: 30%  bucket 30: 50%  bucket 31: 40%  bucket 30: 60%  bucket 31: 50%  bucket 31: 60%  bucket 30: 70%  bucket 31: 70%  bucket 30: 80%  bucket 31: 80%  bucket 30: 90%  bucket 31: 90%  bucket 30: 100%  bucket 31: 100%  Sorting block of length 124 for bucket 30  Sorting block of length 110 for bucket 31  (Using difference cover)  (Using difference cover)Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Entering block accumulator loop for bucket 32:  Sorting block time: 00:00:00Returning block of 111 for bucket 31  bucket 32: 10%  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 33: 20%  bucket 33: 30%  bucket 33: 40%  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34Getting block 35 of 60  Entering block accumulator loop for bucket 34:  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  bucket 34: 10%  bucket 34: 20%  Entering block accumulator loop for bucket 35:  bucket 34: 30%  bucket 34: 40%  bucket 35: 10%  bucket 34: 50%  bucket 35: 20%  bucket 34: 60%  bucket 35: 30%  bucket 34: 70%  bucket 35: 40%  bucket 34: 80%  bucket 35: 50%  bucket 34: 90%  bucket 35: 60%  bucket 34: 100%  bucket 35: 70%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Entering block accumulator loop for bucket 36:  Calculating Z arrays for bucket 37  bucket 36: 10%  Entering block accumulator loop for bucket 37:  bucket 36: 20%  bucket 36: 30%  bucket 37: 10%  bucket 36: 40%  bucket 37: 20%  bucket 36: 50%  bucket 37: 30%  bucket 36: 60%  bucket 37: 40%  bucket 36: 70%  bucket 37: 50%  bucket 36: 80%  bucket 37: 60%  bucket 36: 90%  bucket 37: 70%  bucket 37: 80%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 39:  bucket 39: 10%  Entering block accumulator loop for bucket 40:  bucket 39: 20%  bucket 39: 30%  bucket 40: 10%  bucket 39: 40%  bucket 40: 20%  bucket 39: 50%  bucket 40: 30%  bucket 39: 60%  bucket 39: 70%  bucket 40: 40%  bucket 39: 80%  bucket 40: 50%  bucket 39: 90%  bucket 40: 60%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  Sorting block time: 00:00:00  bucket 40: 100%Returning block of 126 for bucket 39  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41Getting block 42 of 60  Entering block accumulator loop for bucket 41:  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  bucket 41: 10%  Entering block accumulator loop for bucket 42:  bucket 41: 20%  bucket 41: 30%  bucket 42: 10%  bucket 41: 40%  bucket 41: 50%  bucket 42: 20%  bucket 41: 60%  bucket 42: 30%  bucket 41: 70%  bucket 41: 80%  bucket 42: 40%  bucket 41: 90%  bucket 42: 50%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  bucket 43: 30%Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  bucket 43: 40%  Entering block accumulator loop for bucket 44:  bucket 43: 50%  Entering block accumulator loop for bucket 45:  bucket 44: 10%  bucket 43: 60%  bucket 45: 10%  bucket 44: 20%  bucket 43: 70%  bucket 45: 20%  bucket 44: 30%  bucket 45: 30%  bucket 43: 80%  bucket 44: 40%  bucket 43: 90%  bucket 44: 50%  bucket 43: 100%  bucket 44: 60%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 45: 40%  bucket 44: 70%  bucket 45: 50%  bucket 44: 80%  bucket 45: 60%  bucket 44: 90%  bucket 45: 70%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  Sorting block time: 00:00:00Returning block of 70 for bucket 46  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49Getting block 50 of 60  Calculating Z arrays for bucket 49  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Entering block accumulator loop for bucket 49:  Entering block accumulator loop for bucket 50:  Calculating Z arrays for bucket 51  bucket 50: 10%  bucket 49: 10%  Entering block accumulator loop for bucket 51:  bucket 50: 20%  bucket 51: 10%  bucket 50: 30%  bucket 49: 20%  bucket 51: 20%  bucket 49: 30%  bucket 51: 30%Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  bucket 49: 40%  bucket 51: 40%  bucket 49: 50%  bucket 51: 50%  bucket 50: 40%  bucket 49: 60%  bucket 51: 60%  Entering block accumulator loop for bucket 52:  bucket 49: 70%  bucket 51: 70%  bucket 50: 50%  bucket 49: 80%  bucket 51: 80%  bucket 49: 90%  bucket 52: 10%  bucket 49: 100%  Sorting block of length 74 for bucket 49  bucket 52: 20%  bucket 50: 60%  bucket 51: 90%  bucket 52: 30%  (Using difference cover)  bucket 51: 100%  bucket 52: 40%  Sorting block of length 91 for bucket 51  bucket 52: 50%  (Using difference cover)  bucket 52: 60%  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 53 of 60Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 54:  bucket 54: 10%  Entering block accumulator loop for bucket 53:  bucket 54: 20%  bucket 54: 30%  bucket 53: 10%  bucket 54: 40%  bucket 53: 20%  bucket 54: 50%  bucket 53: 30%  bucket 54: 60%  bucket 54: 70%  bucket 53: 40%  bucket 54: 80%  bucket 54: 90%  bucket 53: 50%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Sorting block of length 79 for bucket 55  (Using difference cover)  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  Sorting block time: 00:00:00Returning block of 80 for bucket 55  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 59:  bucket 59: 10%  Calculating Z arrays for bucket 58  bucket 59: 20%  bucket 59: 30%  Entering block accumulator loop for bucket 58:  bucket 59: 40%  bucket 59: 50%  bucket 58: 10%  bucket 59: 60%  bucket 58: 20%  bucket 59: 70%  bucket 58: 30%  bucket 59: 80%  bucket 58: 40%  bucket 59: 90%  bucket 58: 50%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #15)" name="14" time="42.83985424041748">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 3 of 60  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2Getting block 4 of 60  Reserving size (126) for bucket 4Getting block 6 of 60Getting block 7 of 60  Reserving size (126) for bucket 7  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 2:Getting block 8 of 60Getting block 5 of 60  Reserving size (126) for bucket 6  Entering block accumulator loop for bucket 4:  bucket 2: 10%  Reserving size (126) for bucket 5  Calculating Z arrays for bucket 6  Reserving size (126) for bucket 8  Entering block accumulator loop for bucket 6:  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 5  bucket 4: 10%  bucket 2: 20%  bucket 6: 10%  Entering block accumulator loop for bucket 7:  bucket 6: 20%  Entering block accumulator loop for bucket 3:  bucket 4: 20%  bucket 2: 30%  bucket 7: 10%  bucket 3: 10%  bucket 1: 10%  bucket 3: 20%  bucket 2: 40%  Entering block accumulator loop for bucket 5:  bucket 1: 20%  bucket 5: 10%  bucket 2: 50%  bucket 3: 30%  bucket 5: 20%  bucket 1: 30%  bucket 5: 30%  bucket 7: 20%  bucket 4: 30%  bucket 1: 40%  bucket 6: 30%  bucket 5: 40%  bucket 2: 60%  bucket 7: 30%  Calculating Z arrays for bucket 8  bucket 2: 70%  bucket 6: 40%  bucket 7: 40%  bucket 4: 40%  bucket 1: 50%  bucket 3: 40%  bucket 6: 50%  bucket 7: 50%  bucket 5: 50%  bucket 2: 80%  bucket 6: 60%  bucket 7: 60%  Entering block accumulator loop for bucket 8:  bucket 4: 50%  bucket 5: 60%  bucket 3: 50%  bucket 2: 90%  bucket 1: 60%  bucket 4: 60%  bucket 5: 70%  bucket 3: 60%  bucket 1: 70%  bucket 8: 10%  bucket 2: 100%  bucket 5: 80%  bucket 7: 70%  bucket 4: 70%  Sorting block of length 84 for bucket 2  bucket 8: 20%  (Using difference cover)  bucket 6: 70%  bucket 5: 90%  bucket 7: 80%  bucket 4: 80%  bucket 6: 80%  bucket 3: 70%  bucket 7: 90%  bucket 4: 90%  bucket 5: 100%  bucket 8: 30%  bucket 4: 100%  bucket 1: 80%  bucket 3: 80%  Sorting block of length 63 for bucket 5  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 6: 90%  bucket 3: 90%  bucket 1: 90%  bucket 8: 40%  bucket 7: 100%  bucket 3: 100%  bucket 1: 100%  Sorting block of length 106 for bucket 3  Sorting block of length 42 for bucket 1  (Using difference cover)  (Using difference cover)  bucket 8: 50%  Sorting block of length 75 for bucket 7  bucket 6: 100%  (Using difference cover)  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  (Using difference cover)  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 76 for bucket 7Getting block 9 of 60  Reserving size (126) for bucket 9Getting block 10 of 60  Calculating Z arrays for bucket 9Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 9:  bucket 9: 10%  Entering block accumulator loop for bucket 11:  bucket 9: 20%  bucket 9: 30%  bucket 11: 10%  bucket 9: 40%  bucket 11: 20%  bucket 9: 50%  bucket 11: 30%  bucket 9: 60%  bucket 11: 40%  bucket 9: 70%  bucket 11: 50%  bucket 11: 60%  bucket 9: 80%  bucket 11: 70%  bucket 9: 90%  Reserving size (126) for bucket 10  bucket 9: 100%  Calculating Z arrays for bucket 10  Sorting block of length 124 for bucket 9  bucket 11: 80%  (Using difference cover)  bucket 11: 90%  Entering block accumulator loop for bucket 10:  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14Getting block 15 of 60  Entering block accumulator loop for bucket 14:  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  Entering block accumulator loop for bucket 15:  bucket 14: 40%  bucket 15: 10%  bucket 14: 50%  bucket 15: 20%  bucket 14: 60%  bucket 15: 30%  bucket 14: 70%  bucket 15: 40%  bucket 14: 80%  bucket 15: 50%  bucket 14: 90%  bucket 14: 100%  bucket 15: 60%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Entering block accumulator loop for bucket 16:  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  Sorting block time: 00:00:00  bucket 16: 40%Returning block of 40 for bucket 17  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 18:  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 18: 10%  bucket 19: 20%  bucket 19: 30%  bucket 18: 20%  bucket 19: 40%  bucket 18: 30%  bucket 19: 50%  bucket 19: 60%  bucket 18: 40%  bucket 19: 70%  bucket 18: 50%  bucket 19: 80%  bucket 19: 90%  bucket 18: 60%Getting block 20 of 60  bucket 19: 100%  bucket 18: 70%  Sorting block of length 107 for bucket 19  (Using difference cover)  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  bucket 18: 80%  bucket 18: 90%  Entering block accumulator loop for bucket 20:  bucket 18: 100%  Sorting block of length 122 for bucket 18  bucket 20: 10%  (Using difference cover)  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%Getting block 23 of 60  Reserving size (126) for bucket 23  bucket 22: 60%  Calculating Z arrays for bucket 23  bucket 22: 70%  bucket 22: 80%  Entering block accumulator loop for bucket 23:  bucket 22: 90%  bucket 23: 10%  bucket 22: 100%  bucket 23: 20%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%Getting block 24 of 60  Reserving size (126) for bucket 24  bucket 23: 90%  Calculating Z arrays for bucket 24  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  Sorting block time: 00:00:00Returning block of 65 for bucket 23  bucket 24: 60%  Sorting block time: 00:00:00  bucket 24: 70%Returning block of 81 for bucket 22  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 28:  Entering block accumulator loop for bucket 27:  bucket 28: 10%  bucket 28: 20%  bucket 27: 10%  bucket 28: 30%  bucket 27: 20%  bucket 28: 40%  bucket 27: 30%  bucket 28: 50%  bucket 27: 40%  bucket 28: 60%  bucket 27: 50%  bucket 28: 70%  bucket 27: 60%  bucket 28: 80%  bucket 27: 70%  bucket 28: 90%  bucket 27: 80%  bucket 28: 100%  bucket 27: 90%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 30:  Entering block accumulator loop for bucket 29:  bucket 30: 10%  bucket 29: 10%  bucket 30: 20%  bucket 29: 20%  bucket 30: 30%  bucket 29: 30%  bucket 30: 40%  bucket 29: 40%  bucket 30: 50%  bucket 29: 50%  bucket 29: 60%  bucket 30: 60%  bucket 29: 70%  bucket 30: 70%  bucket 29: 80%  bucket 30: 80%  bucket 29: 90%  bucket 30: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60Getting block 33 of 60  Reserving size (126) for bucket 33Getting block 32 of 60  Calculating Z arrays for bucket 33  Reserving size (126) for bucket 31  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 31  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 33:  bucket 33: 10%  Entering block accumulator loop for bucket 31:  Entering block accumulator loop for bucket 32:  bucket 33: 20%  bucket 31: 10%  bucket 33: 30%  bucket 32: 10%  bucket 33: 40%  bucket 32: 20%  bucket 33: 50%  bucket 32: 30%  bucket 31: 20%  bucket 33: 60%  bucket 32: 40%  bucket 31: 30%  bucket 33: 70%  bucket 32: 50%  bucket 31: 40%  bucket 33: 80%  bucket 32: 60%  bucket 33: 90%  bucket 31: 50%  bucket 32: 70%  bucket 33: 100%  bucket 31: 60%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 32: 80%  bucket 31: 70%  bucket 31: 80%  bucket 32: 90%  bucket 31: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 34: 20%  bucket 34: 30%  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 35:  Entering block accumulator loop for bucket 36:  bucket 35: 10%  bucket 36: 10%  bucket 35: 20%  bucket 36: 20%  bucket 35: 30%  bucket 36: 30%  bucket 35: 40%  bucket 36: 40%  bucket 35: 50%  bucket 36: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 36: 60%  bucket 35: 90%Getting block 37 of 60  Reserving size (126) for bucket 37  bucket 36: 70%  Calculating Z arrays for bucket 37  bucket 35: 100%  bucket 36: 80%  Entering block accumulator loop for bucket 37:  bucket 36: 90%  bucket 37: 10%  bucket 36: 100%  bucket 37: 20%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 37: 30%  bucket 37: 40%  bucket 37: 50%  bucket 37: 60%  Sorting block time: 00:00:00  bucket 37: 70%Returning block of 113 for bucket 35  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:Getting block 40 of 60  Reserving size (126) for bucket 40  bucket 39: 10%  Calculating Z arrays for bucket 40  bucket 39: 20%  Entering block accumulator loop for bucket 40:  bucket 39: 30%  bucket 40: 10%  bucket 39: 40%  bucket 40: 20%  bucket 39: 50%  bucket 40: 30%  bucket 39: 60%  bucket 40: 40%  bucket 39: 70%  bucket 40: 50%  bucket 39: 80%  bucket 40: 60%  bucket 39: 90%  bucket 40: 70%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 41:  Entering block accumulator loop for bucket 42:  bucket 42: 10%  bucket 42: 20%  bucket 41: 10%  bucket 42: 30%  bucket 41: 20%  bucket 42: 40%  bucket 41: 30%  bucket 42: 50%  bucket 41: 40%  bucket 42: 60%  bucket 41: 50%  bucket 42: 70%  bucket 41: 60%  bucket 42: 80%  bucket 41: 70%  bucket 42: 90%  bucket 41: 80%  bucket 42: 100%  bucket 41: 90%  Sorting block of length 119 for bucket 42  (Using difference cover)  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:Getting block 44 of 60  Reserving size (126) for bucket 44  bucket 43: 10%  Calculating Z arrays for bucket 44  bucket 43: 20%  Entering block accumulator loop for bucket 44:  bucket 43: 30%  bucket 44: 10%  bucket 43: 40%  bucket 44: 20%  bucket 43: 50%  bucket 44: 30%  bucket 43: 60%  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  bucket 44: 40%  bucket 43: 100%  Sorting block of length 121 for bucket 43  bucket 44: 50%  (Using difference cover)  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 45:  bucket 45: 10%  Entering block accumulator loop for bucket 46:  bucket 45: 20%  bucket 45: 30%  bucket 46: 10%  bucket 45: 40%  bucket 46: 20%  bucket 45: 50%  bucket 46: 30%  bucket 45: 60%  bucket 46: 40%  bucket 45: 70%  bucket 46: 50%  bucket 45: 80%  bucket 46: 60%  bucket 46: 70%  bucket 45: 90%  bucket 46: 80%  bucket 45: 100%  Sorting block of length 79 for bucket 45  bucket 46: 90%  (Using difference cover)  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:Getting block 48 of 60  bucket 47: 10%  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  bucket 47: 20%Getting block 49 of 60  Entering block accumulator loop for bucket 48:  bucket 47: 30%  Reserving size (126) for bucket 49  bucket 48: 10%  Calculating Z arrays for bucket 49  bucket 47: 40%  bucket 48: 20%  bucket 47: 50%  bucket 48: 30%  bucket 47: 60%  bucket 48: 40%  bucket 47: 70%  Entering block accumulator loop for bucket 49:  bucket 48: 50%  bucket 49: 10%  bucket 48: 60%  bucket 49: 20%  bucket 47: 80%  bucket 48: 70%  bucket 47: 90%  bucket 49: 30%  bucket 47: 100%  bucket 48: 80%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 49: 40%  bucket 48: 90%  bucket 49: 50%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 52:  Entering block accumulator loop for bucket 51:  bucket 52: 10%  bucket 51: 10%  bucket 52: 20%  bucket 51: 20%  bucket 52: 30%  bucket 51: 30%  bucket 52: 40%  bucket 51: 40%  bucket 52: 50%  bucket 51: 50%  bucket 52: 60%  bucket 51: 60%  bucket 51: 70%  bucket 52: 70%  bucket 51: 80%  bucket 52: 80%  bucket 51: 90%  bucket 52: 90%  bucket 52: 100%  bucket 51: 100%  Sorting block of length 106 for bucket 52  Sorting block of length 91 for bucket 51  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 55  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 55:  Entering block accumulator loop for bucket 56:  bucket 55: 10%  bucket 56: 10%  bucket 55: 20%  bucket 56: 20%  bucket 55: 30%  bucket 56: 30%  bucket 55: 40%  bucket 56: 40%  bucket 55: 50%  bucket 56: 50%  bucket 55: 60%  bucket 56: 60%  bucket 55: 70%  bucket 56: 70%  bucket 55: 80%  bucket 56: 80%  bucket 55: 90%  bucket 56: 90%  bucket 55: 100%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59Getting block 60 of 60  Entering block accumulator loop for bucket 59:  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  bucket 59: 10%  bucket 59: 20%  bucket 59: 30%  bucket 59: 40%  bucket 59: 50%  Entering block accumulator loop for bucket 60:  bucket 59: 60%  bucket 60: 10%  bucket 59: 70%  bucket 60: 20%  bucket 60: 30%  bucket 59: 80%  bucket 60: 40%  bucket 60: 50%  bucket 59: 90%  bucket 60: 60%  bucket 60: 70%  bucket 59: 100%  bucket 60: 80%  Sorting block of length 109 for bucket 59  (Using difference cover)  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    3 (30.00%) aligned concordantly 0 times    7 (70.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    3 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    3 pairs aligned 0 times concordantly or discordantly; of these:      6 mates make up the pairs; of these:        3 (50.00%) aligned 0 times        3 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times85.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #16)" name="15" time="44.3554208278656">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60Getting block 3 of 60Getting block 5 of 60  Reserving size (126) for bucket 2Getting block 4 of 60Getting block 7 of 60  Reserving size (126) for bucket 4  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 1  Reserving size (126) for bucket 7  Calculating Z arrays for bucket 4Getting block 8 of 60  Entering block accumulator loop for bucket 1:  Reserving size (126) for bucket 8Getting block 6 of 60  Reserving size (126) for bucket 5  Calculating Z arrays for bucket 8  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 4:  Calculating Z arrays for bucket 3  Reserving size (126) for bucket 6  bucket 4: 10%  Entering block accumulator loop for bucket 7:  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 3:  bucket 1: 10%  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 2  bucket 4: 20%  bucket 7: 10%  bucket 4: 30%  bucket 7: 20%  bucket 1: 20%  Entering block accumulator loop for bucket 8:  Entering block accumulator loop for bucket 6:  bucket 4: 40%  Entering block accumulator loop for bucket 2:  bucket 4: 50%  bucket 1: 30%  Entering block accumulator loop for bucket 5:  bucket 2: 10%  bucket 6: 10%  bucket 8: 10%  bucket 5: 10%  bucket 3: 10%  bucket 1: 40%  bucket 4: 60%  bucket 7: 30%  bucket 3: 20%  bucket 8: 20%  bucket 2: 20%  bucket 4: 70%  bucket 7: 40%  bucket 3: 30%  bucket 6: 20%  bucket 1: 50%  bucket 2: 30%  bucket 3: 40%  bucket 6: 30%  bucket 5: 20%  bucket 4: 80%  bucket 2: 40%  bucket 7: 50%  bucket 3: 50%  bucket 6: 40%  bucket 1: 60%  bucket 8: 30%  bucket 4: 90%  bucket 7: 60%  bucket 3: 60%  bucket 1: 70%  bucket 4: 100%  bucket 8: 40%  bucket 6: 50%  bucket 3: 70%  bucket 2: 50%  bucket 1: 80%  bucket 3: 80%  bucket 2: 60%  bucket 8: 50%  bucket 6: 60%  Sorting block of length 68 for bucket 4  bucket 7: 70%  bucket 2: 70%  bucket 3: 90%  bucket 8: 60%  bucket 6: 70%  bucket 2: 80%  bucket 5: 30%  (Using difference cover)  bucket 3: 100%  bucket 6: 80%  bucket 2: 90%  bucket 1: 90%  bucket 5: 40%  bucket 2: 100%  bucket 1: 100%  Sorting block of length 106 for bucket 3  Sorting block of length 84 for bucket 2  bucket 5: 50%  (Using difference cover)  (Using difference cover)  Sorting block of length 42 for bucket 1  bucket 8: 70%  (Using difference cover)  bucket 7: 80%  bucket 5: 60%  bucket 6: 90%  bucket 8: 80%  bucket 5: 70%  bucket 7: 90%  bucket 6: 100%  bucket 8: 90%  Sorting block of length 90 for bucket 6  bucket 7: 100%  (Using difference cover)  bucket 8: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 5: 80%  Sorting block time: 00:00:00Returning block of 69 for bucket 4  bucket 5: 90%  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 107 for bucket 3Getting block 9 of 60  Reserving size (126) for bucket 9Getting block 10 of 60  Calculating Z arrays for bucket 9  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 10: 40%  bucket 9: 60%  bucket 10: 50%  bucket 9: 70%  bucket 10: 60%  bucket 9: 80%  bucket 10: 70%  bucket 9: 90%  bucket 10: 80%  bucket 9: 100%  bucket 10: 90%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%Getting block 12 of 60  bucket 11: 100%  Reserving size (126) for bucket 12  Sorting block of length 95 for bucket 11  (Using difference cover)  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  Sorting block time: 00:00:00Returning block of 96 for bucket 11  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%Getting block 14 of 60  bucket 13: 50%  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 60%  Entering block accumulator loop for bucket 14:  bucket 13: 70%  bucket 14: 10%  bucket 13: 80%  bucket 14: 20%  bucket 13: 90%  bucket 14: 30%  bucket 13: 100%  bucket 14: 40%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Entering block accumulator loop for bucket 15:  Calculating Z arrays for bucket 16  bucket 15: 10%Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 16:  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 16: 10%  bucket 15: 50%  bucket 16: 20%  bucket 15: 60%  Entering block accumulator loop for bucket 17:  bucket 16: 30%  bucket 15: 70%  bucket 15: 80%  bucket 16: 40%  bucket 17: 10%  bucket 15: 90%  bucket 16: 50%  bucket 15: 100%  bucket 17: 20%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 60%  bucket 17: 30%  bucket 16: 70%  bucket 17: 40%  bucket 16: 80%  bucket 17: 50%  bucket 16: 90%  bucket 17: 60%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Entering block accumulator loop for bucket 18:  Calculating Z arrays for bucket 19  bucket 18: 10%  bucket 18: 20%  Entering block accumulator loop for bucket 19:  bucket 18: 30%  bucket 18: 40%  bucket 19: 10%  bucket 18: 50%  bucket 18: 60%  bucket 19: 20%  bucket 18: 70%  bucket 19: 30%  bucket 18: 80%  bucket 19: 40%  bucket 18: 90%  bucket 19: 50%  bucket 18: 100%  bucket 19: 60%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%Getting block 21 of 60  Reserving size (126) for bucket 21  bucket 20: 40%  Calculating Z arrays for bucket 21  bucket 20: 50%  Entering block accumulator loop for bucket 21:  bucket 20: 60%  bucket 20: 70%  bucket 21: 10%  bucket 20: 80%  bucket 21: 20%  bucket 20: 90%  bucket 21: 30%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 21: 40%  bucket 21: 50%Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  bucket 21: 60%  Sorting block time: 00:00:00  Entering block accumulator loop for bucket 22:Returning block of 98 for bucket 20  bucket 21: 70%  bucket 22: 10%  bucket 21: 80%  bucket 22: 20%  bucket 21: 90%  bucket 22: 30%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  Entering block accumulator loop for bucket 24:  bucket 23: 50%  bucket 23: 60%  bucket 24: 10%  bucket 23: 70%  bucket 24: 20%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  bucket 24: 30%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25Getting block 26 of 60  Entering block accumulator loop for bucket 25:  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  bucket 25: 10%  bucket 25: 20%  Entering block accumulator loop for bucket 26:  bucket 25: 30%  bucket 26: 10%  bucket 25: 40%  bucket 26: 20%  bucket 25: 50%  bucket 26: 30%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 26: 40%  bucket 25: 90%  bucket 26: 50%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 27:  Entering block accumulator loop for bucket 28:  bucket 27: 10%  bucket 28: 10%  bucket 27: 20%  bucket 28: 20%  bucket 27: 30%  bucket 28: 30%  bucket 27: 40%  bucket 28: 40%  bucket 27: 50%  bucket 28: 50%  bucket 27: 60%  bucket 28: 60%  bucket 27: 70%  bucket 28: 70%  bucket 27: 80%  bucket 28: 80%  bucket 27: 90%  bucket 28: 90%  bucket 27: 100%  bucket 28: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Entering block accumulator loop for bucket 29:  Calculating Z arrays for bucket 30  bucket 29: 10%  Entering block accumulator loop for bucket 30:  bucket 29: 20%  bucket 30: 10%  bucket 29: 30%  bucket 30: 20%  bucket 29: 40%  bucket 30: 30%  bucket 29: 50%  bucket 30: 40%  bucket 29: 60%  bucket 30: 50%  bucket 29: 70%  bucket 30: 60%  bucket 29: 80%  bucket 30: 70%  bucket 29: 90%  bucket 30: 80%  bucket 29: 100%  bucket 30: 90%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%Getting block 32 of 60  Reserving size (126) for bucket 32  bucket 31: 20%  Calculating Z arrays for bucket 32  bucket 31: 30%  Entering block accumulator loop for bucket 32:  bucket 31: 40%  bucket 32: 10%  bucket 31: 50%  bucket 32: 20%  bucket 31: 60%  bucket 32: 30%  bucket 31: 70%  bucket 32: 40%  bucket 31: 80%  bucket 32: 50%  bucket 31: 90%  bucket 32: 60%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 34: 20%  bucket 34: 30%  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  Calculating Z arrays for bucket 33  bucket 34: 70%  Entering block accumulator loop for bucket 33:  bucket 34: 80%  bucket 33: 10%  bucket 34: 90%  bucket 33: 20%  bucket 34: 100%  bucket 33: 30%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 33: 40%  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 60  Entering block accumulator loop for bucket 36:  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  bucket 36: 10%  Entering block accumulator loop for bucket 37:  bucket 36: 20%  bucket 37: 10%  bucket 36: 30%  bucket 37: 20%  bucket 37: 30%  bucket 36: 40%  bucket 37: 40%  bucket 37: 50%  bucket 36: 50%  bucket 37: 60%  bucket 36: 60%  bucket 37: 70%  bucket 36: 70%  bucket 37: 80%  bucket 36: 80%  bucket 37: 90%  bucket 36: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 39:  Entering block accumulator loop for bucket 40:  bucket 39: 10%  bucket 40: 10%  bucket 39: 20%  bucket 40: 20%  bucket 39: 30%  bucket 40: 30%  bucket 39: 40%  bucket 40: 40%  bucket 39: 50%  bucket 40: 50%  bucket 39: 60%  bucket 40: 60%  bucket 39: 70%  bucket 40: 70%  bucket 39: 80%  bucket 40: 80%  bucket 39: 90%  bucket 40: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 41:  bucket 41: 10%  Entering block accumulator loop for bucket 42:  bucket 41: 20%  bucket 42: 10%  bucket 41: 30%  bucket 42: 20%  bucket 41: 40%  bucket 42: 30%  bucket 41: 50%  bucket 42: 40%  bucket 41: 60%  bucket 42: 50%  bucket 41: 70%  bucket 42: 60%  bucket 41: 80%  bucket 42: 70%  bucket 41: 90%  bucket 42: 80%  bucket 41: 100%  bucket 42: 90%  Sorting block of length 88 for bucket 41  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  Calculating Z arrays for bucket 44  bucket 43: 40%  bucket 43: 50%  Entering block accumulator loop for bucket 44:  bucket 43: 60%  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  Sorting block time: 00:00:00Returning block of 122 for bucket 43  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%Getting block 46 of 60  bucket 45: 20%Getting block 47 of 60  bucket 45: 30%  Reserving size (126) for bucket 47  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 47  Calculating Z arrays for bucket 46  bucket 45: 40%  bucket 45: 50%  Entering block accumulator loop for bucket 46:  Entering block accumulator loop for bucket 47:  bucket 45: 60%  bucket 46: 10%  bucket 47: 10%  bucket 45: 70%  bucket 46: 20%  bucket 47: 20%  bucket 45: 80%  bucket 47: 30%  bucket 46: 30%  bucket 45: 90%  bucket 47: 40%  bucket 45: 100%  bucket 46: 40%  Sorting block of length 79 for bucket 45  (Using difference cover)  bucket 47: 50%  bucket 46: 50%  bucket 47: 60%  bucket 46: 60%  bucket 47: 70%  bucket 46: 70%  bucket 47: 80%  bucket 46: 80%  bucket 47: 90%  bucket 46: 90%  bucket 46: 100%  bucket 47: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  bucket 48: 40%  Entering block accumulator loop for bucket 49:  bucket 48: 50%  bucket 49: 10%  bucket 48: 60%  bucket 49: 20%  bucket 48: 70%  bucket 49: 30%  bucket 48: 80%  bucket 49: 40%  bucket 48: 90%  bucket 49: 50%  bucket 49: 60%  bucket 48: 100%  bucket 49: 70%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 50  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 50:  Entering block accumulator loop for bucket 51:  bucket 50: 10%  bucket 51: 10%  bucket 50: 20%  bucket 51: 20%  bucket 50: 30%  bucket 51: 30%  bucket 51: 40%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 51: 50%  bucket 50: 70%  bucket 51: 60%  bucket 50: 80%  bucket 51: 70%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  Entering block accumulator loop for bucket 52:  bucket 53: 30%  bucket 52: 10%  bucket 53: 40%  bucket 52: 20%  bucket 53: 50%  bucket 52: 30%  bucket 52: 40%  bucket 52: 50%  bucket 53: 60%  bucket 52: 60%  bucket 53: 70%  bucket 52: 70%  bucket 53: 80%  bucket 52: 80%  bucket 53: 90%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 54:  Entering block accumulator loop for bucket 55:  bucket 54: 10%  bucket 55: 10%  bucket 55: 20%  bucket 54: 20%  bucket 55: 30%  bucket 55: 40%  bucket 54: 30%  bucket 55: 50%  bucket 54: 40%  bucket 55: 60%  bucket 55: 70%  bucket 54: 50%  bucket 55: 80%  bucket 55: 90%  bucket 54: 60%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:Getting block 57 of 60  bucket 56: 10%  Reserving size (126) for bucket 57  bucket 56: 20%  Calculating Z arrays for bucket 57  bucket 56: 30%  Entering block accumulator loop for bucket 57:  bucket 56: 40%  bucket 56: 50%  bucket 57: 10%  bucket 56: 60%  bucket 57: 20%  bucket 56: 70%  bucket 57: 30%  bucket 56: 80%  bucket 57: 40%  bucket 56: 90%  bucket 57: 50%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58Getting block 59 of 60  Entering block accumulator loop for bucket 58:  Reserving size (126) for bucket 59  bucket 58: 10%  Calculating Z arrays for bucket 59  bucket 58: 20%  Entering block accumulator loop for bucket 59:  bucket 59: 10%  bucket 59: 20%  bucket 58: 30%  bucket 59: 30%  bucket 58: 40%  bucket 59: 40%  bucket 58: 50%  bucket 59: 50%  bucket 58: 60%  bucket 58: 70%  bucket 59: 60%  bucket 58: 80%  bucket 59: 70%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 59: 80%  Sorting block time: 00:00:00Returning block of 114 for bucket 58  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were unpaired; of these:    0 (0.00%) aligned 0 times    10 (100.00%) aligned exactly 1 time    0 (0.00%) aligned >1 times100.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #17)" name="16" time="42.93469834327698">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60Getting block 2 of 60  Reserving size (126) for bucket 2Getting block 3 of 60  Reserving size (126) for bucket 3Getting block 4 of 60  Reserving size (126) for bucket 4  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 2Getting block 7 of 60  Reserving size (126) for bucket 7  Entering block accumulator loop for bucket 3:Getting block 8 of 60Getting block 5 of 60Getting block 6 of 60  Reserving size (126) for bucket 6  Reserving size (126) for bucket 8  Reserving size (126) for bucket 5  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 2:  bucket 3: 10%  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 8  Calculating Z arrays for bucket 7  bucket 3: 20%  Entering block accumulator loop for bucket 4:  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 6:  Entering block accumulator loop for bucket 8:  bucket 3: 30%  bucket 4: 10%  bucket 2: 10%  bucket 5: 10%  bucket 8: 10%  bucket 6: 10%  bucket 5: 20%  Entering block accumulator loop for bucket 7:  bucket 8: 20%  bucket 2: 20%  bucket 4: 20%  bucket 5: 30%  bucket 6: 20%  bucket 8: 30%  bucket 3: 40%  bucket 2: 30%  bucket 7: 10%  bucket 8: 40%  bucket 2: 40%  bucket 4: 30%  bucket 3: 50%  bucket 5: 40%  bucket 6: 30%  bucket 8: 50%  bucket 4: 40%  bucket 3: 60%  bucket 5: 50%  bucket 8: 60%  bucket 6: 40%  bucket 2: 50%  bucket 7: 20%  bucket 8: 70%  bucket 5: 60%  bucket 6: 50%  bucket 3: 70%  bucket 2: 60%  bucket 5: 70%  bucket 4: 50%  bucket 3: 80%  bucket 5: 80%  bucket 6: 60%  bucket 7: 30%  bucket 2: 70%  bucket 8: 80%  bucket 3: 90%  bucket 4: 60%  bucket 2: 80%  bucket 7: 40%  bucket 8: 90%  bucket 2: 90%  bucket 4: 70%  bucket 5: 90%  bucket 6: 70%  bucket 8: 100%  bucket 2: 100%  bucket 7: 50%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 3: 100%  bucket 5: 100%  bucket 7: 60%  Sorting block of length 63 for bucket 5  Sorting block of length 106 for bucket 3  (Using difference cover)  Sorting block of length 94 for bucket 8  (Using difference cover)  (Using difference cover)  bucket 6: 80%  bucket 7: 70%  bucket 6: 90%  bucket 7: 80%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 7: 90%  bucket 4: 80%  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 4: 90%  Sorting block time: 00:00:00Returning block of 85 for bucket 2  bucket 4: 100%  Sorting block of length 68 for bucket 4  (Using difference cover)  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1  Entering block accumulator loop for bucket 1:  bucket 1: 10%  bucket 1: 20%  bucket 1: 30%  bucket 1: 40%  bucket 1: 50%  bucket 1: 60%  bucket 1: 70%  bucket 1: 80%  bucket 1: 90%  bucket 1: 100%  Sorting block of length 42 for bucket 1  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 91 for bucket 6Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 10:  bucket 11: 10%  bucket 11: 20%  bucket 10: 10%  bucket 10: 20%  bucket 11: 30%  bucket 10: 30%  bucket 11: 40%  bucket 10: 40%  bucket 11: 50%  bucket 10: 50%  bucket 11: 60%  bucket 10: 60%  bucket 11: 70%  bucket 11: 80%  bucket 10: 70%  bucket 11: 90%  bucket 10: 80%  bucket 11: 100%  bucket 10: 90%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 12:  Entering block accumulator loop for bucket 13:  bucket 12: 10%  bucket 13: 10%  bucket 12: 20%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  Sorting block time: 00:00:00  bucket 13: 80%Returning block of 83 for bucket 12  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14Getting block 15 of 60  Entering block accumulator loop for bucket 14:  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  bucket 14: 10%  Entering block accumulator loop for bucket 15:  bucket 14: 20%  bucket 14: 30%  bucket 15: 10%  bucket 14: 40%  bucket 14: 50%  bucket 15: 20%  bucket 14: 60%  bucket 14: 70%  bucket 15: 30%  bucket 14: 80%  bucket 15: 40%  bucket 14: 90%  bucket 15: 50%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%Getting block 17 of 60  bucket 16: 100%Getting block 18 of 60  Reserving size (126) for bucket 18  Sorting block of length 100 for bucket 16  (Using difference cover)  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  Sorting block time: 00:00:00Returning block of 101 for bucket 16  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 19:  bucket 19: 10%  Entering block accumulator loop for bucket 20:  bucket 19: 20%  bucket 20: 10%  bucket 19: 30%  bucket 20: 20%  bucket 19: 40%  bucket 20: 30%  bucket 19: 50%  bucket 20: 40%  bucket 19: 60%  bucket 20: 50%  bucket 19: 70%  bucket 20: 60%  bucket 19: 80%  bucket 20: 70%  bucket 19: 90%  bucket 20: 80%  bucket 19: 100%  bucket 20: 90%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 22:  Entering block accumulator loop for bucket 21:  bucket 22: 10%  bucket 21: 10%  bucket 22: 20%  bucket 22: 30%  bucket 21: 20%  bucket 22: 40%  bucket 21: 30%  bucket 22: 50%  bucket 21: 40%  bucket 22: 60%  bucket 21: 50%  bucket 22: 70%  bucket 22: 80%  bucket 21: 60%  bucket 22: 90%  bucket 21: 70%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25Getting block 26 of 60  bucket 24: 10%  Entering block accumulator loop for bucket 25:  bucket 24: 20%  Reserving size (126) for bucket 26  bucket 25: 10%  Calculating Z arrays for bucket 26  bucket 24: 30%  bucket 25: 20%Getting block 27 of 60  bucket 24: 40%  Reserving size (126) for bucket 27  Entering block accumulator loop for bucket 26:  bucket 25: 30%  Calculating Z arrays for bucket 27  bucket 26: 10%  bucket 24: 50%  Entering block accumulator loop for bucket 27:  bucket 24: 60%  bucket 26: 20%  bucket 27: 10%  bucket 24: 70%  bucket 25: 40%  bucket 26: 30%  bucket 24: 80%  bucket 27: 20%  bucket 25: 50%  bucket 26: 40%  bucket 27: 30%  bucket 24: 90%  bucket 25: 60%  bucket 27: 40%  bucket 24: 100%  bucket 26: 50%  Sorting block of length 68 for bucket 24  bucket 27: 50%  bucket 25: 70%  bucket 26: 60%  bucket 27: 60%  bucket 25: 80%  bucket 26: 70%  bucket 27: 70%  bucket 25: 90%  bucket 27: 80%  bucket 26: 80%  bucket 25: 100%  (Using difference cover)  bucket 27: 90%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 26: 90%  bucket 27: 100%  bucket 26: 100%  Sorting block of length 119 for bucket 27  Sorting block of length 107 for bucket 26  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 30:  bucket 29: 10%  bucket 30: 10%  bucket 29: 20%  bucket 30: 20%  bucket 29: 30%  bucket 30: 30%  bucket 29: 40%  bucket 30: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 32:  Entering block accumulator loop for bucket 33:  bucket 32: 10%  bucket 33: 10%  bucket 32: 20%  bucket 33: 20%  bucket 32: 30%  bucket 33: 30%  bucket 32: 40%  bucket 33: 40%  bucket 32: 50%  bucket 33: 50%  bucket 32: 60%  bucket 33: 60%  bucket 32: 70%  bucket 33: 70%  bucket 32: 80%  bucket 33: 80%  bucket 32: 90%  bucket 33: 90%  bucket 32: 100%  bucket 33: 100%  Sorting block of length 125 for bucket 32  Sorting block of length 44 for bucket 33  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 34 of 60Getting block 35 of 60  Reserving size (126) for bucket 34  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 35:  Entering block accumulator loop for bucket 34:  bucket 35: 10%  bucket 34: 10%  bucket 35: 20%  bucket 34: 20%  bucket 35: 30%  bucket 34: 30%  bucket 35: 40%  bucket 34: 40%  bucket 35: 50%  bucket 34: 50%  bucket 35: 60%  bucket 34: 60%  bucket 35: 70%  bucket 34: 70%  bucket 35: 80%  bucket 34: 80%  bucket 35: 90%  bucket 34: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 36: 20%  bucket 36: 30%  bucket 36: 40%  bucket 36: 50%  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%  bucket 37: 20%  bucket 37: 30%  bucket 37: 40%  bucket 37: 50%  bucket 37: 60%  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:  bucket 39: 10%  bucket 39: 20%  bucket 39: 30%  bucket 39: 40%  bucket 39: 50%  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%  bucket 40: 40%  bucket 40: 50%  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%  bucket 41: 40%  bucket 41: 50%  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Entering block accumulator loop for bucket 42:  Calculating Z arrays for bucket 43  bucket 42: 10%  Entering block accumulator loop for bucket 43:  bucket 42: 20%  bucket 43: 10%  bucket 42: 30%  bucket 43: 20%  bucket 42: 40%  bucket 43: 30%  bucket 42: 50%  bucket 43: 40%  bucket 42: 60%  bucket 43: 50%  bucket 42: 70%  bucket 43: 60%  bucket 42: 80%  bucket 43: 70%  bucket 42: 90%  bucket 43: 80%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:Getting block 45 of 60  Reserving size (126) for bucket 45  bucket 44: 10%  Calculating Z arrays for bucket 45Getting block 46 of 60  Entering block accumulator loop for bucket 45:  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  bucket 44: 20%  bucket 45: 10%  bucket 44: 30%  Entering block accumulator loop for bucket 46:  bucket 45: 20%  bucket 44: 40%  bucket 45: 30%  bucket 46: 10%  bucket 44: 50%  bucket 45: 40%  bucket 46: 20%  bucket 44: 60%  bucket 45: 50%  bucket 44: 70%  bucket 46: 30%  bucket 45: 60%  bucket 44: 80%  bucket 46: 40%  bucket 45: 70%  bucket 44: 90%  bucket 46: 50%  bucket 45: 80%  bucket 44: 100%  bucket 46: 60%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 90%  bucket 46: 70%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48Getting block 49 of 60  Calculating Z arrays for bucket 48  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 48:  Entering block accumulator loop for bucket 49:  bucket 48: 10%  bucket 49: 10%  bucket 48: 20%  bucket 49: 20%  bucket 48: 30%  bucket 49: 30%  bucket 48: 40%  bucket 49: 40%  bucket 48: 50%  bucket 49: 50%  bucket 48: 60%  bucket 49: 60%  bucket 48: 70%  bucket 49: 70%  bucket 48: 80%  bucket 49: 80%  bucket 48: 90%  bucket 49: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 51: 10%  bucket 51: 20%  bucket 51: 30%  bucket 51: 40%Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  bucket 51: 50%  bucket 51: 60%  Entering block accumulator loop for bucket 52:  bucket 51: 70%  bucket 52: 10%  bucket 51: 80%  bucket 52: 20%  bucket 51: 90%  bucket 52: 30%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 40%  bucket 52: 50%  bucket 52: 60%  Sorting block time: 00:00:00Returning block of 92 for bucket 51  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%Getting block 54 of 60  Reserving size (126) for bucket 54  bucket 53: 40%  Calculating Z arrays for bucket 54  bucket 53: 50%  bucket 53: 60%  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 53: 70%  bucket 54: 20%  bucket 53: 80%  bucket 54: 30%  bucket 53: 90%  bucket 54: 40%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  Sorting block time: 00:00:00Returning block of 79 for bucket 53  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Reserving size (126) for bucket 55  Entering block accumulator loop for bucket 56:  Calculating Z arrays for bucket 55  bucket 56: 10%  bucket 56: 20%  Entering block accumulator loop for bucket 55:  bucket 56: 30%  bucket 55: 10%  bucket 56: 40%  bucket 55: 20%  bucket 56: 50%  bucket 55: 30%  bucket 56: 60%  bucket 55: 40%  bucket 56: 70%  bucket 55: 50%  bucket 56: 80%  bucket 55: 60%  bucket 56: 90%  bucket 56: 100%  bucket 55: 70%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58Getting block 59 of 60  Entering block accumulator loop for bucket 58:  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  bucket 58: 10%  Entering block accumulator loop for bucket 59:  bucket 58: 20%  bucket 59: 10%  bucket 58: 30%  bucket 59: 20%  bucket 58: 40%  bucket 59: 30%  bucket 58: 50%  bucket 59: 40%  bucket 58: 60%  bucket 59: 50%  bucket 58: 70%  bucket 59: 60%  bucket 58: 80%  bucket 59: 70%  bucket 58: 90%  bucket 59: 80%  bucket 58: 100%  bucket 59: 90%Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 114 for bucket 58
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #3)" name="2" time="40.86836910247803">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "library|input_1": {   "id": "90f26d00134e50ac",   "src": "hda"  },  "library|input_2": {   "id": "35da4312c16296a2",   "src": "hda"  },  "library|type": "paired",  "reference_genome|source": "indexed" }, "job": {  "command_line": "set -o pipefail;         ln -f -s \u0027/galaxy/server/database/objects/9/9/a/dataset_99ab1a8c-9d31-471d-ae32-9aeba92a8de2.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/b/9/c/dataset_b9c827ec-4363-4d89-9981-6a4be4b5d61a.dat\u0027 input_r.fastq \u0026\u0026     hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027/cvmfs/data.galaxyproject.org/managed/hisat2_index/apiMel4/apiMel4\u0027    -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/a/a/e/dataset_aae657d9-f0e7-4f51-b7b3-dbea6b46a859.dat\u0027",  "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "create_time": "2023-05-17T11:31:55.571656",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-q2ztd",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "09258903e7b4ba95",  "inputs": {   "input_1": {    "id": "90f26d00134e50ac",    "src": "hda",    "uuid": "99ab1a8c-9d31-471d-ae32-9aeba92a8de2"   },   "input_2": {    "id": "35da4312c16296a2",    "src": "hda",    "uuid": "b9c827ec-4363-4d89-9981-6a4be4b5d61a"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1684323123.0000000",    "title": "Job End Time",    "value": "2023-05-17 11:32:03"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1684323122.0000000",    "title": "Job Start Time",    "value": "2023-05-17 11:32:02"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "21474.0000000",    "title": "Memory Allocated (MB)",    "value": "21474"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "8.0000000",    "title": "Cores Allocated",    "value": "8"   }  ],  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "ed66695fa33711da",    "src": "hda",    "uuid": "aae657d9-f0e7-4f51-b7b3-dbea6b46a859"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/phiX.len\"",   "dbkey": "\"phiX\"",   "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 573, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 574, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}",   "reference_genome": "{\"__current_case__\": 0, \"index\": \"apiMel4\", \"source\": \"indexed\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "ok",  "stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n0.00% overall alignment rate\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1",  "tool_stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n0.00% overall alignment rate\n",  "tool_stdout": "",  "traceback": null,  "update_time": "2023-05-17T11:32:14.941549",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_dvn20elc.sam v. /tmp/history_bam_converted_to_sam_r3eu6149.sam )\n--- local_file\n+++ history_data\n@@ -1,23 +1,5343 @@\n @HD\tVN:1.0\tSO:coordinate\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome -1 input_f.fastq -2 input_r.fastq\"\n-@SQ\tSN:phiX174\tLN:5386\n-phiX174_1141_1609_1:0:0_1:0:0_4\t147\tphiX174\t1540\t60\t70M\t=\t1141\t-469\tTTCTAGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tZS:i:-5\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:4C65\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1141_1609_1:0:0_1:0:0_4\t99\tphiX174\t1141\t60\t70M\t=\t1540\t469\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:24G45\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1363_1914_3:0:0_0:0:0_6\t133\tphiX174\t1845\t0\t*\t=\t1845\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_1363_1914_3:0:0_0:0:0_6\t89\tphiX174\t1845\t60\t70M\t=\t1845\t0\tGCACTATGTTTACTCTTGCGCTTGTTCGTTTTCCGCCTACTGCGACTAAAGAGATTCAGTACCTTAACGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYT:Z:UP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t147\tphiX174\t1896\t60\t70M\t=\t1542\t-424\tAGATTCAGTACCTTAACGCTAAAGGTGCTTTGACTTATACCGATATTGCTGGCGACCCTGTTTTGTATGG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t99\tphiX174\t1542\t60\t70M\t=\t1896\t424\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t147\tphiX174\t639\t60\t70M\t=\t185\t-524\tTATTATGTTCATCCCGTCAACATTCAAACGGCCTGTCGCATCATGGAAGGCGCTGAATTTACGGAAAACA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:37T32\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t163\tphiX174\t1980\t60\t70M\t=\t2432\t522\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:12T57\tYS:i:-9\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t83\tphiX174\t2432\t60\t70M\t=\t1980\t-522\tTTTTTTCTGATAAGCTGGTTCTCAATTCTGTTAATCCAGCTTCTTCGGCACCTGTTTTACACACACCTAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-9\tXN:i:0\tXM:i:3\tXO:i:0\tXG:i:0\tNM:i:3\tMD:Z:24C8C27G8\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t147\tphiX174\t2508\t60\t70M\t=\t2128\t-450\tATCGTCAACGTTATATTTTGATAGTTTGAAGGTTAATGCTGGTATTGGTGGTTTTCTTAATTCCATTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-12\tXN:i:0\tXM:i:4\tXO:i:0\tXG:i:0\tNM:i:4\tMD:Z:29C14A13C3G7\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t99\tphiX174\t2128\t60\t70M\t=\t2508\t450\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-12\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t147\tphiX174\t2670\t60\t70M\t=\t2259\t-481\tTCGCTTTGAGTCTTCGTCGGTTCCGACTACCCTCCCGACTGCCTATGATGTTTATCCTTTGAATGGTCGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:15T54\tYS:i:-2\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t99\tphiX174\t2259\t60\t68M2S\t=\t2670\t481\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-2\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:68\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t163\tphiX174\t2950\t60\t70M\t=\t3308\t428\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-6\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t83\tphiX174\t3308\t60\t70M\t=\t2950\t-428\tTGAGATTAATGCTTGGGAGCGTGCTGGTGCTGATGCTTCCTATGCTGGTATGGTTGACGCCGGATTTGAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-6\tZS:i:-8\tXN:i:0\tXM:i:2\tXO:i:0\tXG:i:0\tNM:i:2\tMD:Z:4C36C28\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t147\tphiX174\t3663\t60\t70M\t=\t3199\t-534\tAATGACCAAATCAATGAAATGACTCGCAAGGTTAGTGCTGAGGTTGACTTAGTTCATCAGCAAACGCAGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:14A55\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t99\tphiX174\t3199\t60\t70M\t=\t3663\t534\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n********\n*SNIP *\n********\n+@SQ\tSN:Group6\tLN:18472937\n+@SQ\tSN:Group7\tLN:13219345\n+@SQ\tSN:Group8\tLN:13546544\n+@SQ\tSN:Group9\tLN:11120453\n+@SQ\tSN:chrM\tLN:16343\n+phiX174_1141_1609_1:0:0_1:0:0_4\t141\t*\t0\t0\t*\t*\t0\t0\tCAAATTAGCATAAGCAGCTTGCAGACCCATAATGTCAATAGATGTGGTAGAAGTCGTCATTTGGCTAGAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1141_1609_1:0:0_1:0:0_4\t77\t*\t0\t0\t*\t*\t0\t0\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t141\t*\t0\t0\t*\t*\t0\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t77\t*\t0\t0\t*\t*\t0\t0\tGCGTTAAGGTACTGAATCTCTTTAGTCGCAGTAGGCGGAAAACGAACAAGCGCAAGAGTAAACATAGTGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t141\t*\t0\t0\t*\t*\t0\t0\tCCATACAAAACAGGGTCGCCAGCAATATCGGTATAAGTCAAAGCACCTTTAGCGTTAAGGTACTGAATCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t141\t*\t0\t0\t*\t*\t0\t0\tTGTTTTCCGTAAATTCAGCGCCTTCCATGATGCGACAGGCCGTTTGAATGTTGACGGGATGAACATAATA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t77\t*\t0\t0\t*\t*\t0\t0\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t141\t*\t0\t0\t*\t*\t0\t0\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGGTGTGTGTAAAACAGGTGCCGAAGAAGCTGGATTAACAGAATTGAGAACCAGCTTATCAGAAAAAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t141\t*\t0\t0\t*\t*\t0\t0\tCTGAATGGAATTAAGAAAACCACCAATACCAGCATTAACCTTCAAACTATCAAAATATAACGTTGACGAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t77\t*\t0\t0\t*\t*\t0\t0\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t141\t*\t0\t0\t*\t*\t0\t0\tGCGACCATTCAAAGGATAAACATCATAGGCAGTCGGGAGGGTAGTCGGAACCGACGAAGACTCAAAGCGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t141\t*\t0\t0\t*\t*\t0\t0\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t77\t*\t0\t0\t*\t*\t0\t0\tCTCAAATCCGGCGTCAACCATACCAGCATAGGAAGCATCAGCACCAGCACGCTCCCAAGCATTAATCTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t141\t*\t0\t0\t*\t*\t0\t0\tTCTGCGTTTGCTGATGAACTAAGTCAACCTCAGCACTAACCTTGCGAGTCATTTCATTGATTTGGTCATT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t77\t*\t0\t0\t*\t*\t0\t0\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t141\t*\t0\t0\t*\t*\t0\t0\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t77\t*\t0\t0\t*\t*\t0\t0\tACCATAAACGCAAGCCTCAACGCAGCGACGAGCACGAGAGCGGTCAGTAGCAATCCAAACTTTGTTACTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n" ], "status": "failure", "test_index": 2, "time_seconds": 40.86836910247803, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.2.1+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            10 reads; of these:  10 (100.00%) were paired; of these:    10 (100.00%) aligned concordantly 0 times    0 (0.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    10 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    10 pairs aligned 0 times concordantly or discordantly; of these:      20 mates make up the pairs; of these:        20 (100.00%) aligned 0 times        0 (0.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times0.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #4)" name="3" time="94.09476733207703">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60Getting block 3 of 60Getting block 4 of 60  Reserving size (126) for bucket 4Getting block 5 of 60  Reserving size (126) for bucket 5  Reserving size (126) for bucket 2Getting block 6 of 60  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 1  Reserving size (126) for bucket 6  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 2:Getting block 7 of 60  bucket 2: 10%  Calculating Z arrays for bucket 5  Reserving size (126) for bucket 7  Entering block accumulator loop for bucket 4:  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 7  Calculating Z arrays for bucket 3  bucket 4: 10%  bucket 2: 20%Getting block 8 of 60  Reserving size (126) for bucket 8  Entering block accumulator loop for bucket 3:  bucket 2: 30%  Entering block accumulator loop for bucket 6:  bucket 3: 10%  Calculating Z arrays for bucket 8  bucket 3: 20%  Entering block accumulator loop for bucket 7:  bucket 3: 30%  Entering block accumulator loop for bucket 8:  bucket 3: 40%  bucket 4: 20%  bucket 8: 10%  bucket 6: 10%  bucket 8: 20%  bucket 7: 10%  bucket 2: 40%  bucket 7: 20%  bucket 4: 30%  bucket 2: 50%  bucket 3: 50%  bucket 6: 20%  bucket 4: 40%  bucket 1: 10%  bucket 8: 30%  bucket 2: 60%  bucket 7: 30%  bucket 3: 60%  bucket 4: 50%  bucket 6: 30%  bucket 1: 20%  bucket 2: 70%  bucket 8: 40%  Entering block accumulator loop for bucket 5:  bucket 2: 80%  bucket 7: 40%  bucket 4: 60%  bucket 3: 70%  bucket 1: 30%  bucket 2: 90%  bucket 6: 40%  bucket 8: 50%  bucket 1: 40%  bucket 2: 100%  bucket 7: 50%  bucket 3: 80%  bucket 8: 60%  Sorting block of length 84 for bucket 2  bucket 4: 70%  (Using difference cover)  bucket 5: 10%  bucket 6: 50%  bucket 3: 90%  bucket 4: 80%  bucket 1: 50%  bucket 5: 20%  bucket 7: 60%  bucket 6: 60%  bucket 4: 90%  bucket 3: 100%  bucket 1: 60%  bucket 5: 30%  bucket 4: 100%  bucket 8: 70%  bucket 7: 70%  Sorting block of length 106 for bucket 3  Sorting block of length 68 for bucket 4  (Using difference cover)  (Using difference cover)  bucket 6: 70%  bucket 5: 40%  bucket 1: 70%  Sorting block time: 00:00:00  bucket 6: 80%  bucket 7: 80%  bucket 1: 80%Returning block of 85 for bucket 2  bucket 8: 80%  bucket 6: 90%  bucket 1: 90%  bucket 5: 50%  bucket 6: 100%  bucket 7: 90%  Sorting block of length 90 for bucket 6  bucket 1: 100%  bucket 5: 60%  Sorting block of length 42 for bucket 1  bucket 8: 90%  (Using difference cover)  bucket 7: 100%  bucket 5: 70%  bucket 8: 100%  Sorting block of length 75 for bucket 7  Sorting block of length 94 for bucket 8  (Using difference cover)  (Using difference cover)  (Using difference cover)  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 64 for bucket 5Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Entering block accumulator loop for bucket 10:  Calculating Z arrays for bucket 11  Sorting block time: 00:00:00  bucket 10: 10%  Entering block accumulator loop for bucket 11:Returning block of 125 for bucket 9  bucket 10: 20%  bucket 11: 10%  bucket 10: 30%  bucket 11: 20%  bucket 10: 40%  bucket 11: 30%  bucket 10: 50%  bucket 11: 40%  bucket 10: 60%  bucket 11: 50%  bucket 10: 70%  bucket 11: 60%  bucket 10: 80%  bucket 11: 70%  bucket 10: 90%  bucket 11: 80%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 14: 40%  bucket 15: 10%  bucket 14: 50%  bucket 15: 20%  bucket 14: 60%  bucket 15: 30%  bucket 14: 70%  bucket 15: 40%  bucket 15: 50%  bucket 14: 80%  bucket 15: 60%  bucket 15: 70%  bucket 14: 90%  bucket 15: 80%  bucket 15: 90%  bucket 14: 100%  bucket 15: 100%  Sorting block of length 82 for bucket 14  Sorting block of length 68 for bucket 15  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 16 of 60  Reserving size (126) for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 16Getting block 18 of 60  Entering block accumulator loop for bucket 16:  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  Entering block accumulator loop for bucket 18:  bucket 16: 40%  Calculating Z arrays for bucket 17  bucket 18: 10%  bucket 16: 50%  bucket 18: 20%  Entering block accumulator loop for bucket 17:  bucket 18: 30%  bucket 17: 10%  bucket 18: 40%  bucket 17: 20%  bucket 18: 50%  bucket 17: 30%  bucket 18: 60%  bucket 16: 60%  bucket 17: 40%  bucket 18: 70%  bucket 17: 50%  bucket 16: 70%  bucket 18: 80%  bucket 17: 60%  bucket 16: 80%  bucket 18: 90%  bucket 17: 70%  bucket 16: 90%  bucket 17: 80%  bucket 18: 100%  Sorting block of length 122 for bucket 18  bucket 17: 90%  bucket 16: 100%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block of length 100 for bucket 16  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:Getting block 20 of 60  Reserving size (126) for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Calculating Z arrays for bucket 20  bucket 19: 10%  Entering block accumulator loop for bucket 21:  Entering block accumulator loop for bucket 20:  bucket 19: 20%  bucket 21: 10%  bucket 19: 30%  bucket 20: 10%  bucket 21: 20%  bucket 19: 40%  bucket 19: 50%  bucket 21: 30%  bucket 20: 20%  bucket 19: 60%  bucket 21: 40%  bucket 19: 70%  bucket 20: 30%  bucket 19: 80%  bucket 21: 50%  bucket 20: 40%  bucket 19: 90%  bucket 21: 60%  bucket 19: 100%  bucket 21: 70%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 50%  bucket 21: 80%  bucket 20: 60%  bucket 21: 90%  bucket 20: 70%  bucket 21: 100%  bucket 20: 80%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:Getting block 23 of 60  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  Reserving size (126) for bucket 23  bucket 22: 50%  Calculating Z arrays for bucket 23  bucket 22: 60%  Entering block accumulator loop for bucket 23:  bucket 22: 70%  bucket 23: 10%  bucket 22: 80%  bucket 23: 20%  bucket 22: 90%  bucket 23: 30%  bucket 22: 100%  bucket 23: 40%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 25:  Entering block accumulator loop for bucket 24:  bucket 25: 10%  bucket 24: 10%  bucket 25: 20%  bucket 24: 20%  bucket 25: 30%  bucket 24: 30%  bucket 25: 40%  bucket 24: 40%  bucket 25: 50%  bucket 24: 50%  bucket 25: 60%  bucket 24: 60%  bucket 25: 70%  bucket 24: 70%  bucket 25: 80%  bucket 24: 80%  bucket 25: 90%  bucket 24: 90%  bucket 25: 100%  bucket 24: 100%  Sorting block of length 66 for bucket 25  Sorting block of length 68 for bucket 24  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Entering block accumulator loop for bucket 26:  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 26: 10%  bucket 27: 10%  bucket 26: 20%  bucket 27: 20%  bucket 26: 30%  bucket 27: 30%  bucket 26: 40%  bucket 27: 40%  bucket 26: 50%  bucket 27: 50%  bucket 26: 60%  bucket 27: 60%  bucket 26: 70%  bucket 27: 70%  bucket 26: 80%  bucket 27: 80%  bucket 27: 90%  bucket 26: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%Getting block 29 of 60  bucket 28: 50%  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 60%  bucket 28: 70%  Entering block accumulator loop for bucket 29:  bucket 28: 80%  bucket 28: 90%  bucket 29: 10%  bucket 28: 100%  bucket 29: 20%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  Sorting block time: 00:00:00  bucket 29: 100%Returning block of 107 for bucket 28  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Entering block accumulator loop for bucket 30:  Calculating Z arrays for bucket 31  bucket 30: 10%  bucket 30: 20%  Entering block accumulator loop for bucket 31:  bucket 30: 30%  bucket 30: 40%  bucket 31: 10%  bucket 30: 50%  bucket 31: 20%  bucket 30: 60%  bucket 30: 70%  bucket 31: 30%  bucket 30: 80%Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  bucket 30: 90%  bucket 31: 40%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 31: 50%  Entering block accumulator loop for bucket 32:  bucket 31: 60%  bucket 32: 10%  bucket 31: 70%  bucket 32: 20%  bucket 31: 80%  bucket 32: 30%  Sorting block time: 00:00:00Returning block of 125 for bucket 30  bucket 31: 90%  bucket 32: 40%  bucket 31: 100%  bucket 32: 50%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 33: 20%  bucket 33: 30%  bucket 33: 40%  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 34: 20%  bucket 34: 30%  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  bucket 34: 70%  bucket 34: 80%Getting block 35 of 60  Reserving size (126) for bucket 35  bucket 34: 90%  Calculating Z arrays for bucket 35  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block time: 00:00:00  Sorting block of length 112 for bucket 35Returning block of 123 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 36: 20%  bucket 36: 30%  bucket 36: 40%  bucket 36: 50%  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%Getting block 38 of 60  bucket 37: 20%  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  bucket 37: 30%  bucket 37: 40%  Entering block accumulator loop for bucket 38:  bucket 37: 50%  bucket 37: 60%  bucket 38: 10%  bucket 37: 70%  bucket 38: 20%  bucket 37: 80%  bucket 38: 30%  bucket 37: 90%  bucket 38: 40%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  bucket 38: 90%  Entering block accumulator loop for bucket 39:  bucket 38: 100%  bucket 39: 10%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 20%  bucket 39: 30%  bucket 39: 40%  Sorting block time: 00:00:00  bucket 39: 50%  bucket 39: 60%  Sorting block time: 00:00:00Returning block of 60 for bucket 37  bucket 39: 70%Returning block of 118 for bucket 38  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40Getting block 41 of 60  Entering block accumulator loop for bucket 40:  Reserving size (126) for bucket 41  bucket 40: 10%  Calculating Z arrays for bucket 41  bucket 40: 20%  Entering block accumulator loop for bucket 41:  bucket 40: 30%  bucket 41: 10%  bucket 40: 40%  bucket 41: 20%  bucket 40: 50%  bucket 41: 30%  bucket 40: 60%  bucket 41: 40%  bucket 40: 70%  bucket 41: 50%  bucket 40: 80%  bucket 40: 90%  bucket 41: 60%  bucket 40: 100%  Sorting block of length 41 for bucket 40  bucket 41: 70%  (Using difference cover)  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  bucket 42: 10%  bucket 42: 20%  bucket 42: 30%  bucket 42: 40%  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43Getting block 44 of 60Getting block 45 of 60  Reserving size (126) for bucket 44  Reserving size (126) for bucket 45  Entering block accumulator loop for bucket 43:  Calculating Z arrays for bucket 45  Calculating Z arrays for bucket 44  bucket 43: 10%  Entering block accumulator loop for bucket 45:  bucket 43: 20%  Entering block accumulator loop for bucket 44:  bucket 43: 30%  bucket 45: 10%  bucket 44: 10%  bucket 43: 40%  bucket 45: 20%  bucket 44: 20%  bucket 43: 50%  bucket 45: 30%  bucket 44: 30%  bucket 43: 60%  bucket 44: 40%  bucket 43: 70%  bucket 45: 40%  bucket 44: 50%  bucket 45: 50%  bucket 43: 80%  bucket 44: 60%  bucket 45: 60%  bucket 43: 90%  bucket 44: 70%  bucket 43: 100%  bucket 45: 70%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 45: 80%  bucket 44: 80%  bucket 45: 90%  bucket 44: 90%  bucket 45: 100%  bucket 44: 100%  Sorting block of length 79 for bucket 45  Sorting block of length 66 for bucket 44  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46Getting block 47 of 60  Entering block accumulator loop for bucket 46:  Reserving size (126) for bucket 47  bucket 46: 10%  Calculating Z arrays for bucket 47  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  Entering block accumulator loop for bucket 47:  bucket 46: 50%  bucket 46: 60%  bucket 47: 10%  bucket 46: 70%  bucket 47: 20%  bucket 46: 80%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 46: 90%  bucket 47: 60%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48Getting block 49 of 60  Entering block accumulator loop for bucket 48:  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  Entering block accumulator loop for bucket 49:  bucket 48: 90%Getting block 50 of 60  Reserving size (126) for bucket 50  bucket 49: 10%  bucket 48: 100%  bucket 49: 20%  Calculating Z arrays for bucket 50  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 30%  Entering block accumulator loop for bucket 50:  bucket 49: 40%  bucket 50: 10%  bucket 49: 50%  bucket 50: 20%  bucket 49: 60%  bucket 50: 30%  bucket 49: 70%  bucket 50: 40%  bucket 49: 80%  bucket 49: 90%  bucket 50: 50%  bucket 49: 100%  Sorting block of length 74 for bucket 49  bucket 50: 60%  Sorting block time: 00:00:00  (Using difference cover)  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  Sorting block time: 00:00:00Returning block of 75 for bucket 49  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:Getting block 52 of 60Getting block 53 of 60  Reserving size (126) for bucket 53  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Calculating Z arrays for bucket 53  bucket 51: 10%  Entering block accumulator loop for bucket 52:  Entering block accumulator loop for bucket 53:  bucket 51: 20%  bucket 51: 30%  bucket 53: 10%  bucket 51: 40%  bucket 52: 10%  bucket 53: 20%  bucket 51: 50%  bucket 53: 30%  bucket 52: 20%  bucket 51: 60%  bucket 53: 40%  bucket 52: 30%  bucket 51: 70%  bucket 53: 50%  bucket 51: 80%  bucket 52: 40%  bucket 53: 60%  bucket 51: 90%  bucket 52: 50%  bucket 53: 70%  bucket 52: 60%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 53: 80%  bucket 52: 70%  bucket 53: 90%  bucket 52: 80%  bucket 53: 100%  bucket 52: 90%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%Getting block 55 of 60  bucket 54: 80%  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Entering block accumulator loop for bucket 55:  bucket 55: 10%  Sorting block time: 00:00:00Returning block of 65 for bucket 54  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%Getting block 57 of 60  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  Reserving size (126) for bucket 57  bucket 56: 90%  Calculating Z arrays for bucket 57  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Getting block 58 of 60  Reserving size (126) for bucket 58Returning block of 56 for bucket 56  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%  bucket 58: 40%  bucket 58: 50%  Sorting block time: 00:00:00Returning block of 86 for bucket 57  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 59:  bucket 59: 10%  bucket 59: 20%  bucket 59: 30%  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:01500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    71 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    71 pairs aligned 0 times concordantly or discordantly; of these:      142 mates make up the pairs; of these:        74 (52.11%) aligned 0 times        68 (47.89%) aligned exactly 1 time        0 (0.00%) aligned >1 times92.60% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #5)" name="4" time="83.86924648284912">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60  Calculating Z arrays for bucket 1  Reserving size (126) for bucket 2Getting block 3 of 60  Entering block accumulator loop for bucket 1:Getting block 6 of 60  Reserving size (126) for bucket 6Getting block 5 of 60  Reserving size (126) for bucket 5  bucket 1: 10%Getting block 4 of 60  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 6  Calculating Z arrays for bucket 5  Reserving size (126) for bucket 4  Reserving size (126) for bucket 3  bucket 1: 20%  Entering block accumulator loop for bucket 5:  bucket 1: 30%  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 6:Getting block 7 of 60  Entering block accumulator loop for bucket 3:  bucket 2: 10%  Reserving size (126) for bucket 7  bucket 2: 20%  Calculating Z arrays for bucket 4Getting block 8 of 60  bucket 3: 10%  Reserving size (126) for bucket 8  bucket 2: 30%  bucket 1: 40%  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 4:  bucket 5: 10%  bucket 1: 50%  bucket 3: 20%  bucket 1: 60%  bucket 4: 10%  Calculating Z arrays for bucket 7  bucket 6: 10%  bucket 2: 40%  bucket 3: 30%  Entering block accumulator loop for bucket 8:  bucket 1: 70%  bucket 6: 20%  bucket 4: 20%  Entering block accumulator loop for bucket 7:  bucket 6: 30%  bucket 4: 30%  bucket 7: 10%  bucket 2: 50%  bucket 8: 10%  bucket 3: 40%  bucket 4: 40%  bucket 6: 40%  bucket 7: 20%  bucket 5: 20%  bucket 1: 80%  bucket 4: 50%  bucket 2: 60%  bucket 8: 20%  bucket 7: 30%  bucket 3: 50%  bucket 1: 90%  bucket 4: 60%  bucket 2: 70%  bucket 5: 30%  bucket 7: 40%  bucket 1: 100%  bucket 6: 50%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 3: 60%  bucket 7: 50%  bucket 4: 70%  bucket 5: 40%  bucket 2: 80%  bucket 8: 30%  bucket 6: 60%  bucket 4: 80%  bucket 7: 60%  bucket 5: 50%  bucket 3: 70%  bucket 8: 40%  bucket 2: 90%  bucket 4: 90%  bucket 7: 70%  bucket 6: 70%  bucket 5: 60%  bucket 2: 100%  bucket 4: 100%  bucket 7: 80%  Sorting block of length 68 for bucket 4  Sorting block of length 84 for bucket 2  bucket 8: 50%  bucket 3: 80%  bucket 5: 70%  bucket 7: 90%  bucket 8: 60%  (Using difference cover)  bucket 5: 80%  bucket 8: 70%  bucket 3: 90%  bucket 6: 80%  (Using difference cover)  Sorting block time: 00:00:00  bucket 8: 80%Returning block of 43 for bucket 1  bucket 5: 90%  bucket 7: 100%  bucket 6: 90%  bucket 5: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 3: 100%  bucket 8: 90%  bucket 6: 100%  Sorting block of length 106 for bucket 3  (Using difference cover)  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 95 for bucket 8Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)Getting block 10 of 60  Sorting block time: 00:00:00  Reserving size (126) for bucket 10Returning block of 125 for bucket 9  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11Getting block 12 of 60  Calculating Z arrays for bucket 11  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 12: 90%  bucket 11: 90%  bucket 12: 100%  bucket 11: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block of length 95 for bucket 11  Sorting block time: 00:00:00  (Using difference cover)Getting block 13 of 60  Sorting block time: 00:00:00Returning block of 83 for bucket 12Returning block of 96 for bucket 11  Reserving size (126) for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 14:  Entering block accumulator loop for bucket 13:  bucket 14: 10%  bucket 14: 20%  bucket 13: 10%  bucket 14: 30%  bucket 13: 20%  bucket 14: 40%  bucket 13: 30%  bucket 14: 50%  bucket 13: 40%  bucket 14: 60%  bucket 13: 50%  bucket 14: 70%  bucket 13: 60%  bucket 14: 80%  bucket 13: 70%  bucket 14: 90%  bucket 13: 80%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 16:  Entering block accumulator loop for bucket 17:  Entering block accumulator loop for bucket 15:  bucket 17: 10%  bucket 15: 10%  bucket 17: 20%  bucket 16: 10%  bucket 15: 20%  bucket 17: 30%  bucket 16: 20%  bucket 15: 30%  bucket 17: 40%  bucket 15: 40%  bucket 16: 30%  bucket 17: 50%  bucket 15: 50%  bucket 17: 60%  bucket 15: 60%  bucket 17: 70%  bucket 15: 70%  bucket 16: 40%  bucket 17: 80%  bucket 15: 80%  bucket 16: 50%  bucket 17: 90%  bucket 15: 90%  bucket 17: 100%  bucket 15: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 16: 60%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20Getting block 21 of 60  Calculating Z arrays for bucket 20  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 20:  Entering block accumulator loop for bucket 21:  bucket 20: 10%  bucket 21: 10%  bucket 20: 20%  bucket 21: 20%  bucket 20: 30%  bucket 21: 30%  bucket 20: 40%  bucket 21: 40%  bucket 20: 50%  bucket 21: 50%  bucket 21: 60%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  bucket 21: 70%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 22:  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 22: 10%  bucket 23: 40%  bucket 23: 50%  bucket 22: 20%  bucket 23: 60%  bucket 23: 70%  bucket 22: 30%  bucket 23: 80%  bucket 23: 90%  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 23: 100%  bucket 22: 70%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 22: 80%  Sorting block time: 00:00:00Returning block of 65 for bucket 23  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%Getting block 27 of 60  Reserving size (126) for bucket 27  bucket 26: 20%  Calculating Z arrays for bucket 27  bucket 26: 30%  Entering block accumulator loop for bucket 27:  bucket 26: 40%  bucket 26: 50%  bucket 27: 10%  bucket 26: 60%  bucket 27: 20%  bucket 26: 70%  bucket 27: 30%  bucket 26: 80%  bucket 27: 40%  bucket 26: 90%  bucket 27: 50%  bucket 26: 100%  Sorting block of length 107 for bucket 26  bucket 27: 60%  (Using difference cover)  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28Getting block 29 of 60  Entering block accumulator loop for bucket 28:  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 10%  bucket 28: 20%  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 28: 30%  bucket 29: 50%  bucket 28: 40%  bucket 29: 60%  bucket 28: 50%  bucket 29: 70%  bucket 28: 60%  bucket 29: 80%  bucket 28: 70%  bucket 29: 90%  bucket 28: 80%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  Sorting block time: 00:00:00Returning block of 125 for bucket 30  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32Getting block 33 of 60  Calculating Z arrays for bucket 32  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Entering block accumulator loop for bucket 32:  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 33:  bucket 32: 10%  bucket 33: 10%  Entering block accumulator loop for bucket 34:  bucket 32: 20%  bucket 33: 20%  bucket 32: 30%  bucket 33: 30%  bucket 32: 40%  bucket 32: 50%  bucket 33: 40%  bucket 32: 60%  bucket 33: 50%  bucket 32: 70%  bucket 33: 60%  bucket 32: 80%  bucket 33: 70%  bucket 32: 90%  bucket 33: 80%  bucket 32: 100%  Sorting block of length 125 for bucket 32  bucket 33: 90%  (Using difference cover)  bucket 34: 10%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 20%  bucket 34: 30%  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 126 for bucket 32  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 60  Entering block accumulator loop for bucket 36:  bucket 36: 10%  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  bucket 36: 20%  Entering block accumulator loop for bucket 37:  bucket 36: 30%  bucket 37: 10%  bucket 36: 40%  bucket 37: 20%  bucket 36: 50%  bucket 37: 30%  bucket 36: 60%  bucket 37: 40%  bucket 37: 50%  bucket 36: 70%  bucket 37: 60%  bucket 36: 80%  bucket 37: 70%  bucket 36: 90%  bucket 37: 80%  bucket 36: 100%  bucket 37: 90%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Reserving size (126) for bucket 38  Entering block accumulator loop for bucket 39:  Calculating Z arrays for bucket 38  bucket 39: 10%  Entering block accumulator loop for bucket 38:  bucket 39: 20%  bucket 38: 10%  bucket 39: 30%  bucket 38: 20%  bucket 38: 30%  bucket 39: 40%  bucket 38: 40%  bucket 39: 50%  bucket 38: 50%  bucket 38: 60%  bucket 39: 60%  bucket 38: 70%  bucket 39: 70%  bucket 38: 80%  bucket 39: 80%  bucket 38: 90%  bucket 38: 100%  bucket 39: 90%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%  bucket 40: 40%  bucket 40: 50%  Sorting block time: 00:00:00  bucket 40: 60%Returning block of 126 for bucket 39  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%  bucket 41: 40%  bucket 41: 50%Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  bucket 41: 60%  bucket 41: 70%  Entering block accumulator loop for bucket 42:  bucket 41: 80%  bucket 42: 10%  bucket 41: 90%  bucket 42: 20%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 30%  bucket 42: 40%  bucket 42: 50%  bucket 42: 60%  Sorting block time: 00:00:00Returning block of 89 for bucket 41  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  bucket 44: 90%  Entering block accumulator loop for bucket 45:  bucket 44: 100%  bucket 45: 10%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  Sorting block time: 00:00:00  bucket 45: 90%Returning block of 67 for bucket 44Getting block 46 of 60  bucket 45: 100%  Reserving size (126) for bucket 46Getting block 47 of 60  Calculating Z arrays for bucket 46  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 46:  Entering block accumulator loop for bucket 47:  bucket 46: 10%  bucket 47: 10%  Sorting block of length 79 for bucket 45  bucket 47: 20%  (Using difference cover)  bucket 46: 20%  bucket 47: 30%  bucket 46: 30%  bucket 47: 40%  bucket 46: 40%  bucket 47: 50%  bucket 46: 50%  bucket 47: 60%  bucket 46: 60%  bucket 47: 70%  bucket 46: 70%  bucket 47: 80%  bucket 46: 80%  bucket 47: 90%  bucket 46: 90%  Sorting block time: 00:00:00  bucket 47: 100%  bucket 46: 100%Returning block of 80 for bucket 45  Sorting block of length 83 for bucket 47  Sorting block of length 69 for bucket 46  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 50:  Entering block accumulator loop for bucket 49:  bucket 50: 10%  bucket 49: 10%  bucket 50: 20%  bucket 49: 20%  bucket 50: 30%  bucket 49: 30%  bucket 50: 40%  bucket 49: 40%  bucket 50: 50%  bucket 49: 50%  bucket 50: 60%  bucket 49: 60%  bucket 50: 70%  bucket 49: 70%  bucket 50: 80%  bucket 49: 80%  bucket 50: 90%  bucket 49: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 51: 10%  bucket 51: 20%  bucket 51: 30%  bucket 51: 40%  bucket 51: 50%  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52Getting block 53 of 60  Entering block accumulator loop for bucket 52:  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  bucket 52: 10%  bucket 52: 20%  bucket 52: 30%  bucket 52: 40%  bucket 52: 50%  Entering block accumulator loop for bucket 53:  bucket 52: 60%  bucket 53: 10%  bucket 52: 70%  bucket 53: 20%  bucket 52: 80%  bucket 53: 30%  bucket 52: 90%  bucket 53: 40%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  Sorting block time: 00:00:00  bucket 53: 90%Returning block of 107 for bucket 52  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54Getting block 55 of 60  Entering block accumulator loop for bucket 54:  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  bucket 54: 10%  bucket 54: 20%  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 54: 30%  bucket 55: 30%  bucket 54: 40%  bucket 55: 40%  bucket 54: 50%  bucket 55: 50%  bucket 54: 60%  bucket 55: 60%  bucket 54: 70%  bucket 54: 80%  bucket 55: 70%  bucket 54: 90%  bucket 55: 80%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:Getting block 59 of 60  bucket 58: 10%  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  bucket 58: 20%  bucket 58: 30%  Entering block accumulator loop for bucket 59:  bucket 58: 40%  bucket 58: 50%  bucket 59: 10%  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 59: 20%  bucket 58: 90%  bucket 59: 30%  bucket 58: 100%  Sorting block of length 113 for bucket 58  bucket 59: 40%  (Using difference cover)  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times85.80% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #6)" name="5" time="50.59105396270752">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60  Calculating Z arrays for bucket 1Getting block 3 of 60  Reserving size (126) for bucket 2  Entering block accumulator loop for bucket 1:Getting block 4 of 60  Reserving size (126) for bucket 4  bucket 1: 10%  Calculating Z arrays for bucket 4  Reserving size (126) for bucket 3Getting block 7 of 60Getting block 5 of 60Getting block 8 of 60  Reserving size (126) for bucket 8Getting block 6 of 60  Reserving size (126) for bucket 6  Reserving size (126) for bucket 7  bucket 1: 20%  Calculating Z arrays for bucket 7  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 4:  Reserving size (126) for bucket 5  Calculating Z arrays for bucket 3  bucket 1: 30%  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 3:  bucket 7: 10%  bucket 1: 40%  Calculating Z arrays for bucket 6  bucket 4: 10%  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 6:  Entering block accumulator loop for bucket 8:  bucket 1: 50%  Entering block accumulator loop for bucket 2:  bucket 4: 20%  bucket 7: 20%  bucket 4: 30%  Calculating Z arrays for bucket 5  bucket 4: 40%  bucket 8: 10%  bucket 3: 10%  bucket 6: 10%  bucket 7: 30%  bucket 8: 20%  bucket 3: 20%  bucket 6: 20%  bucket 7: 40%  bucket 1: 60%  bucket 4: 50%  bucket 7: 50%  bucket 3: 30%  bucket 1: 70%  bucket 4: 60%  Entering block accumulator loop for bucket 5:  bucket 7: 60%  bucket 8: 30%  bucket 4: 70%  bucket 3: 40%  bucket 5: 10%  bucket 8: 40%  bucket 1: 80%  bucket 3: 50%  bucket 4: 80%  bucket 1: 90%  bucket 7: 70%  bucket 8: 50%  bucket 4: 90%  bucket 1: 100%  bucket 7: 80%  bucket 3: 60%  Sorting block of length 42 for bucket 1  bucket 5: 20%  (Using difference cover)  bucket 3: 70%  bucket 8: 60%  bucket 5: 30%  bucket 7: 90%  bucket 6: 30%  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 2: 10%  bucket 8: 70%  bucket 4: 100%  bucket 6: 40%  Sorting block of length 68 for bucket 4  bucket 8: 80%  (Using difference cover)  bucket 5: 40%  bucket 3: 80%  bucket 6: 50%  bucket 2: 20%  bucket 8: 90%  bucket 2: 30%  bucket 5: 50%  bucket 8: 100%  bucket 6: 60%  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 2: 40%  bucket 5: 60%  bucket 6: 70%  bucket 2: 50%  bucket 5: 70%  bucket 6: 80%  bucket 5: 80%  bucket 6: 90%  bucket 5: 90%  bucket 6: 100%  bucket 2: 60%  Sorting block of length 90 for bucket 6  bucket 2: 70%  Sorting block time: 00:00:00  (Using difference cover)  bucket 5: 100%  bucket 3: 90%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 3: 100%  bucket 2: 80%  Sorting block of length 106 for bucket 3  bucket 2: 90%  (Using difference cover)  Sorting block time: 00:00:00Returning block of 76 for bucket 7Returning block of 69 for bucket 4  bucket 2: 100%  Sorting block of length 84 for bucket 2  (Using difference cover)  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 64 for bucket 5Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Getting block 10 of 60Returning block of 125 for bucket 9  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%Getting block 14 of 60  bucket 13: 60%  Reserving size (126) for bucket 14  bucket 13: 70%  Calculating Z arrays for bucket 14  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  Sorting block time: 00:00:00Returning block of 86 for bucket 13  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:Getting block 16 of 60  Reserving size (126) for bucket 16  bucket 15: 10%  Calculating Z arrays for bucket 16  bucket 15: 20%  bucket 15: 30%  Entering block accumulator loop for bucket 16:  bucket 15: 40%  bucket 16: 10%  bucket 15: 50%  bucket 16: 20%  bucket 15: 60%  bucket 16: 30%  bucket 15: 70%  bucket 16: 40%  bucket 15: 80%  bucket 16: 50%  bucket 15: 90%  bucket 15: 100%  bucket 16: 60%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:Getting block 18 of 60  bucket 17: 10%  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Entering block accumulator loop for bucket 18:  bucket 17: 20%  Calculating Z arrays for bucket 19  bucket 18: 10%  Entering block accumulator loop for bucket 19:  bucket 18: 20%  bucket 19: 10%  bucket 18: 30%  bucket 19: 20%  bucket 18: 40%  bucket 19: 30%  bucket 17: 30%  bucket 18: 50%  bucket 19: 40%  bucket 17: 40%  bucket 18: 60%  bucket 19: 50%  bucket 18: 70%  bucket 19: 60%  bucket 18: 80%  bucket 19: 70%  bucket 18: 90%  bucket 19: 80%  bucket 18: 100%  bucket 19: 90%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%Getting block 22 of 60  bucket 21: 20%  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  bucket 21: 30%  bucket 21: 40%  Entering block accumulator loop for bucket 22:  bucket 21: 50%  bucket 22: 10%  bucket 21: 60%  bucket 22: 20%  bucket 21: 70%  bucket 22: 30%  bucket 21: 80%  bucket 22: 40%  bucket 21: 90%  bucket 22: 50%  bucket 21: 100%  bucket 22: 60%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  Sorting block time: 00:00:00Returning block of 65 for bucket 23  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26Getting block 27 of 60  Calculating Z arrays for bucket 26  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 26:  Entering block accumulator loop for bucket 27:  bucket 26: 10%  bucket 27: 10%  bucket 26: 20%  bucket 27: 20%  bucket 26: 30%  bucket 27: 30%  bucket 26: 40%  bucket 27: 40%  bucket 26: 50%  bucket 27: 50%  bucket 26: 60%  bucket 27: 60%  bucket 26: 70%  bucket 27: 70%  bucket 26: 80%  bucket 27: 80%  bucket 26: 90%  bucket 27: 90%  bucket 27: 100%  bucket 26: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60Getting block 29 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Reserving size (126) for bucket 29  Entering block accumulator loop for bucket 28:  Calculating Z arrays for bucket 29  bucket 28: 10%  Entering block accumulator loop for bucket 29:  bucket 28: 20%  bucket 29: 10%  bucket 29: 20%  bucket 28: 30%  bucket 29: 30%  bucket 28: 40%  bucket 29: 40%  bucket 28: 50%  bucket 29: 50%  bucket 28: 60%  bucket 29: 60%  bucket 28: 70%  bucket 29: 70%  bucket 28: 80%  bucket 29: 80%  bucket 28: 90%  bucket 29: 90%  bucket 28: 100%  bucket 29: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%Getting block 31 of 60  bucket 30: 80%  Reserving size (126) for bucket 31  bucket 30: 90%  Calculating Z arrays for bucket 31  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  Sorting block time: 00:00:00  bucket 31: 50%Returning block of 125 for bucket 30  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Entering block accumulator loop for bucket 33:  Calculating Z arrays for bucket 34  bucket 33: 10%  Entering block accumulator loop for bucket 34:  bucket 33: 20%  bucket 34: 10%  bucket 33: 30%  bucket 34: 20%  bucket 33: 40%  bucket 34: 30%  bucket 33: 50%  bucket 34: 40%  bucket 33: 60%  bucket 34: 50%  bucket 33: 70%  bucket 34: 60%  bucket 33: 80%  bucket 34: 70%  bucket 33: 90%  bucket 34: 80%  bucket 33: 100%  bucket 34: 90%  Sorting block of length 44 for bucket 33  bucket 34: 100%  (Using difference cover)  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35Getting block 36 of 60Getting block 37 of 60  Entering block accumulator loop for bucket 35:  Reserving size (126) for bucket 37  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 37  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 37:  Entering block accumulator loop for bucket 36:  bucket 37: 10%  bucket 35: 10%  bucket 37: 20%  bucket 36: 10%  bucket 37: 30%  bucket 36: 20%  bucket 37: 40%  bucket 36: 30%  bucket 35: 20%  bucket 36: 40%  bucket 37: 50%  bucket 35: 30%  bucket 37: 60%  bucket 36: 50%  bucket 35: 40%  bucket 37: 70%  bucket 36: 60%  bucket 35: 50%  bucket 37: 80%  bucket 36: 70%  bucket 35: 60%  bucket 37: 90%  bucket 36: 80%  bucket 35: 70%  bucket 37: 100%  bucket 36: 90%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 35: 80%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38Getting block 39 of 60  Calculating Z arrays for bucket 38  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 38:  Entering block accumulator loop for bucket 39:  bucket 38: 10%  bucket 39: 10%  bucket 38: 20%  bucket 39: 20%  bucket 38: 30%  bucket 39: 30%  bucket 38: 40%  bucket 39: 40%  bucket 38: 50%  bucket 39: 50%  bucket 38: 60%  bucket 39: 60%  bucket 38: 70%  bucket 39: 70%  bucket 38: 80%  bucket 39: 80%  bucket 38: 90%  bucket 38: 100%  bucket 39: 90%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 100%  Sorting block time: 00:00:00  Sorting block of length 125 for bucket 39Returning block of 118 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60Getting block 41 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Reserving size (126) for bucket 41  Entering block accumulator loop for bucket 40:  Calculating Z arrays for bucket 41  bucket 40: 10%  Entering block accumulator loop for bucket 41:  bucket 40: 20%  bucket 41: 10%  bucket 40: 30%  bucket 41: 20%  bucket 40: 40%  bucket 41: 30%  bucket 40: 50%  bucket 41: 40%  bucket 40: 60%  bucket 41: 50%  bucket 40: 70%  bucket 41: 60%  bucket 40: 80%  bucket 41: 70%  bucket 40: 90%  bucket 41: 80%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  bucket 42: 10%  bucket 42: 20%  bucket 42: 30%  bucket 42: 40%  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45Getting block 47 of 60  Entering block accumulator loop for bucket 45:  Reserving size (126) for bucket 47  bucket 45: 10%Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Calculating Z arrays for bucket 47  bucket 45: 20%  bucket 45: 30%  Entering block accumulator loop for bucket 46:  Entering block accumulator loop for bucket 47:  bucket 45: 40%  bucket 45: 50%  bucket 47: 10%  bucket 46: 10%  bucket 45: 60%  bucket 45: 70%  bucket 47: 20%  bucket 46: 20%  bucket 45: 80%  bucket 45: 90%  bucket 47: 30%  bucket 46: 30%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  bucket 47: 70%  Sorting block time: 00:00:00Returning block of 80 for bucket 45  bucket 46: 70%  bucket 47: 80%  bucket 46: 80%  bucket 47: 90%  bucket 46: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%Getting block 49 of 60  bucket 48: 70%  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  bucket 48: 80%  bucket 48: 90%  Entering block accumulator loop for bucket 49:  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  Sorting block time: 00:00:00  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 51: 10%  bucket 51: 20%  bucket 51: 30%  bucket 51: 40%  bucket 51: 50%  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 52:  bucket 52: 10%  bucket 52: 20%  bucket 52: 30%  bucket 52: 40%  bucket 52: 50%  bucket 52: 60%  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  bucket 54: 80%Getting block 56 of 60  Entering block accumulator loop for bucket 55:  bucket 54: 90%  bucket 54: 100%  bucket 55: 10%  Sorting block of length 64 for bucket 54  (Using difference cover)  Reserving size (126) for bucket 56  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  Calculating Z arrays for bucket 56  bucket 55: 60%  bucket 55: 70%  Entering block accumulator loop for bucket 56:  bucket 55: 80%  bucket 55: 90%  bucket 56: 10%  bucket 55: 100%  Sorting block of length 79 for bucket 55  bucket 56: 20%  (Using difference cover)  bucket 56: 30%  Sorting block time: 00:00:00  bucket 56: 40%Returning block of 65 for bucket 54  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 57 of 60Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  Sorting block time: 00:00:00Returning block of 114 for bucket 58  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 59:  bucket 59: 10%  bucket 59: 20%  bucket 59: 30%  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:013 reads; of these:  3 (100.00%) were unpaired; of these:    3 (100.00%) aligned 0 times    0 (0.00%) aligned exactly 1 time    0 (0.00%) aligned >1 times0.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #7)" name="6" time="51.477190256118774">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60Getting block 3 of 60  Reserving size (126) for bucket 3  Reserving size (126) for bucket 1Getting block 2 of 60  Calculating Z arrays for bucket 1  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 3Getting block 5 of 60  Reserving size (126) for bucket 5  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 5Getting block 4 of 60  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 5:  Reserving size (126) for bucket 4  bucket 2: 10%Getting block 6 of 60  bucket 1: 10%  bucket 5: 10%  bucket 2: 20%  bucket 1: 20%  bucket 2: 30%  Reserving size (126) for bucket 6  bucket 1: 30%  bucket 5: 20%  bucket 2: 40%Getting block 8 of 60  Entering block accumulator loop for bucket 3:  Reserving size (126) for bucket 8Getting block 7 of 60  bucket 2: 50%  Reserving size (126) for bucket 7  Calculating Z arrays for bucket 8  bucket 5: 30%  Calculating Z arrays for bucket 6  bucket 1: 40%  Calculating Z arrays for bucket 7  bucket 5: 40%  bucket 1: 50%  Calculating Z arrays for bucket 4  bucket 1: 60%  Entering block accumulator loop for bucket 7:  bucket 2: 60%  Entering block accumulator loop for bucket 6:  bucket 5: 50%  bucket 2: 70%  bucket 7: 10%  bucket 6: 10%  bucket 2: 80%  Entering block accumulator loop for bucket 8:  bucket 5: 60%  Entering block accumulator loop for bucket 4:  bucket 2: 90%  bucket 1: 70%  bucket 7: 20%  bucket 6: 20%  bucket 2: 100%  bucket 4: 10%  bucket 6: 30%  bucket 7: 30%  bucket 1: 80%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 3: 10%  bucket 6: 40%  bucket 8: 10%  bucket 4: 20%  bucket 5: 70%  bucket 6: 50%  bucket 7: 40%  bucket 4: 30%  bucket 5: 80%  bucket 6: 60%  bucket 7: 50%  bucket 3: 20%  bucket 8: 20%  bucket 6: 70%  bucket 4: 40%  bucket 7: 60%  bucket 1: 90%  bucket 8: 30%  bucket 5: 90%  bucket 1: 100%  bucket 6: 80%  Sorting block of length 42 for bucket 1  (Using difference cover)  Sorting block time: 00:00:00  bucket 8: 40%  bucket 5: 100%  bucket 3: 30%  bucket 8: 50%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 6: 90%  bucket 7: 70%  bucket 8: 60%  bucket 3: 40%  bucket 7: 80%  bucket 4: 50%  bucket 3: 50%  bucket 8: 70%  bucket 6: 100%Returning block of 85 for bucket 2  bucket 4: 60%  Sorting block of length 90 for bucket 6  bucket 7: 90%  (Using difference cover)  bucket 3: 60%  bucket 8: 80%  bucket 7: 100%  bucket 4: 70%  bucket 3: 70%  bucket 8: 90%  Sorting block of length 75 for bucket 7  bucket 4: 80%  (Using difference cover)  bucket 8: 100%  bucket 4: 90%  Sorting block time: 00:00:00  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 3: 80%  bucket 4: 100%Returning block of 64 for bucket 5  bucket 3: 90%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 3: 100%  Sorting block of length 106 for bucket 3  (Using difference cover)  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 76 for bucket 7Getting block 9 of 60  Reserving size (126) for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 9  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  Sorting block time: 00:00:00  bucket 10: 70%Returning block of 125 for bucket 9  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:Getting block 12 of 60  Reserving size (126) for bucket 12  bucket 11: 10%  Calculating Z arrays for bucket 12  bucket 11: 20%  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 11: 30%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 11: 40%  bucket 12: 60%  bucket 11: 50%  bucket 12: 70%  bucket 11: 60%  bucket 12: 80%  bucket 11: 70%  bucket 12: 90%  bucket 12: 100%  bucket 11: 80%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Getting block 16 of 60Returning block of 69 for bucket 15  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 50%  bucket 17: 60%  Entering block accumulator loop for bucket 18:  bucket 17: 70%  bucket 18: 10%  bucket 17: 80%  bucket 18: 20%  bucket 17: 90%  bucket 18: 30%  bucket 17: 100%Getting block 19 of 60  Reserving size (126) for bucket 19  bucket 18: 40%  Calculating Z arrays for bucket 19  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  Entering block accumulator loop for bucket 19:  bucket 18: 80%  bucket 19: 10%  bucket 18: 90%  bucket 19: 20%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  Sorting block time: 00:00:00  bucket 19: 90%Returning block of 40 for bucket 17  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  bucket 22: 10%  bucket 22: 20%  Entering block accumulator loop for bucket 23:  bucket 22: 30%  bucket 22: 40%  bucket 23: 10%  bucket 22: 50%  bucket 23: 20%  bucket 22: 60%  bucket 23: 30%  bucket 22: 70%  bucket 23: 40%  bucket 22: 80%  bucket 23: 50%  bucket 22: 90%  bucket 23: 60%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Getting block 26 of 60Returning block of 67 for bucket 25  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28Getting block 29 of 60  Entering block accumulator loop for bucket 28:  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 10%  bucket 28: 20%  Entering block accumulator loop for bucket 29:  bucket 28: 30%  bucket 29: 10%  bucket 28: 40%  bucket 29: 20%  bucket 28: 50%  bucket 29: 30%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 29: 40%  bucket 28: 90%  bucket 29: 50%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  Sorting block time: 00:00:00Returning block of 107 for bucket 28  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 31:  bucket 31: 10%  Entering block accumulator loop for bucket 32:  bucket 31: 20%  bucket 31: 30%  bucket 32: 10%  bucket 31: 40%  bucket 32: 20%  bucket 31: 50%  bucket 32: 30%  bucket 31: 60%  bucket 32: 40%  bucket 31: 70%  bucket 32: 50%  bucket 31: 80%  bucket 32: 60%  bucket 31: 90%  bucket 32: 70%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  bucket 33: 20%  bucket 33: 30%  Entering block accumulator loop for bucket 34:  bucket 33: 40%  bucket 34: 10%  bucket 33: 50%  bucket 34: 20%  bucket 33: 60%  bucket 34: 30%  bucket 33: 70%  bucket 34: 40%  bucket 33: 80%  bucket 34: 50%  bucket 34: 60%  bucket 33: 90%  bucket 34: 70%  bucket 33: 100%  bucket 34: 80%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 36: 20%  bucket 36: 30%  bucket 36: 40%Getting block 37 of 60  Reserving size (126) for bucket 37  bucket 36: 50%  Calculating Z arrays for bucket 37  bucket 36: 60%Getting block 38 of 60  bucket 36: 70%  Entering block accumulator loop for bucket 37:  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  bucket 36: 80%  bucket 37: 10%  bucket 36: 90%  bucket 37: 20%  Entering block accumulator loop for bucket 38:  bucket 37: 30%  bucket 37: 40%  bucket 38: 10%  bucket 37: 50%  bucket 37: 60%  bucket 38: 20%  bucket 37: 70%  bucket 38: 30%  bucket 37: 80%  bucket 37: 90%  bucket 38: 40%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  Sorting block time: 00:00:00  bucket 38: 80%Returning block of 60 for bucket 37  bucket 36: 100%  bucket 38: 90%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 40:  Entering block accumulator loop for bucket 39:  bucket 40: 10%  bucket 40: 20%  bucket 39: 10%  bucket 40: 30%  bucket 40: 40%  bucket 39: 20%  bucket 40: 50%  bucket 39: 30%  bucket 40: 60%  bucket 40: 70%  bucket 39: 40%  bucket 40: 80%  bucket 40: 90%  bucket 39: 50%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%  bucket 41: 40%  bucket 41: 50%  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60Getting block 43 of 60  Reserving size (126) for bucket 42  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 42  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 42:  Entering block accumulator loop for bucket 43:  bucket 42: 10%  bucket 43: 10%  bucket 42: 20%  bucket 43: 20%  bucket 42: 30%  bucket 43: 30%  bucket 42: 40%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%  bucket 42: 50%  bucket 43: 70%  bucket 42: 60%  bucket 43: 80%  bucket 42: 70%  bucket 43: 90%  bucket 42: 80%  bucket 43: 100%  bucket 42: 90%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  Sorting block time: 00:00:00Returning block of 67 for bucket 44  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  Entering block accumulator loop for bucket 47:  bucket 48: 10%  bucket 47: 10%  bucket 48: 20%  bucket 47: 20%  bucket 48: 30%  bucket 47: 30%  bucket 48: 40%  bucket 47: 40%  bucket 48: 50%  bucket 47: 50%  bucket 48: 60%  bucket 47: 60%  bucket 48: 70%  bucket 47: 70%  bucket 48: 80%  bucket 47: 80%  bucket 48: 90%  bucket 47: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 51: 10%  bucket 51: 20%  bucket 51: 30%  bucket 51: 40%  bucket 51: 50%  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 52:  bucket 52: 10%  bucket 52: 20%  bucket 52: 30%  bucket 52: 40%Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  bucket 52: 50%  Entering block accumulator loop for bucket 53:  bucket 52: 60%  bucket 53: 10%  bucket 52: 70%  bucket 53: 20%  bucket 52: 80%  bucket 53: 30%  bucket 53: 40%  bucket 52: 90%  bucket 53: 50%  bucket 52: 100%  Sorting block of length 106 for bucket 52  bucket 53: 60%  (Using difference cover)  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%Getting block 58 of 60  bucket 57: 90%  Reserving size (126) for bucket 58  bucket 57: 100%  Calculating Z arrays for bucket 58  Sorting block of length 85 for bucket 57  (Using difference cover)  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 59:  bucket 60: 10%  bucket 59: 10%  bucket 60: 20%  bucket 59: 20%  bucket 60: 30%  bucket 60: 40%  bucket 59: 30%  bucket 60: 50%  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:013 reads; of these:  3 (100.00%) were paired; of these:    3 (100.00%) aligned concordantly 0 times    0 (0.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    3 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    3 pairs aligned 0 times concordantly or discordantly; of these:      6 mates make up the pairs; of these:        6 (100.00%) aligned 0 times        0 (0.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times0.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #8)" name="7" time="59.9059681892395">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60Getting block 3 of 60  Reserving size (126) for bucket 2  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 2Getting block 6 of 60Getting block 5 of 60  Reserving size (126) for bucket 5  Calculating Z arrays for bucket 1  Entering block accumulator loop for bucket 2:Getting block 7 of 60  Reserving size (126) for bucket 7Getting block 4 of 60  Calculating Z arrays for bucket 7  Calculating Z arrays for bucket 3  Reserving size (126) for bucket 4  Entering block accumulator loop for bucket 3:  bucket 2: 10%  bucket 3: 10%  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 5:  Reserving size (126) for bucket 6  Entering block accumulator loop for bucket 7:  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 4:  bucket 3: 20%  bucket 2: 20%Getting block 8 of 60  Reserving size (126) for bucket 8  bucket 7: 10%  bucket 4: 10%  bucket 1: 10%  bucket 7: 20%  bucket 1: 20%  bucket 7: 30%  bucket 3: 30%  bucket 1: 30%  bucket 4: 20%  bucket 2: 30%  bucket 3: 40%  bucket 7: 40%  bucket 1: 40%  bucket 3: 50%  bucket 7: 50%  bucket 4: 30%  Calculating Z arrays for bucket 8  bucket 1: 50%  bucket 4: 40%  bucket 3: 60%  bucket 1: 60%  bucket 7: 60%  bucket 4: 50%  bucket 1: 70%  Entering block accumulator loop for bucket 8:  bucket 3: 70%  bucket 4: 60%  bucket 1: 80%  bucket 7: 70%  bucket 3: 80%  bucket 4: 70%  bucket 1: 90%  bucket 7: 80%  bucket 8: 10%  bucket 7: 90%  bucket 3: 90%  bucket 4: 80%  bucket 8: 20%  bucket 7: 100%  bucket 4: 90%  bucket 1: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 2: 40%  bucket 3: 100%  bucket 2: 50%  bucket 4: 100%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 2: 60%  bucket 8: 30%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 5: 10%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 5: 20%  bucket 2: 70%  bucket 5: 30%  bucket 8: 40%  bucket 5: 40%  bucket 2: 80%  bucket 8: 50%  bucket 5: 50%  bucket 8: 60%  bucket 2: 90%  Sorting block time: 00:00:00Returning block of 76 for bucket 7  bucket 8: 70%  bucket 2: 100%  bucket 5: 60%  Sorting block of length 84 for bucket 2  bucket 5: 70%  bucket 8: 80%  bucket 5: 80%  bucket 8: 90%  bucket 5: 90%  bucket 8: 100%  bucket 5: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  (Using difference cover)  Sorting block of length 63 for bucket 5  (Using difference cover)  Calculating Z arrays for bucket 6  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Entering block accumulator loop for bucket 6:  bucket 6: 10%  bucket 6: 20%  bucket 6: 30%  bucket 6: 40%  bucket 6: 50%  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 91 for bucket 6Getting block 9 of 60Getting block 11 of 60  Reserving size (126) for bucket 9Getting block 10 of 60  Calculating Z arrays for bucket 9  Reserving size (126) for bucket 10  Reserving size (126) for bucket 11Getting block 12 of 60  Calculating Z arrays for bucket 11  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 10  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  Entering block accumulator loop for bucket 10:  bucket 12: 10%  bucket 9: 10%  bucket 10: 10%  bucket 11: 10%  bucket 9: 20%  bucket 12: 20%  bucket 10: 20%  bucket 11: 20%  bucket 12: 30%  bucket 9: 30%  bucket 10: 30%  bucket 12: 40%  bucket 9: 40%  bucket 11: 30%  bucket 12: 50%  bucket 9: 50%  bucket 10: 40%  bucket 11: 40%  bucket 12: 60%  bucket 9: 60%  bucket 10: 50%  bucket 11: 50%  bucket 12: 70%  bucket 9: 70%  bucket 11: 60%  bucket 12: 80%  bucket 10: 60%  bucket 9: 80%  bucket 12: 90%  bucket 11: 70%  bucket 10: 70%  bucket 12: 100%  bucket 9: 90%  bucket 11: 80%  bucket 10: 80%  bucket 9: 100%  bucket 11: 90%  Sorting block of length 124 for bucket 9  (Using difference cover)  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 10: 90%  bucket 11: 100%  bucket 10: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  bucket 13: 30%  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 14:  bucket 13: 40%  bucket 14: 10%  Entering block accumulator loop for bucket 15:  bucket 13: 50%  bucket 14: 20%  bucket 15: 10%  bucket 13: 60%  bucket 14: 30%  bucket 15: 20%  bucket 13: 70%  bucket 15: 30%  bucket 14: 40%  bucket 13: 80%  bucket 15: 40%  bucket 13: 90%  bucket 15: 50%  bucket 14: 50%  bucket 15: 60%  bucket 13: 100%  Sorting block of length 85 for bucket 13  bucket 14: 60%  (Using difference cover)  bucket 15: 70%  bucket 14: 70%  bucket 15: 80%  bucket 14: 80%  bucket 15: 90%  bucket 14: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 16 of 60Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 17:  bucket 17: 10%  Entering block accumulator loop for bucket 16:  bucket 17: 20%  bucket 17: 30%  bucket 16: 10%  bucket 17: 40%  bucket 16: 20%  bucket 17: 50%  bucket 17: 60%  bucket 16: 30%  bucket 17: 70%  bucket 16: 40%  bucket 17: 80%  bucket 16: 50%  bucket 17: 90%  bucket 17: 100%  bucket 16: 60%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  Sorting block time: 00:00:00  bucket 16: 100%Returning block of 40 for bucket 17  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%Getting block 20 of 60  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  Sorting block time: 00:00:00Returning block of 108 for bucket 19  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 22:  bucket 22: 10%Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  bucket 22: 20%  bucket 22: 30%  Entering block accumulator loop for bucket 24:  bucket 22: 40%  bucket 22: 50%  bucket 24: 10%  bucket 22: 60%  bucket 24: 20%  bucket 22: 70%  bucket 24: 30%  bucket 22: 80%  bucket 24: 40%  bucket 22: 90%  bucket 24: 50%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Entering block accumulator loop for bucket 23:  Sorting block time: 00:00:00Returning block of 81 for bucket 22  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  Entering block accumulator loop for bucket 25:  bucket 26: 20%  bucket 25: 10%  bucket 26: 30%  bucket 26: 40%  bucket 25: 20%  bucket 26: 50%  bucket 26: 60%  bucket 25: 30%  bucket 26: 70%  bucket 26: 80%  bucket 25: 40%  bucket 26: 90%  bucket 25: 50%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 27 of 60Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 28:  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 28: 10%  bucket 27: 20%  bucket 28: 20%  bucket 28: 30%  bucket 27: 30%  bucket 28: 40%  bucket 27: 40%  bucket 28: 50%Getting block 29 of 60  bucket 28: 60%  Reserving size (126) for bucket 29  bucket 27: 50%  bucket 28: 70%  Calculating Z arrays for bucket 29  bucket 27: 60%  bucket 28: 80%  bucket 27: 70%  bucket 28: 90%  Entering block accumulator loop for bucket 29:  bucket 27: 80%  bucket 28: 100%  bucket 27: 90%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 10%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  Sorting block time: 00:00:00Returning block of 120 for bucket 27  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60Getting block 31 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 30:  Entering block accumulator loop for bucket 31:  bucket 30: 10%  bucket 30: 20%  bucket 31: 10%  bucket 30: 30%  bucket 30: 40%  bucket 31: 20%  bucket 30: 50%  bucket 31: 30%  bucket 30: 60%  bucket 31: 40%  bucket 30: 70%  bucket 31: 50%  bucket 30: 80%  bucket 31: 60%  bucket 30: 90%  bucket 30: 100%  bucket 31: 70%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 33: 20%Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  bucket 33: 30%  Entering block accumulator loop for bucket 34:  bucket 33: 40%  bucket 34: 10%  bucket 33: 50%  bucket 33: 60%  bucket 34: 20%  bucket 33: 70%  bucket 34: 30%  bucket 34: 40%  bucket 34: 50%  bucket 33: 80%  bucket 34: 60%  bucket 33: 90%  bucket 34: 70%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 35:  Entering block accumulator loop for bucket 36:  bucket 35: 10%  bucket 36: 10%  bucket 35: 20%  bucket 36: 20%  bucket 35: 30%  bucket 36: 30%  bucket 35: 40%  bucket 36: 40%  bucket 35: 50%  bucket 36: 50%  bucket 35: 60%  bucket 36: 60%  bucket 35: 70%  bucket 36: 70%  bucket 35: 80%  bucket 36: 80%  bucket 35: 90%  bucket 36: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%  bucket 37: 20%  bucket 37: 30%  bucket 37: 40%  bucket 37: 50%Getting block 38 of 60  bucket 37: 60%  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  bucket 37: 70%  bucket 37: 80%  Entering block accumulator loop for bucket 38:  bucket 37: 90%  bucket 38: 10%  bucket 37: 100%  bucket 38: 20%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  Sorting block time: 00:00:00Returning block of 60 for bucket 37  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39Getting block 40 of 60  Entering block accumulator loop for bucket 39:  Reserving size (126) for bucket 40  bucket 39: 10%  Calculating Z arrays for bucket 40  bucket 39: 20%  Entering block accumulator loop for bucket 40:  bucket 39: 30%  bucket 40: 10%  bucket 39: 40%  bucket 40: 20%  bucket 39: 50%  bucket 40: 30%  bucket 39: 60%  bucket 40: 40%  bucket 39: 70%  bucket 40: 50%  bucket 39: 80%  bucket 40: 60%  bucket 39: 90%  bucket 40: 70%  bucket 39: 100%  bucket 40: 80%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 42:  Entering block accumulator loop for bucket 41:  bucket 42: 10%Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  bucket 42: 20%  bucket 42: 30%  Entering block accumulator loop for bucket 43:  bucket 41: 10%  bucket 42: 40%  bucket 43: 10%  bucket 42: 50%  bucket 43: 20%  bucket 41: 20%  bucket 42: 60%  bucket 43: 30%  bucket 42: 70%  bucket 41: 30%  bucket 42: 80%  bucket 43: 40%  bucket 42: 90%  bucket 43: 50%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  bucket 41: 40%  bucket 43: 60%  bucket 41: 50%  bucket 43: 70%  bucket 41: 60%  bucket 43: 80%  bucket 41: 70%  bucket 43: 90%  bucket 41: 80%  bucket 43: 100%  bucket 41: 90%  Sorting block of length 121 for bucket 43  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%Getting block 48 of 60  bucket 47: 80%  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  bucket 47: 90%  bucket 47: 100%  Entering block accumulator loop for bucket 48:  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  Sorting block time: 00:00:00  bucket 48: 90%Returning block of 84 for bucket 47  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:Getting block 50 of 60  bucket 49: 10%  Reserving size (126) for bucket 50  bucket 49: 20%  Calculating Z arrays for bucket 50  bucket 49: 30%  bucket 49: 40%  Entering block accumulator loop for bucket 50:  bucket 49: 50%  bucket 49: 60%  bucket 50: 10%  bucket 49: 70%  bucket 50: 20%  bucket 49: 80%  bucket 50: 30%  bucket 49: 90%  bucket 50: 40%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  Entering block accumulator loop for bucket 51:  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  bucket 51: 10%  Entering block accumulator loop for bucket 52:  bucket 51: 20%  bucket 52: 10%  bucket 51: 30%  bucket 52: 20%  bucket 51: 40%  bucket 52: 30%  bucket 51: 50%  bucket 52: 40%  bucket 51: 60%  bucket 52: 50%  bucket 51: 70%  bucket 52: 60%  bucket 51: 80%  bucket 52: 70%  bucket 51: 90%  bucket 52: 80%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%Getting block 54 of 60  Reserving size (126) for bucket 54  bucket 53: 40%  Calculating Z arrays for bucket 54  bucket 53: 50%  bucket 53: 60%  Entering block accumulator loop for bucket 54:  bucket 53: 70%  bucket 54: 10%  bucket 53: 80%  bucket 54: 20%  bucket 53: 90%  bucket 54: 30%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block time: 00:00:00  Sorting block of length 64 for bucket 54  (Using difference cover)Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60Getting block 58 of 60  Reserving size (126) for bucket 57  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 57  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 57:  Entering block accumulator loop for bucket 58:  bucket 57: 10%  bucket 58: 10%  bucket 57: 20%  bucket 57: 30%  bucket 58: 20%  bucket 57: 40%  bucket 58: 30%  bucket 57: 50%  bucket 57: 60%  bucket 58: 40%  bucket 57: 70%  bucket 57: 80%  bucket 58: 50%  bucket 57: 90%  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 57: 100%  bucket 58: 90%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 59 of 60  Sorting block time: 00:00:00  Reserving size (126) for bucket 59Returning block of 114 for bucket 58  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 59:  bucket 59: 10%  bucket 59: 20%  bucket 59: 30%  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times85.80% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #9)" name="8" time="16.53708028793335">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 8, "time_seconds": 16.53708028793335, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.2.1+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2 (Test #10)" name="9" time="42.79240036010742">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1  Entering block accumulator loop for bucket 1:Getting block 2 of 60  bucket 1: 10%Getting block 4 of 60  Reserving size (126) for bucket 2  Reserving size (126) for bucket 4  Calculating Z arrays for bucket 2Getting block 3 of 60  Reserving size (126) for bucket 3  bucket 1: 20%Getting block 5 of 60  Reserving size (126) for bucket 5Getting block 8 of 60  Reserving size (126) for bucket 8  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 5:  Calculating Z arrays for bucket 4Getting block 7 of 60  Entering block accumulator loop for bucket 3:  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 8  Reserving size (126) for bucket 7  bucket 1: 30%  bucket 3: 10%  Entering block accumulator loop for bucket 4:  Calculating Z arrays for bucket 7  bucket 4: 10%Getting block 6 of 60  Reserving size (126) for bucket 6  bucket 1: 40%  bucket 4: 20%  bucket 5: 10%  Entering block accumulator loop for bucket 7:  bucket 4: 30%  bucket 3: 20%  Calculating Z arrays for bucket 6  bucket 1: 50%  bucket 5: 20%  bucket 7: 10%  bucket 4: 40%  bucket 3: 30%  Entering block accumulator loop for bucket 8:  bucket 2: 10%  bucket 4: 50%  bucket 5: 30%  bucket 3: 40%  bucket 7: 20%  bucket 4: 60%  bucket 5: 40%  bucket 3: 50%  bucket 7: 30%  bucket 2: 20%  bucket 5: 50%  bucket 4: 70%  bucket 3: 60%  Entering block accumulator loop for bucket 6:  bucket 1: 60%  bucket 4: 80%  bucket 7: 40%  bucket 5: 60%  bucket 6: 10%  bucket 1: 70%  bucket 2: 30%  bucket 4: 90%  bucket 3: 70%  bucket 5: 70%  bucket 7: 50%  bucket 3: 80%  bucket 6: 20%  bucket 4: 100%  bucket 1: 80%  bucket 6: 30%  bucket 7: 60%  bucket 2: 40%  Sorting block of length 68 for bucket 4  bucket 7: 70%  bucket 3: 90%  bucket 7: 80%  bucket 1: 90%  bucket 7: 90%  bucket 3: 100%  bucket 1: 100%  (Using difference cover)  bucket 5: 80%  bucket 6: 40%  bucket 7: 100%  bucket 8: 10%  bucket 2: 50%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 6: 50%  bucket 5: 90%  Sorting block of length 106 for bucket 3  bucket 8: 20%  (Using difference cover)  bucket 5: 100%  Sorting block of length 75 for bucket 7  Sorting block of length 63 for bucket 5  (Using difference cover)  (Using difference cover)  bucket 2: 60%  bucket 6: 60%  bucket 8: 30%  bucket 2: 70%  bucket 6: 70%  bucket 8: 40%  bucket 2: 80%  bucket 6: 80%  Sorting block time: 00:00:00  bucket 8: 50%Returning block of 69 for bucket 4  bucket 8: 60%  bucket 6: 90%  bucket 2: 90%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 8: 70%  bucket 2: 100%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 8: 80%  Sorting block time: 00:00:00Returning block of 76 for bucket 7  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 64 for bucket 5Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%Getting block 10 of 60  Reserving size (126) for bucket 10  bucket 9: 20%Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 10  Calculating Z arrays for bucket 11  bucket 9: 30%  bucket 9: 40%  Entering block accumulator loop for bucket 10:  Entering block accumulator loop for bucket 11:  bucket 9: 50%  bucket 10: 10%  bucket 11: 10%  bucket 10: 20%  bucket 9: 60%  bucket 11: 20%  bucket 10: 30%  bucket 9: 70%  bucket 11: 30%  bucket 10: 40%  bucket 11: 40%  bucket 10: 50%  bucket 9: 80%  bucket 11: 50%  bucket 10: 60%  bucket 9: 90%  bucket 11: 60%  bucket 10: 70%  bucket 9: 100%  bucket 10: 80%  bucket 11: 70%  Sorting block of length 124 for bucket 9  bucket 10: 90%  (Using difference cover)  bucket 11: 80%  bucket 10: 100%  bucket 11: 90%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 16 of 60Getting block 17 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  Entering block accumulator loop for bucket 17:  bucket 16: 70%  bucket 17: 10%  bucket 16: 80%  bucket 17: 20%  bucket 16: 90%  bucket 16: 100%  bucket 17: 30%  Sorting block of length 100 for bucket 16  (Using difference cover)  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%Getting block 20 of 60  Reserving size (126) for bucket 20  bucket 19: 40%  Calculating Z arrays for bucket 20  bucket 19: 50%  bucket 19: 60%  Entering block accumulator loop for bucket 20:  bucket 19: 70%  bucket 20: 10%  bucket 19: 80%  bucket 20: 20%  bucket 19: 90%  bucket 19: 100%  bucket 20: 30%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  Sorting block time: 00:00:00Returning block of 108 for bucket 19  bucket 20: 80%Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  Sorting block time: 00:00:00Returning block of 98 for bucket 20  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Sorting block time: 00:00:00  Entering block accumulator loop for bucket 23:Returning block of 81 for bucket 22  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%Getting block 25 of 60  bucket 24: 60%  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  bucket 24: 70%  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 24: 80%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 24: 90%  bucket 25: 50%  bucket 24: 100%  bucket 25: 60%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 10%  Entering block accumulator loop for bucket 27:  bucket 26: 20%  bucket 27: 10%  bucket 26: 30%  bucket 27: 20%  bucket 26: 40%  bucket 27: 30%  bucket 26: 50%  bucket 27: 40%  bucket 26: 60%  bucket 27: 50%  bucket 27: 60%  bucket 26: 70%  bucket 27: 70%  bucket 26: 80%  bucket 27: 80%  bucket 26: 90%  bucket 27: 90%  bucket 27: 100%  bucket 26: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 10%  Entering block accumulator loop for bucket 29:  bucket 28: 20%  bucket 29: 10%  bucket 28: 30%  bucket 29: 20%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 29: 30%  bucket 28: 80%  bucket 29: 40%  bucket 28: 90%  bucket 29: 50%  bucket 28: 100%  Sorting block of length 106 for bucket 28  bucket 29: 60%  (Using difference cover)Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  bucket 29: 70%  Sorting block time: 00:00:00Returning block of 125 for bucket 30  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33Getting block 34 of 60Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 35:  Entering block accumulator loop for bucket 34:  bucket 35: 10%  bucket 34: 10%  bucket 35: 20%  bucket 34: 20%  bucket 35: 30%  bucket 34: 30%  bucket 35: 40%  bucket 35: 50%  bucket 34: 40%  bucket 35: 60%  bucket 35: 70%  bucket 34: 50%  bucket 35: 80%  Entering block accumulator loop for bucket 33:  bucket 35: 90%  bucket 34: 60%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 34: 70%  bucket 33: 10%  bucket 34: 80%  bucket 33: 20%  bucket 34: 90%  bucket 33: 30%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 33: 40%  Sorting block time: 00:00:00Returning block of 113 for bucket 35  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 36: 20%  bucket 36: 30%Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  bucket 36: 40%  Entering block accumulator loop for bucket 37:  bucket 37: 10%  bucket 36: 50%  bucket 37: 20%  bucket 37: 30%  bucket 37: 40%  bucket 37: 50%  bucket 37: 60%  bucket 36: 60%  bucket 37: 70%  bucket 37: 80%  bucket 36: 70%  bucket 37: 90%  bucket 36: 80%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 38 of 60Getting block 39 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  Entering block accumulator loop for bucket 39:  bucket 38: 50%  bucket 39: 10%  bucket 38: 60%  bucket 39: 20%  bucket 38: 70%  bucket 38: 80%  bucket 39: 30%  bucket 38: 90%  bucket 39: 40%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 50%  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  Sorting block time: 00:00:00Returning block of 118 for bucket 38  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%  bucket 40: 40%  bucket 40: 50%  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)Getting block 41 of 60  Sorting block time: 00:00:00  Reserving size (126) for bucket 41Returning block of 42 for bucket 40  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%  bucket 41: 40%  bucket 41: 50%  bucket 41: 60%  bucket 41: 70%Getting block 42 of 60  Reserving size (126) for bucket 42  bucket 41: 80%  Calculating Z arrays for bucket 42  bucket 41: 90%  bucket 41: 100%  Entering block accumulator loop for bucket 42:  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 10%  bucket 42: 20%  bucket 42: 30%  bucket 42: 40%  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  Sorting block time: 00:00:00  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60Getting block 45 of 60  Reserving size (126) for bucket 45  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 45  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 45:  Entering block accumulator loop for bucket 44:  bucket 45: 10%  bucket 44: 10%  bucket 45: 20%  bucket 44: 20%  bucket 45: 30%  bucket 44: 30%  bucket 45: 40%  bucket 44: 40%  bucket 45: 50%  bucket 44: 50%  bucket 45: 60%  bucket 44: 60%  bucket 45: 70%  bucket 44: 70%  bucket 45: 80%  bucket 44: 80%  bucket 45: 90%  bucket 44: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  bucket 44: 100%  (Using difference cover)  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%Getting block 47 of 60  bucket 46: 100%  Reserving size (126) for bucket 47  Sorting block of length 69 for bucket 46  (Using difference cover)  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  Sorting block time: 00:00:00Returning block of 70 for bucket 46  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:Getting block 50 of 60  bucket 49: 10%Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  bucket 49: 20%  Entering block accumulator loop for bucket 51:  bucket 49: 30%  Reserving size (126) for bucket 50  bucket 49: 40%Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Calculating Z arrays for bucket 50  bucket 51: 10%  bucket 49: 50%  Entering block accumulator loop for bucket 50:  bucket 51: 20%  bucket 49: 60%  Entering block accumulator loop for bucket 52:  bucket 50: 10%  bucket 49: 70%  bucket 52: 10%  bucket 50: 20%  bucket 51: 30%  bucket 50: 30%  bucket 52: 20%  bucket 51: 40%  bucket 49: 80%  bucket 50: 40%  bucket 52: 30%  bucket 49: 90%  bucket 50: 50%  bucket 52: 40%  bucket 49: 100%  Sorting block of length 74 for bucket 49  bucket 52: 50%  bucket 51: 50%  bucket 50: 60%  bucket 51: 60%  bucket 50: 70%  bucket 52: 60%  (Using difference cover)  bucket 51: 70%  bucket 52: 70%  bucket 50: 80%  bucket 51: 80%  bucket 52: 80%  bucket 50: 90%  bucket 51: 90%  bucket 52: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  bucket 51: 100%  (Using difference cover)  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53Getting block 54 of 60  Entering block accumulator loop for bucket 53:  Reserving size (126) for bucket 54  bucket 53: 10%  Calculating Z arrays for bucket 54  bucket 53: 20%  bucket 53: 30%  Entering block accumulator loop for bucket 54:  bucket 53: 40%  bucket 54: 10%  bucket 53: 50%  bucket 54: 20%  bucket 53: 60%  bucket 54: 30%  bucket 53: 70%  bucket 54: 40%  bucket 53: 80%  bucket 54: 50%  bucket 53: 90%  bucket 54: 60%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60Getting block 56 of 60  Reserving size (126) for bucket 55  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 55  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 55:  Entering block accumulator loop for bucket 56:  bucket 55: 10%  bucket 56: 10%  bucket 55: 20%  bucket 56: 20%  bucket 55: 30%  bucket 56: 30%  bucket 55: 40%  bucket 56: 40%  bucket 55: 50%  bucket 56: 50%  bucket 55: 60%  bucket 56: 60%  bucket 55: 70%  bucket 56: 70%  bucket 55: 80%  bucket 56: 80%  bucket 55: 90%  bucket 55: 100%  bucket 56: 90%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57Getting block 58 of 60  Entering block accumulator loop for bucket 57:  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  bucket 57: 10%  bucket 57: 20%  Entering block accumulator loop for bucket 58:  bucket 57: 30%  bucket 58: 10%  bucket 57: 40%  bucket 58: 20%  bucket 57: 50%  bucket 58: 30%  bucket 58: 40%  bucket 57: 60%  bucket 58: 50%  bucket 57: 70%  bucket 58: 60%  bucket 57: 80%  bucket 58: 70%  bucket 57: 90%  bucket 58: 80%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 59:  bucket 59: 10%  bucket 59: 20%  bucket 59: 30%  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo (Test #1)" name="0" time="64.53080463409424">
        
            
            <system-out><![CDATA[
            {"n_targets": 1,"n_bootstraps": 0,"n_processed": 200,"n_pseudoaligned": 200,"n_unique": 200,"p_pseudoaligned": 100.0,"p_unique": 100.0,"kallisto_version": "0.46.0","index_version": 10,"start_time": "Wed May 17 10:58:39 2023","call": "kallisto pseudo -i reference.kallisto --threads 1 -o . --batch /galaxy/server/database/jobs_directory/000/191/configs/tmp1yu75xsf --umi"}
            ]]></system-out>
            <system-err><![CDATA[
            [build] loading fasta file reference.fa[build] k-mer length: 31[build] counting k-mers ... done.[build] building target de Bruijn graph ...  done [build] creating equivalence classes ...  done[build] target de Bruijn graph has 1 contigs and contains 16269 k-mers [index] k-mer length: 31[index] number of targets: 1[index] number of k-mers: 16,269[index] number of equivalence classes: 1[quant] running in single-end mode[quant] will process file 1: /galaxy/server/database/objects/7/1/8/dataset_71839aae-827e-4611-9b89-1a7dcad0a068.dat[quant] will process file 1: /galaxy/server/database/objects/7/1/8/dataset_71839aae-827e-4611-9b89-1a7dcad0a068.dat[quant] finding pseudoalignments for all files ... done[quant] processed 200 reads, 200 reads pseudoaligned, 200 unique UMIs mapped
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo (Test #2)" name="1" time="20.27837634086609">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 1, "time_seconds": 20.27837634086609, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo", "tool_version": "0.46.0.1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo (Test #3)" name="2" time="34.9719979763031">
        
            
            <system-out><![CDATA[
            {"n_targets": 1,"n_bootstraps": 0,"n_processed": 100,"n_pseudoaligned": 0,"n_unique": 0,"p_pseudoaligned": 0.0,"p_unique": 0.0,"kallisto_version": "0.46.0","index_version": 10,"start_time": "Wed May 17 10:58:49 2023","call": "kallisto pseudo -i reference.kallisto --threads 1 -o . --single --fragment-length 200 --sd 20 /galaxy/server/database/objects/7/4/9/dataset_74905401-1e50-428a-86d0-8b0d19df0b0c.dat"}
            ]]></system-out>
            <system-err><![CDATA[
            [build] loading fasta file reference.fa[build] k-mer length: 31[build] counting k-mers ... done.[build] building target de Bruijn graph ...  done [build] creating equivalence classes ...  done[build] target de Bruijn graph has 1 contigs and contains 16269 k-mers [quant] fragment length distribution is truncated gaussian with mean = 200, sd = 20[index] k-mer length: 31[index] number of targets: 1[index] number of k-mers: 16,269[index] number of equivalence classes: 1[quant] running in single-end mode[quant] will process file 1: /galaxy/server/database/objects/7/4/9/dataset_74905401-1e50-428a-86d0-8b0d19df0b0c.dat[quant] finding pseudoalignments for the reads ... done[quant] processed 100 reads, 100 reads pseudoaligned
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo (Test #4)" name="3" time="51.33840489387512">
        
            
            <system-out><![CDATA[
            {"n_targets": 1,"n_bootstraps": 0,"n_processed": 200,"n_pseudoaligned": 0,"n_unique": 0,"p_pseudoaligned": 0.0,"p_unique": 0.0,"kallisto_version": "0.46.0","index_version": 10,"start_time": "Wed May 17 10:59:28 2023","call": "kallisto pseudo -i reference.kallisto --threads 1 -o . /galaxy/server/database/objects/7/7/c/dataset_77cdecfe-96dc-494f-97a5-4f77c6fcad5e.dat /galaxy/server/database/objects/2/9/f/dataset_29f4f5d4-70b3-49ab-879f-3b6dfa678f62.dat"}
            ]]></system-out>
            <system-err><![CDATA[
            [build] loading fasta file reference.fa[build] k-mer length: 31[build] counting k-mers ... done.[build] building target de Bruijn graph ...  done [build] creating equivalence classes ...  done[build] target de Bruijn graph has 15 contigs and contains 16670 k-mers [quant] fragment length distribution will be estimated from the data[index] k-mer length: 31[index] number of targets: 1[index] number of k-mers: 16,670[index] number of equivalence classes: 1[quant] running in paired-end mode[quant] will process pair 1: /galaxy/server/database/objects/7/7/c/dataset_77cdecfe-96dc-494f-97a5-4f77c6fcad5e.dat                             /galaxy/server/database/objects/2/9/f/dataset_29f4f5d4-70b3-49ab-879f-3b6dfa678f62.dat[quant] finding pseudoalignments for the reads ... done[quant] processed 200 reads, 200 reads pseudoaligned
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo (Test #5)" name="4" time="26.06269907951355">
        
            <error type="error" message="parameter 'index': an invalid option (None) was selected, please verify"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027index\u0027: an invalid option (None) was selected, please verify", "inputs": {  "single_paired|collection|collection_selector": "datasets",  "single_paired|collection|fastq_umi|forward": {   "id": "84e3df26f5ef9a1e",   "src": "hda"  },  "single_paired|collection|fastq_umi|reverse": {   "id": "3967b27bcceb208a",   "src": "hda"  },  "single_paired|collection|fastq_umi|umi": "yes",  "single_paired|single_paired_selector": "paired" }, "status": "error", "test_index": 4, "time_seconds": 26.06269907951355, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo", "tool_version": "0.46.0.1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #1)" name="0" time="82.4084038734436">
        
            
            <system-out><![CDATA[
            [1] "Extracting counts"[1] "Generating DGEList object"[1] "Generating Design"[1] "Calculating Normalisation Factors"[1] "Generating Contrasts"[1] "Generating MDS plot"[1] "Generating DE results"
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #2)" name="1" time="67.16701817512512">
        
            
            <system-out><![CDATA[
            [1] "Extracting counts"[1] "Generating DGEList object"[1] "Generating Design"[1] "Calculating Normalisation Factors"[1] "Generating Contrasts"[1] "Generating MDS plot"[1] "Generating DE results"
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #11)" name="10" time="46.56656789779663">
        
            
            <system-out><![CDATA[
            [1] "Extracting counts"[1] "Generating DGEList object"[1] "Generating Design"[1] "Calculating Normalisation Factors"[1] "Generating Contrasts"[1] "Generating MDS plot"[1] "Generating DE results"
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #3)" name="2" time="37.36942934989929">
        
            
            <system-out><![CDATA[
            [1] "Extracting counts"[1] "Generating DGEList object"[1] "Generating Design"[1] "Calculating Normalisation Factors"[1] "Generating Contrasts"[1] "Generating MDS plot"[1] "Generating DE results"[1] "Saving RData"
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #4)" name="3" time="38.62152123451233">
        
            
            <system-out><![CDATA[
            [1] "Extracting counts"[1] "Generating DGEList object"[1] "Generating Design"[1] "Calculating Normalisation Factors"[1] "Generating Contrasts"[1] "Generating MDS plot"[1] "Generating DE results"
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #5)" name="4" time="11.520661115646362">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 4, "time_seconds": 11.520661115646362, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.38.3+galaxy3"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #6)" name="5" time="78.93435883522034">
        
            
            <system-out><![CDATA[
            [1] "Extracting counts"[1] "Outputting filtered counts"[1] "Generating DGEList object"[1] "Generating Design"[1] "Calculating Normalisation Factors"[1] "Generating Contrasts"[1] "Generating MDS plot"[1] "Generating DE results"
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #7)" name="6" time="92.14292764663696">
        
            
            <system-out><![CDATA[
            [1] "Extracting counts"[1] "Generating DGEList object"[1] "Generating Design"[1] "Calculating Normalisation Factors"[1] "Generating Contrasts"[1] "Generating MDS plot"[1] "Generating DE results"
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #8)" name="7" time="11.188456296920776">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 7, "time_seconds": 11.188456296920776, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.38.3+galaxy3"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #9)" name="8" time="53.64805841445923">
        
            
            <system-out><![CDATA[
            [1] "Extracting counts"[1] "Generating DGEList object"[1] "Generating Design"[1] "Calculating Normalisation Factors"[1] "Generating Contrasts"[1] "Generating MDS plot"[1] "Generating DE results"
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #10)" name="9" time="43.97759747505188">
        
            
            <system-out><![CDATA[
            [1] "Extracting counts"[1] "Generating DGEList object"[1] "Generating Design"[1] "Calculating Normalisation Factors"[1] "Generating Contrasts"[1] "Generating MDS plot"[1] "Generating DE results"
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #1)" name="0" time="96.75173854827881">
        
            
            <system-out><![CDATA[
            [1] "Extracting counts"[1] "Generating DGEList object"[1] "Generating Design"[1] "Calculating Normalisation Factors"[1] "Generating Contrasts"[1] "Generating MDS plot"[1] "Generating DE results"
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #2)" name="1" time="77.39660596847534">
        
            
            <system-out><![CDATA[
            [1] "Extracting counts"[1] "Generating DGEList object"[1] "Generating Design"[1] "Calculating Normalisation Factors"[1] "Generating Contrasts"[1] "Generating MDS plot"[1] "Generating DE results"
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #11)" name="10" time="18.096580266952515">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 10, "time_seconds": 18.096580266952515, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.50.1+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #3)" name="2" time="58.28184747695923">
        
            
            <system-out><![CDATA[
            [1] "Extracting counts"[1] "Generating DGEList object"[1] "Generating Design"[1] "Calculating Normalisation Factors"[1] "Generating Contrasts"[1] "Generating MDS plot"[1] "Generating DE results"[1] "Saving RData"
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #4)" name="3" time="54.32339835166931">
        
            
            <system-out><![CDATA[
            [1] "Extracting counts"[1] "Generating DGEList object"[1] "Generating Design"[1] "Calculating Normalisation Factors"[1] "Generating Contrasts"[1] "Generating MDS plot"[1] "Generating DE results"
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #5)" name="4" time="55.37209177017212">
        
            
            <system-out><![CDATA[
            [1] "Extracting counts"[1] "Generating DGEList object"[1] "Generating Design"[1] "Calculating Normalisation Factors"[1] "Generating Contrasts"[1] "Generating MDS plot"[1] "Generating DE results"
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #6)" name="5" time="72.21351456642151">
        
            
            <system-out><![CDATA[
            [1] "Extracting counts"[1] "Outputting filtered counts"[1] "Generating DGEList object"[1] "Generating Design"[1] "Calculating Normalisation Factors"[1] "Generating Contrasts"[1] "Generating MDS plot"[1] "Generating DE results"
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #7)" name="6" time="108.23724508285522">
        
            
            <system-out><![CDATA[
            [1] "Extracting counts"[1] "Generating DGEList object"[1] "Generating Design"[1] "Calculating Normalisation Factors"[1] "Generating Contrasts"[1] "Generating MDS plot"[1] "Generating DE results"
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #8)" name="7" time="71.30494165420532">
        
            
            <system-out><![CDATA[
            [1] "Extracting counts"[1] "Generating DGEList object"[1] "Generating Design"[1] "Calculating Normalisation Factors"[1] "Generating Contrasts"[1] "Generating MDS plot"[1] "Generating DE results"
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #9)" name="8" time="66.70610642433167">
        
            
            <system-out><![CDATA[
            [1] "Extracting counts"[1] "Generating DGEList object"[1] "Generating Design"[1] "Calculating Normalisation Factors"[1] "Generating Contrasts"[1] "Generating MDS plot"[1] "Generating DE results"
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom (Test #10)" name="9" time="66.43503832817078">
        
            
            <system-out><![CDATA[
            [1] "Extracting counts"[1] "Generating DGEList object"[1] "Generating Design"[1] "Calculating Normalisation Factors"[1] "Generating Contrasts"[1] "Generating MDS plot"[1] "Generating DE results"
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_extract/poretools_extract (Test #1)" name="0" time="34.208967447280884">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_extract/poretools_extract (Test #2)" name="1" time="39.83108925819397">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_nucdist/poretools_nucdist (Test #1)" name="0" time="32.05049419403076">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_nucdist/poretools_nucdist (Test #2)" name="1" time="37.218353033065796">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_qualdist/poretools_qualdist (Test #1)" name="0" time="34.33726096153259">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_qualdist/poretools_qualdist (Test #2)" name="1" time="35.74958515167236">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats (Test #1)" name="0" time="39.48720073699951">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats (Test #2)" name="1" time="32.02241373062134">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats (Test #3)" name="2" time="33.92191123962402">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats (Test #4)" name="3" time="36.49136447906494">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats (Test #5)" name="4" time="36.52033257484436">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular (Test #1)" name="0" time="33.67172956466675">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular (Test #2)" name="1" time="35.70661902427673">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular (Test #3)" name="2" time="34.73915338516235">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular (Test #4)" name="3" time="36.61166048049927">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular (Test #5)" name="4" time="27.698832988739014">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "input": {   "id": "4db034711848faa5",   "src": "hda"  } }, "job": {  "command_line": "poretools tabular --type all \u0027/galaxy/server/database/objects/f/b/0/dataset_fb0c567a-9718-430d-9d41-bec5f55cc7ad.dat\u0027 \u003e \u0027/galaxy/server/database/objects/a/e/e/dataset_aee442cf-afc2-4ed0-bd4e-1642c155784e.dat\u0027",  "command_version": null,  "create_time": "2023-05-17T10:36:20.854677",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-chc8x",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "ecaf7673de3c5bc3",  "inputs": {   "input": {    "id": "4db034711848faa5",    "src": "hda",    "uuid": "fb0c567a-9718-430d-9d41-bec5f55cc7ad"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "ecaf7673de3c5bc3",    "src": "hda",    "uuid": "aee442cf-afc2-4ed0-bd4e-1642c155784e"   }  },  "params": {   "__input_ext": "\"fast5.tar\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "type": "\"all\""  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2023-05-17T10:36:28.598229",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0, exit_code: None, stderr: ." ], "status": "failure", "test_index": 4, "time_seconds": 27.698832988739014, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular", "tool_version": "0.6.1a1.0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times (Test #1)" name="0" time="39.07565140724182">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times (Test #2)" name="1" time="35.168511152267456">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times (Test #3)" name="2" time="28.154050827026367">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "input": {   "id": "23b6750eafd215d4",   "src": "hda"  } }, "job": {  "command_line": "poretools times --utc \u0027/galaxy/server/database/objects/b/0/7/dataset_b07accf6-4d68-45c1-9fae-08151df7b0b2.dat\u0027 \u003e \u0027/galaxy/server/database/objects/b/5/0/dataset_b50370f3-487d-4071-ab08-609142767cbd.dat\u0027",  "command_version": null,  "create_time": "2023-05-17T10:34:32.639165",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-48296",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "79c637a9b08ae93f",  "inputs": {   "input": {    "id": "23b6750eafd215d4",    "src": "hda",    "uuid": "b07accf6-4d68-45c1-9fae-08151df7b0b2"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output": {    "id": "79c637a9b08ae93f",    "src": "hda",    "uuid": "b50370f3-487d-4071-ab08-609142767cbd"   }  },  "params": {   "__input_ext": "\"fast5.tar\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\""  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times/0.6.1a1.0",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2023-05-17T10:34:41.818737",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times/0.6.1a1.0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times/0.6.1a1.0, exit_code: None, stderr: ." ], "status": "failure", "test_index": 2, "time_seconds": 28.154050827026367, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times", "tool_version": "0.6.1a1.0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times (Test #4)" name="3" time="33.01845860481262">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times (Test #5)" name="4" time="43.5153272151947">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_winner/poretools_winner (Test #1)" name="0" time="113.34738492965698">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_winner/poretools_winner (Test #2)" name="1" time="113.40446829795837">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_winner/poretools_winner (Test #3)" name="2" time="36.82776927947998">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/poretools_winner/poretools_winner (Test #4)" name="3" time="35.76401448249817">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie (Test #1)" name="0" time="31.456514835357666">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie (Test #2)" name="1" time="42.16973400115967">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie (Test #3)" name="2" time="31.77891707420349">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie (Test #4)" name="3" time="32.90934133529663">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "adv|fraction": "0.17",  "guide|guide_source|guide_gff_select": "history",  "guide|guide_source|ref_hist": {   "id": "949a22af799c78da",   "src": "hda"  },  "guide|use_guide": "yes",  "input_bam": {   "id": "0043d7ac70b129a2",   "src": "hda"  } }, "job": {  "command_line": "mkdir -p ./special_de_output/sample1/ \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/4/7/3/dataset_47380556-ab81-48f4-94df-96237fed1270.dat\u0027 guide.gff \u0026\u0026  stringtie \u0027/galaxy/server/database/objects/a/a/2/dataset_aa2cf04d-730b-4a6b-9b77-e930ed795772.dat\u0027    -o \u0027/galaxy/server/database/objects/4/4/0/dataset_440cfae0-1956-4c2a-a473-7b5aa63dfefb.dat\u0027 -p \"${GALAXY_SLOTS:-1}\"    -G guide.gff  -b ./special_de_output/sample1/  -f \u00270.17\u0027 -m \u0027200\u0027 -a \u002710\u0027 -j \u00271\u0027 -c \u00272\u0027 -g \u002750\u0027 -M \u00270.95\u0027",  "command_version": null,  "create_time": "2023-05-17T11:40:25.248218",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-mmhqk",  "galaxy_version": "23.0",  "history_id": "cf21e6fd86f3632b",  "id": "5f325f95e7b2a7fa",  "inputs": {   "guide|ref_hist": {    "id": "949a22af799c78da",    "src": "hda",    "uuid": "47380556-ab81-48f4-94df-96237fed1270"   },   "input_bam": {    "id": "0043d7ac70b129a2",    "src": "hda",    "uuid": "aa2cf04d-730b-4a6b-9b77-e930ed795772"   }  },  "job_messages": null,  "job_metrics": [],  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_gtf": {    "id": "4542e932a92608e8",    "src": "hda",    "uuid": "440cfae0-1956-4c2a-a473-7b5aa63dfefb"   }  },  "params": {   "__input_ext": "\"bam\"",   "adv": "{\"abundance_estimation\": false, \"bdist\": \"50\", \"bundle_fraction\": \"0.95\", \"disable_trimming\": false, \"fraction\": \"0.17\", \"min_anchor_cov\": \"1\", \"min_anchor_len\": \"10\", \"min_bundle_cov\": \"2\", \"min_tlen\": \"200\", \"multi_mapping\": false, \"name_prefix\": null, \"omit_sequences\": \"\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "guide": "{\"__current_case__\": 1, \"coverage_file\": false, \"guide_source\": {\"__current_case__\": 1, \"guide_gff_select\": \"history\", \"ref_hist\": {\"values\": [{\"id\": 653, \"src\": \"hda\"}]}}, \"input_estimation\": false, \"special_outputs\": {\"__current_case__\": 2, \"special_outputs_select\": \"no\"}, \"use_guide\": \"yes\"}",   "long_reads": "false",   "rna_strandness": "\"\""  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1",  "tool_stderr": "",  "tool_stdout": "",  "traceback": null,  "update_time": "2023-05-17T11:40:33.622469",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 3, "time_seconds": 32.90934133529663, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie", "tool_version": "2.1.1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie (Test #5)" name="4" time="47.44455146789551">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie (Test #6)" name="5" time="51.417885541915894">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie (Test #7)" name="6" time="35.59629249572754">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie (Test #8)" name="7" time="38.08334755897522">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie (Test #9)" name="8" time="21.866276502609253">
        
            <error type="error" message="parameter 'ref_builtin': an invalid option (None) was selected, please verify"><![CDATA[
                { "dynamic_param_error": true, "execution_problem": "parameter \u0027ref_builtin\u0027: an invalid option (None) was selected, please verify", "inputs": {  "adv|fraction": "0.15",  "guide|guide_source|guide_gff_select": "cached",  "guide|use_guide": "yes",  "input_bam": {   "id": "1ee00026f3f68e88",   "src": "hda"  } }, "status": "error", "test_index": 8, "time_seconds": 21.866276502609253, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie", "tool_version": "2.1.1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie_merge (Test #1)" name="0" time="64.28943514823914">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie_merge (Test #2)" name="1" time="43.76070785522461">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie_merge (Test #3)" name="2" time="36.2439546585083">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
</testsuite>