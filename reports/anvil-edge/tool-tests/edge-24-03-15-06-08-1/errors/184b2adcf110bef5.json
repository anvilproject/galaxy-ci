{
    "model_class": "Job",
    "id": "184b2adcf110bef5",
    "state": "error",
    "exit_code": null,
    "update_time": "2024-03-15T07:23:54.625682",
    "create_time": "2024-03-15T07:23:37.293514",
    "galaxy_version": "23.1",
    "command_version": null,
    "copied_from_job_id": null,
    "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0",
    "history_id": "c7df6090032d9293",
    "external_id": "gxy-zxrkp",
    "command_line": "mkdir ./index && mkdir ./output && salmon index -i ./index --kmerLen '31' --gencode --transcripts '/galaxy/server/database/objects/9/2/4/dataset_9240e525-65e5-4682-9db8-e5bd10499429.dat' && cp '/galaxy/server/database/objects/d/5/2/dataset_d52aed34-7d1a-4809-a36a-cce0799cfa73.dat' ./mate1.fastq.gz && gunzip ./mate1.fastq.gz && cp '/galaxy/server/database/objects/6/4/0/dataset_6405b075-3ff3-4bba-8773-b1fb951d4460.dat' ./mate2.fastq.gz && gunzip ./mate2.fastq.gz  && ln -s '/galaxy/server/database/objects/9/b/1/dataset_9b199ec3-610e-4ff2-844b-2e618fe45025.dat' ./alevinmap.tsv && salmon alevin -l A -i ./index -1 ./mate1.fastq -2 ./mate2.fastq -o ./output -p \"${GALAXY_SLOTS:-4}\" --chromium --tgMap ./alevinmap.tsv --keepCBFraction '1.0'   --dumpFeatures  --dumpMtx --freqThreshold '5'  && gunzip output/alevin/quants_mat.mtx.gz  && gunzip output/alevin/quants_tier_mat.gz  && gunzip output/aux_info/fld.gz && gunzip output/aux_info/observed_bias.gz && gunzip output/aux_info/observed_bias_3p.gz",
    "traceback": "Traceback (most recent call last):\n  File \"/galaxy/server/lib/galaxy/jobs/runners/__init__.py\", line 649, in _finish_or_resubmit_job\n    job_wrapper.finish(\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1961, in finish\n    self._finish_dataset(output_name, dataset, job, context, final_job_state, remote_metadata_directory)\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1778, in _finish_dataset\n    dataset.datatype.set_meta(dataset, overwrite=False)\n  File \"/galaxy/server/lib/galaxy/datatypes/tabular.py\", line 1689, in set_meta\n    for line in dataset_fh:\n  File \"/usr/local/lib/python3.10/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 1: invalid start byte\n",
    "params": {
        "__input_ext": "\"input\"",
        "dbkey": "\"?\"",
        "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",
        "optional": "{\"dumpBfh\": false, \"dumpFeatures\": true, \"dumpMtx\": true, \"dumpUmiGraph\": false, \"expectCells\": \"\", \"forceCells\": \"\", \"freqThreshold\": \"5\", \"keepCBFraction\": \"1.0\", \"lowRegionMinNumBarcodes\": \"\", \"maxNumBarcodes\": \"\", \"minScoreFraction\": \"\", \"mrna\": null, \"noDedup\": false, \"numCellBootstraps\": \"\", \"rrna\": null, \"whitelist\": null}",
        "allout": "false",
        "protocol": "\"--chromium\"",
        "pairstraight": "{\"__current_case__\": 0, \"file1\": {\"values\": [{\"id\": 318, \"src\": \"hda\"}]}, \"file2\": {\"values\": [{\"id\": 319, \"src\": \"hda\"}]}, \"libtype\": {\"__current_case__\": 0, \"strandedness\": \"A\"}, \"readselect\": \"paired\"}",
        "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 317, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}"
    },
    "inputs": {
        "tgmap": {
            "id": "4cf4cb0eebcf93d5",
            "src": "hda",
            "uuid": "9b199ec3-610e-4ff2-844b-2e618fe45025"
        },
        "pairstraight|file2": {
            "id": "3ec0ee9b6d8bee51",
            "src": "hda",
            "uuid": "6405b075-3ff3-4bba-8773-b1fb951d4460"
        },
        "pairstraight|file1": {
            "id": "4bdc792c91b4766b",
            "src": "hda",
            "uuid": "d52aed34-7d1a-4809-a36a-cce0799cfa73"
        },
        "refTranscriptSource|s_index|fasta": {
            "id": "0bcd39a4ca12a0ec",
            "src": "hda",
            "uuid": "9240e525-65e5-4682-9db8-e5bd10499429"
        }
    },
    "outputs": {
        "flenDist_txt": {
            "id": "91f05e7f52b42101",
            "src": "hda",
            "uuid": "3d247617-caa7-4a4b-bffd-345a1b74736d"
        },
        "quants_mat_mtx": {
            "id": "95241b5fd9e9570a",
            "src": "hda",
            "uuid": "6c198837-e7ab-4795-9d95-3c7ce5762665"
        },
        "raw_cb_frequency_txt": {
            "id": "4d4583b7c0d51f43",
            "src": "hda",
            "uuid": "64c01b6a-b1dc-4bd1-b212-6299d958125b"
        },
        "quants_mat_cols_txt": {
            "id": "2cdcef8a78cf1cc9",
            "src": "hda",
            "uuid": "cc6f5ba3-1870-4210-b9ac-23cb47dedc4b"
        },
        "quants_mat_rows_txt": {
            "id": "ce9eb1558c27c259",
            "src": "hda",
            "uuid": "d865bc70-260e-49d7-9075-ce43772414a8"
        },
        "quants_tier_mat": {
            "id": "8ba11165217c9a57",
            "src": "hda",
            "uuid": "de5af4f1-7586-4456-bc23-b03785fd4177"
        },
        "featureDump_txt": {
            "id": "7f7bba6a0696c48c",
            "src": "hda",
            "uuid": "0aabf2c0-b330-44e4-97ec-d923679605af"
        },
        "whitelist_txt": {
            "id": "5f6179a14feea312",
            "src": "hda",
            "uuid": "1dc9a264-43ab-4188-a438-156aabb42f6f"
        },
        "expected_bias": {
            "id": "52bb36166fd9a6f9",
            "src": "hda",
            "uuid": "d499ef7c-3856-407d-a0a4-6789ca089b17"
        },
        "observed_bias": {
            "id": "c42f2de6846d89c2",
            "src": "hda",
            "uuid": "77cd13c9-a4dd-47d1-8a48-35e3ba23b3f9"
        },
        "observed_bias_3p": {
            "id": "f08dba22bac78f3b",
            "src": "hda",
            "uuid": "2061c3eb-1b80-46b3-9d02-0d00a886e638"
        }
    },
    "output_collections": {},
    "tool_stdout": "",
    "tool_stderr": "",
    "job_stdout": null,
    "job_stderr": null,
    "stderr": "",
    "stdout": "",
    "job_messages": [],
    "dependencies": [],
    "user_email": "tests@fake.org",
    "job_metrics": []
}
