<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Results (powered by Planemo)"
           tests="238"
           errors="26"
           failures="34"
           skip="0">
    
    <testcase classname="alevin (Test #1)" name="0" time="21.82101845741272">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 0, "time_seconds": 21.82101845741272, "tool_id": "alevin", "tool_version": "1.5.1+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="alevin (Test #1)" name="0" time="36.481037855148315">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "optional|dumpFeatures": true,  "optional|dumpMtx": true,  "optional|freqThreshold": "5",  "optional|keepCBFraction": "1",  "pairstraight|file1": {   "id": "78576edddcf8d8e3",   "src": "hda"  },  "pairstraight|file2": {   "id": "19f68681bf97e7d0",   "src": "hda"  },  "pairstraight|readselect": "paired",  "protocol": "--chromium",  "refTranscriptSource|TranscriptSource": "history",  "refTranscriptSource|s_index|fasta": {   "id": "2797164681dcb5eb",   "src": "hda"  },  "tgmap": {   "id": "193329fbe73825ba",   "src": "hda"  } }, "job": {  "command_line": "mkdir ./index \u0026\u0026 mkdir ./output \u0026\u0026 salmon index -i ./index --kmerLen \u002731\u0027 --gencode --transcripts \u0027/galaxy/server/database/objects/5/4/0/dataset_540681c6-312b-46ce-b975-875c804762e0.dat\u0027 \u0026\u0026 cp \u0027/galaxy/server/database/objects/5/8/f/dataset_58f5c913-85c4-466c-95f4-7ca7ad491f06.dat\u0027 ./mate1.fastq.gz \u0026\u0026 gunzip ./mate1.fastq.gz \u0026\u0026 cp \u0027/galaxy/server/database/objects/e/0/3/dataset_e0370526-c560-4c65-8fae-f59b4d63272a.dat\u0027 ./mate2.fastq.gz \u0026\u0026 gunzip ./mate2.fastq.gz  \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/b/5/3/dataset_b53ce721-e44b-4732-a099-64d8b852f8b9.dat\u0027 ./alevinmap.tsv \u0026\u0026 salmon alevin -l A -i ./index -1 ./mate1.fastq -2 ./mate2.fastq -o ./output -p \"${GALAXY_SLOTS:-4}\" --chromium --tgMap ./alevinmap.tsv --keepCBFraction \u00271.0\u0027   --dumpFeatures  --dumpMtx --freqThreshold \u00275\u0027  \u0026\u0026 gunzip output/alevin/quants_mat.mtx.gz  \u0026\u0026 gunzip output/alevin/quants_tier_mat.gz  \u0026\u0026 gunzip output/aux_info/fld.gz \u0026\u0026 gunzip output/aux_info/observed_bias.gz \u0026\u0026 gunzip output/aux_info/observed_bias_3p.gz",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-10T07:28:57.707795",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-jld5d",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "733997afe481d59f",  "inputs": {   "pairstraight|file1": {    "id": "78576edddcf8d8e3",    "src": "hda",    "uuid": "58f5c913-85c4-466c-95f4-7ca7ad491f06"   },   "pairstraight|file2": {    "id": "19f68681bf97e7d0",    "src": "hda",    "uuid": "e0370526-c560-4c65-8fae-f59b4d63272a"   },   "refTranscriptSource|s_index|fasta": {    "id": "2797164681dcb5eb",    "src": "hda",    "uuid": "540681c6-312b-46ce-b975-875c804762e0"   },   "tgmap": {    "id": "193329fbe73825ba",    "src": "hda",    "uuid": "b53ce721-e44b-4732-a099-64d8b852f8b9"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "expected_bias": {    "id": "f125c22bb905f133",    "src": "hda",    "uuid": "df9ee8cb-87dc-488d-98f9-4e7d24d01630"   },   "featureDump_txt": {    "id": "58353eb2d738ff30",    "src": "hda",    "uuid": "d7cff7f4-52ca-4da1-aab7-9cf05e7f22b0"   },   "flenDist_txt": {    "id": "db2cd568ab1f42d2",    "src": "hda",    "uuid": "c76cec6e-6735-4a1a-aee8-e89c3ab3b137"   },   "observed_bias": {    "id": "9873dce580859f8d",    "src": "hda",    "uuid": "a3cd438f-edbf-4282-b2de-c5b4c845dab6"   },   "observed_bias_3p": {    "id": "f5edc574a6d68ead",    "src": "hda",    "uuid": "dc643c61-ad72-4257-850a-c9d10febee53"   },   "quants_mat_cols_txt": {    "id": "8870047bfb8ac87e",    "src": "hda",    "uuid": "a8fe8d2b-6c6f-4027-b438-bc43d11c72b8"   },   "quants_mat_mtx": {    "id": "c608b4927aa9d400",    "src": "hda",    "uuid": "c6efda0a-e93d-4127-9b99-445ad57ca454"   },   "quants_mat_rows_txt": {    "id": "daae50ac9af86f1d",    "src": "hda",    "uuid": "d1f03491-4001-468b-b811-30e36e81fba0"   },   "quants_tier_mat": {    "id": "d17e6d627e4dd234",    "src": "hda",    "uuid": "4e854ab7-dfbc-4ffe-b04d-0da00600e464"   },   "raw_cb_frequency_txt": {    "id": "419da231e8e08b69",    "src": "hda",    "uuid": "4eb64b94-6f3a-476c-af4c-ff74506bbd75"   },   "whitelist_txt": {    "id": "942f1fab2ee0ebbc",    "src": "hda",    "uuid": "4948058e-b77d-4bd2-b03c-fde7db72b789"   }  },  "params": {   "__input_ext": "\"input\"",   "allout": "false",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "optional": "{\"dumpBfh\": false, \"dumpFeatures\": true, \"dumpMtx\": true, \"dumpUmiGraph\": false, \"expectCells\": \"\", \"forceCells\": \"\", \"freqThreshold\": \"5\", \"keepCBFraction\": \"1.0\", \"lowRegionMinNumBarcodes\": \"\", \"maxNumBarcodes\": \"\", \"minScoreFraction\": \"\", \"mrna\": null, \"noDedup\": false, \"numCellBootstraps\": \"\", \"rrna\": null, \"whitelist\": null}",   "pairstraight": "{\"__current_case__\": 0, \"file1\": {\"values\": [{\"id\": 414, \"src\": \"hda\"}]}, \"file2\": {\"values\": [{\"id\": 415, \"src\": \"hda\"}]}, \"libtype\": {\"__current_case__\": 0, \"strandedness\": \"A\"}, \"readselect\": \"paired\"}",   "protocol": "\"--chromium\"",   "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 413, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}"  },  "state": "error",  "stderr": "Version Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###[2025-01-10 07:28:59.154] [jLog] [warning] The salmon index is being built without any decoy sequences.  It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be provided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.\n[2025-01-10 07:28:59.154] [jLog] [info] building index\nout : ./index\n[2025-01-10 07:28:59.155] [puff::index::jointLog] [info] Running fixFasta\n\n[Step 1 of 4] : counting k-mers\n\n[2025-01-10 07:28:59.172] [puff::index::jointLog] [warning] Removed 1 transcripts that were sequence duplicates of indexed transcripts.\n[2025-01-10 07:28:59.172] [puff::index::jointLog] [warning] If you wish to retain duplicate transcripts, please use the `--keepDuplicates` flag\n[2025-01-10 07:28:59.177] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides\n[2025-01-10 07:28:59.177] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcripts\nwrote 322 cleaned references\n[2025-01-10 07:28:59.195] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers\n[2025-01-10 07:28:59.201] [puff::index::jointLog] [info] ntHll estimated 164678 distinct k-mers, setting filter size to 2^22\nallowedIn: 18\nMax Junction ID: 1201\nseen.size():9617 kmerInfo.size():1202\napproximateContigTotalLength: 145043\ncounters for complex kmers:\n(prec\u003e1 \u0026 succ\u003e1)=5 | (succ\u003e1 \u0026 isStart)=1 | (prec\u003e1 \u0026 isEnd)=2 | (isStart \u0026 isEnd)=0\ncontig count: 1412 element count: 235270 complex nodes: 8\n# of ones in rank vector: 1411\n[2025-01-10 07:28:59.427] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.\n[2025-01-10 07:28:59.427] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory ./index\nsize = 235270\n-----------------------------------------\n| Loading contigs | Time = 906.27 us\n-----------------------------------------\nsize = 235270\n-----------------------------------------\n| Loading contig boundaries | Time = 767.01 us\n-----------------------------------------\nNumber of ones: 1411\nNumber of ones per inventory item: 512\nInventory entries filled: 3\n1411\n[2025-01-10 07:28:59.429] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.\n[2025-01-10 07:28:59.429] [puff::index::jointLog] [info] contig count for validation: 1411\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Total # of Contigs : 1411\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Total # of numerical Contigs : 1411\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Total # of contig vec entries: 6088\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] bits per offset entry 13\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Done constructing the contig vector. 1412\n[2025-01-10 07:28:59.441] [puff::index::jointLog] [info] # segments = 1411\n[2025-01-10 07:28:59.441] [puff::index::jointLog] [info] total length = 235270\n[2025-01-10 07:28:59.441] [puff::index::jointLog] [info] Reading the reference files ...\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] positional integer width = 18\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] seqSize = 235270\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] rankSize = 235270\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] edgeVecSize = 0\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] num keys = 192940\n\r[Building BooPHF]  0.228%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.455%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.455%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.455%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.683%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.683%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.911%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.911%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.14 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.14 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.37 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.37 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.59 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.59 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.59 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.82 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.82 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.82 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.05 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.28 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.28 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.28 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.5  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.5  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.73 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.73 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.96 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.96 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.19 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.19 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.42 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.42 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.42 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.64 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.64 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.64 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.87 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.87 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.1  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.1  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.33 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.33 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.55 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.55 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.55 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.78 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.78 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.01 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.01 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.24 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.24 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.47 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.47 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.69 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.69 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.69 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.92 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.92 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.92 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.15 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.15 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.38 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.38 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.6  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.6  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.83 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.83 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.06 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.06 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.29 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.29 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.29 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.51 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.51 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.74 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.74 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.2  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.2  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.43 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.43 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.88 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.88 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.11 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.11 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.34 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.34 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.56 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.56 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.79 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.79 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.7 %   elapsed:\n..\nPHF]  96.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\n[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] mphf size = 0.121223 MB\n[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] chunk size = 117635\n[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] chunk 0 = [0, 117644)\n[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] chunk 1 = [117644, 235240)\n[2025-01-10 07:28:59.552] [puff::index::jointLog] [info] finished populating pos vector\n[2025-01-10 07:28:59.553] [puff::index::jointLog] [info] writing index components\n[2025-01-10 07:28:59.570] [puff::index::jointLog] [info] finished writing dense pufferfish index\n[2025-01-10 07:28:59.574] [jLog] [info] done building index\nVersion Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###Logs will be written to ./output/logs\n[2025-01-10 07:29:00.263] [alevinLog] [warning] Force Cells to 1 fraction of All possible CB.This is not recommended way to run the pipeline,and it might slow the pipeline\n[2025-01-10 07:29:00.292] [jointLog] [info] setting maxHashResizeThreads to 8\n[2025-01-10 07:29:00.292] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.\n[2025-01-10 07:29:00.292] [jointLog] [info] The --mimicBT2, --mimicStrictBT2 and --hardFilter flags imply mapping validation (--validateMappings). Enabling mapping validation.\n[2025-01-10 07:29:00.292] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65\n[2025-01-10 07:29:00.292] [jointLog] [info] The use of range-factorized equivalence classes does not make sense in conjunction with --hardFilter.  Disabling range-factorized equivalence classes. \n[2025-01-10 07:29:00.292] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.\n[2025-01-10 07:29:00.292] [jointLog] [info] Using default value of 0.87 for minScoreFraction in Alevin\nUsing default value of 0.6 for consensusSlack in Alevin\n### alevin (dscRNA-seq quantification) v1.5.1\n### [ program ] =\u003e salmon \n### [ command ] =\u003e alevin \n### [ libType ] =\u003e { A }\n### [ index ] =\u003e { ./index }\n### [ mates1 ] =\u003e { ./mate1.fastq }\n### [ mates2 ] =\u003e { ./mate2.fastq }\n### [ output ] =\u003e { ./output }\n### [ threads ] =\u003e { 8 }\n### [ chromium ] =\u003e { }\n### [ tgMap ] =\u003e { ./alevinmap.tsv }\n### [ keepCBFraction ] =\u003e { 1.0 }\n### [ dumpFeatures ] =\u003e { }\n### [ dumpMtx ] =\u003e { }\n### [ freqThreshold ] =\u003e { 5 }\n\n\n[2025-01-10 07:29:00.295] [alevinLog] [info] Found 322 transcripts(+0 decoys, +0 short and +0 duplicate names in the index)\n[2025-01-10 07:29:00.296] [alevinLog] [info] Filled with 322 txp to gene entries \n[2025-01-10 07:29:00.296] [alevinLog] [info] Found all transcripts to gene mappings\n[2025-01-10 07:29:00.307] [alevinLog] [info] Processing barcodes files (if Present) \n\n \n\n\n[2025-01-10 07:29:00.359] [alevinLog] [info] Done barcode density calculation.\n[2025-01-10 07:29:00.359] [alevinLog] [info] # Barcodes Used: \u001b[32m125000\u001b[0m / \u001b[31m125000\u001b[0m.\n[2025-01-10 07:29:00.361] [alevinLog] [info] Forcing to use 15126 cells\n[2025-01-10 07:29:00.383] [alevinLog] [info] Throwing 10524 barcodes with \u003c 5 reads\n[2025-01-10 07:29:00.403] [alevinLog] [info] Total \u001b[32m5104\u001b[0m(has \u001b[32m501\u001b[0m low confidence) barcodes\n[2025-01-10 07:29:00.437] [alevinLog] [info] Done True Barcode Sampling\n[2025-01-10 07:29:00.439] [alevinLog] [info] Total 8.0184% reads will be thrown away because of noisy Cellular barcodes.\n[2025-01-10 07:29:00.565] [alevinLog] [info] Done populating Z matrix\n[2025-01-10 07:29:00.565] [alevinLog] [info] Total 0 CB got sequence corrected\n[2025-01-10 07:29:00.565] [alevinLog] [info] Done indexing Barcodes\n[2025-01-10 07:29:00.565] [alevinLog] [info] Total Unique barcodes found: 15126\n[2025-01-10 07:29:00.565] [alevinLog] [info] Used Barcodes except Whitelist: 0\n[2025-01-10 07:29:00.587] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify\n\n[2025-01-10 07:29:00.587] [alevinLog] [info] parsing read library format\n-----------------------------------------\n| Loading contig table | Time = 791.73 us\n-----------------------------------------\nsize = 1412\n-----------------------------------------\n| Loading contig offsets | Time = 648.34 us\n-----------------------------------------\n-----------------------------------------\n| Loading reference lengths | Time = 5.56 us\n-----------------------------------------\n-----------------------------------------\n| Loading mphf table | Time = 679.62 us\n-----------------------------------------\nsize = 235270\nNumber of ones: 1411\nNumber of ones per inventory item: 512\nInventory entries filled: 3\n-----------------------------------------\n| Loading contig boundaries | Time = 1.0195 ms\n-----------------------------------------\nsize = 235270\n-----------------------------------------\n| Loading sequence | Time = 633.15 us\n-----------------------------------------\nsize = 192940\n-----------------------------------------\n| Loading positions | Time = 1.2199 ms\n-----------------------------------------\nsize = 570828\n-----------------------------------------\n| Loading reference sequence | Time = 962.63 us\n-----------------------------------------\n-----------------------------------------\n| Loading reference accumulative lengths | Time = 16.13 us\n-----------------------------------------\n[2025-01-10 07:29:00.587] [jointLog] [info] There is 1 library.\n[2025-01-10 07:29:00.701] [jointLog] [info] Loading pufferfish index\n[2025-01-10 07:29:00.701] [jointLog] [info] Loading dense pufferfish index.\n[2025-01-10 07:29:00.710] [jointLog] [info] done\n[2025-01-10 07:29:00.710] [jointLog] [info] Index contained 322 targets\n[2025-01-10 07:29:00.710] [jointLog] [info] Number of decoys : 0\n\n\n\n\n\n\n\n\n[2025-01-10 07:29:01.636] [jointLog] [info] Computed 41 rich equivalence classes for further processing\n[2025-01-10 07:29:01.636] [jointLog] [info] Counted 96 total reads in the equivalence classes \n[2025-01-10 07:29:01.637] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0\n[2025-01-10 07:29:01.637] [jointLog] [info] Mapping rate = 0.0768%\n\n[2025-01-10 07:29:01.637] [jointLog] [info] finished quantifyLibrary()\n[2025-01-10 07:29:01.646] [alevinLog] [info] Starting optimizer\n\n\n\u001b[A\r\r\u001b[32mAnalyzed 36 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 42 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 46 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 47 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 86 cells (\u001b[31m2%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 47 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 95 cells (\u001b[31m2%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 140 cells (\u001b[31m3%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 140 cells (\u001b[31m3%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 248 cells (\u001b[31m5%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 262 cells (\u001b[31m5%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 276 cells (\u001b[31m5%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 285 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 297 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 328 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 331 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 331 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 385 cells (\u001b[31m8%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 409 cells (\u001b[31m8%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 436 cells (\u001b[31m9%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 491 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 491 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 520 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 520 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 609 cells (\u001b[31m12%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 609 cells (\u001b[31m12%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 520 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 673 cells (\u001b[31m13%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 702 cells (\u001b[31m14%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 740 cells (\u001b[31m15%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 740 cells (\u001b[31m15%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 789 cells (\u001b[31m15%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 790 cells (\u001b[31m15%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 802 cells (\u001b[31m16%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 802 cells (\u001b[31m16%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 886 cells (\u001b[31m17%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 886 cells (\u001b[31m17%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 944 cells (\u001b[31m18%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 960 cells (\u001b[31m19%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 886 cells (\u001b[31m17%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 960 cells (\u001b[31m19%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1101 cells (\u001b[31m22%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1119 cells (\u001b[31m22%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1153 cells (\u001b[31m23%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1156 cells (\u001b[31m23%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1178 cells (\u001b[31m23%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1205 cells (\u001b[31m24%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1392 cells (\u001b[31m27%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1393 cells (\u001b[31m27%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1444 cells (\u001b[31m28%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1528 cells (\u001b[31m30%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1570 cells (\u001b[31m31%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1721 cells (\u001b[31m34%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1771 cells (\u001b[31m35%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1803 cells (\u001b[31m35%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1820 cells (\u001b[31m36%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1842 cells (\u001b[31m36%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1878 cells (\u001b[31m37%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1898 cells (\u001b[31m37%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1922 cells (\u001b[31m38%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1957 cells (\u001b[31m38%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2044 cells (\u001b[31m40%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2064 cells (\u001b[31m40%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2210 cells (\u001b[31m43%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2229 cells (\u001b[31m44%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2266 cells (\u001b[31m44%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2336 cells (\u001b[31m46%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2660 cells (\u001b[31m52%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2660 cells (\u001b[31m52%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2769 cells (\u001b[31m54%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2775 cells (\u001b[31m54%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2781 cells (\u001b[31m54%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2849 cells (\u001b[31m56%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3004 cells (\u001b[31m59%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3004 cells (\u001b[31m59%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3087 cells (\u001b[31m60%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3087 cells (\u001b[31m60%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3319 cells (\u001b[31m65%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3603 cells (\u001b[31m71%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3799 cells (\u001b[31m74%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3799 cells (\u001b[31m74%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4019 cells (\u001b[31m79%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4089 cells (\u001b[31m80%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4127 cells (\u001b[31m81%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4133 cells (\u001b[31m81%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4158 cells (\u001b[31m81%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4220 cells (\u001b[31m83%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4267 cells (\u001b[31m84%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4362 cells (\u001b[31m85%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4790 cells (\u001b[31m94%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n[2025-01-10 07:29:01.832] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting\n[2025-01-10 07:29:01.832] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting\n[2025-01-10 07:29:01.839] [alevinLog] [info] Total 96.00 UMI after deduplicating.\n[2025-01-10 07:29:01.839] [alevinLog] [info] Total 0 BiDirected Edges.\n[2025-01-10 07:29:01.839] [alevinLog] [info] Total 0 UniDirected Edges.\n[2025-01-10 07:29:01.839] [alevinLog] [warning] Skipped 5007 barcodes due to No mapped read\n[2025-01-10 07:29:01.855] [alevinLog] [info] Clearing EqMap; Might take some time.\n[2025-01-10 07:29:01.859] [alevinLog] [warning] Num Low confidence barcodes too less 2 \u003c 200.Can\u0027t performing whitelisting; Skipping\n[2025-01-10 07:29:01.859] [alevinLog] [info] Starting dumping cell v gene counts in mtx format\n[2025-01-10 07:29:01.864] [alevinLog] [info] Finished dumping counts into mtx\n[2025-01-10 07:29:01.864] [alevinLog] [info] Finished optimizer\n[2025-01-10 07:29:01.885] [jointLog] [warning] NOTE: Read Lib [[ ./mate1.fastq, ./mate2.fastq]] :\n\nFound no concordant and consistent mappings. If this is a paired-end library, are you sure the reads are properly paired? check the file: ./output/lib_format_counts.json for details\n\n",  "stdout": "Threads = 2\nVertex length = 31\nHash functions = 5\nFilter size = 4194304\nCapacity = 2\nFiles: \n./index/ref_k31_fixed.fa\n--------------------------------------------------------------------------------\nRound 0, 0:4194304\nPass\tFilling\tFiltering\n1\t0\t0\t\n2\t0\t0\nTrue junctions count = 1005\nFalse junctions count = 1258\nHash table size = 2263\nCandidate marks count = 9529\n--------------------------------------------------------------------------------\nReallocating bifurcations time: 0\nTrue marks count: 6382\nEdges construction time: 0\n--------------------------------------------------------------------------------\nDistinct junctions = 1005\n\nfor info, total work write each  : 2.331    total work inram from level 3 : 4.322  total work raw : 25.000 \nBitarray         1016896  bits (100.00 %)   (array + ranks )\nfinal hash             0  bits (0.00 %) (nb in final hash 0)\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0",  "tool_stderr": "Version Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###[2025-01-10 07:28:59.154] [jLog] [warning] The salmon index is being built without any decoy sequences.  It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be provided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.\n[2025-01-10 07:28:59.154] [jLog] [info] building index\nout : ./index\n[2025-01-10 07:28:59.155] [puff::index::jointLog] [info] Running fixFasta\n\n[Step 1 of 4] : counting k-mers\n\n[2025-01-10 07:28:59.172] [puff::index::jointLog] [warning] Removed 1 transcripts that were sequence duplicates of indexed transcripts.\n[2025-01-10 07:28:59.172] [puff::index::jointLog] [warning] If you wish to retain duplicate transcripts, please use the `--keepDuplicates` flag\n[2025-01-10 07:28:59.177] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides\n[2025-01-10 07:28:59.177] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcripts\nwrote 322 cleaned references\n[2025-01-10 07:28:59.195] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers\n[2025-01-10 07:28:59.201] [puff::index::jointLog] [info] ntHll estimated 164678 distinct k-mers, setting filter size to 2^22\nallowedIn: 18\nMax Junction ID: 1201\nseen.size():9617 kmerInfo.size():1202\napproximateContigTotalLength: 145043\ncounters for complex kmers:\n(prec\u003e1 \u0026 succ\u003e1)=5 | (succ\u003e1 \u0026 isStart)=1 | (prec\u003e1 \u0026 isEnd)=2 | (isStart \u0026 isEnd)=0\ncontig count: 1412 element count: 235270 complex nodes: 8\n# of ones in rank vector: 1411\n[2025-01-10 07:28:59.427] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.\n[2025-01-10 07:28:59.427] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory ./index\nsize = 235270\n-----------------------------------------\n| Loading contigs | Time = 906.27 us\n-----------------------------------------\nsize = 235270\n-----------------------------------------\n| Loading contig boundaries | Time = 767.01 us\n-----------------------------------------\nNumber of ones: 1411\nNumber of ones per inventory item: 512\nInventory entries filled: 3\n1411\n[2025-01-10 07:28:59.429] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.\n[2025-01-10 07:28:59.429] [puff::index::jointLog] [info] contig count for validation: 1411\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Total # of Contigs : 1411\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Total # of numerical Contigs : 1411\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Total # of contig vec entries: 6088\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] bits per offset entry 13\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Done constructing the contig vector. 1412\n[2025-01-10 07:28:59.441] [puff::index::jointLog] [info] # segments = 1411\n[2025-01-10 07:28:59.441] [puff::index::jointLog] [info] total length = 235270\n[2025-01-10 07:28:59.441] [puff::index::jointLog] [info] Reading the reference files ...\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] positional integer width = 18\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] seqSize = 235270\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] rankSize = 235270\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] edgeVecSize = 0\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] num keys = 192940\n\r[Building BooPHF]  0.228%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.455%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.455%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.455%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.683%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.683%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.911%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.911%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.14 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.14 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.37 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.37 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.59 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.59 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.59 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.82 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.82 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.82 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.05 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.28 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.28 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.28 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.5  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.5  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.73 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.73 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.96 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.96 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.19 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.19 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.42 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.42 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.42 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.64 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.64 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.64 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.87 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.87 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.1  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.1  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.33 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.33 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.55 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.55 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.55 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.78 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.78 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.01 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.01 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.24 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.24 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.47 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.47 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.69 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.69 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.69 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.92 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.92 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.92 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.15 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.15 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.38 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.38 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.6  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.6  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.83 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.83 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.06 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.06 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.29 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.29 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.29 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.51 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.51 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.74 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.74 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.2  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.2  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.43 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.43 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.88 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.88 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.11 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.11 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.34 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.34 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.56 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.56 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.79 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.79 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.7 %   elapsed:\n..\nPHF]  96.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\n[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] mphf size = 0.121223 MB\n[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] chunk size = 117635\n[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] chunk 0 = [0, 117644)\n[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] chunk 1 = [117644, 235240)\n[2025-01-10 07:28:59.552] [puff::index::jointLog] [info] finished populating pos vector\n[2025-01-10 07:28:59.553] [puff::index::jointLog] [info] writing index components\n[2025-01-10 07:28:59.570] [puff::index::jointLog] [info] finished writing dense pufferfish index\n[2025-01-10 07:28:59.574] [jLog] [info] done building index\nVersion Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###Logs will be written to ./output/logs\n[2025-01-10 07:29:00.263] [alevinLog] [warning] Force Cells to 1 fraction of All possible CB.This is not recommended way to run the pipeline,and it might slow the pipeline\n[2025-01-10 07:29:00.292] [jointLog] [info] setting maxHashResizeThreads to 8\n[2025-01-10 07:29:00.292] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.\n[2025-01-10 07:29:00.292] [jointLog] [info] The --mimicBT2, --mimicStrictBT2 and --hardFilter flags imply mapping validation (--validateMappings). Enabling mapping validation.\n[2025-01-10 07:29:00.292] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65\n[2025-01-10 07:29:00.292] [jointLog] [info] The use of range-factorized equivalence classes does not make sense in conjunction with --hardFilter.  Disabling range-factorized equivalence classes. \n[2025-01-10 07:29:00.292] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.\n[2025-01-10 07:29:00.292] [jointLog] [info] Using default value of 0.87 for minScoreFraction in Alevin\nUsing default value of 0.6 for consensusSlack in Alevin\n### alevin (dscRNA-seq quantification) v1.5.1\n### [ program ] =\u003e salmon \n### [ command ] =\u003e alevin \n### [ libType ] =\u003e { A }\n### [ index ] =\u003e { ./index }\n### [ mates1 ] =\u003e { ./mate1.fastq }\n### [ mates2 ] =\u003e { ./mate2.fastq }\n### [ output ] =\u003e { ./output }\n### [ threads ] =\u003e { 8 }\n### [ chromium ] =\u003e { }\n### [ tgMap ] =\u003e { ./alevinmap.tsv }\n### [ keepCBFraction ] =\u003e { 1.0 }\n### [ dumpFeatures ] =\u003e { }\n### [ dumpMtx ] =\u003e { }\n### [ freqThreshold ] =\u003e { 5 }\n\n\n[2025-01-10 07:29:00.295] [alevinLog] [info] Found 322 transcripts(+0 decoys, +0 short and +0 duplicate names in the index)\n[2025-01-10 07:29:00.296] [alevinLog] [info] Filled with 322 txp to gene entries \n[2025-01-10 07:29:00.296] [alevinLog] [info] Found all transcripts to gene mappings\n[2025-01-10 07:29:00.307] [alevinLog] [info] Processing barcodes files (if Present) \n\n \n\n\n[2025-01-10 07:29:00.359] [alevinLog] [info] Done barcode density calculation.\n[2025-01-10 07:29:00.359] [alevinLog] [info] # Barcodes Used: \u001b[32m125000\u001b[0m / \u001b[31m125000\u001b[0m.\n[2025-01-10 07:29:00.361] [alevinLog] [info] Forcing to use 15126 cells\n[2025-01-10 07:29:00.383] [alevinLog] [info] Throwing 10524 barcodes with \u003c 5 reads\n[2025-01-10 07:29:00.403] [alevinLog] [info] Total \u001b[32m5104\u001b[0m(has \u001b[32m501\u001b[0m low confidence) barcodes\n[2025-01-10 07:29:00.437] [alevinLog] [info] Done True Barcode Sampling\n[2025-01-10 07:29:00.439] [alevinLog] [info] Total 8.0184% reads will be thrown away because of noisy Cellular barcodes.\n[2025-01-10 07:29:00.565] [alevinLog] [info] Done populating Z matrix\n[2025-01-10 07:29:00.565] [alevinLog] [info] Total 0 CB got sequence corrected\n[2025-01-10 07:29:00.565] [alevinLog] [info] Done indexing Barcodes\n[2025-01-10 07:29:00.565] [alevinLog] [info] Total Unique barcodes found: 15126\n[2025-01-10 07:29:00.565] [alevinLog] [info] Used Barcodes except Whitelist: 0\n[2025-01-10 07:29:00.587] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify\n\n[2025-01-10 07:29:00.587] [alevinLog] [info] parsing read library format\n-----------------------------------------\n| Loading contig table | Time = 791.73 us\n-----------------------------------------\nsize = 1412\n-----------------------------------------\n| Loading contig offsets | Time = 648.34 us\n-----------------------------------------\n-----------------------------------------\n| Loading reference lengths | Time = 5.56 us\n-----------------------------------------\n-----------------------------------------\n| Loading mphf table | Time = 679.62 us\n-----------------------------------------\nsize = 235270\nNumber of ones: 1411\nNumber of ones per inventory item: 512\nInventory entries filled: 3\n-----------------------------------------\n| Loading contig boundaries | Time = 1.0195 ms\n-----------------------------------------\nsize = 235270\n-----------------------------------------\n| Loading sequence | Time = 633.15 us\n-----------------------------------------\nsize = 192940\n-----------------------------------------\n| Loading positions | Time = 1.2199 ms\n-----------------------------------------\nsize = 570828\n-----------------------------------------\n| Loading reference sequence | Time = 962.63 us\n-----------------------------------------\n-----------------------------------------\n| Loading reference accumulative lengths | Time = 16.13 us\n-----------------------------------------\n[2025-01-10 07:29:00.587] [jointLog] [info] There is 1 library.\n[2025-01-10 07:29:00.701] [jointLog] [info] Loading pufferfish index\n[2025-01-10 07:29:00.701] [jointLog] [info] Loading dense pufferfish index.\n[2025-01-10 07:29:00.710] [jointLog] [info] done\n[2025-01-10 07:29:00.710] [jointLog] [info] Index contained 322 targets\n[2025-01-10 07:29:00.710] [jointLog] [info] Number of decoys : 0\n\n\n\n\n\n\n\n\n[2025-01-10 07:29:01.636] [jointLog] [info] Computed 41 rich equivalence classes for further processing\n[2025-01-10 07:29:01.636] [jointLog] [info] Counted 96 total reads in the equivalence classes \n[2025-01-10 07:29:01.637] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0\n[2025-01-10 07:29:01.637] [jointLog] [info] Mapping rate = 0.0768%\n\n[2025-01-10 07:29:01.637] [jointLog] [info] finished quantifyLibrary()\n[2025-01-10 07:29:01.646] [alevinLog] [info] Starting optimizer\n\n\n\u001b[A\r\r\u001b[32mAnalyzed 36 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 42 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 46 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 47 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 86 cells (\u001b[31m2%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 47 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 95 cells (\u001b[31m2%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 140 cells (\u001b[31m3%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 140 cells (\u001b[31m3%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 248 cells (\u001b[31m5%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 262 cells (\u001b[31m5%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 276 cells (\u001b[31m5%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 285 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 297 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 328 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 331 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 331 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 385 cells (\u001b[31m8%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 409 cells (\u001b[31m8%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 436 cells (\u001b[31m9%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 491 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 491 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 520 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 520 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 609 cells (\u001b[31m12%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 609 cells (\u001b[31m12%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 520 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 673 cells (\u001b[31m13%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 702 cells (\u001b[31m14%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 740 cells (\u001b[31m15%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 740 cells (\u001b[31m15%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 789 cells (\u001b[31m15%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 790 cells (\u001b[31m15%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 802 cells (\u001b[31m16%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 802 cells (\u001b[31m16%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 886 cells (\u001b[31m17%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 886 cells (\u001b[31m17%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 944 cells (\u001b[31m18%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 960 cells (\u001b[31m19%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 886 cells (\u001b[31m17%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 960 cells (\u001b[31m19%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1101 cells (\u001b[31m22%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1119 cells (\u001b[31m22%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1153 cells (\u001b[31m23%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1156 cells (\u001b[31m23%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1178 cells (\u001b[31m23%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1205 cells (\u001b[31m24%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1392 cells (\u001b[31m27%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1393 cells (\u001b[31m27%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1444 cells (\u001b[31m28%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1528 cells (\u001b[31m30%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1570 cells (\u001b[31m31%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1721 cells (\u001b[31m34%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1771 cells (\u001b[31m35%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1803 cells (\u001b[31m35%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1820 cells (\u001b[31m36%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1842 cells (\u001b[31m36%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1878 cells (\u001b[31m37%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1898 cells (\u001b[31m37%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1922 cells (\u001b[31m38%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1957 cells (\u001b[31m38%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2044 cells (\u001b[31m40%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2064 cells (\u001b[31m40%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2210 cells (\u001b[31m43%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2229 cells (\u001b[31m44%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2266 cells (\u001b[31m44%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2336 cells (\u001b[31m46%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2660 cells (\u001b[31m52%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2660 cells (\u001b[31m52%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2769 cells (\u001b[31m54%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2775 cells (\u001b[31m54%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2781 cells (\u001b[31m54%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2849 cells (\u001b[31m56%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3004 cells (\u001b[31m59%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3004 cells (\u001b[31m59%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3087 cells (\u001b[31m60%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3087 cells (\u001b[31m60%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3319 cells (\u001b[31m65%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3603 cells (\u001b[31m71%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3799 cells (\u001b[31m74%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3799 cells (\u001b[31m74%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4019 cells (\u001b[31m79%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4089 cells (\u001b[31m80%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4127 cells (\u001b[31m81%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4133 cells (\u001b[31m81%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4158 cells (\u001b[31m81%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4220 cells (\u001b[31m83%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4267 cells (\u001b[31m84%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4362 cells (\u001b[31m85%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4790 cells (\u001b[31m94%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n[2025-01-10 07:29:01.832] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting\n[2025-01-10 07:29:01.832] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting\n[2025-01-10 07:29:01.839] [alevinLog] [info] Total 96.00 UMI after deduplicating.\n[2025-01-10 07:29:01.839] [alevinLog] [info] Total 0 BiDirected Edges.\n[2025-01-10 07:29:01.839] [alevinLog] [info] Total 0 UniDirected Edges.\n[2025-01-10 07:29:01.839] [alevinLog] [warning] Skipped 5007 barcodes due to No mapped read\n[2025-01-10 07:29:01.855] [alevinLog] [info] Clearing EqMap; Might take some time.\n[2025-01-10 07:29:01.859] [alevinLog] [warning] Num Low confidence barcodes too less 2 \u003c 200.Can\u0027t performing whitelisting; Skipping\n[2025-01-10 07:29:01.859] [alevinLog] [info] Starting dumping cell v gene counts in mtx format\n[2025-01-10 07:29:01.864] [alevinLog] [info] Finished dumping counts into mtx\n[2025-01-10 07:29:01.864] [alevinLog] [info] Finished optimizer\n[2025-01-10 07:29:01.885] [jointLog] [warning] NOTE: Read Lib [[ ./mate1.fastq, ./mate2.fastq]] :\n\nFound no concordant and consistent mappings. If this is a paired-end library, are you sure the reads are properly paired? check the file: ./output/lib_format_counts.json for details\n\n",  "tool_stdout": "Threads = 2\nVertex length = 31\nHash functions = 5\nFilter size = 4194304\nCapacity = 2\nFiles: \n./index/ref_k31_fixed.fa\n--------------------------------------------------------------------------------\nRound 0, 0:4194304\nPass\tFilling\tFiltering\n1\t0\t0\t\n2\t0\t0\nTrue junctions count = 1005\nFalse junctions count = 1258\nHash table size = 2263\nCandidate marks count = 9529\n--------------------------------------------------------------------------------\nReallocating bifurcations time: 0\nTrue marks count: 6382\nEdges construction time: 0\n--------------------------------------------------------------------------------\nDistinct junctions = 1005\n\nfor info, total work write each  : 2.331    total work inram from level 3 : 4.322  total work raw : 25.000 \nBitarray         1016896  bits (100.00 %)   (array + ranks )\nfinal hash             0  bits (0.00 %) (nb in final hash 0)\n",  "update_time": "2025-01-10T07:29:06.149151",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0, exit_code: None, stderr: Version Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###[2025-01-10 07:28:59.154] [jLog] [warning] The salmon index is being built without any decoy sequences.  It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be provided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.\n[2025-01-10 07:28:59.154] [jLog] [info] building index\nout : ./index\n[2025-01-10 07:28:59.155] [puff::index::jointLog] [info] Running fixFasta\n\n[Step 1 of 4] : counting k-mers\n\n[2025-01-10 07:28:59.172] [puff::index::jointLog] [warning] Removed 1 transcripts that were sequence duplicates of indexed transcripts.\n[2025-01-10 07:28:59.172] [puff::index::jointLog] [warning] If you wish to retain duplicate transcripts, please use the `--keepDuplicates` flag\n[2025-01-10 07:28:59.177] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides\n[2025-01-10 07:28:59.177] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcripts\nwrote 322 cleaned references\n[2025-01-10 07:28:59.195] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers\n[2025-01-10 07:28:59.201] [puff::index::jointLog] [info] ntHll estimated 164678 distinct k-mers, setting filter size to 2^22\nallowedIn: 18\nMax Junction ID: 1201\nseen.size():9617 kmerInfo.size():1202\napproximateContigTotalLength: 145043\ncounters for complex kmers:\n(prec\u003e1 \u0026 succ\u003e1)=5 | (succ\u003e1 \u0026 isStart)=1 | (prec\u003e1 \u0026 isEnd)=2 | (isStart \u0026 isEnd)=0\ncontig count: 1412 element count: 235270 complex nodes: 8\n# of ones in rank vector: 1411\n[2025-01-10 07:28:59.427] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.\n[2025-01-10 07:28:59.427] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory ./index\nsize = 235270\n-----------------------------------------\n| Loading contigs | Time = 906.27 us\n-----------------------------------------\nsize = 235270\n-----------------------------------------\n| Loading contig boundaries | Time = 767.01 us\n-----------------------------------------\nNumber of ones: 1411\nNumber of ones per inventory item: 512\nInventory entries filled: 3\n1411\n[2025-01-10 07:28:59.429] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.\n[2025-01-10 07:28:59.429] [puff::index::jointLog] [info] contig count for validation: 1411\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Total # of Contigs : 1411\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Total # of numerical Contigs : 1411\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Total # of contig vec entries: 6088\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] bits per offset entry 13\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Done constructing the contig vector. 1412\n[2025-01-10 07:28:59.441] [puff::index::jointLog] [info] # segments = 1411\n[2025-01-10 07:28:59.441] [puff::index::jointLog] [info] total length = 235270\n[2025-01-10 07:28:59.441] [puff::index::jointLog] [info] Reading the reference files ...\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] positional integer width = 18\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] seqSize = 235270\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] rankSize = 235270\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] edgeVecSize = 0\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] num keys = 192940\n\r[Building BooPHF]  0.228%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.455%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.455%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.455%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.683%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.683%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.911%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.911%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.14 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.14 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.37 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.37 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.59 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.59 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.59 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.82 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.82 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.82 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.05 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.28 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.28 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.28 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.5  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.5  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.73 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.73 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.96 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.96 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.19 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.19 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.42 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.42 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.42 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.64 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.64 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.64 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.87 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.87 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.1  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.1  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.33 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.33 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.55 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.55 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.55 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.78 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.78 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.01 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.01 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.24 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.24 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.47 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.47 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.69 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.69 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.69 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.92 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.92 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.92 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.15 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.15 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.38 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.38 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.6  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.6  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.83 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.83 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.06 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.06 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.29 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.29 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.29 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.51 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.51 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.74 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.74 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.2  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.2  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.43 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.43 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.88 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.88 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.11 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.11 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.34 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.34 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.56 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.56 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.79 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.79 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.7 %   elapsed:\n..\nPHF]  96.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\n[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] mphf size = 0.121223 MB\n[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] chunk size = 117635\n[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] chunk 0 = [0, 117644)\n[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] chunk 1 = [117644, 235240)\n[2025-01-10 07:28:59.552] [puff::index::jointLog] [info] finished populating pos vector\n[2025-01-10 07:28:59.553] [puff::index::jointLog] [info] writing index components\n[2025-01-10 07:28:59.570] [puff::index::jointLog] [info] finished writing dense pufferfish index\n[2025-01-10 07:28:59.574] [jLog] [info] done building index\nVersion Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###Logs will be written to ./output/logs\n[2025-01-10 07:29:00.263] [alevinLog] [warning] Force Cells to 1 fraction of All possible CB.This is not recommended way to run the pipeline,and it might slow the pipeline\n[2025-01-10 07:29:00.292] [jointLog] [info] setting maxHashResizeThreads to 8\n[2025-01-10 07:29:00.292] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.\n[2025-01-10 07:29:00.292] [jointLog] [info] The --mimicBT2, --mimicStrictBT2 and --hardFilter flags imply mapping validation (--validateMappings). Enabling mapping validation.\n[2025-01-10 07:29:00.292] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65\n[2025-01-10 07:29:00.292] [jointLog] [info] The use of range-factorized equivalence classes does not make sense in conjunction with --hardFilter.  Disabling range-factorized equivalence classes. \n[2025-01-10 07:29:00.292] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.\n[2025-01-10 07:29:00.292] [jointLog] [info] Using default value of 0.87 for minScoreFraction in Alevin\nUsing default value of 0.6 for consensusSlack in Alevin\n### alevin (dscRNA-seq quantification) v1.5.1\n### [ program ] =\u003e salmon \n### [ command ] =\u003e alevin \n### [ libType ] =\u003e { A }\n### [ index ] =\u003e { ./index }\n### [ mates1 ] =\u003e { ./mate1.fastq }\n### [ mates2 ] =\u003e { ./mate2.fastq }\n### [ output ] =\u003e { ./output }\n### [ threads ] =\u003e { 8 }\n### [ chromium ] =\u003e { }\n### [ tgMap ] =\u003e { ./alevinmap.tsv }\n### [ keepCBFraction ] =\u003e { 1.0 }\n### [ dumpFeatures ] =\u003e { }\n### [ dumpMtx ] =\u003e { }\n### [ freqThreshold ] =\u003e { 5 }\n\n\n[2025-01-10 07:29:00.295] [alevinLog] [info] Found 322 transcripts(+0 decoys, +0 short and +0 duplicate names in the index)\n[2025-01-10 07:29:00.296] [alevinLog] [info] Filled with 322 txp to gene entries \n[2025-01-10 07:29:00.296] [alevinLog] [info] Found all transcripts to gene mappings\n[2025-01-10 07:29:00.307] [alevinLog] [info] Processing barcodes files (if Present) \n\n \n\n\n[2025-01-10 07:29:00.359] [alevinLog] [info] Done barcode density calculation.\n[2025-01-10 07:29:00.359] [alevinLog] [info] # Barcodes Used: \u001b[32m125000\u001b[0m / \u001b[31m125000\u001b[0m.\n[2025-01-10 07:29:00.361] [alevinLog] [info] Forcing to use 15126 cells\n[2025-01-10 07:29:00.383] [alevinLog] [info] Throwing 10524 barcodes with \u003c 5 reads\n[2025-01-10 07:29:00.403] [alevinLog] [info] Total \u001b[32m5104\u001b[0m(has \u001b[32m501\u001b[0m low confidence) barcodes\n[2025-01-10 07:29:00.437] [alevinLog] [info] Done True Barcode Sampling\n[2025-01-10 07:29:00.439] [alevinLog] [info] Total 8.0184% reads will be thrown away because of noisy Cellular barcodes.\n[2025-01-10 07:29:00.565] [alevinLog] [info] Done populating Z matrix\n[2025-01-10 07:29:00.565] [alevinLog] [info] Total 0 CB got sequence corrected\n[2025-01-10 07:29:00.565] [alevinLog] [info] Done indexing Barcodes\n[2025-01-10 07:29:00.565] [alevinLog] [info] Total Unique barcodes found: 15126\n[2025-01-10 07:29:00.565] [alevinLog] [info] Used Barcodes except Whitelist: 0\n[2025-01-10 07:29:00.587] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify\n\n[2025-01-10 07:29:00.587] [alevinLog] [info] parsing read library format\n-----------------------------------------\n| Loading contig table | Time = 791.73 us\n-----------------------------------------\nsize = 1412\n-----------------------------------------\n| Loading contig offsets | Time = 648.34 us\n-----------------------------------------\n-----------------------------------------\n| Loading reference lengths | Time = 5.56 us\n-----------------------------------------\n-----------------------------------------\n| Loading mphf table | Time = 679.62 us\n-----------------------------------------\nsize = 235270\nNumber of ones: 1411\nNumber of ones per inventory item: 512\nInventory entries filled: 3\n-----------------------------------------\n| Loading contig boundaries | Time = 1.0195 ms\n-----------------------------------------\nsize = 235270\n-----------------------------------------\n| Loading sequence | Time = 633.15 us\n-----------------------------------------\nsize = 192940\n-----------------------------------------\n| Loading positions | Time = 1.2199 ms\n-----------------------------------------\nsize = 570828\n-----------------------------------------\n| Loading reference sequence | Time = 962.63 us\n-----------------------------------------\n-----------------------------------------\n| Loading reference accumulative lengths | Time = 16.13 us\n-----------------------------------------\n[2025-01-10 07:29:00.587] [jointLog] [info] There is 1 library.\n[2025-01-10 07:29:00.701] [jointLog] [info] Loading pufferfish index\n[2025-01-10 07:29:00.701] [jointLog] [info] Loading dense pufferfish index.\n[2025-01-10 07:29:00.710] [jointLog] [info] done\n[2025-01-10 07:29:00.710] [jointLog] [info] Index contained 322 targets\n[2025-01-10 07:29:00.710] [jointLog] [info] Number of decoys : 0\n\n\n\n\n\n\n\n\n[2025-01-10 07:29:01.636] [jointLog] [info] Computed 41 rich equivalence classes for further processing\n[2025-01-10 07:29:01.636] [jointLog] [info] Counted 96 total reads in the equivalence classes \n[2025-01-10 07:29:01.637] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0\n[2025-01-10 07:29:01.637] [jointLog] [info] Mapping rate = 0.0768%\n\n[2025-01-10 07:29:01.637] [jointLog] [info] finished quantifyLibrary()\n[2025-01-10 07:29:01.646] [alevinLog] [info] Starting optimizer\n\n\n\u001b[A\r\r\u001b[32mAnalyzed 36 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 42 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 46 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 47 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 86 cells (\u001b[31m2%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 47 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 95 cells (\u001b[31m2%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 140 cells (\u001b[31m3%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 140 cells (\u001b[31m3%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 248 cells (\u001b[31m5%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 262 cells (\u001b[31m5%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 276 cells (\u001b[31m5%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 285 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 297 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 328 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 331 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 331 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 385 cells (\u001b[31m8%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 409 cells (\u001b[31m8%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 436 cells (\u001b[31m9%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 491 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 491 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 520 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 520 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 609 cells (\u001b[31m12%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 609 cells (\u001b[31m12%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 520 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 673 cells (\u001b[31m13%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 702 cells (\u001b[31m14%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 740 cells (\u001b[31m15%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 740 cells (\u001b[31m15%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 789 cells (\u001b[31m15%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 790 cells (\u001b[31m15%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 802 cells (\u001b[31m16%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 802 cells (\u001b[31m16%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 886 cells (\u001b[31m17%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 886 cells (\u001b[31m17%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 944 cells (\u001b[31m18%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 960 cells (\u001b[31m19%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 886 cells (\u001b[31m17%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 960 cells (\u001b[31m19%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1101 cells (\u001b[31m22%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1119 cells (\u001b[31m22%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1153 cells (\u001b[31m23%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1156 cells (\u001b[31m23%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1178 cells (\u001b[31m23%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1205 cells (\u001b[31m24%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1392 cells (\u001b[31m27%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1393 cells (\u001b[31m27%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1444 cells (\u001b[31m28%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1528 cells (\u001b[31m30%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1570 cells (\u001b[31m31%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1721 cells (\u001b[31m34%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1771 cells (\u001b[31m35%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1803 cells (\u001b[31m35%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1820 cells (\u001b[31m36%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1842 cells (\u001b[31m36%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1878 cells (\u001b[31m37%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1898 cells (\u001b[31m37%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1922 cells (\u001b[31m38%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1957 cells (\u001b[31m38%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2044 cells (\u001b[31m40%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2064 cells (\u001b[31m40%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2210 cells (\u001b[31m43%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2229 cells (\u001b[31m44%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2266 cells (\u001b[31m44%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2336 cells (\u001b[31m46%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2660 cells (\u001b[31m52%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2660 cells (\u001b[31m52%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2769 cells (\u001b[31m54%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2775 cells (\u001b[31m54%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2781 cells (\u001b[31m54%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2849 cells (\u001b[31m56%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3004 cells (\u001b[31m59%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3004 cells (\u001b[31m59%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3087 cells (\u001b[31m60%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3087 cells (\u001b[31m60%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3319 cells (\u001b[31m65%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3603 cells (\u001b[31m71%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3799 cells (\u001b[31m74%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3799 cells (\u001b[31m74%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4019 cells (\u001b[31m79%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4089 cells (\u001b[31m80%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4127 cells (\u001b[31m81%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4133 cells (\u001b[31m81%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4158 cells (\u001b[31m81%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4220 cells (\u001b[31m83%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4267 cells (\u001b[31m84%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4362 cells (\u001b[31m85%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4790 cells (\u001b[31m94%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n[2025-01-10 07:29:01.832] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting\n[2025-01-10 07:29:01.832] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting\n[2025-01-10 07:29:01.839] [alevinLog] [info] Total 96.00 UMI after deduplicating.\n[2025-01-10 07:29:01.839] [alevinLog] [info] Total 0 BiDirected Edges.\n[2025-01-10 07:29:01.839] [alevinLog] [info] Total 0 UniDirected Edges.\n[2025-01-10 07:29:01.839] [alevinLog] [warning] Skipped 5007 barcodes due to No mapped read\n[2025-01-10 07:29:01.855] [alevinLog] [info] Clearing EqMap; Might take some time.\n[2025-01-10 07:29:01.859] [alevinLog] [warning] Num Low confidence barcodes too less 2 \u003c 200.Can\u0027t performing whitelisting; Skipping\n[2025-01-10 07:29:01.859] [alevinLog] [info] Starting dumping cell v gene counts in mtx format\n[2025-01-10 07:29:01.864] [alevinLog] [info] Finished dumping counts into mtx\n[2025-01-10 07:29:01.864] [alevinLog] [info] Finished optimizer\n[2025-01-10 07:29:01.885] [jointLog] [warning] NOTE: Read Lib [[ ./mate1.fastq, ./mate2.fastq]] :\n\nFound no concordant and consistent mappings. If this is a paired-end library, are you sure the reads are properly paired? check the file: ./output/lib_format_counts.json for details\n\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0, exit_code: None, stderr: Version Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###[2025-01-10 07:28:59.154] [jLog] [warning] The salmon index is being built without any decoy sequences.  It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be provided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.\n[2025-01-10 07:28:59.154] [jLog] [info] building index\nout : ./index\n[2025-01-10 07:28:59.155] [puff::index::jointLog] [info] Running fixFasta\n\n[Step 1 of 4] : counting k-mers\n\n[2025-01-10 07:28:59.172] [puff::index::jointLog] [warning] Removed 1 transcripts that were sequence duplicates of indexed transcripts.\n[2025-01-10 07:28:59.172] [puff::index::jointLog] [warning] If you wish to retain duplicate transcripts, please use the `--keepDuplicates` flag\n[2025-01-10 07:28:59.177] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides\n[2025-01-10 07:28:59.177] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcripts\nwrote 322 cleaned references\n[2025-01-10 07:28:59.195] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers\n[2025-01-10 07:28:59.201] [puff::index::jointLog] [info] ntHll estimated 164678 distinct k-mers, setting filter size to 2^22\nallowedIn: 18\nMax Junction ID: 1201\nseen.size():9617 kmerInfo.size():1202\napproximateContigTotalLength: 145043\ncounters for complex kmers:\n(prec\u003e1 \u0026 succ\u003e1)=5 | (succ\u003e1 \u0026 isStart)=1 | (prec\u003e1 \u0026 isEnd)=2 | (isStart \u0026 isEnd)=0\ncontig count: 1412 element count: 235270 complex nodes: 8\n# of ones in rank vector: 1411\n[2025-01-10 07:28:59.427] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.\n[2025-01-10 07:28:59.427] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory ./index\nsize = 235270\n-----------------------------------------\n| Loading contigs | Time = 906.27 us\n-----------------------------------------\nsize = 235270\n-----------------------------------------\n| Loading contig boundaries | Time = 767.01 us\n-----------------------------------------\nNumber of ones: 1411\nNumber of ones per inventory item: 512\nInventory entries filled: 3\n1411\n[2025-01-10 07:28:59.429] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.\n[2025-01-10 07:28:59.429] [puff::index::jointLog] [info] contig count for validation: 1411\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Total # of Contigs : 1411\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Total # of numerical Contigs : 1411\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Total # of contig vec entries: 6088\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] bits per offset entry 13\n[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Done constructing the contig vector. 1412\n[2025-01-10 07:28:59.441] [puff::index::jointLog] [info] # segments = 1411\n[2025-01-10 07:28:59.441] [puff::index::jointLog] [info] total length = 235270\n[2025-01-10 07:28:59.441] [puff::index::jointLog] [info] Reading the reference files ...\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] positional integer width = 18\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] seqSize = 235270\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] rankSize = 235270\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] edgeVecSize = 0\n[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] num keys = 192940\n\r[Building BooPHF]  0.228%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.455%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.455%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.455%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.683%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.683%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.911%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  0.911%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.14 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.14 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.37 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.37 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.59 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.59 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.59 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.82 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.82 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  1.82 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.05 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.28 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.28 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.28 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.5  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.5  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.73 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.73 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.96 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.96 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.19 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.19 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.42 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.42 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.42 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.64 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.64 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.64 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.87 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  3.87 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.1  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.1  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.33 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.33 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.55 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.55 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.55 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.78 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.78 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.01 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.01 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.24 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.24 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.47 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.47 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.69 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.69 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.69 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.92 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.92 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  5.92 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.15 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.15 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.38 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.38 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.6  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.6  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.83 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.83 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.06 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.06 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.29 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.29 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.29 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.51 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.51 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.74 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.74 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  7.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.2  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.2  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.43 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.43 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.88 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  8.88 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.11 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.11 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.34 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.34 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.56 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.56 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.79 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.79 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  10.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  12.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  14.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  15.7 %   elapsed:\n..\nPHF]  96.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  96.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  97.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  98.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\n[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] mphf size = 0.121223 MB\n[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] chunk size = 117635\n[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] chunk 0 = [0, 117644)\n[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] chunk 1 = [117644, 235240)\n[2025-01-10 07:28:59.552] [puff::index::jointLog] [info] finished populating pos vector\n[2025-01-10 07:28:59.553] [puff::index::jointLog] [info] writing index components\n[2025-01-10 07:28:59.570] [puff::index::jointLog] [info] finished writing dense pufferfish index\n[2025-01-10 07:28:59.574] [jLog] [info] done building index\nVersion Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###Logs will be written to ./output/logs\n[2025-01-10 07:29:00.263] [alevinLog] [warning] Force Cells to 1 fraction of All possible CB.This is not recommended way to run the pipeline,and it might slow the pipeline\n[2025-01-10 07:29:00.292] [jointLog] [info] setting maxHashResizeThreads to 8\n[2025-01-10 07:29:00.292] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.\n[2025-01-10 07:29:00.292] [jointLog] [info] The --mimicBT2, --mimicStrictBT2 and --hardFilter flags imply mapping validation (--validateMappings). Enabling mapping validation.\n[2025-01-10 07:29:00.292] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65\n[2025-01-10 07:29:00.292] [jointLog] [info] The use of range-factorized equivalence classes does not make sense in conjunction with --hardFilter.  Disabling range-factorized equivalence classes. \n[2025-01-10 07:29:00.292] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.\n[2025-01-10 07:29:00.292] [jointLog] [info] Using default value of 0.87 for minScoreFraction in Alevin\nUsing default value of 0.6 for consensusSlack in Alevin\n### alevin (dscRNA-seq quantification) v1.5.1\n### [ program ] =\u003e salmon \n### [ command ] =\u003e alevin \n### [ libType ] =\u003e { A }\n### [ index ] =\u003e { ./index }\n### [ mates1 ] =\u003e { ./mate1.fastq }\n### [ mates2 ] =\u003e { ./mate2.fastq }\n### [ output ] =\u003e { ./output }\n### [ threads ] =\u003e { 8 }\n### [ chromium ] =\u003e { }\n### [ tgMap ] =\u003e { ./alevinmap.tsv }\n### [ keepCBFraction ] =\u003e { 1.0 }\n### [ dumpFeatures ] =\u003e { }\n### [ dumpMtx ] =\u003e { }\n### [ freqThreshold ] =\u003e { 5 }\n\n\n[2025-01-10 07:29:00.295] [alevinLog] [info] Found 322 transcripts(+0 decoys, +0 short and +0 duplicate names in the index)\n[2025-01-10 07:29:00.296] [alevinLog] [info] Filled with 322 txp to gene entries \n[2025-01-10 07:29:00.296] [alevinLog] [info] Found all transcripts to gene mappings\n[2025-01-10 07:29:00.307] [alevinLog] [info] Processing barcodes files (if Present) \n\n \n\n\n[2025-01-10 07:29:00.359] [alevinLog] [info] Done barcode density calculation.\n[2025-01-10 07:29:00.359] [alevinLog] [info] # Barcodes Used: \u001b[32m125000\u001b[0m / \u001b[31m125000\u001b[0m.\n[2025-01-10 07:29:00.361] [alevinLog] [info] Forcing to use 15126 cells\n[2025-01-10 07:29:00.383] [alevinLog] [info] Throwing 10524 barcodes with \u003c 5 reads\n[2025-01-10 07:29:00.403] [alevinLog] [info] Total \u001b[32m5104\u001b[0m(has \u001b[32m501\u001b[0m low confidence) barcodes\n[2025-01-10 07:29:00.437] [alevinLog] [info] Done True Barcode Sampling\n[2025-01-10 07:29:00.439] [alevinLog] [info] Total 8.0184% reads will be thrown away because of noisy Cellular barcodes.\n[2025-01-10 07:29:00.565] [alevinLog] [info] Done populating Z matrix\n[2025-01-10 07:29:00.565] [alevinLog] [info] Total 0 CB got sequence corrected\n[2025-01-10 07:29:00.565] [alevinLog] [info] Done indexing Barcodes\n[2025-01-10 07:29:00.565] [alevinLog] [info] Total Unique barcodes found: 15126\n[2025-01-10 07:29:00.565] [alevinLog] [info] Used Barcodes except Whitelist: 0\n[2025-01-10 07:29:00.587] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify\n\n[2025-01-10 07:29:00.587] [alevinLog] [info] parsing read library format\n-----------------------------------------\n| Loading contig table | Time = 791.73 us\n-----------------------------------------\nsize = 1412\n-----------------------------------------\n| Loading contig offsets | Time = 648.34 us\n-----------------------------------------\n-----------------------------------------\n| Loading reference lengths | Time = 5.56 us\n-----------------------------------------\n-----------------------------------------\n| Loading mphf table | Time = 679.62 us\n-----------------------------------------\nsize = 235270\nNumber of ones: 1411\nNumber of ones per inventory item: 512\nInventory entries filled: 3\n-----------------------------------------\n| Loading contig boundaries | Time = 1.0195 ms\n-----------------------------------------\nsize = 235270\n-----------------------------------------\n| Loading sequence | Time = 633.15 us\n-----------------------------------------\nsize = 192940\n-----------------------------------------\n| Loading positions | Time = 1.2199 ms\n-----------------------------------------\nsize = 570828\n-----------------------------------------\n| Loading reference sequence | Time = 962.63 us\n-----------------------------------------\n-----------------------------------------\n| Loading reference accumulative lengths | Time = 16.13 us\n-----------------------------------------\n[2025-01-10 07:29:00.587] [jointLog] [info] There is 1 library.\n[2025-01-10 07:29:00.701] [jointLog] [info] Loading pufferfish index\n[2025-01-10 07:29:00.701] [jointLog] [info] Loading dense pufferfish index.\n[2025-01-10 07:29:00.710] [jointLog] [info] done\n[2025-01-10 07:29:00.710] [jointLog] [info] Index contained 322 targets\n[2025-01-10 07:29:00.710] [jointLog] [info] Number of decoys : 0\n\n\n\n\n\n\n\n\n[2025-01-10 07:29:01.636] [jointLog] [info] Computed 41 rich equivalence classes for further processing\n[2025-01-10 07:29:01.636] [jointLog] [info] Counted 96 total reads in the equivalence classes \n[2025-01-10 07:29:01.637] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0\n[2025-01-10 07:29:01.637] [jointLog] [info] Mapping rate = 0.0768%\n\n[2025-01-10 07:29:01.637] [jointLog] [info] finished quantifyLibrary()\n[2025-01-10 07:29:01.646] [alevinLog] [info] Starting optimizer\n\n\n\u001b[A\r\r\u001b[32mAnalyzed 36 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 42 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 46 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 47 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 86 cells (\u001b[31m2%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 47 cells (\u001b[31m1%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 95 cells (\u001b[31m2%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 140 cells (\u001b[31m3%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 140 cells (\u001b[31m3%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 248 cells (\u001b[31m5%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 262 cells (\u001b[31m5%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 276 cells (\u001b[31m5%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 285 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 297 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 328 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 331 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 331 cells (\u001b[31m6%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 385 cells (\u001b[31m8%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 409 cells (\u001b[31m8%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 436 cells (\u001b[31m9%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 491 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 491 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 520 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 520 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 609 cells (\u001b[31m12%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 609 cells (\u001b[31m12%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 520 cells (\u001b[31m10%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 673 cells (\u001b[31m13%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 702 cells (\u001b[31m14%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 740 cells (\u001b[31m15%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 740 cells (\u001b[31m15%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 789 cells (\u001b[31m15%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 790 cells (\u001b[31m15%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 802 cells (\u001b[31m16%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 802 cells (\u001b[31m16%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 886 cells (\u001b[31m17%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 886 cells (\u001b[31m17%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 944 cells (\u001b[31m18%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 960 cells (\u001b[31m19%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 886 cells (\u001b[31m17%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 960 cells (\u001b[31m19%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1101 cells (\u001b[31m22%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1119 cells (\u001b[31m22%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1153 cells (\u001b[31m23%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1156 cells (\u001b[31m23%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1178 cells (\u001b[31m23%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1205 cells (\u001b[31m24%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1392 cells (\u001b[31m27%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1393 cells (\u001b[31m27%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1444 cells (\u001b[31m28%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1528 cells (\u001b[31m30%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1570 cells (\u001b[31m31%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1721 cells (\u001b[31m34%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1771 cells (\u001b[31m35%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1803 cells (\u001b[31m35%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1820 cells (\u001b[31m36%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1842 cells (\u001b[31m36%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1878 cells (\u001b[31m37%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1898 cells (\u001b[31m37%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1922 cells (\u001b[31m38%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 1957 cells (\u001b[31m38%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2044 cells (\u001b[31m40%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2064 cells (\u001b[31m40%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2210 cells (\u001b[31m43%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2229 cells (\u001b[31m44%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2266 cells (\u001b[31m44%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2336 cells (\u001b[31m46%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2660 cells (\u001b[31m52%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2660 cells (\u001b[31m52%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2769 cells (\u001b[31m54%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2775 cells (\u001b[31m54%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2781 cells (\u001b[31m54%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 2849 cells (\u001b[31m56%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3004 cells (\u001b[31m59%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3004 cells (\u001b[31m59%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3087 cells (\u001b[31m60%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3087 cells (\u001b[31m60%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3319 cells (\u001b[31m65%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3603 cells (\u001b[31m71%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3799 cells (\u001b[31m74%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 3799 cells (\u001b[31m74%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4019 cells (\u001b[31m79%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4089 cells (\u001b[31m80%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4127 cells (\u001b[31m81%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4133 cells (\u001b[31m81%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4158 cells (\u001b[31m81%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4220 cells (\u001b[31m83%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4267 cells (\u001b[31m84%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4362 cells (\u001b[31m85%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 4790 cells (\u001b[31m94%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n\u001b[A\r\r\u001b[32mAnalyzed 5103 cells (\u001b[31m100%\u001b[32m of all).\u001b[0m\n[2025-01-10 07:29:01.832] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting\n[2025-01-10 07:29:01.832] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting\n[2025-01-10 07:29:01.839] [alevinLog] [info] Total 96.00 UMI after deduplicating.\n[2025-01-10 07:29:01.839] [alevinLog] [info] Total 0 BiDirected Edges.\n[2025-01-10 07:29:01.839] [alevinLog] [info] Total 0 UniDirected Edges.\n[2025-01-10 07:29:01.839] [alevinLog] [warning] Skipped 5007 barcodes due to No mapped read\n[2025-01-10 07:29:01.855] [alevinLog] [info] Clearing EqMap; Might take some time.\n[2025-01-10 07:29:01.859] [alevinLog] [warning] Num Low confidence barcodes too less 2 \u003c 200.Can\u0027t performing whitelisting; Skipping\n[2025-01-10 07:29:01.859] [alevinLog] [info] Starting dumping cell v gene counts in mtx format\n[2025-01-10 07:29:01.864] [alevinLog] [info] Finished dumping counts into mtx\n[2025-01-10 07:29:01.864] [alevinLog] [info] Finished optimizer\n[2025-01-10 07:29:01.885] [jointLog] [warning] NOTE: Read Lib [[ ./mate1.fastq, ./mate2.fastq]] :\n\nFound no concordant and consistent mappings. If this is a paired-end library, are you sure the reads are properly paired? check the file: ./output/lib_format_counts.json for details\n\n." ], "status": "failure", "test_index": 0, "time_seconds": 36.481037855148315, "tool_id": "alevin", "tool_version": "1.5.1+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            Threads = 2Vertex length = 31Hash functions = 5Filter size = 4194304Capacity = 2Files: ./index/ref_k31_fixed.fa--------------------------------------------------------------------------------Round 0, 0:4194304PassFillingFiltering100200True junctions count = 1005False junctions count = 1258Hash table size = 2263Candidate marks count = 9529--------------------------------------------------------------------------------Reallocating bifurcations time: 0True marks count: 6382Edges construction time: 0--------------------------------------------------------------------------------Distinct junctions = 1005for info, total work write each  : 2.331    total work inram from level 3 : 4.322  total work raw : 25.000 Bitarray         1016896  bits (100.00 %)   (array + ranks )final hash             0  bits (0.00 %) (nb in final hash 0)
            ]]></system-out>
            <system-err><![CDATA[
            Version Info: ### PLEASE UPGRADE SALMON ###### A newer version of salmon with important bug fixes and improvements is available. #######The newest version, available at https://github.com/COMBINE-lab/salmon/releasescontains new features, improvements, and bug fixes; please upgrade at yourearliest convenience.###Sign up for the salmon mailing list to hear about new versions, features and updates at:https://oceangenomics.com/subscribe###[2025-01-10 07:28:59.154] [jLog] [warning] The salmon index is being built without any decoy sequences.  It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be provided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.[2025-01-10 07:28:59.154] [jLog] [info] building indexout : ./index[2025-01-10 07:28:59.155] [puff::index::jointLog] [info] Running fixFasta[Step 1 of 4] : counting k-mers[2025-01-10 07:28:59.172] [puff::index::jointLog] [warning] Removed 1 transcripts that were sequence duplicates of indexed transcripts.[2025-01-10 07:28:59.172] [puff::index::jointLog] [warning] If you wish to retain duplicate transcripts, please use the `--keepDuplicates` flag[2025-01-10 07:28:59.177] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides[2025-01-10 07:28:59.177] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcriptswrote 322 cleaned references[2025-01-10 07:28:59.195] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers[2025-01-10 07:28:59.201] [puff::index::jointLog] [info] ntHll estimated 164678 distinct k-mers, setting filter size to 2^22allowedIn: 18Max Junction ID: 1201seen.size():9617 kmerInfo.size():1202approximateContigTotalLength: 145043counters for complex kmers:(prec>1 & succ>1)=5 | (succ>1 & isStart)=1 | (prec>1 & isEnd)=2 | (isStart & isEnd)=0contig count: 1412 element count: 235270 complex nodes: 8# of ones in rank vector: 1411[2025-01-10 07:28:59.427] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.[2025-01-10 07:28:59.427] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory ./indexsize = 235270-----------------------------------------| Loading contigs | Time = 906.27 us-----------------------------------------size = 235270-----------------------------------------| Loading contig boundaries | Time = 767.01 us-----------------------------------------Number of ones: 1411Number of ones per inventory item: 512Inventory entries filled: 31411[2025-01-10 07:28:59.429] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.[2025-01-10 07:28:59.429] [puff::index::jointLog] [info] contig count for validation: 1411[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Total # of Contigs : 1411[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Total # of numerical Contigs : 1411[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Total # of contig vec entries: 6088[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] bits per offset entry 13[2025-01-10 07:28:59.430] [puff::index::jointLog] [info] Done constructing the contig vector. 1412[2025-01-10 07:28:59.441] [puff::index::jointLog] [info] # segments = 1411[2025-01-10 07:28:59.441] [puff::index::jointLog] [info] total length = 235270[2025-01-10 07:28:59.441] [puff::index::jointLog] [info] Reading the reference files ...[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] positional integer width = 18[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] seqSize = 235270[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] rankSize = 235270[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] edgeVecSize = 0[2025-01-10 07:28:59.453] [puff::index::jointLog] [info] num keys = 192940[Building BooPHF]  0.228%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  0.455%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  0.455%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  0.455%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  0.683%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  0.683%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  0.911%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  0.911%   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  1.14 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  1.14 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  1.37 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  1.37 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  1.59 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  1.59 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  1.59 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  1.82 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  1.82 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  1.82 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.05 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.28 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.28 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.28 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.5  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.5  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.73 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.73 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.96 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  2.96 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  3.19 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  3.19 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  3.42 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  3.42 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  3.42 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  3.64 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  3.64 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  3.64 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  3.87 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  3.87 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.1  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.1  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.33 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.33 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.55 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.55 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.55 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.78 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  4.78 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  5.01 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  5.01 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  5.24 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  5.24 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  5.47 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  5.47 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  5.69 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  5.69 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  5.69 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  5.92 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  5.92 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  5.92 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.15 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.15 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.38 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.38 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.6  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.6  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.83 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  6.83 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  7.06 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  7.06 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  7.29 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  7.29 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  7.29 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  7.51 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  7.51 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  7.74 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  7.74 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  7.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  7.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  7.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  8.2  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  8.2  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  8.43 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  8.43 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  8.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  8.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  8.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  8.88 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  8.88 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.11 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.11 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.34 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.34 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.56 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.56 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.79 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  9.79 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  10   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  10   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  10   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  10.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  10.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  10.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  10.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  10.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  10.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  10.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  10.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  10.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  10.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  11.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  12.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  12.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  12.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  12.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  12.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  12.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  12.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  12.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  14.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  14.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  14.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  14.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  14.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  14.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  14.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  15   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  15   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  15.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  15.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  15.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  15.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  15.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  15.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  15.7 %   elapsed:..PHF]  96.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  96.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  96.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  96.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  96.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  96.8 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  97   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  97   %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  97.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  97.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  97.2 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  97.5 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  97.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  97.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  97.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  97.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  97.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  98.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  98.1 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  98.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  98.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  98.4 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  98.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  98.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] mphf size = 0.121223 MB[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] chunk size = 117635[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] chunk 0 = [0, 117644)[2025-01-10 07:28:59.545] [puff::index::jointLog] [info] chunk 1 = [117644, 235240)[2025-01-10 07:28:59.552] [puff::index::jointLog] [info] finished populating pos vector[2025-01-10 07:28:59.553] [puff::index::jointLog] [info] writing index components[2025-01-10 07:28:59.570] [puff::index::jointLog] [info] finished writing dense pufferfish index[2025-01-10 07:28:59.574] [jLog] [info] done building indexVersion Info: ### PLEASE UPGRADE SALMON ###### A newer version of salmon with important bug fixes and improvements is available. #######The newest version, available at https://github.com/COMBINE-lab/salmon/releasescontains new features, improvements, and bug fixes; please upgrade at yourearliest convenience.###Sign up for the salmon mailing list to hear about new versions, features and updates at:https://oceangenomics.com/subscribe###Logs will be written to ./output/logs[2025-01-10 07:29:00.263] [alevinLog] [warning] Force Cells to 1 fraction of All possible CB.This is not recommended way to run the pipeline,and it might slow the pipeline[2025-01-10 07:29:00.292] [jointLog] [info] setting maxHashResizeThreads to 8[2025-01-10 07:29:00.292] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.[2025-01-10 07:29:00.292] [jointLog] [info] The --mimicBT2, --mimicStrictBT2 and --hardFilter flags imply mapping validation (--validateMappings). Enabling mapping validation.[2025-01-10 07:29:00.292] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65[2025-01-10 07:29:00.292] [jointLog] [info] The use of range-factorized equivalence classes does not make sense in conjunction with --hardFilter.  Disabling range-factorized equivalence classes. [2025-01-10 07:29:00.292] [jointLog] [info] Setting consensusSlack to selective-alignment default of 0.35.[2025-01-10 07:29:00.292] [jointLog] [info] Using default value of 0.87 for minScoreFraction in AlevinUsing default value of 0.6 for consensusSlack in Alevin### alevin (dscRNA-seq quantification) v1.5.1### [ program ] => salmon ### [ command ] => alevin ### [ libType ] => { A }### [ index ] => { ./index }### [ mates1 ] => { ./mate1.fastq }### [ mates2 ] => { ./mate2.fastq }### [ output ] => { ./output }### [ threads ] => { 8 }### [ chromium ] => { }### [ tgMap ] => { ./alevinmap.tsv }### [ keepCBFraction ] => { 1.0 }### [ dumpFeatures ] => { }### [ dumpMtx ] => { }### [ freqThreshold ] => { 5 }[2025-01-10 07:29:00.295] [alevinLog] [info] Found 322 transcripts(+0 decoys, +0 short and +0 duplicate names in the index)[2025-01-10 07:29:00.296] [alevinLog] [info] Filled with 322 txp to gene entries [2025-01-10 07:29:00.296] [alevinLog] [info] Found all transcripts to gene mappings[2025-01-10 07:29:00.307] [alevinLog] [info] Processing barcodes files (if Present)  [2025-01-10 07:29:00.359] [alevinLog] [info] Done barcode density calculation.[2025-01-10 07:29:00.359] [alevinLog] [info] # Barcodes Used: [32m125000[0m / [31m125000[0m.[2025-01-10 07:29:00.361] [alevinLog] [info] Forcing to use 15126 cells[2025-01-10 07:29:00.383] [alevinLog] [info] Throwing 10524 barcodes with < 5 reads[2025-01-10 07:29:00.403] [alevinLog] [info] Total [32m5104[0m(has [32m501[0m low confidence) barcodes[2025-01-10 07:29:00.437] [alevinLog] [info] Done True Barcode Sampling[2025-01-10 07:29:00.439] [alevinLog] [info] Total 8.0184% reads will be thrown away because of noisy Cellular barcodes.[2025-01-10 07:29:00.565] [alevinLog] [info] Done populating Z matrix[2025-01-10 07:29:00.565] [alevinLog] [info] Total 0 CB got sequence corrected[2025-01-10 07:29:00.565] [alevinLog] [info] Done indexing Barcodes[2025-01-10 07:29:00.565] [alevinLog] [info] Total Unique barcodes found: 15126[2025-01-10 07:29:00.565] [alevinLog] [info] Used Barcodes except Whitelist: 0[2025-01-10 07:29:00.587] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify[2025-01-10 07:29:00.587] [alevinLog] [info] parsing read library format-----------------------------------------| Loading contig table | Time = 791.73 us-----------------------------------------size = 1412-----------------------------------------| Loading contig offsets | Time = 648.34 us----------------------------------------------------------------------------------| Loading reference lengths | Time = 5.56 us----------------------------------------------------------------------------------| Loading mphf table | Time = 679.62 us-----------------------------------------size = 235270Number of ones: 1411Number of ones per inventory item: 512Inventory entries filled: 3-----------------------------------------| Loading contig boundaries | Time = 1.0195 ms-----------------------------------------size = 235270-----------------------------------------| Loading sequence | Time = 633.15 us-----------------------------------------size = 192940-----------------------------------------| Loading positions | Time = 1.2199 ms-----------------------------------------size = 570828-----------------------------------------| Loading reference sequence | Time = 962.63 us----------------------------------------------------------------------------------| Loading reference accumulative lengths | Time = 16.13 us-----------------------------------------[2025-01-10 07:29:00.587] [jointLog] [info] There is 1 library.[2025-01-10 07:29:00.701] [jointLog] [info] Loading pufferfish index[2025-01-10 07:29:00.701] [jointLog] [info] Loading dense pufferfish index.[2025-01-10 07:29:00.710] [jointLog] [info] done[2025-01-10 07:29:00.710] [jointLog] [info] Index contained 322 targets[2025-01-10 07:29:00.710] [jointLog] [info] Number of decoys : 0[2025-01-10 07:29:01.636] [jointLog] [info] Computed 41 rich equivalence classes for further processing[2025-01-10 07:29:01.636] [jointLog] [info] Counted 96 total reads in the equivalence classes [2025-01-10 07:29:01.637] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0[2025-01-10 07:29:01.637] [jointLog] [info] Mapping rate = 0.0768%[2025-01-10 07:29:01.637] [jointLog] [info] finished quantifyLibrary()[2025-01-10 07:29:01.646] [alevinLog] [info] Starting optimizer[A[32mAnalyzed 36 cells ([31m1%[32m of all).[0m[A[32mAnalyzed 42 cells ([31m1%[32m of all).[0m[A[32mAnalyzed 46 cells ([31m1%[32m of all).[0m[A[32mAnalyzed 47 cells ([31m1%[32m of all).[0m[A[32mAnalyzed 86 cells ([31m2%[32m of all).[0m[A[32mAnalyzed 47 cells ([31m1%[32m of all).[0m[A[32mAnalyzed 95 cells ([31m2%[32m of all).[0m[A[32mAnalyzed 140 cells ([31m3%[32m of all).[0m[A[32mAnalyzed 140 cells ([31m3%[32m of all).[0m[A[32mAnalyzed 248 cells ([31m5%[32m of all).[0m[A[32mAnalyzed 262 cells ([31m5%[32m of all).[0m[A[32mAnalyzed 276 cells ([31m5%[32m of all).[0m[A[32mAnalyzed 285 cells ([31m6%[32m of all).[0m[A[32mAnalyzed 297 cells ([31m6%[32m of all).[0m[A[32mAnalyzed 328 cells ([31m6%[32m of all).[0m[A[32mAnalyzed 331 cells ([31m6%[32m of all).[0m[A[32mAnalyzed 331 cells ([31m6%[32m of all).[0m[A[32mAnalyzed 385 cells ([31m8%[32m of all).[0m[A[32mAnalyzed 409 cells ([31m8%[32m of all).[0m[A[32mAnalyzed 436 cells ([31m9%[32m of all).[0m[A[32mAnalyzed 491 cells ([31m10%[32m of all).[0m[A[32mAnalyzed 491 cells ([31m10%[32m of all).[0m[A[32mAnalyzed 520 cells ([31m10%[32m of all).[0m[A[32mAnalyzed 520 cells ([31m10%[32m of all).[0m[A[32mAnalyzed 609 cells ([31m12%[32m of all).[0m[A[32mAnalyzed 609 cells ([31m12%[32m of all).[0m[A[32mAnalyzed 520 cells ([31m10%[32m of all).[0m[A[32mAnalyzed 673 cells ([31m13%[32m of all).[0m[A[32mAnalyzed 702 cells ([31m14%[32m of all).[0m[A[32mAnalyzed 740 cells ([31m15%[32m of all).[0m[A[32mAnalyzed 740 cells ([31m15%[32m of all).[0m[A[32mAnalyzed 789 cells ([31m15%[32m of all).[0m[A[32mAnalyzed 790 cells ([31m15%[32m of all).[0m[A[32mAnalyzed 802 cells ([31m16%[32m of all).[0m[A[32mAnalyzed 802 cells ([31m16%[32m of all).[0m[A[32mAnalyzed 886 cells ([31m17%[32m of all).[0m[A[32mAnalyzed 886 cells ([31m17%[32m of all).[0m[A[32mAnalyzed 944 cells ([31m18%[32m of all).[0m[A[32mAnalyzed 960 cells ([31m19%[32m of all).[0m[A[32mAnalyzed 886 cells ([31m17%[32m of all).[0m[A[32mAnalyzed 960 cells ([31m19%[32m of all).[0m[A[32mAnalyzed 1101 cells ([31m22%[32m of all).[0m[A[32mAnalyzed 1119 cells ([31m22%[32m of all).[0m[A[32mAnalyzed 1153 cells ([31m23%[32m of all).[0m[A[32mAnalyzed 1156 cells ([31m23%[32m of all).[0m[A[32mAnalyzed 1178 cells ([31m23%[32m of all).[0m[A[32mAnalyzed 1205 cells ([31m24%[32m of all).[0m[A[32mAnalyzed 1392 cells ([31m27%[32m of all).[0m[A[32mAnalyzed 1393 cells ([31m27%[32m of all).[0m[A[32mAnalyzed 1444 cells ([31m28%[32m of all).[0m[A[32mAnalyzed 1528 cells ([31m30%[32m of all).[0m[A[32mAnalyzed 1570 cells ([31m31%[32m of all).[0m[A[32mAnalyzed 1721 cells ([31m34%[32m of all).[0m[A[32mAnalyzed 1771 cells ([31m35%[32m of all).[0m[A[32mAnalyzed 1803 cells ([31m35%[32m of all).[0m[A[32mAnalyzed 1820 cells ([31m36%[32m of all).[0m[A[32mAnalyzed 1842 cells ([31m36%[32m of all).[0m[A[32mAnalyzed 1878 cells ([31m37%[32m of all).[0m[A[32mAnalyzed 1898 cells ([31m37%[32m of all).[0m[A[32mAnalyzed 1922 cells ([31m38%[32m of all).[0m[A[32mAnalyzed 1957 cells ([31m38%[32m of all).[0m[A[32mAnalyzed 2044 cells ([31m40%[32m of all).[0m[A[32mAnalyzed 2064 cells ([31m40%[32m of all).[0m[A[32mAnalyzed 2210 cells ([31m43%[32m of all).[0m[A[32mAnalyzed 2229 cells ([31m44%[32m of all).[0m[A[32mAnalyzed 2266 cells ([31m44%[32m of all).[0m[A[32mAnalyzed 2336 cells ([31m46%[32m of all).[0m[A[32mAnalyzed 2660 cells ([31m52%[32m of all).[0m[A[32mAnalyzed 2660 cells ([31m52%[32m of all).[0m[A[32mAnalyzed 2769 cells ([31m54%[32m of all).[0m[A[32mAnalyzed 2775 cells ([31m54%[32m of all).[0m[A[32mAnalyzed 2781 cells ([31m54%[32m of all).[0m[A[32mAnalyzed 2849 cells ([31m56%[32m of all).[0m[A[32mAnalyzed 3004 cells ([31m59%[32m of all).[0m[A[32mAnalyzed 3004 cells ([31m59%[32m of all).[0m[A[32mAnalyzed 3087 cells ([31m60%[32m of all).[0m[A[32mAnalyzed 3087 cells ([31m60%[32m of all).[0m[A[32mAnalyzed 3319 cells ([31m65%[32m of all).[0m[A[32mAnalyzed 3603 cells ([31m71%[32m of all).[0m[A[32mAnalyzed 3799 cells ([31m74%[32m of all).[0m[A[32mAnalyzed 3799 cells ([31m74%[32m of all).[0m[A[32mAnalyzed 4019 cells ([31m79%[32m of all).[0m[A[32mAnalyzed 4089 cells ([31m80%[32m of all).[0m[A[32mAnalyzed 4127 cells ([31m81%[32m of all).[0m[A[32mAnalyzed 4133 cells ([31m81%[32m of all).[0m[A[32mAnalyzed 4158 cells ([31m81%[32m of all).[0m[A[32mAnalyzed 4220 cells ([31m83%[32m of all).[0m[A[32mAnalyzed 4267 cells ([31m84%[32m of all).[0m[A[32mAnalyzed 4362 cells ([31m85%[32m of all).[0m[A[32mAnalyzed 4790 cells ([31m94%[32m of all).[0m[A[32mAnalyzed 5103 cells ([31m100%[32m of all).[0m[A[32mAnalyzed 5103 cells ([31m100%[32m of all).[0m[A[32mAnalyzed 5103 cells ([31m100%[32m of all).[0m[A[32mAnalyzed 5103 cells ([31m100%[32m of all).[0m[A[32mAnalyzed 5103 cells ([31m100%[32m of all).[0m[A[32mAnalyzed 5103 cells ([31m100%[32m of all).[0m[2025-01-10 07:29:01.832] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting[2025-01-10 07:29:01.832] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting[2025-01-10 07:29:01.839] [alevinLog] [info] Total 96.00 UMI after deduplicating.[2025-01-10 07:29:01.839] [alevinLog] [info] Total 0 BiDirected Edges.[2025-01-10 07:29:01.839] [alevinLog] [info] Total 0 UniDirected Edges.[2025-01-10 07:29:01.839] [alevinLog] [warning] Skipped 5007 barcodes due to No mapped read[2025-01-10 07:29:01.855] [alevinLog] [info] Clearing EqMap; Might take some time.[2025-01-10 07:29:01.859] [alevinLog] [warning] Num Low confidence barcodes too less 2 < 200.Can't performing whitelisting; Skipping[2025-01-10 07:29:01.859] [alevinLog] [info] Starting dumping cell v gene counts in mtx format[2025-01-10 07:29:01.864] [alevinLog] [info] Finished dumping counts into mtx[2025-01-10 07:29:01.864] [alevinLog] [info] Finished optimizer[2025-01-10 07:29:01.885] [jointLog] [warning] NOTE: Read Lib [[ ./mate1.fastq, ./mate2.fastq]] :Found no concordant and consistent mappings. If this is a paired-end library, are you sure the reads are properly paired? check the file: ./output/lib_format_counts.json for details
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="alevin (Test #2)" name="1" time="58.85648274421692">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "optional|dumpFeatures": true,  "optional|dumpMtx": true,  "optional|freqThreshold": "5",  "optional|keepCBFraction": "1",  "optional|numCellBootstraps": "2",  "pairstraight|file1": {   "id": "fe7040d8c481e2e1",   "src": "hda"  },  "pairstraight|file2": {   "id": "cbb637d94bf66068",   "src": "hda"  },  "pairstraight|readselect": "paired",  "protocol": "--chromium",  "refTranscriptSource|TranscriptSource": "history",  "refTranscriptSource|s_index|fasta": {   "id": "437a15d35b380d3b",   "src": "hda"  },  "tgmap": {   "id": "8418f4d395c7af8c",   "src": "hda"  } }, "job": {  "command_line": "mkdir ./index \u0026\u0026 mkdir ./output \u0026\u0026 salmon index -i ./index --kmerLen \u002731\u0027 --gencode --transcripts \u0027/galaxy/server/database/objects/4/d/d/dataset_4dd0bcaf-07ff-4f33-92ac-2837c1e4db0e.dat\u0027 \u0026\u0026 cp \u0027/galaxy/server/database/objects/4/4/1/dataset_4418aaf3-cb4a-478e-be3f-80feca53b8e5.dat\u0027 ./mate1.fastq.gz \u0026\u0026 gunzip ./mate1.fastq.gz \u0026\u0026 cp \u0027/galaxy/server/database/objects/2/6/2/dataset_26282502-078e-4882-8428-23b6590c8a52.dat\u0027 ./mate2.fastq.gz \u0026\u0026 gunzip ./mate2.fastq.gz  \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/e/3/6/dataset_e3659567-5aa0-4837-bd7d-3c79606ea908.dat\u0027 ./alevinmap.tsv \u0026\u0026 salmon alevin -l A -i ./index -1 ./mate1.fastq -2 ./mate2.fastq -o ./output -p \"${GALAXY_SLOTS:-4}\" --chromium --tgMap ./alevinmap.tsv --numCellBootstraps \u00272\u0027 --keepCBFraction \u00271.0\u0027   --dumpFeatures  --dumpMtx --freqThreshold \u00275\u0027  \u0026\u0026 gunzip output/alevin/quants_mat.mtx.gz  \u0026\u0026 gunzip output/alevin/quants_tier_mat.gz \u0026\u0026 gunzip output/alevin/quants_mean_mat.gz \u0026\u0026 gunzip output/alevin/quants_var_mat.gz  \u0026\u0026 gunzip output/aux_info/fld.gz \u0026\u0026 gunzip output/aux_info/observed_bias.gz \u0026\u0026 gunzip output/aux_info/observed_bias_3p.gz",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-10T07:27:57.702866",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-j8jzr",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "d91de0ec84654b9a",  "inputs": {   "pairstraight|file1": {    "id": "fe7040d8c481e2e1",    "src": "hda",    "uuid": "4418aaf3-cb4a-478e-be3f-80feca53b8e5"   },   "pairstraight|file2": {    "id": "cbb637d94bf66068",    "src": "hda",    "uuid": "26282502-078e-4882-8428-23b6590c8a52"   },   "refTranscriptSource|s_index|fasta": {    "id": "437a15d35b380d3b",    "src": "hda",    "uuid": "4dd0bcaf-07ff-4f33-92ac-2837c1e4db0e"   },   "tgmap": {    "id": "8418f4d395c7af8c",    "src": "hda",    "uuid": "e3659567-5aa0-4837-bd7d-3c79606ea908"   }  },  "job_messages": [],  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "expected_bias": {    "id": "f5234b8e0baf92ac",    "src": "hda",    "uuid": "1f533e03-d2b4-4b2a-92c6-ddedfb5e863a"   },   "featureDump_txt": {    "id": "00eac61b3907bb70",    "src": "hda",    "uuid": "c31de95e-5c0c-4ed9-a7fd-683a7572ff31"   },   "flenDist_txt": {    "id": "a4e01d375913a06d",    "src": "hda",    "uuid": "06381939-4735-4daa-b32d-5cbddd91c8f6"   },   "observed_bias": {    "id": "2862aa5be02c71cf",    "src": "hda",    "uuid": "c439a2bc-4c1c-457f-a52c-e75ae8eb61f0"   },   "observed_bias_3p": {    "id": "8b33f02f6f0ee5ae",    "src": "hda",    "uuid": "59e253a5-6c9d-41cb-b6f8-fd5367a0c350"   },   "quants_boot_rows_txt": {    "id": "36af937933f593c4",    "src": "hda",    "uuid": "64cabce1-e840-4de9-8ee4-66cccacac055"   },   "quants_mat_cols_txt": {    "id": "c989623c86b5cb03",    "src": "hda",    "uuid": "027a1aac-44a6-445a-a694-1cf19d7f08e3"   },   "quants_mat_mtx": {    "id": "a4c0f6a84ee33012",    "src": "hda",    "uuid": "464b5d8a-0acd-477d-aef9-7fcfc788dc6f"   },   "quants_mat_rows_txt": {    "id": "75565a922b46a397",    "src": "hda",    "uuid": "1b844bc1-b73f-4698-b3de-cc738a1d7d91"   },   "quants_mean_mat": {    "id": "b1124a97adcb4ae5",    "src": "hda",    "uuid": "ca86a1c3-9be8-41de-9bbe-f83a6f4706fa"   },   "quants_tier_mat": {    "id": "fa5a74ef9c254529",    "src": "hda",    "uuid": "f873787d-cb38-4eda-a6c1-32f4430ce977"   },   "quants_var_mat": {    "id": "e527e26c516aa5b8",    "src": "hda",    "uuid": "040c3aa3-51a1-4c53-bddc-d50cf4b2cceb"   },   "raw_cb_frequency_txt": {    "id": "6ca50b22e02f8dee",    "src": "hda",    "uuid": "449ea9a3-8090-4b6a-b8a5-30ad766f7ddc"   },   "whitelist_txt": {    "id": "d5bcff5c5848f1e1",    "src": "hda",    "uuid": "711a8e61-ce97-45ec-b97c-5124662ff1b2"   }  },  "params": {   "__input_ext": "\"input\"",   "allout": "false",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "optional": "{\"dumpBfh\": false, \"dumpFeatures\": true, \"dumpMtx\": true, \"dumpUmiGraph\": false, \"expectCells\": \"\", \"forceCells\": \"\", \"freqThreshold\": \"5\", \"keepCBFraction\": \"1.0\", \"lowRegionMinNumBarcodes\": \"\", \"maxNumBarcodes\": \"\", \"minScoreFraction\": \"\", \"mrna\": null, \"noDedup\": false, \"numCellBootstraps\": \"2\", \"rrna\": null, \"whitelist\": null}",   "pairstraight": "{\"__current_case__\": 0, \"file1\": {\"values\": [{\"id\": 396, \"src\": \"hda\"}]}, \"file2\": {\"values\": [{\"id\": 397, \"src\": \"hda\"}]}, \"libtype\": {\"__current_case__\": 0, \"strandedness\": \"A\"}, \"readselect\": \"paired\"}",   "protocol": "\"--chromium\"",   "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 395, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-01-10T07:28:28.495514",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0, exit_code: None, stderr: ." ], "status": "failure", "test_index": 1, "time_seconds": 58.85648274421692, "tool_id": "alevin", "tool_version": "1.5.1+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="alevin (Test #2)" name="1" time="69.5399420261383">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "optional|dumpFeatures": true,  "optional|dumpMtx": true,  "optional|freqThreshold": "5",  "optional|keepCBFraction": "1",  "optional|numCellBootstraps": "2",  "pairstraight|file1": {   "id": "b1b727ced7554863",   "src": "hda"  },  "pairstraight|file2": {   "id": "6a88526d1782f6dd",   "src": "hda"  },  "pairstraight|readselect": "paired",  "protocol": "--chromium",  "refTranscriptSource|TranscriptSource": "history",  "refTranscriptSource|s_index|fasta": {   "id": "e87481978ae9851d",   "src": "hda"  },  "tgmap": {   "id": "b7885674d0817e1f",   "src": "hda"  } }, "job": {  "command_line": "mkdir ./index \u0026\u0026 mkdir ./output \u0026\u0026 salmon index -i ./index --kmerLen \u002731\u0027 --gencode --transcripts \u0027/galaxy/server/database/objects/7/2/d/dataset_72dee260-a567-4a02-b3a1-e444b40ac954.dat\u0027 \u0026\u0026 cp \u0027/galaxy/server/database/objects/b/6/5/dataset_b659e56d-d9eb-41c3-8464-d3e36c61f2ce.dat\u0027 ./mate1.fastq.gz \u0026\u0026 gunzip ./mate1.fastq.gz \u0026\u0026 cp \u0027/galaxy/server/database/objects/4/5/f/dataset_45f76e39-d696-4069-9ec3-c31fd82d6cac.dat\u0027 ./mate2.fastq.gz \u0026\u0026 gunzip ./mate2.fastq.gz  \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/5/9/e/dataset_59eb60e3-789e-4aa4-bd88-45369308d10a.dat\u0027 ./alevinmap.tsv \u0026\u0026 salmon alevin -l A -i ./index -1 ./mate1.fastq -2 ./mate2.fastq -o ./output -p \"${GALAXY_SLOTS:-4}\" --chromium --tgMap ./alevinmap.tsv --numCellBootstraps \u00272\u0027 --keepCBFraction \u00271.0\u0027   --dumpFeatures  --dumpMtx --freqThreshold \u00275\u0027  \u0026\u0026 gunzip output/alevin/quants_mat.mtx.gz  \u0026\u0026 gunzip output/alevin/quants_tier_mat.gz \u0026\u0026 gunzip output/alevin/quants_mean_mat.gz \u0026\u0026 gunzip output/alevin/quants_var_mat.gz  \u0026\u0026 gunzip output/aux_info/fld.gz \u0026\u0026 gunzip output/aux_info/observed_bias.gz \u0026\u0026 gunzip output/aux_info/observed_bias_3p.gz",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-10T07:29:35.262989",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-2ns2b",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "78e0bce2563f0816",  "inputs": {   "pairstraight|file1": {    "id": "b1b727ced7554863",    "src": "hda",    "uuid": "b659e56d-d9eb-41c3-8464-d3e36c61f2ce"   },   "pairstraight|file2": {    "id": "6a88526d1782f6dd",    "src": "hda",    "uuid": "45f76e39-d696-4069-9ec3-c31fd82d6cac"   },   "refTranscriptSource|s_index|fasta": {    "id": "e87481978ae9851d",    "src": "hda",    "uuid": "72dee260-a567-4a02-b3a1-e444b40ac954"   },   "tgmap": {    "id": "b7885674d0817e1f",    "src": "hda",    "uuid": "59eb60e3-789e-4aa4-bd88-45369308d10a"   }  },  "job_messages": [],  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "expected_bias": {    "id": "7a8de414a22d79e7",    "src": "hda",    "uuid": "ef6134cd-9477-4edb-93de-73ab57aea0ba"   },   "featureDump_txt": {    "id": "d601ed48619af341",    "src": "hda",    "uuid": "53732914-0161-489b-bd2a-c47a988b70e8"   },   "flenDist_txt": {    "id": "d30eb5e745d3df1c",    "src": "hda",    "uuid": "181f7887-461f-42a2-9704-be602a115e06"   },   "observed_bias": {    "id": "5df5defca6da99a2",    "src": "hda",    "uuid": "614cd965-1551-4737-bc0f-263137215999"   },   "observed_bias_3p": {    "id": "e4e9e116b9e5d978",    "src": "hda",    "uuid": "c9d6253e-4c7f-42d2-984f-614d128cebb5"   },   "quants_boot_rows_txt": {    "id": "71767506105ae56a",    "src": "hda",    "uuid": "e53f5e55-c780-4e18-a8d8-1d3e5229bf85"   },   "quants_mat_cols_txt": {    "id": "31f3ab34390f1689",    "src": "hda",    "uuid": "6dd47cbd-72ba-4d7d-a19d-7dc5630dff5f"   },   "quants_mat_mtx": {    "id": "69b884a0346ca933",    "src": "hda",    "uuid": "ceea0d56-9616-4221-9095-c7e7b1d5b362"   },   "quants_mat_rows_txt": {    "id": "293a2a7a7a9b4a5c",    "src": "hda",    "uuid": "a60d94e0-8305-4bab-a167-c1c8f938bdbe"   },   "quants_mean_mat": {    "id": "dc40c66114c62635",    "src": "hda",    "uuid": "c8071a1a-47bd-44ab-b2b1-399d1ed80dec"   },   "quants_tier_mat": {    "id": "4eace78352110bd0",    "src": "hda",    "uuid": "2a193bb9-bc19-42ea-bc71-7a1d8b637db1"   },   "quants_var_mat": {    "id": "a7a207419334fe7a",    "src": "hda",    "uuid": "62d83a50-bc0d-4fd8-a07e-ec0190865deb"   },   "raw_cb_frequency_txt": {    "id": "6af9eff9656845f9",    "src": "hda",    "uuid": "72f16ede-84b8-42e7-8ba5-ba0d72d3e16c"   },   "whitelist_txt": {    "id": "3ae534163110c32e",    "src": "hda",    "uuid": "0de2801e-b180-48a8-99a5-adbd1676175e"   }  },  "params": {   "__input_ext": "\"input\"",   "allout": "false",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "optional": "{\"dumpBfh\": false, \"dumpFeatures\": true, \"dumpMtx\": true, \"dumpUmiGraph\": false, \"expectCells\": \"\", \"forceCells\": \"\", \"freqThreshold\": \"5\", \"keepCBFraction\": \"1.0\", \"lowRegionMinNumBarcodes\": \"\", \"maxNumBarcodes\": \"\", \"minScoreFraction\": \"\", \"mrna\": null, \"noDedup\": false, \"numCellBootstraps\": \"2\", \"rrna\": null, \"whitelist\": null}",   "pairstraight": "{\"__current_case__\": 0, \"file1\": {\"values\": [{\"id\": 429, \"src\": \"hda\"}]}, \"file2\": {\"values\": [{\"id\": 430, \"src\": \"hda\"}]}, \"libtype\": {\"__current_case__\": 0, \"strandedness\": \"A\"}, \"readselect\": \"paired\"}",   "protocol": "\"--chromium\"",   "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 428, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-01-10T07:30:15.492808",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0, exit_code: None, stderr: ." ], "status": "failure", "test_index": 1, "time_seconds": 69.5399420261383, "tool_id": "alevin", "tool_version": "1.5.1+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_export (Test #1)" name="0" time="43.50866746902466">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "hd5_format|filetype": "anndata",  "hd5_format|input": {   "id": "e1b0ddf302a1d28c",   "src": "hda"  },  "hd5_format|output_format": "loom" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/322/configs/tmpvvo8eb0v\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/322/configs/tmpvvo8eb0v\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-10T07:23:56.644626",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-w6n9j",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "0792abaebd1d0d68",  "inputs": {   "hd5_format|input": {    "id": "e1b0ddf302a1d28c",    "src": "hda",    "uuid": "f3bb141b-fb74-4116-b70c-b63a47e68d0f"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736493847.0000000",    "title": "Job End Time",    "value": "2025-01-10 07:24:07"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736493846.0000000",    "title": "Job Start Time",    "value": "2025-01-10 07:24:06"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "loom_output": {    "id": "8c9bfaccda4a89c1",    "src": "hda",    "uuid": "24f1f397-9ac1-424d-85cd-a8d8e0e0929b"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "hd5_format": "{\"__current_case__\": 0, \"filetype\": \"anndata\", \"input\": {\"values\": [{\"id\": 363, \"src\": \"hda\"}]}, \"output_format\": \"loom\"}"  },  "state": "ok",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "stdout": "\n\nimport anndata as ad\n    \n    \nadata = ad.read(\u0027/galaxy/server/database/objects/f/3/b/dataset_f3bb141b-fb74-4116-b70c-b63a47e68d0f.dat\u0027)\nadata.write_loom(\u0027anndata.loom\u0027)\n    ",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_export/anndata_export/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \nadata = ad.read(\u0027/galaxy/server/database/objects/f/3/b/dataset_f3bb141b-fb74-4116-b70c-b63a47e68d0f.dat\u0027)\nadata.write_loom(\u0027anndata.loom\u0027)\n    ",  "update_time": "2025-01-10T07:24:20.408568",  "user_email": "tests@fake.org" }, "output_problems": [  "Output loom_output:  different than expected, difference (using sim_size):\n( /tmp/tmpftsie3dwexport.krumsiek11.loom v. /tmp/tmprebfklghexport.krumsiek11.loom )\nFiles /tmp/tmpftsie3dwexport.krumsiek11.loom=77013b but /tmp/tmprebfklghexport.krumsiek11.loom=44821b - compare by size (delta=10000) failed" ], "status": "failure", "test_index": 0, "time_seconds": 43.50866746902466, "tool_id": "anndata_export", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/f/3/b/dataset_f3bb141b-fb74-4116-b70c-b63a47e68d0f.dat')adata.write_loom('anndata.loom')    
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_export (Test #1)" name="0" time="31.773589611053467">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "hd5_format|filetype": "anndata",  "hd5_format|input": {   "id": "07e1844fd3fb9e72",   "src": "hda"  },  "hd5_format|output_format": "loom" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/328/configs/tmp49hnlt3u\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/328/configs/tmp49hnlt3u\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-10T07:25:47.207412",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-pl9zp",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "d228a2fc8d64abdf",  "inputs": {   "hd5_format|input": {    "id": "07e1844fd3fb9e72",    "src": "hda",    "uuid": "8b2c7a79-d32a-4605-8c3d-020afd8219c4"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736493949.0000000",    "title": "Job End Time",    "value": "2025-01-10 07:25:49"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736493948.0000000",    "title": "Job Start Time",    "value": "2025-01-10 07:25:48"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "loom_output": {    "id": "12041f23d5ab5ea3",    "src": "hda",    "uuid": "9dd79295-f592-4ada-a12b-f0a90cd768be"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "hd5_format": "{\"__current_case__\": 0, \"filetype\": \"anndata\", \"input\": {\"values\": [{\"id\": 377, \"src\": \"hda\"}]}, \"output_format\": \"loom\"}"  },  "state": "ok",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "stdout": "\n\nimport anndata as ad\n    \n    \nadata = ad.read(\u0027/galaxy/server/database/objects/8/b/2/dataset_8b2c7a79-d32a-4605-8c3d-020afd8219c4.dat\u0027)\nadata.write_loom(\u0027anndata.loom\u0027)\n    ",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_export/anndata_export/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \nadata = ad.read(\u0027/galaxy/server/database/objects/8/b/2/dataset_8b2c7a79-d32a-4605-8c3d-020afd8219c4.dat\u0027)\nadata.write_loom(\u0027anndata.loom\u0027)\n    ",  "update_time": "2025-01-10T07:25:59.918345",  "user_email": "tests@fake.org" }, "output_problems": [  "Output loom_output:  different than expected, difference (using sim_size):\n( /tmp/tmp6ixdhar4export.krumsiek11.loom v. /tmp/tmphthsuk40export.krumsiek11.loom )\nFiles /tmp/tmp6ixdhar4export.krumsiek11.loom=77013b but /tmp/tmphthsuk40export.krumsiek11.loom=44821b - compare by size (delta=10000) failed" ], "status": "failure", "test_index": 0, "time_seconds": 31.773589611053467, "tool_id": "anndata_export", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/8/b/2/dataset_8b2c7a79-d32a-4605-8c3d-020afd8219c4.dat')adata.write_loom('anndata.loom')    
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_export (Test #2)" name="1" time="32.16977667808533">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "hd5_format|filetype": "anndata",  "hd5_format|input": {   "id": "7d50fad8a4613ace",   "src": "hda"  },  "hd5_format|output_format": "tabular" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/324/configs/tmpxb80c1s5\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/324/configs/tmpxb80c1s5\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-10T07:24:38.548649",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-7hc4d",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "e7d72b3c029cdb6f",  "inputs": {   "hd5_format|input": {    "id": "7d50fad8a4613ace",    "src": "hda",    "uuid": "f90018bc-9096-4cc2-8c83-3cb7939f6907"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736493881.0000000",    "title": "Job End Time",    "value": "2025-01-10 07:24:41"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736493880.0000000",    "title": "Job Start Time",    "value": "2025-01-10 07:24:40"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "tabular_obs": {    "id": "61d6336a5731f00b",    "src": "hda",    "uuid": "f8ccb2f3-43d3-4227-9b71-4cc775bb19df"   },   "tabular_obsm": {    "id": "736bb11e8ab97673",    "src": "hda",    "uuid": "23f40c35-61ec-45d0-ae7a-ad5140a563be"   },   "tabular_var": {    "id": "761f044a4f71fe14",    "src": "hda",    "uuid": "310694df-5b69-4297-89e1-98cbd5a2d4ba"   },   "tabular_varm": {    "id": "cbf78e4468cf2b1c",    "src": "hda",    "uuid": "e894c5ed-59ab-40b7-aa8b-ef4f3844e5ab"   },   "tabular_x": {    "id": "e100d91288f72ffa",    "src": "hda",    "uuid": "aef5249e-394a-432e-b14c-b31e9edd8230"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "hd5_format": "{\"__current_case__\": 0, \"filetype\": \"anndata\", \"input\": {\"values\": [{\"id\": 365, \"src\": \"hda\"}]}, \"output_format\": \"tabular\"}"  },  "state": "ok",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nwriting .csv files to .\n",  "stdout": "\n\nimport anndata as ad\n    \n    \nadata = ad.read(\u0027/galaxy/server/database/objects/f/9/0/dataset_f90018bc-9096-4cc2-8c83-3cb7939f6907.dat\u0027)\nadata.write_csvs(\u0027.\u0027, sep=\"\\t\", skip_data = False)\n    ",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_export/anndata_export/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nwriting .csv files to .\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \nadata = ad.read(\u0027/galaxy/server/database/objects/f/9/0/dataset_f90018bc-9096-4cc2-8c83-3cb7939f6907.dat\u0027)\nadata.write_csvs(\u0027.\u0027, sep=\"\\t\", skip_data = False)\n    ",  "update_time": "2025-01-10T07:24:51.556781",  "user_email": "tests@fake.org" }, "output_problems": [  "Output tabular_x:  different than expected, difference (using diff):\n( /tmp/tmpyqksk0a4export.krumsiek11.X.tabular v. /tmp/tmpp8zsn8iuexport.krumsiek11.X.tabular )\n--- local_file\n+++ history_data\n@@ -498,3 +498,143 @@\n 0.1857\t0.0587\t-0.0003\t0.0087\t0.0084\t0.0221\t0.9613\t0.2272\t0.1058\t0.0298\t0.276\n 0.177\t0.0645\t0.0011\t0.009\t0.006\t0.0222\t0.9653\t0.2208\t0.1063\t0.0291\t0.2785\n 0.1664\t0.0673\t0.002\t0.0078\t0.0094\t0.0278\t0.9689\t0.2125\t0.1041\t0.0294\t0.2794\n+0.159\t0.0738\t0.0015\t0.0092\t0.0068\t0.0289\t0.97\t0.2054\t0.1042\t0.0299\t0.2807\n+0.1509\t0.0722\t0.002\t0.0078\t0.0038\t0.0353\t0.9718\t0.2007\t0.0995\t0.0284\t0.2862\n+0.1492\t0.0714\t0.0025\t0.014\t0.0066\t0.0381\t0.972\t0.1993\t0.0989\t0.0286\t0.2911\n+0.1445\t0.0706\t0.0049\t0.0148\t0.0107\t0.0411\t0.9767\t0.1999\t0.0957\t0.0306\t0.293\n+0.1402\t0.073\t0.0063\t0.0143\t0.0122\t0.0407\t0.9761\t0.2024\t0.0999\t0.0315\t0.2912\n+0.1389\t0.0725\t0.0069\t0.0163\t0.014\t0.0406\t0.9781\t0.206\t0.0972\t0.0301\t0.2917\n+0.1364\t0.0761\t0.0068\t0.013\t0.0147\t0.0441\t0.975\t0.2033\t0.0948\t0.0285\t0.2932\n+0.1363\t0.0786\t0.0082\t0.0151\t0.0153\t0.0463\t0.9812\t0.2048\t0.0921\t0.0291\t0.2963\n+0.1339\t0.0796\t0.0069\t0.0145\t0.0171\t0.0539\t0.984\t0.2069\t0.0884\t0.031\t0.2958\n+0.1305\t0.0847\t0.0085\t0.0156\t0.015\t0.0565\t0.9853\t0.2108\t0.0883\t0.0348\t0.2913\n+0.1276\t0.0846\t0.0087\t0.0156\t0.0124\t0.0569\t0.9906\t0.2103\t0.0888\t0.0282\t0.2906\n+0.1238\t0.0827\t0.008\t0.0176\t0.0158\t0.0603\t0.9893\t0.213\t0.0886\t0.0267\t0.2899\n+0.121\t0.077\t0.01\t0.0174\t0.0171\t0.0605\t0.9918\t0.2194\t0.0885\t0.029\t0.2966\n+0.1187\t0.0773\t0.0107\t0.0185\t0.0164\t0.0598\t0.9913\t0.2219\t0.0878\t0.0299\t0.2996\n+0.1158\t0.0758\t0.0095\t0.0171\t0.014\t0.0573\t0.9951\t0.2252\t0.0877\t0.0324\t0.3007\n+0.1131\t0.0785\t0.0121\t0.0212\t0.0153\t0.0587\t0.9946\t0.2275\t0.0886\t0.0303\t0.3019\n+0.1122\t0.0777\t0.0109\t0.0218\t0.0127\t0.0596\t0.9941\t0.2355\t0.0893\t0.0283\t0.3032\n+0.1072\t0.0748\t0.0119\t0.023\t0.0139\t0.0585\t0.9989\t0.241\t0.091\t0.0281\t0.3086\n+0.1028\t0.0746\t0.0094\t0.0226\t0.0179\t0.06\t1.0018\t0.2489\t0.0894\t0.028\t0.3093\n********\n*SNIP *\n********\n+0.0025\t-0.002\t0.0026\t0.0064\t0.0047\t-0.0078\t0.9926\t1.003\t0.0153\t-0.0054\t0.9198\n+-0.0023\t-0.0027\t0.0013\t0.0059\t0.0014\t-0.0077\t0.9938\t1.0012\t0.0143\t-0.0046\t0.9246\n+0.0004\t-0.0045\t0.0011\t0.0046\t0.0035\t-0.0082\t0.9927\t1.0007\t0.0133\t-0.0049\t0.9222\n+-0.0006\t-0.0044\t0.001\t0.0071\t0.0049\t-0.0112\t0.9953\t1.0034\t0.0123\t-0.0061\t0.9246\n+-0.0025\t-0.0051\t-0.0003\t0.0076\t0.003\t-0.0067\t0.9932\t1.0029\t0.014\t-0.0055\t0.9267\n+-0.0038\t-0.0068\t0.0007\t0.0066\t-0.0003\t-0.0066\t0.9921\t1.0051\t0.013\t-0.0046\t0.9243\n+-0.0023\t-0.0119\t0.0046\t0.0063\t0.0037\t-0.0059\t0.9913\t1.004\t0.0146\t-0.0022\t0.9326\n+-0.0034\t-0.0117\t0.002\t0.0028\t0.003\t-0.0026\t0.9923\t1.0021\t0.0158\t-0.0021\t0.9364\n+-0.0047\t-0.0134\t0.0031\t0.0018\t0.0046\t-0.0006\t0.9908\t0.9996\t0.0136\t-0.0015\t0.9376\n+-0.0035\t-0.0163\t0.0017\t0.0016\t0.0035\t-0.0008\t0.9938\t0.9976\t0.013\t0.0009\t0.9446\n+-0.002\t-0.0149\t-0.0009\t0.0021\t0.0013\t-0.0018\t0.9938\t0.9941\t0.015\t-0.0055\t0.9497\n+-0.0036\t-0.0151\t0.0024\t-0.0013\t0.0012\t0.0004\t0.9976\t0.9917\t0.0123\t-0.0032\t0.9441\n+-0.0032\t-0.0116\t0.001\t0.0008\t-0.0024\t0.0006\t1.001\t0.9934\t0.0108\t-0.0065\t0.9492\n+-0.0023\t-0.0083\t0.0027\t0.0005\t0.0006\t-0.0014\t1.0014\t0.9927\t0.0136\t-0.0067\t0.94\n+-0.001\t-0.006\t0.0022\t0.0034\t-0.0011\t-0.0018\t0.9997\t0.9933\t0.0132\t-0.0049\t0.9404\n+-0.0024\t-0.0073\t-0.0011\t0.0036\t-0.0024\t-0.0008\t0.9975\t0.9958\t0.0165\t-0.0064\t0.9398\n+0.0007\t-0.0051\t0.0008\t0.0036\t-0.003\t-0.0012\t1.0006\t0.9932\t0.0161\t-0.0076\t0.9372\n+-0.0008\t-0.0076\t0.0025\t0.0028\t-0.0048\t-0.0003\t1.0016\t0.992\t0.015\t-0.0095\t0.9325\n+-0.0029\t-0.0045\t0.0027\t0.0051\t-0.0046\t-0.0039\t0.9989\t0.9913\t0.0177\t-0.0087\t0.9232\n+0.0002\t-0.002\t0.0061\t0.0048\t-0.0043\t-0.0016\t0.9989\t0.9911\t0.0152\t-0.0072\t0.916\n+-0.001\t-0.002\t0.0015\t0.0029\t-0.0055\t-0.0004\t0.999\t0.9915\t0.0107\t-0.0076\t0.9119\n+0.0028\t-0.003\t0.0009\t0.0049\t-0.0073\t0.002\t1.0\t0.9946\t0.0127\t-0.0082\t0.9095\n+0.003\t-0.0035\t0.0008\t0.0052\t-0.0066\t1e-04\t1.0014\t0.9977\t0.0125\t-0.0046\t0.9069\n+0.0063\t-0.0023\t-0.0005\t0.0081\t-0.0046\t-0.0006\t0.9983\t0.997\t0.0109\t-0.003\t0.9118\n+0.0049\t0.0002\t-0.0013\t0.0054\t-0.0036\t0.0009\t1.0011\t0.9967\t0.0066\t-0.0033\t0.9177\n",  "Output tabular_obs:  different than expected, difference (using diff):\n( /tmp/tmpkhd1jtwgexport.krumsiek11.obs.tabular v. /tmp/tmpnl1040m0export.krumsiek11.obs.tabular )\n--- local_file\n+++ history_data\n@@ -1,4 +1,4 @@\n-\tcell_type\n+index\tcell_type\n 0\tprogenitor\n 1\tprogenitor\n 2\tprogenitor\n@@ -499,3 +499,143 @@\n 17\tprogenitor\n 18\tprogenitor\n 19\tprogenitor\n+20\tprogenitor\n+21\tprogenitor\n+22\tprogenitor\n+23\tprogenitor\n+24\tprogenitor\n+25\tprogenitor\n+26\tprogenitor\n+27\tprogenitor\n+28\tprogenitor\n+29\tprogenitor\n+30\tprogenitor\n+31\tprogenitor\n+32\tprogenitor\n********\n*SNIP *\n********\n+135\tNeu\n+136\tNeu\n+137\tNeu\n+138\tNeu\n+139\tNeu\n+140\tNeu\n+141\tNeu\n+142\tNeu\n+143\tNeu\n+144\tNeu\n+145\tNeu\n+146\tNeu\n+147\tNeu\n+148\tNeu\n+149\tNeu\n+150\tNeu\n+151\tNeu\n+152\tNeu\n+153\tNeu\n+154\tNeu\n+155\tNeu\n+156\tNeu\n+157\tNeu\n+158\tNeu\n+159\tNeu\n",  "Output tabular_obsm:  different than expected, difference (using diff):\n( /tmp/tmp4dwbdxokexport.krumsiek11.obsm.tabular v. /tmp/tmpqad65zmxexport.krumsiek11.obsm.tabular )\n--- local_file\n+++ history_data\n@@ -499,3 +499,143 @@\n \n \n \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n********\n*SNIP *\n********\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",  "Output tabular_var:  different than expected, difference (using diff):\n( /tmp/tmp7vdogma6export.krumsiek11.var.tabular v. /tmp/tmpzytf1fzhexport.krumsiek11.var.tabular )\n--- local_file\n+++ history_data\n@@ -1,4 +1,4 @@\n-\"\"\n+index\n Gata2\n Gata1\n Fog1\n" ], "status": "failure", "test_index": 1, "time_seconds": 32.16977667808533, "tool_id": "anndata_export", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/f/9/0/dataset_f90018bc-9096-4cc2-8c83-3cb7939f6907.dat')adata.write_csvs('.', sep="\t", skip_data = False)    
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.writing .csv files to .
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_export (Test #2)" name="1" time="34.485002517700195">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "hd5_format|filetype": "anndata",  "hd5_format|input": {   "id": "34965d5baf0551fc",   "src": "hda"  },  "hd5_format|output_format": "tabular" }, "job": {  "command_line": "cat \u0027/galaxy/server/database/jobs_directory/000/330/configs/tmp1c2koj7y\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/330/configs/tmp1c2koj7y\u0027",  "command_version": "anndata version: 0.7.5\n\nloompy version: 2.0.17",  "copied_from_job_id": null,  "create_time": "2025-01-10T07:26:19.614585",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-868ms",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "49f40f3812f902e2",  "inputs": {   "hd5_format|input": {    "id": "34965d5baf0551fc",    "src": "hda",    "uuid": "4d4a89ba-9365-453b-b75e-66201d3fd89a"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736493982.0000000",    "title": "Job End Time",    "value": "2025-01-10 07:26:22"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736493981.0000000",    "title": "Job Start Time",    "value": "2025-01-10 07:26:21"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "16320.0000000",    "title": "Memory Allocated (MB)",    "value": "16320"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Cores Allocated",    "value": "4"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "tabular_obs": {    "id": "1b080c51566cb263",    "src": "hda",    "uuid": "d616307a-e3b8-4b2f-b129-f3ba46712f47"   },   "tabular_obsm": {    "id": "7079a25aa663d92d",    "src": "hda",    "uuid": "13aca90c-c527-4fe6-b35c-676400c49e6d"   },   "tabular_var": {    "id": "f31742f638f18af0",    "src": "hda",    "uuid": "813c9ce4-e27c-4a0b-ad13-69a5da4a2441"   },   "tabular_varm": {    "id": "971405d778a8cc90",    "src": "hda",    "uuid": "b30d9427-fb39-4699-9f39-c4d974015b6b"   },   "tabular_x": {    "id": "aab53a241f84a6d6",    "src": "hda",    "uuid": "7c1a9d59-7da5-427a-947d-3ddac5352fb1"   }  },  "params": {   "__input_ext": "\"h5ad\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "hd5_format": "{\"__current_case__\": 0, \"filetype\": \"anndata\", \"input\": {\"values\": [{\"id\": 379, \"src\": \"hda\"}]}, \"output_format\": \"tabular\"}"  },  "state": "ok",  "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nwriting .csv files to .\n",  "stdout": "\n\nimport anndata as ad\n    \n    \nadata = ad.read(\u0027/galaxy/server/database/objects/4/d/4/dataset_4d4a89ba-9365-453b-b75e-66201d3fd89a.dat\u0027)\nadata.write_csvs(\u0027.\u0027, sep=\"\\t\", skip_data = False)\n    ",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_export/anndata_export/0.7.5+galaxy1",  "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nwriting .csv files to .\n",  "tool_stdout": "\n\nimport anndata as ad\n    \n    \nadata = ad.read(\u0027/galaxy/server/database/objects/4/d/4/dataset_4d4a89ba-9365-453b-b75e-66201d3fd89a.dat\u0027)\nadata.write_csvs(\u0027.\u0027, sep=\"\\t\", skip_data = False)\n    ",  "update_time": "2025-01-10T07:26:33.354717",  "user_email": "tests@fake.org" }, "output_problems": [  "Output tabular_x:  different than expected, difference (using diff):\n( /tmp/tmp0838_4zvexport.krumsiek11.X.tabular v. /tmp/tmp_ctyt44wexport.krumsiek11.X.tabular )\n--- local_file\n+++ history_data\n@@ -498,3 +498,143 @@\n 0.1857\t0.0587\t-0.0003\t0.0087\t0.0084\t0.0221\t0.9613\t0.2272\t0.1058\t0.0298\t0.276\n 0.177\t0.0645\t0.0011\t0.009\t0.006\t0.0222\t0.9653\t0.2208\t0.1063\t0.0291\t0.2785\n 0.1664\t0.0673\t0.002\t0.0078\t0.0094\t0.0278\t0.9689\t0.2125\t0.1041\t0.0294\t0.2794\n+0.159\t0.0738\t0.0015\t0.0092\t0.0068\t0.0289\t0.97\t0.2054\t0.1042\t0.0299\t0.2807\n+0.1509\t0.0722\t0.002\t0.0078\t0.0038\t0.0353\t0.9718\t0.2007\t0.0995\t0.0284\t0.2862\n+0.1492\t0.0714\t0.0025\t0.014\t0.0066\t0.0381\t0.972\t0.1993\t0.0989\t0.0286\t0.2911\n+0.1445\t0.0706\t0.0049\t0.0148\t0.0107\t0.0411\t0.9767\t0.1999\t0.0957\t0.0306\t0.293\n+0.1402\t0.073\t0.0063\t0.0143\t0.0122\t0.0407\t0.9761\t0.2024\t0.0999\t0.0315\t0.2912\n+0.1389\t0.0725\t0.0069\t0.0163\t0.014\t0.0406\t0.9781\t0.206\t0.0972\t0.0301\t0.2917\n+0.1364\t0.0761\t0.0068\t0.013\t0.0147\t0.0441\t0.975\t0.2033\t0.0948\t0.0285\t0.2932\n+0.1363\t0.0786\t0.0082\t0.0151\t0.0153\t0.0463\t0.9812\t0.2048\t0.0921\t0.0291\t0.2963\n+0.1339\t0.0796\t0.0069\t0.0145\t0.0171\t0.0539\t0.984\t0.2069\t0.0884\t0.031\t0.2958\n+0.1305\t0.0847\t0.0085\t0.0156\t0.015\t0.0565\t0.9853\t0.2108\t0.0883\t0.0348\t0.2913\n+0.1276\t0.0846\t0.0087\t0.0156\t0.0124\t0.0569\t0.9906\t0.2103\t0.0888\t0.0282\t0.2906\n+0.1238\t0.0827\t0.008\t0.0176\t0.0158\t0.0603\t0.9893\t0.213\t0.0886\t0.0267\t0.2899\n+0.121\t0.077\t0.01\t0.0174\t0.0171\t0.0605\t0.9918\t0.2194\t0.0885\t0.029\t0.2966\n+0.1187\t0.0773\t0.0107\t0.0185\t0.0164\t0.0598\t0.9913\t0.2219\t0.0878\t0.0299\t0.2996\n+0.1158\t0.0758\t0.0095\t0.0171\t0.014\t0.0573\t0.9951\t0.2252\t0.0877\t0.0324\t0.3007\n+0.1131\t0.0785\t0.0121\t0.0212\t0.0153\t0.0587\t0.9946\t0.2275\t0.0886\t0.0303\t0.3019\n+0.1122\t0.0777\t0.0109\t0.0218\t0.0127\t0.0596\t0.9941\t0.2355\t0.0893\t0.0283\t0.3032\n+0.1072\t0.0748\t0.0119\t0.023\t0.0139\t0.0585\t0.9989\t0.241\t0.091\t0.0281\t0.3086\n+0.1028\t0.0746\t0.0094\t0.0226\t0.0179\t0.06\t1.0018\t0.2489\t0.0894\t0.028\t0.3093\n********\n*SNIP *\n********\n+0.0025\t-0.002\t0.0026\t0.0064\t0.0047\t-0.0078\t0.9926\t1.003\t0.0153\t-0.0054\t0.9198\n+-0.0023\t-0.0027\t0.0013\t0.0059\t0.0014\t-0.0077\t0.9938\t1.0012\t0.0143\t-0.0046\t0.9246\n+0.0004\t-0.0045\t0.0011\t0.0046\t0.0035\t-0.0082\t0.9927\t1.0007\t0.0133\t-0.0049\t0.9222\n+-0.0006\t-0.0044\t0.001\t0.0071\t0.0049\t-0.0112\t0.9953\t1.0034\t0.0123\t-0.0061\t0.9246\n+-0.0025\t-0.0051\t-0.0003\t0.0076\t0.003\t-0.0067\t0.9932\t1.0029\t0.014\t-0.0055\t0.9267\n+-0.0038\t-0.0068\t0.0007\t0.0066\t-0.0003\t-0.0066\t0.9921\t1.0051\t0.013\t-0.0046\t0.9243\n+-0.0023\t-0.0119\t0.0046\t0.0063\t0.0037\t-0.0059\t0.9913\t1.004\t0.0146\t-0.0022\t0.9326\n+-0.0034\t-0.0117\t0.002\t0.0028\t0.003\t-0.0026\t0.9923\t1.0021\t0.0158\t-0.0021\t0.9364\n+-0.0047\t-0.0134\t0.0031\t0.0018\t0.0046\t-0.0006\t0.9908\t0.9996\t0.0136\t-0.0015\t0.9376\n+-0.0035\t-0.0163\t0.0017\t0.0016\t0.0035\t-0.0008\t0.9938\t0.9976\t0.013\t0.0009\t0.9446\n+-0.002\t-0.0149\t-0.0009\t0.0021\t0.0013\t-0.0018\t0.9938\t0.9941\t0.015\t-0.0055\t0.9497\n+-0.0036\t-0.0151\t0.0024\t-0.0013\t0.0012\t0.0004\t0.9976\t0.9917\t0.0123\t-0.0032\t0.9441\n+-0.0032\t-0.0116\t0.001\t0.0008\t-0.0024\t0.0006\t1.001\t0.9934\t0.0108\t-0.0065\t0.9492\n+-0.0023\t-0.0083\t0.0027\t0.0005\t0.0006\t-0.0014\t1.0014\t0.9927\t0.0136\t-0.0067\t0.94\n+-0.001\t-0.006\t0.0022\t0.0034\t-0.0011\t-0.0018\t0.9997\t0.9933\t0.0132\t-0.0049\t0.9404\n+-0.0024\t-0.0073\t-0.0011\t0.0036\t-0.0024\t-0.0008\t0.9975\t0.9958\t0.0165\t-0.0064\t0.9398\n+0.0007\t-0.0051\t0.0008\t0.0036\t-0.003\t-0.0012\t1.0006\t0.9932\t0.0161\t-0.0076\t0.9372\n+-0.0008\t-0.0076\t0.0025\t0.0028\t-0.0048\t-0.0003\t1.0016\t0.992\t0.015\t-0.0095\t0.9325\n+-0.0029\t-0.0045\t0.0027\t0.0051\t-0.0046\t-0.0039\t0.9989\t0.9913\t0.0177\t-0.0087\t0.9232\n+0.0002\t-0.002\t0.0061\t0.0048\t-0.0043\t-0.0016\t0.9989\t0.9911\t0.0152\t-0.0072\t0.916\n+-0.001\t-0.002\t0.0015\t0.0029\t-0.0055\t-0.0004\t0.999\t0.9915\t0.0107\t-0.0076\t0.9119\n+0.0028\t-0.003\t0.0009\t0.0049\t-0.0073\t0.002\t1.0\t0.9946\t0.0127\t-0.0082\t0.9095\n+0.003\t-0.0035\t0.0008\t0.0052\t-0.0066\t1e-04\t1.0014\t0.9977\t0.0125\t-0.0046\t0.9069\n+0.0063\t-0.0023\t-0.0005\t0.0081\t-0.0046\t-0.0006\t0.9983\t0.997\t0.0109\t-0.003\t0.9118\n+0.0049\t0.0002\t-0.0013\t0.0054\t-0.0036\t0.0009\t1.0011\t0.9967\t0.0066\t-0.0033\t0.9177\n",  "Output tabular_obs:  different than expected, difference (using diff):\n( /tmp/tmpy7x_5kagexport.krumsiek11.obs.tabular v. /tmp/tmptbp7vh68export.krumsiek11.obs.tabular )\n--- local_file\n+++ history_data\n@@ -1,4 +1,4 @@\n-\tcell_type\n+index\tcell_type\n 0\tprogenitor\n 1\tprogenitor\n 2\tprogenitor\n@@ -499,3 +499,143 @@\n 17\tprogenitor\n 18\tprogenitor\n 19\tprogenitor\n+20\tprogenitor\n+21\tprogenitor\n+22\tprogenitor\n+23\tprogenitor\n+24\tprogenitor\n+25\tprogenitor\n+26\tprogenitor\n+27\tprogenitor\n+28\tprogenitor\n+29\tprogenitor\n+30\tprogenitor\n+31\tprogenitor\n+32\tprogenitor\n********\n*SNIP *\n********\n+135\tNeu\n+136\tNeu\n+137\tNeu\n+138\tNeu\n+139\tNeu\n+140\tNeu\n+141\tNeu\n+142\tNeu\n+143\tNeu\n+144\tNeu\n+145\tNeu\n+146\tNeu\n+147\tNeu\n+148\tNeu\n+149\tNeu\n+150\tNeu\n+151\tNeu\n+152\tNeu\n+153\tNeu\n+154\tNeu\n+155\tNeu\n+156\tNeu\n+157\tNeu\n+158\tNeu\n+159\tNeu\n",  "Output tabular_obsm:  different than expected, difference (using diff):\n( /tmp/tmplumom6i_export.krumsiek11.obsm.tabular v. /tmp/tmpgpfbj85vexport.krumsiek11.obsm.tabular )\n--- local_file\n+++ history_data\n@@ -499,3 +499,143 @@\n \n \n \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n********\n*SNIP *\n********\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n",  "Output tabular_var:  different than expected, difference (using diff):\n( /tmp/tmpqsvszf7mexport.krumsiek11.var.tabular v. /tmp/tmpxwsvlxo9export.krumsiek11.var.tabular )\n--- local_file\n+++ history_data\n@@ -1,4 +1,4 @@\n-\"\"\n+index\n Gata2\n Gata1\n Fog1\n" ], "status": "failure", "test_index": 1, "time_seconds": 34.485002517700195, "tool_id": "anndata_export", "tool_version": "0.7.5+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            import anndata as ad        adata = ad.read('/galaxy/server/database/objects/4/d/4/dataset_4d4a89ba-9365-453b-b75e-66201d3fd89a.dat')adata.write_csvs('.', sep="\t", skip_data = False)    
            ]]></system-out>
            <system-err><![CDATA[
            Observation names are not unique. To make them unique, call `.obs_names_make_unique`.writing .csv files to .
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_export (Test #3)" name="2" time="34.27855038642883">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="anndata_export (Test #3)" name="2" time="32.28149056434631">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bam_to_sam (Test #1)" name="0" time="34.703754901885986">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bam_to_sam (Test #2)" name="1" time="32.30425477027893">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bam_to_sam (Test #3)" name="2" time="34.11739921569824">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_convert_to_vcf (Test #1)" name="0" time="38.75405931472778">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Number of processed rows: 32
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_convert_to_vcf (Test #2)" name="1" time="33.31263732910156">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Number of processed rows: 35
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_convert_to_vcf (Test #3)" name="2" time="36.741331577301025">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Number of processed rows: 35
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_convert_to_vcf (Test #4)" name="3" time="33.51638722419739">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_convert_to_vcf (Test #5)" name="4" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 4, "tool_id": "bcftools_convert_to_vcf", "tool_version": "1.15.1+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="bcftools_convert_to_vcf (Test #6)" name="5" time="33.43176078796387">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            Rows total: 27Rows skipped: 0Missing GTs: 1Hom RR: 14Het RA: 7Hom AA: 5Het AA: 0
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_convert_to_vcf (Test #7)" name="6" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 6, "tool_id": "bcftools_convert_to_vcf", "tool_version": "1.15.1+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="bcftools_plugin_fill_an_ac (Test #1)" name="0" time="37.02787733078003">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="collection_column_join (Test #1)" name="0" time="71.59122800827026">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="collection_column_join (Test #1)" name="0" time="34.43800687789917">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="collection_column_join (Test #2)" name="1" time="24.768266439437866">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 1, "time_seconds": 24.768266439437866, "tool_id": "collection_column_join", "tool_version": "0.0.3"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="collection_column_join (Test #2)" name="1" time="34.33785009384155">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="collection_column_join (Test #3)" name="2" time="35.46575617790222">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="collection_column_join (Test #3)" name="2" time="35.63354682922363">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="collection_column_join (Test #4)" name="3" time="34.969690799713135">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="collection_column_join (Test #4)" name="3" time="33.74836230278015">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deeptools_plot_coverage (Test #1)" name="0" time="47.94420838356018">
        
            
            <system-out><![CDATA[
            samplemeanstdmin25%50%75%maxbowtie2 test1.bam0.504.1000.00.00.035bowtie2 test1.bam0.504.1000.00.00.035
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deeptools_plot_coverage (Test #2)" name="1" time="33.05977988243103">
        
            
            <system-out><![CDATA[
            samplemeanstdmin25%50%75%maxbowtie2 test1.bam0.504.1000.00.00.035bowtie2 test1.bam0.504.1000.00.00.035
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flye (Test #1)" name="0" time="27.962851524353027">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 0, "time_seconds": 27.962851524353027, "tool_id": "flye", "tool_version": "2.9.5+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="flye (Test #2)" name="1" time="104.73370122909546">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [2025-01-10 06:46:52] INFO: Starting Flye 2.9.5-b1801[2025-01-10 06:46:52] INFO: >>>STAGE: configure[2025-01-10 06:46:52] INFO: Configuring run[2025-01-10 06:46:52] INFO: Total read length: 1466260[2025-01-10 06:46:52] INFO: Reads N50/N90: 9054 / 4697[2025-01-10 06:46:52] INFO: Minimum overlap set to 5000[2025-01-10 06:46:52] INFO: >>>STAGE: assembly[2025-01-10 06:46:52] INFO: Assembling disjointigs[2025-01-10 06:46:52] INFO: Reading sequences[2025-01-10 06:46:56] INFO: Counting k-mers:0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:47:48] INFO: Filling index table (1/2)0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:47:48] INFO: Filling index table (2/2)0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:47:52] INFO: Extending reads[2025-01-10 06:47:55] INFO: Overlap-based coverage: 42[2025-01-10 06:47:55] INFO: Median overlap divergence: 0.1056170% 90% 100% [2025-01-10 06:47:55] INFO: Assembled 1 disjointigs[2025-01-10 06:47:55] INFO: Generating sequence0% 10% 20% 30% 40% % 50% 60% 70% 80% 90% 100% [2025-01-10 06:47:55] INFO: Filtering contained disjointigs0% 100% [2025-01-10 06:47:55] INFO: Contained seqs: 0[2025-01-10 06:47:55] INFO: >>>STAGE: consensus[2025-01-10 06:47:55] INFO: Running Minimap2[2025-01-10 06:47:55] INFO: Computing consensus[2025-01-10 06:47:56] INFO: Alignment error rate: 0.175120Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/107/tmp/pymp-g1lrph4v'[2025-01-10 06:47:56] INFO: >>>STAGE: repeat[2025-01-10 06:47:56] INFO: Building and resolving repeat graph[2025-01-10 06:47:56] INFO: Parsing disjointigs[2025-01-10 06:47:56] INFO: Building repeat graph0% 100% [2025-01-10 06:47:56] INFO: Median overlap divergence: 0.0151003[2025-01-10 06:47:56] INFO: Parsing reads[2025-01-10 06:47:56] INFO: Aligning reads to the graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:47:57] INFO: Aligned read sequence: 1166207 / 1313105 (0.888129)[2025-01-10 06:47:57] INFO: Median overlap divergence: 0.0550349[2025-01-10 06:47:57] INFO: Mean edge coverage: 33[2025-01-10 06:47:57] INFO: Simplifying the graph[2025-01-10 06:47:57] INFO: >>>STAGE: contigger[2025-01-10 06:47:57] INFO: Generating contigs[2025-01-10 06:47:57] INFO: Reading sequences[2025-01-10 06:47:57] INFO: Generated 3 contigs[2025-01-10 06:47:57] INFO: Added 0 scaffold connections[2025-01-10 06:47:57] INFO: >>>STAGE: finalize[2025-01-10 06:47:57] INFO: Assembly statistics:Total length:34929Fragments:3Fragments N50:21816Largest frg:21816Scaffolds:0Mean coverage:34[2025-01-10 06:47:57] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/107/working/out_dir/assembly.fasta
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flye (Test #3)" name="2" time="42.45337653160095">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 2, "time_seconds": 42.45337653160095, "tool_id": "flye", "tool_version": "2.9.5+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="flye (Test #4)" name="3" time="26.76030921936035">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 3, "time_seconds": 26.76030921936035, "tool_id": "flye", "tool_version": "2.9.5+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="flye (Test #5)" name="4" time="74.2985270023346">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [2025-01-10 06:50:10] INFO: Starting Flye 2.9.5-b1801[2025-01-10 06:50:10] INFO: >>>STAGE: configure[2025-01-10 06:50:10] INFO: Configuring run[2025-01-10 06:50:10] INFO: Total read length: 6522170[2025-01-10 06:50:10] INFO: Reads N50/N90: 2706 / 1386[2025-01-10 06:50:10] INFO: Selected minimum overlap: 1000[2025-01-10 06:50:10] INFO: >>>STAGE: assembly[2025-01-10 06:50:10] INFO: Assembling disjointigs[2025-01-10 06:50:10] INFO: Reading sequences[2025-01-10 06:50:10] INFO: Building minimizer index[2025-01-10 06:50:10] INFO: Pre-calculating index storage0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:50:10] INFO: Filling index0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:50:10] INFO: Extending reads[2025-01-10 06:50:13] INFO: Overlap-based coverage: 12[2025-01-10 06:50:13] INFO: Median overlap divergence: 0.01356740% 20% 30% 40% 70% 80% 90% 100% [2025-01-10 06:50:13] INFO: Assembled 11 disjointigs[2025-01-10 06:50:13] INFO: Generating sequence0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:50:13] INFO: Filtering contained disjointigs0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:50:13] INFO: Contained seqs: 0[2025-01-10 06:50:13] INFO: >>>STAGE: consensus[2025-01-10 06:50:13] INFO: Running Minimap2[2025-01-10 06:50:14] INFO: Computing consensus[2025-01-10 06:50:15] INFO: Alignment error rate: 0.018088Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/133/tmp/pymp-8_52b_ur'[2025-01-10 06:50:15] INFO: >>>STAGE: repeat[2025-01-10 06:50:15] INFO: Building and resolving repeat graph[2025-01-10 06:50:15] INFO: Parsing disjointigs[2025-01-10 06:50:15] INFO: Building repeat graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:50:15] INFO: Median overlap divergence: 0.000980392[2025-01-10 06:50:15] INFO: Parsing reads[2025-01-10 06:50:15] INFO: Aligning reads to the graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:50:16] INFO: Aligned read sequence: 6399959 / 6522170 (0.981262)[2025-01-10 06:50:16] INFO: Median overlap divergence: 0.00689656[2025-01-10 06:50:16] INFO: Mean edge coverage: 14[2025-01-10 06:50:16] INFO: Simplifying the graph[2025-01-10 06:50:16] INFO: >>>STAGE: contigger[2025-01-10 06:50:16] INFO: Generating contigs[2025-01-10 06:50:16] INFO: Reading sequences[2025-01-10 06:50:16] INFO: Generated 4 contigs[2025-01-10 06:50:16] INFO: Added 0 scaffold connections[2025-01-10 06:50:16] INFO: >>>STAGE: polishing[2025-01-10 06:50:16] INFO: Polishing genome (1/1)[2025-01-10 06:50:16] INFO: Running minimap2[2025-01-10 06:50:17] INFO: Separating alignment into bubblesTraceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/133/tmp/pymp-baydop_v'[2025-01-10 06:50:18] INFO: Alignment error rate: 0.009622[2025-01-10 06:50:18] INFO: Correcting bubbles0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/133/tmp/pymp-uluaawrl'[2025-01-10 06:50:20] INFO: >>>STAGE: finalize[2025-01-10 06:50:20] INFO: Assembly statistics:Total length:419248Fragments:4Fragments N50:147964Largest frg:150254Scaffolds:0Mean coverage:16[2025-01-10 06:50:20] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/133/working/out_dir/assembly.fasta
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flye (Test #6)" name="5" time="25.81479501724243">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 5, "time_seconds": 25.81479501724243, "tool_id": "flye", "tool_version": "2.9.5+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="flye (Test #7)" name="6" time="108.0852882862091">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "inputs": [   {    "id": "26a38ef9bb93c990",    "src": "hda"   },   {    "id": "d918214656d94c24",    "src": "hda"   },   {    "id": "b7367256e19bc348",    "src": "hda"   },   {    "id": "69bad5858363598b",    "src": "hda"   },   {    "id": "b5e57f398cd250a3",    "src": "hda"   },   {    "id": "d4dc7cad56e9c9b1",    "src": "hda"   },   {    "id": "a78d47f8fc9505a3",    "src": "hda"   },   {    "id": "d5ad5716ca208748",    "src": "hda"   },   {    "id": "1430b47e5fac7f74",    "src": "hda"   }  ],  "min_overlap": "1000",  "mode_conditional|mode": "--pacbio-corr" }, "job": {  "command_line": "ln -sf \u0027/galaxy/server/database/objects/f/4/a/dataset_f4a6f5eb-7af4-4d80-ae1c-94914ee3a1d2.dat\u0027 ./input_0.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/e/b/f/dataset_ebf73560-ca42-47a6-b003-645374345bef.dat\u0027 ./input_1.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/c/c/5/dataset_cc561912-8e5a-4549-bc75-686df0955d03.dat\u0027 ./input_2.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/1/7/7/dataset_17766399-796c-48e1-9b63-4c44b1da72d6.dat\u0027 ./input_3.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/4/d/d/dataset_4ddd4c5c-d5cc-4776-b577-370e91896936.dat\u0027 ./input_4.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/2/d/1/dataset_2d1ec592-b296-48f7-8fde-2d1a24210f79.dat\u0027 ./input_5.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/e/6/e/dataset_e6e64cb7-1c28-49bf-bdb2-806c78fd40e3.dat\u0027 ./input_6.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/7/b/6/dataset_7b688f87-387c-4718-a51a-5de679838626.dat\u0027 ./input_7.fastq.gz \u0026\u0026 ln -sf \u0027/galaxy/server/database/objects/1/8/8/dataset_188f8b9b-cbfc-403a-8467-d496c647649c.dat\u0027 ./input_8.fastq.gz \u0026\u0026 flye --pacbio-corr ./input_0.fastq.gz ./input_1.fastq.gz ./input_2.fastq.gz ./input_3.fastq.gz ./input_4.fastq.gz ./input_5.fastq.gz ./input_6.fastq.gz ./input_7.fastq.gz ./input_8.fastq.gz -o out_dir -t ${GALAXY_SLOTS:-4} -i 1 -m 1000",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-10T06:51:55.207512",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-nw9zf",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "ba65e23d6529ded9",  "inputs": {   "inputs": {    "id": "26a38ef9bb93c990",    "src": "hda",    "uuid": "f4a6f5eb-7af4-4d80-ae1c-94914ee3a1d2"   },   "inputs1": {    "id": "26a38ef9bb93c990",    "src": "hda",    "uuid": "f4a6f5eb-7af4-4d80-ae1c-94914ee3a1d2"   },   "inputs2": {    "id": "d918214656d94c24",    "src": "hda",    "uuid": "ebf73560-ca42-47a6-b003-645374345bef"   },   "inputs3": {    "id": "b7367256e19bc348",    "src": "hda",    "uuid": "cc561912-8e5a-4549-bc75-686df0955d03"   },   "inputs4": {    "id": "69bad5858363598b",    "src": "hda",    "uuid": "17766399-796c-48e1-9b63-4c44b1da72d6"   },   "inputs5": {    "id": "b5e57f398cd250a3",    "src": "hda",    "uuid": "4ddd4c5c-d5cc-4776-b577-370e91896936"   },   "inputs6": {    "id": "d4dc7cad56e9c9b1",    "src": "hda",    "uuid": "2d1ec592-b296-48f7-8fde-2d1a24210f79"   },   "inputs7": {    "id": "a78d47f8fc9505a3",    "src": "hda",    "uuid": "e6e64cb7-1c28-49bf-bdb2-806c78fd40e3"   },   "inputs8": {    "id": "d5ad5716ca208748",    "src": "hda",    "uuid": "7b688f87-387c-4718-a51a-5de679838626"   },   "inputs9": {    "id": "1430b47e5fac7f74",    "src": "hda",    "uuid": "188f8b9b-cbfc-403a-8467-d496c647649c"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "assembly_gfa": {    "id": "d0b488f723a6502d",    "src": "hda",    "uuid": "63f2a92e-1b31-438a-95bc-32e5a0641571"   },   "assembly_graph": {    "id": "790bf164a8b816eb",    "src": "hda",    "uuid": "f38b4afe-92c6-4341-bc70-69f4d0021b03"   },   "assembly_info": {    "id": "a88951ef290d104d",    "src": "hda",    "uuid": "26bc505f-db91-4bb0-96ab-0cc2ba01f2c7"   },   "consensus": {    "id": "9478f986ea039f14",    "src": "hda",    "uuid": "767d6112-6d75-4f73-9683-44e10320399d"   }  },  "params": {   "__input_ext": "\"input\"",   "asm": "{\"__current_case__\": 1, \"asm_select\": \"false\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "generate_log": "false",   "iterations": "\"1\"",   "keep_haplotypes": "false",   "meta": "false",   "min_overlap": "\"1000\"",   "mode_conditional": "{\"__current_case__\": 4, \"mode\": \"--pacbio-corr\"}",   "no_alt_contigs": "false",   "scaffold": "false"  },  "state": "error",  "stderr": "[2025-01-10 06:51:57] INFO: Starting Flye 2.9.5-b1801\n[2025-01-10 06:51:57] INFO: \u003e\u003e\u003eSTAGE: configure\n[2025-01-10 06:51:57] INFO: Configuring run\n[2025-01-10 06:51:57] INFO: Total read length: 6522170\n[2025-01-10 06:51:57] INFO: Reads N50/N90: 2706 / 1386\n[2025-01-10 06:51:57] INFO: Selected minimum overlap: 1000\n[2025-01-10 06:51:57] INFO: \u003e\u003e\u003eSTAGE: assembly\n[2025-01-10 06:51:57] INFO: Assembling disjointigs\n[2025-01-10 06:51:57] INFO: Reading sequences\n[2025-01-10 06:51:57] INFO: Building minimizer index\n[2025-01-10 06:51:57] INFO: Pre-calculating index storage\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:51:57] INFO: Filling index\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:51:58] INFO: Extending reads\n[2025-01-10 06:52:01] INFO: Overlap-based coverage: 12\n[2025-01-10 06:52:01] INFO: Median overlap divergence: 0.0135261\n0% 20% 30% 40% 60% 90% 100% \n[2025-01-10 06:52:01] INFO: Assembled 9 disjointigs\n[2025-01-10 06:52:01] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:52:01] INFO: Filtering contained disjointigs\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2025-01-10 06:52:01] INFO: Contained seqs: 0\n[2025-01-10 06:52:02] INFO: \u003e\u003e\u003eSTAGE: consensus\n[2025-01-10 06:52:02] INFO: Running Minimap2\n[2025-01-10 06:52:02] INFO: Computing consensus\n[2025-01-10 06:52:03] INFO: Alignment error rate: 0.018049\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-3alf6h9a\u0027\n[2025-01-10 06:52:03] INFO: \u003e\u003e\u003eSTAGE: repeat\n[2025-01-10 06:52:03] INFO: Building and resolving repeat graph\n[2025-01-10 06:52:03] INFO: Parsing disjointigs\n[2025-01-10 06:52:03] INFO: Building repeat graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2025-01-10 06:52:03] INFO: Median overlap divergence: 0.00255836\n[2025-01-10 06:52:03] INFO: Parsing reads\n[2025-01-10 06:52:03] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:52:04] INFO: Aligned read sequence: 6438572 / 6522170 (0.987182)\n[2025-01-10 06:52:04] INFO: Median overlap divergence: 0.00693965\n[2025-01-10 06:52:04] INFO: Mean edge coverage: 14\n[2025-01-10 06:52:04] INFO: Simplifying the graph\n[2025-01-10 06:52:04] INFO: \u003e\u003e\u003eSTAGE: contigger\n[2025-01-10 06:52:04] INFO: Generating contigs\n[2025-01-10 06:52:04] INFO: Reading sequences\n[2025-01-10 06:52:04] INFO: Generated 5 contigs\n[2025-01-10 06:52:04] INFO: Added 0 scaffold connections\n[2025-01-10 06:52:04] INFO: \u003e\u003e\u003eSTAGE: polishing\n[2025-01-10 06:52:04] INFO: Polishing genome (1/1)\n[2025-01-10 06:52:04] INFO: Running minimap2\n[2025-01-10 06:52:05] INFO: Separating alignment into bubbles\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-0lc_expp\u0027\n[2025-01-10 06:52:11] INFO: Alignment error rate: 0.010357\n[2025-01-10 06:52:11] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-adqq01g3\u0027\n[2025-01-10 06:52:43] INFO: \u003e\u003e\u003eSTAGE: finalize\n[2025-01-10 06:52:43] INFO: Assembly statistics:\n\n\tTotal length:\t418248\n\tFragments:\t5\n\tFragments N50:\t90298\n\tLargest frg:\t147964\n\tScaffolds:\t0\n\tMean coverage:\t16\n\n[2025-01-10 06:52:43] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/152/working/out_dir/assembly.fasta\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.5+galaxy0",  "tool_stderr": "[2025-01-10 06:51:57] INFO: Starting Flye 2.9.5-b1801\n[2025-01-10 06:51:57] INFO: \u003e\u003e\u003eSTAGE: configure\n[2025-01-10 06:51:57] INFO: Configuring run\n[2025-01-10 06:51:57] INFO: Total read length: 6522170\n[2025-01-10 06:51:57] INFO: Reads N50/N90: 2706 / 1386\n[2025-01-10 06:51:57] INFO: Selected minimum overlap: 1000\n[2025-01-10 06:51:57] INFO: \u003e\u003e\u003eSTAGE: assembly\n[2025-01-10 06:51:57] INFO: Assembling disjointigs\n[2025-01-10 06:51:57] INFO: Reading sequences\n[2025-01-10 06:51:57] INFO: Building minimizer index\n[2025-01-10 06:51:57] INFO: Pre-calculating index storage\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:51:57] INFO: Filling index\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:51:58] INFO: Extending reads\n[2025-01-10 06:52:01] INFO: Overlap-based coverage: 12\n[2025-01-10 06:52:01] INFO: Median overlap divergence: 0.0135261\n0% 20% 30% 40% 60% 90% 100% \n[2025-01-10 06:52:01] INFO: Assembled 9 disjointigs\n[2025-01-10 06:52:01] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:52:01] INFO: Filtering contained disjointigs\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2025-01-10 06:52:01] INFO: Contained seqs: 0\n[2025-01-10 06:52:02] INFO: \u003e\u003e\u003eSTAGE: consensus\n[2025-01-10 06:52:02] INFO: Running Minimap2\n[2025-01-10 06:52:02] INFO: Computing consensus\n[2025-01-10 06:52:03] INFO: Alignment error rate: 0.018049\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-3alf6h9a\u0027\n[2025-01-10 06:52:03] INFO: \u003e\u003e\u003eSTAGE: repeat\n[2025-01-10 06:52:03] INFO: Building and resolving repeat graph\n[2025-01-10 06:52:03] INFO: Parsing disjointigs\n[2025-01-10 06:52:03] INFO: Building repeat graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2025-01-10 06:52:03] INFO: Median overlap divergence: 0.00255836\n[2025-01-10 06:52:03] INFO: Parsing reads\n[2025-01-10 06:52:03] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:52:04] INFO: Aligned read sequence: 6438572 / 6522170 (0.987182)\n[2025-01-10 06:52:04] INFO: Median overlap divergence: 0.00693965\n[2025-01-10 06:52:04] INFO: Mean edge coverage: 14\n[2025-01-10 06:52:04] INFO: Simplifying the graph\n[2025-01-10 06:52:04] INFO: \u003e\u003e\u003eSTAGE: contigger\n[2025-01-10 06:52:04] INFO: Generating contigs\n[2025-01-10 06:52:04] INFO: Reading sequences\n[2025-01-10 06:52:04] INFO: Generated 5 contigs\n[2025-01-10 06:52:04] INFO: Added 0 scaffold connections\n[2025-01-10 06:52:04] INFO: \u003e\u003e\u003eSTAGE: polishing\n[2025-01-10 06:52:04] INFO: Polishing genome (1/1)\n[2025-01-10 06:52:04] INFO: Running minimap2\n[2025-01-10 06:52:05] INFO: Separating alignment into bubbles\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-0lc_expp\u0027\n[2025-01-10 06:52:11] INFO: Alignment error rate: 0.010357\n[2025-01-10 06:52:11] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-adqq01g3\u0027\n[2025-01-10 06:52:43] INFO: \u003e\u003e\u003eSTAGE: finalize\n[2025-01-10 06:52:43] INFO: Assembly statistics:\n\n\tTotal length:\t418248\n\tFragments:\t5\n\tFragments N50:\t90298\n\tLargest frg:\t147964\n\tScaffolds:\t0\n\tMean coverage:\t16\n\n[2025-01-10 06:52:43] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/152/working/out_dir/assembly.fasta\n",  "tool_stdout": "",  "update_time": "2025-01-10T06:52:46.097101",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.5+galaxy0, exit_code: None, stderr: [2025-01-10 06:51:57] INFO: Starting Flye 2.9.5-b1801\n[2025-01-10 06:51:57] INFO: \u003e\u003e\u003eSTAGE: configure\n[2025-01-10 06:51:57] INFO: Configuring run\n[2025-01-10 06:51:57] INFO: Total read length: 6522170\n[2025-01-10 06:51:57] INFO: Reads N50/N90: 2706 / 1386\n[2025-01-10 06:51:57] INFO: Selected minimum overlap: 1000\n[2025-01-10 06:51:57] INFO: \u003e\u003e\u003eSTAGE: assembly\n[2025-01-10 06:51:57] INFO: Assembling disjointigs\n[2025-01-10 06:51:57] INFO: Reading sequences\n[2025-01-10 06:51:57] INFO: Building minimizer index\n[2025-01-10 06:51:57] INFO: Pre-calculating index storage\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:51:57] INFO: Filling index\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:51:58] INFO: Extending reads\n[2025-01-10 06:52:01] INFO: Overlap-based coverage: 12\n[2025-01-10 06:52:01] INFO: Median overlap divergence: 0.0135261\n0% 20% 30% 40% 60% 90% 100% \n[2025-01-10 06:52:01] INFO: Assembled 9 disjointigs\n[2025-01-10 06:52:01] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:52:01] INFO: Filtering contained disjointigs\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2025-01-10 06:52:01] INFO: Contained seqs: 0\n[2025-01-10 06:52:02] INFO: \u003e\u003e\u003eSTAGE: consensus\n[2025-01-10 06:52:02] INFO: Running Minimap2\n[2025-01-10 06:52:02] INFO: Computing consensus\n[2025-01-10 06:52:03] INFO: Alignment error rate: 0.018049\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-3alf6h9a\u0027\n[2025-01-10 06:52:03] INFO: \u003e\u003e\u003eSTAGE: repeat\n[2025-01-10 06:52:03] INFO: Building and resolving repeat graph\n[2025-01-10 06:52:03] INFO: Parsing disjointigs\n[2025-01-10 06:52:03] INFO: Building repeat graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2025-01-10 06:52:03] INFO: Median overlap divergence: 0.00255836\n[2025-01-10 06:52:03] INFO: Parsing reads\n[2025-01-10 06:52:03] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:52:04] INFO: Aligned read sequence: 6438572 / 6522170 (0.987182)\n[2025-01-10 06:52:04] INFO: Median overlap divergence: 0.00693965\n[2025-01-10 06:52:04] INFO: Mean edge coverage: 14\n[2025-01-10 06:52:04] INFO: Simplifying the graph\n[2025-01-10 06:52:04] INFO: \u003e\u003e\u003eSTAGE: contigger\n[2025-01-10 06:52:04] INFO: Generating contigs\n[2025-01-10 06:52:04] INFO: Reading sequences\n[2025-01-10 06:52:04] INFO: Generated 5 contigs\n[2025-01-10 06:52:04] INFO: Added 0 scaffold connections\n[2025-01-10 06:52:04] INFO: \u003e\u003e\u003eSTAGE: polishing\n[2025-01-10 06:52:04] INFO: Polishing genome (1/1)\n[2025-01-10 06:52:04] INFO: Running minimap2\n[2025-01-10 06:52:05] INFO: Separating alignment into bubbles\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-0lc_expp\u0027\n[2025-01-10 06:52:11] INFO: Alignment error rate: 0.010357\n[2025-01-10 06:52:11] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-adqq01g3\u0027\n[2025-01-10 06:52:43] INFO: \u003e\u003e\u003eSTAGE: finalize\n[2025-01-10 06:52:43] INFO: Assembly statistics:\n\n\tTotal length:\t418248\n\tFragments:\t5\n\tFragments N50:\t90298\n\tLargest frg:\t147964\n\tScaffolds:\t0\n\tMean coverage:\t16\n\n[2025-01-10 06:52:43] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/152/working/out_dir/assembly.fasta\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.5+galaxy0, exit_code: None, stderr: [2025-01-10 06:51:57] INFO: Starting Flye 2.9.5-b1801\n[2025-01-10 06:51:57] INFO: \u003e\u003e\u003eSTAGE: configure\n[2025-01-10 06:51:57] INFO: Configuring run\n[2025-01-10 06:51:57] INFO: Total read length: 6522170\n[2025-01-10 06:51:57] INFO: Reads N50/N90: 2706 / 1386\n[2025-01-10 06:51:57] INFO: Selected minimum overlap: 1000\n[2025-01-10 06:51:57] INFO: \u003e\u003e\u003eSTAGE: assembly\n[2025-01-10 06:51:57] INFO: Assembling disjointigs\n[2025-01-10 06:51:57] INFO: Reading sequences\n[2025-01-10 06:51:57] INFO: Building minimizer index\n[2025-01-10 06:51:57] INFO: Pre-calculating index storage\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:51:57] INFO: Filling index\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:51:58] INFO: Extending reads\n[2025-01-10 06:52:01] INFO: Overlap-based coverage: 12\n[2025-01-10 06:52:01] INFO: Median overlap divergence: 0.0135261\n0% 20% 30% 40% 60% 90% 100% \n[2025-01-10 06:52:01] INFO: Assembled 9 disjointigs\n[2025-01-10 06:52:01] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:52:01] INFO: Filtering contained disjointigs\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2025-01-10 06:52:01] INFO: Contained seqs: 0\n[2025-01-10 06:52:02] INFO: \u003e\u003e\u003eSTAGE: consensus\n[2025-01-10 06:52:02] INFO: Running Minimap2\n[2025-01-10 06:52:02] INFO: Computing consensus\n[2025-01-10 06:52:03] INFO: Alignment error rate: 0.018049\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-3alf6h9a\u0027\n[2025-01-10 06:52:03] INFO: \u003e\u003e\u003eSTAGE: repeat\n[2025-01-10 06:52:03] INFO: Building and resolving repeat graph\n[2025-01-10 06:52:03] INFO: Parsing disjointigs\n[2025-01-10 06:52:03] INFO: Building repeat graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2025-01-10 06:52:03] INFO: Median overlap divergence: 0.00255836\n[2025-01-10 06:52:03] INFO: Parsing reads\n[2025-01-10 06:52:03] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:52:04] INFO: Aligned read sequence: 6438572 / 6522170 (0.987182)\n[2025-01-10 06:52:04] INFO: Median overlap divergence: 0.00693965\n[2025-01-10 06:52:04] INFO: Mean edge coverage: 14\n[2025-01-10 06:52:04] INFO: Simplifying the graph\n[2025-01-10 06:52:04] INFO: \u003e\u003e\u003eSTAGE: contigger\n[2025-01-10 06:52:04] INFO: Generating contigs\n[2025-01-10 06:52:04] INFO: Reading sequences\n[2025-01-10 06:52:04] INFO: Generated 5 contigs\n[2025-01-10 06:52:04] INFO: Added 0 scaffold connections\n[2025-01-10 06:52:04] INFO: \u003e\u003e\u003eSTAGE: polishing\n[2025-01-10 06:52:04] INFO: Polishing genome (1/1)\n[2025-01-10 06:52:04] INFO: Running minimap2\n[2025-01-10 06:52:05] INFO: Separating alignment into bubbles\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-0lc_expp\u0027\n[2025-01-10 06:52:11] INFO: Alignment error rate: 0.010357\n[2025-01-10 06:52:11] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-adqq01g3\u0027\n[2025-01-10 06:52:43] INFO: \u003e\u003e\u003eSTAGE: finalize\n[2025-01-10 06:52:43] INFO: Assembly statistics:\n\n\tTotal length:\t418248\n\tFragments:\t5\n\tFragments N50:\t90298\n\tLargest frg:\t147964\n\tScaffolds:\t0\n\tMean coverage:\t16\n\n[2025-01-10 06:52:43] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/152/working/out_dir/assembly.fasta\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.5+galaxy0, exit_code: None, stderr: [2025-01-10 06:51:57] INFO: Starting Flye 2.9.5-b1801\n[2025-01-10 06:51:57] INFO: \u003e\u003e\u003eSTAGE: configure\n[2025-01-10 06:51:57] INFO: Configuring run\n[2025-01-10 06:51:57] INFO: Total read length: 6522170\n[2025-01-10 06:51:57] INFO: Reads N50/N90: 2706 / 1386\n[2025-01-10 06:51:57] INFO: Selected minimum overlap: 1000\n[2025-01-10 06:51:57] INFO: \u003e\u003e\u003eSTAGE: assembly\n[2025-01-10 06:51:57] INFO: Assembling disjointigs\n[2025-01-10 06:51:57] INFO: Reading sequences\n[2025-01-10 06:51:57] INFO: Building minimizer index\n[2025-01-10 06:51:57] INFO: Pre-calculating index storage\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:51:57] INFO: Filling index\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:51:58] INFO: Extending reads\n[2025-01-10 06:52:01] INFO: Overlap-based coverage: 12\n[2025-01-10 06:52:01] INFO: Median overlap divergence: 0.0135261\n0% 20% 30% 40% 60% 90% 100% \n[2025-01-10 06:52:01] INFO: Assembled 9 disjointigs\n[2025-01-10 06:52:01] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:52:01] INFO: Filtering contained disjointigs\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2025-01-10 06:52:01] INFO: Contained seqs: 0\n[2025-01-10 06:52:02] INFO: \u003e\u003e\u003eSTAGE: consensus\n[2025-01-10 06:52:02] INFO: Running Minimap2\n[2025-01-10 06:52:02] INFO: Computing consensus\n[2025-01-10 06:52:03] INFO: Alignment error rate: 0.018049\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-3alf6h9a\u0027\n[2025-01-10 06:52:03] INFO: \u003e\u003e\u003eSTAGE: repeat\n[2025-01-10 06:52:03] INFO: Building and resolving repeat graph\n[2025-01-10 06:52:03] INFO: Parsing disjointigs\n[2025-01-10 06:52:03] INFO: Building repeat graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2025-01-10 06:52:03] INFO: Median overlap divergence: 0.00255836\n[2025-01-10 06:52:03] INFO: Parsing reads\n[2025-01-10 06:52:03] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:52:04] INFO: Aligned read sequence: 6438572 / 6522170 (0.987182)\n[2025-01-10 06:52:04] INFO: Median overlap divergence: 0.00693965\n[2025-01-10 06:52:04] INFO: Mean edge coverage: 14\n[2025-01-10 06:52:04] INFO: Simplifying the graph\n[2025-01-10 06:52:04] INFO: \u003e\u003e\u003eSTAGE: contigger\n[2025-01-10 06:52:04] INFO: Generating contigs\n[2025-01-10 06:52:04] INFO: Reading sequences\n[2025-01-10 06:52:04] INFO: Generated 5 contigs\n[2025-01-10 06:52:04] INFO: Added 0 scaffold connections\n[2025-01-10 06:52:04] INFO: \u003e\u003e\u003eSTAGE: polishing\n[2025-01-10 06:52:04] INFO: Polishing genome (1/1)\n[2025-01-10 06:52:04] INFO: Running minimap2\n[2025-01-10 06:52:05] INFO: Separating alignment into bubbles\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-0lc_expp\u0027\n[2025-01-10 06:52:11] INFO: Alignment error rate: 0.010357\n[2025-01-10 06:52:11] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-adqq01g3\u0027\n[2025-01-10 06:52:43] INFO: \u003e\u003e\u003eSTAGE: finalize\n[2025-01-10 06:52:43] INFO: Assembly statistics:\n\n\tTotal length:\t418248\n\tFragments:\t5\n\tFragments N50:\t90298\n\tLargest frg:\t147964\n\tScaffolds:\t0\n\tMean coverage:\t16\n\n[2025-01-10 06:52:43] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/152/working/out_dir/assembly.fasta\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.5+galaxy0, exit_code: None, stderr: [2025-01-10 06:51:57] INFO: Starting Flye 2.9.5-b1801\n[2025-01-10 06:51:57] INFO: \u003e\u003e\u003eSTAGE: configure\n[2025-01-10 06:51:57] INFO: Configuring run\n[2025-01-10 06:51:57] INFO: Total read length: 6522170\n[2025-01-10 06:51:57] INFO: Reads N50/N90: 2706 / 1386\n[2025-01-10 06:51:57] INFO: Selected minimum overlap: 1000\n[2025-01-10 06:51:57] INFO: \u003e\u003e\u003eSTAGE: assembly\n[2025-01-10 06:51:57] INFO: Assembling disjointigs\n[2025-01-10 06:51:57] INFO: Reading sequences\n[2025-01-10 06:51:57] INFO: Building minimizer index\n[2025-01-10 06:51:57] INFO: Pre-calculating index storage\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:51:57] INFO: Filling index\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:51:58] INFO: Extending reads\n[2025-01-10 06:52:01] INFO: Overlap-based coverage: 12\n[2025-01-10 06:52:01] INFO: Median overlap divergence: 0.0135261\n0% 20% 30% 40% 60% 90% 100% \n[2025-01-10 06:52:01] INFO: Assembled 9 disjointigs\n[2025-01-10 06:52:01] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:52:01] INFO: Filtering contained disjointigs\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2025-01-10 06:52:01] INFO: Contained seqs: 0\n[2025-01-10 06:52:02] INFO: \u003e\u003e\u003eSTAGE: consensus\n[2025-01-10 06:52:02] INFO: Running Minimap2\n[2025-01-10 06:52:02] INFO: Computing consensus\n[2025-01-10 06:52:03] INFO: Alignment error rate: 0.018049\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-3alf6h9a\u0027\n[2025-01-10 06:52:03] INFO: \u003e\u003e\u003eSTAGE: repeat\n[2025-01-10 06:52:03] INFO: Building and resolving repeat graph\n[2025-01-10 06:52:03] INFO: Parsing disjointigs\n[2025-01-10 06:52:03] INFO: Building repeat graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2025-01-10 06:52:03] INFO: Median overlap divergence: 0.00255836\n[2025-01-10 06:52:03] INFO: Parsing reads\n[2025-01-10 06:52:03] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:52:04] INFO: Aligned read sequence: 6438572 / 6522170 (0.987182)\n[2025-01-10 06:52:04] INFO: Median overlap divergence: 0.00693965\n[2025-01-10 06:52:04] INFO: Mean edge coverage: 14\n[2025-01-10 06:52:04] INFO: Simplifying the graph\n[2025-01-10 06:52:04] INFO: \u003e\u003e\u003eSTAGE: contigger\n[2025-01-10 06:52:04] INFO: Generating contigs\n[2025-01-10 06:52:04] INFO: Reading sequences\n[2025-01-10 06:52:04] INFO: Generated 5 contigs\n[2025-01-10 06:52:04] INFO: Added 0 scaffold connections\n[2025-01-10 06:52:04] INFO: \u003e\u003e\u003eSTAGE: polishing\n[2025-01-10 06:52:04] INFO: Polishing genome (1/1)\n[2025-01-10 06:52:04] INFO: Running minimap2\n[2025-01-10 06:52:05] INFO: Separating alignment into bubbles\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-0lc_expp\u0027\n[2025-01-10 06:52:11] INFO: Alignment error rate: 0.010357\n[2025-01-10 06:52:11] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-adqq01g3\u0027\n[2025-01-10 06:52:43] INFO: \u003e\u003e\u003eSTAGE: finalize\n[2025-01-10 06:52:43] INFO: Assembly statistics:\n\n\tTotal length:\t418248\n\tFragments:\t5\n\tFragments N50:\t90298\n\tLargest frg:\t147964\n\tScaffolds:\t0\n\tMean coverage:\t16\n\n[2025-01-10 06:52:43] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/152/working/out_dir/assembly.fasta\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.9.5+galaxy0, exit_code: None, stderr: [2025-01-10 06:51:57] INFO: Starting Flye 2.9.5-b1801\n[2025-01-10 06:51:57] INFO: \u003e\u003e\u003eSTAGE: configure\n[2025-01-10 06:51:57] INFO: Configuring run\n[2025-01-10 06:51:57] INFO: Total read length: 6522170\n[2025-01-10 06:51:57] INFO: Reads N50/N90: 2706 / 1386\n[2025-01-10 06:51:57] INFO: Selected minimum overlap: 1000\n[2025-01-10 06:51:57] INFO: \u003e\u003e\u003eSTAGE: assembly\n[2025-01-10 06:51:57] INFO: Assembling disjointigs\n[2025-01-10 06:51:57] INFO: Reading sequences\n[2025-01-10 06:51:57] INFO: Building minimizer index\n[2025-01-10 06:51:57] INFO: Pre-calculating index storage\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:51:57] INFO: Filling index\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:51:58] INFO: Extending reads\n[2025-01-10 06:52:01] INFO: Overlap-based coverage: 12\n[2025-01-10 06:52:01] INFO: Median overlap divergence: 0.0135261\n0% 20% 30% 40% 60% 90% 100% \n[2025-01-10 06:52:01] INFO: Assembled 9 disjointigs\n[2025-01-10 06:52:01] INFO: Generating sequence\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:52:01] INFO: Filtering contained disjointigs\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2025-01-10 06:52:01] INFO: Contained seqs: 0\n[2025-01-10 06:52:02] INFO: \u003e\u003e\u003eSTAGE: consensus\n[2025-01-10 06:52:02] INFO: Running Minimap2\n[2025-01-10 06:52:02] INFO: Computing consensus\n[2025-01-10 06:52:03] INFO: Alignment error rate: 0.018049\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-3alf6h9a\u0027\n[2025-01-10 06:52:03] INFO: \u003e\u003e\u003eSTAGE: repeat\n[2025-01-10 06:52:03] INFO: Building and resolving repeat graph\n[2025-01-10 06:52:03] INFO: Parsing disjointigs\n[2025-01-10 06:52:03] INFO: Building repeat graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2025-01-10 06:52:03] INFO: Median overlap divergence: 0.00255836\n[2025-01-10 06:52:03] INFO: Parsing reads\n[2025-01-10 06:52:03] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2025-01-10 06:52:04] INFO: Aligned read sequence: 6438572 / 6522170 (0.987182)\n[2025-01-10 06:52:04] INFO: Median overlap divergence: 0.00693965\n[2025-01-10 06:52:04] INFO: Mean edge coverage: 14\n[2025-01-10 06:52:04] INFO: Simplifying the graph\n[2025-01-10 06:52:04] INFO: \u003e\u003e\u003eSTAGE: contigger\n[2025-01-10 06:52:04] INFO: Generating contigs\n[2025-01-10 06:52:04] INFO: Reading sequences\n[2025-01-10 06:52:04] INFO: Generated 5 contigs\n[2025-01-10 06:52:04] INFO: Added 0 scaffold connections\n[2025-01-10 06:52:04] INFO: \u003e\u003e\u003eSTAGE: polishing\n[2025-01-10 06:52:04] INFO: Polishing genome (1/1)\n[2025-01-10 06:52:04] INFO: Running minimap2\n[2025-01-10 06:52:05] INFO: Separating alignment into bubbles\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-0lc_expp\u0027\n[2025-01-10 06:52:11] INFO: Alignment error rate: 0.010357\n[2025-01-10 06:52:11] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 314, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.12/multiprocessing/process.py\", line 108, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 599, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.12/multiprocessing/managers.py\", line 184, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 303, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 227, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/multiprocessing/util.py\", line 136, in _remove_temp_dir\n    rmtree(tempdir, onerror=onerror)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 759, in rmtree\n    _rmtree_safe_fd(stack, onexc)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 703, in _rmtree_safe_fd\n    onexc(func, path, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 700, in _rmtree_safe_fd\n    onexc(os.unlink, fullname, err)\n  File \"/usr/local/lib/python3.12/shutil.py\", line 750, in onexc\n    return onerror(func, path, exc_info)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.12/shutil.py\", line 698, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: \u0027/galaxy/server/database/jobs_directory/000/152/tmp/pymp-adqq01g3\u0027\n[2025-01-10 06:52:43] INFO: \u003e\u003e\u003eSTAGE: finalize\n[2025-01-10 06:52:43] INFO: Assembly statistics:\n\n\tTotal length:\t418248\n\tFragments:\t5\n\tFragments N50:\t90298\n\tLargest frg:\t147964\n\tScaffolds:\t0\n\tMean coverage:\t16\n\n[2025-01-10 06:52:43] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/152/working/out_dir/assembly.fasta\n." ], "status": "failure", "test_index": 6, "time_seconds": 108.0852882862091, "tool_id": "flye", "tool_version": "2.9.5+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [2025-01-10 06:51:57] INFO: Starting Flye 2.9.5-b1801[2025-01-10 06:51:57] INFO: >>>STAGE: configure[2025-01-10 06:51:57] INFO: Configuring run[2025-01-10 06:51:57] INFO: Total read length: 6522170[2025-01-10 06:51:57] INFO: Reads N50/N90: 2706 / 1386[2025-01-10 06:51:57] INFO: Selected minimum overlap: 1000[2025-01-10 06:51:57] INFO: >>>STAGE: assembly[2025-01-10 06:51:57] INFO: Assembling disjointigs[2025-01-10 06:51:57] INFO: Reading sequences[2025-01-10 06:51:57] INFO: Building minimizer index[2025-01-10 06:51:57] INFO: Pre-calculating index storage0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:51:57] INFO: Filling index0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:51:58] INFO: Extending reads[2025-01-10 06:52:01] INFO: Overlap-based coverage: 12[2025-01-10 06:52:01] INFO: Median overlap divergence: 0.01352610% 20% 30% 40% 60% 90% 100% [2025-01-10 06:52:01] INFO: Assembled 9 disjointigs[2025-01-10 06:52:01] INFO: Generating sequence0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:52:01] INFO: Filtering contained disjointigs0% 10% 20% 30% 40% 50% 60% 70% 80% 100% [2025-01-10 06:52:01] INFO: Contained seqs: 0[2025-01-10 06:52:02] INFO: >>>STAGE: consensus[2025-01-10 06:52:02] INFO: Running Minimap2[2025-01-10 06:52:02] INFO: Computing consensus[2025-01-10 06:52:03] INFO: Alignment error rate: 0.018049Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/152/tmp/pymp-3alf6h9a'[2025-01-10 06:52:03] INFO: >>>STAGE: repeat[2025-01-10 06:52:03] INFO: Building and resolving repeat graph[2025-01-10 06:52:03] INFO: Parsing disjointigs[2025-01-10 06:52:03] INFO: Building repeat graph0% 10% 20% 30% 40% 50% 60% 70% 80% 100% [2025-01-10 06:52:03] INFO: Median overlap divergence: 0.00255836[2025-01-10 06:52:03] INFO: Parsing reads[2025-01-10 06:52:03] INFO: Aligning reads to the graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:52:04] INFO: Aligned read sequence: 6438572 / 6522170 (0.987182)[2025-01-10 06:52:04] INFO: Median overlap divergence: 0.00693965[2025-01-10 06:52:04] INFO: Mean edge coverage: 14[2025-01-10 06:52:04] INFO: Simplifying the graph[2025-01-10 06:52:04] INFO: >>>STAGE: contigger[2025-01-10 06:52:04] INFO: Generating contigs[2025-01-10 06:52:04] INFO: Reading sequences[2025-01-10 06:52:04] INFO: Generated 5 contigs[2025-01-10 06:52:04] INFO: Added 0 scaffold connections[2025-01-10 06:52:04] INFO: >>>STAGE: polishing[2025-01-10 06:52:04] INFO: Polishing genome (1/1)[2025-01-10 06:52:04] INFO: Running minimap2[2025-01-10 06:52:05] INFO: Separating alignment into bubblesTraceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/152/tmp/pymp-0lc_expp'[2025-01-10 06:52:11] INFO: Alignment error rate: 0.010357[2025-01-10 06:52:11] INFO: Correcting bubbles0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/152/tmp/pymp-adqq01g3'[2025-01-10 06:52:43] INFO: >>>STAGE: finalize[2025-01-10 06:52:43] INFO: Assembly statistics:Total length:418248Fragments:5Fragments N50:90298Largest frg:147964Scaffolds:0Mean coverage:16[2025-01-10 06:52:43] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/152/working/out_dir/assembly.fasta
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flye (Test #8)" name="7" time="72.24809408187866">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [2025-01-10 06:53:37] INFO: Starting Flye 2.9.5-b1801[2025-01-10 06:53:37] INFO: >>>STAGE: configure[2025-01-10 06:53:37] INFO: Configuring run[2025-01-10 06:53:37] INFO: Total read length: 6522170[2025-01-10 06:53:37] INFO: Reads N50/N90: 2706 / 1386[2025-01-10 06:53:37] INFO: Selected minimum overlap: 1000[2025-01-10 06:53:37] INFO: >>>STAGE: assembly[2025-01-10 06:53:37] INFO: Assembling disjointigs[2025-01-10 06:53:37] INFO: Reading sequences[2025-01-10 06:53:37] INFO: Building minimizer index[2025-01-10 06:53:37] INFO: Pre-calculating index storage0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:53:37] INFO: Filling index0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:53:37] INFO: Extending reads[2025-01-10 06:53:40] INFO: Overlap-based coverage: 12[2025-01-10 06:53:40] INFO: Median overlap divergence: 0.01356740% 10% 20% 30% 40% 70% 80% 90% 100% [2025-01-10 06:53:40] INFO: Assembled 11 disjointigs[2025-01-10 06:53:40] INFO: Generating sequence0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:53:40] INFO: Filtering contained disjointigs0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:53:40] INFO: Contained seqs: 0[2025-01-10 06:53:40] INFO: >>>STAGE: consensus[2025-01-10 06:53:40] INFO: Running Minimap2[2025-01-10 06:53:41] INFO: Computing consensus[2025-01-10 06:53:42] INFO: Alignment error rate: 0.018078Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/162/tmp/pymp-cfro7310'[2025-01-10 06:53:42] INFO: >>>STAGE: repeat[2025-01-10 06:53:42] INFO: Building and resolving repeat graph[2025-01-10 06:53:42] INFO: Parsing disjointigs[2025-01-10 06:53:42] INFO: Building repeat graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:53:42] INFO: Median overlap divergence: 0.000980392[2025-01-10 06:53:42] INFO: Parsing reads[2025-01-10 06:53:42] INFO: Aligning reads to the graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:53:43] INFO: Aligned read sequence: 6403986 / 6522170 (0.98188)[2025-01-10 06:53:43] INFO: Median overlap divergence: 0.00689656[2025-01-10 06:53:43] INFO: Mean edge coverage: 14[2025-01-10 06:53:43] INFO: Simplifying the graph[2025-01-10 06:53:43] INFO: >>>STAGE: contigger[2025-01-10 06:53:43] INFO: Generating contigs[2025-01-10 06:53:43] INFO: Reading sequences[2025-01-10 06:53:43] INFO: Generated 4 contigs[2025-01-10 06:53:43] INFO: Added 0 scaffold connections[2025-01-10 06:53:43] INFO: >>>STAGE: polishing[2025-01-10 06:53:43] INFO: Polishing genome (1/1)[2025-01-10 06:53:43] INFO: Running minimap2[2025-01-10 06:53:44] INFO: Separating alignment into bubblesTraceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/162/tmp/pymp-0tboq0_o'[2025-01-10 06:53:45] INFO: Alignment error rate: 0.009628[2025-01-10 06:53:45] INFO: Correcting bubbles0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/162/tmp/pymp-95y1c4vl'[2025-01-10 06:53:46] INFO: >>>STAGE: finalize[2025-01-10 06:53:47] INFO: Assembly statistics:Total length:419247Fragments:4Fragments N50:147964Largest frg:150253Scaffolds:0Mean coverage:16[2025-01-10 06:53:47] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/162/working/out_dir/assembly.fasta
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="flye (Test #9)" name="8" time="97.8015284538269">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [2025-01-10 06:54:18] INFO: Starting Flye 2.9.5-b1801[2025-01-10 06:54:18] INFO: >>>STAGE: configure[2025-01-10 06:54:18] INFO: Configuring run[2025-01-10 06:54:18] INFO: Total read length: 1466260[2025-01-10 06:54:18] INFO: Reads N50/N90: 9054 / 4697[2025-01-10 06:54:18] INFO: Minimum overlap set to 5000[2025-01-10 06:54:18] INFO: >>>STAGE: assembly[2025-01-10 06:54:18] INFO: Assembling disjointigs[2025-01-10 06:54:18] INFO: Reading sequences[2025-01-10 06:54:23] INFO: Counting k-mers:0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:55:15] INFO: Filling index table (1/2)0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:55:15] INFO: Filling index table (2/2)0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:55:19] INFO: Extending reads[2025-01-10 06:55:22] INFO: Overlap-based coverage: 42[2025-01-10 06:55:22] INFO: Median overlap divergence: 0.1056170% 90% 100% [2025-01-10 06:55:22] INFO: Assembled 1 disjointigs[2025-01-10 06:55:22] INFO: Generating sequence0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:55:22] INFO: Filtering contained disjointigs0% 100% [2025-01-10 06:55:22] INFO: Contained seqs: 0[2025-01-10 06:55:22] INFO: >>>STAGE: consensus[2025-01-10 06:55:22] INFO: Running Minimap2[2025-01-10 06:55:23] INFO: Computing consensus[2025-01-10 06:55:23] INFO: Alignment error rate: 0.175120Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 314, in _bootstrap    self.run()  File "/usr/local/lib/python3.12/multiprocessing/process.py", line 108, in run    self._target(*self._args, **self._kwargs)  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 599, in _run_server    server.serve_forever()  File "/usr/local/lib/python3.12/multiprocessing/managers.py", line 184, in serve_forever    sys.exit(0)SystemExit: 0During handling of the above exception, another exception occurred:Traceback (most recent call last):  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 303, in _run_finalizers    finalizer()  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 227, in __call__    res = self._callback(*self._args, **self._kwargs)          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/multiprocessing/util.py", line 136, in _remove_temp_dir    rmtree(tempdir, onerror=onerror)  File "/usr/local/lib/python3.12/shutil.py", line 759, in rmtree    _rmtree_safe_fd(stack, onexc)  File "/usr/local/lib/python3.12/shutil.py", line 703, in _rmtree_safe_fd    onexc(func, path, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 700, in _rmtree_safe_fd    onexc(os.unlink, fullname, err)  File "/usr/local/lib/python3.12/shutil.py", line 750, in onexc    return onerror(func, path, exc_info)           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  File "/usr/local/lib/python3.12/shutil.py", line 698, in _rmtree_safe_fd    os.unlink(entry.name, dir_fd=topfd)OSError: [Errno 16] Device or resource busy: '/galaxy/server/database/jobs_directory/000/164/tmp/pymp-y97dwbyx'[2025-01-10 06:55:24] INFO: >>>STAGE: repeat[2025-01-10 06:55:24] INFO: Building and resolving repeat graph[2025-01-10 06:55:24] INFO: Parsing disjointigs[2025-01-10 06:55:24] INFO: Building repeat graph0% 100% [2025-01-10 06:55:24] INFO: Median overlap divergence: 0.0151003[2025-01-10 06:55:24] INFO: Parsing reads[2025-01-10 06:55:24] INFO: Aligning reads to the graph0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% [2025-01-10 06:55:24] INFO: Aligned read sequence: 1166207 / 1313105 (0.888129)[2025-01-10 06:55:24] INFO: Median overlap divergence: 0.0550349[2025-01-10 06:55:24] INFO: Mean edge coverage: 33[2025-01-10 06:55:24] INFO: Simplifying the graph[2025-01-10 06:55:24] INFO: >>>STAGE: contigger[2025-01-10 06:55:24] INFO: Generating contigs[2025-01-10 06:55:24] INFO: Reading sequences[2025-01-10 06:55:24] INFO: Generated 1 contigs[2025-01-10 06:55:24] INFO: Added 0 scaffold connections[2025-01-10 06:55:24] INFO: >>>STAGE: finalize[2025-01-10 06:55:24] INFO: Assembly statistics:Total length:5027Fragments:1Fragments N50:5027Largest frg:5027Scaffolds:0Mean coverage:95[2025-01-10 06:55:24] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/164/working/out_dir/assembly.fasta
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #1)" name="0" time="45.096275091171265">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 1Getting block 3 of 60  Reserving size (126) for bucket 3  Entering block accumulator loop for bucket 2:Getting block 4 of 60Getting block 5 of 60  Reserving size (126) for bucket 5Getting block 6 of 60  Reserving size (126) for bucket 6  Calculating Z arrays for bucket 5Getting block 8 of 60  Reserving size (126) for bucket 8Getting block 7 of 60  Entering block accumulator loop for bucket 5:  Calculating Z arrays for bucket 6  Reserving size (126) for bucket 4  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 4  Entering block accumulator loop for bucket 6:  bucket 2: 10%  Calculating Z arrays for bucket 8  bucket 1: 10%  Calculating Z arrays for bucket 3  bucket 1: 20%  Entering block accumulator loop for bucket 8:  bucket 5: 10%  bucket 6: 10%  bucket 2: 20%  Entering block accumulator loop for bucket 3:  Reserving size (126) for bucket 7  bucket 8: 10%  bucket 1: 30%  Entering block accumulator loop for bucket 4:  bucket 2: 30%  bucket 3: 10%  Calculating Z arrays for bucket 7  bucket 4: 10%  bucket 5: 20%  bucket 3: 20%  bucket 1: 40%  bucket 2: 40%  bucket 4: 20%  bucket 1: 50%  bucket 8: 20%  bucket 3: 30%  bucket 4: 30%  bucket 1: 60%  bucket 6: 20%  bucket 2: 50%  bucket 5: 30%  bucket 6: 30%  bucket 4: 40%  bucket 8: 30%  bucket 6: 40%  bucket 3: 40%  bucket 8: 40%  bucket 6: 50%  bucket 2: 60%  Entering block accumulator loop for bucket 7:  bucket 6: 60%  bucket 4: 50%  bucket 5: 40%  bucket 8: 50%  bucket 1: 70%  bucket 7: 10%  bucket 3: 50%  bucket 5: 50%  bucket 6: 70%  bucket 4: 60%  bucket 7: 20%  bucket 5: 60%  bucket 2: 70%  bucket 4: 70%  bucket 6: 80%  bucket 5: 70%  bucket 3: 60%  bucket 4: 80%  bucket 8: 60%  bucket 1: 80%  bucket 6: 90%  bucket 8: 70%  bucket 3: 70%  bucket 6: 100%  bucket 2: 80%  bucket 1: 90%  bucket 4: 90%  bucket 7: 30%  bucket 8: 80%  bucket 4: 100%  bucket 2: 90%  bucket 8: 90%  bucket 1: 100%  bucket 7: 40%  bucket 8: 100%  bucket 2: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 5: 80%  bucket 7: 50%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block of length 42 for bucket 1  (Using difference cover)  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 7: 60%  bucket 3: 80%  bucket 5: 90%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 7: 70%  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 3: 90%  bucket 7: 80%  bucket 3: 100%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 7: 90%  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 76 for bucket 7Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 9: 30%  bucket 10: 30%  bucket 9: 40%  bucket 9: 50%  bucket 10: 40%  bucket 9: 60%  bucket 10: 50%  bucket 9: 70%  bucket 10: 60%  bucket 9: 80%  bucket 10: 70%  bucket 9: 90%  bucket 10: 80%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  bucket 11: 10%  Entering block accumulator loop for bucket 12:  bucket 11: 20%  bucket 12: 10%  bucket 11: 30%  bucket 12: 20%  bucket 11: 40%  bucket 12: 30%  bucket 11: 50%  bucket 12: 40%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Entering block accumulator loop for bucket 14:  bucket 13: 60%  Calculating Z arrays for bucket 15  bucket 13: 70%  bucket 14: 10%  bucket 13: 80%  bucket 14: 20%  bucket 13: 90%  bucket 14: 30%  bucket 13: 100%  bucket 14: 40%  Sorting block of length 85 for bucket 13  (Using difference cover)  Entering block accumulator loop for bucket 15:  bucket 14: 50%  bucket 14: 60%  bucket 15: 10%  bucket 14: 70%  bucket 15: 20%  bucket 14: 80%  bucket 15: 30%  bucket 14: 90%  bucket 15: 40%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 16:  Entering block accumulator loop for bucket 17:  bucket 16: 10%  bucket 17: 10%  bucket 16: 20%  bucket 17: 20%  bucket 16: 30%  bucket 17: 30%  bucket 16: 40%  bucket 17: 40%  bucket 16: 50%  bucket 17: 50%  bucket 17: 60%  bucket 16: 60%  bucket 17: 70%  bucket 16: 70%  bucket 17: 80%  bucket 16: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  bucket 18: 40%  bucket 18: 50%  Entering block accumulator loop for bucket 19:  bucket 18: 60%  bucket 19: 10%  bucket 18: 70%  bucket 18: 80%  bucket 19: 20%  bucket 18: 90%  bucket 18: 100%  bucket 19: 30%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 21:  Entering block accumulator loop for bucket 20:  bucket 21: 10%  bucket 20: 10%  bucket 21: 20%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 21: 30%  bucket 20: 50%  bucket 21: 40%  bucket 20: 60%  bucket 21: 50%  bucket 20: 70%  bucket 21: 60%  bucket 20: 80%  bucket 21: 70%  bucket 20: 90%  bucket 21: 80%  bucket 20: 100%  bucket 21: 90%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  bucket 22: 10%  bucket 22: 20%  Entering block accumulator loop for bucket 23:  bucket 22: 30%  bucket 22: 40%  bucket 23: 10%  bucket 22: 50%  bucket 23: 20%  bucket 22: 60%  bucket 23: 30%  bucket 22: 70%  bucket 23: 40%  bucket 22: 80%  bucket 23: 50%  bucket 22: 90%  bucket 23: 60%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  bucket 24: 10%  bucket 24: 20%  Entering block accumulator loop for bucket 25:  bucket 24: 30%  bucket 25: 10%  bucket 24: 40%  bucket 25: 20%  bucket 24: 50%  bucket 25: 30%  bucket 24: 60%  bucket 25: 40%  bucket 24: 70%  bucket 25: 50%  bucket 24: 80%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 30%  bucket 26: 40%  Entering block accumulator loop for bucket 27:  bucket 26: 50%  bucket 26: 60%  bucket 27: 10%  bucket 26: 70%  bucket 27: 20%  bucket 26: 80%  bucket 27: 30%  bucket 26: 90%  bucket 27: 40%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block time: 00:00:00  Sorting block of length 51 for bucket 29  (Using difference cover)Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 31:  Entering block accumulator loop for bucket 32:  bucket 31: 10%  bucket 32: 10%  bucket 31: 20%  bucket 32: 20%  bucket 31: 30%  bucket 32: 30%  bucket 31: 40%  bucket 32: 40%  bucket 31: 50%  bucket 32: 50%  bucket 31: 60%  bucket 32: 60%  bucket 31: 70%  bucket 32: 70%  bucket 31: 80%  bucket 32: 80%  bucket 31: 90%  bucket 32: 90%  bucket 31: 100%  bucket 32: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 33: 20%Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  bucket 33: 30%  bucket 33: 40%  Entering block accumulator loop for bucket 34:  bucket 33: 50%  bucket 34: 10%  bucket 33: 60%  bucket 34: 20%  bucket 33: 70%  bucket 34: 30%  bucket 33: 80%  bucket 34: 40%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 50%  bucket 34: 60%  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 60  Entering block accumulator loop for bucket 36:  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  bucket 36: 10%  bucket 36: 20%  Entering block accumulator loop for bucket 37:  bucket 36: 30%  bucket 37: 10%  bucket 36: 40%  bucket 37: 20%  bucket 36: 50%  bucket 37: 30%  bucket 36: 60%  bucket 37: 40%  bucket 37: 50%  bucket 36: 70%  bucket 37: 60%  bucket 36: 80%  bucket 37: 70%  bucket 36: 90%  bucket 37: 80%  bucket 37: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 39:  Entering block accumulator loop for bucket 38:Getting block 40 of 60  bucket 38: 10%  bucket 39: 10%  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  bucket 38: 20%  bucket 39: 20%  bucket 38: 30%  Entering block accumulator loop for bucket 40:  bucket 39: 30%  bucket 38: 40%  bucket 40: 10%  bucket 39: 40%  bucket 40: 20%  bucket 38: 50%  bucket 40: 30%  bucket 39: 50%  bucket 38: 60%  bucket 40: 40%  bucket 39: 60%  bucket 40: 50%  bucket 38: 70%  bucket 39: 70%  bucket 40: 60%  bucket 38: 80%  bucket 39: 80%  bucket 40: 70%  bucket 38: 90%  bucket 39: 90%  bucket 40: 80%  bucket 38: 100%  bucket 39: 100%  bucket 40: 90%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block of length 125 for bucket 39  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%  bucket 41: 40%  bucket 41: 50%  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  bucket 41: 90%  Entering block accumulator loop for bucket 42:  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 10%  bucket 42: 20%  bucket 42: 30%  bucket 42: 40%  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  bucket 43: 40%  bucket 43: 50%  Entering block accumulator loop for bucket 44:  bucket 43: 60%  bucket 44: 10%  bucket 43: 70%  bucket 44: 20%  bucket 43: 80%  bucket 44: 30%  bucket 43: 90%  bucket 44: 40%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  Entering block accumulator loop for bucket 47:  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  Sorting block time: 00:00:00Returning block of 70 for bucket 46  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  bucket 48: 10%  bucket 48: 20%  Entering block accumulator loop for bucket 49:  bucket 48: 30%  bucket 48: 40%  bucket 49: 10%  bucket 48: 50%  bucket 49: 20%  bucket 48: 60%  bucket 49: 30%  bucket 48: 70%  bucket 49: 40%  bucket 48: 80%  bucket 48: 90%  bucket 49: 50%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 51:  Entering block accumulator loop for bucket 52:  bucket 51: 10%  bucket 52: 10%  bucket 52: 20%  bucket 51: 20%  bucket 52: 30%  bucket 51: 30%  bucket 52: 40%  bucket 52: 50%  bucket 51: 40%  bucket 52: 60%  bucket 51: 50%  bucket 52: 70%  bucket 51: 60%  bucket 52: 80%  bucket 52: 90%  bucket 51: 70%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 53:  Entering block accumulator loop for bucket 54:  bucket 53: 10%  bucket 54: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 54: 20%  bucket 53: 50%  bucket 54: 30%  bucket 54: 40%  bucket 53: 60%  bucket 54: 50%  bucket 53: 70%  bucket 54: 60%  bucket 53: 80%  bucket 54: 70%  bucket 53: 90%  bucket 54: 80%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  bucket 56: 20%  bucket 56: 30%  Entering block accumulator loop for bucket 57:  bucket 56: 40%  bucket 57: 10%  bucket 56: 50%  bucket 57: 20%  bucket 56: 60%  bucket 57: 30%  bucket 56: 70%  bucket 57: 40%  bucket 56: 80%  bucket 57: 50%  bucket 56: 90%  bucket 57: 60%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  bucket 58: 30%  bucket 58: 40%  Entering block accumulator loop for bucket 59:  bucket 58: 50%  bucket 58: 60%  bucket 59: 10%  bucket 58: 70%  bucket 59: 20%  bucket 58: 80%  bucket 59: 30%  bucket 58: 90%  bucket 59: 40%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #1)" name="0" time="37.32323980331421">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60Getting block 2 of 60  Reserving size (126) for bucket 2Getting block 3 of 60  Reserving size (126) for bucket 1  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 60  Entering block accumulator loop for bucket 3:  Reserving size (126) for bucket 4  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 1Getting block 5 of 60  Reserving size (126) for bucket 5  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 1:  bucket 3: 10%  bucket 2: 10%  bucket 3: 20%  Entering block accumulator loop for bucket 4:  bucket 1: 10%  Entering block accumulator loop for bucket 5:Getting block 6 of 60  bucket 5: 10%  bucket 1: 20%  bucket 4: 10%  Reserving size (126) for bucket 6Getting block 7 of 60  Reserving size (126) for bucket 7  Calculating Z arrays for bucket 6  bucket 3: 30%  Calculating Z arrays for bucket 7  bucket 5: 20%  bucket 4: 20%  bucket 3: 40%Getting block 8 of 60  Reserving size (126) for bucket 8  bucket 2: 20%  Entering block accumulator loop for bucket 6:  bucket 3: 50%  bucket 2: 30%  bucket 4: 30%  bucket 3: 60%  Entering block accumulator loop for bucket 7:  bucket 2: 40%  bucket 4: 40%  Calculating Z arrays for bucket 8  bucket 6: 10%  bucket 5: 30%  bucket 1: 30%  bucket 2: 50%  bucket 4: 50%  bucket 1: 40%  bucket 6: 20%  bucket 2: 60%  bucket 7: 10%  bucket 4: 60%  bucket 3: 70%  bucket 7: 20%  bucket 2: 70%  Entering block accumulator loop for bucket 8:  bucket 7: 30%  bucket 3: 80%  bucket 5: 40%  bucket 6: 30%  bucket 4: 70%  bucket 5: 50%  bucket 8: 10%  bucket 7: 40%  bucket 6: 40%  bucket 3: 90%  bucket 2: 80%  bucket 7: 50%  bucket 6: 50%  bucket 4: 80%  bucket 8: 20%  bucket 2: 90%  bucket 5: 60%  bucket 7: 60%  bucket 3: 100%  bucket 6: 60%  bucket 7: 70%  bucket 5: 70%  bucket 4: 90%  bucket 2: 100%  Sorting block of length 106 for bucket 3  (Using difference cover)  Sorting block of length 84 for bucket 2  bucket 7: 80%  bucket 6: 70%  bucket 7: 90%  (Using difference cover)  bucket 4: 100%  bucket 6: 80%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 1: 50%  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 6: 90%  bucket 8: 30%  bucket 5: 80%  bucket 1: 60%  bucket 6: 100%  Sorting block of length 90 for bucket 6  bucket 5: 90%  bucket 8: 40%  bucket 1: 70%  bucket 5: 100%  Sorting block of length 63 for bucket 5  bucket 1: 80%  (Using difference cover)  bucket 8: 50%  (Using difference cover)  bucket 1: 90%  bucket 8: 60%  bucket 1: 100%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 43 for bucket 1Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  Sorting block time: 00:00:00  bucket 10: 60%Returning block of 125 for bucket 9  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 12:  Entering block accumulator loop for bucket 11:  bucket 12: 10%  bucket 12: 20%  bucket 11: 10%  bucket 12: 30%  bucket 11: 20%  bucket 12: 40%  bucket 11: 30%  bucket 12: 50%  bucket 11: 40%  bucket 12: 60%  bucket 11: 50%  bucket 11: 60%  bucket 12: 70%  bucket 11: 70%  bucket 12: 80%  bucket 11: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%Getting block 14 of 60  bucket 13: 50%  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  Entering block accumulator loop for bucket 14:  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  Sorting block time: 00:00:00Returning block of 86 for bucket 13  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Entering block accumulator loop for bucket 15:  Calculating Z arrays for bucket 16  bucket 15: 10%  bucket 15: 20%  Entering block accumulator loop for bucket 16:  bucket 15: 30%  bucket 16: 10%  bucket 15: 40%  bucket 16: 20%  bucket 15: 50%  bucket 16: 30%  bucket 15: 60%  bucket 16: 40%  bucket 15: 70%  bucket 16: 50%  bucket 15: 80%  bucket 16: 60%  bucket 15: 90%  bucket 16: 70%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  Entering block accumulator loop for bucket 18:  bucket 17: 80%  bucket 17: 90%  bucket 18: 10%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  Sorting block time: 00:00:00Returning block of 40 for bucket 17  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 40%  bucket 19: 50%  Entering block accumulator loop for bucket 20:  bucket 19: 60%  bucket 19: 70%  bucket 20: 10%  bucket 19: 80%  bucket 20: 20%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Entering block accumulator loop for bucket 21:  Calculating Z arrays for bucket 22  bucket 21: 10%  Entering block accumulator loop for bucket 22:  bucket 21: 20%  bucket 22: 10%  bucket 21: 30%  bucket 22: 20%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 22: 30%  bucket 21: 80%  bucket 22: 40%  bucket 21: 90%  bucket 22: 50%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  bucket 25: 70%  bucket 25: 80%  Entering block accumulator loop for bucket 26:  bucket 25: 90%  bucket 26: 10%  bucket 25: 100%  bucket 26: 20%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28Getting block 27 of 60  Entering block accumulator loop for bucket 28:  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  bucket 28: 10%  bucket 28: 20%  Entering block accumulator loop for bucket 27:  bucket 28: 30%  bucket 27: 10%  bucket 28: 40%  bucket 27: 20%  bucket 28: 50%  bucket 27: 30%  bucket 28: 60%  bucket 27: 40%  bucket 28: 70%  bucket 27: 50%  bucket 28: 80%  bucket 27: 60%  bucket 28: 90%  bucket 27: 70%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Entering block accumulator loop for bucket 29:  Calculating Z arrays for bucket 30  bucket 29: 10%  Entering block accumulator loop for bucket 30:  bucket 29: 20%  bucket 30: 10%  bucket 29: 30%  bucket 30: 20%  bucket 30: 30%  bucket 29: 40%  bucket 30: 40%  bucket 29: 50%  bucket 29: 60%  bucket 30: 50%  bucket 29: 70%  bucket 30: 60%  bucket 29: 80%  bucket 30: 70%  bucket 29: 90%  bucket 30: 80%  bucket 29: 100%  Sorting block of length 51 for bucket 29  bucket 30: 90%  (Using difference cover)  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  bucket 31: 20%  bucket 31: 30%  Entering block accumulator loop for bucket 32:  bucket 31: 40%  bucket 31: 50%  bucket 32: 10%  bucket 31: 60%  bucket 32: 20%  bucket 31: 70%  bucket 32: 30%  bucket 31: 80%  bucket 32: 40%  bucket 31: 90%  bucket 32: 50%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 33: 20%  bucket 33: 30%  bucket 33: 40%  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 34:  bucket 34: 10%  Entering block accumulator loop for bucket 35:  bucket 34: 20%  bucket 34: 30%  bucket 35: 10%  bucket 34: 40%  bucket 35: 20%  bucket 34: 50%  bucket 35: 30%  bucket 35: 40%  bucket 34: 60%  bucket 35: 50%  bucket 34: 70%  bucket 35: 60%  bucket 34: 80%  bucket 35: 70%  bucket 34: 90%  bucket 35: 80%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 36:  Entering block accumulator loop for bucket 37:  bucket 36: 10%  bucket 37: 10%  bucket 36: 20%  bucket 37: 20%  bucket 36: 30%  bucket 37: 30%  bucket 37: 40%  bucket 36: 40%  bucket 37: 50%  bucket 36: 50%  bucket 37: 60%  bucket 36: 60%  bucket 37: 70%  bucket 36: 70%  bucket 37: 80%  bucket 36: 80%  bucket 37: 90%  bucket 36: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  bucket 36: 100%  (Using difference cover)  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 40:  Entering block accumulator loop for bucket 39:  bucket 40: 10%  bucket 39: 10%  bucket 40: 20%  bucket 39: 20%  bucket 40: 30%  bucket 39: 30%  bucket 40: 40%  bucket 39: 40%  bucket 40: 50%  bucket 39: 50%  bucket 40: 60%  bucket 39: 60%  bucket 40: 70%  bucket 39: 70%  bucket 40: 80%  bucket 39: 80%  bucket 40: 90%  bucket 39: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Entering block accumulator loop for bucket 41:  Calculating Z arrays for bucket 42  bucket 41: 10%  bucket 41: 20%  Entering block accumulator loop for bucket 42:  bucket 41: 30%  bucket 41: 40%  bucket 42: 10%  bucket 41: 50%  bucket 41: 60%  bucket 42: 20%  bucket 41: 70%  bucket 41: 80%  bucket 42: 30%  bucket 41: 90%  bucket 42: 40%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  bucket 44: 10%  bucket 44: 20%  Entering block accumulator loop for bucket 45:  bucket 44: 30%  bucket 45: 10%  bucket 44: 40%  bucket 45: 20%  bucket 44: 50%  bucket 44: 60%  bucket 45: 30%  bucket 44: 70%  bucket 44: 80%  bucket 45: 40%  bucket 44: 90%  bucket 45: 50%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:Getting block 47 of 60  bucket 46: 10%  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  bucket 46: 20%  bucket 46: 30%  Entering block accumulator loop for bucket 47:  bucket 46: 40%  bucket 47: 10%  bucket 46: 50%  bucket 47: 20%  bucket 46: 60%  bucket 47: 30%  bucket 46: 70%  bucket 47: 40%  bucket 46: 80%  bucket 47: 50%  bucket 46: 90%  bucket 47: 60%  bucket 46: 100%  bucket 47: 70%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  bucket 49: 20%  bucket 49: 30%  Entering block accumulator loop for bucket 50:  bucket 49: 40%  bucket 50: 10%  bucket 49: 50%  bucket 50: 20%  bucket 49: 60%  bucket 50: 30%  bucket 49: 70%  bucket 50: 40%  bucket 49: 80%  bucket 50: 50%  bucket 49: 90%  bucket 50: 60%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 51:  bucket 51: 10%  Entering block accumulator loop for bucket 52:  bucket 51: 20%  bucket 52: 10%  bucket 51: 30%  bucket 52: 20%  bucket 51: 40%  bucket 52: 30%  bucket 51: 50%  bucket 52: 40%  bucket 51: 60%  bucket 52: 50%  bucket 51: 70%  bucket 52: 60%  bucket 51: 80%  bucket 52: 70%  bucket 51: 90%  bucket 52: 80%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  bucket 54: 50%  bucket 54: 60%  Entering block accumulator loop for bucket 55:  bucket 54: 70%  bucket 54: 80%  bucket 55: 10%  bucket 54: 90%  bucket 55: 20%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  Sorting block time: 00:00:00Returning block of 65 for bucket 54  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57Getting block 56 of 60  Entering block accumulator loop for bucket 57:  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  bucket 57: 10%  bucket 57: 20%  Entering block accumulator loop for bucket 56:  bucket 57: 30%  bucket 56: 10%  bucket 57: 40%  bucket 56: 20%  bucket 56: 30%  bucket 57: 50%  bucket 56: 40%  bucket 57: 60%  bucket 56: 50%  bucket 57: 70%  bucket 56: 60%  bucket 57: 80%  bucket 56: 70%  bucket 57: 90%  bucket 56: 80%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 58:  Entering block accumulator loop for bucket 59:  bucket 58: 10%  bucket 59: 10%  bucket 58: 20%  bucket 59: 20%  bucket 58: 30%  bucket 59: 30%  bucket 58: 40%  bucket 59: 40%  bucket 58: 50%  bucket 59: 50%  bucket 58: 60%  bucket 59: 60%  bucket 59: 70%  bucket 58: 70%  bucket 59: 80%  bucket 58: 80%  bucket 59: 90%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #2)" name="1" time="36.403199195861816">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Entering block accumulator loop for bucket 1:  Reserving size (126) for bucket 2Getting block 3 of 60  Calculating Z arrays for bucket 2  Reserving size (126) for bucket 3  bucket 1: 10%Getting block 4 of 60  Reserving size (126) for bucket 4  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 4  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  Entering block accumulator loop for bucket 3:Getting block 5 of 60  bucket 1: 40%  bucket 2: 20%  Reserving size (126) for bucket 5  Entering block accumulator loop for bucket 4:  bucket 1: 50%  bucket 2: 30%  bucket 3: 10%  bucket 4: 10%  bucket 1: 60%  bucket 2: 40%  bucket 3: 20%  bucket 4: 20%  Calculating Z arrays for bucket 5  bucket 1: 70%  bucket 3: 30%  bucket 2: 50%  bucket 4: 30%  bucket 1: 80%Getting block 6 of 60  bucket 1: 90%  bucket 4: 40%  Entering block accumulator loop for bucket 5:Getting block 7 of 60  Reserving size (126) for bucket 7  Reserving size (126) for bucket 6  bucket 3: 40%  bucket 2: 60%  bucket 1: 100%  bucket 4: 50%  bucket 5: 10%  bucket 3: 50%  Calculating Z arrays for bucket 6  bucket 4: 60%  bucket 2: 70%Getting block 8 of 60  Reserving size (126) for bucket 8  bucket 4: 70%  bucket 5: 20%  bucket 3: 60%  bucket 2: 80%  Entering block accumulator loop for bucket 6:  Calculating Z arrays for bucket 8  Calculating Z arrays for bucket 7  bucket 3: 70%  bucket 4: 80%  bucket 6: 10%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 2: 90%  bucket 6: 20%  bucket 4: 90%  bucket 3: 80%  Entering block accumulator loop for bucket 7:  bucket 6: 30%  bucket 5: 30%  bucket 3: 90%  bucket 6: 40%  bucket 7: 10%  Entering block accumulator loop for bucket 8:  bucket 5: 40%  bucket 7: 20%  bucket 2: 100%  bucket 3: 100%  bucket 5: 50%  bucket 6: 50%  bucket 7: 30%  bucket 4: 100%  bucket 5: 60%  Sorting block of length 68 for bucket 4  Sorting block of length 106 for bucket 3  (Using difference cover)  (Using difference cover)  bucket 6: 60%  bucket 5: 70%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 7: 40%  bucket 5: 80%  bucket 6: 70%  bucket 5: 90%  bucket 8: 10%  bucket 6: 80%  bucket 7: 50%  bucket 5: 100%  Sorting block of length 63 for bucket 5  bucket 6: 90%  bucket 7: 60%  bucket 8: 20%  bucket 6: 100%  (Using difference cover)  bucket 7: 70%  bucket 8: 30%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 7: 80%  bucket 8: 40%  bucket 7: 90%  bucket 8: 50%  bucket 7: 100%  bucket 8: 60%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 64 for bucket 5Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%Getting block 10 of 60  bucket 9: 80%  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  bucket 10: 30%  bucket 10: 40%  Entering block accumulator loop for bucket 11:  bucket 10: 50%  bucket 11: 10%  bucket 10: 60%  bucket 11: 20%  bucket 10: 70%  bucket 11: 30%  bucket 10: 80%  bucket 11: 40%  bucket 10: 90%  bucket 11: 50%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 11: 60%  Sorting block time: 00:00:00  bucket 11: 70%Returning block of 125 for bucket 9  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 12:  Entering block accumulator loop for bucket 13:  bucket 12: 10%  bucket 13: 10%  bucket 13: 20%  bucket 12: 20%  bucket 13: 30%  bucket 12: 30%  bucket 13: 40%  bucket 12: 40%  bucket 13: 50%  bucket 12: 50%  bucket 13: 60%  bucket 12: 60%  bucket 13: 70%  bucket 13: 80%  bucket 12: 70%  bucket 13: 90%  bucket 12: 80%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%Getting block 15 of 60  bucket 14: 20%  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  Entering block accumulator loop for bucket 15:  bucket 14: 60%  bucket 15: 10%  bucket 14: 70%  bucket 15: 20%  bucket 14: 80%  bucket 15: 30%  bucket 14: 90%  bucket 15: 40%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  bucket 17: 10%  Entering block accumulator loop for bucket 18:  bucket 17: 20%Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  bucket 18: 10%  bucket 17: 30%  Entering block accumulator loop for bucket 19:  bucket 18: 20%  bucket 17: 40%  bucket 19: 10%  bucket 18: 30%  bucket 17: 50%  bucket 19: 20%  bucket 18: 40%  bucket 17: 60%Getting block 20 of 60  bucket 18: 50%  Reserving size (126) for bucket 20  bucket 19: 30%  Calculating Z arrays for bucket 20  bucket 17: 70%  bucket 18: 60%  bucket 19: 40%  bucket 17: 80%  bucket 18: 70%  bucket 19: 50%  bucket 17: 90%  bucket 18: 80%  bucket 19: 60%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 90%  Entering block accumulator loop for bucket 20:  bucket 19: 70%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 80%  bucket 20: 10%  bucket 19: 90%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 19: 100%  bucket 20: 50%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Entering block accumulator loop for bucket 23:  Calculating Z arrays for bucket 24  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  bucket 23: 10%  Entering block accumulator loop for bucket 24:  bucket 23: 20%  Entering block accumulator loop for bucket 22:  bucket 24: 10%  bucket 22: 10%  bucket 23: 30%  bucket 24: 20%  bucket 23: 40%  bucket 22: 20%  bucket 24: 30%  bucket 22: 30%  bucket 23: 50%  bucket 24: 40%  bucket 22: 40%  bucket 23: 60%  bucket 24: 50%  bucket 22: 50%  bucket 23: 70%  bucket 24: 60%  bucket 22: 60%  bucket 23: 80%  bucket 24: 70%  bucket 22: 70%  bucket 23: 90%  bucket 24: 80%  bucket 22: 80%  bucket 23: 100%  bucket 24: 90%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 22: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%Getting block 26 of 60  bucket 25: 40%  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  Entering block accumulator loop for bucket 26:  bucket 25: 80%  bucket 25: 90%  bucket 26: 10%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  Sorting block time: 00:00:00Returning block of 120 for bucket 27  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  bucket 30: 50%  bucket 30: 60%Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 31:  bucket 30: 70%  bucket 30: 80%  bucket 31: 10%  Entering block accumulator loop for bucket 32:  bucket 30: 90%  bucket 31: 20%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 32: 10%  bucket 31: 30%  bucket 32: 20%  bucket 31: 40%  bucket 32: 30%  bucket 31: 50%  bucket 32: 40%  bucket 31: 60%  bucket 32: 50%  bucket 31: 70%  bucket 32: 60%  bucket 31: 80%  bucket 32: 70%  Sorting block time: 00:00:00  bucket 31: 90%Returning block of 125 for bucket 30  bucket 32: 80%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 33:  Entering block accumulator loop for bucket 34:  bucket 33: 10%  bucket 34: 10%  bucket 33: 20%  bucket 34: 20%  bucket 33: 30%  bucket 34: 30%  bucket 33: 40%  bucket 34: 40%  bucket 33: 50%  bucket 34: 50%  bucket 33: 60%  bucket 34: 60%  bucket 33: 70%  bucket 34: 70%  bucket 33: 80%  bucket 34: 80%  bucket 33: 90%  bucket 34: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Entering block accumulator loop for bucket 36:  Calculating Z arrays for bucket 37  bucket 36: 10%  Entering block accumulator loop for bucket 37:  bucket 36: 20%  bucket 37: 10%  bucket 36: 30%  bucket 37: 20%  bucket 36: 40%  bucket 37: 30%  bucket 36: 50%  bucket 37: 40%  bucket 36: 60%  bucket 37: 50%  bucket 36: 70%  bucket 37: 60%  bucket 36: 80%  bucket 37: 70%  bucket 36: 90%  bucket 37: 80%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  bucket 38: 30%  bucket 38: 40%  Entering block accumulator loop for bucket 39:  bucket 38: 50%  bucket 39: 10%  bucket 38: 60%  bucket 39: 20%  bucket 38: 70%  bucket 39: 30%  bucket 38: 80%  bucket 39: 40%  bucket 38: 90%  bucket 39: 50%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%  bucket 40: 40%  bucket 40: 50%  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  bucket 41: 10%  bucket 41: 20%  Entering block accumulator loop for bucket 42:  bucket 41: 30%  bucket 41: 40%  bucket 42: 10%  bucket 41: 50%  bucket 42: 20%  bucket 41: 60%  bucket 41: 70%  bucket 42: 30%  bucket 41: 80%  bucket 42: 40%  bucket 41: 90%  bucket 41: 100%  bucket 42: 50%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 43:  Entering block accumulator loop for bucket 44:  bucket 43: 10%  bucket 44: 10%  bucket 43: 20%  bucket 44: 20%  bucket 43: 30%  bucket 44: 30%  bucket 43: 40%  bucket 44: 40%  bucket 43: 50%  bucket 44: 50%  bucket 43: 60%  bucket 44: 60%  bucket 43: 70%  bucket 44: 70%  bucket 43: 80%  bucket 44: 80%  bucket 43: 90%  bucket 44: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%Getting block 47 of 60  Reserving size (126) for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  bucket 46: 40%  Calculating Z arrays for bucket 47  bucket 46: 50%  Entering block accumulator loop for bucket 48:  bucket 46: 60%  Entering block accumulator loop for bucket 47:  bucket 46: 70%  bucket 48: 10%  bucket 46: 80%  bucket 48: 20%  bucket 47: 10%  bucket 46: 90%  bucket 48: 30%  bucket 47: 20%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 48: 40%  bucket 47: 30%  bucket 48: 50%  bucket 47: 40%  bucket 48: 60%  bucket 47: 50%  bucket 48: 70%  bucket 47: 60%  bucket 47: 70%  bucket 48: 80%  bucket 47: 80%  bucket 48: 90%  bucket 47: 90%  bucket 47: 100%  bucket 48: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00  Sorting block of length 113 for bucket 48Returning block of 70 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  bucket 49: 90%  bucket 49: 100%  Entering block accumulator loop for bucket 50:  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  Sorting block time: 00:00:00Returning block of 75 for bucket 49  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Entering block accumulator loop for bucket 51:  Calculating Z arrays for bucket 52  bucket 51: 10%  Entering block accumulator loop for bucket 52:  bucket 51: 20%  bucket 51: 30%  bucket 52: 10%  bucket 51: 40%  bucket 52: 20%  bucket 52: 30%  bucket 51: 50%  bucket 52: 40%  bucket 51: 60%  bucket 52: 50%  bucket 51: 70%  bucket 52: 60%  bucket 52: 70%  bucket 51: 80%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  bucket 51: 90%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 54:  Entering block accumulator loop for bucket 53:  bucket 54: 10%  bucket 53: 10%  bucket 54: 20%  bucket 53: 20%  bucket 54: 30%  bucket 53: 30%  bucket 54: 40%  bucket 53: 40%  bucket 54: 50%  bucket 53: 50%  bucket 54: 60%  bucket 53: 60%  bucket 54: 70%  bucket 53: 70%  bucket 54: 80%  bucket 54: 90%  bucket 53: 80%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Entering block accumulator loop for bucket 55:  Calculating Z arrays for bucket 56  bucket 55: 10%  Entering block accumulator loop for bucket 56:  bucket 55: 20%  bucket 56: 10%  bucket 55: 30%  bucket 56: 20%  bucket 55: 40%  bucket 56: 30%  bucket 55: 50%  bucket 56: 40%  bucket 55: 60%  bucket 56: 50%  bucket 55: 70%  bucket 56: 60%  bucket 55: 80%  bucket 56: 70%  bucket 55: 90%  bucket 56: 80%  bucket 55: 100%  bucket 56: 90%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  bucket 57: 10%  bucket 57: 20%  Entering block accumulator loop for bucket 58:  bucket 57: 30%  bucket 58: 10%  bucket 57: 40%  bucket 58: 20%  bucket 57: 50%  bucket 58: 30%  bucket 57: 60%  bucket 58: 40%  bucket 57: 70%  bucket 58: 50%  bucket 57: 80%  bucket 58: 60%  bucket 57: 90%  bucket 58: 70%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 59  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  Entering block accumulator loop for bucket 59:  bucket 60: 10%  bucket 59: 10%  bucket 60: 20%  bucket 59: 20%  bucket 60: 30%  bucket 59: 30%  bucket 60: 40%  bucket 59: 40%  bucket 60: 50%  bucket 59: 50%  bucket 60: 60%  bucket 59: 60%  bucket 60: 70%  bucket 59: 70%  bucket 60: 80%  bucket 60: 90%  bucket 59: 80%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #2)" name="1" time="35.677963733673096">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Entering block accumulator loop for bucket 1:  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 2  bucket 1: 10%Getting block 3 of 60  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 2:  bucket 1: 20%Getting block 4 of 60  bucket 1: 30%  bucket 2: 10%  Entering block accumulator loop for bucket 3:  Reserving size (126) for bucket 4Getting block 6 of 60  Reserving size (126) for bucket 6  Calculating Z arrays for bucket 4  bucket 2: 20%Getting block 5 of 60  Entering block accumulator loop for bucket 4:  bucket 2: 30%  Calculating Z arrays for bucket 6  bucket 1: 40%  bucket 3: 10%  bucket 4: 10%  bucket 1: 50%  bucket 3: 20%  Entering block accumulator loop for bucket 6:  bucket 2: 40%  bucket 3: 30%  bucket 1: 60%  bucket 6: 10%  Reserving size (126) for bucket 5  bucket 6: 20%  bucket 1: 70%  bucket 2: 50%  bucket 4: 20%Getting block 7 of 60  bucket 4: 30%  Reserving size (126) for bucket 7  Calculating Z arrays for bucket 5  bucket 2: 60%  bucket 3: 40%  bucket 6: 30%  bucket 1: 80%  Calculating Z arrays for bucket 7Getting block 8 of 60  Reserving size (126) for bucket 8  bucket 3: 50%  bucket 1: 90%  bucket 6: 40%  Entering block accumulator loop for bucket 5:  bucket 4: 40%  bucket 3: 60%  Calculating Z arrays for bucket 8  bucket 2: 70%  bucket 3: 70%  bucket 2: 80%  bucket 1: 100%  bucket 2: 90%  bucket 3: 80%  bucket 5: 10%  Entering block accumulator loop for bucket 7:  bucket 3: 90%  bucket 5: 20%  bucket 2: 100%  bucket 3: 100%  Sorting block of length 84 for bucket 2  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 6: 50%  bucket 4: 50%  bucket 5: 30%  bucket 6: 60%  bucket 7: 10%  Sorting block of length 42 for bucket 1  bucket 6: 70%  (Using difference cover)  bucket 5: 40%  bucket 4: 60%  (Using difference cover)  bucket 7: 20%  bucket 4: 70%  Entering block accumulator loop for bucket 8:  bucket 7: 30%  bucket 6: 80%  bucket 5: 50%  bucket 7: 40%  bucket 4: 80%  bucket 8: 10%  bucket 5: 60%  bucket 6: 90%  bucket 7: 50%  bucket 4: 90%  bucket 5: 70%  bucket 6: 100%  bucket 8: 20%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 7: 60%  bucket 4: 100%  bucket 8: 30%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 7: 70%  bucket 8: 40%  bucket 5: 80%  bucket 7: 80%  bucket 8: 50%  bucket 5: 90%  bucket 7: 90%  bucket 8: 60%  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 7: 100%  bucket 8: 70%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 64 for bucket 5Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 9: 40%  bucket 10: 20%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 10: 60%  bucket 9: 90%  bucket 10: 70%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 125 for bucket 9Getting block 11 of 60Getting block 12 of 60  Reserving size (126) for bucket 11  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 11  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  Entering block accumulator loop for bucket 11:  bucket 12: 10%  bucket 11: 10%  bucket 12: 20%  bucket 11: 20%  bucket 12: 30%  bucket 11: 30%  bucket 12: 40%  bucket 11: 40%  bucket 12: 50%  bucket 11: 50%  bucket 12: 60%  bucket 11: 60%  bucket 12: 70%  bucket 11: 70%  bucket 12: 80%  bucket 11: 80%  bucket 12: 90%  bucket 11: 90%  bucket 12: 100%  bucket 11: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%Getting block 14 of 60  bucket 13: 90%  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  Sorting block time: 00:00:00Returning block of 86 for bucket 13  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 16:  bucket 16: 10%  Entering block accumulator loop for bucket 15:  bucket 16: 20%  bucket 16: 30%  bucket 15: 10%  bucket 16: 40%  bucket 15: 20%  bucket 16: 50%  bucket 15: 30%  bucket 16: 60%  bucket 15: 40%  bucket 16: 70%  bucket 15: 50%  bucket 16: 80%  bucket 15: 60%  bucket 16: 90%  bucket 16: 100%  bucket 15: 70%  Sorting block of length 100 for bucket 16  (Using difference cover)  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  Entering block accumulator loop for bucket 18:  bucket 17: 10%  bucket 18: 10%  bucket 17: 20%  bucket 18: 20%  bucket 17: 30%  bucket 18: 30%  bucket 17: 40%  bucket 18: 40%  bucket 17: 50%  bucket 18: 50%  bucket 17: 60%  bucket 18: 60%  bucket 17: 70%  bucket 18: 70%  bucket 17: 80%  bucket 18: 80%  bucket 17: 90%  bucket 18: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  Sorting block time: 00:00:00Returning block of 108 for bucket 19  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%Getting block 22 of 60  Reserving size (126) for bucket 22  bucket 21: 20%  Calculating Z arrays for bucket 22  bucket 21: 30%  bucket 21: 40%  Entering block accumulator loop for bucket 22:  bucket 21: 50%  bucket 22: 10%  bucket 21: 60%  bucket 22: 20%  bucket 21: 70%  bucket 22: 30%  bucket 21: 80%  bucket 22: 40%  bucket 21: 90%  bucket 22: 50%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  bucket 23: 10%  bucket 23: 20%  Entering block accumulator loop for bucket 24:  bucket 23: 30%  bucket 24: 10%  bucket 23: 40%  bucket 24: 20%  bucket 23: 50%  bucket 24: 30%  bucket 23: 60%  bucket 24: 40%  bucket 23: 70%  bucket 24: 50%  bucket 23: 80%  bucket 24: 60%  bucket 23: 90%  bucket 24: 70%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 25:  bucket 25: 10%  Entering block accumulator loop for bucket 26:  bucket 25: 20%  bucket 26: 10%  bucket 25: 30%  bucket 26: 20%  bucket 25: 40%  bucket 26: 30%  bucket 25: 50%  bucket 26: 40%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 26: 50%  bucket 25: 90%  bucket 26: 60%  bucket 25: 100%  bucket 26: 70%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 20%  Entering block accumulator loop for bucket 28:  bucket 27: 30%  bucket 28: 10%  bucket 27: 40%  bucket 27: 50%  bucket 28: 20%  bucket 27: 60%  bucket 27: 70%  bucket 28: 30%  bucket 27: 80%  bucket 27: 90%  bucket 28: 40%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  bucket 30: 50%  bucket 30: 60%  Entering block accumulator loop for bucket 31:  bucket 30: 70%  bucket 31: 10%  bucket 30: 80%  bucket 31: 20%  bucket 30: 90%  bucket 31: 30%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 31: 40%  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  bucket 32: 10%  bucket 32: 20%  Entering block accumulator loop for bucket 33:  bucket 32: 30%  bucket 32: 40%  bucket 33: 10%  bucket 32: 50%  bucket 32: 60%  bucket 33: 20%  bucket 32: 70%  bucket 33: 30%  bucket 32: 80%  bucket 32: 90%  bucket 33: 40%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 34: 20%  bucket 34: 30%  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 35:  bucket 35: 10%  Entering block accumulator loop for bucket 36:  bucket 35: 20%  bucket 36: 10%  bucket 35: 30%  bucket 36: 20%  bucket 35: 40%  bucket 36: 30%  bucket 35: 50%  bucket 36: 40%  bucket 35: 60%  bucket 36: 50%  bucket 35: 70%  bucket 36: 60%  bucket 35: 80%  bucket 36: 70%  bucket 35: 90%  bucket 36: 80%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 37:  bucket 37: 10%  Entering block accumulator loop for bucket 38:  bucket 37: 20%  bucket 38: 10%  bucket 37: 30%  bucket 38: 20%  bucket 37: 40%  bucket 38: 30%  bucket 37: 50%  bucket 38: 40%  bucket 37: 60%  bucket 38: 50%  bucket 37: 70%  bucket 38: 60%  bucket 37: 80%  bucket 38: 70%  bucket 37: 90%  bucket 38: 80%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:  bucket 39: 10%  bucket 39: 20%  bucket 39: 30%  bucket 39: 40%  bucket 39: 50%  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 40:  bucket 40: 10%  Entering block accumulator loop for bucket 41:  bucket 40: 20%  bucket 40: 30%  bucket 41: 10%  bucket 40: 40%  bucket 40: 50%  bucket 41: 20%  bucket 40: 60%  bucket 40: 70%  bucket 41: 30%  bucket 40: 80%  bucket 40: 90%  bucket 41: 40%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 41: 50%  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:Getting block 43 of 60  Reserving size (126) for bucket 43  bucket 42: 10%  Calculating Z arrays for bucket 43  bucket 42: 20%  Entering block accumulator loop for bucket 43:  bucket 42: 30%  bucket 43: 10%  bucket 43: 20%  bucket 42: 40%  bucket 43: 30%  bucket 43: 40%  bucket 42: 50%  bucket 43: 50%  bucket 42: 60%  bucket 43: 60%  bucket 43: 70%  bucket 42: 70%  bucket 43: 80%  bucket 42: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60Getting block 46 of 60  Reserving size (126) for bucket 46  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 46  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 46:  Entering block accumulator loop for bucket 45:  bucket 45: 10%  bucket 46: 10%  bucket 45: 20%  bucket 46: 20%  bucket 45: 30%  bucket 45: 40%  bucket 46: 30%  bucket 45: 50%  bucket 46: 40%  bucket 45: 60%  bucket 45: 70%  bucket 46: 50%  bucket 45: 80%  bucket 46: 60%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%Getting block 48 of 60  bucket 47: 50%  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  bucket 47: 60%  bucket 47: 70%  Entering block accumulator loop for bucket 48:  bucket 47: 80%  bucket 48: 10%  bucket 47: 90%  bucket 48: 20%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%Getting block 51 of 60  Reserving size (126) for bucket 51  bucket 50: 30%  Calculating Z arrays for bucket 51  bucket 50: 40%  Entering block accumulator loop for bucket 51:  bucket 50: 50%  bucket 51: 10%  bucket 50: 60%  bucket 51: 20%  bucket 50: 70%  bucket 51: 30%  bucket 50: 80%  bucket 51: 40%  bucket 50: 90%  bucket 51: 50%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Entering block accumulator loop for bucket 52:  Calculating Z arrays for bucket 53  bucket 52: 10%  Entering block accumulator loop for bucket 53:  bucket 52: 20%  bucket 53: 10%  bucket 53: 20%  bucket 52: 30%  bucket 53: 30%  bucket 52: 40%  bucket 53: 40%  bucket 52: 50%  bucket 53: 50%  bucket 53: 60%  bucket 52: 60%  bucket 53: 70%  bucket 52: 70%  bucket 53: 80%  bucket 53: 90%  bucket 52: 80%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  bucket 54: 10%  bucket 54: 20%  Entering block accumulator loop for bucket 55:  bucket 54: 30%  bucket 55: 10%  bucket 55: 20%  bucket 54: 40%  bucket 55: 30%  bucket 54: 50%  bucket 55: 40%  bucket 54: 60%  bucket 55: 50%  bucket 54: 70%  bucket 55: 60%  bucket 54: 80%  bucket 55: 70%  bucket 54: 90%  bucket 55: 80%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%Getting block 57 of 60  bucket 56: 60%  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  Entering block accumulator loop for bucket 57:  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  Sorting block time: 00:00:00Returning block of 56 for bucket 56  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 58:  Entering block accumulator loop for bucket 59:  bucket 58: 10%  bucket 59: 10%  bucket 58: 20%  bucket 59: 20%  bucket 58: 30%  bucket 59: 30%  bucket 58: 40%  bucket 59: 40%  bucket 59: 50%  bucket 58: 50%  bucket 59: 60%  bucket 58: 60%  bucket 59: 70%  bucket 58: 70%  bucket 59: 80%  bucket 58: 80%  bucket 59: 90%  bucket 58: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #11)" name="10" time="33.49240493774414">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2Getting block 3 of 60  Reserving size (126) for bucket 3  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 3Getting block 5 of 60  Entering block accumulator loop for bucket 3:Getting block 4 of 60  bucket 3: 10%  Reserving size (126) for bucket 5  bucket 1: 10%  bucket 3: 20%  Entering block accumulator loop for bucket 2:  Reserving size (126) for bucket 4  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 4  bucket 3: 30%  bucket 1: 20%  bucket 3: 40%  Entering block accumulator loop for bucket 5:Getting block 6 of 60  Reserving size (126) for bucket 6  bucket 1: 30%Getting block 7 of 60Getting block 8 of 60  Reserving size (126) for bucket 8  bucket 2: 10%  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 4:  Calculating Z arrays for bucket 6  bucket 2: 20%  bucket 5: 10%  bucket 3: 50%  bucket 2: 30%  Reserving size (126) for bucket 7  bucket 1: 40%  bucket 3: 60%  bucket 4: 10%  Entering block accumulator loop for bucket 6:  Entering block accumulator loop for bucket 8:  Calculating Z arrays for bucket 7  bucket 5: 20%  bucket 8: 10%  bucket 2: 40%  bucket 6: 10%  bucket 2: 50%  bucket 8: 20%  Entering block accumulator loop for bucket 7:  bucket 3: 70%  bucket 5: 30%  bucket 2: 60%  bucket 4: 20%  bucket 5: 40%  bucket 6: 20%  bucket 7: 10%  bucket 2: 70%  bucket 5: 50%  bucket 4: 30%  bucket 3: 80%  bucket 1: 50%  bucket 5: 60%  bucket 3: 90%  bucket 8: 30%  bucket 1: 60%  bucket 3: 100%  bucket 8: 40%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 6: 30%  bucket 5: 70%  bucket 7: 20%  bucket 6: 40%  bucket 2: 80%  bucket 8: 50%  bucket 5: 80%  bucket 4: 40%  bucket 8: 60%  bucket 7: 30%  bucket 2: 90%  bucket 4: 50%  bucket 5: 90%  bucket 2: 100%  bucket 4: 60%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 6: 50%  bucket 4: 70%  bucket 5: 100%  bucket 1: 70%  bucket 8: 70%  Sorting block of length 63 for bucket 5  bucket 4: 80%  (Using difference cover)  bucket 6: 60%  bucket 1: 80%  bucket 8: 80%  bucket 4: 90%  bucket 7: 40%  bucket 6: 70%  bucket 4: 100%  bucket 1: 90%  bucket 7: 50%  Sorting block of length 68 for bucket 4  bucket 8: 90%  bucket 6: 80%  bucket 1: 100%  (Using difference cover)  bucket 8: 100%  bucket 6: 90%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 7: 60%  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 91 for bucket 6Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  bucket 9: 40%  bucket 10: 20%  bucket 9: 50%  bucket 10: 30%  Entering block accumulator loop for bucket 11:  bucket 10: 40%  bucket 9: 60%  bucket 11: 10%  bucket 10: 50%  bucket 9: 70%  bucket 11: 20%  bucket 10: 60%  bucket 9: 80%  bucket 11: 30%  bucket 10: 70%  bucket 9: 90%  bucket 11: 40%  bucket 10: 80%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 11: 50%  bucket 10: 90%  bucket 11: 60%  bucket 10: 100%  bucket 11: 70%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 12 of 60  Reserving size (126) for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  Entering block accumulator loop for bucket 13:  bucket 12: 10%  bucket 13: 10%  bucket 12: 20%  bucket 13: 20%  bucket 12: 30%  bucket 13: 30%  bucket 12: 40%  bucket 13: 40%  bucket 12: 50%  bucket 13: 50%  bucket 12: 60%  bucket 13: 60%  bucket 12: 70%  bucket 13: 70%  bucket 12: 80%  bucket 13: 80%  bucket 12: 90%  bucket 13: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 14:  bucket 14: 10%  Entering block accumulator loop for bucket 15:  bucket 14: 20%  bucket 15: 10%  bucket 14: 30%  bucket 15: 20%  bucket 14: 40%  bucket 15: 30%  bucket 14: 50%  bucket 15: 40%  bucket 14: 60%  bucket 15: 50%  bucket 14: 70%  bucket 15: 60%  bucket 14: 80%  bucket 15: 70%  bucket 14: 90%  bucket 15: 80%  bucket 14: 100%  bucket 15: 90%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 16:  bucket 16: 10%  Entering block accumulator loop for bucket 17:  bucket 16: 20%  bucket 17: 10%  bucket 16: 30%  bucket 17: 20%  bucket 16: 40%  bucket 17: 30%  bucket 16: 50%  bucket 17: 40%  bucket 16: 60%  bucket 17: 50%  bucket 16: 70%  bucket 17: 60%  bucket 16: 80%  bucket 17: 70%  bucket 16: 90%  bucket 17: 80%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  bucket 18: 80%  bucket 18: 90%  Entering block accumulator loop for bucket 19:  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 20:  bucket 20: 10%  Entering block accumulator loop for bucket 21:  bucket 20: 20%  bucket 21: 10%  bucket 20: 30%  bucket 21: 20%  bucket 20: 40%  bucket 21: 30%  bucket 20: 50%  bucket 21: 40%  bucket 21: 50%  bucket 20: 60%  bucket 21: 60%  bucket 20: 70%  bucket 21: 70%  bucket 20: 80%  bucket 21: 80%  bucket 20: 90%  bucket 21: 90%  bucket 20: 100%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 22:  Entering block accumulator loop for bucket 23:  bucket 22: 10%  bucket 23: 10%  bucket 22: 20%  bucket 23: 20%  bucket 22: 30%  bucket 23: 30%  bucket 22: 40%  bucket 23: 40%  bucket 22: 50%  bucket 23: 50%  bucket 22: 60%  bucket 23: 60%  bucket 22: 70%  bucket 23: 70%  bucket 22: 80%  bucket 23: 80%  bucket 22: 90%  bucket 23: 90%  bucket 22: 100%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 60  Entering block accumulator loop for bucket 24:  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  bucket 24: 10%  bucket 24: 20%  Entering block accumulator loop for bucket 25:  bucket 24: 30%  bucket 24: 40%  bucket 25: 10%  bucket 24: 50%  bucket 24: 60%  bucket 25: 20%  bucket 24: 70%  bucket 24: 80%  bucket 25: 30%  bucket 24: 90%  bucket 25: 40%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 27:  bucket 27: 10%  Entering block accumulator loop for bucket 28:  bucket 27: 20%  bucket 28: 10%  bucket 27: 30%  bucket 28: 20%  bucket 27: 40%  bucket 28: 30%  bucket 27: 50%  bucket 28: 40%  bucket 27: 60%  bucket 28: 50%  bucket 28: 60%  bucket 27: 70%  bucket 28: 70%  bucket 27: 80%  bucket 28: 80%  bucket 27: 90%  bucket 28: 90%  bucket 27: 100%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:Getting block 30 of 60  Reserving size (126) for bucket 30  bucket 29: 10%  Calculating Z arrays for bucket 30  bucket 29: 20%  bucket 29: 30%  Entering block accumulator loop for bucket 30:  bucket 29: 40%  bucket 30: 10%  bucket 29: 50%  bucket 30: 20%  bucket 29: 60%  bucket 30: 30%  bucket 29: 70%  bucket 30: 40%  bucket 29: 80%  bucket 30: 50%  bucket 29: 90%  bucket 30: 60%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 31:  Entering block accumulator loop for bucket 32:  bucket 31: 10%  bucket 32: 10%  bucket 31: 20%  bucket 32: 20%  bucket 31: 30%  bucket 32: 30%  bucket 31: 40%  bucket 32: 40%  bucket 31: 50%  bucket 32: 50%  bucket 31: 60%  bucket 32: 60%  bucket 31: 70%  bucket 32: 70%  bucket 31: 80%  bucket 32: 80%  bucket 31: 90%  bucket 32: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 33: 20%  bucket 33: 30%  bucket 33: 40%Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  bucket 33: 50%  bucket 33: 60%  Entering block accumulator loop for bucket 34:  bucket 33: 70%  bucket 34: 10%  bucket 33: 80%  bucket 34: 20%  bucket 33: 90%  bucket 34: 30%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 35:  bucket 35: 10%  Entering block accumulator loop for bucket 36:  bucket 35: 20%  bucket 36: 10%  bucket 35: 30%  bucket 35: 40%  bucket 36: 20%  bucket 35: 50%  bucket 36: 30%  bucket 35: 60%  bucket 36: 40%  bucket 35: 70%  bucket 36: 50%  bucket 35: 80%  bucket 36: 60%  bucket 35: 90%  bucket 36: 70%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  bucket 37: 20%  bucket 37: 30%  Entering block accumulator loop for bucket 38:  bucket 37: 40%  bucket 38: 10%  bucket 37: 50%  bucket 38: 20%  bucket 37: 60%  bucket 38: 30%  bucket 37: 70%  bucket 38: 40%  bucket 37: 80%  bucket 38: 50%  bucket 37: 90%  bucket 38: 60%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:  bucket 39: 10%  bucket 39: 20%  bucket 39: 30%Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  bucket 39: 40%  bucket 39: 50%  Entering block accumulator loop for bucket 40:  bucket 39: 60%  bucket 40: 10%  bucket 39: 70%  bucket 40: 20%  bucket 39: 80%  bucket 40: 30%  bucket 39: 90%  bucket 40: 40%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 50%  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%  bucket 41: 40%  bucket 41: 50%  bucket 41: 60%  Entering block accumulator loop for bucket 42:  bucket 41: 70%  bucket 41: 80%  bucket 42: 10%  bucket 41: 90%  bucket 42: 20%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 30%  bucket 42: 40%  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  Sorting block time: 00:00:00Returning block of 89 for bucket 41  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 43:  Entering block accumulator loop for bucket 44:  bucket 43: 10%Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  bucket 43: 20%  bucket 44: 10%  bucket 43: 30%  Entering block accumulator loop for bucket 45:  bucket 44: 20%  bucket 43: 40%  bucket 45: 10%  bucket 43: 50%  bucket 45: 20%  bucket 43: 60%  bucket 44: 30%  bucket 45: 30%  bucket 43: 70%  bucket 44: 40%  bucket 45: 40%  bucket 43: 80%  bucket 44: 50%  bucket 45: 50%  bucket 43: 90%  bucket 44: 60%  bucket 45: 60%  bucket 43: 100%  bucket 44: 70%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 45: 70%  bucket 44: 80%  bucket 45: 80%  bucket 44: 90%  bucket 45: 90%  bucket 44: 100%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 46:  Entering block accumulator loop for bucket 47:  bucket 46: 10%  bucket 46: 20%  bucket 47: 10%  bucket 46: 30%  bucket 47: 20%  bucket 46: 40%  bucket 47: 30%  bucket 46: 50%  bucket 47: 40%  bucket 46: 60%  bucket 46: 70%  bucket 47: 50%  bucket 46: 80%  bucket 47: 60%  bucket 46: 90%  bucket 47: 70%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  bucket 49: 10%  bucket 49: 20%  Entering block accumulator loop for bucket 50:  bucket 49: 30%  bucket 50: 10%  bucket 49: 40%  bucket 50: 20%  bucket 49: 50%  bucket 50: 30%  bucket 49: 60%  bucket 50: 40%  bucket 50: 50%  bucket 49: 70%  bucket 50: 60%  bucket 49: 80%  bucket 50: 70%  bucket 49: 90%  bucket 50: 80%  bucket 49: 100%  Sorting block of length 74 for bucket 49  bucket 50: 90%  (Using difference cover)  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  Entering block accumulator loop for bucket 51:  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  bucket 51: 10%  bucket 51: 20%  bucket 51: 30%  Entering block accumulator loop for bucket 52:  bucket 51: 40%  bucket 51: 50%  bucket 52: 10%  bucket 51: 60%  bucket 52: 20%  bucket 51: 70%  bucket 51: 80%  bucket 52: 30%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 40%  bucket 52: 50%  bucket 52: 60%  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  Sorting block time: 00:00:00Returning block of 92 for bucket 51  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  bucket 53: 30%  bucket 53: 40%  Entering block accumulator loop for bucket 54:  bucket 53: 50%  bucket 54: 10%  bucket 53: 60%  bucket 54: 20%  bucket 53: 70%  bucket 54: 30%  bucket 53: 80%  bucket 54: 40%  bucket 53: 90%  bucket 54: 50%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  bucket 55: 30%  bucket 55: 40%  Entering block accumulator loop for bucket 56:  bucket 55: 50%  bucket 56: 10%  bucket 55: 60%  bucket 56: 20%  bucket 55: 70%  bucket 56: 30%  bucket 55: 80%  bucket 56: 40%  bucket 55: 90%  bucket 56: 50%  bucket 55: 100%  Sorting block of length 79 for bucket 55  bucket 56: 60%  (Using difference cover)  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  bucket 57: 50%  bucket 57: 60%  Entering block accumulator loop for bucket 58:  bucket 57: 70%  bucket 58: 10%  bucket 58: 20%  bucket 57: 80%  bucket 58: 30%  bucket 57: 90%  bucket 58: 40%  bucket 57: 100%  bucket 58: 50%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 59:  bucket 59: 10%  bucket 59: 20%  bucket 59: 30%  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:01HISAT2 summary stats:Total reads: 10Aligned 0 time: 0 (0.00%)Aligned 1 time: 10 (100.00%)Aligned >1 times: 0 (0.00%)Overall alignment rate: 100.00%
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #11)" name="10" time="34.98808407783508">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:01Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Entering block accumulator loop for bucket 1:  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 2  bucket 1: 10%  bucket 1: 20%  Entering block accumulator loop for bucket 2:Getting block 3 of 60  Reserving size (126) for bucket 3  bucket 1: 30%  bucket 2: 10%  Calculating Z arrays for bucket 3  bucket 1: 40%  bucket 2: 20%  bucket 1: 50%  bucket 2: 30%  bucket 1: 60%  bucket 2: 40%  Entering block accumulator loop for bucket 3:  bucket 1: 70%Getting block 4 of 60  bucket 2: 50%  Reserving size (126) for bucket 4  bucket 3: 10%  bucket 2: 60%Getting block 5 of 60Getting block 7 of 60  bucket 1: 80%Getting block 6 of 60Getting block 8 of 60  bucket 2: 70%  bucket 3: 20%  Reserving size (126) for bucket 7  bucket 3: 30%  bucket 1: 90%  Reserving size (126) for bucket 6  bucket 2: 80%  Calculating Z arrays for bucket 7  Reserving size (126) for bucket 8  Calculating Z arrays for bucket 6  bucket 3: 40%  Calculating Z arrays for bucket 4  bucket 2: 90%  Calculating Z arrays for bucket 8  bucket 3: 50%  Reserving size (126) for bucket 5  Entering block accumulator loop for bucket 6:  Entering block accumulator loop for bucket 7:  bucket 3: 60%  bucket 2: 100%  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 4:  bucket 1: 100%  bucket 3: 70%  bucket 7: 10%  Sorting block of length 42 for bucket 1  bucket 3: 80%  (Using difference cover)  Entering block accumulator loop for bucket 5:  bucket 4: 10%  bucket 3: 90%  bucket 7: 20%  Sorting block of length 84 for bucket 2  (Using difference cover)  Entering block accumulator loop for bucket 8:  bucket 4: 20%  bucket 3: 100%  bucket 7: 30%  bucket 4: 30%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 8: 10%  bucket 6: 10%  bucket 5: 10%  bucket 4: 40%  bucket 7: 40%  bucket 6: 20%  bucket 8: 20%  bucket 4: 50%  bucket 5: 20%  bucket 7: 50%  bucket 4: 60%  bucket 6: 30%  bucket 5: 30%  bucket 7: 60%  bucket 8: 30%  bucket 6: 40%  bucket 5: 40%  bucket 7: 70%  bucket 6: 50%  bucket 7: 80%  bucket 8: 40%  bucket 7: 90%  bucket 4: 70%  bucket 8: 50%  bucket 7: 100%  Sorting block time: 00:00:00  bucket 6: 60%  bucket 5: 50%  bucket 4: 80%Returning block of 43 for bucket 1  bucket 6: 70%  bucket 4: 90%  bucket 8: 60%  bucket 6: 80%  bucket 4: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 8: 70%  bucket 5: 60%  bucket 8: 80%  bucket 6: 90%  bucket 5: 70%  bucket 8: 90%  bucket 6: 100%  Sorting block of length 90 for bucket 6  bucket 8: 100%  bucket 5: 80%  (Using difference cover)  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 5: 90%  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 85 for bucket 2Getting block 9 of 60  Reserving size (126) for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 10: 20%  bucket 10: 30%  bucket 9: 30%  bucket 10: 40%  bucket 9: 40%  bucket 10: 50%  bucket 9: 50%  bucket 10: 60%  bucket 9: 60%  bucket 10: 70%  bucket 9: 70%  bucket 10: 80%  bucket 9: 80%  bucket 10: 90%  bucket 9: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 125 for bucket 9Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 60  Entering block accumulator loop for bucket 11:  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 10%  Entering block accumulator loop for bucket 12:  bucket 11: 20%  bucket 12: 10%  bucket 11: 30%  bucket 12: 20%  bucket 11: 40%  bucket 12: 30%  bucket 11: 50%  bucket 12: 40%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 12: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  Entering block accumulator loop for bucket 14:  bucket 13: 70%  bucket 13: 80%  bucket 14: 10%  bucket 13: 90%  bucket 14: 20%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 16:  Entering block accumulator loop for bucket 15:  bucket 16: 10%  bucket 15: 10%  bucket 16: 20%  bucket 15: 20%  bucket 16: 30%  bucket 15: 30%  bucket 16: 40%  bucket 15: 40%  bucket 16: 50%  bucket 15: 50%  bucket 16: 60%  bucket 15: 60%  bucket 16: 70%  bucket 15: 70%  bucket 16: 80%  bucket 15: 80%  bucket 16: 90%  bucket 15: 90%  bucket 16: 100%  bucket 15: 100%  Sorting block of length 68 for bucket 15  Sorting block of length 100 for bucket 16  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60Getting block 18 of 60  Reserving size (126) for bucket 18  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  Entering block accumulator loop for bucket 18:  bucket 17: 10%  bucket 18: 10%  bucket 17: 20%  bucket 18: 20%  bucket 17: 30%  bucket 17: 40%  bucket 18: 30%  bucket 17: 50%  bucket 18: 40%  bucket 17: 60%  bucket 17: 70%  bucket 18: 50%  bucket 17: 80%  bucket 18: 60%  bucket 17: 90%  bucket 17: 100%  bucket 18: 70%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  Entering block accumulator loop for bucket 21:  bucket 20: 70%  bucket 20: 80%  bucket 21: 10%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  bucket 21: 20%  (Using difference cover)  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 22:  bucket 22: 10%  Entering block accumulator loop for bucket 23:  bucket 22: 20%  bucket 23: 10%  bucket 22: 30%  bucket 23: 20%  bucket 22: 40%  bucket 23: 30%  bucket 22: 50%  bucket 23: 40%  bucket 22: 60%  bucket 23: 50%  bucket 22: 70%  bucket 23: 60%  bucket 22: 80%  bucket 23: 70%  bucket 22: 90%  bucket 23: 80%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  bucket 24: 10%  Entering block accumulator loop for bucket 25:  bucket 24: 20%  bucket 25: 10%  bucket 24: 30%  bucket 25: 20%  bucket 24: 40%  bucket 25: 30%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 25: 40%  bucket 24: 80%  bucket 25: 50%  bucket 24: 90%  bucket 24: 100%  bucket 25: 60%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%Getting block 28 of 60  bucket 27: 80%  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  Sorting block time: 00:00:00  (Using difference cover)Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  bucket 29: 10%  Entering block accumulator loop for bucket 30:  bucket 29: 20%  bucket 29: 30%  bucket 30: 10%  bucket 29: 40%  bucket 30: 20%  bucket 29: 50%  bucket 30: 30%  bucket 29: 60%  bucket 29: 70%  bucket 30: 40%  bucket 29: 80%  bucket 30: 50%  bucket 29: 90%  bucket 30: 60%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 31:  Entering block accumulator loop for bucket 32:  bucket 31: 10%  bucket 32: 10%  bucket 31: 20%  bucket 32: 20%  bucket 31: 30%  bucket 32: 30%  bucket 31: 40%  bucket 32: 40%  bucket 32: 50%  bucket 31: 50%  bucket 32: 60%  bucket 31: 60%  bucket 32: 70%  bucket 31: 70%  bucket 32: 80%  bucket 32: 90%  bucket 31: 80%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 33: 20%  bucket 33: 30%  bucket 33: 40%  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%Getting block 35 of 60  Reserving size (126) for bucket 35  bucket 34: 20%  Calculating Z arrays for bucket 35  bucket 34: 30%  Entering block accumulator loop for bucket 35:  bucket 34: 40%  bucket 34: 50%  bucket 35: 10%  bucket 34: 60%  bucket 35: 20%  bucket 34: 70%  bucket 35: 30%  bucket 34: 80%  bucket 35: 40%  bucket 34: 90%  bucket 35: 50%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 36: 20%Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  bucket 36: 30%  bucket 36: 40%  Entering block accumulator loop for bucket 37:  bucket 36: 50%  bucket 37: 10%  bucket 36: 60%  bucket 37: 20%  bucket 36: 70%  bucket 37: 30%  bucket 36: 80%  bucket 37: 40%  bucket 36: 90%  bucket 37: 50%  bucket 36: 100%  bucket 37: 60%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  bucket 39: 10%  bucket 39: 20%  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 39: 30%  bucket 40: 20%  bucket 39: 40%  bucket 40: 30%  bucket 39: 50%  bucket 40: 40%  bucket 39: 60%  bucket 40: 50%  bucket 39: 70%  bucket 40: 60%  bucket 39: 80%  bucket 40: 70%  bucket 39: 90%  bucket 40: 80%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 41:  Entering block accumulator loop for bucket 42:  bucket 41: 10%  bucket 42: 10%  bucket 41: 20%  bucket 42: 20%  bucket 41: 30%  bucket 42: 30%  bucket 41: 40%  bucket 42: 40%  bucket 41: 50%  bucket 42: 50%  bucket 41: 60%  bucket 42: 60%  bucket 41: 70%  bucket 42: 70%  bucket 41: 80%  bucket 42: 80%  bucket 41: 90%  bucket 42: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 43:  bucket 43: 10%  Entering block accumulator loop for bucket 44:  bucket 43: 20%  bucket 44: 10%  bucket 43: 30%  bucket 44: 20%  bucket 43: 40%  bucket 44: 30%  bucket 43: 50%  bucket 44: 40%  bucket 43: 60%  bucket 44: 50%  bucket 43: 70%  bucket 44: 60%  bucket 43: 80%  bucket 44: 70%  bucket 43: 90%  bucket 44: 80%  bucket 43: 100%  Sorting block of length 121 for bucket 43  bucket 44: 90%  (Using difference cover)  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Entering block accumulator loop for bucket 45:  Calculating Z arrays for bucket 46  bucket 45: 10%  bucket 45: 20%  Entering block accumulator loop for bucket 46:  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 46: 10%  bucket 45: 60%  bucket 46: 20%  bucket 45: 70%  bucket 45: 80%  bucket 46: 30%  bucket 45: 90%  bucket 46: 40%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 48 of 60  Reserving size (126) for bucket 48Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 48  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  Entering block accumulator loop for bucket 48:  bucket 47: 10%  bucket 48: 10%  bucket 47: 20%  bucket 48: 20%  bucket 47: 30%  bucket 48: 30%  bucket 47: 40%  bucket 47: 50%  bucket 48: 40%  bucket 47: 60%  bucket 48: 50%  bucket 47: 70%  bucket 48: 60%  bucket 47: 80%  bucket 48: 70%  bucket 47: 90%  bucket 48: 80%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49Getting block 50 of 60  Entering block accumulator loop for bucket 49:  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  Entering block accumulator loop for bucket 50:  bucket 49: 40%  bucket 49: 50%  bucket 50: 10%  bucket 49: 60%  bucket 49: 70%  bucket 50: 20%  bucket 49: 80%  bucket 49: 90%  bucket 50: 30%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  Sorting block time: 00:00:00  (Using difference cover)Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60Getting block 52 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 51:  Entering block accumulator loop for bucket 52:  bucket 51: 10%  bucket 51: 20%  bucket 51: 30%  bucket 52: 10%  bucket 51: 40%  bucket 51: 50%  bucket 52: 20%  bucket 51: 60%  bucket 52: 30%  bucket 51: 70%  bucket 51: 80%  bucket 52: 40%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 50%  bucket 52: 60%  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 53: 80%  bucket 54: 20%  bucket 54: 30%  bucket 53: 90%  bucket 54: 40%  bucket 54: 50%  bucket 53: 100%  Sorting block of length 78 for bucket 53  bucket 54: 60%  bucket 54: 70%  (Using difference cover)  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  bucket 56: 20%  bucket 56: 30%  Entering block accumulator loop for bucket 57:  bucket 56: 40%  bucket 57: 10%  bucket 56: 50%  bucket 57: 20%  bucket 56: 60%  bucket 57: 30%  bucket 56: 70%  bucket 57: 40%  bucket 57: 50%  bucket 56: 80%  bucket 57: 60%  bucket 56: 90%  bucket 57: 70%  bucket 56: 100%  bucket 57: 80%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 58:  Entering block accumulator loop for bucket 59:  bucket 58: 10%  bucket 59: 10%  bucket 58: 20%  bucket 59: 20%  bucket 58: 30%  bucket 59: 30%  bucket 59: 40%  bucket 58: 40%  bucket 59: 50%  bucket 58: 50%  bucket 59: 60%  bucket 58: 60%  bucket 59: 70%  bucket 58: 70%  bucket 59: 80%  bucket 59: 90%  bucket 58: 80%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:01HISAT2 summary stats:Total reads: 10Aligned 0 time: 0 (0.00%)Aligned 1 time: 10 (100.00%)Aligned >1 times: 0 (0.00%)Overall alignment rate: 100.00%
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #12)" name="11" time="25.293378114700317">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "library|input_1": {   "id": "441be73502c80dcb",   "src": "hda"  },  "library|type": "paired_interleaved",  "reference_genome|history_item": {   "id": "0d4e1163526023a9",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "set -o pipefail;  ln -s \u0027/galaxy/server/database/objects/9/3/b/dataset_93bceeb9-d1e1-4493-a78c-62c4edb43561.dat\u0027 genome.fa \u0026\u0026 hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome \u0026\u0026        seqtk seq -1 \u0027/galaxy/server/database/objects/2/e/7/dataset_2e71987d-fbde-4b13-82c4-7a485dde7d96.dat\u0027 \u003e input_f.fastq \u0026\u0026 seqtk seq -2 \u0027/galaxy/server/database/objects/2/e/7/dataset_2e71987d-fbde-4b13-82c4-7a485dde7d96.dat\u0027 \u003e input_r.fastq \u0026\u0026    hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027genome\u0027    -1 input_f.fastq -2 input_r.fastq                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/f/1/3/dataset_f131645e-fcb2-4e51-8bb4-4aef97b4846d.dat\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-10T07:04:18.440884",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-wfbc7",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "8ebfc156b64594f2",  "inputs": {   "library|input_1": {    "id": "441be73502c80dcb",    "src": "hda",    "uuid": "2e71987d-fbde-4b13-82c4-7a485dde7d96"   },   "reference_genome|history_item": {    "id": "0d4e1163526023a9",    "src": "hda",    "uuid": "93bceeb9-d1e1-4493-a78c-62c4edb43561"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "c945dc4062f26cb1",    "src": "hda",    "uuid": "f131645e-fcb2-4e51-8bb4-4aef97b4846d"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 245, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}",   "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 244, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "error",  "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n",  "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\nGetting block 3 of 60\n  Reserving size (126) for bucket 2\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Calculating Z arrays for bucket 4\nGetting block 6 of 60\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 30%\n  Reserving size (126) for bucket 6\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 40%\n  bucket 2: 10%\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 2: 20%\n  Calculating Z arrays for bucket 6\n  bucket 1: 50%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 7: 10%\n  bucket 3: 10%\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 7: 20%\n  bucket 2: 40%\n  bucket 7: 30%\n  bucket 1: 60%\n  bucket 2: 50%\nGetting block 8 of 60\n  bucket 3: 20%\n  bucket 4: 40%\n  bucket 6: 20%\n  Reserving size (126) for bucket 8\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 2: 60%\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 5\n  bucket 3: 30%\n  bucket 1: 70%\n  bucket 7: 40%\n  bucket 4: 50%\n  bucket 6: 30%\n  bucket 1: 80%\n  bucket 7: 50%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 3: 40%\n  bucket 7: 60%\n  bucket 1: 100%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 40%\n  bucket 2: 70%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 4: 70%\n  bucket 7: 80%\n  bucket 5: 10%\n  bucket 6: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 3: 50%\n  bucket 5: 20%\n  bucket 8: 10%\n  bucket 2: 80%\n  bucket 7: 90%\n  bucket 6: 60%\n  bucket 5: 30%\n  bucket 2: 90%\n  bucket 7: 100%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 5: 40%\n  bucket 6: 70%\n  bucket 3: 70%\n  bucket 5: 50%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 3: 80%\n  bucket 6: 80%\n  bucket 4: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 5: 60%\n  bucket 6: 90%\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  bucket 5: 70%\n  bucket 8: 20%\n  bucket 2: 100%\n  bucket 6: 100%\n  bucket 3: 100%\n  bucket 5: 80%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 8: 30%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 8: 40%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 14: 10%\n  bucket 13: 80%\n  bucket 14: 20%\n  bucket 13: 90%\n  bucket 14: 30%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 30%\n  bucket 16: 10%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 16: 20%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 15: 70%\n  bucket 16: 40%\n  bucket 15: 80%\n  bucket 16: 50%\n  bucket 15: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 17: 100%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  bucket 19: 30%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 40%\n  bucket 20: 10%\n  bucket 19: 50%\n  bucket 20: 20%\n  bucket 19: 60%\n  bucket 20: 30%\n  bucket 19: 70%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 19: 90%\n  bucket 20: 70%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 50%\n  bucket 23: 60%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 70%\n  bucket 24: 10%\n  bucket 23: 80%\n  bucket 24: 20%\n  bucket 23: 90%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  bucket 24: 50%\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\nGetting block 26 of 60\n  bucket 25: 30%\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 26: 10%\n  bucket 25: 90%\n  bucket 26: 20%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 10%\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 30%\n  bucket 30: 40%\n  bucket 29: 40%\n  bucket 30: 50%\n  bucket 29: 50%\n  bucket 30: 60%\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 29: 70%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 80%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 90%\n  bucket 31: 100%\n  bucket 32: 10%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  bucket 34: 10%\n  Calculating Z arrays for bucket 35\n  bucket 34: 20%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 30%\n  bucket 35: 10%\n  bucket 34: 40%\n  bucket 35: 20%\n  bucket 34: 50%\n  bucket 35: 30%\n  bucket 34: 60%\n  bucket 35: 40%\n  bucket 34: 70%\n  bucket 35: 50%\n  bucket 34: 80%\n  bucket 35: 60%\n  bucket 34: 90%\n  bucket 35: 70%\n  bucket 34: 100%\n  bucket 35: 80%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  Calculating Z arrays for bucket 36\n  bucket 37: 10%\n  bucket 37: 20%\n  Entering block accumulator loop for bucket 36:\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 36: 10%\n  bucket 37: 50%\n  bucket 36: 20%\n  bucket 37: 60%\n  bucket 36: 30%\n  bucket 37: 70%\n  bucket 36: 40%\n  bucket 37: 80%\n  bucket 36: 50%\n  bucket 37: 90%\n  bucket 36: 60%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 20%\n  bucket 40: 10%\n  bucket 39: 30%\n  bucket 40: 20%\n  bucket 39: 40%\n  bucket 40: 30%\n  bucket 39: 50%\n  bucket 40: 40%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 40: 50%\n  bucket 39: 80%\n  bucket 40: 60%\n  bucket 39: 90%\n  bucket 40: 70%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  bucket 41: 30%\n  Calculating Z arrays for bucket 42\n  bucket 41: 40%\n  bucket 41: 50%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 60%\n  bucket 42: 10%\n  bucket 41: 70%\n  bucket 42: 20%\n  bucket 41: 80%\n  bucket 42: 30%\n  bucket 41: 90%\n  bucket 42: 40%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  bucket 42: 50%\n  (Using difference cover)\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  bucket 44: 20%\n  Calculating Z arrays for bucket 45\n  bucket 44: 30%\n  bucket 44: 40%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 45: 10%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 45: 20%\n  bucket 44: 90%\n  bucket 45: 30%\n  bucket 44: 100%\nGetting block 46 of 60\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 40%\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 80%\n  bucket 45: 90%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  bucket 45: 100%\n  Calculating Z arrays for bucket 47\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 10%\n  bucket 46: 20%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 30%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 47: 10%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 47: 20%\n  bucket 46: 60%\n  bucket 47: 30%\n  bucket 46: 70%\n  bucket 47: 40%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 47: 50%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 60%\n  Sorting block time: 00:00:00\n  bucket 47: 70%\nReturning block of 80 for bucket 45\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 49:\n  bucket 50: 10%\n  bucket 49: 10%\n  bucket 50: 20%\n  bucket 49: 20%\n  bucket 50: 30%\n  bucket 49: 30%\n  bucket 50: 40%\n  bucket 49: 40%\n  bucket 50: 50%\n  bucket 49: 50%\n  bucket 50: 60%\n  bucket 49: 60%\n  bucket 50: 70%\n  bucket 49: 70%\n  bucket 50: 80%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 50: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 10%\n  bucket 53: 10%\n  bucket 52: 20%\n  bucket 53: 20%\n  bucket 52: 30%\n  bucket 53: 30%\n  bucket 52: 40%\n  bucket 53: 40%\n  bucket 52: 50%\n  bucket 53: 50%\n  bucket 52: 60%\n  bucket 53: 60%\n  bucket 52: 70%\n  bucket 53: 70%\n  bucket 52: 80%\n  bucket 53: 80%\n  bucket 52: 90%\n  bucket 53: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 20%\n  bucket 55: 10%\n  bucket 54: 30%\n  bucket 55: 20%\n  bucket 54: 40%\n  bucket 55: 30%\n  bucket 54: 50%\n  bucket 55: 40%\n  bucket 54: 60%\n  bucket 55: 50%\n  bucket 54: 70%\n  bucket 55: 60%\n  bucket 54: 80%\n  bucket 55: 70%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  bucket 57: 40%\n  Calculating Z arrays for bucket 58\n  bucket 57: 50%\n  bucket 57: 60%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 70%\n  bucket 58: 10%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  Entering block accumulator loop for bucket 59:\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 59: 10%\n  bucket 60: 40%\n  bucket 59: 20%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 60: 80%\n  bucket 59: 50%\n  bucket 60: 90%\n  bucket 59: 60%\n  bucket 60: 100%\n  bucket 59: 70%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1",  "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n",  "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\nGetting block 3 of 60\n  Reserving size (126) for bucket 2\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Calculating Z arrays for bucket 4\nGetting block 6 of 60\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 30%\n  Reserving size (126) for bucket 6\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 40%\n  bucket 2: 10%\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 2: 20%\n  Calculating Z arrays for bucket 6\n  bucket 1: 50%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 30%\n  bucket 4: 20%\n  bucket 7: 10%\n  bucket 3: 10%\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 7: 20%\n  bucket 2: 40%\n  bucket 7: 30%\n  bucket 1: 60%\n  bucket 2: 50%\nGetting block 8 of 60\n  bucket 3: 20%\n  bucket 4: 40%\n  bucket 6: 20%\n  Reserving size (126) for bucket 8\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 2: 60%\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 5\n  bucket 3: 30%\n  bucket 1: 70%\n  bucket 7: 40%\n  bucket 4: 50%\n  bucket 6: 30%\n  bucket 1: 80%\n  bucket 7: 50%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 3: 40%\n  bucket 7: 60%\n  bucket 1: 100%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 40%\n  bucket 2: 70%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 4: 70%\n  bucket 7: 80%\n  bucket 5: 10%\n  bucket 6: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 3: 50%\n  bucket 5: 20%\n  bucket 8: 10%\n  bucket 2: 80%\n  bucket 7: 90%\n  bucket 6: 60%\n  bucket 5: 30%\n  bucket 2: 90%\n  bucket 7: 100%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 5: 40%\n  bucket 6: 70%\n  bucket 3: 70%\n  bucket 5: 50%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 3: 80%\n  bucket 6: 80%\n  bucket 4: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 5: 60%\n  bucket 6: 90%\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  bucket 5: 70%\n  bucket 8: 20%\n  bucket 2: 100%\n  bucket 6: 100%\n  bucket 3: 100%\n  bucket 5: 80%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 8: 30%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 8: 40%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 14: 10%\n  bucket 13: 80%\n  bucket 14: 20%\n  bucket 13: 90%\n  bucket 14: 30%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 30%\n  bucket 16: 10%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 16: 20%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 15: 70%\n  bucket 16: 40%\n  bucket 15: 80%\n  bucket 16: 50%\n  bucket 15: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 18: 20%\n  bucket 17: 40%\n  bucket 18: 30%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 17: 100%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  bucket 19: 30%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 40%\n  bucket 20: 10%\n  bucket 19: 50%\n  bucket 20: 20%\n  bucket 19: 60%\n  bucket 20: 30%\n  bucket 19: 70%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 19: 90%\n  bucket 20: 70%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 21: 30%\n  bucket 22: 30%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 50%\n  bucket 23: 60%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 70%\n  bucket 24: 10%\n  bucket 23: 80%\n  bucket 24: 20%\n  bucket 23: 90%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  bucket 24: 50%\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\nGetting block 26 of 60\n  bucket 25: 30%\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 26: 10%\n  bucket 25: 90%\n  bucket 26: 20%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 10%\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 30%\n  bucket 30: 40%\n  bucket 29: 40%\n  bucket 30: 50%\n  bucket 29: 50%\n  bucket 30: 60%\n  bucket 29: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 29: 70%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 80%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 90%\n  bucket 31: 100%\n  bucket 32: 10%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  bucket 34: 10%\n  Calculating Z arrays for bucket 35\n  bucket 34: 20%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 30%\n  bucket 35: 10%\n  bucket 34: 40%\n  bucket 35: 20%\n  bucket 34: 50%\n  bucket 35: 30%\n  bucket 34: 60%\n  bucket 35: 40%\n  bucket 34: 70%\n  bucket 35: 50%\n  bucket 34: 80%\n  bucket 35: 60%\n  bucket 34: 90%\n  bucket 35: 70%\n  bucket 34: 100%\n  bucket 35: 80%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  Calculating Z arrays for bucket 36\n  bucket 37: 10%\n  bucket 37: 20%\n  Entering block accumulator loop for bucket 36:\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 36: 10%\n  bucket 37: 50%\n  bucket 36: 20%\n  bucket 37: 60%\n  bucket 36: 30%\n  bucket 37: 70%\n  bucket 36: 40%\n  bucket 37: 80%\n  bucket 36: 50%\n  bucket 37: 90%\n  bucket 36: 60%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 20%\n  bucket 40: 10%\n  bucket 39: 30%\n  bucket 40: 20%\n  bucket 39: 40%\n  bucket 40: 30%\n  bucket 39: 50%\n  bucket 40: 40%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 40: 50%\n  bucket 39: 80%\n  bucket 40: 60%\n  bucket 39: 90%\n  bucket 40: 70%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  bucket 41: 30%\n  Calculating Z arrays for bucket 42\n  bucket 41: 40%\n  bucket 41: 50%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 60%\n  bucket 42: 10%\n  bucket 41: 70%\n  bucket 42: 20%\n  bucket 41: 80%\n  bucket 42: 30%\n  bucket 41: 90%\n  bucket 42: 40%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  bucket 42: 50%\n  (Using difference cover)\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  bucket 44: 20%\n  Calculating Z arrays for bucket 45\n  bucket 44: 30%\n  bucket 44: 40%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 45: 10%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 45: 20%\n  bucket 44: 90%\n  bucket 45: 30%\n  bucket 44: 100%\nGetting block 46 of 60\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 40%\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 80%\n  bucket 45: 90%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  bucket 45: 100%\n  Calculating Z arrays for bucket 47\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 10%\n  bucket 46: 20%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 30%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 47: 10%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 47: 20%\n  bucket 46: 60%\n  bucket 47: 30%\n  bucket 46: 70%\n  bucket 47: 40%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 47: 50%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 60%\n  Sorting block time: 00:00:00\n  bucket 47: 70%\nReturning block of 80 for bucket 45\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 49:\n  bucket 50: 10%\n  bucket 49: 10%\n  bucket 50: 20%\n  bucket 49: 20%\n  bucket 50: 30%\n  bucket 49: 30%\n  bucket 50: 40%\n  bucket 49: 40%\n  bucket 50: 50%\n  bucket 49: 50%\n  bucket 50: 60%\n  bucket 49: 60%\n  bucket 50: 70%\n  bucket 49: 70%\n  bucket 50: 80%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 50: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 10%\n  bucket 53: 10%\n  bucket 52: 20%\n  bucket 53: 20%\n  bucket 52: 30%\n  bucket 53: 30%\n  bucket 52: 40%\n  bucket 53: 40%\n  bucket 52: 50%\n  bucket 53: 50%\n  bucket 52: 60%\n  bucket 53: 60%\n  bucket 52: 70%\n  bucket 53: 70%\n  bucket 52: 80%\n  bucket 53: 80%\n  bucket 52: 90%\n  bucket 53: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 20%\n  bucket 55: 10%\n  bucket 54: 30%\n  bucket 55: 20%\n  bucket 54: 40%\n  bucket 55: 30%\n  bucket 54: 50%\n  bucket 55: 40%\n  bucket 54: 60%\n  bucket 55: 50%\n  bucket 54: 70%\n  bucket 55: 60%\n  bucket 54: 80%\n  bucket 55: 70%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  bucket 57: 40%\n  Calculating Z arrays for bucket 58\n  bucket 57: 50%\n  bucket 57: 60%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 70%\n  bucket 58: 10%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  Entering block accumulator loop for bucket 59:\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 59: 10%\n  bucket 60: 40%\n  bucket 59: 20%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 60: 80%\n  bucket 59: 50%\n  bucket 60: 90%\n  bucket 59: 60%\n  bucket 60: 100%\n  bucket 59: 70%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n",  "update_time": "2025-01-10T07:04:23.844862",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1, exit_code: None, stderr: Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1, exit_code: None, stderr: Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n." ], "status": "failure", "test_index": 11, "time_seconds": 25.293378114700317, "tool_id": "hisat2", "tool_version": "2.2.1+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60Getting block 3 of 60  Reserving size (126) for bucket 2  Reserving size (126) for bucket 3  Entering block accumulator loop for bucket 1:Getting block 4 of 60  Reserving size (126) for bucket 4  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 2  bucket 1: 10%  Calculating Z arrays for bucket 4Getting block 6 of 60  bucket 1: 20%  Entering block accumulator loop for bucket 2:  bucket 1: 30%  Reserving size (126) for bucket 6  Entering block accumulator loop for bucket 4:  bucket 1: 40%  bucket 2: 10%Getting block 7 of 60  Reserving size (126) for bucket 7  bucket 2: 20%  Calculating Z arrays for bucket 6  bucket 1: 50%  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 3:  bucket 4: 10%  Entering block accumulator loop for bucket 6:  Entering block accumulator loop for bucket 7:  bucket 2: 30%  bucket 4: 20%  bucket 7: 10%  bucket 3: 10%  bucket 6: 10%  bucket 4: 30%  bucket 7: 20%  bucket 2: 40%  bucket 7: 30%  bucket 1: 60%  bucket 2: 50%Getting block 8 of 60  bucket 3: 20%  bucket 4: 40%  bucket 6: 20%  Reserving size (126) for bucket 8Getting block 5 of 60  Reserving size (126) for bucket 5  bucket 2: 60%  Calculating Z arrays for bucket 8  Calculating Z arrays for bucket 5  bucket 3: 30%  bucket 1: 70%  bucket 7: 40%  bucket 4: 50%  bucket 6: 30%  bucket 1: 80%  bucket 7: 50%  bucket 4: 60%  bucket 1: 90%  bucket 3: 40%  bucket 7: 60%  bucket 1: 100%  Entering block accumulator loop for bucket 5:  bucket 6: 40%  bucket 2: 70%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 7: 70%  bucket 4: 70%  bucket 7: 80%  bucket 5: 10%  bucket 6: 50%  Entering block accumulator loop for bucket 8:  bucket 3: 50%  bucket 5: 20%  bucket 8: 10%  bucket 2: 80%  bucket 7: 90%  bucket 6: 60%  bucket 5: 30%  bucket 2: 90%  bucket 7: 100%  bucket 3: 60%  bucket 4: 80%  bucket 5: 40%  bucket 6: 70%  bucket 3: 70%  bucket 5: 50%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 4: 90%  bucket 3: 80%  bucket 6: 80%  bucket 4: 100%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 3: 90%  bucket 5: 60%  bucket 6: 90%  Sorting block time: 00:00:00Returning block of 43 for bucket 1  bucket 5: 70%  bucket 8: 20%  bucket 2: 100%  bucket 6: 100%  bucket 3: 100%  bucket 5: 80%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 8: 30%  Sorting block of length 106 for bucket 3  (Using difference cover)  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 5: 90%  bucket 8: 40%  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 76 for bucket 7Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  Sorting block time: 00:00:00Returning block of 125 for bucket 9  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  Entering block accumulator loop for bucket 14:  bucket 13: 60%  bucket 13: 70%  bucket 14: 10%  bucket 13: 80%  bucket 14: 20%  bucket 13: 90%  bucket 14: 30%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  Entering block accumulator loop for bucket 16:  bucket 15: 30%  bucket 16: 10%  bucket 15: 40%  bucket 15: 50%  bucket 16: 20%  bucket 15: 60%  bucket 16: 30%  bucket 15: 70%  bucket 16: 40%  bucket 15: 80%  bucket 16: 50%  bucket 15: 90%  bucket 16: 60%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  bucket 17: 10%  Entering block accumulator loop for bucket 18:  bucket 17: 20%  bucket 18: 10%  bucket 17: 30%  bucket 18: 20%  bucket 17: 40%  bucket 18: 30%  bucket 17: 50%  bucket 18: 40%  bucket 17: 60%  bucket 18: 50%  bucket 17: 70%  bucket 18: 60%  bucket 17: 80%  bucket 18: 70%  bucket 17: 90%  bucket 18: 80%  bucket 18: 90%  bucket 17: 100%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 20%  bucket 19: 30%  Entering block accumulator loop for bucket 20:  bucket 19: 40%  bucket 20: 10%  bucket 19: 50%  bucket 20: 20%  bucket 19: 60%  bucket 20: 30%  bucket 19: 70%  bucket 20: 40%  bucket 20: 50%  bucket 19: 80%  bucket 20: 60%  bucket 19: 90%  bucket 20: 70%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  bucket 21: 10%  Entering block accumulator loop for bucket 22:  bucket 21: 20%  bucket 22: 10%  bucket 22: 20%  bucket 21: 30%  bucket 22: 30%  bucket 21: 40%  bucket 22: 40%  bucket 21: 50%  bucket 22: 50%  bucket 21: 60%  bucket 21: 70%  bucket 22: 60%  bucket 21: 80%  bucket 22: 70%  bucket 21: 90%  bucket 22: 80%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  bucket 23: 50%  bucket 23: 60%  Entering block accumulator loop for bucket 24:  bucket 23: 70%  bucket 24: 10%  bucket 23: 80%  bucket 24: 20%  bucket 23: 90%  bucket 24: 30%  bucket 24: 40%  bucket 23: 100%  Sorting block of length 64 for bucket 23  bucket 24: 50%  (Using difference cover)  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%Getting block 26 of 60  bucket 25: 30%  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  Entering block accumulator loop for bucket 26:  bucket 25: 70%  bucket 25: 80%  bucket 26: 10%  bucket 25: 90%  bucket 26: 20%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  Sorting block time: 00:00:00Returning block of 67 for bucket 25  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Entering block accumulator loop for bucket 27:  Calculating Z arrays for bucket 28  bucket 27: 10%  Entering block accumulator loop for bucket 28:  bucket 27: 20%  bucket 28: 10%  bucket 28: 20%  bucket 27: 30%  bucket 28: 30%  bucket 27: 40%  bucket 28: 40%  bucket 27: 50%  bucket 28: 50%  bucket 27: 60%  bucket 28: 60%  bucket 27: 70%  bucket 28: 70%  bucket 27: 80%  bucket 28: 80%  bucket 27: 90%  bucket 28: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 30:  bucket 29: 10%  bucket 30: 10%  bucket 29: 20%  bucket 30: 20%  bucket 30: 30%  bucket 29: 30%  bucket 30: 40%  bucket 29: 40%  bucket 30: 50%  bucket 29: 50%  bucket 30: 60%  bucket 29: 60%  bucket 30: 70%  bucket 30: 80%  bucket 29: 70%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  bucket 31: 80%  Entering block accumulator loop for bucket 32:  bucket 31: 90%  bucket 31: 100%  bucket 32: 10%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 33: 20%  bucket 33: 30%  bucket 33: 40%  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:Getting block 35 of 60  Reserving size (126) for bucket 35  bucket 34: 10%  Calculating Z arrays for bucket 35  bucket 34: 20%  Entering block accumulator loop for bucket 35:  bucket 34: 30%  bucket 35: 10%  bucket 34: 40%  bucket 35: 20%  bucket 34: 50%  bucket 35: 30%  bucket 34: 60%  bucket 35: 40%  bucket 34: 70%  bucket 35: 50%  bucket 34: 80%  bucket 35: 60%  bucket 34: 90%  bucket 35: 70%  bucket 34: 100%  bucket 35: 80%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 36 of 60  Reserving size (126) for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  Calculating Z arrays for bucket 36  bucket 37: 10%  bucket 37: 20%  Entering block accumulator loop for bucket 36:  bucket 37: 30%  bucket 37: 40%  bucket 36: 10%  bucket 37: 50%  bucket 36: 20%  bucket 37: 60%  bucket 36: 30%  bucket 37: 70%  bucket 36: 40%  bucket 37: 80%  bucket 36: 50%  bucket 37: 90%  bucket 36: 60%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 39:  bucket 39: 10%  Entering block accumulator loop for bucket 40:  bucket 39: 20%  bucket 40: 10%  bucket 39: 30%  bucket 40: 20%  bucket 39: 40%  bucket 40: 30%  bucket 39: 50%  bucket 40: 40%  bucket 39: 60%  bucket 39: 70%  bucket 40: 50%  bucket 39: 80%  bucket 40: 60%  bucket 39: 90%  bucket 40: 70%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%Getting block 42 of 60  Reserving size (126) for bucket 42  bucket 41: 30%  Calculating Z arrays for bucket 42  bucket 41: 40%  bucket 41: 50%  Entering block accumulator loop for bucket 42:  bucket 41: 60%  bucket 42: 10%  bucket 41: 70%  bucket 42: 20%  bucket 41: 80%  bucket 42: 30%  bucket 41: 90%  bucket 42: 40%  bucket 41: 100%  Sorting block of length 88 for bucket 41  bucket 42: 50%  (Using difference cover)  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%Getting block 45 of 60  Reserving size (126) for bucket 45  bucket 44: 20%  Calculating Z arrays for bucket 45  bucket 44: 30%  bucket 44: 40%  Entering block accumulator loop for bucket 45:  bucket 44: 50%  bucket 44: 60%  bucket 45: 10%  bucket 44: 70%  bucket 44: 80%  bucket 45: 20%  bucket 44: 90%  bucket 45: 30%  bucket 44: 100%Getting block 46 of 60  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 40%  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  Entering block accumulator loop for bucket 46:  bucket 45: 80%  bucket 45: 90%Getting block 47 of 60  Reserving size (126) for bucket 47  bucket 45: 100%  Calculating Z arrays for bucket 47  Sorting block of length 79 for bucket 45  (Using difference cover)  bucket 46: 10%  bucket 46: 20%  Entering block accumulator loop for bucket 47:  bucket 46: 30%  Sorting block time: 00:00:00Returning block of 67 for bucket 44  bucket 47: 10%  bucket 46: 40%  bucket 46: 50%  bucket 47: 20%  bucket 46: 60%  bucket 47: 30%  bucket 46: 70%  bucket 47: 40%  bucket 46: 80%  bucket 46: 90%  bucket 47: 50%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 60%  Sorting block time: 00:00:00  bucket 47: 70%Returning block of 80 for bucket 45  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 50:  Entering block accumulator loop for bucket 49:  bucket 50: 10%  bucket 49: 10%  bucket 50: 20%  bucket 49: 20%  bucket 50: 30%  bucket 49: 30%  bucket 50: 40%  bucket 49: 40%  bucket 50: 50%  bucket 49: 50%  bucket 50: 60%  bucket 49: 60%  bucket 50: 70%  bucket 49: 70%  bucket 50: 80%  bucket 49: 80%  bucket 49: 90%  bucket 50: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 51: 10%  bucket 51: 20%  bucket 51: 30%  bucket 51: 40%  bucket 51: 50%  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 52:  Entering block accumulator loop for bucket 53:  bucket 52: 10%  bucket 53: 10%  bucket 52: 20%  bucket 53: 20%  bucket 52: 30%  bucket 53: 30%  bucket 52: 40%  bucket 53: 40%  bucket 52: 50%  bucket 53: 50%  bucket 52: 60%  bucket 53: 60%  bucket 52: 70%  bucket 53: 70%  bucket 52: 80%  bucket 53: 80%  bucket 52: 90%  bucket 53: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 54:  bucket 54: 10%  Entering block accumulator loop for bucket 55:  bucket 54: 20%  bucket 55: 10%  bucket 54: 30%  bucket 55: 20%  bucket 54: 40%  bucket 55: 30%  bucket 54: 50%  bucket 55: 40%  bucket 54: 60%  bucket 55: 50%  bucket 54: 70%  bucket 55: 60%  bucket 54: 80%  bucket 55: 70%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%Getting block 58 of 60  Reserving size (126) for bucket 58  bucket 57: 40%  Calculating Z arrays for bucket 58  bucket 57: 50%  bucket 57: 60%  Entering block accumulator loop for bucket 58:  bucket 57: 70%  bucket 58: 10%  bucket 57: 80%  bucket 57: 90%  bucket 58: 20%  bucket 58: 30%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 60:  bucket 60: 10%  Entering block accumulator loop for bucket 59:  bucket 60: 20%  bucket 60: 30%  bucket 59: 10%  bucket 60: 40%  bucket 59: 20%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 59: 30%  bucket 59: 40%  bucket 60: 80%  bucket 59: 50%  bucket 60: 90%  bucket 59: 60%  bucket 60: 100%  bucket 59: 70%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #12)" name="11" time="25.06744909286499">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "library|input_1": {   "id": "05918835a9b376b1",   "src": "hda"  },  "library|type": "paired_interleaved",  "reference_genome|history_item": {   "id": "03f5bbb92611c7fb",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "set -o pipefail;  ln -s \u0027/galaxy/server/database/objects/6/c/e/dataset_6cec2787-eafc-487e-ac9c-287ce1a85dbf.dat\u0027 genome.fa \u0026\u0026 hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome \u0026\u0026        seqtk seq -1 \u0027/galaxy/server/database/objects/9/f/4/dataset_9f4fcc79-5876-4a73-8155-b5f927799d23.dat\u0027 \u003e input_f.fastq \u0026\u0026 seqtk seq -2 \u0027/galaxy/server/database/objects/9/f/4/dataset_9f4fcc79-5876-4a73-8155-b5f927799d23.dat\u0027 \u003e input_r.fastq \u0026\u0026    hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027genome\u0027    -1 input_f.fastq -2 input_r.fastq                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/0/b/7/dataset_0b77c176-ee2e-47ee-86c0-8383e7573d04.dat\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-10T07:13:47.688118",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-6cfqn",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "005d3caa0a63a9af",  "inputs": {   "library|input_1": {    "id": "05918835a9b376b1",    "src": "hda",    "uuid": "9f4fcc79-5876-4a73-8155-b5f927799d23"   },   "reference_genome|history_item": {    "id": "03f5bbb92611c7fb",    "src": "hda",    "uuid": "6cec2787-eafc-487e-ac9c-287ce1a85dbf"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "85995a4fbd9fc4f4",    "src": "hda",    "uuid": "0b77c176-ee2e-47ee-86c0-8383e7573d04"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 309, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}",   "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 308, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "error",  "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n",  "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 60\n  Entering block accumulator loop for bucket 3:\n  Reserving size (126) for bucket 4\n  bucket 1: 30%\n  bucket 2: 20%\n  Calculating Z arrays for bucket 4\nGetting block 5 of 60\n  Entering block accumulator loop for bucket 4:\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 4: 10%\n  Calculating Z arrays for bucket 7\n  bucket 1: 40%\n  Reserving size (126) for bucket 5\n  bucket 4: 20%\n  bucket 1: 50%\nGetting block 8 of 60\n  bucket 4: 30%\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 5\n  bucket 3: 10%\n  bucket 1: 60%\n  bucket 2: 30%\n  Calculating Z arrays for bucket 8\n  bucket 1: 70%\n  bucket 3: 20%\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 30%\n  bucket 1: 80%\n  Reserving size (126) for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 40%\n  bucket 3: 40%\n  Entering block accumulator loop for bucket 8:\n  Calculating Z arrays for bucket 6\n  bucket 4: 40%\n  bucket 8: 10%\n  bucket 2: 50%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 5: 20%\n  bucket 4: 60%\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 90%\n  bucket 5: 30%\n  bucket 2: 70%\n  bucket 8: 30%\n  bucket 3: 60%\n  bucket 7: 20%\n  bucket 8: 40%\n  bucket 4: 70%\n  bucket 7: 30%\n  bucket 3: 70%\n  bucket 8: 50%\n  bucket 2: 80%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 7: 40%\n  bucket 5: 50%\n  bucket 3: 90%\n  bucket 7: 50%\n  bucket 1: 100%\n  bucket 6: 20%\n  bucket 4: 90%\n  bucket 3: 100%\n  bucket 8: 60%\n  bucket 4: 100%\n  bucket 7: 60%\n  bucket 6: 30%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 5: 60%\n  Sorting block of length 68 for bucket 4\n  bucket 7: 70%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 6: 40%\n  bucket 7: 80%\n  bucket 2: 100%\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 7: 90%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 7: 100%\n  bucket 6: 50%\n  bucket 8: 90%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 90%\n  bucket 10: 10%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  bucket 10: 20%\n  (Using difference cover)\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 70%\n  bucket 11: 80%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 90%\n  bucket 12: 10%\n  bucket 11: 100%\n  bucket 12: 20%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  bucket 13: 40%\n  Calculating Z arrays for bucket 14\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 80%\n  bucket 14: 10%\n  bucket 13: 90%\n  bucket 14: 20%\n  bucket 13: 100%\n  bucket 14: 30%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 40%\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 50%\n  bucket 14: 60%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 70%\n  bucket 15: 10%\n  bucket 14: 80%\n  bucket 15: 20%\n  bucket 14: 90%\n  bucket 15: 30%\n  bucket 15: 40%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  bucket 14: 100%\n  bucket 15: 50%\n  Sorting block of length 82 for bucket 14\n  bucket 15: 60%\n  (Using difference cover)\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Entering block accumulator loop for bucket 18:\n  Calculating Z arrays for bucket 19\n  bucket 18: 10%\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 30%\n  bucket 19: 10%\n  Sorting block time: 00:00:00\n  bucket 18: 40%\nReturning block of 40 for bucket 17\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 19: 40%\n  bucket 18: 70%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 19: 60%\n  bucket 18: 90%\n  bucket 19: 70%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  bucket 20: 50%\n  Calculating Z arrays for bucket 21\n  bucket 20: 60%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 70%\n  bucket 21: 10%\n  bucket 20: 80%\n  bucket 21: 20%\n  bucket 20: 90%\n  bucket 21: 30%\n  bucket 20: 100%\n  bucket 21: 40%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  bucket 22: 20%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 30%\n  bucket 23: 10%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 23: 20%\n  bucket 22: 60%\n  bucket 23: 30%\n  bucket 22: 70%\n  bucket 23: 40%\n  bucket 22: 80%\n  bucket 23: 50%\n  bucket 22: 90%\n  bucket 23: 60%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  bucket 27: 80%\n  Calculating Z arrays for bucket 28\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\nGetting block 31 of 60\n  Calculating Z arrays for bucket 30\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 31: 10%\n  bucket 30: 20%\n  bucket 31: 20%\n  bucket 30: 30%\n  bucket 31: 30%\n  bucket 30: 40%\n  bucket 31: 40%\n  bucket 30: 50%\n  bucket 31: 50%\n  bucket 30: 60%\n  bucket 31: 60%\n  bucket 30: 70%\n  bucket 31: 70%\n  bucket 30: 80%\n  bucket 31: 80%\n  bucket 30: 90%\n  bucket 31: 90%\n  bucket 30: 100%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 32\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 32:\n  bucket 33: 10%\n  bucket 32: 10%\n  bucket 33: 20%\n  bucket 32: 20%\n  bucket 33: 30%\n  bucket 32: 30%\n  bucket 33: 40%\n  bucket 32: 40%\n  bucket 33: 50%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 33: 60%\n  bucket 32: 70%\n  bucket 33: 70%\n  bucket 32: 80%\n  bucket 33: 80%\n  bucket 32: 90%\n  bucket 33: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 20%\n  bucket 34: 30%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 35: 10%\n  bucket 34: 60%\n  bucket 35: 20%\n  bucket 34: 70%\n  bucket 35: 30%\n  bucket 34: 80%\n  bucket 35: 40%\n  bucket 34: 90%\n  bucket 35: 50%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 37:\n  bucket 38: 10%\n  bucket 37: 10%\n  bucket 38: 20%\n  bucket 37: 20%\n  bucket 38: 30%\n  bucket 37: 30%\n  bucket 38: 40%\n  bucket 37: 40%\n  bucket 38: 50%\n  bucket 37: 50%\n  bucket 38: 60%\n  bucket 37: 60%\n  bucket 38: 70%\n  bucket 37: 70%\n  bucket 38: 80%\n  bucket 37: 80%\n  bucket 38: 90%\n  bucket 37: 90%\n  bucket 38: 100%\n  bucket 37: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 20%\n  bucket 40: 10%\n  bucket 39: 30%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 39: 40%\n  bucket 40: 40%\n  bucket 39: 50%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 39: 60%\n  bucket 40: 70%\n  bucket 39: 70%\n  bucket 40: 80%\n  bucket 39: 80%\n  bucket 40: 90%\n  bucket 39: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  bucket 41: 40%\n  Calculating Z arrays for bucket 42\n  bucket 41: 50%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 42: 10%\n  bucket 41: 80%\n  bucket 42: 20%\n  bucket 41: 90%\n  bucket 42: 30%\n  bucket 41: 100%\n  bucket 42: 40%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 70%\n  bucket 47: 10%\n  bucket 46: 80%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 46: 90%\n  bucket 47: 40%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  bucket 49: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 49: 20%\n  bucket 48: 50%\n  bucket 49: 30%\n  bucket 48: 60%\n  bucket 49: 40%\n  bucket 48: 70%\n  bucket 49: 50%\n  bucket 48: 80%\n  bucket 49: 60%\n  bucket 48: 90%\n  bucket 49: 70%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Calculating Z arrays for bucket 52\n  bucket 51: 10%\n  bucket 51: 20%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 30%\n  bucket 52: 10%\n  bucket 51: 40%\n  bucket 52: 20%\n  bucket 51: 50%\n  bucket 52: 30%\n  bucket 51: 60%\n  bucket 52: 40%\n  bucket 51: 70%\n  bucket 52: 50%\n  bucket 51: 80%\n  bucket 52: 60%\n  bucket 51: 90%\n  bucket 52: 70%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Entering block accumulator loop for bucket 57:\n  Calculating Z arrays for bucket 58\n  bucket 57: 10%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 58: 10%\n  bucket 57: 40%\n  bucket 58: 20%\n  bucket 57: 50%\n  bucket 58: 30%\n  bucket 57: 60%\n  bucket 58: 40%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 58: 50%\n  bucket 57: 90%\n  bucket 58: 60%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 59:\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 10%\n  bucket 60: 10%\n  bucket 59: 20%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 59: 30%\n  bucket 60: 40%\n  bucket 59: 40%\n  bucket 60: 50%\n  bucket 59: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 59: 60%\n  bucket 60: 80%\n  bucket 59: 70%\n  bucket 60: 90%\n  bucket 59: 80%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1",  "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n",  "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 1: 20%\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 60\n  Entering block accumulator loop for bucket 3:\n  Reserving size (126) for bucket 4\n  bucket 1: 30%\n  bucket 2: 20%\n  Calculating Z arrays for bucket 4\nGetting block 5 of 60\n  Entering block accumulator loop for bucket 4:\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 4: 10%\n  Calculating Z arrays for bucket 7\n  bucket 1: 40%\n  Reserving size (126) for bucket 5\n  bucket 4: 20%\n  bucket 1: 50%\nGetting block 8 of 60\n  bucket 4: 30%\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 5\n  bucket 3: 10%\n  bucket 1: 60%\n  bucket 2: 30%\n  Calculating Z arrays for bucket 8\n  bucket 1: 70%\n  bucket 3: 20%\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 30%\n  bucket 1: 80%\n  Reserving size (126) for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 40%\n  bucket 3: 40%\n  Entering block accumulator loop for bucket 8:\n  Calculating Z arrays for bucket 6\n  bucket 4: 40%\n  bucket 8: 10%\n  bucket 2: 50%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 5: 20%\n  bucket 4: 60%\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 90%\n  bucket 5: 30%\n  bucket 2: 70%\n  bucket 8: 30%\n  bucket 3: 60%\n  bucket 7: 20%\n  bucket 8: 40%\n  bucket 4: 70%\n  bucket 7: 30%\n  bucket 3: 70%\n  bucket 8: 50%\n  bucket 2: 80%\n  bucket 6: 10%\n  bucket 5: 40%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 2: 90%\n  bucket 7: 40%\n  bucket 5: 50%\n  bucket 3: 90%\n  bucket 7: 50%\n  bucket 1: 100%\n  bucket 6: 20%\n  bucket 4: 90%\n  bucket 3: 100%\n  bucket 8: 60%\n  bucket 4: 100%\n  bucket 7: 60%\n  bucket 6: 30%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 5: 60%\n  Sorting block of length 68 for bucket 4\n  bucket 7: 70%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 6: 40%\n  bucket 7: 80%\n  bucket 2: 100%\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 7: 90%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 7: 100%\n  bucket 6: 50%\n  bucket 8: 90%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 90%\n  bucket 10: 10%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  bucket 10: 20%\n  (Using difference cover)\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 70%\n  bucket 11: 80%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 90%\n  bucket 12: 10%\n  bucket 11: 100%\n  bucket 12: 20%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  bucket 13: 40%\n  Calculating Z arrays for bucket 14\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 80%\n  bucket 14: 10%\n  bucket 13: 90%\n  bucket 14: 20%\n  bucket 13: 100%\n  bucket 14: 30%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 40%\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 50%\n  bucket 14: 60%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 70%\n  bucket 15: 10%\n  bucket 14: 80%\n  bucket 15: 20%\n  bucket 14: 90%\n  bucket 15: 30%\n  bucket 15: 40%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  bucket 14: 100%\n  bucket 15: 50%\n  Sorting block of length 82 for bucket 14\n  bucket 15: 60%\n  (Using difference cover)\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Entering block accumulator loop for bucket 18:\n  Calculating Z arrays for bucket 19\n  bucket 18: 10%\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 30%\n  bucket 19: 10%\n  Sorting block time: 00:00:00\n  bucket 18: 40%\nReturning block of 40 for bucket 17\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 19: 40%\n  bucket 18: 70%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 19: 60%\n  bucket 18: 90%\n  bucket 19: 70%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  bucket 20: 50%\n  Calculating Z arrays for bucket 21\n  bucket 20: 60%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 70%\n  bucket 21: 10%\n  bucket 20: 80%\n  bucket 21: 20%\n  bucket 20: 90%\n  bucket 21: 30%\n  bucket 20: 100%\n  bucket 21: 40%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  bucket 22: 20%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 30%\n  bucket 23: 10%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 23: 20%\n  bucket 22: 60%\n  bucket 23: 30%\n  bucket 22: 70%\n  bucket 23: 40%\n  bucket 22: 80%\n  bucket 23: 50%\n  bucket 22: 90%\n  bucket 23: 60%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 26: 80%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  bucket 27: 80%\n  Calculating Z arrays for bucket 28\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\nGetting block 31 of 60\n  Calculating Z arrays for bucket 30\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 31: 10%\n  bucket 30: 20%\n  bucket 31: 20%\n  bucket 30: 30%\n  bucket 31: 30%\n  bucket 30: 40%\n  bucket 31: 40%\n  bucket 30: 50%\n  bucket 31: 50%\n  bucket 30: 60%\n  bucket 31: 60%\n  bucket 30: 70%\n  bucket 31: 70%\n  bucket 30: 80%\n  bucket 31: 80%\n  bucket 30: 90%\n  bucket 31: 90%\n  bucket 30: 100%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 32\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 32:\n  bucket 33: 10%\n  bucket 32: 10%\n  bucket 33: 20%\n  bucket 32: 20%\n  bucket 33: 30%\n  bucket 32: 30%\n  bucket 33: 40%\n  bucket 32: 40%\n  bucket 33: 50%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 33: 60%\n  bucket 32: 70%\n  bucket 33: 70%\n  bucket 32: 80%\n  bucket 33: 80%\n  bucket 32: 90%\n  bucket 33: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 20%\n  bucket 34: 30%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 35: 10%\n  bucket 34: 60%\n  bucket 35: 20%\n  bucket 34: 70%\n  bucket 35: 30%\n  bucket 34: 80%\n  bucket 35: 40%\n  bucket 34: 90%\n  bucket 35: 50%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 37:\n  bucket 38: 10%\n  bucket 37: 10%\n  bucket 38: 20%\n  bucket 37: 20%\n  bucket 38: 30%\n  bucket 37: 30%\n  bucket 38: 40%\n  bucket 37: 40%\n  bucket 38: 50%\n  bucket 37: 50%\n  bucket 38: 60%\n  bucket 37: 60%\n  bucket 38: 70%\n  bucket 37: 70%\n  bucket 38: 80%\n  bucket 37: 80%\n  bucket 38: 90%\n  bucket 37: 90%\n  bucket 38: 100%\n  bucket 37: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 20%\n  bucket 40: 10%\n  bucket 39: 30%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 39: 40%\n  bucket 40: 40%\n  bucket 39: 50%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 39: 60%\n  bucket 40: 70%\n  bucket 39: 70%\n  bucket 40: 80%\n  bucket 39: 80%\n  bucket 40: 90%\n  bucket 39: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  bucket 41: 40%\n  Calculating Z arrays for bucket 42\n  bucket 41: 50%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 42: 10%\n  bucket 41: 80%\n  bucket 42: 20%\n  bucket 41: 90%\n  bucket 42: 30%\n  bucket 41: 100%\n  bucket 42: 40%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 70%\n  bucket 47: 10%\n  bucket 46: 80%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 46: 90%\n  bucket 47: 40%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  bucket 49: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 49: 20%\n  bucket 48: 50%\n  bucket 49: 30%\n  bucket 48: 60%\n  bucket 49: 40%\n  bucket 48: 70%\n  bucket 49: 50%\n  bucket 48: 80%\n  bucket 49: 60%\n  bucket 48: 90%\n  bucket 49: 70%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Calculating Z arrays for bucket 52\n  bucket 51: 10%\n  bucket 51: 20%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 30%\n  bucket 52: 10%\n  bucket 51: 40%\n  bucket 52: 20%\n  bucket 51: 50%\n  bucket 52: 30%\n  bucket 51: 60%\n  bucket 52: 40%\n  bucket 51: 70%\n  bucket 52: 50%\n  bucket 51: 80%\n  bucket 52: 60%\n  bucket 51: 90%\n  bucket 52: 70%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Entering block accumulator loop for bucket 57:\n  Calculating Z arrays for bucket 58\n  bucket 57: 10%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 58: 10%\n  bucket 57: 40%\n  bucket 58: 20%\n  bucket 57: 50%\n  bucket 58: 30%\n  bucket 57: 60%\n  bucket 58: 40%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 58: 50%\n  bucket 57: 90%\n  bucket 58: 60%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 59:\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 10%\n  bucket 60: 10%\n  bucket 59: 20%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 59: 30%\n  bucket 60: 40%\n  bucket 59: 40%\n  bucket 60: 50%\n  bucket 59: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 59: 60%\n  bucket 60: 80%\n  bucket 59: 70%\n  bucket 60: 90%\n  bucket 59: 80%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n",  "update_time": "2025-01-10T07:13:52.819749",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1, exit_code: None, stderr: Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1, exit_code: None, stderr: Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n95.00% overall alignment rate\n." ], "status": "failure", "test_index": 11, "time_seconds": 25.06744909286499, "tool_id": "hisat2", "tool_version": "2.2.1+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60Getting block 2 of 60  Reserving size (126) for bucket 2  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 1  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 2: 10%  bucket 1: 20%Getting block 3 of 60  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 3Getting block 4 of 60  Entering block accumulator loop for bucket 3:  Reserving size (126) for bucket 4  bucket 1: 30%  bucket 2: 20%  Calculating Z arrays for bucket 4Getting block 5 of 60  Entering block accumulator loop for bucket 4:Getting block 7 of 60  Reserving size (126) for bucket 7  bucket 4: 10%  Calculating Z arrays for bucket 7  bucket 1: 40%  Reserving size (126) for bucket 5  bucket 4: 20%  bucket 1: 50%Getting block 8 of 60  bucket 4: 30%  Reserving size (126) for bucket 8  Calculating Z arrays for bucket 5  bucket 3: 10%  bucket 1: 60%  bucket 2: 30%  Calculating Z arrays for bucket 8  bucket 1: 70%  bucket 3: 20%Getting block 6 of 60  Entering block accumulator loop for bucket 5:  bucket 3: 30%  bucket 1: 80%  Reserving size (126) for bucket 6  bucket 5: 10%  Entering block accumulator loop for bucket 7:  bucket 2: 40%  bucket 3: 40%  Entering block accumulator loop for bucket 8:  Calculating Z arrays for bucket 6  bucket 4: 40%  bucket 8: 10%  bucket 2: 50%  bucket 7: 10%  bucket 8: 20%  bucket 4: 50%  bucket 2: 60%  bucket 3: 50%  bucket 5: 20%  bucket 4: 60%  Entering block accumulator loop for bucket 6:  bucket 1: 90%  bucket 5: 30%  bucket 2: 70%  bucket 8: 30%  bucket 3: 60%  bucket 7: 20%  bucket 8: 40%  bucket 4: 70%  bucket 7: 30%  bucket 3: 70%  bucket 8: 50%  bucket 2: 80%  bucket 6: 10%  bucket 5: 40%  bucket 3: 80%  bucket 4: 80%  bucket 2: 90%  bucket 7: 40%  bucket 5: 50%  bucket 3: 90%  bucket 7: 50%  bucket 1: 100%  bucket 6: 20%  bucket 4: 90%  bucket 3: 100%  bucket 8: 60%  bucket 4: 100%  bucket 7: 60%  bucket 6: 30%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 8: 70%  bucket 5: 60%  Sorting block of length 68 for bucket 4  bucket 7: 70%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 6: 40%  bucket 7: 80%  bucket 2: 100%  (Using difference cover)  bucket 8: 80%  bucket 7: 90%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 5: 70%  bucket 7: 100%  bucket 6: 50%  bucket 8: 90%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 5: 80%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 6: 60%  bucket 5: 90%  bucket 6: 70%  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 107 for bucket 3Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  Entering block accumulator loop for bucket 10:  bucket 9: 90%  bucket 10: 10%  bucket 9: 100%  Sorting block of length 124 for bucket 9  bucket 10: 20%  (Using difference cover)  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 70%  bucket 11: 80%  Entering block accumulator loop for bucket 12:  bucket 11: 90%  bucket 12: 10%  bucket 11: 100%  bucket 12: 20%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%Getting block 14 of 60  Reserving size (126) for bucket 14  bucket 13: 40%  Calculating Z arrays for bucket 14  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  Entering block accumulator loop for bucket 14:  bucket 13: 80%  bucket 14: 10%  bucket 13: 90%  bucket 14: 20%  bucket 13: 100%  bucket 14: 30%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 14: 40%Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  bucket 14: 50%  bucket 14: 60%  Entering block accumulator loop for bucket 15:  bucket 14: 70%  bucket 15: 10%  bucket 14: 80%  bucket 15: 20%  bucket 14: 90%  bucket 15: 30%  bucket 15: 40%  Sorting block time: 00:00:00Returning block of 86 for bucket 13  bucket 14: 100%  bucket 15: 50%  Sorting block of length 82 for bucket 14  bucket 15: 60%  (Using difference cover)  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Entering block accumulator loop for bucket 18:  Calculating Z arrays for bucket 19  bucket 18: 10%  bucket 18: 20%  Entering block accumulator loop for bucket 19:  bucket 18: 30%  bucket 19: 10%  Sorting block time: 00:00:00  bucket 18: 40%Returning block of 40 for bucket 17  bucket 19: 20%  bucket 18: 50%  bucket 19: 30%  bucket 18: 60%  bucket 19: 40%  bucket 18: 70%  bucket 19: 50%  bucket 18: 80%  bucket 19: 60%  bucket 18: 90%  bucket 19: 70%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%Getting block 21 of 60  Reserving size (126) for bucket 21  bucket 20: 50%  Calculating Z arrays for bucket 21  bucket 20: 60%  Entering block accumulator loop for bucket 21:  bucket 20: 70%  bucket 21: 10%  bucket 20: 80%  bucket 21: 20%  bucket 20: 90%  bucket 21: 30%  bucket 20: 100%  bucket 21: 40%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Entering block accumulator loop for bucket 22:  Calculating Z arrays for bucket 23  bucket 22: 10%  bucket 22: 20%  Entering block accumulator loop for bucket 23:  bucket 22: 30%  bucket 23: 10%  bucket 22: 40%  bucket 22: 50%  bucket 23: 20%  bucket 22: 60%  bucket 23: 30%  bucket 22: 70%  bucket 23: 40%  bucket 22: 80%  bucket 23: 50%  bucket 22: 90%  bucket 23: 60%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 25:  bucket 25: 10%  Entering block accumulator loop for bucket 26:  bucket 25: 20%  bucket 26: 10%  bucket 25: 30%  bucket 26: 20%  bucket 25: 40%  bucket 26: 30%  bucket 25: 50%  bucket 26: 40%  bucket 25: 60%  bucket 26: 50%  bucket 25: 70%  bucket 26: 60%  bucket 25: 80%  bucket 26: 70%  bucket 25: 90%  bucket 26: 80%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%Getting block 28 of 60  Reserving size (126) for bucket 28  bucket 27: 80%  Calculating Z arrays for bucket 28  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  Sorting block time: 00:00:00Returning block of 120 for bucket 27  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30Getting block 31 of 60  Calculating Z arrays for bucket 30  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 30:  Entering block accumulator loop for bucket 31:  bucket 30: 10%  bucket 31: 10%  bucket 30: 20%  bucket 31: 20%  bucket 30: 30%  bucket 31: 30%  bucket 30: 40%  bucket 31: 40%  bucket 30: 50%  bucket 31: 50%  bucket 30: 60%  bucket 31: 60%  bucket 30: 70%  bucket 31: 70%  bucket 30: 80%  bucket 31: 80%  bucket 30: 90%  bucket 31: 90%  bucket 30: 100%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 32 of 60  Reserving size (126) for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 32  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  Entering block accumulator loop for bucket 32:  bucket 33: 10%  bucket 32: 10%  bucket 33: 20%  bucket 32: 20%  bucket 33: 30%  bucket 32: 30%  bucket 33: 40%  bucket 32: 40%  bucket 33: 50%  bucket 32: 50%  bucket 32: 60%  bucket 33: 60%  bucket 32: 70%  bucket 33: 70%  bucket 32: 80%  bucket 33: 80%  bucket 32: 90%  bucket 33: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  bucket 34: 20%  bucket 34: 30%  Entering block accumulator loop for bucket 35:  bucket 34: 40%  bucket 34: 50%  bucket 35: 10%  bucket 34: 60%  bucket 35: 20%  bucket 34: 70%  bucket 35: 30%  bucket 34: 80%  bucket 35: 40%  bucket 34: 90%  bucket 35: 50%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 36: 20%  bucket 36: 30%  bucket 36: 40%  bucket 36: 50%  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 38:  Entering block accumulator loop for bucket 37:  bucket 38: 10%  bucket 37: 10%  bucket 38: 20%  bucket 37: 20%  bucket 38: 30%  bucket 37: 30%  bucket 38: 40%  bucket 37: 40%  bucket 38: 50%  bucket 37: 50%  bucket 38: 60%  bucket 37: 60%  bucket 38: 70%  bucket 37: 70%  bucket 38: 80%  bucket 37: 80%  bucket 38: 90%  bucket 37: 90%  bucket 38: 100%  bucket 37: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 39:  bucket 39: 10%  Entering block accumulator loop for bucket 40:  bucket 39: 20%  bucket 40: 10%  bucket 39: 30%  bucket 40: 20%  bucket 40: 30%  bucket 39: 40%  bucket 40: 40%  bucket 39: 50%  bucket 40: 50%  bucket 40: 60%  bucket 39: 60%  bucket 40: 70%  bucket 39: 70%  bucket 40: 80%  bucket 39: 80%  bucket 40: 90%  bucket 39: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%Getting block 42 of 60  Reserving size (126) for bucket 42  bucket 41: 40%  Calculating Z arrays for bucket 42  bucket 41: 50%  Entering block accumulator loop for bucket 42:  bucket 41: 60%  bucket 41: 70%  bucket 42: 10%  bucket 41: 80%  bucket 42: 20%  bucket 41: 90%  bucket 42: 30%  bucket 41: 100%  bucket 42: 40%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  Entering block accumulator loop for bucket 45:  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  Sorting block time: 00:00:00Returning block of 67 for bucket 44  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  Entering block accumulator loop for bucket 47:  bucket 46: 70%  bucket 47: 10%  bucket 46: 80%  bucket 47: 20%  bucket 47: 30%  bucket 46: 90%  bucket 47: 40%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 48:  Entering block accumulator loop for bucket 49:  bucket 48: 10%  bucket 49: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 49: 20%  bucket 48: 50%  bucket 49: 30%  bucket 48: 60%  bucket 49: 40%  bucket 48: 70%  bucket 49: 50%  bucket 48: 80%  bucket 49: 60%  bucket 48: 90%  bucket 49: 70%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Entering block accumulator loop for bucket 51:  Calculating Z arrays for bucket 52  bucket 51: 10%  bucket 51: 20%  Entering block accumulator loop for bucket 52:  bucket 51: 30%  bucket 52: 10%  bucket 51: 40%  bucket 52: 20%  bucket 51: 50%  bucket 52: 30%  bucket 51: 60%  bucket 52: 40%  bucket 51: 70%  bucket 52: 50%  bucket 51: 80%  bucket 52: 60%  bucket 51: 90%  bucket 52: 70%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  Sorting block time: 00:00:00Returning block of 65 for bucket 54  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Entering block accumulator loop for bucket 57:  Calculating Z arrays for bucket 58  bucket 57: 10%  Entering block accumulator loop for bucket 58:  bucket 57: 20%  bucket 57: 30%  bucket 58: 10%  bucket 57: 40%  bucket 58: 20%  bucket 57: 50%  bucket 58: 30%  bucket 57: 60%  bucket 58: 40%  bucket 57: 70%  bucket 57: 80%  bucket 58: 50%  bucket 57: 90%  bucket 58: 60%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 59:  Entering block accumulator loop for bucket 60:  bucket 59: 10%  bucket 60: 10%  bucket 59: 20%  bucket 60: 20%  bucket 60: 30%  bucket 59: 30%  bucket 60: 40%  bucket 59: 40%  bucket 60: 50%  bucket 59: 50%  bucket 60: 60%  bucket 60: 70%  bucket 59: 60%  bucket 60: 80%  bucket 59: 70%  bucket 60: 90%  bucket 59: 80%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #13)" name="12" time="32.2322051525116">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1  Entering block accumulator loop for bucket 1:  bucket 1: 10%  bucket 1: 20%  bucket 1: 30%  bucket 1: 40%  bucket 1: 50%  bucket 1: 60%  bucket 1: 70%  bucket 1: 80%Getting block 2 of 60  Reserving size (126) for bucket 2  bucket 1: 90%  Calculating Z arrays for bucket 2  bucket 1: 100%  Sorting block of length 42 for bucket 1  (Using difference cover)Getting block 3 of 60  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 3:  bucket 2: 10%Getting block 4 of 60  bucket 3: 10%  bucket 2: 20%  bucket 3: 20%  Reserving size (126) for bucket 4  bucket 2: 30%  bucket 3: 30%  Calculating Z arrays for bucket 4  bucket 2: 40%  bucket 3: 40%Getting block 5 of 60  Reserving size (126) for bucket 5  bucket 2: 50%  Calculating Z arrays for bucket 5  bucket 3: 50%  Entering block accumulator loop for bucket 4:  bucket 2: 60%  bucket 3: 60%  bucket 4: 10%  Entering block accumulator loop for bucket 5:  bucket 2: 70%  bucket 3: 70%  bucket 4: 20%  bucket 5: 10%  bucket 3: 80%  bucket 2: 80%  bucket 3: 90%  bucket 4: 30%  bucket 5: 20%  bucket 2: 90%  bucket 4: 40%  bucket 3: 100%  bucket 5: 30%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 4: 50%  bucket 2: 100%  Sorting block time: 00:00:00Getting block 6 of 60  Reserving size (126) for bucket 6  bucket 5: 40%  Sorting block of length 84 for bucket 2  (Using difference cover)  Calculating Z arrays for bucket 6Returning block of 43 for bucket 1  bucket 4: 60%  bucket 5: 50%  Sorting block time: 00:00:00Getting block 7 of 60Returning block of 107 for bucket 3  Reserving size (126) for bucket 7  bucket 4: 70%  Sorting block time: 00:00:00Getting block 8 of 60  Reserving size (126) for bucket 8  bucket 5: 60%Returning block of 85 for bucket 2  Entering block accumulator loop for bucket 6:  Calculating Z arrays for bucket 8  bucket 4: 80%  Calculating Z arrays for bucket 7  bucket 4: 90%  Entering block accumulator loop for bucket 8:  bucket 5: 70%  bucket 4: 100%  bucket 6: 10%  Entering block accumulator loop for bucket 7:  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 8: 10%  bucket 6: 20%  bucket 5: 80%  bucket 7: 10%  bucket 8: 20%  bucket 5: 90%  bucket 6: 30%  bucket 7: 20%  bucket 8: 30%  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 8: 40%  bucket 7: 30%  bucket 6: 40%  bucket 8: 50%  bucket 7: 40%  bucket 6: 50%  bucket 8: 60%  bucket 7: 50%  bucket 6: 60%  bucket 7: 60%  bucket 8: 70%  bucket 6: 70%  bucket 7: 70%  bucket 8: 80%  bucket 7: 80%  bucket 6: 80%  bucket 8: 90%  bucket 7: 90%  bucket 6: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  bucket 6: 100%  bucket 7: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  (Using difference cover)  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 64 for bucket 5Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  Entering block accumulator loop for bucket 10:  bucket 9: 30%  bucket 9: 40%  bucket 10: 10%  bucket 9: 50%  bucket 9: 60%  bucket 10: 20%  bucket 9: 70%  bucket 10: 30%  bucket 9: 80%  bucket 9: 90%  bucket 10: 40%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12Getting block 13 of 60  Entering block accumulator loop for bucket 12:  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  bucket 12: 10%  bucket 12: 20%  Entering block accumulator loop for bucket 13:  bucket 12: 30%  bucket 12: 40%  bucket 13: 10%  bucket 12: 50%  bucket 13: 20%  bucket 12: 60%  bucket 13: 30%  bucket 12: 70%  bucket 12: 80%  bucket 13: 40%  bucket 12: 90%  bucket 13: 50%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  Sorting block time: 00:00:00  (Using difference cover)Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 14:  bucket 14: 10%  Entering block accumulator loop for bucket 15:  bucket 14: 20%  bucket 15: 10%  bucket 14: 30%  bucket 15: 20%  bucket 14: 40%  bucket 15: 30%  bucket 14: 50%  bucket 15: 40%  bucket 14: 60%  bucket 15: 50%  bucket 14: 70%  bucket 15: 60%  bucket 14: 80%  bucket 15: 70%  bucket 14: 90%  bucket 15: 80%  bucket 14: 100%  bucket 15: 90%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%Getting block 17 of 60  bucket 16: 80%  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%  Sorting block time: 00:00:00  bucket 17: 70%Returning block of 101 for bucket 16  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 18:  Entering block accumulator loop for bucket 19:  bucket 18: 10%  bucket 19: 10%  bucket 18: 20%  bucket 19: 20%  bucket 18: 30%  bucket 19: 30%  bucket 18: 40%  bucket 19: 40%  bucket 18: 50%  bucket 19: 50%  bucket 19: 60%  bucket 18: 60%  bucket 19: 70%  bucket 18: 70%  bucket 19: 80%  bucket 18: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 22:  Entering block accumulator loop for bucket 21:  bucket 22: 10%  bucket 21: 10%  bucket 22: 20%  bucket 21: 20%  bucket 22: 30%  bucket 21: 30%  bucket 22: 40%  bucket 21: 40%  bucket 22: 50%  bucket 21: 50%  bucket 22: 60%  bucket 21: 60%  bucket 22: 70%  bucket 21: 70%  bucket 22: 80%  bucket 21: 80%  bucket 22: 90%  bucket 21: 90%  bucket 22: 100%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Entering block accumulator loop for bucket 23:  Calculating Z arrays for bucket 24  bucket 23: 10%  Entering block accumulator loop for bucket 24:  bucket 23: 20%  bucket 24: 10%  bucket 23: 30%  bucket 24: 20%  bucket 23: 40%  bucket 24: 30%  bucket 23: 50%  bucket 24: 40%  bucket 23: 60%  bucket 24: 50%  bucket 23: 70%  bucket 24: 60%  bucket 23: 80%  bucket 24: 70%  bucket 23: 90%  bucket 24: 80%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 26:  bucket 26: 10%  Entering block accumulator loop for bucket 27:  bucket 26: 20%  bucket 26: 30%  bucket 27: 10%  bucket 26: 40%  bucket 27: 20%  bucket 26: 50%  bucket 27: 30%  bucket 26: 60%  bucket 27: 40%  bucket 26: 70%  bucket 27: 50%  bucket 26: 80%  bucket 27: 60%  bucket 26: 90%  bucket 27: 70%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 28:  Entering block accumulator loop for bucket 29:  bucket 28: 10%  bucket 29: 10%  bucket 28: 20%  bucket 29: 20%  bucket 28: 30%  bucket 29: 30%  bucket 28: 40%  bucket 29: 40%  bucket 28: 50%  bucket 29: 50%  bucket 28: 60%  bucket 29: 60%  bucket 28: 70%  bucket 29: 70%  bucket 28: 80%  bucket 28: 90%  bucket 29: 80%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 32:Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 31:  bucket 32: 10%  Entering block accumulator loop for bucket 33:  bucket 31: 10%  bucket 32: 20%  bucket 33: 10%  bucket 32: 30%  bucket 31: 20%  bucket 33: 20%  bucket 32: 40%  bucket 31: 30%  bucket 33: 30%  bucket 32: 50%  bucket 31: 40%  bucket 33: 40%  bucket 32: 60%  bucket 31: 50%  bucket 33: 50%  bucket 32: 70%Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  bucket 32: 80%  bucket 31: 60%  bucket 33: 60%  bucket 32: 90%  bucket 31: 70%  Entering block accumulator loop for bucket 34:  bucket 33: 70%  bucket 32: 100%  bucket 31: 80%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 33: 80%  bucket 31: 90%  bucket 34: 10%  bucket 33: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 20%  (Using difference cover)  bucket 34: 30%  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 36:  Entering block accumulator loop for bucket 37:  bucket 36: 10%  bucket 37: 10%  bucket 36: 20%  bucket 37: 20%  bucket 36: 30%  bucket 37: 30%  bucket 36: 40%  bucket 37: 40%  bucket 37: 50%  bucket 36: 50%  bucket 37: 60%  bucket 36: 60%  bucket 37: 70%  bucket 37: 80%  bucket 36: 70%  bucket 37: 90%  bucket 36: 80%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:  bucket 39: 10%Getting block 40 of 60  bucket 39: 20%  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  bucket 39: 30%  bucket 39: 40%  bucket 39: 50%  Entering block accumulator loop for bucket 40:  bucket 39: 60%  bucket 40: 10%  bucket 39: 70%  bucket 40: 20%  bucket 39: 80%  bucket 40: 30%  bucket 39: 90%  bucket 40: 40%  bucket 39: 100%  bucket 40: 50%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 41:  Entering block accumulator loop for bucket 42:  bucket 41: 10%  bucket 42: 10%  bucket 41: 20%  bucket 42: 20%  bucket 41: 30%  bucket 42: 30%  bucket 41: 40%  bucket 42: 40%  bucket 42: 50%  bucket 41: 50%  bucket 42: 60%  bucket 41: 60%  bucket 42: 70%  bucket 42: 80%  bucket 41: 70%  bucket 42: 90%  bucket 41: 80%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  bucket 44: 40%  bucket 44: 50%  Entering block accumulator loop for bucket 45:  bucket 44: 60%  bucket 45: 10%  bucket 44: 70%  bucket 45: 20%  bucket 44: 80%  bucket 45: 30%  bucket 44: 90%  bucket 45: 40%  bucket 44: 100%  bucket 45: 50%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  Sorting block time: 00:00:00  bucket 47: 30%Returning block of 70 for bucket 46  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  bucket 49: 10%  bucket 49: 20%  Entering block accumulator loop for bucket 50:  bucket 49: 30%  bucket 50: 10%  bucket 49: 40%  bucket 50: 20%  bucket 49: 50%  bucket 49: 60%  bucket 50: 30%  bucket 49: 70%  bucket 50: 40%  bucket 49: 80%  bucket 49: 90%  bucket 50: 50%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 51: 10%  bucket 51: 20%Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  bucket 51: 30%  bucket 51: 40%  Entering block accumulator loop for bucket 52:  bucket 51: 50%  bucket 52: 10%  bucket 52: 20%  bucket 51: 60%  bucket 52: 30%  bucket 51: 70%  bucket 52: 40%  bucket 51: 80%  bucket 52: 50%  bucket 51: 90%  bucket 52: 60%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 53:  Entering block accumulator loop for bucket 54:  bucket 53: 10%  bucket 54: 10%  bucket 53: 20%  bucket 54: 20%  bucket 53: 30%  bucket 54: 30%  bucket 54: 40%  bucket 53: 40%  bucket 54: 50%  bucket 53: 50%  bucket 54: 60%  bucket 54: 70%  bucket 53: 60%  bucket 53: 70%  bucket 54: 80%  bucket 53: 80%  bucket 54: 90%  bucket 53: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 56:  bucket 56: 10%  Entering block accumulator loop for bucket 57:  bucket 56: 20%  bucket 56: 30%  bucket 57: 10%  bucket 57: 20%  bucket 56: 40%  bucket 57: 30%  bucket 56: 50%  bucket 57: 40%  bucket 56: 60%  bucket 57: 50%  bucket 56: 70%  bucket 57: 60%  bucket 56: 80%  bucket 57: 70%  bucket 56: 90%  bucket 57: 80%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58Getting block 59 of 60  Entering block accumulator loop for bucket 58:  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  bucket 58: 10%  Entering block accumulator loop for bucket 59:  bucket 58: 20%  bucket 59: 10%  bucket 58: 30%  bucket 59: 20%  bucket 58: 40%  bucket 59: 30%  bucket 58: 50%  bucket 59: 40%  bucket 58: 60%  bucket 58: 70%  bucket 59: 50%  bucket 58: 80%  bucket 58: 90%  bucket 59: 60%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #13)" name="12" time="34.135457277297974">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60Getting block 2 of 60  Reserving size (126) for bucket 2  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 2Getting block 3 of 60  Entering block accumulator loop for bucket 2:  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 3Getting block 4 of 60  Reserving size (126) for bucket 4  Entering block accumulator loop for bucket 1:  Entering block accumulator loop for bucket 3:  Calculating Z arrays for bucket 4  bucket 1: 10%  bucket 2: 10%Getting block 5 of 60Getting block 6 of 60  bucket 1: 20%  Entering block accumulator loop for bucket 4:  bucket 3: 10%  Reserving size (126) for bucket 5  Reserving size (126) for bucket 6  bucket 2: 20%  bucket 3: 20%  bucket 1: 30%  bucket 2: 30%Getting block 8 of 60  bucket 2: 40%  bucket 3: 30%  Reserving size (126) for bucket 8  Calculating Z arrays for bucket 6Getting block 7 of 60  Calculating Z arrays for bucket 8  bucket 1: 40%  bucket 2: 50%  Calculating Z arrays for bucket 5  bucket 2: 60%  Reserving size (126) for bucket 7  Entering block accumulator loop for bucket 8:  bucket 3: 40%  Calculating Z arrays for bucket 7  bucket 1: 50%  Entering block accumulator loop for bucket 6:  bucket 3: 50%  bucket 4: 10%  bucket 1: 60%  bucket 3: 60%  Entering block accumulator loop for bucket 5:  bucket 1: 70%  bucket 8: 10%  bucket 6: 10%  Entering block accumulator loop for bucket 7:  bucket 2: 70%  bucket 5: 10%  bucket 4: 20%  bucket 2: 80%  bucket 5: 20%  bucket 8: 20%  bucket 6: 20%  bucket 1: 80%  bucket 2: 90%  bucket 5: 30%  bucket 4: 30%  bucket 7: 10%  bucket 3: 70%  bucket 1: 90%  bucket 4: 40%  bucket 2: 100%  bucket 6: 30%  bucket 8: 30%  bucket 5: 40%  bucket 1: 100%  bucket 3: 80%  Sorting block of length 42 for bucket 1  bucket 7: 20%  bucket 8: 40%  bucket 3: 90%  bucket 6: 40%  (Using difference cover)  bucket 5: 50%  bucket 6: 50%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 4: 50%  bucket 3: 100%  bucket 6: 60%  bucket 7: 30%  bucket 8: 50%  bucket 5: 60%  bucket 6: 70%  bucket 4: 60%  bucket 8: 60%  bucket 7: 40%  bucket 6: 80%  bucket 4: 70%  bucket 8: 70%  bucket 6: 90%  bucket 7: 50%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 5: 70%  bucket 6: 100%  bucket 7: 60%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 4: 80%  bucket 5: 80%  bucket 8: 80%  bucket 7: 70%  bucket 4: 90%  bucket 8: 90%  bucket 7: 80%  bucket 5: 90%  bucket 4: 100%  bucket 7: 90%  bucket 5: 100%  bucket 8: 100%  bucket 7: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  Sorting block of length 68 for bucket 4  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block of length 94 for bucket 8  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 69 for bucket 4Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%Getting block 10 of 60  bucket 9: 60%  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 70%  bucket 9: 80%  Entering block accumulator loop for bucket 10:  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 12: 60%  bucket 11: 60%  bucket 12: 70%  bucket 11: 70%  bucket 12: 80%  bucket 12: 90%  bucket 11: 80%  bucket 12: 100%  Sorting block of length 82 for bucket 12  bucket 11: 90%  (Using difference cover)  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  Entering block accumulator loop for bucket 14:  bucket 13: 70%  bucket 14: 10%  bucket 13: 80%  bucket 14: 20%  bucket 14: 30%  bucket 13: 90%  bucket 14: 40%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Entering block accumulator loop for bucket 15:  Calculating Z arrays for bucket 16  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  Entering block accumulator loop for bucket 16:  bucket 15: 50%  bucket 15: 60%  bucket 16: 10%  bucket 15: 70%  bucket 16: 20%  bucket 15: 80%  bucket 15: 90%  bucket 16: 30%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 40%  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block time: 00:00:00  Sorting block of length 100 for bucket 16  (Using difference cover)Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  Entering block accumulator loop for bucket 18:  bucket 17: 10%  bucket 18: 10%  bucket 17: 20%  bucket 18: 20%  bucket 17: 30%  bucket 18: 30%  bucket 17: 40%  bucket 18: 40%  bucket 17: 50%  bucket 18: 50%  bucket 17: 60%  bucket 18: 60%  bucket 17: 70%  bucket 18: 70%  bucket 17: 80%  bucket 18: 80%  bucket 17: 90%  bucket 18: 90%  bucket 17: 100%  bucket 18: 100%  Sorting block of length 39 for bucket 17  Sorting block of length 122 for bucket 18  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 19:  bucket 19: 10%  Entering block accumulator loop for bucket 20:  bucket 19: 20%  bucket 20: 10%  bucket 19: 30%  bucket 20: 20%  bucket 19: 40%  bucket 20: 30%  bucket 19: 50%  bucket 20: 40%  bucket 19: 60%  bucket 20: 50%  bucket 19: 70%  bucket 20: 60%  bucket 20: 70%  bucket 19: 80%  bucket 20: 80%  bucket 19: 90%  bucket 20: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  bucket 21: 10%  Entering block accumulator loop for bucket 22:  bucket 21: 20%  bucket 22: 10%  bucket 21: 30%  bucket 22: 20%  bucket 21: 40%  bucket 22: 30%  bucket 21: 50%  bucket 21: 60%  bucket 22: 40%  bucket 21: 70%  bucket 22: 50%  bucket 21: 80%  bucket 21: 90%  bucket 22: 60%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  bucket 23: 50%  bucket 23: 60%  Entering block accumulator loop for bucket 24:  bucket 23: 70%  bucket 24: 10%  bucket 23: 80%  bucket 24: 20%  bucket 23: 90%  bucket 24: 30%  bucket 24: 40%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  bucket 25: 60%  bucket 25: 70%  Entering block accumulator loop for bucket 26:  bucket 25: 80%  bucket 26: 10%  bucket 25: 90%  bucket 26: 20%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  Sorting block time: 00:00:00Returning block of 120 for bucket 27  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 30:  Entering block accumulator loop for bucket 29:  bucket 30: 10%  bucket 29: 10%  bucket 30: 20%  bucket 29: 20%  bucket 30: 30%  bucket 29: 30%  bucket 30: 40%  bucket 29: 40%  bucket 30: 50%  bucket 29: 50%  bucket 30: 60%  bucket 29: 60%  bucket 30: 70%  bucket 29: 70%  bucket 30: 80%  bucket 29: 80%  bucket 30: 90%  bucket 29: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31Getting block 32 of 60  Entering block accumulator loop for bucket 31:  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  bucket 31: 10%  Entering block accumulator loop for bucket 32:  bucket 31: 20%  bucket 32: 10%  bucket 31: 30%  bucket 32: 20%  bucket 32: 30%  bucket 31: 40%  bucket 32: 40%  bucket 31: 50%  bucket 32: 50%  bucket 32: 60%  bucket 31: 60%  bucket 32: 70%  bucket 31: 70%  bucket 32: 80%  bucket 31: 80%  bucket 32: 90%  bucket 32: 100%  bucket 31: 90%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33Getting block 34 of 60  Entering block accumulator loop for bucket 33:  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  bucket 33: 10%  bucket 33: 20%  Entering block accumulator loop for bucket 34:  bucket 33: 30%  bucket 34: 10%  bucket 33: 40%  bucket 34: 20%  bucket 33: 50%  bucket 34: 30%  bucket 33: 60%  bucket 34: 40%  bucket 33: 70%  bucket 34: 50%  bucket 33: 80%  bucket 34: 60%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 36:  Entering block accumulator loop for bucket 37:  bucket 36: 10%  bucket 37: 10%  bucket 36: 20%  bucket 37: 20%  bucket 37: 30%  bucket 36: 30%  bucket 37: 40%  bucket 36: 40%  bucket 37: 50%  bucket 36: 50%  bucket 37: 60%  bucket 36: 60%  bucket 37: 70%  bucket 37: 80%  bucket 36: 70%  bucket 37: 90%  bucket 36: 80%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 38:  bucket 38: 10%  Entering block accumulator loop for bucket 39:  bucket 38: 20%  bucket 39: 10%  bucket 38: 30%  bucket 39: 20%  bucket 38: 40%  bucket 39: 30%  bucket 38: 50%  bucket 39: 40%Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  bucket 38: 60%  bucket 39: 50%  bucket 38: 70%  Entering block accumulator loop for bucket 40:  bucket 39: 60%  bucket 38: 80%  bucket 39: 70%  bucket 40: 10%  bucket 39: 80%  bucket 38: 90%  bucket 40: 20%  bucket 39: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  bucket 40: 30%  (Using difference cover)  bucket 39: 100%  bucket 40: 40%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 50%  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 41:  bucket 41: 10%  Entering block accumulator loop for bucket 42:  bucket 41: 20%  bucket 42: 10%  bucket 41: 30%  bucket 42: 20%  bucket 41: 40%  bucket 42: 30%  bucket 41: 50%  bucket 42: 40%  bucket 41: 60%  bucket 42: 50%  bucket 41: 70%  bucket 42: 60%  bucket 41: 80%  bucket 42: 70%  bucket 41: 90%  bucket 42: 80%  bucket 41: 100%  bucket 42: 90%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Entering block accumulator loop for bucket 43:  Calculating Z arrays for bucket 44  bucket 43: 10%  Entering block accumulator loop for bucket 44:  bucket 43: 20%  bucket 44: 10%  bucket 43: 30%  bucket 44: 20%  bucket 43: 40%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 43: 50%  bucket 44: 60%  bucket 43: 60%  bucket 44: 70%  bucket 43: 70%  bucket 44: 80%  bucket 43: 80%  bucket 44: 90%  bucket 43: 90%  bucket 44: 100%  bucket 43: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  bucket 46: 60%  bucket 46: 70%  Entering block accumulator loop for bucket 47:  bucket 46: 80%  bucket 47: 10%  bucket 46: 90%  bucket 47: 20%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  bucket 48: 50%  bucket 48: 60%  Entering block accumulator loop for bucket 49:  bucket 48: 70%  bucket 48: 80%  bucket 49: 10%  bucket 48: 90%  bucket 49: 20%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 50:  bucket 50: 10%  Entering block accumulator loop for bucket 51:  bucket 50: 20%  bucket 50: 30%  bucket 51: 10%  bucket 50: 40%  bucket 51: 20%  bucket 50: 50%  bucket 51: 30%  bucket 50: 60%  bucket 51: 40%  bucket 50: 70%  bucket 50: 80%  bucket 51: 50%  bucket 50: 90%  bucket 51: 60%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 52:  bucket 52: 10%  Entering block accumulator loop for bucket 53:  bucket 52: 20%  bucket 53: 10%  bucket 53: 20%  bucket 52: 30%  bucket 53: 30%  bucket 52: 40%  bucket 53: 40%  bucket 52: 50%  bucket 53: 50%  bucket 53: 60%  bucket 52: 60%  bucket 53: 70%  bucket 52: 70%  bucket 53: 80%  bucket 53: 90%  bucket 52: 80%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54Getting block 55 of 60  Entering block accumulator loop for bucket 54:  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  bucket 54: 10%  Entering block accumulator loop for bucket 55:  bucket 54: 20%  bucket 55: 10%  bucket 54: 30%  bucket 55: 20%  bucket 54: 40%  bucket 55: 30%  bucket 55: 40%  bucket 54: 50%  bucket 55: 50%  bucket 54: 60%  bucket 55: 60%  bucket 54: 70%  bucket 55: 70%  bucket 54: 80%  bucket 55: 80%  bucket 54: 90%  bucket 55: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 56:  bucket 56: 10%  Entering block accumulator loop for bucket 57:  bucket 56: 20%  bucket 57: 10%  bucket 56: 30%  bucket 57: 20%  bucket 56: 40%  bucket 57: 30%  bucket 56: 50%  bucket 57: 40%  bucket 56: 60%  bucket 57: 50%  bucket 56: 70%  bucket 57: 60%  bucket 56: 80%  bucket 57: 70%  bucket 56: 90%  bucket 57: 80%  bucket 56: 100%  Sorting block of length 55 for bucket 56  bucket 57: 90%  (Using difference cover)  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 59:  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 59: 10%  bucket 60: 20%  bucket 60: 30%  bucket 59: 20%  bucket 60: 40%  bucket 59: 30%  bucket 60: 50%  bucket 60: 60%  bucket 59: 40%  bucket 60: 70%  bucket 60: 80%  bucket 59: 50%  bucket 60: 90%  bucket 60: 100%  bucket 59: 60%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #14)" name="13" time="32.694976568222046">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60Getting block 2 of 60Getting block 3 of 60  Reserving size (126) for bucket 2  Reserving size (126) for bucket 1Getting block 4 of 60  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2Getting block 6 of 60  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 1:  Reserving size (126) for bucket 6  Reserving size (126) for bucket 4Getting block 5 of 60  Reserving size (126) for bucket 5  bucket 1: 10%  Reserving size (126) for bucket 3  bucket 1: 20%  Calculating Z arrays for bucket 6Getting block 8 of 60  Calculating Z arrays for bucket 3  bucket 2: 10%  Calculating Z arrays for bucket 4  Reserving size (126) for bucket 8  bucket 1: 30%  Entering block accumulator loop for bucket 3:  bucket 2: 20%Getting block 7 of 60  bucket 2: 30%  Entering block accumulator loop for bucket 4:  Calculating Z arrays for bucket 8  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 6:  Reserving size (126) for bucket 7  bucket 4: 10%  bucket 3: 10%  bucket 2: 40%  bucket 1: 40%  bucket 3: 20%  Calculating Z arrays for bucket 7  bucket 1: 50%  bucket 3: 30%  Entering block accumulator loop for bucket 5:  Entering block accumulator loop for bucket 8:  bucket 2: 50%  bucket 4: 20%  bucket 3: 40%  bucket 6: 10%  bucket 5: 10%  bucket 1: 60%  bucket 3: 50%  bucket 2: 60%  bucket 5: 20%  bucket 4: 30%  bucket 6: 20%  bucket 2: 70%  bucket 3: 60%  bucket 1: 70%  bucket 4: 40%  bucket 3: 70%  bucket 2: 80%  bucket 5: 30%  bucket 3: 80%  Entering block accumulator loop for bucket 7:  bucket 5: 40%  bucket 2: 90%  bucket 8: 10%  bucket 2: 100%  bucket 7: 10%  bucket 5: 50%  bucket 1: 80%  bucket 3: 90%  bucket 4: 50%  bucket 6: 30%  bucket 8: 20%  bucket 5: 60%  bucket 4: 60%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 7: 20%  bucket 8: 30%  bucket 4: 70%  bucket 3: 100%  bucket 5: 70%  bucket 4: 80%  bucket 6: 40%  bucket 5: 80%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 5: 90%  bucket 7: 30%  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 4: 90%  bucket 6: 50%  bucket 7: 40%  bucket 4: 100%  bucket 1: 90%  bucket 8: 40%  bucket 7: 50%  bucket 1: 100%  bucket 7: 60%  bucket 6: 60%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 8: 50%  bucket 7: 70%  bucket 6: 70%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 8: 60%  bucket 7: 80%  bucket 6: 80%  bucket 8: 70%  bucket 7: 90%  bucket 6: 90%  bucket 8: 80%  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 8: 90%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 95 for bucket 8Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 80%  bucket 9: 90%  Entering block accumulator loop for bucket 10:  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 12:  Entering block accumulator loop for bucket 13:  bucket 12: 10%  bucket 12: 20%  bucket 13: 10%  bucket 12: 30%  bucket 13: 20%  bucket 12: 40%  bucket 13: 30%  bucket 12: 50%  bucket 13: 40%  bucket 12: 60%  bucket 13: 50%  bucket 12: 70%  bucket 13: 60%  bucket 12: 80%  bucket 13: 70%  bucket 12: 90%  bucket 13: 80%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14Getting block 15 of 60  Calculating Z arrays for bucket 14  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 14:  Entering block accumulator loop for bucket 15:  bucket 14: 10%  bucket 15: 10%  bucket 14: 20%  bucket 15: 20%  bucket 14: 30%  bucket 15: 30%  bucket 14: 40%  bucket 15: 40%  bucket 14: 50%  bucket 15: 50%  bucket 14: 60%  bucket 15: 60%  bucket 14: 70%  bucket 15: 70%  bucket 14: 80%  bucket 15: 80%  bucket 14: 90%  bucket 15: 90%  bucket 14: 100%  bucket 15: 100%  Sorting block of length 68 for bucket 15  Sorting block of length 82 for bucket 14  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 16:  bucket 16: 10%  Entering block accumulator loop for bucket 17:  bucket 16: 20%  bucket 17: 10%  bucket 17: 20%  bucket 16: 30%  bucket 17: 30%  bucket 17: 40%  bucket 16: 40%  bucket 17: 50%  bucket 17: 60%  bucket 16: 50%  bucket 17: 70%  bucket 16: 60%  bucket 17: 80%  bucket 17: 90%  bucket 16: 70%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18Getting block 19 of 60  Entering block accumulator loop for bucket 18:  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  bucket 18: 10%  bucket 18: 20%  Entering block accumulator loop for bucket 19:  bucket 18: 30%  bucket 19: 10%  bucket 18: 40%  bucket 19: 20%  bucket 18: 50%  bucket 19: 30%  bucket 18: 60%  bucket 19: 40%  bucket 18: 70%  bucket 19: 50%  bucket 18: 80%  bucket 19: 60%  bucket 18: 90%  bucket 19: 70%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%Getting block 22 of 60  Reserving size (126) for bucket 22  bucket 21: 40%  Calculating Z arrays for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  bucket 21: 50%  Entering block accumulator loop for bucket 22:  bucket 21: 60%  bucket 22: 10%  Entering block accumulator loop for bucket 23:  bucket 21: 70%  bucket 22: 20%  bucket 23: 10%  bucket 21: 80%  bucket 22: 30%  bucket 23: 20%  bucket 21: 90%  bucket 22: 40%  bucket 23: 30%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 50%  bucket 23: 40%  bucket 22: 60%  bucket 23: 50%  bucket 22: 70%  bucket 22: 80%  bucket 23: 60%  bucket 22: 90%  bucket 22: 100%  bucket 23: 70%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 60  Entering block accumulator loop for bucket 24:  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  bucket 24: 10%  Entering block accumulator loop for bucket 25:  bucket 24: 20%  bucket 25: 10%  bucket 24: 30%  bucket 25: 20%  bucket 24: 40%  bucket 25: 30%  bucket 24: 50%  bucket 25: 40%  bucket 24: 60%  bucket 25: 50%  bucket 24: 70%  bucket 25: 60%  bucket 24: 80%  bucket 25: 70%  bucket 24: 90%  bucket 25: 80%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 30%  bucket 26: 40%  Entering block accumulator loop for bucket 27:  bucket 26: 50%  bucket 26: 60%  bucket 27: 10%  bucket 26: 70%  bucket 27: 20%  bucket 26: 80%  bucket 27: 30%  bucket 26: 90%  bucket 27: 40%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 30:  bucket 29: 10%  bucket 30: 10%  bucket 29: 20%  bucket 30: 20%  bucket 29: 30%  bucket 30: 30%  bucket 29: 40%  bucket 30: 40%  bucket 29: 50%  bucket 30: 50%  bucket 29: 60%  bucket 30: 60%  bucket 29: 70%  bucket 30: 70%  bucket 29: 80%  bucket 30: 80%  bucket 29: 90%  bucket 30: 90%  bucket 29: 100%  bucket 30: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  bucket 31: 20%  Entering block accumulator loop for bucket 32:  bucket 31: 30%  bucket 31: 40%  bucket 32: 10%  bucket 31: 50%  bucket 31: 60%  bucket 32: 20%  bucket 31: 70%  bucket 32: 30%  bucket 31: 80%  bucket 32: 40%  bucket 31: 90%  bucket 31: 100%  bucket 32: 50%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 33:  bucket 33: 10%  Entering block accumulator loop for bucket 34:  bucket 33: 20%  bucket 34: 10%  bucket 33: 30%  bucket 34: 20%  bucket 33: 40%  bucket 34: 30%  bucket 33: 50%  bucket 34: 40%  bucket 33: 60%  bucket 34: 50%  bucket 33: 70%  bucket 34: 60%  bucket 33: 80%  bucket 34: 70%  bucket 33: 90%  bucket 34: 80%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 36: 20%Getting block 37 of 60  bucket 36: 30%  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  bucket 36: 40%  Entering block accumulator loop for bucket 37:  bucket 36: 50%  bucket 37: 10%  bucket 36: 60%  bucket 37: 20%  bucket 36: 70%  bucket 37: 30%  bucket 36: 80%  bucket 37: 40%  bucket 36: 90%  bucket 37: 50%  bucket 36: 100%  bucket 37: 60%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 39:  Entering block accumulator loop for bucket 40:  bucket 39: 10%  bucket 40: 10%  bucket 39: 20%  bucket 40: 20%  bucket 39: 30%  bucket 40: 30%  bucket 39: 40%  bucket 40: 40%  bucket 39: 50%  bucket 40: 50%  bucket 39: 60%  bucket 40: 60%  bucket 39: 70%  bucket 40: 70%  bucket 39: 80%  bucket 40: 80%  bucket 39: 90%  bucket 40: 90%  bucket 39: 100%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%  bucket 41: 40%  bucket 41: 50%  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  bucket 42: 10%  bucket 42: 20%  bucket 42: 30%  bucket 42: 40%  bucket 42: 50%  Sorting block time: 00:00:00Returning block of 89 for bucket 41  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  bucket 43: 50%  bucket 43: 60%  Entering block accumulator loop for bucket 44:  bucket 43: 70%  bucket 44: 10%  bucket 43: 80%  bucket 44: 20%  bucket 43: 90%  bucket 44: 30%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46Getting block 47 of 60  Calculating Z arrays for bucket 46  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 46:  Entering block accumulator loop for bucket 47:  bucket 46: 10%  bucket 47: 10%  bucket 46: 20%  bucket 47: 20%  bucket 46: 30%  bucket 47: 30%  bucket 46: 40%  bucket 47: 40%  bucket 46: 50%  bucket 47: 50%  bucket 46: 60%  bucket 47: 60%  bucket 46: 70%  bucket 47: 70%  bucket 46: 80%  bucket 47: 80%  bucket 46: 90%  bucket 47: 90%  bucket 46: 100%  bucket 47: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 49:  Entering block accumulator loop for bucket 48:  bucket 49: 10%  bucket 48: 10%  bucket 49: 20%  bucket 48: 20%  bucket 49: 30%  bucket 48: 30%  bucket 49: 40%  bucket 48: 40%  bucket 49: 50%  bucket 48: 50%  bucket 49: 60%  bucket 48: 60%  bucket 49: 70%  bucket 48: 70%  bucket 49: 80%  bucket 48: 80%  bucket 48: 90%  bucket 49: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%Getting block 51 of 60  Reserving size (126) for bucket 51  bucket 50: 40%  Calculating Z arrays for bucket 51  bucket 50: 50%  bucket 50: 60%  Entering block accumulator loop for bucket 51:  bucket 50: 70%  bucket 51: 10%  bucket 50: 80%  bucket 51: 20%  bucket 50: 90%  bucket 51: 30%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 40%  bucket 51: 50%  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 52:  bucket 52: 10%Getting block 53 of 60  Reserving size (126) for bucket 53  bucket 52: 20%  Calculating Z arrays for bucket 53  bucket 52: 30%  bucket 52: 40%  Entering block accumulator loop for bucket 53:  bucket 52: 50%  bucket 53: 10%  bucket 52: 60%  bucket 53: 20%  bucket 52: 70%  bucket 53: 30%  bucket 53: 40%  bucket 52: 80%  bucket 53: 50%  bucket 52: 90%  bucket 53: 60%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%Getting block 55 of 60  Reserving size (126) for bucket 55  bucket 54: 80%  Calculating Z arrays for bucket 55  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56Getting block 57 of 60  Entering block accumulator loop for bucket 56:  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  bucket 56: 10%  bucket 56: 20%  Entering block accumulator loop for bucket 57:  bucket 56: 30%  bucket 57: 10%  bucket 56: 40%  bucket 57: 20%  bucket 56: 50%  bucket 57: 30%  bucket 56: 60%  bucket 57: 40%  bucket 56: 70%  bucket 57: 50%  bucket 56: 80%  bucket 57: 60%  bucket 56: 90%  bucket 57: 70%  bucket 56: 100%  bucket 57: 80%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%Getting block 59 of 60  bucket 58: 40%  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  bucket 58: 50%  bucket 58: 60%  bucket 58: 70%  Entering block accumulator loop for bucket 59:  bucket 58: 80%  bucket 59: 10%  bucket 59: 20%  bucket 58: 90%  bucket 59: 30%  bucket 58: 100%  bucket 59: 40%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #14)" name="13" time="33.509949922561646">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 2Getting block 3 of 60  Reserving size (126) for bucket 3  bucket 1: 10%  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 2:  bucket 1: 20%Getting block 4 of 60  Entering block accumulator loop for bucket 3:  Reserving size (126) for bucket 4  Calculating Z arrays for bucket 4  bucket 1: 30%  bucket 2: 10%  bucket 1: 40%  bucket 3: 10%  bucket 1: 50%  Entering block accumulator loop for bucket 4:  bucket 3: 20%  bucket 2: 20%Getting block 5 of 60  bucket 4: 10%Getting block 7 of 60  Reserving size (126) for bucket 7  Reserving size (126) for bucket 5  bucket 2: 30%  bucket 3: 30%  Calculating Z arrays for bucket 5  bucket 4: 20%Getting block 6 of 60  bucket 4: 30%  bucket 3: 40%  Entering block accumulator loop for bucket 5:  Calculating Z arrays for bucket 7  bucket 4: 40%  bucket 1: 60%  bucket 4: 50%  bucket 3: 50%  Entering block accumulator loop for bucket 7:  bucket 5: 10%  bucket 3: 60%  bucket 4: 60%  bucket 7: 10%  bucket 1: 70%  bucket 5: 20%  bucket 2: 40%  bucket 3: 70%  bucket 1: 80%  bucket 5: 30%  bucket 7: 20%  bucket 1: 90%  bucket 5: 40%  Reserving size (126) for bucket 6  bucket 1: 100%  bucket 7: 30%  Sorting block of length 42 for bucket 1  bucket 5: 50%  (Using difference cover)  bucket 3: 80%  bucket 7: 40%  bucket 5: 60%  Calculating Z arrays for bucket 6Getting block 8 of 60  Reserving size (126) for bucket 8  bucket 3: 90%  bucket 5: 70%  Entering block accumulator loop for bucket 6:  bucket 2: 50%  bucket 4: 70%  bucket 7: 50%  bucket 6: 10%  bucket 4: 80%  bucket 5: 80%  Calculating Z arrays for bucket 8  bucket 5: 90%  bucket 2: 60%  Sorting block time: 00:00:00  bucket 7: 60%  bucket 5: 100%  bucket 3: 100%  bucket 7: 70%  bucket 2: 70%  bucket 6: 20%  Sorting block of length 63 for bucket 5  bucket 7: 80%  (Using difference cover)  Sorting block of length 106 for bucket 3  (Using difference cover)  Entering block accumulator loop for bucket 8:  bucket 2: 80%Returning block of 43 for bucket 1  bucket 4: 90%  bucket 7: 90%  bucket 2: 90%  bucket 8: 10%  bucket 2: 100%  bucket 4: 100%  Sorting block of length 84 for bucket 2  (Using difference cover)  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 8: 20%  bucket 6: 30%  bucket 6: 40%  bucket 8: 30%  bucket 6: 50%  bucket 6: 60%  bucket 8: 40%  bucket 6: 70%  bucket 8: 50%  bucket 6: 80%  bucket 8: 60%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 69 for bucket 4Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  Sorting block time: 00:00:00Returning block of 125 for bucket 9  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 90%  bucket 11: 100%  Entering block accumulator loop for bucket 12:  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  Sorting block time: 00:00:00  bucket 12: 100%Returning block of 96 for bucket 11  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Entering block accumulator loop for bucket 13:  Calculating Z arrays for bucket 14  bucket 13: 10%  bucket 13: 20%  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 13: 30%  bucket 14: 20%  bucket 13: 40%  bucket 14: 30%  bucket 13: 50%  bucket 14: 40%  bucket 13: 60%  bucket 14: 50%  bucket 13: 70%  bucket 14: 60%  bucket 13: 80%  bucket 13: 90%  bucket 14: 70%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:Getting block 16 of 60  Reserving size (126) for bucket 16  bucket 15: 10%  Calculating Z arrays for bucket 16Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18Getting block 17 of 60  Entering block accumulator loop for bucket 18:  bucket 15: 20%  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  bucket 18: 10%  Entering block accumulator loop for bucket 16:  bucket 15: 30%  bucket 18: 20%  bucket 16: 10%  Entering block accumulator loop for bucket 17:  bucket 15: 40%  bucket 18: 30%  bucket 16: 20%  bucket 17: 10%  bucket 15: 50%  bucket 18: 40%  bucket 16: 30%  bucket 17: 20%  bucket 15: 60%  bucket 16: 40%  bucket 17: 30%  bucket 18: 50%  bucket 15: 70%  bucket 16: 50%  bucket 18: 60%  bucket 17: 40%  bucket 16: 60%  bucket 15: 80%  bucket 17: 50%  bucket 16: 70%  bucket 15: 90%  bucket 17: 60%  bucket 18: 70%  bucket 16: 80%  bucket 17: 70%  bucket 15: 100%  bucket 18: 80%  bucket 16: 90%  Sorting block of length 68 for bucket 15  bucket 17: 80%  bucket 18: 90%  bucket 16: 100%  bucket 17: 90%  (Using difference cover)  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 17: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19Getting block 20 of 60  Entering block accumulator loop for bucket 19:  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 10%  Entering block accumulator loop for bucket 20:  bucket 19: 20%  bucket 20: 10%  bucket 19: 30%  bucket 20: 20%  bucket 19: 40%  bucket 20: 30%  bucket 19: 50%  bucket 20: 40%  bucket 19: 60%  bucket 20: 50%  bucket 19: 70%  bucket 20: 60%  bucket 19: 80%  bucket 20: 70%  bucket 19: 90%  bucket 20: 80%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)Getting block 22 of 60  Reserving size (126) for bucket 22  Sorting block time: 00:00:00  Calculating Z arrays for bucket 22Returning block of 55 for bucket 21  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  bucket 23: 80%  bucket 23: 90%  Entering block accumulator loop for bucket 24:  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 26:  Entering block accumulator loop for bucket 25:  bucket 26: 10%  bucket 25: 10%  bucket 26: 20%  bucket 25: 20%  bucket 26: 30%  bucket 25: 30%  bucket 26: 40%  bucket 25: 40%  bucket 26: 50%  bucket 25: 50%  bucket 26: 60%  bucket 25: 60%  bucket 26: 70%  bucket 25: 70%  bucket 26: 80%  bucket 25: 80%  bucket 26: 90%  bucket 25: 90%  bucket 26: 100%  bucket 25: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 40%  bucket 27: 50%  Entering block accumulator loop for bucket 28:  bucket 27: 60%  bucket 27: 70%  bucket 28: 10%  bucket 27: 80%  bucket 28: 20%  bucket 27: 90%  bucket 28: 30%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  bucket 29: 70%  bucket 29: 80%  Entering block accumulator loop for bucket 30:  bucket 29: 90%  bucket 30: 10%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 30: 20%  bucket 30: 30%Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  bucket 30: 40%  bucket 30: 50%  Entering block accumulator loop for bucket 31:  bucket 30: 60%  bucket 31: 10%  bucket 30: 70%  bucket 31: 20%  bucket 30: 80%  bucket 31: 30%  bucket 30: 90%  bucket 30: 100%  bucket 31: 40%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60Getting block 33 of 60  Reserving size (126) for bucket 33  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 32:  Entering block accumulator loop for bucket 33:  bucket 32: 10%  bucket 33: 10%  bucket 32: 20%  bucket 33: 20%  bucket 32: 30%  bucket 33: 30%  bucket 32: 40%  bucket 33: 40%  bucket 32: 50%  bucket 33: 50%  bucket 32: 60%  bucket 33: 60%  bucket 32: 70%  bucket 33: 70%  bucket 32: 80%  bucket 33: 80%  bucket 32: 90%  bucket 33: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 34: 20%  bucket 34: 30%  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%Getting block 35 of 60  bucket 34: 70%  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Entering block accumulator loop for bucket 35:  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  Sorting block time: 00:00:00Returning block of 123 for bucket 34  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 37:  bucket 37: 10%  Entering block accumulator loop for bucket 36:  bucket 37: 20%  bucket 37: 30%  bucket 36: 10%  bucket 37: 40%  bucket 37: 50%  bucket 36: 20%  bucket 37: 60%  bucket 37: 70%  bucket 36: 30%  bucket 37: 80%  bucket 36: 40%  bucket 37: 90%  bucket 36: 50%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)Getting block 38 of 60  Reserving size (126) for bucket 38  bucket 36: 60%  Calculating Z arrays for bucket 38  bucket 36: 70%  Entering block accumulator loop for bucket 38:  bucket 36: 80%  bucket 38: 10%  bucket 36: 90%  Sorting block time: 00:00:00Returning block of 60 for bucket 37  bucket 38: 20%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:  bucket 39: 10%  bucket 39: 20%Getting block 40 of 60  Reserving size (126) for bucket 40  bucket 39: 30%  Calculating Z arrays for bucket 40  bucket 39: 40%  Entering block accumulator loop for bucket 40:  bucket 39: 50%  bucket 40: 10%  bucket 40: 20%  bucket 39: 60%  bucket 40: 30%  bucket 39: 70%  bucket 40: 40%  bucket 39: 80%  bucket 40: 50%  bucket 39: 90%  bucket 40: 60%  bucket 39: 100%  bucket 40: 70%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  bucket 41: 40%  bucket 41: 50%  Entering block accumulator loop for bucket 42:  bucket 41: 60%  bucket 42: 10%  bucket 41: 70%  bucket 42: 20%  bucket 41: 80%  bucket 42: 30%  bucket 41: 90%  bucket 42: 40%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  Entering block accumulator loop for bucket 44:  bucket 43: 40%  bucket 44: 10%  bucket 43: 50%  bucket 44: 20%  bucket 43: 60%  bucket 44: 30%  bucket 43: 70%  bucket 44: 40%  bucket 43: 80%  bucket 44: 50%  bucket 43: 90%  bucket 44: 60%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60Getting block 46 of 60  Reserving size (126) for bucket 45  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 46:  Entering block accumulator loop for bucket 45:  bucket 46: 10%  bucket 45: 10%  bucket 46: 20%  bucket 45: 20%  bucket 46: 30%  bucket 45: 30%  bucket 46: 40%  bucket 45: 40%  bucket 45: 50%  bucket 46: 50%  bucket 45: 60%  bucket 46: 60%  bucket 45: 70%  bucket 45: 80%  bucket 46: 70%  bucket 45: 90%  bucket 46: 80%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  bucket 47: 20%  bucket 47: 30%  Entering block accumulator loop for bucket 48:  bucket 47: 40%  bucket 48: 10%  bucket 47: 50%  bucket 48: 20%  bucket 47: 60%  bucket 48: 30%  bucket 47: 70%  bucket 48: 40%  bucket 47: 80%  bucket 48: 50%  bucket 47: 90%  bucket 48: 60%  bucket 47: 100%  bucket 48: 70%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  bucket 49: 10%  bucket 49: 20%  Entering block accumulator loop for bucket 50:  bucket 49: 30%  bucket 50: 10%  bucket 49: 40%  bucket 50: 20%  bucket 49: 50%  bucket 50: 30%  bucket 49: 60%  bucket 50: 40%  bucket 49: 70%  bucket 50: 50%  bucket 49: 80%  bucket 50: 60%  bucket 49: 90%  bucket 50: 70%  bucket 49: 100%  bucket 50: 80%  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 51: 10%  bucket 51: 20%  bucket 51: 30%  bucket 51: 40%  bucket 51: 50%  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 52:  Entering block accumulator loop for bucket 53:  bucket 52: 10%  bucket 53: 10%  bucket 52: 20%  bucket 53: 20%  bucket 52: 30%  bucket 53: 30%  bucket 52: 40%  bucket 53: 40%  bucket 52: 50%  bucket 53: 50%  bucket 52: 60%Getting block 54 of 60  Reserving size (126) for bucket 54  bucket 52: 70%  Calculating Z arrays for bucket 54  bucket 53: 60%  bucket 52: 80%  bucket 53: 70%  bucket 52: 90%  Entering block accumulator loop for bucket 54:  bucket 52: 100%  bucket 53: 80%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 54: 10%  bucket 53: 90%  bucket 53: 100%  bucket 54: 20%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55Getting block 56 of 60  Entering block accumulator loop for bucket 55:  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  bucket 55: 10%  Entering block accumulator loop for bucket 56:  bucket 55: 20%  bucket 55: 30%  bucket 56: 10%  bucket 55: 40%  bucket 56: 20%  bucket 55: 50%  bucket 56: 30%  bucket 55: 60%  bucket 56: 40%  bucket 55: 70%  bucket 56: 50%  bucket 55: 80%  bucket 56: 60%  bucket 55: 90%  bucket 56: 70%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  bucket 57: 40%  bucket 57: 50%  Entering block accumulator loop for bucket 58:  bucket 57: 60%  bucket 57: 70%  bucket 58: 10%  bucket 57: 80%  bucket 57: 90%  bucket 58: 20%  bucket 57: 100%  bucket 58: 30%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 59:  Entering block accumulator loop for bucket 60:  bucket 59: 10%  bucket 60: 10%  bucket 60: 20%  bucket 59: 20%  bucket 60: 30%  bucket 60: 40%  bucket 59: 30%  bucket 60: 50%  bucket 60: 60%  bucket 59: 40%  bucket 60: 70%  bucket 60: 80%  bucket 59: 50%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #15)" name="14" time="34.681774854660034">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1  Entering block accumulator loop for bucket 1:  bucket 1: 10%  bucket 1: 20%  bucket 1: 30%Getting block 2 of 60  bucket 1: 40%Getting block 3 of 60  Reserving size (126) for bucket 2  Reserving size (126) for bucket 3  bucket 1: 50%Getting block 4 of 60  Calculating Z arrays for bucket 3  bucket 1: 60%  Calculating Z arrays for bucket 2  bucket 1: 70%  Entering block accumulator loop for bucket 3:  Reserving size (126) for bucket 4Getting block 5 of 60Getting block 6 of 60  bucket 1: 80%  Entering block accumulator loop for bucket 2:  Reserving size (126) for bucket 6Getting block 7 of 60  bucket 3: 10%  Reserving size (126) for bucket 7  Calculating Z arrays for bucket 6Getting block 8 of 60  bucket 2: 10%  bucket 1: 90%  Calculating Z arrays for bucket 4  bucket 1: 100%  Reserving size (126) for bucket 5  Calculating Z arrays for bucket 7  Entering block accumulator loop for bucket 6:  bucket 3: 20%  Reserving size (126) for bucket 8  Entering block accumulator loop for bucket 4:  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 6: 10%  Entering block accumulator loop for bucket 7:  Calculating Z arrays for bucket 5  bucket 6: 20%  bucket 4: 10%  bucket 2: 20%  bucket 7: 10%  bucket 4: 20%  bucket 2: 30%  bucket 6: 30%  bucket 3: 30%  bucket 7: 20%  bucket 2: 40%  bucket 3: 40%  bucket 4: 30%  bucket 6: 40%  bucket 2: 50%  bucket 7: 30%  bucket 3: 50%  bucket 6: 50%  bucket 4: 40%  bucket 3: 60%  bucket 7: 40%  bucket 2: 60%  bucket 4: 50%  bucket 3: 70%  Entering block accumulator loop for bucket 5:  bucket 7: 50%  bucket 2: 70%  bucket 4: 60%  bucket 6: 60%  bucket 7: 60%  bucket 5: 10%  bucket 2: 80%  bucket 3: 80%  bucket 6: 70%  bucket 4: 70%  bucket 7: 70%  bucket 5: 20%  bucket 3: 90%  bucket 6: 80%  bucket 4: 80%  bucket 5: 30%  bucket 2: 90%  bucket 3: 100%  bucket 5: 40%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 2: 100%  Sorting block time: 00:00:00  bucket 7: 80%  bucket 6: 90%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 4: 90%  Calculating Z arrays for bucket 8Returning block of 43 for bucket 1  bucket 4: 100%  bucket 7: 90%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 5: 50%  bucket 6: 100%  bucket 7: 100%  bucket 5: 60%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block of length 90 for bucket 6  bucket 5: 70%  (Using difference cover)  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 64 for bucket 5Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 30%  bucket 11: 40%  Entering block accumulator loop for bucket 12:  bucket 11: 50%  bucket 12: 10%  bucket 11: 60%  bucket 12: 20%  bucket 11: 70%  bucket 12: 30%  bucket 11: 80%  bucket 12: 40%  bucket 11: 90%  bucket 12: 50%  bucket 11: 100%  bucket 12: 60%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%Getting block 14 of 60  Reserving size (126) for bucket 14  bucket 13: 70%  Calculating Z arrays for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Entering block accumulator loop for bucket 14:  Calculating Z arrays for bucket 15  bucket 13: 80%  bucket 14: 10%  bucket 13: 90%  bucket 14: 20%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 14: 30%  Entering block accumulator loop for bucket 15:  bucket 14: 40%  bucket 15: 10%  bucket 14: 50%  bucket 15: 20%  bucket 14: 60%  bucket 15: 30%  bucket 14: 70%  bucket 15: 40%  bucket 14: 80%  bucket 15: 50%  bucket 14: 90%  bucket 15: 60%  bucket 14: 100%  bucket 15: 70%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 16  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 16:  Entering block accumulator loop for bucket 17:  bucket 16: 10%  bucket 17: 10%  bucket 16: 20%  bucket 17: 20%  bucket 16: 30%  bucket 17: 30%  bucket 16: 40%  bucket 17: 40%  bucket 16: 50%  bucket 17: 50%  bucket 16: 60%  bucket 17: 60%  bucket 16: 70%  bucket 17: 70%  bucket 16: 80%  bucket 17: 80%  bucket 16: 90%  bucket 17: 90%  bucket 16: 100%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 18:  bucket 18: 10%  Entering block accumulator loop for bucket 19:  bucket 18: 20%  bucket 19: 10%  bucket 18: 30%  bucket 19: 20%  bucket 18: 40%  bucket 19: 30%  bucket 18: 50%  bucket 19: 40%  bucket 18: 60%  bucket 19: 50%  bucket 18: 70%  bucket 19: 60%  bucket 18: 80%  bucket 19: 70%  bucket 18: 90%  bucket 19: 80%  bucket 18: 100%  bucket 19: 90%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Entering block accumulator loop for bucket 20:  Calculating Z arrays for bucket 21  bucket 20: 10%  Entering block accumulator loop for bucket 21:  bucket 20: 20%  bucket 21: 10%  bucket 20: 30%  bucket 21: 20%  bucket 20: 40%  bucket 21: 30%  bucket 20: 50%  bucket 21: 40%  bucket 20: 60%  bucket 21: 50%  bucket 21: 60%  bucket 20: 70%  bucket 21: 70%  bucket 20: 80%  bucket 21: 80%  bucket 20: 90%  bucket 21: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 20%  bucket 26: 30%  Entering block accumulator loop for bucket 27:  bucket 26: 40%  bucket 27: 10%  bucket 26: 50%  bucket 27: 20%  bucket 26: 60%  bucket 27: 30%  bucket 26: 70%  bucket 27: 40%  bucket 27: 50%  bucket 26: 80%  bucket 27: 60%  bucket 26: 90%  bucket 27: 70%  bucket 26: 100%  bucket 27: 80%  Sorting block of length 107 for bucket 26  bucket 27: 90%  (Using difference cover)  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 10%  Entering block accumulator loop for bucket 29:  bucket 28: 20%  bucket 29: 10%  bucket 28: 30%  bucket 29: 20%  bucket 28: 40%  bucket 29: 30%  bucket 28: 50%  bucket 29: 40%  bucket 28: 60%  bucket 29: 50%  bucket 28: 70%  bucket 29: 60%  bucket 28: 80%  bucket 29: 70%  bucket 28: 90%  bucket 29: 80%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  bucket 31: 80%  bucket 31: 90%  Entering block accumulator loop for bucket 32:  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 10%  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  Sorting block time: 00:00:00  (Using difference cover)Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 33: 20%  bucket 33: 30%  bucket 33: 40%  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:Getting block 35 of 60  Reserving size (126) for bucket 35  bucket 34: 10%  Calculating Z arrays for bucket 35  bucket 34: 20%  bucket 34: 30%  bucket 34: 40%  Entering block accumulator loop for bucket 35:  bucket 34: 50%  bucket 34: 60%  bucket 35: 10%  bucket 34: 70%  bucket 34: 80%  bucket 35: 20%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  Sorting block time: 00:00:00Returning block of 123 for bucket 34  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 36: 20%  bucket 36: 30%  bucket 36: 40%  bucket 36: 50%  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Entering block accumulator loop for bucket 37:  Calculating Z arrays for bucket 38  bucket 37: 10%  Entering block accumulator loop for bucket 38:  bucket 37: 20%  bucket 37: 30%  bucket 38: 10%  bucket 37: 40%  bucket 37: 50%  bucket 38: 20%  bucket 37: 60%  bucket 37: 70%  bucket 38: 30%  bucket 37: 80%  bucket 37: 90%  bucket 38: 40%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  Sorting block time: 00:00:00Returning block of 60 for bucket 37  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 39:  bucket 39: 10%  bucket 39: 20%  Entering block accumulator loop for bucket 40:  bucket 39: 30%  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%  bucket 39: 40%  bucket 40: 40%  bucket 39: 50%  bucket 40: 50%  bucket 39: 60%  bucket 40: 60%  bucket 39: 70%  bucket 40: 70%  bucket 39: 80%  bucket 40: 80%  bucket 39: 90%  bucket 40: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%  bucket 41: 40%  bucket 41: 50%  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 42:  Entering block accumulator loop for bucket 43:  bucket 42: 10%  bucket 43: 10%  bucket 42: 20%  bucket 43: 20%  bucket 42: 30%  bucket 43: 30%  bucket 42: 40%  bucket 43: 40%  bucket 42: 50%  bucket 43: 50%  bucket 43: 60%  bucket 42: 60%  bucket 43: 70%  bucket 42: 70%  bucket 43: 80%  bucket 42: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45Getting block 46 of 60  Calculating Z arrays for bucket 45  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 45:  Entering block accumulator loop for bucket 46:  bucket 45: 10%  bucket 46: 10%  bucket 45: 20%  bucket 46: 20%  bucket 45: 30%  bucket 46: 30%  bucket 45: 40%  bucket 46: 40%  bucket 45: 50%  bucket 46: 50%  bucket 45: 60%  bucket 46: 60%  bucket 45: 70%  bucket 46: 70%  bucket 45: 80%  bucket 46: 80%  bucket 45: 90%  bucket 46: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%Getting block 48 of 60  Reserving size (126) for bucket 48  bucket 47: 40%  Calculating Z arrays for bucket 48  bucket 47: 50%  bucket 47: 60%  Entering block accumulator loop for bucket 48:  bucket 47: 70%  bucket 48: 10%  bucket 47: 80%  bucket 48: 20%  bucket 47: 90%  bucket 48: 30%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52Getting block 53 of 60  Entering block accumulator loop for bucket 52:  Entering block accumulator loop for bucket 51:  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  bucket 51: 10%  bucket 52: 10%  Entering block accumulator loop for bucket 53:  bucket 52: 20%  bucket 51: 20%  bucket 53: 10%  bucket 52: 30%  bucket 51: 30%  bucket 53: 20%  bucket 52: 40%  bucket 51: 40%  bucket 53: 30%  bucket 52: 50%  bucket 53: 40%  bucket 51: 50%  bucket 52: 60%  bucket 53: 50%  bucket 51: 60%  bucket 52: 70%  bucket 53: 60%  bucket 52: 80%  bucket 51: 70%  bucket 53: 70%  bucket 52: 90%  bucket 51: 80%  bucket 53: 80%  bucket 52: 100%  bucket 51: 90%  bucket 53: 90%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 55:  bucket 55: 10%  Entering block accumulator loop for bucket 56:  bucket 55: 20%  bucket 55: 30%  bucket 56: 10%  bucket 55: 40%  bucket 56: 20%  bucket 55: 50%  bucket 56: 30%  bucket 55: 60%  bucket 55: 70%  bucket 56: 40%  bucket 55: 80%  bucket 56: 50%  bucket 55: 90%  bucket 56: 60%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 57:  Entering block accumulator loop for bucket 58:  bucket 57: 10%  bucket 58: 10%  bucket 57: 20%  bucket 58: 20%  bucket 57: 30%  bucket 58: 30%  bucket 57: 40%  bucket 58: 40%  bucket 57: 50%  bucket 58: 50%  bucket 57: 60%  bucket 58: 60%  bucket 57: 70%  bucket 58: 70%  bucket 57: 80%  bucket 58: 80%  bucket 57: 90%  bucket 58: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 59:  bucket 59: 10%  bucket 59: 20%  bucket 59: 30%  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    3 (30.00%) aligned concordantly 0 times    7 (70.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    3 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    3 pairs aligned 0 times concordantly or discordantly; of these:      6 mates make up the pairs; of these:        3 (50.00%) aligned 0 times        3 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times85.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #15)" name="14" time="33.44618082046509">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60Getting block 2 of 60  Reserving size (126) for bucket 1  Reserving size (126) for bucket 2Getting block 3 of 60  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 1Getting block 4 of 60  Entering block accumulator loop for bucket 1:  Reserving size (126) for bucket 3  Entering block accumulator loop for bucket 2:  Calculating Z arrays for bucket 3  Reserving size (126) for bucket 4  bucket 2: 10%  bucket 1: 10%  Calculating Z arrays for bucket 4Getting block 5 of 60  bucket 2: 20%  Entering block accumulator loop for bucket 3:  bucket 2: 30%Getting block 7 of 60  Reserving size (126) for bucket 5Getting block 6 of 60  Reserving size (126) for bucket 7  Reserving size (126) for bucket 6  Entering block accumulator loop for bucket 4:  bucket 1: 20%  Calculating Z arrays for bucket 7  Calculating Z arrays for bucket 6  bucket 3: 10%  bucket 1: 30%  Calculating Z arrays for bucket 5Getting block 8 of 60  Reserving size (126) for bucket 8  Entering block accumulator loop for bucket 6:  bucket 3: 20%  bucket 1: 40%  bucket 3: 30%  Calculating Z arrays for bucket 8  bucket 4: 10%  bucket 2: 40%  bucket 1: 50%  Entering block accumulator loop for bucket 5:  bucket 6: 10%  Entering block accumulator loop for bucket 8:  bucket 5: 10%  bucket 6: 20%  bucket 4: 20%  bucket 3: 40%  bucket 1: 60%  bucket 5: 20%  bucket 4: 30%  Entering block accumulator loop for bucket 7:  bucket 5: 30%  bucket 2: 50%  bucket 6: 30%  bucket 5: 40%  bucket 7: 10%  bucket 8: 10%  bucket 3: 50%  bucket 1: 70%  bucket 8: 20%  bucket 4: 40%  bucket 7: 20%  bucket 1: 80%  bucket 2: 60%  bucket 5: 50%  bucket 4: 50%  bucket 7: 30%  bucket 2: 70%  bucket 5: 60%  bucket 8: 30%  bucket 3: 60%  bucket 6: 40%  bucket 4: 60%  bucket 1: 90%  bucket 5: 70%  bucket 6: 50%  bucket 8: 40%  bucket 1: 100%  bucket 4: 70%  bucket 5: 80%  Sorting block of length 42 for bucket 1  bucket 4: 80%  bucket 3: 70%  bucket 6: 60%  (Using difference cover)  bucket 5: 90%  bucket 4: 90%  bucket 7: 40%  bucket 3: 80%  bucket 6: 70%  bucket 7: 50%  bucket 3: 90%  bucket 4: 100%  bucket 6: 80%  bucket 5: 100%  bucket 7: 60%  bucket 2: 80%  Sorting block of length 63 for bucket 5  bucket 6: 90%  bucket 7: 70%  bucket 2: 90%  (Using difference cover)  bucket 6: 100%  bucket 2: 100%  bucket 8: 50%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 7: 80%  bucket 3: 100%  Sorting block of length 84 for bucket 2  Sorting block of length 106 for bucket 3  (Using difference cover)  (Using difference cover)  Sorting block of length 90 for bucket 6  bucket 7: 90%  bucket 8: 60%  bucket 7: 100%  (Using difference cover)  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 76 for bucket 7Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 10: 40%  bucket 9: 60%  bucket 10: 50%  bucket 9: 70%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  bucket 9: 80%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 125 for bucket 9Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  Sorting block time: 00:00:00  bucket 12: 20%Returning block of 96 for bucket 11  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 14:  bucket 14: 10%  Entering block accumulator loop for bucket 15:  bucket 14: 20%  bucket 15: 10%  bucket 14: 30%  bucket 15: 20%  bucket 14: 40%  bucket 15: 30%  bucket 14: 50%  bucket 15: 40%  bucket 14: 60%  bucket 15: 50%  bucket 14: 70%  bucket 15: 60%  bucket 14: 80%  bucket 15: 70%  bucket 14: 90%  bucket 15: 80%  bucket 14: 100%  bucket 15: 90%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 16:  Entering block accumulator loop for bucket 17:  bucket 16: 10%  bucket 17: 10%  bucket 16: 20%  bucket 17: 20%  bucket 16: 30%  bucket 17: 30%  bucket 17: 40%  bucket 16: 40%  bucket 17: 50%  bucket 16: 50%  bucket 17: 60%  bucket 16: 60%  bucket 17: 70%  bucket 17: 80%  bucket 16: 70%  bucket 17: 90%  bucket 16: 80%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  Sorting block time: 00:00:00Returning block of 123 for bucket 18  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  Entering block accumulator loop for bucket 22:  bucket 21: 10%  bucket 22: 10%  bucket 21: 20%  bucket 21: 30%  bucket 22: 20%  bucket 21: 40%  bucket 22: 30%  bucket 21: 50%  bucket 21: 60%  bucket 22: 40%  bucket 21: 70%  bucket 22: 50%  bucket 21: 80%  bucket 22: 60%  bucket 21: 90%  bucket 22: 70%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  bucket 23: 10%  bucket 23: 20%  Entering block accumulator loop for bucket 24:  bucket 23: 30%  bucket 24: 10%  bucket 23: 40%  bucket 24: 20%  bucket 23: 50%  bucket 23: 60%  bucket 24: 30%  bucket 23: 70%  bucket 24: 40%  bucket 23: 80%  bucket 24: 50%  bucket 23: 90%  bucket 24: 60%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 50%  bucket 26: 60%  Entering block accumulator loop for bucket 27:  bucket 26: 70%  bucket 27: 10%  bucket 26: 80%  bucket 27: 20%  bucket 26: 90%  bucket 27: 30%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 28:  Entering block accumulator loop for bucket 29:  bucket 28: 10%  bucket 29: 10%  bucket 28: 20%  bucket 29: 20%  bucket 28: 30%  bucket 29: 30%  bucket 28: 40%  bucket 29: 40%  bucket 28: 50%  bucket 29: 50%  bucket 28: 60%  bucket 29: 60%  bucket 28: 70%  bucket 29: 70%  bucket 28: 80%  bucket 29: 80%  bucket 28: 90%  bucket 29: 90%  bucket 28: 100%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 32:  Entering block accumulator loop for bucket 31:  bucket 32: 10%  bucket 31: 10%  bucket 32: 20%  bucket 31: 20%  bucket 32: 30%  bucket 31: 30%  bucket 32: 40%  bucket 31: 40%  bucket 32: 50%  bucket 31: 50%  bucket 32: 60%  bucket 31: 60%  bucket 32: 70%  bucket 31: 70%  bucket 32: 80%  bucket 31: 80%  bucket 32: 90%  bucket 31: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  bucket 33: 20%  bucket 33: 30%  Entering block accumulator loop for bucket 34:  bucket 33: 40%  bucket 34: 10%  bucket 33: 50%  bucket 34: 20%  bucket 33: 60%  bucket 34: 30%  bucket 33: 70%  bucket 34: 40%  bucket 33: 80%  bucket 34: 50%  bucket 33: 90%  bucket 34: 60%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 36: 20%  bucket 36: 30%  bucket 36: 40%  bucket 36: 50%  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 38:  bucket 37: 10%  Entering block accumulator loop for bucket 39:  bucket 37: 20%  bucket 38: 10%  bucket 37: 30%  bucket 39: 10%  bucket 38: 20%  bucket 37: 40%  bucket 39: 20%  bucket 38: 30%Getting block 40 of 60  bucket 37: 50%  bucket 38: 40%  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  bucket 39: 30%  bucket 37: 60%  bucket 38: 50%  bucket 39: 40%  Entering block accumulator loop for bucket 40:  bucket 37: 70%  bucket 38: 60%  bucket 39: 50%  bucket 40: 10%  bucket 37: 80%  bucket 38: 70%  bucket 39: 60%  bucket 40: 20%  bucket 37: 90%  bucket 38: 80%  bucket 39: 70%  bucket 40: 30%  bucket 37: 100%  Sorting block of length 59 for bucket 37  bucket 39: 80%  (Using difference cover)  bucket 40: 40%  bucket 39: 90%  bucket 40: 50%  bucket 38: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 60%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Entering block accumulator loop for bucket 41:  Calculating Z arrays for bucket 42  bucket 41: 10%  Entering block accumulator loop for bucket 42:  bucket 41: 20%  bucket 42: 10%  bucket 41: 30%  bucket 42: 20%  bucket 41: 40%  bucket 42: 30%  bucket 41: 50%  bucket 42: 40%  bucket 41: 60%  bucket 42: 50%  bucket 41: 70%  bucket 42: 60%  bucket 41: 80%  bucket 42: 70%  bucket 41: 90%  bucket 42: 80%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%Getting block 44 of 60  Reserving size (126) for bucket 44  bucket 43: 20%  Calculating Z arrays for bucket 44  bucket 43: 30%  bucket 43: 40%  Entering block accumulator loop for bucket 44:  bucket 43: 50%  bucket 44: 10%  bucket 43: 60%  bucket 44: 20%  bucket 43: 70%  bucket 44: 30%  bucket 43: 80%  bucket 44: 40%  bucket 43: 90%  bucket 44: 50%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 45:  bucket 45: 10%  Entering block accumulator loop for bucket 46:  bucket 45: 20%  bucket 46: 10%  bucket 45: 30%  bucket 46: 20%  bucket 45: 40%  bucket 46: 30%  bucket 45: 50%  bucket 46: 40%  bucket 45: 60%  bucket 46: 50%  bucket 45: 70%  bucket 45: 80%  bucket 46: 60%  bucket 45: 90%  bucket 46: 70%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  bucket 47: 30%  bucket 47: 40%  Entering block accumulator loop for bucket 48:  bucket 47: 50%  bucket 48: 10%  bucket 47: 60%  bucket 48: 20%  bucket 47: 70%  bucket 48: 30%  bucket 48: 40%  bucket 47: 80%  bucket 48: 50%  bucket 47: 90%  bucket 48: 60%  bucket 48: 70%  bucket 47: 100%  Sorting block of length 83 for bucket 47  bucket 48: 80%  bucket 48: 90%  (Using difference cover)  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 49:  Entering block accumulator loop for bucket 50:  bucket 49: 10%  bucket 50: 10%  bucket 49: 20%  bucket 50: 20%  bucket 49: 30%  bucket 49: 40%  bucket 50: 30%  bucket 49: 50%  bucket 50: 40%  bucket 49: 60%  bucket 50: 50%  bucket 49: 70%  bucket 50: 60%  bucket 49: 80%  bucket 50: 70%  bucket 49: 90%  bucket 50: 80%  bucket 49: 100%  bucket 50: 90%  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 51: 10%Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  bucket 51: 20%  bucket 51: 30%  Entering block accumulator loop for bucket 52:  bucket 51: 40%  bucket 52: 10%  bucket 51: 50%  bucket 52: 20%  bucket 51: 60%  bucket 52: 30%  bucket 51: 70%  bucket 52: 40%  bucket 51: 80%  bucket 52: 50%  bucket 51: 90%  bucket 52: 60%  bucket 51: 100%  bucket 52: 70%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  bucket 54: 10%  bucket 54: 20%  Entering block accumulator loop for bucket 55:  bucket 54: 30%  bucket 55: 10%  bucket 54: 40%  bucket 55: 20%  bucket 54: 50%  bucket 55: 30%  bucket 54: 60%  bucket 55: 40%  bucket 54: 70%  bucket 55: 50%  bucket 54: 80%  bucket 55: 60%  bucket 54: 90%  bucket 55: 70%  bucket 54: 100%  bucket 55: 80%  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 56:  bucket 56: 10%  Entering block accumulator loop for bucket 57:  bucket 56: 20%  bucket 57: 10%  bucket 56: 30%  bucket 57: 20%  bucket 56: 40%  bucket 57: 30%  bucket 56: 50%  bucket 57: 40%  bucket 56: 60%  bucket 56: 70%  bucket 57: 50%  bucket 56: 80%  bucket 56: 90%  bucket 57: 60%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 59:  bucket 59: 10%  bucket 59: 20%  bucket 59: 30%Getting block 60 of 60  bucket 59: 40%  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  bucket 59: 50%  bucket 59: 60%  Entering block accumulator loop for bucket 60:  bucket 59: 70%  bucket 60: 10%  bucket 59: 80%  bucket 60: 20%  bucket 59: 90%  bucket 60: 30%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    3 (30.00%) aligned concordantly 0 times    7 (70.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    3 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    3 pairs aligned 0 times concordantly or discordantly; of these:      6 mates make up the pairs; of these:        3 (50.00%) aligned 0 times        3 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times85.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #16)" name="15" time="40.24839544296265">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60Getting block 2 of 60  Reserving size (126) for bucket 2  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 1Getting block 3 of 60  Reserving size (126) for bucket 3  Entering block accumulator loop for bucket 1:Getting block 4 of 60  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 2:  Reserving size (126) for bucket 4Getting block 5 of 60  Reserving size (126) for bucket 5  Entering block accumulator loop for bucket 3:  bucket 1: 10%  Calculating Z arrays for bucket 5  bucket 2: 10%  bucket 3: 10%Getting block 6 of 60  Reserving size (126) for bucket 6Getting block 7 of 60  Entering block accumulator loop for bucket 5:  bucket 2: 20%  bucket 1: 20%  bucket 3: 20%  bucket 2: 30%  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 6  bucket 1: 30%  bucket 2: 40%Getting block 8 of 60  Reserving size (126) for bucket 8  Reserving size (126) for bucket 7  Entering block accumulator loop for bucket 6:  bucket 5: 10%  Entering block accumulator loop for bucket 4:  Calculating Z arrays for bucket 7  bucket 5: 20%  bucket 1: 40%  bucket 3: 30%  bucket 5: 30%  bucket 6: 10%  bucket 1: 50%  bucket 2: 50%  Entering block accumulator loop for bucket 7:  bucket 4: 10%  bucket 2: 60%  bucket 1: 60%  bucket 4: 20%  bucket 5: 40%  Calculating Z arrays for bucket 8  bucket 1: 70%  bucket 7: 10%  bucket 3: 40%  bucket 1: 80%  bucket 7: 20%  bucket 4: 30%  bucket 5: 50%  bucket 3: 50%  bucket 7: 30%  bucket 5: 60%  bucket 6: 20%  Entering block accumulator loop for bucket 8:  bucket 3: 60%  bucket 5: 70%  bucket 6: 30%  bucket 2: 70%  bucket 3: 70%  bucket 6: 40%  bucket 5: 80%  bucket 1: 90%  bucket 3: 80%  bucket 4: 40%  bucket 6: 50%  bucket 5: 90%  bucket 7: 40%  bucket 4: 50%  bucket 2: 80%  bucket 5: 100%  bucket 1: 100%  bucket 6: 60%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 8: 10%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 4: 60%  bucket 3: 90%  bucket 8: 20%  bucket 2: 90%  bucket 4: 70%  bucket 3: 100%  bucket 6: 70%  bucket 7: 50%  Sorting block of length 106 for bucket 3  bucket 6: 80%  bucket 8: 30%  bucket 7: 60%  (Using difference cover)  bucket 6: 90%  bucket 2: 100%  bucket 8: 40%  bucket 7: 70%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 4: 80%  bucket 7: 80%  bucket 6: 100%  bucket 8: 50%  bucket 4: 90%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 7: 90%  bucket 4: 100%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 8: 60%  bucket 7: 100%  Sorting block of length 75 for bucket 7  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  (Using difference cover)  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 85 for bucket 2Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  Entering block accumulator loop for bucket 10:Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  bucket 9: 10%  bucket 10: 10%  bucket 9: 20%  bucket 9: 30%  Entering block accumulator loop for bucket 11:  bucket 9: 40%  bucket 10: 20%  bucket 11: 10%  bucket 9: 50%  bucket 10: 30%  bucket 11: 20%  bucket 9: 60%  bucket 10: 40%  bucket 11: 30%  bucket 10: 50%  bucket 9: 70%  bucket 11: 40%  bucket 9: 80%  bucket 10: 60%  bucket 11: 50%  bucket 9: 90%  bucket 10: 70%  bucket 11: 60%  bucket 9: 100%  bucket 10: 80%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 11: 70%  bucket 10: 90%  bucket 11: 80%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12Getting block 13 of 60  Entering block accumulator loop for bucket 12:  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  bucket 12: 10%  Entering block accumulator loop for bucket 13:  bucket 12: 20%  bucket 13: 10%  bucket 12: 30%  bucket 13: 20%  bucket 12: 40%  bucket 13: 30%  bucket 12: 50%  bucket 13: 40%  bucket 12: 60%  bucket 13: 50%  bucket 12: 70%  bucket 13: 60%  bucket 12: 80%  bucket 13: 70%  bucket 12: 90%  bucket 13: 80%  bucket 12: 100%  Sorting block of length 82 for bucket 12  bucket 13: 90%  (Using difference cover)  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  Entering block accumulator loop for bucket 15:  bucket 14: 70%  bucket 15: 10%  bucket 14: 80%  bucket 15: 20%  bucket 14: 90%  bucket 15: 30%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 16:  Entering block accumulator loop for bucket 17:  bucket 16: 10%  bucket 17: 10%  bucket 16: 20%  bucket 17: 20%  bucket 16: 30%  bucket 16: 40%  bucket 17: 30%  bucket 16: 50%  bucket 17: 40%  bucket 17: 50%  bucket 16: 60%  bucket 17: 60%  bucket 17: 70%  bucket 16: 70%  bucket 17: 80%  bucket 16: 80%  bucket 17: 90%  bucket 16: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  bucket 18: 20%  Entering block accumulator loop for bucket 19:  bucket 18: 30%  bucket 19: 10%  bucket 18: 40%  bucket 19: 20%  bucket 18: 50%  bucket 19: 30%  bucket 18: 60%  bucket 19: 40%  bucket 18: 70%  bucket 19: 50%  bucket 18: 80%  bucket 19: 60%  bucket 18: 90%  bucket 19: 70%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 20:  bucket 20: 10%  Entering block accumulator loop for bucket 21:  bucket 20: 20%  bucket 21: 10%  bucket 20: 30%  bucket 21: 20%  bucket 20: 40%  bucket 21: 30%  bucket 20: 50%  bucket 21: 40%  bucket 20: 60%  bucket 21: 50%  bucket 20: 70%  bucket 21: 60%  bucket 20: 80%  bucket 21: 70%  bucket 20: 90%  bucket 21: 80%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 22:  bucket 22: 10%  Entering block accumulator loop for bucket 23:  bucket 22: 20%  bucket 23: 10%  bucket 22: 30%  bucket 23: 20%  bucket 22: 40%  bucket 23: 30%  bucket 22: 50%  bucket 23: 40%  bucket 22: 60%  bucket 23: 50%  bucket 22: 70%  bucket 23: 60%  bucket 22: 80%  bucket 23: 70%  bucket 22: 90%  bucket 23: 80%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 24:  bucket 24: 10%  Entering block accumulator loop for bucket 25:  bucket 24: 20%  bucket 24: 30%  bucket 25: 10%  bucket 24: 40%  bucket 25: 20%  bucket 24: 50%  bucket 25: 30%  bucket 24: 60%  bucket 25: 40%  bucket 24: 70%  bucket 24: 80%  bucket 25: 50%  bucket 24: 90%  bucket 25: 60%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26Getting block 27 of 60  Entering block accumulator loop for bucket 26:  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 10%  bucket 26: 20%  Entering block accumulator loop for bucket 27:  bucket 26: 30%  bucket 27: 10%  bucket 26: 40%  bucket 27: 20%  bucket 26: 50%  bucket 27: 30%  bucket 26: 60%  bucket 27: 40%  bucket 26: 70%  bucket 27: 50%  bucket 26: 80%  bucket 27: 60%  bucket 27: 70%  bucket 26: 90%  bucket 27: 80%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 28:  Entering block accumulator loop for bucket 29:  bucket 28: 10%  bucket 29: 10%  bucket 28: 20%  bucket 29: 20%  bucket 28: 30%  bucket 29: 30%  bucket 29: 40%  bucket 28: 40%  bucket 29: 50%  bucket 28: 50%  bucket 29: 60%  bucket 28: 60%  bucket 29: 70%  bucket 28: 70%  bucket 29: 80%  bucket 28: 80%  bucket 29: 90%  bucket 28: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 30:  Entering block accumulator loop for bucket 31:  bucket 30: 10%  bucket 31: 10%  bucket 30: 20%  bucket 31: 20%  bucket 30: 30%  bucket 31: 30%  bucket 30: 40%  bucket 31: 40%  bucket 30: 50%  bucket 31: 50%  bucket 30: 60%  bucket 31: 60%  bucket 30: 70%  bucket 31: 70%  bucket 30: 80%  bucket 31: 80%  bucket 30: 90%  bucket 31: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  bucket 33: 10%  bucket 33: 20%  Entering block accumulator loop for bucket 34:  bucket 33: 30%  bucket 34: 10%  bucket 33: 40%  bucket 34: 20%  bucket 33: 50%  bucket 34: 30%  bucket 34: 40%  bucket 33: 60%  bucket 34: 50%  bucket 33: 70%  bucket 34: 60%  bucket 34: 70%  bucket 33: 80%  bucket 34: 80%  bucket 33: 90%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35Getting block 36 of 60  Entering block accumulator loop for bucket 35:  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  bucket 35: 10%  bucket 35: 20%  Entering block accumulator loop for bucket 36:  bucket 35: 30%  bucket 36: 10%  bucket 35: 40%  bucket 36: 20%  bucket 35: 50%  bucket 36: 30%  bucket 35: 60%  bucket 36: 40%  bucket 35: 70%  bucket 36: 50%  bucket 35: 80%  bucket 36: 60%  bucket 35: 90%  bucket 36: 70%  bucket 35: 100%  bucket 36: 80%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%  bucket 37: 20%  bucket 37: 30%  bucket 37: 40%  bucket 37: 50%  bucket 37: 60%  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:  bucket 38: 20%  bucket 39: 10%  bucket 38: 30%  bucket 39: 20%  bucket 38: 40%  bucket 39: 30%  bucket 38: 50%  bucket 39: 40%  bucket 38: 60%  bucket 39: 50%  bucket 38: 70%  bucket 39: 60%  bucket 38: 80%  bucket 39: 70%  bucket 38: 90%  bucket 39: 80%  bucket 38: 100%  bucket 39: 90%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 40:  bucket 40: 10%  Entering block accumulator loop for bucket 41:  bucket 40: 20%  bucket 40: 30%  bucket 41: 10%  bucket 40: 40%  bucket 41: 20%  bucket 40: 50%  bucket 40: 60%  bucket 41: 30%  bucket 40: 70%  bucket 41: 40%  bucket 40: 80%  bucket 41: 50%  bucket 40: 90%  bucket 41: 60%  bucket 40: 100%  bucket 41: 70%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:Getting block 43 of 60  Reserving size (126) for bucket 43  bucket 42: 10%  Calculating Z arrays for bucket 43  bucket 42: 20%  bucket 42: 30%  Entering block accumulator loop for bucket 43:  bucket 42: 40%  bucket 43: 10%  bucket 42: 50%  bucket 43: 20%  bucket 42: 60%  bucket 43: 30%  bucket 42: 70%  bucket 43: 40%  bucket 42: 80%  bucket 43: 50%  bucket 42: 90%  bucket 43: 60%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 44:  bucket 44: 10%  Entering block accumulator loop for bucket 45:  bucket 44: 20%  bucket 45: 10%  bucket 44: 30%  bucket 44: 40%  bucket 45: 20%  bucket 44: 50%  bucket 44: 60%  bucket 45: 30%  bucket 44: 70%  bucket 44: 80%  bucket 45: 40%  bucket 44: 90%  bucket 44: 100%  bucket 45: 50%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  bucket 46: 20%  bucket 46: 30%  Entering block accumulator loop for bucket 47:  bucket 46: 40%  bucket 47: 10%  bucket 46: 50%  bucket 47: 20%  bucket 46: 60%  bucket 47: 30%  bucket 46: 70%  bucket 47: 40%  bucket 46: 80%  bucket 47: 50%  bucket 46: 90%  bucket 47: 60%  bucket 46: 100%  bucket 47: 70%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%Getting block 49 of 60  Reserving size (126) for bucket 49  bucket 48: 90%  Calculating Z arrays for bucket 49  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  Sorting block time: 00:00:00Returning block of 114 for bucket 48  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  bucket 50: 20%  bucket 50: 30%  Entering block accumulator loop for bucket 51:  bucket 50: 40%  bucket 50: 50%  bucket 51: 10%  bucket 50: 60%  bucket 51: 20%  bucket 50: 70%  bucket 51: 30%  bucket 50: 80%  bucket 50: 90%  bucket 51: 40%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 50%  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 52:  Entering block accumulator loop for bucket 53:  bucket 52: 10%  bucket 53: 10%  bucket 52: 20%  bucket 53: 20%  bucket 52: 30%  bucket 53: 30%  bucket 52: 40%  bucket 52: 50%  bucket 53: 40%  bucket 52: 60%  bucket 53: 50%  bucket 52: 70%  bucket 53: 60%  bucket 52: 80%  bucket 53: 70%  bucket 52: 90%  bucket 53: 80%  bucket 52: 100%  bucket 53: 90%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%Getting block 57 of 60  Reserving size (126) for bucket 57  bucket 56: 20%  Calculating Z arrays for bucket 57  bucket 56: 30%  Entering block accumulator loop for bucket 57:  bucket 56: 40%  bucket 57: 10%  bucket 56: 50%  bucket 57: 20%  bucket 56: 60%  bucket 57: 30%  bucket 56: 70%  bucket 57: 40%  bucket 56: 80%  bucket 57: 50%  bucket 56: 90%  bucket 56: 100%  bucket 57: 60%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%Getting block 59 of 60  Reserving size (126) for bucket 59  bucket 58: 30%  Calculating Z arrays for bucket 59  bucket 58: 40%  Entering block accumulator loop for bucket 59:  bucket 58: 50%  bucket 58: 60%  bucket 59: 10%  bucket 58: 70%  bucket 59: 20%  bucket 58: 80%  bucket 59: 30%  bucket 58: 90%  bucket 59: 40%  bucket 58: 100%  bucket 59: 50%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were unpaired; of these:    0 (0.00%) aligned 0 times    10 (100.00%) aligned exactly 1 time    0 (0.00%) aligned >1 times100.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #16)" name="15" time="34.66562271118164">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Entering block accumulator loop for bucket 1:  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 2  bucket 1: 10%  bucket 1: 20%  Entering block accumulator loop for bucket 2:  bucket 1: 30%  bucket 1: 40%  bucket 2: 10%Getting block 3 of 60  bucket 2: 20%  bucket 1: 50%  Reserving size (126) for bucket 3Getting block 4 of 60  Reserving size (126) for bucket 4  bucket 2: 30%Getting block 5 of 60  Calculating Z arrays for bucket 3  Calculating Z arrays for bucket 4Getting block 6 of 60  Reserving size (126) for bucket 5  bucket 1: 60%  Entering block accumulator loop for bucket 3:  Calculating Z arrays for bucket 5  bucket 2: 40%  bucket 3: 10%  bucket 1: 70%  bucket 2: 50%  bucket 3: 20%  Reserving size (126) for bucket 6  Entering block accumulator loop for bucket 4:  bucket 3: 30%Getting block 8 of 60  Reserving size (126) for bucket 8  Entering block accumulator loop for bucket 5:  bucket 4: 10%Getting block 7 of 60  Reserving size (126) for bucket 7  bucket 2: 60%  bucket 4: 20%  Calculating Z arrays for bucket 6  bucket 2: 70%  bucket 3: 40%  bucket 1: 80%  bucket 2: 80%  bucket 4: 30%  bucket 1: 90%  bucket 5: 10%  bucket 3: 50%  bucket 1: 100%  bucket 2: 90%  bucket 4: 40%  bucket 5: 20%  Calculating Z arrays for bucket 8  bucket 3: 60%  bucket 2: 100%  bucket 4: 50%  Sorting block of length 84 for bucket 2  (Using difference cover)  Entering block accumulator loop for bucket 6:  bucket 3: 70%  bucket 4: 60%  Sorting block of length 42 for bucket 1  bucket 5: 30%  (Using difference cover)  Entering block accumulator loop for bucket 8:  bucket 4: 70%  Calculating Z arrays for bucket 7  bucket 8: 10%  bucket 4: 80%  bucket 6: 10%  bucket 3: 80%  bucket 4: 90%  bucket 5: 40%  bucket 8: 20%  bucket 3: 90%  bucket 5: 50%  bucket 4: 100%  bucket 6: 20%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 3: 100%  Entering block accumulator loop for bucket 7:  bucket 8: 30%  bucket 5: 60%  bucket 6: 30%  Sorting block of length 106 for bucket 3  bucket 8: 40%  bucket 7: 10%  (Using difference cover)  bucket 5: 70%  bucket 8: 50%  bucket 6: 40%  bucket 8: 60%  bucket 7: 20%  bucket 8: 70%  bucket 6: 50%  bucket 5: 80%  bucket 8: 80%  bucket 7: 30%  bucket 6: 60%  bucket 5: 90%  bucket 8: 90%  bucket 7: 40%  bucket 6: 70%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 7: 50%  bucket 6: 80%  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 7: 60%  bucket 6: 90%  bucket 7: 70%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 91 for bucket 6Getting block 9 of 60Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 10:  Entering block accumulator loop for bucket 11:  bucket 10: 10%  Entering block accumulator loop for bucket 9:  bucket 10: 20%  bucket 9: 10%  bucket 11: 10%  bucket 9: 20%  bucket 11: 20%  bucket 10: 30%  bucket 9: 30%  bucket 11: 30%  bucket 10: 40%  bucket 11: 40%  bucket 9: 40%  bucket 10: 50%  bucket 11: 50%  bucket 9: 50%  bucket 10: 60%  bucket 11: 60%  bucket 9: 60%  bucket 10: 70%  bucket 11: 70%  bucket 9: 70%  bucket 10: 80%  bucket 11: 80%  bucket 9: 80%  bucket 10: 90%  bucket 11: 90%  bucket 9: 90%  bucket 10: 100%  bucket 11: 100%  Sorting block of length 89 for bucket 10  Sorting block of length 95 for bucket 11  (Using difference cover)  (Using difference cover)  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 125 for bucket 9Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%Getting block 13 of 60  bucket 12: 50%  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  bucket 12: 60%  bucket 12: 70%  Entering block accumulator loop for bucket 13:  bucket 12: 80%  bucket 13: 10%  bucket 12: 90%  bucket 13: 20%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 15:  Entering block accumulator loop for bucket 14:  bucket 15: 10%  bucket 14: 10%  bucket 15: 20%  bucket 14: 20%  bucket 15: 30%  bucket 14: 30%  bucket 15: 40%  bucket 14: 40%  bucket 15: 50%  bucket 14: 50%  bucket 15: 60%  bucket 14: 60%  bucket 15: 70%  bucket 14: 70%  bucket 15: 80%  bucket 14: 80%  bucket 15: 90%  bucket 14: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  bucket 16: 30%  bucket 16: 40%  Entering block accumulator loop for bucket 17:  bucket 16: 50%  bucket 17: 10%  bucket 16: 60%  bucket 17: 20%  bucket 16: 70%  bucket 17: 30%  bucket 16: 80%  bucket 17: 40%  bucket 16: 90%  bucket 17: 50%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 18:  bucket 18: 10%  Entering block accumulator loop for bucket 19:  bucket 18: 20%  bucket 19: 10%  bucket 18: 30%  bucket 19: 20%  bucket 18: 40%  bucket 18: 50%  bucket 19: 30%  bucket 18: 60%  bucket 19: 40%  bucket 18: 70%  bucket 19: 50%  bucket 18: 80%  bucket 19: 60%  bucket 18: 90%  bucket 19: 70%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 20:  Entering block accumulator loop for bucket 21:  bucket 20: 10%  bucket 21: 10%  bucket 20: 20%  bucket 21: 20%  bucket 20: 30%  bucket 21: 30%  bucket 20: 40%  bucket 21: 40%  bucket 20: 50%  bucket 21: 50%  bucket 20: 60%  bucket 21: 60%  bucket 20: 70%  bucket 21: 70%  bucket 20: 80%  bucket 21: 80%  bucket 20: 90%  bucket 21: 90%  bucket 20: 100%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:Getting block 24 of 60  bucket 23: 10%  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  bucket 23: 20%  bucket 23: 30%  Entering block accumulator loop for bucket 24:  bucket 23: 40%  bucket 23: 50%  bucket 24: 10%  bucket 23: 60%  bucket 23: 70%  bucket 24: 20%  bucket 23: 80%  bucket 24: 30%  bucket 23: 90%  bucket 24: 40%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  bucket 25: 20%  bucket 25: 30%  Entering block accumulator loop for bucket 26:  bucket 25: 40%  bucket 25: 50%  bucket 26: 10%  bucket 25: 60%  bucket 26: 20%  bucket 25: 70%  bucket 26: 30%  bucket 25: 80%  bucket 26: 40%  bucket 26: 50%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 28:  bucket 28: 10%  Entering block accumulator loop for bucket 29:  bucket 28: 20%  bucket 29: 10%  bucket 28: 30%  bucket 28: 40%  bucket 29: 20%  bucket 28: 50%  bucket 28: 60%  bucket 29: 30%  bucket 28: 70%  bucket 29: 40%  bucket 28: 80%  bucket 29: 50%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 31:  Entering block accumulator loop for bucket 30:  bucket 31: 10%  bucket 30: 10%  bucket 31: 20%  bucket 30: 20%  bucket 31: 30%  bucket 30: 30%  bucket 31: 40%  bucket 30: 40%  bucket 31: 50%  bucket 30: 50%  bucket 31: 60%  bucket 30: 60%  bucket 31: 70%  bucket 30: 70%  bucket 31: 80%  bucket 30: 80%  bucket 31: 90%  bucket 30: 90%  bucket 31: 100%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Entering block accumulator loop for bucket 33:  Calculating Z arrays for bucket 34  bucket 33: 10%  Entering block accumulator loop for bucket 34:  bucket 33: 20%  bucket 33: 30%  bucket 34: 10%  bucket 33: 40%  bucket 34: 20%  bucket 33: 50%  bucket 34: 30%  bucket 33: 60%  bucket 34: 40%  bucket 33: 70%  bucket 34: 50%  bucket 33: 80%  bucket 34: 60%  bucket 33: 90%  bucket 34: 70%  bucket 33: 100%  Sorting block of length 44 for bucket 33  bucket 34: 80%  (Using difference cover)  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  bucket 35: 40%  bucket 35: 50%  Entering block accumulator loop for bucket 36:  bucket 35: 60%  bucket 35: 70%  bucket 36: 10%  bucket 35: 80%  bucket 36: 20%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 36: 30%  bucket 36: 40%  bucket 36: 50%  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  Sorting block time: 00:00:00Returning block of 113 for bucket 35  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%  bucket 37: 20%  bucket 37: 30%  bucket 37: 40%  bucket 37: 50%  bucket 37: 60%  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  bucket 38: 20%  bucket 38: 30%  Entering block accumulator loop for bucket 39:  bucket 38: 40%  bucket 39: 10%  bucket 38: 50%  bucket 39: 20%  bucket 38: 60%  bucket 39: 30%  bucket 38: 70%  bucket 39: 40%  bucket 38: 80%  bucket 39: 50%  bucket 38: 90%  bucket 39: 60%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  bucket 40: 10%  Entering block accumulator loop for bucket 41:  bucket 40: 20%  bucket 41: 10%  bucket 41: 20%  bucket 40: 30%  bucket 41: 30%  bucket 40: 40%  bucket 41: 40%  bucket 41: 50%  bucket 40: 50%  bucket 41: 60%  bucket 40: 60%  bucket 41: 70%  bucket 41: 80%  bucket 40: 70%  bucket 41: 90%  bucket 40: 80%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  bucket 42: 10%  bucket 42: 20%  bucket 42: 30%  bucket 42: 40%  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 43:  Entering block accumulator loop for bucket 44:  bucket 43: 10%  bucket 44: 10%  bucket 43: 20%  bucket 44: 20%  bucket 43: 30%  bucket 44: 30%  bucket 43: 40%  bucket 44: 40%  bucket 43: 50%  bucket 44: 50%  bucket 43: 60%  bucket 44: 60%  bucket 43: 70%  bucket 44: 70%  bucket 44: 80%  bucket 43: 80%  bucket 44: 90%Getting block 45 of 60  bucket 44: 100%  bucket 43: 90%  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 43: 100%Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Sorting block of length 121 for bucket 43  (Using difference cover)  Entering block accumulator loop for bucket 45:  Entering block accumulator loop for bucket 46:  bucket 45: 10%  bucket 46: 10%  bucket 45: 20%  bucket 46: 20%  bucket 45: 30%  bucket 46: 30%  bucket 45: 40%  bucket 46: 40%  bucket 45: 50%  bucket 46: 50%  bucket 45: 60%  bucket 45: 70%  bucket 46: 60%  bucket 45: 80%  bucket 46: 70%  bucket 45: 90%  Sorting block time: 00:00:00Returning block of 67 for bucket 44  bucket 46: 80%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 48:  bucket 48: 10%  Entering block accumulator loop for bucket 49:  bucket 48: 20%  bucket 49: 10%  bucket 48: 30%  bucket 49: 20%  bucket 48: 40%  bucket 49: 30%  bucket 48: 50%  bucket 49: 40%  bucket 48: 60%  bucket 49: 50%  bucket 48: 70%  bucket 49: 60%  bucket 49: 70%  bucket 48: 80%  bucket 49: 80%  bucket 49: 90%  bucket 48: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 51:  bucket 51: 10%  Entering block accumulator loop for bucket 52:  bucket 51: 20%  bucket 52: 10%  bucket 51: 30%  bucket 52: 20%  bucket 51: 40%  bucket 51: 50%  bucket 52: 30%  bucket 51: 60%  bucket 52: 40%  bucket 51: 70%  bucket 51: 80%  bucket 52: 50%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 60%  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  bucket 53: 20%  bucket 53: 30%  Entering block accumulator loop for bucket 54:  bucket 53: 40%  bucket 53: 50%  bucket 54: 10%  bucket 53: 60%  bucket 54: 20%  bucket 53: 70%  bucket 54: 30%  bucket 53: 80%  bucket 54: 40%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%Getting block 57 of 60  bucket 56: 30%  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  bucket 56: 40%  Entering block accumulator loop for bucket 57:  bucket 56: 50%  bucket 57: 10%  bucket 56: 60%  bucket 57: 20%  bucket 57: 30%  bucket 56: 70%  bucket 57: 40%  bucket 56: 80%  bucket 57: 50%  bucket 56: 90%  bucket 57: 60%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%Getting block 59 of 60  bucket 58: 30%  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%  Entering block accumulator loop for bucket 59:  bucket 58: 70%  bucket 58: 80%  bucket 59: 10%  bucket 58: 90%  bucket 59: 20%  bucket 58: 100%  bucket 59: 30%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were unpaired; of these:    0 (0.00%) aligned 0 times    10 (100.00%) aligned exactly 1 time    0 (0.00%) aligned >1 times100.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #17)" name="16" time="32.90390372276306">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60  Calculating Z arrays for bucket 1Getting block 3 of 60  Reserving size (126) for bucket 3Getting block 4 of 60  Reserving size (126) for bucket 4  Reserving size (126) for bucket 2Getting block 5 of 60  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 3Getting block 7 of 60  Reserving size (126) for bucket 7  Entering block accumulator loop for bucket 3:  Reserving size (126) for bucket 5  Entering block accumulator loop for bucket 2:  bucket 3: 10%Getting block 8 of 60  Reserving size (126) for bucket 8  bucket 3: 20%Getting block 6 of 60  bucket 2: 10%  bucket 1: 10%  bucket 3: 30%  Calculating Z arrays for bucket 8  Calculating Z arrays for bucket 7  bucket 2: 20%  Reserving size (126) for bucket 6  bucket 1: 20%  Entering block accumulator loop for bucket 4:  Entering block accumulator loop for bucket 8:  bucket 1: 30%  Calculating Z arrays for bucket 5  bucket 3: 40%  bucket 8: 10%  bucket 4: 10%  bucket 2: 30%  bucket 3: 50%  bucket 8: 20%  bucket 1: 40%  Calculating Z arrays for bucket 6  bucket 8: 30%  bucket 2: 40%  bucket 1: 50%  bucket 4: 20%  Entering block accumulator loop for bucket 7:  bucket 3: 60%  bucket 2: 50%  bucket 8: 40%  Entering block accumulator loop for bucket 5:  bucket 3: 70%  bucket 4: 30%  Entering block accumulator loop for bucket 6:  bucket 3: 80%  bucket 4: 40%  bucket 8: 50%  bucket 3: 90%  bucket 7: 10%  bucket 4: 50%  bucket 1: 60%  bucket 5: 10%  bucket 2: 60%  bucket 8: 60%  bucket 1: 70%  bucket 3: 100%  bucket 8: 70%  bucket 1: 80%  bucket 4: 60%  bucket 6: 10%  bucket 2: 70%  bucket 5: 20%  bucket 4: 70%  Sorting block of length 106 for bucket 3  bucket 5: 30%  bucket 1: 90%  bucket 4: 80%  bucket 8: 80%  (Using difference cover)  bucket 1: 100%  bucket 8: 90%  bucket 4: 90%  bucket 2: 80%  Sorting block of length 42 for bucket 1  bucket 8: 100%  bucket 5: 40%  Sorting block of length 94 for bucket 8  (Using difference cover)  (Using difference cover)  bucket 7: 20%  bucket 4: 100%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 7: 30%  bucket 5: 50%  bucket 6: 20%  bucket 2: 90%  bucket 7: 40%  bucket 5: 60%  bucket 6: 30%  bucket 7: 50%  bucket 2: 100%  bucket 5: 70%  bucket 7: 60%  Sorting block of length 84 for bucket 2  bucket 6: 40%  bucket 7: 70%  bucket 6: 50%  bucket 5: 80%  (Using difference cover)  bucket 7: 80%  bucket 6: 60%  bucket 5: 90%  bucket 7: 90%  bucket 6: 70%  bucket 5: 100%  Sorting block of length 63 for bucket 5  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  (Using difference cover)  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 43 for bucket 1Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  Sorting block time: 00:00:00Returning block of 125 for bucket 9  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  Entering block accumulator loop for bucket 12:  bucket 11: 10%  bucket 12: 10%  bucket 11: 20%  bucket 12: 20%  bucket 11: 30%  bucket 12: 30%  bucket 11: 40%  bucket 12: 40%  bucket 11: 50%  bucket 12: 50%  bucket 11: 60%  bucket 12: 60%  bucket 11: 70%  bucket 12: 70%  bucket 11: 80%  bucket 12: 80%  bucket 11: 90%  bucket 12: 90%  bucket 11: 100%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%Getting block 14 of 60  bucket 13: 50%  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 60%  bucket 13: 70%  Entering block accumulator loop for bucket 14:  bucket 13: 80%  bucket 13: 90%  bucket 14: 10%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Entering block accumulator loop for bucket 15:  bucket 15: 10%  Calculating Z arrays for bucket 16  bucket 15: 20%  bucket 15: 30%  Entering block accumulator loop for bucket 16:  bucket 15: 40%  bucket 16: 10%  bucket 15: 50%  bucket 16: 20%  bucket 15: 60%  bucket 16: 30%  bucket 16: 40%  bucket 15: 70%  bucket 16: 50%  bucket 15: 80%  bucket 16: 60%  bucket 15: 90%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  bucket 16: 100%  (Using difference cover)  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 20%  Entering block accumulator loop for bucket 18:  bucket 17: 30%  bucket 18: 10%  bucket 17: 40%  bucket 18: 20%  bucket 17: 50%  bucket 18: 30%  bucket 17: 60%  bucket 18: 40%  bucket 18: 50%  bucket 17: 70%  bucket 18: 60%  bucket 17: 80%  bucket 18: 70%  bucket 18: 80%  bucket 17: 90%  bucket 18: 90%  bucket 17: 100%  bucket 18: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 19 of 60  Reserving size (126) for bucket 19Getting block 20 of 60  Calculating Z arrays for bucket 19  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 19:  Entering block accumulator loop for bucket 20:  bucket 19: 10%  bucket 19: 20%  bucket 20: 10%  bucket 19: 30%  bucket 20: 20%  bucket 19: 40%  bucket 19: 50%  bucket 20: 30%  bucket 19: 60%  bucket 20: 40%  bucket 19: 70%  bucket 19: 80%  bucket 20: 50%  bucket 19: 90%  bucket 20: 60%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  Entering block accumulator loop for bucket 22:  bucket 21: 10%  bucket 21: 20%  bucket 22: 10%  bucket 21: 30%  bucket 22: 20%  bucket 21: 40%  bucket 22: 30%  bucket 21: 50%  bucket 22: 40%  bucket 21: 60%  bucket 22: 50%  bucket 21: 70%  bucket 22: 60%  bucket 21: 80%  bucket 22: 70%  bucket 21: 90%  bucket 22: 80%  bucket 21: 100%  bucket 22: 90%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Entering block accumulator loop for bucket 23:  Calculating Z arrays for bucket 24  bucket 23: 10%  Entering block accumulator loop for bucket 24:  bucket 23: 20%  bucket 24: 10%  bucket 23: 30%  bucket 24: 20%  bucket 23: 40%  bucket 24: 30%  bucket 23: 50%  bucket 24: 40%  bucket 23: 60%  bucket 24: 50%  bucket 23: 70%  bucket 24: 60%  bucket 23: 80%  bucket 24: 70%  bucket 23: 90%  bucket 24: 80%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 25 of 60  Reserving size (126) for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 26:  Entering block accumulator loop for bucket 25:  bucket 26: 10%  bucket 25: 10%  bucket 26: 20%  bucket 25: 20%  bucket 26: 30%  bucket 25: 30%  bucket 26: 40%  bucket 25: 40%  bucket 26: 50%  bucket 25: 50%  bucket 26: 60%  bucket 25: 60%  bucket 26: 70%  bucket 25: 70%  bucket 26: 80%  bucket 25: 80%  bucket 26: 90%  bucket 26: 100%  bucket 25: 90%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%Getting block 28 of 60  Reserving size (126) for bucket 28  bucket 27: 50%  Calculating Z arrays for bucket 28  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  Entering block accumulator loop for bucket 28:  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  Sorting block time: 00:00:00Returning block of 120 for bucket 27  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 30:  Entering block accumulator loop for bucket 29:  bucket 30: 10%  bucket 29: 10%  bucket 29: 20%  bucket 30: 20%  bucket 29: 30%  bucket 30: 30%  bucket 29: 40%  bucket 30: 40%  bucket 29: 50%  bucket 29: 60%  bucket 30: 50%  bucket 29: 70%  bucket 30: 60%  bucket 29: 80%  bucket 30: 70%  bucket 29: 90%  bucket 29: 100%  bucket 30: 80%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 30: 90%  Sorting block time: 00:00:00Returning block of 52 for bucket 29  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%  bucket 32: 20%  bucket 32: 30%  Sorting block time: 00:00:00Returning block of 111 for bucket 31  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 33:  bucket 33: 10%  Entering block accumulator loop for bucket 34:  bucket 33: 20%  bucket 34: 10%  bucket 33: 30%  bucket 34: 20%  bucket 33: 40%  bucket 34: 30%  bucket 33: 50%  bucket 34: 40%  bucket 33: 60%  bucket 34: 50%  bucket 33: 70%  bucket 34: 60%  bucket 33: 80%  bucket 34: 70%  bucket 33: 90%  bucket 34: 80%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%Getting block 36 of 60  bucket 35: 20%  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  bucket 35: 30%  Entering block accumulator loop for bucket 36:  bucket 35: 40%  bucket 36: 10%  bucket 35: 50%  bucket 36: 20%  bucket 35: 60%  bucket 36: 30%  bucket 35: 70%  bucket 36: 40%  bucket 35: 80%  bucket 36: 50%  bucket 35: 90%  bucket 36: 60%  bucket 35: 100%  bucket 36: 70%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 37:  Entering block accumulator loop for bucket 38:  bucket 37: 10%  bucket 38: 10%  bucket 37: 20%  bucket 38: 20%  bucket 37: 30%  bucket 38: 30%  bucket 37: 40%  bucket 38: 40%  bucket 37: 50%  bucket 38: 50%  bucket 37: 60%  bucket 38: 60%  bucket 37: 70%  bucket 38: 70%  bucket 37: 80%  bucket 38: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:  bucket 39: 10%  bucket 39: 20%  bucket 39: 30%  bucket 39: 40%  bucket 39: 50%  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 40:  Entering block accumulator loop for bucket 41:  bucket 40: 10%  bucket 41: 10%  bucket 41: 20%  bucket 40: 20%  bucket 41: 30%  bucket 40: 30%  bucket 41: 40%  bucket 41: 50%  bucket 40: 40%  bucket 41: 60%  bucket 40: 50%  bucket 41: 70%  bucket 41: 80%  bucket 40: 60%  bucket 41: 90%  bucket 40: 70%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 42:  bucket 42: 10%  Entering block accumulator loop for bucket 43:  bucket 42: 20%  bucket 43: 10%  bucket 42: 30%  bucket 42: 40%  bucket 42: 50%  bucket 43: 20%  bucket 42: 60%  bucket 43: 30%  bucket 42: 70%  bucket 43: 40%  bucket 42: 80%  bucket 43: 50%  bucket 42: 90%  bucket 43: 60%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45Getting block 46 of 60  Entering block accumulator loop for bucket 45:  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  bucket 45: 10%  Entering block accumulator loop for bucket 46:  bucket 45: 20%  bucket 46: 10%  bucket 45: 30%  bucket 46: 20%  bucket 46: 30%  bucket 45: 40%  bucket 46: 40%  bucket 46: 50%  bucket 45: 50%  bucket 46: 60%  bucket 45: 60%  bucket 46: 70%  bucket 45: 70%  bucket 46: 80%  bucket 45: 80%  bucket 46: 90%  bucket 46: 100%  bucket 45: 90%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 48:  Entering block accumulator loop for bucket 47:  bucket 48: 10%  bucket 48: 20%  bucket 47: 10%  bucket 48: 30%  bucket 47: 20%  bucket 48: 40%  bucket 47: 30%  bucket 48: 50%  bucket 47: 40%  bucket 48: 60%  bucket 47: 50%  bucket 48: 70%  bucket 47: 60%  bucket 48: 80%  bucket 48: 90%  bucket 47: 70%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%Getting block 51 of 60  bucket 50: 70%  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Entering block accumulator loop for bucket 51:  bucket 51: 10%  bucket 51: 20%  bucket 51: 30%  bucket 51: 40%  bucket 51: 50%  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  Sorting block time: 00:00:00Returning block of 109 for bucket 50  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 53:  Entering block accumulator loop for bucket 52:  bucket 53: 10%  bucket 52: 10%  bucket 53: 20%  bucket 52: 20%  bucket 52: 30%  bucket 53: 30%  bucket 52: 40%  bucket 53: 40%  bucket 52: 50%  bucket 53: 50%  bucket 52: 60%  bucket 52: 70%  bucket 53: 60%  bucket 52: 80%  bucket 53: 70%  bucket 52: 90%  bucket 53: 80%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 55:  bucket 55: 10%  Entering block accumulator loop for bucket 56:  bucket 55: 20%  bucket 56: 10%  bucket 55: 30%  bucket 56: 20%  bucket 55: 40%  bucket 56: 30%  bucket 55: 50%  bucket 56: 40%  bucket 55: 60%  bucket 56: 50%  bucket 55: 70%  bucket 56: 60%  bucket 55: 80%  bucket 56: 70%  bucket 55: 90%  bucket 56: 80%  bucket 55: 100%  bucket 56: 90%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 57:  bucket 57: 10%  Entering block accumulator loop for bucket 58:  bucket 57: 20%  bucket 58: 10%  bucket 57: 30%  bucket 58: 20%  bucket 57: 40%  bucket 58: 30%  bucket 57: 50%  bucket 58: 40%  bucket 57: 60%  bucket 58: 50%  bucket 57: 70%  bucket 58: 60%  bucket 57: 80%  bucket 58: 70%  bucket 57: 90%  bucket 58: 80%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 59:  bucket 59: 10%  bucket 59: 20%  bucket 59: 30%  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #17)" name="16" time="34.09428143501282">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60  Calculating Z arrays for bucket 1  Reserving size (126) for bucket 2Getting block 3 of 60  Calculating Z arrays for bucket 2  Reserving size (126) for bucket 3Getting block 4 of 60  Reserving size (126) for bucket 4  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 2:Getting block 5 of 60Getting block 6 of 60  Reserving size (126) for bucket 6  bucket 1: 10%  Calculating Z arrays for bucket 6  Calculating Z arrays for bucket 4Getting block 7 of 60  Reserving size (126) for bucket 5  Reserving size (126) for bucket 7Getting block 8 of 60  Entering block accumulator loop for bucket 4:  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 3:  Reserving size (126) for bucket 8  Calculating Z arrays for bucket 7  bucket 1: 20%  Calculating Z arrays for bucket 8  bucket 3: 10%  bucket 2: 10%  Entering block accumulator loop for bucket 6:  bucket 1: 30%  bucket 3: 20%  Entering block accumulator loop for bucket 5:  bucket 6: 10%  bucket 1: 40%  Entering block accumulator loop for bucket 7:  bucket 2: 20%  bucket 6: 20%  bucket 1: 50%  bucket 2: 30%  bucket 6: 30%  bucket 1: 60%  bucket 7: 10%  bucket 5: 10%  Entering block accumulator loop for bucket 8:  bucket 7: 20%  bucket 4: 10%  bucket 3: 30%  bucket 1: 70%  bucket 8: 10%  bucket 1: 80%  bucket 3: 40%  bucket 2: 40%  bucket 6: 40%  bucket 5: 20%  bucket 2: 50%  bucket 1: 90%  bucket 4: 20%  bucket 3: 50%  bucket 6: 50%  bucket 7: 30%  bucket 4: 30%  bucket 8: 20%  bucket 4: 40%  bucket 7: 40%  bucket 5: 30%  bucket 1: 100%  bucket 3: 60%  bucket 6: 60%  bucket 8: 30%  bucket 4: 50%  bucket 5: 40%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 8: 40%  bucket 3: 70%  bucket 2: 60%  bucket 4: 60%  bucket 7: 50%  bucket 6: 70%  bucket 8: 50%  bucket 2: 70%  bucket 5: 50%  bucket 3: 80%  bucket 7: 60%  bucket 6: 80%  bucket 2: 80%  bucket 8: 60%  bucket 3: 90%  bucket 5: 60%  bucket 7: 70%  bucket 2: 90%  bucket 3: 100%  bucket 8: 70%  bucket 6: 90%  bucket 7: 80%  Sorting block of length 106 for bucket 3  bucket 5: 70%  bucket 2: 100%  bucket 7: 90%  bucket 8: 80%  (Using difference cover)  bucket 4: 70%  bucket 5: 80%  bucket 6: 100%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 4: 80%  bucket 8: 90%  bucket 4: 90%  Sorting block time: 00:00:00  bucket 5: 90%Returning block of 43 for bucket 1  bucket 4: 100%  Sorting block of length 90 for bucket 6  bucket 5: 100%  bucket 8: 100%  (Using difference cover)  Sorting block of length 68 for bucket 4  (Using difference cover)  Sorting block of length 94 for bucket 8  (Using difference cover)  bucket 7: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 76 for bucket 7Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Entering block accumulator loop for bucket 9:  Calculating Z arrays for bucket 10  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  Entering block accumulator loop for bucket 10:  bucket 9: 50%  bucket 10: 10%  bucket 9: 60%  bucket 10: 20%  bucket 9: 70%  bucket 10: 30%  bucket 9: 80%  bucket 10: 40%  bucket 9: 90%  bucket 10: 50%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  bucket 11: 80%  Entering block accumulator loop for bucket 12:  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 12: 10%  Entering block accumulator loop for bucket 13:  bucket 12: 20%  bucket 13: 10%  bucket 12: 30%  bucket 13: 20%  bucket 12: 40%  bucket 13: 30%  bucket 12: 50%  bucket 13: 40%  bucket 12: 60%  bucket 13: 50%  Sorting block time: 00:00:00  bucket 12: 70%  bucket 13: 60%Returning block of 96 for bucket 11  bucket 12: 80%  bucket 13: 70%  bucket 12: 90%  bucket 13: 80%  bucket 12: 100%  bucket 13: 90%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%Getting block 16 of 60  bucket 15: 60%  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Entering block accumulator loop for bucket 16:  bucket 16: 10%  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  Sorting block time: 00:00:00  bucket 16: 50%Returning block of 69 for bucket 15  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 10%  bucket 17: 20%  Entering block accumulator loop for bucket 18:  bucket 17: 30%Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  bucket 18: 10%  bucket 17: 40%  bucket 18: 20%  bucket 17: 50%  Entering block accumulator loop for bucket 19:  bucket 18: 30%  bucket 17: 60%  bucket 18: 40%  bucket 19: 10%  bucket 17: 70%  bucket 18: 50%  bucket 19: 20%  bucket 18: 60%  bucket 17: 80%  bucket 19: 30%  bucket 18: 70%  bucket 17: 90%  bucket 19: 40%  bucket 18: 80%  bucket 17: 100%  bucket 19: 50%  bucket 18: 90%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 19: 60%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22Getting block 23 of 60  Calculating Z arrays for bucket 22  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 22:  Entering block accumulator loop for bucket 23:  bucket 22: 10%  bucket 23: 10%  bucket 22: 20%  bucket 23: 20%  bucket 22: 30%  bucket 23: 30%  bucket 22: 40%  bucket 23: 40%  bucket 22: 50%  bucket 23: 50%  bucket 22: 60%  bucket 23: 60%  bucket 22: 70%  bucket 23: 70%  bucket 22: 80%  bucket 23: 80%  bucket 22: 90%  bucket 23: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Entering block accumulator loop for bucket 24:  Calculating Z arrays for bucket 25  bucket 24: 10%  Entering block accumulator loop for bucket 25:  bucket 24: 20%  bucket 24: 30%  bucket 25: 10%  bucket 24: 40%  bucket 25: 20%  bucket 24: 50%  bucket 24: 60%  bucket 25: 30%  bucket 24: 70%  bucket 25: 40%  bucket 24: 80%  bucket 25: 50%  bucket 24: 90%  bucket 25: 60%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%Getting block 27 of 60  Reserving size (126) for bucket 27  bucket 26: 70%  Calculating Z arrays for bucket 27  bucket 26: 80%  Entering block accumulator loop for bucket 27:  bucket 26: 90%  bucket 27: 10%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 30:  bucket 29: 10%  bucket 30: 10%  bucket 29: 20%  bucket 30: 20%  bucket 29: 30%  bucket 30: 30%  bucket 29: 40%  bucket 30: 40%  bucket 29: 50%  bucket 30: 50%  bucket 30: 60%  bucket 29: 60%  bucket 30: 70%  bucket 29: 70%  bucket 30: 80%  bucket 30: 90%  bucket 29: 80%  bucket 30: 100%  Sorting block of length 124 for bucket 30  bucket 29: 90%  (Using difference cover)  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Entering block accumulator loop for bucket 31:  Calculating Z arrays for bucket 32  bucket 31: 10%  Entering block accumulator loop for bucket 32:  bucket 31: 20%  bucket 31: 30%  bucket 32: 10%  bucket 31: 40%  bucket 32: 20%  bucket 31: 50%  bucket 32: 30%  bucket 31: 60%  bucket 32: 40%  bucket 31: 70%  bucket 32: 50%  bucket 31: 80%  bucket 32: 60%  bucket 31: 90%  bucket 31: 100%  bucket 32: 70%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 33: 20%  bucket 33: 30%  bucket 33: 40%  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 34:  Entering block accumulator loop for bucket 35:  bucket 34: 10%  bucket 35: 10%  bucket 34: 20%  bucket 35: 20%  bucket 34: 30%  bucket 35: 30%  bucket 34: 40%  bucket 35: 40%  bucket 34: 50%  bucket 35: 50%  bucket 34: 60%  bucket 35: 60%  bucket 34: 70%  bucket 35: 70%  bucket 34: 80%  bucket 35: 80%  bucket 34: 90%  bucket 35: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%Getting block 37 of 60  bucket 36: 20%  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  bucket 36: 30%  bucket 36: 40%  Entering block accumulator loop for bucket 37:  bucket 36: 50%  bucket 36: 60%  bucket 37: 10%  bucket 36: 70%  bucket 37: 20%  bucket 36: 80%  bucket 37: 30%  bucket 36: 90%  bucket 37: 40%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 37: 50%  bucket 37: 60%  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%Getting block 39 of 60  Reserving size (126) for bucket 39  bucket 38: 80%  Calculating Z arrays for bucket 39  bucket 38: 90%  Entering block accumulator loop for bucket 39:  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 10%  bucket 39: 20%  bucket 39: 30%  bucket 39: 40%  bucket 39: 50%  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%  bucket 40: 40%  bucket 40: 50%  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:Getting block 42 of 60  bucket 41: 10%  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  bucket 41: 20%  Entering block accumulator loop for bucket 42:  bucket 41: 30%  bucket 42: 10%  bucket 41: 40%  bucket 42: 20%  bucket 42: 30%  bucket 41: 50%  bucket 42: 40%  bucket 41: 60%  bucket 42: 50%  bucket 42: 60%  bucket 41: 70%  bucket 42: 70%  bucket 41: 80%  bucket 42: 80%  bucket 41: 90%  bucket 42: 90%  bucket 41: 100%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%Getting block 44 of 60  Reserving size (126) for bucket 44  bucket 43: 70%  Calculating Z arrays for bucket 44  bucket 43: 80%  Entering block accumulator loop for bucket 44:  bucket 43: 90%  bucket 44: 10%  bucket 43: 100%  Sorting block of length 121 for bucket 43  bucket 44: 20%  (Using difference cover)  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 46:  Entering block accumulator loop for bucket 45:  bucket 46: 10%  bucket 46: 20%  bucket 45: 10%  bucket 46: 30%  bucket 45: 20%  bucket 46: 40%  bucket 45: 30%  bucket 46: 50%  bucket 45: 40%  bucket 46: 60%  bucket 45: 50%  bucket 46: 70%  bucket 46: 80%  bucket 45: 60%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 47:  Entering block accumulator loop for bucket 48:  bucket 47: 10%  bucket 48: 10%  bucket 47: 20%  bucket 48: 20%  bucket 47: 30%  bucket 48: 30%  bucket 47: 40%  bucket 48: 40%  bucket 48: 50%  bucket 47: 50%  bucket 48: 60%  bucket 47: 60%  bucket 48: 70%  bucket 48: 80%  bucket 47: 70%  bucket 48: 90%  bucket 47: 80%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  bucket 49: 20%  bucket 49: 30%  Entering block accumulator loop for bucket 50:  bucket 49: 40%  bucket 50: 10%  bucket 49: 50%  bucket 50: 20%  bucket 49: 60%  bucket 50: 30%  bucket 49: 70%  bucket 50: 40%  bucket 49: 80%  bucket 50: 50%  bucket 49: 90%  bucket 50: 60%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 51: 10%  bucket 51: 20%  bucket 51: 30%  bucket 51: 40%  bucket 51: 50%  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52Getting block 53 of 60  Entering block accumulator loop for bucket 52:  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  bucket 52: 10%  bucket 52: 20%  Entering block accumulator loop for bucket 53:  bucket 52: 30%  bucket 52: 40%  bucket 53: 10%  bucket 52: 50%  bucket 53: 20%  bucket 52: 60%  bucket 53: 30%  bucket 52: 70%  bucket 53: 40%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00  bucket 53: 50%Returning block of 107 for bucket 52  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  Sorting block time: 00:00:00Returning block of 65 for bucket 54  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 57:  bucket 57: 10%  Entering block accumulator loop for bucket 58:  bucket 57: 20%  bucket 57: 30%  bucket 58: 10%  bucket 57: 40%  bucket 58: 20%  bucket 57: 50%  bucket 58: 30%  bucket 57: 60%  bucket 58: 40%  bucket 57: 70%  bucket 58: 50%  bucket 57: 80%  bucket 58: 60%  bucket 57: 90%  bucket 58: 70%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 59:  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 59: 10%  bucket 60: 20%  bucket 59: 20%  bucket 60: 30%  bucket 60: 40%  bucket 59: 30%  bucket 60: 50%  bucket 59: 40%  bucket 60: 60%  bucket 59: 50%  bucket 60: 70%  bucket 59: 60%  bucket 60: 80%  bucket 60: 90%  bucket 59: 70%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0010 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #3)" name="2" time="70.5082015991211">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "library|input_1": {   "id": "e9ebb94e05e715d0",   "src": "hda"  },  "library|input_2": {   "id": "508aa0fa83ba570c",   "src": "hda"  },  "library|type": "paired",  "reference_genome|source": "indexed" }, "job": {  "command_line": "set -o pipefail;         ln -f -s \u0027/galaxy/server/database/objects/7/9/6/dataset_796b9411-5ee1-48cb-bf30-c568e7153edb.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/1/c/5/dataset_1c50e21b-668e-4a77-9b17-e2e04a949328.dat\u0027 input_r.fastq \u0026\u0026     hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027/cvmfs/data.galaxyproject.org/managed/hisat2_index/apiMel4/apiMel4\u0027    -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/8/d/a/dataset_8da44b52-e92c-4e55-84f3-c7f2d42af051.dat\u0027",  "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "copied_from_job_id": null,  "create_time": "2025-01-10T06:59:39.289434",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-67z4k",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "98be230d53acb485",  "inputs": {   "library|input_1": {    "id": "e9ebb94e05e715d0",    "src": "hda",    "uuid": "796b9411-5ee1-48cb-bf30-c568e7153edb"   },   "library|input_2": {    "id": "508aa0fa83ba570c",    "src": "hda",    "uuid": "1c50e21b-668e-4a77-9b17-e2e04a949328"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "39.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "39 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736492419.0000000",    "title": "Job End Time",    "value": "2025-01-10 07:00:19"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736492380.0000000",    "title": "Job Start Time",    "value": "2025-01-10 06:59:40"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "21474.0000000",    "title": "Memory Allocated (MB)",    "value": "21474"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "8.0000000",    "title": "Cores Allocated",    "value": "8"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "8ebfc156b64594f2",    "src": "hda",    "uuid": "8da44b52-e92c-4e55-84f3-c7f2d42af051"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/phiX.len\"",   "dbkey": "\"phiX\"",   "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 210, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 211, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}",   "reference_genome": "{\"__current_case__\": 0, \"index\": \"apiMel4\", \"source\": \"indexed\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "ok",  "stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n0.00% overall alignment rate\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1",  "tool_stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n0.00% overall alignment rate\n",  "tool_stdout": "",  "update_time": "2025-01-10T07:00:30.414734",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_3y63jzl2.sam v. /tmp/history_bam_converted_to_sam_comqo7dg.sam )\n--- local_file\n+++ history_data\n@@ -1,23 +1,5343 @@\n @HD\tVN:1.0\tSO:coordinate\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome -1 input_f.fastq -2 input_r.fastq\"\n-@SQ\tSN:phiX174\tLN:5386\n-phiX174_1141_1609_1:0:0_1:0:0_4\t147\tphiX174\t1540\t60\t70M\t=\t1141\t-469\tTTCTAGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tZS:i:-5\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:4C65\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1141_1609_1:0:0_1:0:0_4\t99\tphiX174\t1141\t60\t70M\t=\t1540\t469\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:24G45\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1363_1914_3:0:0_0:0:0_6\t133\tphiX174\t1845\t0\t*\t=\t1845\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_1363_1914_3:0:0_0:0:0_6\t89\tphiX174\t1845\t60\t70M\t=\t1845\t0\tGCACTATGTTTACTCTTGCGCTTGTTCGTTTTCCGCCTACTGCGACTAAAGAGATTCAGTACCTTAACGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYT:Z:UP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t147\tphiX174\t1896\t60\t70M\t=\t1542\t-424\tAGATTCAGTACCTTAACGCTAAAGGTGCTTTGACTTATACCGATATTGCTGGCGACCCTGTTTTGTATGG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t99\tphiX174\t1542\t60\t70M\t=\t1896\t424\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t147\tphiX174\t639\t60\t70M\t=\t185\t-524\tTATTATGTTCATCCCGTCAACATTCAAACGGCCTGTCGCATCATGGAAGGCGCTGAATTTACGGAAAACA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:37T32\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t163\tphiX174\t1980\t60\t70M\t=\t2432\t522\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:12T57\tYS:i:-9\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t83\tphiX174\t2432\t60\t70M\t=\t1980\t-522\tTTTTTTCTGATAAGCTGGTTCTCAATTCTGTTAATCCAGCTTCTTCGGCACCTGTTTTACACACACCTAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-9\tXN:i:0\tXM:i:3\tXO:i:0\tXG:i:0\tNM:i:3\tMD:Z:24C8C27G8\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t147\tphiX174\t2508\t60\t70M\t=\t2128\t-450\tATCGTCAACGTTATATTTTGATAGTTTGAAGGTTAATGCTGGTATTGGTGGTTTTCTTAATTCCATTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-12\tXN:i:0\tXM:i:4\tXO:i:0\tXG:i:0\tNM:i:4\tMD:Z:29C14A13C3G7\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t99\tphiX174\t2128\t60\t70M\t=\t2508\t450\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-12\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t147\tphiX174\t2670\t60\t70M\t=\t2259\t-481\tTCGCTTTGAGTCTTCGTCGGTTCCGACTACCCTCCCGACTGCCTATGATGTTTATCCTTTGAATGGTCGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:15T54\tYS:i:-2\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t99\tphiX174\t2259\t60\t68M2S\t=\t2670\t481\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-2\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:68\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t163\tphiX174\t2950\t60\t70M\t=\t3308\t428\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-6\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t83\tphiX174\t3308\t60\t70M\t=\t2950\t-428\tTGAGATTAATGCTTGGGAGCGTGCTGGTGCTGATGCTTCCTATGCTGGTATGGTTGACGCCGGATTTGAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-6\tZS:i:-8\tXN:i:0\tXM:i:2\tXO:i:0\tXG:i:0\tNM:i:2\tMD:Z:4C36C28\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t147\tphiX174\t3663\t60\t70M\t=\t3199\t-534\tAATGACCAAATCAATGAAATGACTCGCAAGGTTAGTGCTGAGGTTGACTTAGTTCATCAGCAAACGCAGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:14A55\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t99\tphiX174\t3199\t60\t70M\t=\t3663\t534\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n********\n*SNIP *\n********\n+@SQ\tSN:Group6\tLN:18472937\n+@SQ\tSN:Group7\tLN:13219345\n+@SQ\tSN:Group8\tLN:13546544\n+@SQ\tSN:Group9\tLN:11120453\n+@SQ\tSN:chrM\tLN:16343\n+phiX174_1141_1609_1:0:0_1:0:0_4\t141\t*\t0\t0\t*\t*\t0\t0\tCAAATTAGCATAAGCAGCTTGCAGACCCATAATGTCAATAGATGTGGTAGAAGTCGTCATTTGGCTAGAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1141_1609_1:0:0_1:0:0_4\t77\t*\t0\t0\t*\t*\t0\t0\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t141\t*\t0\t0\t*\t*\t0\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t77\t*\t0\t0\t*\t*\t0\t0\tGCGTTAAGGTACTGAATCTCTTTAGTCGCAGTAGGCGGAAAACGAACAAGCGCAAGAGTAAACATAGTGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t141\t*\t0\t0\t*\t*\t0\t0\tCCATACAAAACAGGGTCGCCAGCAATATCGGTATAAGTCAAAGCACCTTTAGCGTTAAGGTACTGAATCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t141\t*\t0\t0\t*\t*\t0\t0\tTGTTTTCCGTAAATTCAGCGCCTTCCATGATGCGACAGGCCGTTTGAATGTTGACGGGATGAACATAATA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t77\t*\t0\t0\t*\t*\t0\t0\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t141\t*\t0\t0\t*\t*\t0\t0\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGGTGTGTGTAAAACAGGTGCCGAAGAAGCTGGATTAACAGAATTGAGAACCAGCTTATCAGAAAAAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t141\t*\t0\t0\t*\t*\t0\t0\tCTGAATGGAATTAAGAAAACCACCAATACCAGCATTAACCTTCAAACTATCAAAATATAACGTTGACGAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t77\t*\t0\t0\t*\t*\t0\t0\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t141\t*\t0\t0\t*\t*\t0\t0\tGCGACCATTCAAAGGATAAACATCATAGGCAGTCGGGAGGGTAGTCGGAACCGACGAAGACTCAAAGCGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t141\t*\t0\t0\t*\t*\t0\t0\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t77\t*\t0\t0\t*\t*\t0\t0\tCTCAAATCCGGCGTCAACCATACCAGCATAGGAAGCATCAGCACCAGCACGCTCCCAAGCATTAATCTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t141\t*\t0\t0\t*\t*\t0\t0\tTCTGCGTTTGCTGATGAACTAAGTCAACCTCAGCACTAACCTTGCGAGTCATTTCATTGATTTGGTCATT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t77\t*\t0\t0\t*\t*\t0\t0\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t141\t*\t0\t0\t*\t*\t0\t0\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t77\t*\t0\t0\t*\t*\t0\t0\tACCATAAACGCAAGCCTCAACGCAGCGACGAGCACGAGAGCGGTCAGTAGCAATCCAAACTTTGTTACTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n" ], "status": "failure", "test_index": 2, "time_seconds": 70.5082015991211, "tool_id": "hisat2", "tool_version": "2.2.1+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            10 reads; of these:  10 (100.00%) were paired; of these:    10 (100.00%) aligned concordantly 0 times    0 (0.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    10 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    10 pairs aligned 0 times concordantly or discordantly; of these:      20 mates make up the pairs; of these:        20 (100.00%) aligned 0 times        0 (0.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times0.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #3)" name="2" time="36.606480836868286">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "library|input_1": {   "id": "afaa498d7c007064",   "src": "hda"  },  "library|input_2": {   "id": "06b70a72625068a7",   "src": "hda"  },  "library|type": "paired",  "reference_genome|source": "indexed" }, "job": {  "command_line": "set -o pipefail;         ln -f -s \u0027/galaxy/server/database/objects/4/3/1/dataset_43199243-b25f-4eef-8b2a-650ca677186b.dat\u0027 input_f.fastq \u0026\u0026  ln -f -s \u0027/galaxy/server/database/objects/0/c/d/dataset_0cd3ac2e-d747-4e33-828b-593612844130.dat\u0027 input_r.fastq \u0026\u0026     hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027/cvmfs/data.galaxyproject.org/managed/hisat2_index/apiMel4/apiMel4\u0027    -1 \u0027input_f.fastq\u0027 -2 \u0027input_r.fastq\u0027                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/2/d/5/dataset_2d52afe2-dda8-4cb0-bf7a-91e98cb2ecb3.dat\u0027",  "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}",  "copied_from_job_id": null,  "create_time": "2025-01-10T07:08:52.641043",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-nn9ff",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "a4c357c59f4c1d9a",  "inputs": {   "library|input_1": {    "id": "afaa498d7c007064",    "src": "hda",    "uuid": "43199243-b25f-4eef-8b2a-650ca677186b"   },   "library|input_2": {    "id": "06b70a72625068a7",    "src": "hda",    "uuid": "0cd3ac2e-d747-4e33-828b-593612844130"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "2.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "2 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736492936.0000000",    "title": "Job End Time",    "value": "2025-01-10 07:08:56"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736492934.0000000",    "title": "Job Start Time",    "value": "2025-01-10 07:08:54"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "21474.0000000",    "title": "Memory Allocated (MB)",    "value": "21474"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "8.0000000",    "title": "Cores Allocated",    "value": "8"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "198a3220a9c767e9",    "src": "hda",    "uuid": "2d52afe2-dda8-4cb0-bf7a-91e98cb2ecb3"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/phiX.len\"",   "dbkey": "\"phiX\"",   "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 271, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 272, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}",   "reference_genome": "{\"__current_case__\": 0, \"index\": \"apiMel4\", \"source\": \"indexed\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "ok",  "stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n0.00% overall alignment rate\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1",  "tool_stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly \u003e1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned \u003e1 times\n0.00% overall alignment rate\n",  "tool_stdout": "",  "update_time": "2025-01-10T07:09:07.614299",  "user_email": "tests@fake.org" }, "output_problems": [  "Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_ullcn8lm.sam v. /tmp/history_bam_converted_to_sam_t9g7gl_8.sam )\n--- local_file\n+++ history_data\n@@ -1,23 +1,5343 @@\n @HD\tVN:1.0\tSO:coordinate\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome -1 input_f.fastq -2 input_r.fastq\"\n-@SQ\tSN:phiX174\tLN:5386\n-phiX174_1141_1609_1:0:0_1:0:0_4\t147\tphiX174\t1540\t60\t70M\t=\t1141\t-469\tTTCTAGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tZS:i:-5\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:4C65\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1141_1609_1:0:0_1:0:0_4\t99\tphiX174\t1141\t60\t70M\t=\t1540\t469\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:24G45\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1363_1914_3:0:0_0:0:0_6\t133\tphiX174\t1845\t0\t*\t=\t1845\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_1363_1914_3:0:0_0:0:0_6\t89\tphiX174\t1845\t60\t70M\t=\t1845\t0\tGCACTATGTTTACTCTTGCGCTTGTTCGTTTTCCGCCTACTGCGACTAAAGAGATTCAGTACCTTAACGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYT:Z:UP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t147\tphiX174\t1896\t60\t70M\t=\t1542\t-424\tAGATTCAGTACCTTAACGCTAAAGGTGCTTTGACTTATACCGATATTGCTGGCGACCCTGTTTTGTATGG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t99\tphiX174\t1542\t60\t70M\t=\t1896\t424\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t147\tphiX174\t639\t60\t70M\t=\t185\t-524\tTATTATGTTCATCCCGTCAACATTCAAACGGCCTGTCGCATCATGGAAGGCGCTGAATTTACGGAAAACA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:37T32\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t163\tphiX174\t1980\t60\t70M\t=\t2432\t522\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:12T57\tYS:i:-9\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t83\tphiX174\t2432\t60\t70M\t=\t1980\t-522\tTTTTTTCTGATAAGCTGGTTCTCAATTCTGTTAATCCAGCTTCTTCGGCACCTGTTTTACACACACCTAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-9\tXN:i:0\tXM:i:3\tXO:i:0\tXG:i:0\tNM:i:3\tMD:Z:24C8C27G8\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t147\tphiX174\t2508\t60\t70M\t=\t2128\t-450\tATCGTCAACGTTATATTTTGATAGTTTGAAGGTTAATGCTGGTATTGGTGGTTTTCTTAATTCCATTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-12\tXN:i:0\tXM:i:4\tXO:i:0\tXG:i:0\tNM:i:4\tMD:Z:29C14A13C3G7\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t99\tphiX174\t2128\t60\t70M\t=\t2508\t450\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-12\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t147\tphiX174\t2670\t60\t70M\t=\t2259\t-481\tTCGCTTTGAGTCTTCGTCGGTTCCGACTACCCTCCCGACTGCCTATGATGTTTATCCTTTGAATGGTCGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:15T54\tYS:i:-2\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t99\tphiX174\t2259\t60\t68M2S\t=\t2670\t481\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-2\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:68\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t163\tphiX174\t2950\t60\t70M\t=\t3308\t428\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-6\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t83\tphiX174\t3308\t60\t70M\t=\t2950\t-428\tTGAGATTAATGCTTGGGAGCGTGCTGGTGCTGATGCTTCCTATGCTGGTATGGTTGACGCCGGATTTGAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-6\tZS:i:-8\tXN:i:0\tXM:i:2\tXO:i:0\tXG:i:0\tNM:i:2\tMD:Z:4C36C28\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t147\tphiX174\t3663\t60\t70M\t=\t3199\t-534\tAATGACCAAATCAATGAAATGACTCGCAAGGTTAGTGCTGAGGTTGACTTAGTTCATCAGCAAACGCAGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:14A55\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t99\tphiX174\t3199\t60\t70M\t=\t3663\t534\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n********\n*SNIP *\n********\n+@SQ\tSN:Group6\tLN:18472937\n+@SQ\tSN:Group7\tLN:13219345\n+@SQ\tSN:Group8\tLN:13546544\n+@SQ\tSN:Group9\tLN:11120453\n+@SQ\tSN:chrM\tLN:16343\n+phiX174_1141_1609_1:0:0_1:0:0_4\t141\t*\t0\t0\t*\t*\t0\t0\tCAAATTAGCATAAGCAGCTTGCAGACCCATAATGTCAATAGATGTGGTAGAAGTCGTCATTTGGCTAGAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1141_1609_1:0:0_1:0:0_4\t77\t*\t0\t0\t*\t*\t0\t0\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t141\t*\t0\t0\t*\t*\t0\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t77\t*\t0\t0\t*\t*\t0\t0\tGCGTTAAGGTACTGAATCTCTTTAGTCGCAGTAGGCGGAAAACGAACAAGCGCAAGAGTAAACATAGTGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t141\t*\t0\t0\t*\t*\t0\t0\tCCATACAAAACAGGGTCGCCAGCAATATCGGTATAAGTCAAAGCACCTTTAGCGTTAAGGTACTGAATCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t141\t*\t0\t0\t*\t*\t0\t0\tTGTTTTCCGTAAATTCAGCGCCTTCCATGATGCGACAGGCCGTTTGAATGTTGACGGGATGAACATAATA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t77\t*\t0\t0\t*\t*\t0\t0\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t141\t*\t0\t0\t*\t*\t0\t0\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGGTGTGTGTAAAACAGGTGCCGAAGAAGCTGGATTAACAGAATTGAGAACCAGCTTATCAGAAAAAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t141\t*\t0\t0\t*\t*\t0\t0\tCTGAATGGAATTAAGAAAACCACCAATACCAGCATTAACCTTCAAACTATCAAAATATAACGTTGACGAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t77\t*\t0\t0\t*\t*\t0\t0\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t141\t*\t0\t0\t*\t*\t0\t0\tGCGACCATTCAAAGGATAAACATCATAGGCAGTCGGGAGGGTAGTCGGAACCGACGAAGACTCAAAGCGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t141\t*\t0\t0\t*\t*\t0\t0\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t77\t*\t0\t0\t*\t*\t0\t0\tCTCAAATCCGGCGTCAACCATACCAGCATAGGAAGCATCAGCACCAGCACGCTCCCAAGCATTAATCTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t141\t*\t0\t0\t*\t*\t0\t0\tTCTGCGTTTGCTGATGAACTAAGTCAACCTCAGCACTAACCTTGCGAGTCATTTCATTGATTTGGTCATT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t77\t*\t0\t0\t*\t*\t0\t0\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t141\t*\t0\t0\t*\t*\t0\t0\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t77\t*\t0\t0\t*\t*\t0\t0\tACCATAAACGCAAGCCTCAACGCAGCGACGAGCACGAGAGCGGTCAGTAGCAATCCAAACTTTGTTACTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n" ], "status": "failure", "test_index": 2, "time_seconds": 36.606480836868286, "tool_id": "hisat2", "tool_version": "2.2.1+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            10 reads; of these:  10 (100.00%) were paired; of these:    10 (100.00%) aligned concordantly 0 times    0 (0.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    10 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    10 pairs aligned 0 times concordantly or discordantly; of these:      20 mates make up the pairs; of these:        20 (100.00%) aligned 0 times        0 (0.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times0.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #4)" name="3" time="34.485530853271484">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2Getting block 3 of 60  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 1:  Reserving size (126) for bucket 3Getting block 4 of 60  Reserving size (126) for bucket 4  bucket 1: 10%  Calculating Z arrays for bucket 3  bucket 2: 10%Getting block 5 of 60Getting block 6 of 60  bucket 1: 20%  bucket 2: 20%  Reserving size (126) for bucket 6Getting block 7 of 60Getting block 8 of 60  Reserving size (126) for bucket 8  bucket 1: 30%  Calculating Z arrays for bucket 8  Reserving size (126) for bucket 7  Calculating Z arrays for bucket 4  bucket 1: 40%  Calculating Z arrays for bucket 7  bucket 2: 30%  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 8:  Entering block accumulator loop for bucket 4:  Entering block accumulator loop for bucket 7:  bucket 1: 50%  bucket 2: 40%  bucket 7: 10%  bucket 4: 10%  Entering block accumulator loop for bucket 3:  bucket 2: 50%  Entering block accumulator loop for bucket 6:  bucket 7: 20%  bucket 2: 60%  bucket 1: 60%  bucket 7: 30%  bucket 6: 10%  bucket 3: 10%  Reserving size (126) for bucket 5  bucket 4: 20%  bucket 2: 70%  bucket 3: 20%  bucket 8: 10%  Calculating Z arrays for bucket 5  bucket 2: 80%  bucket 8: 20%  bucket 7: 40%  bucket 2: 90%  bucket 1: 70%  bucket 6: 20%  bucket 3: 30%  bucket 2: 100%  bucket 4: 30%  bucket 6: 30%  bucket 8: 30%  Sorting block of length 84 for bucket 2  bucket 7: 50%  bucket 3: 40%  (Using difference cover)  bucket 1: 80%  bucket 7: 60%  bucket 8: 40%  bucket 6: 40%  bucket 3: 50%  Entering block accumulator loop for bucket 5:  bucket 7: 70%  bucket 8: 50%  bucket 6: 50%  bucket 1: 90%  bucket 7: 80%  bucket 3: 60%  bucket 6: 60%  bucket 7: 90%  bucket 1: 100%  bucket 4: 40%  bucket 6: 70%  bucket 3: 70%  bucket 6: 80%  bucket 7: 100%  bucket 8: 60%  bucket 3: 80%  bucket 6: 90%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 8: 70%  bucket 5: 10%  bucket 6: 100%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 3: 90%  bucket 4: 50%  bucket 5: 20%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 3: 100%  bucket 4: 60%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 5: 30%  bucket 8: 80%  bucket 4: 70%  bucket 5: 40%  bucket 8: 90%  bucket 4: 80%  bucket 5: 50%  bucket 8: 100%  Sorting block of length 94 for bucket 8  bucket 4: 90%  (Using difference cover)  bucket 5: 60%  bucket 4: 100%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 5: 70%  bucket 5: 80%  bucket 5: 90%  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 95 for bucket 8Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 10:  Sorting block time: 00:00:00Returning block of 125 for bucket 9  bucket 10: 10%  Entering block accumulator loop for bucket 11:  bucket 10: 20%  bucket 10: 30%  bucket 11: 10%  bucket 10: 40%  bucket 11: 20%  bucket 10: 50%  bucket 11: 30%  bucket 10: 60%  bucket 11: 40%  bucket 10: 70%  bucket 11: 50%  bucket 10: 80%  bucket 10: 90%  bucket 11: 60%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%Getting block 13 of 60  Reserving size (126) for bucket 13  bucket 12: 60%  Calculating Z arrays for bucket 13  bucket 12: 70%  Entering block accumulator loop for bucket 13:  bucket 12: 80%  bucket 13: 10%  bucket 12: 90%  bucket 13: 20%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  bucket 14: 20%  bucket 14: 30%  Entering block accumulator loop for bucket 15:  bucket 14: 40%  bucket 14: 50%  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 14: 60%  bucket 15: 60%  bucket 14: 70%  bucket 15: 70%  bucket 14: 80%  bucket 15: 80%  bucket 14: 90%  bucket 15: 90%  bucket 14: 100%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 16:  bucket 16: 10%  Entering block accumulator loop for bucket 17:  bucket 16: 20%  bucket 17: 10%  bucket 16: 30%  bucket 17: 20%  bucket 16: 40%  bucket 17: 30%  bucket 16: 50%  bucket 17: 40%  bucket 16: 60%  bucket 17: 50%  bucket 16: 70%  bucket 17: 60%  bucket 16: 80%  bucket 17: 70%  bucket 16: 90%  bucket 17: 80%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  Sorting block time: 00:00:00Returning block of 123 for bucket 18  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  bucket 20: 70%  bucket 20: 80%  Entering block accumulator loop for bucket 21:  bucket 20: 90%  bucket 21: 10%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  bucket 22: 90%  bucket 22: 100%  Entering block accumulator loop for bucket 23:  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 24:  bucket 24: 10%  Entering block accumulator loop for bucket 25:  bucket 24: 20%  bucket 25: 10%  bucket 25: 20%  bucket 24: 30%  bucket 25: 30%  bucket 24: 40%  bucket 25: 40%  bucket 24: 50%  bucket 25: 50%  bucket 24: 60%  bucket 25: 60%  bucket 24: 70%  bucket 25: 70%  bucket 24: 80%  bucket 25: 80%  bucket 24: 90%  bucket 25: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 26 of 60  Reserving size (126) for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 27:  Entering block accumulator loop for bucket 26:  bucket 27: 10%  bucket 26: 10%  bucket 27: 20%  bucket 27: 30%  bucket 26: 20%  bucket 27: 40%  bucket 26: 30%  bucket 27: 50%  bucket 27: 60%  bucket 26: 40%  bucket 27: 70%  bucket 26: 50%  bucket 27: 80%  bucket 27: 90%  bucket 26: 60%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 28:  bucket 28: 10%  Entering block accumulator loop for bucket 29:  bucket 28: 20%  bucket 29: 10%  bucket 28: 30%  bucket 29: 20%  bucket 28: 40%  bucket 29: 30%  bucket 28: 50%  bucket 29: 40%  bucket 28: 60%  bucket 29: 50%  bucket 28: 70%  bucket 29: 60%  bucket 28: 80%  bucket 29: 70%  bucket 28: 90%  bucket 29: 80%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 30:  bucket 30: 10%  Entering block accumulator loop for bucket 31:  bucket 30: 20%  bucket 31: 10%  bucket 30: 30%  bucket 31: 20%  bucket 30: 40%  bucket 31: 30%  bucket 30: 50%  bucket 31: 40%  bucket 30: 60%  bucket 31: 50%  bucket 30: 70%  bucket 31: 60%  bucket 30: 80%  bucket 31: 70%  bucket 30: 90%  bucket 31: 80%  bucket 30: 100%  bucket 31: 90%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 32:  bucket 32: 10%  Entering block accumulator loop for bucket 33:  bucket 32: 20%  bucket 33: 10%  bucket 32: 30%  bucket 33: 20%  bucket 32: 40%  bucket 33: 30%  bucket 32: 50%  bucket 33: 40%  bucket 32: 60%  bucket 33: 50%  bucket 32: 70%  bucket 33: 60%  bucket 32: 80%  bucket 33: 70%  bucket 32: 90%  bucket 33: 80%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 34 of 60  Reserving size (126) for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  Entering block accumulator loop for bucket 35:  bucket 34: 10%  bucket 35: 10%  bucket 34: 20%  bucket 35: 20%  bucket 34: 30%  bucket 35: 30%  bucket 34: 40%  bucket 35: 40%  bucket 34: 50%  bucket 35: 50%  bucket 34: 60%  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 35: 60%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%  bucket 36: 20%Getting block 37 of 60  Reserving size (126) for bucket 37  bucket 36: 30%  Calculating Z arrays for bucket 37  bucket 36: 40%  Entering block accumulator loop for bucket 37:  bucket 36: 50%  bucket 37: 10%  bucket 36: 60%  bucket 37: 20%  bucket 36: 70%  bucket 37: 30%  bucket 36: 80%  bucket 37: 40%  bucket 36: 90%  bucket 37: 50%  bucket 36: 100%  bucket 37: 60%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  bucket 38: 40%  bucket 38: 50%  Entering block accumulator loop for bucket 39:  bucket 38: 60%  bucket 39: 10%  bucket 38: 70%  bucket 39: 20%  bucket 38: 80%  bucket 38: 90%  bucket 39: 30%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 40%  bucket 39: 50%  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  bucket 40: 40%  bucket 40: 50%  Entering block accumulator loop for bucket 41:  bucket 40: 60%  bucket 41: 10%  bucket 40: 70%  bucket 41: 20%  bucket 40: 80%  bucket 41: 30%  bucket 40: 90%  bucket 41: 40%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 41: 50%  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  bucket 42: 10%  bucket 42: 20%  Entering block accumulator loop for bucket 43:  bucket 42: 30%  bucket 43: 10%  bucket 42: 40%  bucket 43: 20%  bucket 43: 30%  bucket 42: 50%  bucket 43: 40%  bucket 43: 50%  bucket 42: 60%  bucket 43: 60%  bucket 42: 70%  bucket 43: 70%  bucket 43: 80%  bucket 42: 80%  bucket 43: 90%  bucket 42: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  bucket 44: 20%  bucket 44: 30%  Entering block accumulator loop for bucket 45:  bucket 44: 40%  bucket 45: 10%  bucket 44: 50%  bucket 45: 20%  bucket 44: 60%  bucket 45: 30%  bucket 44: 70%  bucket 45: 40%  bucket 44: 80%  bucket 44: 90%  bucket 45: 50%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Entering block accumulator loop for bucket 47:  Calculating Z arrays for bucket 48  bucket 47: 10%  Entering block accumulator loop for bucket 48:  bucket 47: 20%  bucket 48: 10%  bucket 47: 30%  bucket 48: 20%  bucket 47: 40%  bucket 48: 30%  bucket 47: 50%  bucket 48: 40%  bucket 47: 60%  bucket 48: 50%  bucket 47: 70%  bucket 48: 60%  bucket 47: 80%  bucket 48: 70%  bucket 47: 90%  bucket 48: 80%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 49:  bucket 49: 10%  Entering block accumulator loop for bucket 50:  bucket 49: 20%  bucket 50: 10%  bucket 49: 30%  bucket 50: 20%  bucket 49: 40%  bucket 50: 30%  bucket 49: 50%  bucket 50: 40%  bucket 49: 60%  bucket 50: 50%  bucket 49: 70%  bucket 50: 60%  bucket 49: 80%  bucket 50: 70%  bucket 49: 90%  bucket 50: 80%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 51: 10%  bucket 51: 20%  bucket 51: 30%Getting block 52 of 60  Reserving size (126) for bucket 52  bucket 51: 40%  Calculating Z arrays for bucket 52  bucket 51: 50%  bucket 51: 60%  Entering block accumulator loop for bucket 52:  bucket 51: 70%  bucket 51: 80%  bucket 52: 10%  bucket 51: 90%  bucket 52: 20%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 30%  bucket 52: 40%  bucket 52: 50%  bucket 52: 60%  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  Sorting block time: 00:00:00Returning block of 92 for bucket 51  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Entering block accumulator loop for bucket 53:  Calculating Z arrays for bucket 54  bucket 53: 10%  Entering block accumulator loop for bucket 54:  bucket 53: 20%  bucket 54: 10%  bucket 53: 30%  bucket 54: 20%  bucket 53: 40%  bucket 54: 30%  bucket 53: 50%  bucket 54: 40%  bucket 53: 60%  bucket 54: 50%  bucket 53: 70%  bucket 54: 60%  bucket 53: 80%  bucket 54: 70%  bucket 53: 90%  bucket 54: 80%  bucket 53: 100%  Sorting block of length 78 for bucket 53  bucket 54: 90%  (Using difference cover)  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  Entering block accumulator loop for bucket 56:  bucket 55: 50%  bucket 55: 60%  bucket 56: 10%  bucket 55: 70%  bucket 55: 80%  bucket 56: 20%  bucket 55: 90%  bucket 56: 30%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  Sorting block time: 00:00:00  bucket 56: 100%Returning block of 80 for bucket 55  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 57:  Entering block accumulator loop for bucket 58:  bucket 57: 10%  bucket 58: 10%  bucket 57: 20%  bucket 58: 20%  bucket 57: 30%  bucket 58: 30%  bucket 57: 40%  bucket 58: 40%  bucket 57: 50%  bucket 58: 50%  bucket 57: 60%  bucket 58: 60%  bucket 57: 70%  bucket 58: 70%  bucket 57: 80%  bucket 58: 80%  bucket 57: 90%  bucket 58: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 59:  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 59: 10%  bucket 60: 20%  bucket 60: 30%  bucket 59: 20%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 59: 30%  bucket 60: 70%  bucket 60: 80%  bucket 59: 40%  bucket 60: 90%  bucket 59: 50%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:01500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    71 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    71 pairs aligned 0 times concordantly or discordantly; of these:      142 mates make up the pairs; of these:        74 (52.11%) aligned 0 times        68 (47.89%) aligned exactly 1 time        0 (0.00%) aligned >1 times92.60% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #4)" name="3" time="11.458495616912842">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 3, "time_seconds": 11.458495616912842, "tool_id": "hisat2", "tool_version": "2.2.1+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #5)" name="4" time="34.623820066452026">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2Getting block 3 of 60  Reserving size (126) for bucket 3  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 2:  bucket 1: 10%  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%  Entering block accumulator loop for bucket 3:Getting block 4 of 60  bucket 1: 40%  bucket 3: 10%Getting block 6 of 60  Reserving size (126) for bucket 4  bucket 2: 20%  Reserving size (126) for bucket 6Getting block 7 of 60  Calculating Z arrays for bucket 6Getting block 5 of 60  bucket 1: 50%  Entering block accumulator loop for bucket 6:  bucket 1: 60%  bucket 3: 20%  Reserving size (126) for bucket 5  Calculating Z arrays for bucket 4  bucket 2: 30%  Calculating Z arrays for bucket 5  bucket 1: 70%  bucket 3: 30%  Reserving size (126) for bucket 7  bucket 6: 10%  Calculating Z arrays for bucket 7  bucket 3: 40%  bucket 6: 20%  Entering block accumulator loop for bucket 4:  bucket 3: 50%  Entering block accumulator loop for bucket 7:  bucket 1: 80%  bucket 2: 40%  bucket 4: 10%Getting block 8 of 60  bucket 1: 90%  Reserving size (126) for bucket 8  bucket 4: 20%  bucket 6: 30%  Entering block accumulator loop for bucket 5:  bucket 7: 10%  bucket 6: 40%  bucket 3: 60%  bucket 5: 10%  bucket 1: 100%  bucket 2: 50%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 4: 30%  bucket 7: 20%  bucket 2: 60%  bucket 3: 70%  bucket 4: 40%  bucket 7: 30%  bucket 5: 20%  bucket 6: 50%  bucket 3: 80%  bucket 5: 30%  bucket 7: 40%  bucket 6: 60%  bucket 5: 40%  bucket 2: 70%  Calculating Z arrays for bucket 8  bucket 3: 90%  bucket 5: 50%  bucket 2: 80%  bucket 3: 100%  bucket 5: 60%  bucket 2: 90%  bucket 7: 50%  bucket 2: 100%  Sorting block of length 106 for bucket 3  (Using difference cover)  Entering block accumulator loop for bucket 8:  Sorting block of length 84 for bucket 2  bucket 5: 70%  (Using difference cover)  bucket 7: 60%  bucket 5: 80%  bucket 8: 10%  bucket 4: 50%  bucket 6: 70%  bucket 5: 90%  bucket 4: 60%  bucket 7: 70%  bucket 5: 100%  bucket 8: 20%  bucket 4: 70%  bucket 6: 80%  bucket 7: 80%  bucket 4: 80%  bucket 8: 30%  bucket 7: 90%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 4: 90%  bucket 6: 90%  Sorting block time: 00:00:00  bucket 8: 40%Returning block of 43 for bucket 1  bucket 6: 100%  bucket 7: 100%  bucket 4: 100%  bucket 8: 50%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 8: 60%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 76 for bucket 7Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 10:  bucket 10: 10%  bucket 10: 20%  Entering block accumulator loop for bucket 11:  bucket 10: 30%  bucket 10: 40%  bucket 11: 10%  bucket 10: 50%  bucket 10: 60%  bucket 11: 20%  bucket 10: 70%  bucket 11: 30%  bucket 10: 80%  bucket 11: 40%  bucket 10: 90%  bucket 11: 50%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  Sorting block time: 00:00:00  bucket 13: 40%Returning block of 83 for bucket 12  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  Entering block accumulator loop for bucket 15:  bucket 14: 60%  bucket 15: 10%  bucket 14: 70%  bucket 15: 20%  bucket 14: 80%  bucket 15: 30%  bucket 14: 90%  bucket 15: 40%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 16 of 60Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 17:  bucket 17: 10%  Entering block accumulator loop for bucket 16:  bucket 17: 20%  bucket 16: 10%  bucket 17: 30%  bucket 16: 20%  bucket 17: 40%  bucket 16: 30%  bucket 17: 50%  bucket 16: 40%  bucket 17: 60%  bucket 16: 50%  bucket 17: 70%  bucket 17: 80%  bucket 16: 60%  bucket 17: 90%  bucket 17: 100%  bucket 16: 70%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  bucket 21: 10%  Entering block accumulator loop for bucket 22:  bucket 21: 20%  bucket 22: 10%  bucket 21: 30%  bucket 21: 40%  bucket 22: 20%  bucket 21: 50%  bucket 22: 30%  bucket 21: 60%  bucket 22: 40%  bucket 21: 70%  bucket 22: 50%  bucket 21: 80%  bucket 22: 60%  bucket 21: 90%  bucket 22: 70%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 24:  bucket 24: 10%  Entering block accumulator loop for bucket 25:  bucket 24: 20%  bucket 24: 30%  bucket 25: 10%  bucket 24: 40%  bucket 25: 20%  bucket 24: 50%  bucket 24: 60%  bucket 25: 30%  bucket 24: 70%  bucket 25: 40%  bucket 24: 80%  bucket 24: 90%  bucket 25: 50%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 28:  Entering block accumulator loop for bucket 27:  bucket 28: 10%  bucket 27: 10%  bucket 28: 20%  bucket 27: 20%  bucket 27: 30%  bucket 28: 30%  bucket 27: 40%  bucket 28: 40%  bucket 27: 50%  bucket 27: 60%  bucket 28: 50%  bucket 27: 70%  bucket 28: 60%  bucket 27: 80%  bucket 28: 70%  bucket 27: 90%  bucket 28: 80%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Entering block accumulator loop for bucket 30:  Calculating Z arrays for bucket 31  bucket 30: 10%  Entering block accumulator loop for bucket 31:  bucket 30: 20%  bucket 31: 10%  bucket 30: 30%  bucket 31: 20%Getting block 32 of 60  bucket 30: 40%  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  bucket 31: 30%  bucket 30: 50%  bucket 31: 40%  Entering block accumulator loop for bucket 32:  bucket 30: 60%  bucket 31: 50%  bucket 30: 70%  bucket 32: 10%  bucket 31: 60%  bucket 30: 80%  bucket 32: 20%  bucket 31: 70%  bucket 30: 90%  bucket 32: 30%  bucket 31: 80%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 32: 40%  bucket 31: 90%  bucket 32: 50%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 33:  bucket 33: 10%  Entering block accumulator loop for bucket 34:  bucket 33: 20%  bucket 33: 30%  bucket 34: 10%  bucket 33: 40%  bucket 34: 20%  bucket 33: 50%  bucket 34: 30%  bucket 33: 60%  bucket 34: 40%  bucket 33: 70%  bucket 34: 50%  bucket 33: 80%  bucket 34: 60%  bucket 33: 90%  bucket 34: 70%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  bucket 35: 80%  bucket 35: 90%  Entering block accumulator loop for bucket 36:  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 36: 10%  bucket 36: 20%  bucket 36: 30%  bucket 36: 40%  bucket 36: 50%  bucket 36: 60%  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%  bucket 37: 20%  bucket 37: 30%  bucket 37: 40%  bucket 37: 50%  bucket 37: 60%  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38Getting block 39 of 60  Entering block accumulator loop for bucket 38:  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  bucket 38: 10%  Entering block accumulator loop for bucket 39:  bucket 38: 20%  bucket 38: 30%  bucket 39: 10%  bucket 38: 40%  bucket 38: 50%  bucket 39: 20%  bucket 38: 60%  bucket 39: 30%  bucket 38: 70%  bucket 39: 40%  bucket 38: 80%  bucket 39: 50%  bucket 38: 90%  bucket 39: 60%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 40:  bucket 40: 10%  Entering block accumulator loop for bucket 41:  bucket 40: 20%  bucket 41: 10%  bucket 40: 30%  bucket 40: 40%  bucket 41: 20%  bucket 40: 50%  bucket 41: 30%  bucket 40: 60%  bucket 41: 40%  bucket 40: 70%  bucket 41: 50%  bucket 40: 80%  bucket 40: 90%  bucket 41: 60%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  bucket 42: 10%  bucket 42: 20%  bucket 42: 30%  bucket 42: 40%  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%Getting block 44 of 60  bucket 43: 30%  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  bucket 43: 40%  bucket 43: 50%  Entering block accumulator loop for bucket 44:  bucket 43: 60%  bucket 43: 70%  bucket 44: 10%  bucket 43: 80%  bucket 44: 20%  bucket 43: 90%  bucket 44: 30%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 45:  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 45: 10%  bucket 46: 20%  bucket 45: 20%  bucket 46: 30%  bucket 46: 40%  bucket 45: 30%  bucket 46: 50%  bucket 46: 60%  bucket 45: 40%  bucket 46: 70%  bucket 46: 80%  bucket 45: 50%  bucket 46: 90%  bucket 46: 100%  bucket 45: 60%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48Getting block 49 of 60  Entering block accumulator loop for bucket 48:  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  bucket 48: 10%  bucket 48: 20%  Entering block accumulator loop for bucket 49:  bucket 48: 30%  bucket 49: 10%  bucket 48: 40%  bucket 49: 20%  bucket 48: 50%  bucket 49: 30%  bucket 48: 60%  bucket 49: 40%  bucket 48: 70%  bucket 49: 50%  bucket 48: 80%  bucket 49: 60%  bucket 48: 90%  bucket 49: 70%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 50:  bucket 50: 10%  Entering block accumulator loop for bucket 51:  bucket 50: 20%  bucket 51: 10%  bucket 50: 30%  bucket 51: 20%  bucket 50: 40%  bucket 51: 30%  bucket 50: 50%  bucket 51: 40%  bucket 50: 60%  bucket 51: 50%  bucket 50: 70%  bucket 51: 60%  bucket 50: 80%  bucket 51: 70%  bucket 50: 90%  bucket 51: 80%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 52:  bucket 52: 10%  bucket 52: 20%  bucket 52: 30%  bucket 52: 40%  bucket 52: 50%  bucket 52: 60%  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  bucket 53: 10%  bucket 53: 20%  Entering block accumulator loop for bucket 54:  bucket 53: 30%  bucket 54: 10%  bucket 53: 40%  bucket 54: 20%  bucket 53: 50%  bucket 54: 30%  bucket 53: 60%  bucket 54: 40%  bucket 53: 70%  bucket 54: 50%  bucket 53: 80%  bucket 53: 90%  bucket 54: 60%  bucket 53: 100%  bucket 54: 70%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 55:  bucket 55: 10%  Entering block accumulator loop for bucket 56:  bucket 55: 20%  bucket 56: 10%  bucket 55: 30%  bucket 56: 20%  bucket 55: 40%  bucket 56: 30%  bucket 55: 50%  bucket 56: 40%  bucket 55: 60%  bucket 56: 50%  bucket 55: 70%  bucket 56: 60%  bucket 55: 80%  bucket 56: 70%  bucket 55: 90%  bucket 56: 80%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  bucket 58: 20%  Entering block accumulator loop for bucket 59:  bucket 58: 30%  bucket 59: 10%  bucket 58: 40%  bucket 59: 20%  bucket 58: 50%  bucket 59: 30%  bucket 58: 60%  bucket 59: 40%  bucket 58: 70%  bucket 59: 50%  bucket 58: 80%  bucket 58: 90%  bucket 59: 60%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times85.80% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #5)" name="4" time="38.86097502708435">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60Getting block 2 of 60  Reserving size (126) for bucket 1Getting block 4 of 60  Reserving size (126) for bucket 4  Calculating Z arrays for bucket 1  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:Getting block 3 of 60  bucket 1: 10%Getting block 5 of 60  Entering block accumulator loop for bucket 2:  Reserving size (126) for bucket 5  Reserving size (126) for bucket 3  bucket 2: 10%  Entering block accumulator loop for bucket 4:  bucket 2: 20%Getting block 8 of 60  bucket 2: 30%  Calculating Z arrays for bucket 5  bucket 4: 10%  bucket 1: 20%  Reserving size (126) for bucket 8  bucket 2: 40%  bucket 1: 30%  bucket 4: 20%  bucket 2: 50%  Calculating Z arrays for bucket 8  bucket 1: 40%Getting block 7 of 60  Reserving size (126) for bucket 7  Calculating Z arrays for bucket 3  bucket 2: 60%  bucket 1: 50%  bucket 4: 30%Getting block 6 of 60  Reserving size (126) for bucket 6  Entering block accumulator loop for bucket 5:  Calculating Z arrays for bucket 7  bucket 2: 70%  bucket 1: 60%  bucket 4: 40%  bucket 1: 70%  Entering block accumulator loop for bucket 8:  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 3:  bucket 2: 80%  bucket 5: 10%  Entering block accumulator loop for bucket 6:  bucket 3: 10%  bucket 1: 80%  bucket 4: 50%  bucket 2: 90%  bucket 6: 10%  bucket 5: 20%  bucket 3: 20%  bucket 8: 10%  bucket 5: 30%  bucket 6: 20%  Entering block accumulator loop for bucket 7:  bucket 8: 20%  bucket 1: 90%  bucket 4: 60%  bucket 6: 30%  bucket 5: 40%  bucket 1: 100%  bucket 2: 100%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 4: 70%  bucket 3: 30%  bucket 6: 40%  bucket 8: 30%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 7: 10%  bucket 6: 50%  bucket 8: 40%  bucket 5: 50%  bucket 7: 20%  bucket 8: 50%  bucket 6: 60%  bucket 3: 40%  bucket 5: 60%  bucket 6: 70%  bucket 7: 30%  bucket 3: 50%  bucket 8: 60%  bucket 4: 80%  bucket 3: 60%  bucket 5: 70%  bucket 8: 70%  bucket 6: 80%  bucket 5: 80%  bucket 3: 70%  bucket 5: 90%  bucket 8: 80%  bucket 6: 90%  bucket 7: 40%  bucket 4: 90%  bucket 6: 100%  bucket 3: 80%  bucket 8: 90%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 5: 100%  bucket 3: 90%  bucket 8: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 3: 100%  Sorting block of length 94 for bucket 8  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 7: 50%  bucket 4: 100%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 7: 60%  (Using difference cover)  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 69 for bucket 4Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:Getting block 11 of 60  bucket 9: 10%  Reserving size (126) for bucket 11  Entering block accumulator loop for bucket 10:  bucket 9: 20%  Calculating Z arrays for bucket 11  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  Entering block accumulator loop for bucket 11:  bucket 9: 50%  bucket 10: 40%  bucket 11: 10%  bucket 9: 60%  bucket 10: 50%  bucket 11: 20%  bucket 10: 60%  bucket 9: 70%  bucket 11: 30%  bucket 10: 70%  bucket 9: 80%  bucket 11: 40%  bucket 10: 80%  bucket 9: 90%  bucket 11: 50%  bucket 10: 90%  bucket 9: 100%  bucket 11: 60%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 100%  bucket 11: 70%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 12:  bucket 13: 10%  bucket 13: 20%  bucket 12: 10%  bucket 13: 30%  bucket 12: 20%  bucket 13: 40%  bucket 12: 30%  bucket 13: 50%  bucket 12: 40%  bucket 13: 60%  bucket 12: 50%  bucket 13: 70%  bucket 12: 60%  bucket 13: 80%  bucket 12: 70%  bucket 13: 90%  bucket 12: 80%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 14 of 60  Reserving size (126) for bucket 14Getting block 15 of 60  Calculating Z arrays for bucket 14  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 14:  bucket 14: 10%  Entering block accumulator loop for bucket 15:  bucket 14: 20%  bucket 15: 10%  bucket 14: 30%  bucket 15: 20%  bucket 14: 40%  bucket 15: 30%  bucket 14: 50%  bucket 15: 40%  bucket 14: 60%  bucket 15: 50%  bucket 14: 70%  bucket 15: 60%  bucket 14: 80%  bucket 15: 70%  bucket 14: 90%  bucket 15: 80%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 16:  Entering block accumulator loop for bucket 17:  bucket 16: 10%  bucket 17: 10%  bucket 16: 20%  bucket 17: 20%  bucket 16: 30%  bucket 17: 30%  bucket 16: 40%  bucket 17: 40%  bucket 16: 50%  bucket 17: 50%  bucket 16: 60%  bucket 17: 60%  bucket 17: 70%  bucket 16: 70%  bucket 17: 80%  bucket 16: 80%  bucket 17: 90%  bucket 16: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 18:  bucket 18: 10%  Entering block accumulator loop for bucket 19:  bucket 18: 20%Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 10%  bucket 18: 30%  bucket 19: 20%  bucket 18: 40%  Entering block accumulator loop for bucket 20:  bucket 19: 30%  bucket 18: 50%  bucket 19: 40%  bucket 18: 60%  bucket 20: 10%  bucket 18: 70%  bucket 19: 50%  bucket 18: 80%  bucket 19: 60%  bucket 18: 90%  bucket 20: 20%  bucket 19: 70%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 80%  bucket 20: 30%  bucket 19: 90%  bucket 20: 40%  bucket 19: 100%  bucket 20: 50%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 22:  Entering block accumulator loop for bucket 23:  bucket 22: 10%  bucket 23: 10%  bucket 22: 20%  bucket 23: 20%  bucket 22: 30%  bucket 23: 30%  bucket 22: 40%  bucket 23: 40%  bucket 22: 50%  bucket 23: 50%  bucket 22: 60%  bucket 23: 60%  bucket 22: 70%  bucket 23: 70%  bucket 22: 80%  bucket 23: 80%  bucket 22: 90%  bucket 23: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  bucket 24: 10%  Entering block accumulator loop for bucket 25:  bucket 24: 20%  bucket 25: 10%  bucket 24: 30%  bucket 25: 20%  bucket 24: 40%  bucket 25: 30%  bucket 24: 50%  bucket 25: 40%  bucket 24: 60%  bucket 25: 50%  bucket 25: 60%  bucket 24: 70%  bucket 25: 70%  bucket 24: 80%  bucket 25: 80%  bucket 24: 90%  bucket 25: 90%  bucket 24: 100%  bucket 25: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 27:  Entering block accumulator loop for bucket 26:  bucket 27: 10%  bucket 26: 10%  bucket 27: 20%  bucket 26: 20%  bucket 27: 30%  bucket 26: 30%  bucket 27: 40%  bucket 26: 40%  bucket 27: 50%  bucket 26: 50%  bucket 27: 60%  bucket 26: 60%  bucket 27: 70%  bucket 26: 70%  bucket 27: 80%  bucket 26: 80%  bucket 27: 90%  bucket 26: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 28 of 60  Reserving size (126) for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 29: 10%  bucket 28: 20%  bucket 29: 20%  bucket 28: 30%  bucket 28: 40%  bucket 29: 30%  bucket 28: 50%  bucket 29: 40%  bucket 28: 60%  bucket 28: 70%  bucket 29: 50%  bucket 28: 80%  bucket 29: 60%  bucket 28: 90%  bucket 28: 100%  bucket 29: 70%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  bucket 30: 30%  bucket 30: 40%  Entering block accumulator loop for bucket 31:  bucket 30: 50%  bucket 31: 10%  bucket 30: 60%  bucket 31: 20%  bucket 30: 70%  bucket 31: 30%  bucket 30: 80%  bucket 31: 40%  bucket 30: 90%  bucket 31: 50%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  bucket 32: 20%  bucket 32: 30%  Entering block accumulator loop for bucket 33:  bucket 32: 40%  bucket 32: 50%  bucket 33: 10%  bucket 32: 60%  bucket 33: 20%  bucket 32: 70%  bucket 33: 30%  bucket 32: 80%  bucket 33: 40%  bucket 32: 90%  bucket 33: 50%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 34: 20%  bucket 34: 30%  bucket 34: 40%Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  bucket 34: 50%  bucket 34: 60%  bucket 34: 70%  Entering block accumulator loop for bucket 35:  bucket 34: 80%  bucket 34: 90%  bucket 35: 10%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  Sorting block time: 00:00:00Returning block of 123 for bucket 34  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 36:  Entering block accumulator loop for bucket 37:  bucket 36: 10%  bucket 37: 10%  bucket 36: 20%  bucket 37: 20%  bucket 36: 30%  bucket 36: 40%  bucket 37: 30%  bucket 36: 50%  bucket 37: 40%  bucket 36: 60%  bucket 36: 70%  bucket 37: 50%  bucket 36: 80%  bucket 37: 60%  bucket 36: 90%  bucket 37: 70%  bucket 36: 100%  Sorting block of length 120 for bucket 36  bucket 37: 80%  (Using difference cover)  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 38:  Entering block accumulator loop for bucket 39:  bucket 38: 10%  bucket 39: 10%  bucket 38: 20%  bucket 39: 20%  bucket 38: 30%  bucket 39: 30%  bucket 38: 40%  bucket 39: 40%  bucket 38: 50%  bucket 39: 50%  bucket 38: 60%  bucket 38: 70%  bucket 39: 60%  bucket 38: 80%  bucket 39: 70%  bucket 38: 90%  bucket 39: 80%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  bucket 40: 40%  bucket 40: 50%  Entering block accumulator loop for bucket 41:  bucket 40: 60%  bucket 41: 10%  bucket 40: 70%  bucket 41: 20%  bucket 40: 80%  bucket 41: 30%  bucket 40: 90%  bucket 41: 40%  bucket 40: 100%  bucket 41: 50%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 42:  bucket 42: 10%  Entering block accumulator loop for bucket 43:  bucket 42: 20%  bucket 43: 10%  bucket 42: 30%  bucket 43: 20%  bucket 42: 40%  bucket 43: 30%  bucket 42: 50%  bucket 43: 40%  bucket 42: 60%  bucket 43: 50%  bucket 43: 60%  bucket 42: 70%  bucket 43: 70%  bucket 43: 80%  bucket 42: 80%  bucket 43: 90%  bucket 42: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 46:  Entering block accumulator loop for bucket 45:  bucket 46: 10%  bucket 45: 10%  bucket 46: 20%  bucket 45: 20%  bucket 46: 30%  bucket 46: 40%  bucket 45: 30%  bucket 46: 50%  bucket 45: 40%  bucket 46: 60%  bucket 45: 50%  bucket 46: 70%  bucket 45: 60%  bucket 46: 80%  bucket 45: 70%  bucket 46: 90%  bucket 45: 80%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 47:  bucket 47: 10%  Entering block accumulator loop for bucket 48:  bucket 47: 20%  bucket 48: 10%  bucket 47: 30%  bucket 48: 20%  bucket 47: 40%  bucket 48: 30%  bucket 47: 50%  bucket 48: 40%  bucket 47: 60%  bucket 48: 50%  bucket 47: 70%  bucket 48: 60%  bucket 47: 80%  bucket 48: 70%  bucket 47: 90%  bucket 48: 80%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 51: 10%  bucket 51: 20%  bucket 51: 30%Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  bucket 51: 40%  bucket 51: 50%  Entering block accumulator loop for bucket 52:  bucket 51: 60%  bucket 52: 10%  bucket 51: 70%  bucket 52: 20%  bucket 51: 80%  bucket 52: 30%  bucket 51: 90%  bucket 52: 40%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  bucket 52: 50%  bucket 52: 60%  Entering block accumulator loop for bucket 53:  bucket 52: 70%  bucket 53: 10%  bucket 52: 80%  bucket 52: 90%  bucket 53: 20%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 53: 30%  Sorting block time: 00:00:00Returning block of 92 for bucket 51  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  Sorting block time: 00:00:00Returning block of 107 for bucket 52  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%Getting block 56 of 60  bucket 55: 40%  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  bucket 55: 50%  bucket 55: 60%  Entering block accumulator loop for bucket 56:  bucket 55: 70%  bucket 55: 80%  bucket 56: 10%  bucket 55: 90%  bucket 56: 20%  bucket 55: 100%  bucket 56: 30%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 57:  Entering block accumulator loop for bucket 58:  bucket 57: 10%  bucket 58: 10%  bucket 57: 20%  bucket 58: 20%  bucket 57: 30%  bucket 58: 30%  bucket 57: 40%  bucket 58: 40%  bucket 57: 50%  bucket 58: 50%  bucket 57: 60%  bucket 58: 60%  bucket 57: 70%  bucket 58: 70%  bucket 57: 80%  bucket 58: 80%  bucket 57: 90%  bucket 58: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 59  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  Entering block accumulator loop for bucket 59:  bucket 60: 10%  bucket 60: 20%  bucket 59: 10%  bucket 60: 30%  bucket 59: 20%  bucket 60: 40%  bucket 60: 50%  bucket 59: 30%  bucket 60: 60%  bucket 59: 40%  bucket 60: 70%  bucket 60: 80%  bucket 59: 50%  bucket 60: 90%  bucket 59: 60%  bucket 60: 100%  Sorting block of length 101 for bucket 60  bucket 59: 70%  (Using difference cover)  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times85.80% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #6)" name="5" time="9.910467386245728">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 5, "time_seconds": 9.910467386245728, "tool_id": "hisat2", "tool_version": "2.2.1+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #6)" name="5" time="24.659389972686768">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "adv|output_options|output_options_selector": "advanced",  "adv|output_options|unaligned_file": true,  "library|input_1": {   "id": "5cf28860c22f03e4",   "src": "hda"  },  "library|type": "single",  "reference_genome|history_item": {   "id": "542d8cb559ae7e9e",   "src": "hda"  },  "reference_genome|source": "history" }, "job": {  "command_line": "set -o pipefail;  ln -s \u0027/galaxy/server/database/objects/3/c/4/dataset_3c46390d-929c-428c-818e-5180dd561521.dat\u0027 genome.fa \u0026\u0026 hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome \u0026\u0026        ln -f -s \u0027/galaxy/server/database/objects/f/e/f/dataset_fef1cfc9-0495-4cf3-9af9-f6dbf01c0243.dat\u0027 input_f.fasta \u0026\u0026    hisat2  -p ${GALAXY_SLOTS:-1}  -x \u0027genome\u0027  -f    -U \u0027input_f.fasta\u0027  --un \u0027/galaxy/server/database/objects/a/6/e/dataset_a6e0be71-d9c3-46b7-952b-9d4096affd84.dat\u0027                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o \u0027/galaxy/server/database/objects/b/2/0/dataset_b20efa87-f4a3-41e0-a2a5-2257e084fdff.dat\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-10T07:10:17.996134",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-tlrkx",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "51022dda2f0df2f2",  "inputs": {   "library|input_1": {    "id": "5cf28860c22f03e4",    "src": "hda",    "uuid": "fef1cfc9-0495-4cf3-9af9-f6dbf01c0243"   },   "reference_genome|history_item": {    "id": "542d8cb559ae7e9e",    "src": "hda",    "uuid": "3c46390d-929c-428c-818e-5180dd561521"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_alignments": {    "id": "d62dc5f93122a118",    "src": "hda",    "uuid": "b20efa87-f4a3-41e0-a2a5-2257e084fdff"   },   "output_unaligned_reads_l": {    "id": "7b795eda2c816479",    "src": "hda",    "uuid": "a6e0be71-d9c3-46b7-952b-9d4096affd84"   }  },  "params": {   "__input_ext": "\"input\"",   "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 1, \"aligned_file\": false, \"output_options_selector\": \"advanced\", \"unaligned_file\": true}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 282, \"src\": \"hda\"}]}, \"rna_strandness\": \"\", \"type\": \"single\"}",   "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 281, \"src\": \"hda\"}]}, \"source\": \"history\"}",   "sum": "{\"new_summary\": false, \"summary_file\": false}"  },  "state": "error",  "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n3 reads; of these:\n  3 (100.00%) were unpaired; of these:\n    3 (100.00%) aligned 0 times\n    0 (0.00%) aligned exactly 1 time\n    0 (0.00%) aligned \u003e1 times\n0.00% overall alignment rate\n",  "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 1\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 60\n  bucket 1: 10%\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 3:\nGetting block 5 of 60\n  bucket 3: 10%\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 40%\n  bucket 3: 30%\n  Calculating Z arrays for bucket 5\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 3: 40%\n  bucket 4: 20%\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 2: 10%\n  bucket 1: 60%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 5: 10%\n  bucket 2: 20%\n  Calculating Z arrays for bucket 7\n  bucket 4: 50%\n  bucket 1: 70%\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 60%\n  bucket 1: 80%\n  Entering block accumulator loop for bucket 6:\n  Reserving size (126) for bucket 8\n  bucket 1: 90%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 1: 100%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 4: 80%\n  Sorting block of length 42 for bucket 1\n  bucket 2: 30%\n  (Using difference cover)\n  bucket 5: 20%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 4: 90%\n  Calculating Z arrays for bucket 8\n  bucket 3: 80%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 4: 100%\n  bucket 6: 40%\n  Sorting block of length 68 for bucket 4\n  bucket 3: 90%\n  bucket 2: 40%\n  (Using difference cover)\n  bucket 6: 50%\n  bucket 3: 100%\n  bucket 2: 50%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 7: 40%\n  bucket 6: 60%\n  bucket 2: 60%\n  bucket 5: 40%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 2: 70%\n  bucket 6: 80%\n  bucket 5: 50%\n  bucket 2: 80%\n  bucket 6: 90%\n  bucket 7: 60%\n  bucket 5: 60%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 7: 70%\n  bucket 5: 70%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 7: 80%\n  bucket 5: 90%\n  bucket 7: 90%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Entering block accumulator loop for bucket 10:\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  bucket 12: 90%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 13 of 60\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 14: 60%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 70%\n  bucket 15: 80%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 90%\n  bucket 16: 10%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  (Using difference cover)\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 19: 20%\n  bucket 18: 10%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 18: 20%\n  bucket 19: 50%\n  bucket 18: 30%\n  bucket 19: 60%\n  bucket 18: 40%\n  bucket 19: 70%\n  bucket 18: 50%\n  bucket 19: 80%\n  bucket 18: 60%\n  bucket 19: 90%\n  bucket 18: 70%\n  bucket 19: 100%\n  bucket 18: 80%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 20: 90%\n  bucket 21: 80%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Entering block accumulator loop for bucket 22:\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  bucket 22: 20%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 30%\n  bucket 23: 10%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 23: 20%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 23: 30%\n  bucket 22: 80%\n  bucket 23: 40%\n  bucket 22: 90%\n  bucket 23: 50%\n  bucket 22: 100%\n  bucket 23: 60%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 26: 40%\n  bucket 27: 30%\n  bucket 26: 50%\n  bucket 27: 40%\n  bucket 26: 60%\n  bucket 27: 50%\n  bucket 26: 70%\n  bucket 27: 60%\n  bucket 26: 80%\n  bucket 27: 70%\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 26: 100%\n  bucket 27: 90%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Calculating Z arrays for bucket 29\n  bucket 28: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 29: 80%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 31: 10%\n  bucket 30: 20%\n  bucket 31: 20%\n  bucket 30: 30%\n  bucket 31: 30%\n  bucket 30: 40%\n  bucket 31: 40%\n  bucket 30: 50%\n  bucket 31: 50%\n  bucket 30: 60%\n  bucket 31: 60%\n  bucket 30: 70%\n  bucket 31: 70%\n  bucket 30: 80%\n  bucket 31: 80%\n  bucket 30: 90%\n  bucket 31: 90%\n  bucket 30: 100%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 20%\n  bucket 34: 10%\n  bucket 33: 30%\n  bucket 34: 20%\n  bucket 33: 40%\n  bucket 34: 30%\n  bucket 33: 50%\n  bucket 34: 40%\n  bucket 33: 60%\n  bucket 34: 50%\n  bucket 33: 70%\n  bucket 34: 60%\n  bucket 33: 80%\n  bucket 34: 70%\n  bucket 33: 90%\n  bucket 34: 80%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Entering block accumulator loop for bucket 35:\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 10%\n  bucket 35: 20%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 30%\n  bucket 36: 10%\n  bucket 35: 40%\n  bucket 36: 20%\n  bucket 35: 50%\n  bucket 36: 30%\n  bucket 35: 60%\n  bucket 36: 40%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 36: 50%\n  bucket 35: 90%\n  bucket 36: 60%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 10%\n  bucket 39: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 38: 50%\n  bucket 39: 50%\n  bucket 38: 60%\n  bucket 39: 60%\n  bucket 38: 70%\n  bucket 39: 70%\n  bucket 38: 80%\n  bucket 39: 80%\n  bucket 38: 90%\n  bucket 39: 90%\n  bucket 38: 100%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 40:\n  bucket 41: 10%\n  bucket 40: 10%\n  bucket 41: 20%\n  bucket 40: 20%\n  bucket 41: 30%\n  bucket 40: 30%\n  bucket 41: 40%\n  bucket 40: 40%\n  bucket 41: 50%\n  bucket 40: 50%\n  bucket 41: 60%\n  bucket 40: 60%\n  bucket 41: 70%\n  bucket 40: 70%\n  bucket 41: 80%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 41: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\nGetting block 44 of 60\n  bucket 43: 10%\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 20%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 30%\n  bucket 44: 10%\n  bucket 43: 40%\n  bucket 44: 20%\n  bucket 43: 50%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 43: 60%\n  bucket 44: 50%\n  bucket 43: 70%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 43: 80%\n  bucket 44: 80%\n  bucket 43: 90%\n  bucket 44: 90%\n  bucket 44: 100%\n  bucket 43: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\nGetting block 46 of 60\n  bucket 45: 40%\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 50%\n  bucket 45: 60%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 70%\n  bucket 46: 10%\n  bucket 45: 80%\n  bucket 46: 20%\n  bucket 45: 90%\n  bucket 46: 30%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 60%\n  bucket 47: 70%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 48: 10%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\nGetting block 51 of 60\n  Reserving size (126) for bucket 50\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 50:\n  bucket 51: 10%\n  bucket 50: 10%\n  bucket 51: 20%\n  bucket 50: 20%\n  bucket 51: 30%\n  bucket 50: 30%\n  bucket 51: 40%\n  bucket 50: 40%\n  bucket 51: 50%\n  bucket 50: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 50: 60%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 53 of 60\n  Entering block accumulator loop for bucket 52:\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  bucket 52: 10%\n  bucket 52: 20%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 30%\n  bucket 53: 10%\n  bucket 52: 40%\n  bucket 53: 20%\n  bucket 52: 50%\n  bucket 53: 30%\n  bucket 52: 60%\n  bucket 53: 40%\n  bucket 52: 70%\n  bucket 53: 50%\n  bucket 52: 80%\n  bucket 53: 60%\n  bucket 52: 90%\n  bucket 53: 70%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 20%\n  bucket 56: 10%\n  bucket 55: 30%\n  bucket 56: 20%\n  bucket 55: 40%\n  bucket 56: 30%\n  bucket 55: 50%\n  bucket 56: 40%\n  bucket 55: 60%\n  bucket 56: 50%\n  bucket 55: 70%\n  bucket 56: 60%\n  bucket 55: 80%\n  bucket 56: 70%\n  bucket 55: 90%\n  bucket 56: 80%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 57:\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 10%\n  bucket 58: 10%\n  bucket 57: 20%\n  bucket 58: 20%\n  bucket 57: 30%\n  bucket 58: 30%\n  bucket 57: 40%\n  bucket 58: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 58: 50%\n  bucket 57: 70%\n  bucket 58: 60%\n  bucket 57: 80%\n  bucket 58: 70%\n  bucket 57: 90%\n  bucket 58: 80%\n  bucket 57: 100%\n  bucket 58: 90%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1",  "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n3 reads; of these:\n  3 (100.00%) were unpaired; of these:\n    3 (100.00%) aligned 0 times\n    0 (0.00%) aligned exactly 1 time\n    0 (0.00%) aligned \u003e1 times\n0.00% overall alignment rate\n",  "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 1\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 60\n  bucket 1: 10%\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 3:\nGetting block 5 of 60\n  bucket 3: 10%\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 40%\n  bucket 3: 30%\n  Calculating Z arrays for bucket 5\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 3: 40%\n  bucket 4: 20%\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 2: 10%\n  bucket 1: 60%\n  bucket 4: 40%\n  bucket 3: 60%\n  bucket 5: 10%\n  bucket 2: 20%\n  Calculating Z arrays for bucket 7\n  bucket 4: 50%\n  bucket 1: 70%\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 60%\n  bucket 1: 80%\n  Entering block accumulator loop for bucket 6:\n  Reserving size (126) for bucket 8\n  bucket 1: 90%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 1: 100%\n  bucket 6: 10%\n  bucket 7: 10%\n  bucket 4: 80%\n  Sorting block of length 42 for bucket 1\n  bucket 2: 30%\n  (Using difference cover)\n  bucket 5: 20%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 4: 90%\n  Calculating Z arrays for bucket 8\n  bucket 3: 80%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 4: 100%\n  bucket 6: 40%\n  Sorting block of length 68 for bucket 4\n  bucket 3: 90%\n  bucket 2: 40%\n  (Using difference cover)\n  bucket 6: 50%\n  bucket 3: 100%\n  bucket 2: 50%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 7: 40%\n  bucket 6: 60%\n  bucket 2: 60%\n  bucket 5: 40%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 2: 70%\n  bucket 6: 80%\n  bucket 5: 50%\n  bucket 2: 80%\n  bucket 6: 90%\n  bucket 7: 60%\n  bucket 5: 60%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 7: 70%\n  bucket 5: 70%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 7: 80%\n  bucket 5: 90%\n  bucket 7: 90%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Entering block accumulator loop for bucket 10:\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  bucket 12: 30%\n  bucket 11: 50%\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 11: 70%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  bucket 12: 90%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 13 of 60\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 14: 60%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 70%\n  bucket 15: 80%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 90%\n  bucket 16: 10%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  (Using difference cover)\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 19: 20%\n  bucket 18: 10%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 18: 20%\n  bucket 19: 50%\n  bucket 18: 30%\n  bucket 19: 60%\n  bucket 18: 40%\n  bucket 19: 70%\n  bucket 18: 50%\n  bucket 19: 80%\n  bucket 18: 60%\n  bucket 19: 90%\n  bucket 18: 70%\n  bucket 19: 100%\n  bucket 18: 80%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 20: 90%\n  bucket 21: 80%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Entering block accumulator loop for bucket 22:\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  bucket 22: 20%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 30%\n  bucket 23: 10%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 23: 20%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 23: 30%\n  bucket 22: 80%\n  bucket 23: 40%\n  bucket 22: 90%\n  bucket 23: 50%\n  bucket 22: 100%\n  bucket 23: 60%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 26: 40%\n  bucket 27: 30%\n  bucket 26: 50%\n  bucket 27: 40%\n  bucket 26: 60%\n  bucket 27: 50%\n  bucket 26: 70%\n  bucket 27: 60%\n  bucket 26: 80%\n  bucket 27: 70%\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 26: 100%\n  bucket 27: 90%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Calculating Z arrays for bucket 29\n  bucket 28: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 29: 80%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 31: 10%\n  bucket 30: 20%\n  bucket 31: 20%\n  bucket 30: 30%\n  bucket 31: 30%\n  bucket 30: 40%\n  bucket 31: 40%\n  bucket 30: 50%\n  bucket 31: 50%\n  bucket 30: 60%\n  bucket 31: 60%\n  bucket 30: 70%\n  bucket 31: 70%\n  bucket 30: 80%\n  bucket 31: 80%\n  bucket 30: 90%\n  bucket 31: 90%\n  bucket 30: 100%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 20%\n  bucket 34: 10%\n  bucket 33: 30%\n  bucket 34: 20%\n  bucket 33: 40%\n  bucket 34: 30%\n  bucket 33: 50%\n  bucket 34: 40%\n  bucket 33: 60%\n  bucket 34: 50%\n  bucket 33: 70%\n  bucket 34: 60%\n  bucket 33: 80%\n  bucket 34: 70%\n  bucket 33: 90%\n  bucket 34: 80%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Entering block accumulator loop for bucket 35:\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 10%\n  bucket 35: 20%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 30%\n  bucket 36: 10%\n  bucket 35: 40%\n  bucket 36: 20%\n  bucket 35: 50%\n  bucket 36: 30%\n  bucket 35: 60%\n  bucket 36: 40%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 36: 50%\n  bucket 35: 90%\n  bucket 36: 60%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 10%\n  bucket 39: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 38: 50%\n  bucket 39: 50%\n  bucket 38: 60%\n  bucket 39: 60%\n  bucket 38: 70%\n  bucket 39: 70%\n  bucket 38: 80%\n  bucket 39: 80%\n  bucket 38: 90%\n  bucket 39: 90%\n  bucket 38: 100%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 40:\n  bucket 41: 10%\n  bucket 40: 10%\n  bucket 41: 20%\n  bucket 40: 20%\n  bucket 41: 30%\n  bucket 40: 30%\n  bucket 41: 40%\n  bucket 40: 40%\n  bucket 41: 50%\n  bucket 40: 50%\n  bucket 41: 60%\n  bucket 40: 60%\n  bucket 41: 70%\n  bucket 40: 70%\n  bucket 41: 80%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 41: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\nGetting block 44 of 60\n  bucket 43: 10%\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 20%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 30%\n  bucket 44: 10%\n  bucket 43: 40%\n  bucket 44: 20%\n  bucket 43: 50%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 43: 60%\n  bucket 44: 50%\n  bucket 43: 70%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 43: 80%\n  bucket 44: 80%\n  bucket 43: 90%\n  bucket 44: 90%\n  bucket 44: 100%\n  bucket 43: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\nGetting block 46 of 60\n  bucket 45: 40%\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 50%\n  bucket 45: 60%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 70%\n  bucket 46: 10%\n  bucket 45: 80%\n  bucket 46: 20%\n  bucket 45: 90%\n  bucket 46: 30%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 60%\n  bucket 47: 70%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 48: 10%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\nGetting block 51 of 60\n  Reserving size (126) for bucket 50\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 50:\n  bucket 51: 10%\n  bucket 50: 10%\n  bucket 51: 20%\n  bucket 50: 20%\n  bucket 51: 30%\n  bucket 50: 30%\n  bucket 51: 40%\n  bucket 50: 40%\n  bucket 51: 50%\n  bucket 50: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 50: 60%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 53 of 60\n  Entering block accumulator loop for bucket 52:\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  bucket 52: 10%\n  bucket 52: 20%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 30%\n  bucket 53: 10%\n  bucket 52: 40%\n  bucket 53: 20%\n  bucket 52: 50%\n  bucket 53: 30%\n  bucket 52: 60%\n  bucket 53: 40%\n  bucket 52: 70%\n  bucket 53: 50%\n  bucket 52: 80%\n  bucket 53: 60%\n  bucket 52: 90%\n  bucket 53: 70%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 20%\n  bucket 56: 10%\n  bucket 55: 30%\n  bucket 56: 20%\n  bucket 55: 40%\n  bucket 56: 30%\n  bucket 55: 50%\n  bucket 56: 40%\n  bucket 55: 60%\n  bucket 56: 50%\n  bucket 55: 70%\n  bucket 56: 60%\n  bucket 55: 80%\n  bucket 56: 70%\n  bucket 55: 90%\n  bucket 56: 80%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 57:\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 10%\n  bucket 58: 10%\n  bucket 57: 20%\n  bucket 58: 20%\n  bucket 57: 30%\n  bucket 58: 30%\n  bucket 57: 40%\n  bucket 58: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 58: 50%\n  bucket 57: 70%\n  bucket 58: 60%\n  bucket 57: 80%\n  bucket 58: 70%\n  bucket 57: 90%\n  bucket 58: 80%\n  bucket 57: 100%\n  bucket 58: 90%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n",  "update_time": "2025-01-10T07:10:22.971332",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1, exit_code: None, stderr: Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n3 reads; of these:\n  3 (100.00%) were unpaired; of these:\n    3 (100.00%) aligned 0 times\n    0 (0.00%) aligned exactly 1 time\n    0 (0.00%) aligned \u003e1 times\n0.00% overall alignment rate\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1, exit_code: None, stderr: Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n3 reads; of these:\n  3 (100.00%) were unpaired; of these:\n    3 (100.00%) aligned 0 times\n    0 (0.00%) aligned exactly 1 time\n    0 (0.00%) aligned \u003e1 times\n0.00% overall alignment rate\n." ], "status": "failure", "test_index": 5, "time_seconds": 24.659389972686768, "tool_id": "hisat2", "tool_version": "2.2.1+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60Getting block 2 of 60  Reserving size (126) for bucket 1  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2Getting block 3 of 60  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 3  Entering block accumulator loop for bucket 1:Getting block 4 of 60  bucket 1: 10%  Reserving size (126) for bucket 4  Entering block accumulator loop for bucket 3:Getting block 5 of 60  bucket 3: 10%  Calculating Z arrays for bucket 4  bucket 1: 20%Getting block 6 of 60  Reserving size (126) for bucket 6  bucket 3: 20%  Entering block accumulator loop for bucket 4:  bucket 1: 30%  Reserving size (126) for bucket 5  Entering block accumulator loop for bucket 2:  bucket 1: 40%  bucket 3: 30%  Calculating Z arrays for bucket 5Getting block 7 of 60  Reserving size (126) for bucket 7  bucket 4: 10%  bucket 1: 50%  bucket 3: 40%  bucket 4: 20%  Calculating Z arrays for bucket 6  Entering block accumulator loop for bucket 5:  bucket 4: 30%  bucket 3: 50%  bucket 2: 10%  bucket 1: 60%  bucket 4: 40%  bucket 3: 60%  bucket 5: 10%  bucket 2: 20%  Calculating Z arrays for bucket 7  bucket 4: 50%  bucket 1: 70%Getting block 8 of 60  Entering block accumulator loop for bucket 7:  bucket 4: 60%  bucket 1: 80%  Entering block accumulator loop for bucket 6:  Reserving size (126) for bucket 8  bucket 1: 90%  bucket 4: 70%  bucket 3: 70%  bucket 1: 100%  bucket 6: 10%  bucket 7: 10%  bucket 4: 80%  Sorting block of length 42 for bucket 1  bucket 2: 30%  (Using difference cover)  bucket 5: 20%  bucket 7: 20%  bucket 6: 20%  bucket 4: 90%  Calculating Z arrays for bucket 8  bucket 3: 80%  bucket 5: 30%  bucket 6: 30%  bucket 7: 30%  bucket 4: 100%  bucket 6: 40%  Sorting block of length 68 for bucket 4  bucket 3: 90%  bucket 2: 40%  (Using difference cover)  bucket 6: 50%  bucket 3: 100%  bucket 2: 50%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 7: 40%  bucket 6: 60%  bucket 2: 60%  bucket 5: 40%  bucket 6: 70%  bucket 7: 50%  bucket 2: 70%  bucket 6: 80%  bucket 5: 50%  bucket 2: 80%  bucket 6: 90%  bucket 7: 60%  bucket 5: 60%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 2: 90%  bucket 7: 70%  bucket 5: 70%  bucket 2: 100%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 5: 80%  bucket 7: 80%  bucket 5: 90%  bucket 7: 90%  bucket 5: 100%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 64 for bucket 5Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Entering block accumulator loop for bucket 10:  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 11:  bucket 11: 10%  Entering block accumulator loop for bucket 12:  bucket 11: 20%  bucket 12: 10%  bucket 11: 30%  bucket 12: 20%  bucket 11: 40%  bucket 12: 30%  bucket 11: 50%  bucket 12: 40%  bucket 11: 60%  bucket 12: 50%  bucket 11: 70%  bucket 12: 60%  bucket 11: 80%  bucket 12: 70%  bucket 11: 90%  bucket 12: 80%  bucket 11: 100%  bucket 12: 90%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 13 of 60Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  Entering block accumulator loop for bucket 14:  bucket 13: 10%  bucket 13: 20%  bucket 14: 10%  bucket 13: 30%  bucket 13: 40%  bucket 14: 20%  bucket 13: 50%  bucket 13: 60%  bucket 14: 30%  bucket 13: 70%  bucket 14: 40%  bucket 13: 80%  bucket 14: 50%  bucket 13: 90%  bucket 14: 60%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  bucket 15: 70%  bucket 15: 80%  Entering block accumulator loop for bucket 16:  bucket 15: 90%  bucket 16: 10%  bucket 15: 100%  Sorting block of length 68 for bucket 15  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  (Using difference cover)  bucket 16: 50%  bucket 16: 60%  bucket 16: 70%  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  bucket 17: 20%  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 18 of 60Getting block 19 of 60  Reserving size (126) for bucket 19  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  Entering block accumulator loop for bucket 18:  bucket 19: 20%  bucket 18: 10%  bucket 19: 30%  bucket 19: 40%  bucket 18: 20%  bucket 19: 50%  bucket 18: 30%  bucket 19: 60%  bucket 18: 40%  bucket 19: 70%  bucket 18: 50%  bucket 19: 80%  bucket 18: 60%  bucket 19: 90%  bucket 18: 70%  bucket 19: 100%  bucket 18: 80%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 20:  bucket 20: 10%  Entering block accumulator loop for bucket 21:  bucket 20: 20%  bucket 21: 10%  bucket 20: 30%  bucket 21: 20%  bucket 20: 40%  bucket 21: 30%  bucket 20: 50%  bucket 21: 40%  bucket 20: 60%  bucket 21: 50%  bucket 20: 70%  bucket 21: 60%  bucket 20: 80%  bucket 21: 70%  bucket 20: 90%  bucket 21: 80%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 60  Entering block accumulator loop for bucket 22:  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  bucket 22: 10%  bucket 22: 20%  Entering block accumulator loop for bucket 23:  bucket 22: 30%  bucket 23: 10%  bucket 22: 40%  bucket 22: 50%  bucket 23: 20%  bucket 22: 60%  bucket 22: 70%  bucket 23: 30%  bucket 22: 80%  bucket 23: 40%  bucket 22: 90%  bucket 23: 50%  bucket 22: 100%  bucket 23: 60%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block time: 00:00:00  Sorting block of length 66 for bucket 25  (Using difference cover)Returning block of 69 for bucket 24  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 26:  bucket 26: 10%  Entering block accumulator loop for bucket 27:  bucket 26: 20%  bucket 27: 10%  bucket 26: 30%  bucket 27: 20%  bucket 26: 40%  bucket 27: 30%  bucket 26: 50%  bucket 27: 40%  bucket 26: 60%  bucket 27: 50%  bucket 26: 70%  bucket 27: 60%  bucket 26: 80%  bucket 27: 70%  bucket 26: 90%  bucket 27: 80%  bucket 26: 100%  bucket 27: 90%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Entering block accumulator loop for bucket 28:  Calculating Z arrays for bucket 29  bucket 28: 10%  Entering block accumulator loop for bucket 29:  bucket 28: 20%  bucket 29: 10%  bucket 28: 30%  bucket 29: 20%  bucket 28: 40%  bucket 29: 30%  bucket 28: 50%  bucket 29: 40%  bucket 28: 60%  bucket 29: 50%  bucket 28: 70%  bucket 29: 60%  bucket 28: 80%  bucket 29: 70%  bucket 28: 90%  bucket 29: 80%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 30:  Entering block accumulator loop for bucket 31:  bucket 30: 10%  bucket 31: 10%  bucket 30: 20%  bucket 31: 20%  bucket 30: 30%  bucket 31: 30%  bucket 30: 40%  bucket 31: 40%  bucket 30: 50%  bucket 31: 50%  bucket 30: 60%  bucket 31: 60%  bucket 30: 70%  bucket 31: 70%  bucket 30: 80%  bucket 31: 80%  bucket 30: 90%  bucket 31: 90%  bucket 30: 100%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%  bucket 32: 20%  bucket 32: 30%  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 33:  bucket 33: 10%  Entering block accumulator loop for bucket 34:  bucket 33: 20%  bucket 34: 10%  bucket 33: 30%  bucket 34: 20%  bucket 33: 40%  bucket 34: 30%  bucket 33: 50%  bucket 34: 40%  bucket 33: 60%  bucket 34: 50%  bucket 33: 70%  bucket 34: 60%  bucket 33: 80%  bucket 34: 70%  bucket 33: 90%  bucket 34: 80%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35Getting block 36 of 60  Entering block accumulator loop for bucket 35:  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  bucket 35: 10%  bucket 35: 20%  Entering block accumulator loop for bucket 36:  bucket 35: 30%  bucket 36: 10%  bucket 35: 40%  bucket 36: 20%  bucket 35: 50%  bucket 36: 30%  bucket 35: 60%  bucket 36: 40%  bucket 35: 70%  bucket 35: 80%  bucket 36: 50%  bucket 35: 90%  bucket 36: 60%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%  bucket 37: 20%  bucket 37: 30%  bucket 37: 40%  bucket 37: 50%  bucket 37: 60%  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 38:  Entering block accumulator loop for bucket 39:  bucket 38: 10%  bucket 39: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 39: 20%  bucket 39: 30%  bucket 39: 40%  bucket 38: 50%  bucket 39: 50%  bucket 38: 60%  bucket 39: 60%  bucket 38: 70%  bucket 39: 70%  bucket 38: 80%  bucket 39: 80%  bucket 38: 90%  bucket 39: 90%  bucket 38: 100%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 41:  Entering block accumulator loop for bucket 40:  bucket 41: 10%  bucket 40: 10%  bucket 41: 20%  bucket 40: 20%  bucket 41: 30%  bucket 40: 30%  bucket 41: 40%  bucket 40: 40%  bucket 41: 50%  bucket 40: 50%  bucket 41: 60%  bucket 40: 60%  bucket 41: 70%  bucket 40: 70%  bucket 41: 80%  bucket 40: 80%  bucket 40: 90%  bucket 41: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  bucket 42: 10%  bucket 42: 20%  bucket 42: 30%  bucket 42: 40%  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:Getting block 44 of 60  bucket 43: 10%  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  bucket 43: 20%  Entering block accumulator loop for bucket 44:  bucket 43: 30%  bucket 44: 10%  bucket 43: 40%  bucket 44: 20%  bucket 43: 50%  bucket 44: 30%  bucket 44: 40%  bucket 43: 60%  bucket 44: 50%  bucket 43: 70%  bucket 44: 60%  bucket 44: 70%  bucket 43: 80%  bucket 44: 80%  bucket 43: 90%  bucket 44: 90%  bucket 44: 100%  bucket 43: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%Getting block 46 of 60  bucket 45: 40%  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  bucket 45: 50%  bucket 45: 60%  Entering block accumulator loop for bucket 46:  bucket 45: 70%  bucket 46: 10%  bucket 45: 80%  bucket 46: 20%  bucket 45: 90%  bucket 46: 30%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45  Sorting block time: 00:00:00Returning block of 70 for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  bucket 47: 60%  bucket 47: 70%  Entering block accumulator loop for bucket 48:  bucket 47: 80%  bucket 47: 90%  bucket 48: 10%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  Sorting block time: 00:00:00Returning block of 84 for bucket 47  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60Getting block 51 of 60  Reserving size (126) for bucket 50  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 51:  Entering block accumulator loop for bucket 50:  bucket 51: 10%  bucket 50: 10%  bucket 51: 20%  bucket 50: 20%  bucket 51: 30%  bucket 50: 30%  bucket 51: 40%  bucket 50: 40%  bucket 51: 50%  bucket 50: 50%  bucket 51: 60%  bucket 51: 70%  bucket 50: 60%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52Getting block 53 of 60  Entering block accumulator loop for bucket 52:  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  bucket 52: 10%  bucket 52: 20%  Entering block accumulator loop for bucket 53:  bucket 52: 30%  bucket 53: 10%  bucket 52: 40%  bucket 53: 20%  bucket 52: 50%  bucket 53: 30%  bucket 52: 60%  bucket 53: 40%  bucket 52: 70%  bucket 53: 50%  bucket 52: 80%  bucket 53: 60%  bucket 52: 90%  bucket 53: 70%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 54:  bucket 54: 10%  bucket 54: 20%  bucket 54: 30%  bucket 54: 40%  bucket 54: 50%  bucket 54: 60%  bucket 54: 70%  bucket 54: 80%  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 55:  bucket 55: 10%  Entering block accumulator loop for bucket 56:  bucket 55: 20%  bucket 56: 10%  bucket 55: 30%  bucket 56: 20%  bucket 55: 40%  bucket 56: 30%  bucket 55: 50%  bucket 56: 40%  bucket 55: 60%  bucket 56: 50%  bucket 55: 70%  bucket 56: 60%  bucket 55: 80%  bucket 56: 70%  bucket 55: 90%  bucket 56: 80%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 57:  Entering block accumulator loop for bucket 58:  bucket 57: 10%  bucket 58: 10%  bucket 57: 20%  bucket 58: 20%  bucket 57: 30%  bucket 58: 30%  bucket 57: 40%  bucket 58: 40%  bucket 57: 50%  bucket 57: 60%  bucket 58: 50%  bucket 57: 70%  bucket 58: 60%  bucket 57: 80%  bucket 58: 70%  bucket 57: 90%  bucket 58: 80%  bucket 57: 100%  bucket 58: 90%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 59:  bucket 59: 10%  bucket 59: 20%  bucket 59: 30%  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:013 reads; of these:  3 (100.00%) were unpaired; of these:    3 (100.00%) aligned 0 times    0 (0.00%) aligned exactly 1 time    0 (0.00%) aligned >1 times0.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #7)" name="6" time="32.19278144836426">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:Getting block 3 of 60  Reserving size (126) for bucket 3Getting block 4 of 60  Entering block accumulator loop for bucket 2:  Reserving size (126) for bucket 4  Calculating Z arrays for bucket 3  bucket 1: 10%Getting block 5 of 60  Reserving size (126) for bucket 5  Calculating Z arrays for bucket 4  bucket 2: 10%  bucket 1: 20%  Entering block accumulator loop for bucket 3:  bucket 1: 30%  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 4:  bucket 1: 40%  bucket 3: 10%  bucket 1: 50%  bucket 2: 20%  Entering block accumulator loop for bucket 5:  bucket 4: 10%Getting block 6 of 60  bucket 1: 60%  bucket 5: 10%  bucket 3: 20%  bucket 2: 30%  bucket 5: 20%  bucket 3: 30%  bucket 4: 20%  Reserving size (126) for bucket 6  bucket 3: 40%  bucket 4: 30%Getting block 7 of 60  bucket 2: 40%  Calculating Z arrays for bucket 6  bucket 3: 50%  bucket 5: 30%  bucket 2: 50%  bucket 4: 40%  bucket 5: 40%  Entering block accumulator loop for bucket 6:  bucket 2: 60%  bucket 5: 50%  Reserving size (126) for bucket 7  bucket 6: 10%  bucket 1: 70%  bucket 6: 20%  bucket 2: 70%  Calculating Z arrays for bucket 7  bucket 3: 60%  bucket 5: 60%  bucket 1: 80%  bucket 6: 30%  bucket 4: 50%  bucket 2: 80%  bucket 6: 40%  bucket 3: 70%  Entering block accumulator loop for bucket 7:  bucket 6: 50%  bucket 5: 70%  bucket 2: 90%  bucket 4: 60%  bucket 3: 80%  bucket 5: 80%  bucket 7: 10%  bucket 6: 60%  bucket 4: 70%  bucket 7: 20%  bucket 6: 70%  bucket 1: 90%Getting block 8 of 60  bucket 6: 80%  bucket 7: 30%  bucket 2: 100%  bucket 6: 90%  bucket 1: 100%  bucket 3: 90%  Sorting block of length 42 for bucket 1  (Using difference cover)  Sorting block of length 84 for bucket 2  bucket 7: 40%  Reserving size (126) for bucket 8  bucket 6: 100%  (Using difference cover)  bucket 3: 100%  bucket 5: 90%  Sorting block of length 90 for bucket 6  (Using difference cover)  Sorting block of length 106 for bucket 3  bucket 5: 100%  (Using difference cover)  Calculating Z arrays for bucket 8  Sorting block of length 63 for bucket 5  bucket 7: 50%  (Using difference cover)  bucket 4: 80%  bucket 7: 60%  bucket 4: 90%  bucket 7: 70%  bucket 7: 80%  bucket 4: 100%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 7: 90%  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  Entering block accumulator loop for bucket 8:  bucket 8: 10%  bucket 8: 20%  bucket 8: 30%  bucket 8: 40%  bucket 8: 50%  bucket 8: 60%  bucket 8: 70%  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 107 for bucket 3Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  bucket 9: 50%  Entering block accumulator loop for bucket 10:  bucket 9: 60%  Entering block accumulator loop for bucket 11:  bucket 9: 70%  bucket 10: 10%  bucket 9: 80%  bucket 11: 10%  bucket 9: 90%  bucket 11: 20%  bucket 10: 20%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 11: 30%  bucket 10: 30%  bucket 11: 40%  bucket 10: 40%  bucket 10: 50%  bucket 11: 50%  bucket 10: 60%  bucket 11: 60%  bucket 10: 70%  bucket 11: 70%  bucket 10: 80%  bucket 11: 80%  bucket 10: 90%  bucket 11: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  bucket 12: 60%  bucket 12: 70%  Entering block accumulator loop for bucket 13:  bucket 12: 80%  bucket 13: 10%  bucket 12: 90%  bucket 13: 20%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 15:  Entering block accumulator loop for bucket 14:  bucket 15: 10%  bucket 14: 10%  bucket 15: 20%  bucket 14: 20%  bucket 15: 30%  bucket 15: 40%  bucket 14: 30%  bucket 15: 50%  bucket 14: 40%  bucket 15: 60%  bucket 14: 50%  bucket 15: 70%  bucket 14: 60%  bucket 15: 80%  bucket 14: 70%  bucket 15: 90%  bucket 14: 80%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 16:  bucket 16: 10%  Entering block accumulator loop for bucket 17:  bucket 16: 20%  bucket 17: 10%  bucket 16: 30%  bucket 17: 20%  bucket 16: 40%  bucket 17: 30%  bucket 16: 50%  bucket 17: 40%  bucket 16: 60%  bucket 17: 50%  bucket 16: 70%  bucket 17: 60%  bucket 16: 80%  bucket 17: 70%  bucket 16: 90%  bucket 17: 80%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  bucket 18: 20%  bucket 18: 30%  Entering block accumulator loop for bucket 19:  bucket 18: 40%  bucket 18: 50%  bucket 19: 10%  bucket 18: 60%  bucket 19: 20%  bucket 18: 70%  bucket 18: 80%  bucket 19: 30%  bucket 18: 90%  bucket 19: 40%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22Getting block 23 of 60  Entering block accumulator loop for bucket 22:  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  bucket 22: 10%  Entering block accumulator loop for bucket 23:  bucket 22: 20%  bucket 22: 30%  bucket 23: 10%  bucket 22: 40%  bucket 23: 20%  bucket 22: 50%  bucket 23: 30%  bucket 22: 60%  bucket 23: 40%  bucket 22: 70%  bucket 23: 50%  bucket 22: 80%  bucket 23: 60%  bucket 22: 90%  bucket 23: 70%  bucket 22: 100%  bucket 23: 80%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  bucket 24: 50%  bucket 24: 60%  Entering block accumulator loop for bucket 25:  bucket 24: 70%  bucket 25: 10%  bucket 24: 80%  bucket 25: 20%  bucket 24: 90%  bucket 25: 30%  bucket 25: 40%  bucket 24: 100%  Sorting block of length 68 for bucket 24  bucket 25: 50%  bucket 25: 60%  (Using difference cover)  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  Entering block accumulator loop for bucket 27:  bucket 27: 10%  bucket 27: 20%  bucket 27: 30%  bucket 27: 40%  bucket 27: 50%  bucket 27: 60%Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 70%  bucket 27: 80%  Entering block accumulator loop for bucket 28:  bucket 27: 90%  bucket 28: 10%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  bucket 30: 10%  Entering block accumulator loop for bucket 31:  bucket 30: 20%  bucket 31: 10%  bucket 31: 20%  bucket 30: 30%  bucket 31: 30%  bucket 30: 40%  bucket 31: 40%  bucket 30: 50%  bucket 31: 50%  bucket 30: 60%  bucket 31: 60%  bucket 30: 70%  bucket 31: 70%  bucket 30: 80%  bucket 31: 80%  bucket 30: 90%  bucket 31: 90%  bucket 30: 100%  bucket 31: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  bucket 32: 20%  bucket 32: 30%  Entering block accumulator loop for bucket 33:  bucket 32: 40%  bucket 33: 10%  bucket 32: 50%  bucket 33: 20%  bucket 32: 60%  bucket 33: 30%  bucket 33: 40%  bucket 32: 70%  bucket 33: 50%  bucket 32: 80%  bucket 33: 60%  bucket 32: 90%  bucket 33: 70%  bucket 32: 100%  bucket 33: 80%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 34: 20%  bucket 34: 30%  bucket 34: 40%  bucket 34: 50%  bucket 34: 60%  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 35:  bucket 35: 10%  Entering block accumulator loop for bucket 36:  bucket 35: 20%  bucket 36: 10%  bucket 35: 30%  bucket 36: 20%  bucket 35: 40%  bucket 36: 30%  bucket 35: 50%  bucket 36: 40%  bucket 35: 60%  bucket 36: 50%  bucket 36: 60%  bucket 35: 70%  bucket 36: 70%  bucket 35: 80%  bucket 36: 80%  bucket 35: 90%  bucket 36: 90%  bucket 35: 100%  bucket 36: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%Getting block 38 of 60  bucket 37: 20%  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  bucket 37: 30%  Entering block accumulator loop for bucket 38:  bucket 37: 40%  bucket 38: 10%  bucket 37: 50%  bucket 38: 20%  bucket 37: 60%  bucket 38: 30%  bucket 38: 40%  bucket 37: 70%  bucket 38: 50%  bucket 37: 80%  bucket 38: 60%  bucket 38: 70%  bucket 37: 90%  bucket 38: 80%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 39:  bucket 39: 10%  bucket 39: 20%  bucket 39: 30%  bucket 39: 40%  bucket 39: 50%  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Entering block accumulator loop for bucket 40:  Calculating Z arrays for bucket 41  bucket 40: 10%  Entering block accumulator loop for bucket 41:  bucket 40: 20%  bucket 40: 30%  bucket 41: 10%  bucket 40: 40%  bucket 41: 20%  bucket 40: 50%  bucket 41: 30%  bucket 40: 60%  bucket 41: 40%  bucket 40: 70%  bucket 41: 50%  bucket 40: 80%  bucket 41: 60%  bucket 40: 90%  bucket 41: 70%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  bucket 42: 10%Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  bucket 42: 20%  bucket 42: 30%  Entering block accumulator loop for bucket 43:  bucket 42: 40%  bucket 43: 10%  bucket 43: 20%  bucket 42: 50%  bucket 43: 30%  bucket 42: 60%  bucket 43: 40%  bucket 42: 70%  bucket 43: 50%  bucket 43: 60%  bucket 42: 80%  bucket 43: 70%  bucket 42: 90%  bucket 43: 80%  bucket 42: 100%  bucket 43: 90%  Sorting block of length 119 for bucket 42  (Using difference cover)  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  bucket 44: 90%  bucket 44: 100%  Entering block accumulator loop for bucket 45:  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 46:  bucket 46: 10%  Entering block accumulator loop for bucket 47:  bucket 46: 20%  bucket 46: 30%  bucket 47: 10%  bucket 46: 40%  bucket 47: 20%  bucket 46: 50%  bucket 47: 30%  bucket 47: 40%  bucket 46: 60%  bucket 47: 50%  bucket 46: 70%  bucket 47: 60%  bucket 46: 80%  bucket 47: 70%  bucket 46: 90%  bucket 47: 80%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  bucket 48: 40%  bucket 48: 50%  Entering block accumulator loop for bucket 49:  bucket 48: 60%  bucket 49: 10%  bucket 48: 70%  bucket 49: 20%  bucket 48: 80%  bucket 49: 30%  bucket 48: 90%  bucket 49: 40%  bucket 48: 100%  Sorting block of length 113 for bucket 48  bucket 49: 50%  (Using difference cover)  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 51: 10%  bucket 51: 20%  bucket 51: 30%  bucket 51: 40%  Sorting block time: 00:00:00  bucket 51: 50%Returning block of 109 for bucket 50  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 52:  bucket 52: 10%  bucket 52: 20%  bucket 52: 30%  bucket 52: 40%  bucket 52: 50%  bucket 52: 60%  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 53:  bucket 53: 10%  Entering block accumulator loop for bucket 54:  bucket 53: 20%  bucket 54: 10%  bucket 53: 30%  bucket 54: 20%  bucket 53: 40%  bucket 54: 30%  bucket 53: 50%  bucket 54: 40%  bucket 53: 60%  bucket 54: 50%  bucket 53: 70%  bucket 54: 60%  bucket 53: 80%  bucket 54: 70%  bucket 53: 90%  bucket 54: 80%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  bucket 55: 30%  bucket 55: 40%  Entering block accumulator loop for bucket 56:  bucket 55: 50%  bucket 56: 10%  bucket 55: 60%  bucket 55: 70%  bucket 56: 20%  bucket 55: 80%  bucket 55: 90%  bucket 56: 30%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 57:  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  bucket 57: 80%  bucket 57: 90%  Entering block accumulator loop for bucket 58:  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  Sorting block time: 00:00:00Returning block of 86 for bucket 57  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 59:  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 59: 10%  bucket 60: 20%  bucket 60: 30%  bucket 59: 20%  bucket 60: 40%  bucket 60: 50%  bucket 59: 30%  bucket 60: 60%  bucket 60: 70%  bucket 59: 40%  bucket 60: 80%  bucket 60: 90%  bucket 59: 50%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:003 reads; of these:  3 (100.00%) were paired; of these:    3 (100.00%) aligned concordantly 0 times    0 (0.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    3 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    3 pairs aligned 0 times concordantly or discordantly; of these:      6 mates make up the pairs; of these:        6 (100.00%) aligned 0 times        0 (0.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times0.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #7)" name="6" time="34.76874494552612">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 1  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:  bucket 1: 10%  Entering block accumulator loop for bucket 2:  bucket 1: 20%  bucket 2: 10%  bucket 1: 30%Getting block 3 of 60  Reserving size (126) for bucket 3Getting block 4 of 60  bucket 2: 20%Getting block 5 of 60  bucket 2: 30%  Reserving size (126) for bucket 4  bucket 1: 40%Getting block 6 of 60  bucket 2: 40%  Reserving size (126) for bucket 5  bucket 2: 50%  Calculating Z arrays for bucket 4Getting block 7 of 60  Entering block accumulator loop for bucket 4:  Calculating Z arrays for bucket 3  Reserving size (126) for bucket 7  Reserving size (126) for bucket 6  bucket 1: 50%  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 6  bucket 2: 60%  Entering block accumulator loop for bucket 3:  bucket 4: 10%  bucket 2: 70%  Entering block accumulator loop for bucket 5:  bucket 3: 10%  Entering block accumulator loop for bucket 6:  bucket 1: 60%  bucket 3: 20%Getting block 8 of 60  bucket 5: 10%  bucket 4: 20%  bucket 6: 10%  Calculating Z arrays for bucket 7  bucket 4: 30%  bucket 1: 70%  bucket 3: 30%  bucket 6: 20%  bucket 4: 40%  bucket 1: 80%  bucket 5: 20%  bucket 2: 80%  bucket 6: 30%  bucket 1: 90%  Reserving size (126) for bucket 8  bucket 5: 30%  bucket 4: 50%  bucket 3: 40%  Entering block accumulator loop for bucket 7:  bucket 4: 60%  bucket 2: 90%  bucket 3: 50%  bucket 6: 40%  bucket 5: 40%  Calculating Z arrays for bucket 8  bucket 1: 100%  bucket 6: 50%  bucket 7: 10%  bucket 5: 50%  bucket 3: 60%  bucket 6: 60%  bucket 2: 100%  bucket 7: 20%  bucket 3: 70%  Sorting block of length 84 for bucket 2  bucket 5: 60%  (Using difference cover)  Entering block accumulator loop for bucket 8:  bucket 7: 30%  bucket 5: 70%  bucket 4: 70%  bucket 5: 80%  bucket 8: 10%  bucket 5: 90%  bucket 3: 80%  bucket 6: 70%  bucket 7: 40%  bucket 4: 80%  bucket 5: 100%  bucket 3: 90%  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 8: 20%  bucket 7: 50%  bucket 6: 80%  Sorting block of length 42 for bucket 1  bucket 8: 30%  bucket 4: 90%  bucket 8: 40%  bucket 7: 60%  (Using difference cover)  bucket 3: 100%  bucket 8: 50%  bucket 4: 100%  bucket 6: 90%  Sorting block of length 106 for bucket 3  bucket 8: 60%  (Using difference cover)  Sorting block of length 68 for bucket 4  bucket 6: 100%  bucket 7: 70%  bucket 8: 70%  (Using difference cover)  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 7: 80%  bucket 8: 80%  bucket 7: 90%  bucket 8: 90%  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00  bucket 8: 100%Returning block of 85 for bucket 2  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 107 for bucket 3Getting block 9 of 60  Reserving size (126) for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 10:  Entering block accumulator loop for bucket 9:  bucket 10: 10%  bucket 10: 20%  bucket 10: 30%  bucket 10: 40%  bucket 9: 10%  bucket 10: 50%  bucket 10: 60%  bucket 9: 20%  bucket 10: 70%  bucket 9: 30%  bucket 10: 80%  bucket 10: 90%  bucket 9: 40%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 9: 50%  bucket 9: 60%  bucket 9: 70%  bucket 9: 80%  bucket 9: 90%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 90 for bucket 10  Sorting block time: 00:00:00Returning block of 125 for bucket 9Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%Getting block 12 of 60  bucket 11: 50%  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  bucket 11: 60%  bucket 11: 70%  Entering block accumulator loop for bucket 12:  bucket 11: 80%  bucket 12: 10%  bucket 11: 90%  bucket 12: 20%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  bucket 13: 60%  bucket 13: 70%  Entering block accumulator loop for bucket 14:  bucket 13: 80%  bucket 14: 10%  bucket 13: 90%  bucket 14: 20%  bucket 13: 100%  bucket 14: 30%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 15  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 15:  Entering block accumulator loop for bucket 16:  bucket 15: 10%  bucket 15: 20%  bucket 16: 10%  bucket 16: 20%  bucket 15: 30%  bucket 15: 40%  bucket 16: 30%  bucket 15: 50%  bucket 16: 40%  bucket 15: 60%  bucket 16: 50%  bucket 15: 70%  bucket 16: 60%  bucket 15: 80%  bucket 15: 90%  bucket 16: 70%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 80%  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%Getting block 18 of 60  bucket 17: 20%  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  bucket 17: 30%  bucket 17: 40%  bucket 17: 50%  Entering block accumulator loop for bucket 18:  bucket 17: 60%  bucket 17: 70%  bucket 18: 10%  bucket 17: 80%  bucket 18: 20%  bucket 17: 90%  bucket 18: 30%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  bucket 18: 70%  bucket 18: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%Getting block 20 of 60  bucket 19: 20%  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 30%  bucket 19: 40%  Entering block accumulator loop for bucket 20:  bucket 19: 50%  bucket 20: 10%  bucket 19: 60%  bucket 20: 20%  bucket 19: 70%  bucket 20: 30%  bucket 19: 80%  bucket 20: 40%  bucket 19: 90%  bucket 20: 50%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%  bucket 21: 40%  bucket 21: 50%  bucket 21: 60%  bucket 21: 70%  bucket 21: 80%  bucket 21: 90%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  bucket 22: 10%  bucket 22: 20%  Entering block accumulator loop for bucket 23:  bucket 22: 30%  bucket 22: 40%  bucket 23: 10%  bucket 22: 50%  bucket 23: 20%  bucket 22: 60%  bucket 23: 30%  bucket 22: 70%  bucket 23: 40%  bucket 22: 80%  bucket 23: 50%  bucket 22: 90%  bucket 23: 60%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 60  Entering block accumulator loop for bucket 24:  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  bucket 24: 10%  Entering block accumulator loop for bucket 25:  bucket 24: 20%  bucket 24: 30%  bucket 25: 10%  bucket 24: 40%  bucket 25: 20%  bucket 24: 50%  bucket 25: 30%  bucket 24: 60%  bucket 25: 40%  bucket 24: 70%  bucket 25: 50%  bucket 24: 80%  bucket 25: 60%  bucket 24: 90%  bucket 25: 70%  bucket 25: 80%  bucket 24: 100%  Sorting block of length 68 for bucket 24  bucket 25: 90%  (Using difference cover)  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  bucket 26: 80%  bucket 26: 90%  bucket 26: 100%  Sorting block of length 107 for bucket 26  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 27:  bucket 27: 10%  Entering block accumulator loop for bucket 28:  bucket 27: 20%  bucket 28: 10%  bucket 27: 30%  bucket 28: 20%  bucket 27: 40%  bucket 28: 30%  bucket 27: 50%  bucket 28: 40%  bucket 27: 60%  bucket 28: 50%  bucket 27: 70%  bucket 28: 60%  bucket 27: 80%  bucket 28: 70%  bucket 27: 90%  bucket 28: 80%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  bucket 29: 10%  Entering block accumulator loop for bucket 30:  bucket 29: 20%  bucket 30: 10%  bucket 29: 30%  bucket 30: 20%  bucket 29: 40%  bucket 30: 30%  bucket 29: 50%  bucket 30: 40%  bucket 29: 60%  bucket 30: 50%  bucket 29: 70%  bucket 30: 60%  bucket 29: 80%  bucket 30: 70%  bucket 29: 90%  bucket 30: 80%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 32:  Entering block accumulator loop for bucket 33:  bucket 32: 10%Getting block 34 of 60  Reserving size (126) for bucket 34  bucket 33: 10%  Calculating Z arrays for bucket 34  bucket 32: 20%  bucket 33: 20%  bucket 32: 30%  Entering block accumulator loop for bucket 34:  bucket 33: 30%  bucket 32: 40%  bucket 34: 10%  bucket 33: 40%  bucket 32: 50%  bucket 34: 20%  bucket 33: 50%  bucket 32: 60%  bucket 34: 30%  bucket 33: 60%  bucket 32: 70%  bucket 33: 70%  bucket 34: 40%  bucket 32: 80%  bucket 33: 80%  bucket 34: 50%  bucket 32: 90%  bucket 33: 90%  bucket 34: 60%  bucket 32: 100%  bucket 33: 100%  bucket 34: 70%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%Getting block 36 of 60  Reserving size (126) for bucket 36  bucket 35: 20%  Calculating Z arrays for bucket 36  bucket 35: 30%  Entering block accumulator loop for bucket 36:  bucket 35: 40%  bucket 36: 10%  bucket 35: 50%  bucket 36: 20%  bucket 35: 60%  bucket 36: 30%  bucket 35: 70%  bucket 36: 40%  bucket 35: 80%  bucket 36: 50%  bucket 35: 90%  bucket 36: 60%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 36: 70%  bucket 36: 80%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 37:  bucket 37: 10%  bucket 37: 20%Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  bucket 37: 30%  bucket 37: 40%  Entering block accumulator loop for bucket 38:  bucket 37: 50%  bucket 38: 10%  bucket 37: 60%  bucket 38: 20%  bucket 37: 70%  bucket 38: 30%  bucket 37: 80%  bucket 38: 40%  bucket 37: 90%  bucket 38: 50%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Entering block accumulator loop for bucket 39:  Calculating Z arrays for bucket 40  bucket 39: 10%  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 39: 20%  bucket 40: 20%  bucket 39: 30%  bucket 40: 30%  bucket 40: 40%  bucket 39: 40%  bucket 40: 50%  bucket 39: 50%  bucket 40: 60%  bucket 39: 60%  bucket 40: 70%  bucket 39: 70%  bucket 40: 80%  bucket 39: 80%  bucket 40: 90%  bucket 39: 90%  bucket 40: 100%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  bucket 41: 10%  bucket 41: 20%  Entering block accumulator loop for bucket 42:  bucket 41: 30%  bucket 41: 40%  bucket 42: 10%  bucket 41: 50%  bucket 42: 20%  bucket 41: 60%  bucket 41: 70%  bucket 42: 30%  bucket 41: 80%  bucket 41: 90%  bucket 42: 40%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%Getting block 45 of 60  Reserving size (126) for bucket 45  bucket 44: 20%  Calculating Z arrays for bucket 45  bucket 44: 30%  Entering block accumulator loop for bucket 45:  bucket 44: 40%  bucket 45: 10%  bucket 44: 50%  bucket 45: 20%  bucket 44: 60%  bucket 45: 30%  bucket 44: 70%  bucket 45: 40%  bucket 44: 80%  bucket 45: 50%  bucket 44: 90%  bucket 45: 60%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  Entering block accumulator loop for bucket 46:  bucket 46: 10%  Entering block accumulator loop for bucket 47:  bucket 46: 20%  bucket 46: 30%  bucket 47: 10%  bucket 46: 40%  bucket 47: 20%  bucket 46: 50%  bucket 46: 60%  bucket 47: 30%  bucket 46: 70%  bucket 47: 40%  bucket 46: 80%  bucket 46: 90%  bucket 47: 50%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  Sorting block time: 00:00:00  bucket 50: 100%Returning block of 75 for bucket 49  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 51:  bucket 51: 10%  Entering block accumulator loop for bucket 52:  bucket 51: 20%  bucket 52: 10%  bucket 51: 30%  bucket 52: 20%  bucket 51: 40%  bucket 52: 30%  bucket 51: 50%  bucket 52: 40%  bucket 51: 60%  bucket 52: 50%  bucket 51: 70%  bucket 51: 80%  bucket 52: 60%  bucket 51: 90%  bucket 51: 100%  bucket 52: 70%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 54:  Entering block accumulator loop for bucket 55:  bucket 54: 10%  bucket 55: 10%  bucket 54: 20%  bucket 55: 20%  bucket 54: 30%  bucket 55: 30%  bucket 55: 40%  bucket 54: 40%  bucket 55: 50%  bucket 54: 50%  bucket 55: 60%  bucket 55: 70%  bucket 54: 60%  bucket 55: 80%  bucket 54: 70%  bucket 55: 90%  bucket 54: 80%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  bucket 54: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%Getting block 57 of 60  bucket 56: 40%  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  bucket 56: 50%  bucket 56: 60%  Entering block accumulator loop for bucket 57:  bucket 56: 70%  bucket 57: 10%  bucket 57: 20%  bucket 56: 80%  bucket 57: 30%  bucket 56: 90%  bucket 57: 40%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59Getting block 60 of 60  Entering block accumulator loop for bucket 59:  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  bucket 59: 10%  Entering block accumulator loop for bucket 60:  bucket 59: 20%  bucket 60: 10%  bucket 60: 20%  bucket 59: 30%  bucket 60: 30%  bucket 60: 40%  bucket 59: 40%  bucket 60: 50%  bucket 60: 60%  bucket 59: 50%  bucket 60: 70%  bucket 59: 60%  bucket 60: 80%  bucket 59: 70%  bucket 60: 90%  bucket 60: 100%  bucket 59: 80%  Sorting block of length 101 for bucket 60  (Using difference cover)  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 110 for bucket 59  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:003 reads; of these:  3 (100.00%) were paired; of these:    3 (100.00%) aligned concordantly 0 times    0 (0.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    3 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    3 pairs aligned 0 times concordantly or discordantly; of these:      6 mates make up the pairs; of these:        6 (100.00%) aligned 0 times        0 (0.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times0.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #8)" name="7" time="10.902891397476196">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 7, "time_seconds": 10.902891397476196, "tool_id": "hisat2", "tool_version": "2.2.1+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #8)" name="7" time="37.63934278488159">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1Getting block 2 of 60  Calculating Z arrays for bucket 1  Reserving size (126) for bucket 2  Calculating Z arrays for bucket 2  Entering block accumulator loop for bucket 1:Getting block 3 of 60Getting block 4 of 60  Reserving size (126) for bucket 4  bucket 1: 10%Getting block 6 of 60  Reserving size (126) for bucket 6  Calculating Z arrays for bucket 4Getting block 5 of 60  Entering block accumulator loop for bucket 4:  Reserving size (126) for bucket 3  Reserving size (126) for bucket 5  Entering block accumulator loop for bucket 2:  bucket 1: 20%Getting block 8 of 60  Reserving size (126) for bucket 8  Calculating Z arrays for bucket 3  bucket 2: 10%  Calculating Z arrays for bucket 5Getting block 7 of 60  Entering block accumulator loop for bucket 3:  Reserving size (126) for bucket 7  bucket 4: 10%  bucket 1: 30%  bucket 4: 20%  Entering block accumulator loop for bucket 5:  Calculating Z arrays for bucket 7  bucket 2: 20%  Calculating Z arrays for bucket 8  bucket 3: 10%  bucket 1: 40%  bucket 5: 10%  Entering block accumulator loop for bucket 7:  bucket 3: 20%  bucket 4: 30%  Entering block accumulator loop for bucket 8:  bucket 5: 20%  bucket 1: 50%  bucket 2: 30%  bucket 4: 40%  bucket 7: 10%  bucket 8: 10%  bucket 3: 30%  bucket 2: 40%  bucket 5: 30%  bucket 1: 60%  bucket 3: 40%  Calculating Z arrays for bucket 6  bucket 7: 20%  bucket 5: 40%  bucket 2: 50%  bucket 7: 30%  bucket 4: 50%  bucket 2: 60%  bucket 8: 20%  bucket 4: 60%  bucket 3: 50%  bucket 7: 40%  bucket 4: 70%  bucket 2: 70%  bucket 1: 70%  bucket 8: 30%  bucket 5: 50%  bucket 8: 40%  Entering block accumulator loop for bucket 6:  bucket 3: 60%  bucket 7: 50%  bucket 4: 80%  bucket 8: 50%  bucket 2: 80%  bucket 6: 10%  bucket 5: 60%  bucket 8: 60%  bucket 2: 90%  bucket 4: 90%  bucket 6: 20%  bucket 2: 100%  bucket 7: 60%  bucket 1: 80%  bucket 3: 70%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 7: 70%  bucket 3: 80%  bucket 8: 70%  bucket 4: 100%  bucket 7: 80%  bucket 8: 80%  bucket 1: 90%  Sorting block of length 68 for bucket 4  (Using difference cover)  bucket 5: 70%  bucket 3: 90%  bucket 7: 90%  bucket 5: 80%  bucket 6: 30%  bucket 8: 90%  bucket 3: 100%  bucket 5: 90%  bucket 6: 40%  Sorting block of length 106 for bucket 3  bucket 8: 100%  (Using difference cover)  bucket 7: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block of length 75 for bucket 7  bucket 6: 50%  (Using difference cover)  bucket 1: 100%  bucket 5: 100%  Sorting block of length 42 for bucket 1  (Using difference cover)  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 6: 60%  bucket 6: 70%  bucket 6: 80%  bucket 6: 90%  bucket 6: 100%  Sorting block of length 90 for bucket 6  (Using difference cover)  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 107 for bucket 3Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 10: 10%  bucket 9: 30%  bucket 10: 20%  bucket 9: 40%  bucket 10: 30%  bucket 9: 50%  bucket 10: 40%  bucket 10: 50%  bucket 9: 60%  bucket 10: 60%  bucket 10: 70%  bucket 9: 70%  bucket 10: 80%  bucket 9: 80%  bucket 10: 90%  bucket 9: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11Getting block 13 of 60  Entering block accumulator loop for bucket 12:  Entering block accumulator loop for bucket 11:  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  bucket 12: 10%  bucket 11: 10%  bucket 12: 20%  Entering block accumulator loop for bucket 13:  bucket 11: 20%  bucket 12: 30%  bucket 13: 10%  bucket 11: 30%  bucket 12: 40%  bucket 13: 20%  bucket 11: 40%  bucket 12: 50%  bucket 13: 30%  bucket 11: 50%  bucket 12: 60%  bucket 13: 40%  bucket 11: 60%  bucket 12: 70%  bucket 13: 50%  bucket 11: 70%  bucket 12: 80%  bucket 13: 60%  bucket 11: 80%  bucket 12: 90%  bucket 13: 70%  bucket 11: 90%  bucket 12: 100%  bucket 13: 80%  Sorting block of length 82 for bucket 12  bucket 11: 100%  Sorting block of length 95 for bucket 11  bucket 13: 90%  (Using difference cover)  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 14:  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  Sorting block time: 00:00:00Returning block of 69 for bucket 15  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 17:  bucket 17: 10%  Entering block accumulator loop for bucket 16:  bucket 17: 20%  bucket 16: 10%  bucket 17: 30%  bucket 16: 20%  bucket 17: 40%  bucket 16: 30%  bucket 17: 50%  bucket 16: 40%  bucket 17: 60%  bucket 16: 50%  bucket 17: 70%  bucket 16: 60%  bucket 17: 80%  bucket 16: 70%  bucket 17: 90%  bucket 16: 80%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 101 for bucket 16Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%  bucket 18: 30%Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  bucket 18: 40%  bucket 18: 50%  bucket 18: 60%  Entering block accumulator loop for bucket 19:  bucket 18: 70%  bucket 18: 80%  bucket 19: 10%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  Sorting block time: 00:00:00Returning block of 123 for bucket 18  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 20:  bucket 20: 10%  Entering block accumulator loop for bucket 21:  bucket 20: 20%  bucket 21: 10%  bucket 20: 30%  bucket 21: 20%  bucket 20: 40%  bucket 21: 30%  bucket 20: 50%  bucket 21: 40%  bucket 20: 60%  bucket 21: 50%  bucket 20: 70%  bucket 21: 60%  bucket 20: 80%  bucket 21: 70%  bucket 20: 90%  bucket 21: 80%  bucket 20: 100%  bucket 21: 90%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 55 for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 22:  bucket 22: 10%  bucket 22: 20%  bucket 22: 30%Getting block 23 of 60  bucket 22: 40%  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  bucket 22: 50%  bucket 22: 60%  Entering block accumulator loop for bucket 23:  bucket 22: 70%  bucket 22: 80%  bucket 23: 10%  bucket 22: 90%  bucket 23: 20%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  Sorting block time: 00:00:00  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)Returning block of 81 for bucket 22  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  Sorting block time: 00:00:00Returning block of 69 for bucket 24  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 30%  bucket 26: 40%  Entering block accumulator loop for bucket 27:  bucket 26: 50%  bucket 27: 10%  bucket 26: 60%  bucket 27: 20%  bucket 26: 70%  bucket 27: 30%  bucket 26: 80%  bucket 27: 40%  bucket 26: 90%  bucket 27: 50%  bucket 26: 100%  bucket 27: 60%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  Entering block accumulator loop for bucket 29:  bucket 29: 10%  bucket 29: 20%  bucket 29: 30%  bucket 29: 40%  bucket 29: 50%Getting block 30 of 60  Reserving size (126) for bucket 30Getting block 31 of 60  Calculating Z arrays for bucket 30  Reserving size (126) for bucket 31  bucket 29: 60%  Calculating Z arrays for bucket 31  bucket 29: 70%  Entering block accumulator loop for bucket 30:  Entering block accumulator loop for bucket 31:  bucket 29: 80%  bucket 29: 90%  bucket 30: 10%  bucket 31: 10%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  bucket 31: 20%  bucket 30: 20%  bucket 31: 30%  bucket 30: 30%  bucket 31: 40%  bucket 31: 50%  bucket 30: 40%  bucket 31: 60%  bucket 30: 50%  bucket 31: 70%  bucket 31: 80%  bucket 30: 60%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  bucket 30: 70%  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Entering block accumulator loop for bucket 32:  Calculating Z arrays for bucket 33  bucket 32: 10%  Entering block accumulator loop for bucket 33:  bucket 32: 20%  bucket 33: 10%  bucket 32: 30%  bucket 33: 20%  bucket 32: 40%  bucket 33: 30%  bucket 32: 50%  bucket 33: 40%  bucket 32: 60%  bucket 33: 50%  bucket 32: 70%  bucket 33: 60%  bucket 32: 80%  bucket 33: 70%  bucket 32: 90%  bucket 33: 80%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 34:  bucket 34: 10%  Entering block accumulator loop for bucket 35:  bucket 34: 20%  bucket 35: 10%  bucket 34: 30%  bucket 35: 20%Getting block 36 of 60  Reserving size (126) for bucket 36  bucket 35: 30%  Calculating Z arrays for bucket 36  bucket 34: 40%  bucket 35: 40%Getting block 37 of 60  bucket 35: 50%  bucket 34: 50%  Entering block accumulator loop for bucket 36:  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  bucket 35: 60%  bucket 34: 60%  bucket 36: 10%  bucket 34: 70%  bucket 35: 70%  Entering block accumulator loop for bucket 37:  bucket 34: 80%  bucket 36: 20%  bucket 35: 80%  bucket 34: 90%  bucket 37: 10%  bucket 36: 30%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 37: 20%  bucket 35: 90%  bucket 36: 40%  bucket 37: 30%  bucket 35: 100%  bucket 36: 50%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 37: 40%  bucket 36: 60%  bucket 37: 50%  bucket 36: 70%  bucket 37: 60%  bucket 36: 80%  bucket 36: 90%  bucket 37: 70%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  bucket 38: 20%  bucket 38: 30%  Entering block accumulator loop for bucket 39:  bucket 38: 40%  bucket 38: 50%  bucket 39: 10%  bucket 38: 60%  bucket 38: 70%  bucket 39: 20%  bucket 38: 80%  bucket 39: 30%  bucket 38: 90%  bucket 39: 40%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  bucket 39: 50%  bucket 39: 60%  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%  bucket 40: 40%Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  bucket 40: 50%  bucket 40: 60%  bucket 40: 70%  Entering block accumulator loop for bucket 41:  bucket 40: 80%  bucket 41: 10%  bucket 40: 90%  bucket 41: 20%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  bucket 41: 30%  bucket 41: 40%  bucket 41: 50%  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  bucket 42: 10%  bucket 42: 20%  bucket 42: 30%  bucket 42: 40%Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  bucket 42: 50%  bucket 42: 60%  bucket 42: 70%  Entering block accumulator loop for bucket 43:  bucket 42: 80%  bucket 42: 90%  bucket 43: 10%  bucket 42: 100%  Sorting block of length 119 for bucket 42  bucket 43: 20%  (Using difference cover)  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%  bucket 43: 70%  bucket 43: 80%  Sorting block time: 00:00:00  bucket 43: 90%Returning block of 120 for bucket 42  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 44:  bucket 44: 10%  Entering block accumulator loop for bucket 45:  bucket 44: 20%  bucket 44: 30%  bucket 45: 10%  bucket 44: 40%  bucket 45: 20%  bucket 44: 50%  bucket 45: 30%  bucket 44: 60%  bucket 45: 40%  bucket 44: 70%  bucket 45: 50%  bucket 44: 80%  bucket 45: 60%  bucket 44: 90%  bucket 45: 70%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46Getting block 47 of 60  Entering block accumulator loop for bucket 46:  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  bucket 46: 10%  bucket 46: 20%  Entering block accumulator loop for bucket 47:  bucket 46: 30%  bucket 46: 40%  bucket 47: 10%  bucket 46: 50%  bucket 47: 20%  bucket 46: 60%  bucket 47: 30%  bucket 46: 70%  bucket 47: 40%  bucket 46: 80%  bucket 46: 90%  bucket 47: 50%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 70 for bucket 46  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  bucket 48: 50%  bucket 48: 60%  Entering block accumulator loop for bucket 49:  bucket 48: 70%  bucket 49: 10%  bucket 48: 80%  bucket 49: 20%  bucket 48: 90%  bucket 49: 30%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  bucket 49: 40%  bucket 49: 50%  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 52:  Entering block accumulator loop for bucket 51:  bucket 52: 10%  bucket 51: 10%  bucket 52: 20%  bucket 51: 20%  bucket 52: 30%  bucket 51: 30%  bucket 52: 40%  bucket 51: 40%  bucket 52: 50%  bucket 51: 50%  bucket 51: 60%  bucket 52: 60%  bucket 51: 70%  bucket 52: 70%  bucket 51: 80%  bucket 52: 80%  bucket 51: 90%  bucket 52: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52  Sorting block time: 00:00:00Returning block of 92 for bucket 51Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 53:  Entering block accumulator loop for bucket 54:  bucket 53: 10%  bucket 54: 10%  bucket 53: 20%  bucket 54: 20%  bucket 53: 30%  bucket 54: 30%  bucket 53: 40%  bucket 54: 40%  bucket 53: 50%  bucket 54: 50%  bucket 53: 60%  bucket 54: 60%  bucket 54: 70%  bucket 53: 70%  bucket 54: 80%  bucket 53: 80%  bucket 54: 90%  bucket 53: 90%  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  bucket 56: 20%  bucket 56: 30%  Entering block accumulator loop for bucket 57:  bucket 56: 40%  bucket 57: 10%  bucket 56: 50%  bucket 57: 20%  bucket 56: 60%  bucket 57: 30%  bucket 56: 70%  bucket 57: 40%  bucket 56: 80%  bucket 57: 50%  bucket 56: 90%  bucket 57: 60%  bucket 56: 100%  Sorting block of length 55 for bucket 56  bucket 57: 70%  (Using difference cover)  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%Getting block 59 of 60  bucket 58: 30%  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%  Entering block accumulator loop for bucket 59:  bucket 58: 70%  bucket 58: 80%  bucket 59: 10%  bucket 58: 90%  bucket 59: 20%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 59: 30%  bucket 59: 40%  bucket 59: 50%  bucket 59: 60%  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:01500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times85.80% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #9)" name="8" time="41.025349140167236">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60Getting block 2 of 60  Reserving size (126) for bucket 1Getting block 3 of 60  Calculating Z arrays for bucket 1Getting block 4 of 60  Reserving size (126) for bucket 4  Reserving size (126) for bucket 3Getting block 5 of 60  Reserving size (126) for bucket 5  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 5  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 3  Reserving size (126) for bucket 2Getting block 6 of 60  Entering block accumulator loop for bucket 4:Getting block 8 of 60  Entering block accumulator loop for bucket 5:Getting block 7 of 60  Reserving size (126) for bucket 8  Reserving size (126) for bucket 6  Entering block accumulator loop for bucket 3:  Calculating Z arrays for bucket 2  Reserving size (126) for bucket 7  Calculating Z arrays for bucket 6  Calculating Z arrays for bucket 8  Entering block accumulator loop for bucket 2:  bucket 1: 10%  Calculating Z arrays for bucket 7  bucket 2: 10%  bucket 5: 10%  bucket 3: 10%  Entering block accumulator loop for bucket 6:  bucket 1: 20%  bucket 3: 20%  bucket 2: 20%  Entering block accumulator loop for bucket 7:  bucket 6: 10%  bucket 5: 20%  bucket 3: 30%  bucket 1: 30%  bucket 4: 10%  bucket 3: 40%  bucket 6: 20%  bucket 1: 40%  bucket 3: 50%  bucket 4: 20%  bucket 5: 30%  bucket 1: 50%  bucket 7: 10%  bucket 4: 30%  bucket 2: 30%  bucket 1: 60%  bucket 6: 30%  Entering block accumulator loop for bucket 8:  bucket 3: 60%  bucket 4: 40%  bucket 2: 40%  bucket 7: 20%  bucket 3: 70%  bucket 6: 40%  bucket 3: 80%  bucket 4: 50%  bucket 5: 40%  bucket 6: 50%  bucket 1: 70%  bucket 4: 60%  bucket 7: 30%  bucket 3: 90%  bucket 6: 60%  bucket 4: 70%  bucket 7: 40%  bucket 5: 50%  bucket 8: 10%  bucket 3: 100%  bucket 2: 50%  bucket 6: 70%  bucket 1: 80%  bucket 8: 20%  bucket 2: 60%  bucket 1: 90%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 6: 80%  bucket 7: 50%  bucket 4: 80%  bucket 8: 30%  bucket 6: 90%  bucket 4: 90%  bucket 7: 60%  bucket 5: 60%  bucket 8: 40%  bucket 7: 70%  bucket 5: 70%  bucket 4: 100%  bucket 2: 70%  bucket 5: 80%  bucket 6: 100%  bucket 2: 80%  bucket 1: 100%  bucket 5: 90%  Sorting block of length 90 for bucket 6  Sorting block of length 42 for bucket 1  bucket 2: 90%  (Using difference cover)  (Using difference cover)  bucket 5: 100%  Sorting block of length 68 for bucket 4  (Using difference cover)  Sorting block time: 00:00:00  bucket 2: 100%Returning block of 107 for bucket 3  Sorting block of length 63 for bucket 5  (Using difference cover)  bucket 8: 50%  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 7: 80%  bucket 8: 60%  bucket 7: 90%  bucket 8: 70%  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  bucket 8: 80%  bucket 8: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 69 for bucket 4Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%  bucket 9: 30%  bucket 9: 40%Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  bucket 9: 50%  bucket 9: 60%  Entering block accumulator loop for bucket 10:  bucket 9: 70%  bucket 10: 10%  bucket 9: 80%  bucket 10: 20%  bucket 9: 90%  bucket 10: 30%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 11  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  Entering block accumulator loop for bucket 11:  bucket 12: 10%  bucket 11: 10%  bucket 12: 20%  bucket 12: 30%  bucket 11: 20%  bucket 12: 40%  bucket 11: 30%  bucket 12: 50%  bucket 11: 40%  bucket 12: 60%  bucket 11: 50%  bucket 12: 70%  bucket 11: 60%  bucket 12: 80%  bucket 11: 70%  bucket 12: 90%  bucket 11: 80%  bucket 12: 100%  bucket 11: 90%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 96 for bucket 11  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Entering block accumulator loop for bucket 13:  Calculating Z arrays for bucket 15  bucket 13: 10%  Entering block accumulator loop for bucket 14:  bucket 13: 20%  bucket 14: 10%  bucket 13: 30%  Entering block accumulator loop for bucket 15:  bucket 14: 20%  bucket 13: 40%  bucket 15: 10%  bucket 13: 50%  bucket 14: 30%  bucket 15: 20%  bucket 13: 60%  bucket 14: 40%  bucket 15: 30%  bucket 13: 70%  bucket 14: 50%  bucket 15: 40%  bucket 13: 80%  bucket 14: 60%  bucket 15: 50%  bucket 13: 90%  bucket 14: 70%  bucket 15: 60%  bucket 13: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  bucket 14: 80%  bucket 15: 70%  bucket 14: 90%  bucket 15: 80%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 13  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 16:Getting block 17 of 60  bucket 16: 10%  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  bucket 16: 20%  bucket 16: 30%  bucket 16: 40%  Entering block accumulator loop for bucket 17:  bucket 16: 50%  bucket 17: 10%  bucket 16: 60%  bucket 17: 20%  bucket 16: 70%  bucket 16: 80%  bucket 17: 30%  bucket 16: 90%  bucket 17: 40%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  bucket 17: 50%  bucket 17: 60%  bucket 17: 70%  bucket 17: 80%  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 18:  bucket 18: 10%  bucket 18: 20%Getting block 19 of 60  Reserving size (126) for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  bucket 18: 30%  Calculating Z arrays for bucket 19  bucket 18: 40%  Entering block accumulator loop for bucket 20:  bucket 18: 50%  Entering block accumulator loop for bucket 19:  bucket 20: 10%  bucket 18: 60%  bucket 20: 20%  bucket 19: 10%  bucket 18: 70%  bucket 20: 30%  bucket 19: 20%  bucket 18: 80%  bucket 20: 40%  bucket 19: 30%  bucket 20: 50%  bucket 18: 90%  bucket 19: 40%  bucket 20: 60%  bucket 18: 100%  bucket 20: 70%  bucket 19: 50%  Sorting block of length 122 for bucket 18  bucket 20: 80%  bucket 19: 60%  bucket 20: 90%  (Using difference cover)  bucket 19: 70%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20  Sorting block time: 00:00:00Returning block of 123 for bucket 18Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  bucket 21: 40%  bucket 21: 50%  Entering block accumulator loop for bucket 22:  bucket 21: 60%  bucket 22: 10%  bucket 21: 70%  bucket 22: 20%  bucket 21: 80%  bucket 22: 30%  bucket 22: 40%  bucket 21: 90%  bucket 22: 50%  bucket 22: 60%  bucket 21: 100%  bucket 22: 70%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24  Entering block accumulator loop for bucket 24:  bucket 24: 10%  bucket 24: 20%  bucket 24: 30%  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  Sorting block time: 00:00:00Returning block of 69 for bucket 24  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:  bucket 26: 10%  bucket 26: 20%  bucket 26: 30%  bucket 26: 40%Getting block 27 of 60  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 50%  bucket 26: 60%  bucket 26: 70%  Entering block accumulator loop for bucket 27:  bucket 26: 80%  bucket 26: 90%  bucket 27: 10%Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  bucket 27: 20%Getting block 29 of 60  Reserving size (126) for bucket 29  Entering block accumulator loop for bucket 28:  Calculating Z arrays for bucket 29  bucket 26: 100%  bucket 27: 30%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 27: 40%  Entering block accumulator loop for bucket 29:  bucket 28: 10%  bucket 27: 50%  bucket 29: 10%  bucket 27: 60%  bucket 28: 20%  bucket 29: 20%  bucket 27: 70%  bucket 28: 30%  bucket 29: 30%  bucket 27: 80%  bucket 28: 40%  bucket 29: 40%  Sorting block time: 00:00:00Returning block of 108 for bucket 26  bucket 28: 50%  bucket 27: 90%  bucket 29: 50%  bucket 28: 60%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  bucket 29: 60%  bucket 28: 70%  bucket 29: 70%  bucket 28: 80%  bucket 29: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 120 for bucket 27  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  Sorting block time: 00:00:00  bucket 31: 100%Returning block of 125 for bucket 30  Sorting block of length 110 for bucket 31  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 32:  Entering block accumulator loop for bucket 33:  bucket 32: 10%  bucket 33: 10%  bucket 32: 20%  bucket 33: 20%  bucket 32: 30%  bucket 33: 30%  bucket 32: 40%  bucket 33: 40%  bucket 32: 50%  bucket 33: 50%  bucket 32: 60%  bucket 33: 60%  bucket 32: 70%  bucket 33: 70%  bucket 32: 80%  bucket 33: 80%  bucket 32: 90%  bucket 33: 90%  bucket 32: 100%  bucket 33: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  Entering block accumulator loop for bucket 34:  bucket 34: 10%  bucket 34: 20%Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  bucket 34: 30%  bucket 34: 40%  Entering block accumulator loop for bucket 35:  bucket 34: 50%  bucket 34: 60%  bucket 35: 10%  bucket 34: 70%  bucket 35: 20%  bucket 34: 80%  bucket 35: 30%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 34  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 36:  bucket 36: 10%  Entering block accumulator loop for bucket 37:  bucket 36: 20%  bucket 37: 10%  bucket 36: 30%  bucket 36: 40%  bucket 37: 20%  bucket 36: 50%  bucket 37: 30%  bucket 36: 60%  bucket 37: 40%  bucket 36: 70%  bucket 37: 50%  bucket 36: 80%  bucket 37: 60%  bucket 36: 90%  bucket 37: 70%  bucket 36: 100%  bucket 37: 80%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 37: 90%  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37  Sorting block time: 00:00:00Returning block of 121 for bucket 36Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  Entering block accumulator loop for bucket 38:  bucket 38: 10%  Entering block accumulator loop for bucket 39:  bucket 38: 20%  bucket 39: 10%  bucket 38: 30%  bucket 39: 20%  bucket 38: 40%  bucket 38: 50%  bucket 39: 30%  bucket 38: 60%  bucket 39: 40%  bucket 38: 70%  bucket 39: 50%  bucket 38: 80%Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  bucket 39: 60%  bucket 38: 90%  bucket 39: 70%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Entering block accumulator loop for bucket 40:  bucket 39: 80%  bucket 40: 10%  bucket 39: 90%  bucket 40: 20%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 30%  bucket 40: 40%  bucket 40: 50%  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  Sorting block time: 00:00:00  bucket 40: 90%Returning block of 118 for bucket 38  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:  bucket 41: 10%  bucket 41: 20%  bucket 41: 30%  bucket 41: 40%  bucket 41: 50%  bucket 41: 60%  bucket 41: 70%  bucket 41: 80%  bucket 41: 90%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 42:  bucket 42: 10%Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  bucket 42: 20%  bucket 42: 30%  Entering block accumulator loop for bucket 43:  bucket 42: 40%  bucket 43: 10%  bucket 42: 50%  bucket 43: 20%  bucket 43: 30%  bucket 42: 60%  bucket 43: 40%  bucket 42: 70%  bucket 43: 50%  bucket 42: 80%  bucket 43: 60%  bucket 43: 70%  bucket 42: 90%  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  bucket 42: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  bucket 44: 20%  bucket 44: 30%  Entering block accumulator loop for bucket 45:  bucket 44: 40%  bucket 44: 50%  bucket 45: 10%  bucket 44: 60%  bucket 45: 20%  bucket 44: 70%  bucket 45: 30%  bucket 44: 80%  bucket 44: 90%  bucket 45: 40%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%Getting block 47 of 60  Reserving size (126) for bucket 47  bucket 46: 40%  Calculating Z arrays for bucket 47  bucket 46: 50%  bucket 46: 60%  Entering block accumulator loop for bucket 47:  bucket 46: 70%  bucket 46: 80%  bucket 47: 10%  bucket 46: 90%  bucket 47: 20%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  Sorting block time: 00:00:00Returning block of 70 for bucket 46  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  bucket 49: 30%  bucket 49: 40%  Entering block accumulator loop for bucket 50:  bucket 49: 50%  bucket 50: 10%  bucket 49: 60%  bucket 50: 20%  bucket 49: 70%  bucket 50: 30%  bucket 49: 80%  bucket 50: 40%  bucket 49: 90%  bucket 50: 50%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 51:  bucket 51: 10%  Entering block accumulator loop for bucket 52:  bucket 51: 20%  bucket 52: 10%  bucket 51: 30%  bucket 52: 20%  bucket 51: 40%  bucket 52: 30%  bucket 51: 50%  bucket 52: 40%  bucket 51: 60%  bucket 52: 50%  bucket 51: 70%  bucket 52: 60%  bucket 52: 70%  bucket 51: 80%  bucket 52: 80%  bucket 51: 90%  bucket 52: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%  bucket 53: 20%  bucket 53: 30%  bucket 53: 40%  bucket 53: 50%  bucket 53: 60%  bucket 53: 70%  bucket 53: 80%  bucket 53: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 54:  Entering block accumulator loop for bucket 55:  bucket 54: 10%  bucket 55: 10%  bucket 54: 20%  bucket 55: 20%  bucket 54: 30%  bucket 55: 30%  bucket 54: 40%  bucket 55: 40%  bucket 54: 50%  bucket 55: 50%  bucket 54: 60%  bucket 55: 60%  bucket 54: 70%  bucket 55: 70%  bucket 54: 80%  bucket 55: 80%  bucket 54: 90%  bucket 55: 90%  bucket 54: 100%  bucket 55: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55  Sorting block time: 00:00:00Returning block of 65 for bucket 54Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 56:  Entering block accumulator loop for bucket 57:  bucket 56: 10%  bucket 57: 10%  bucket 56: 20%  bucket 57: 20%  bucket 57: 30%  bucket 56: 30%  bucket 57: 40%  bucket 56: 40%  bucket 57: 50%  bucket 57: 60%  bucket 56: 50%  bucket 57: 70%  bucket 56: 60%  bucket 57: 80%  bucket 56: 70%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57  Sorting block time: 00:00:00Returning block of 56 for bucket 56Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58  Entering block accumulator loop for bucket 58:  bucket 58: 10%  bucket 58: 20%  bucket 58: 30%  bucket 58: 40%  bucket 58: 50%  bucket 58: 60%  bucket 58: 70%  bucket 58: 80%  bucket 58: 90%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Calculating Z arrays for bucket 59  Entering block accumulator loop for bucket 59:  bucket 59: 10%  bucket 59: 20%  bucket 59: 30%Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  bucket 59: 40%  Entering block accumulator loop for bucket 60:  bucket 59: 50%  bucket 60: 10%  bucket 59: 60%  bucket 60: 20%  bucket 59: 70%  bucket 60: 30%  bucket 59: 80%  bucket 60: 40%  bucket 59: 90%  bucket 60: 50%  bucket 59: 100%  bucket 60: 60%  Sorting block of length 109 for bucket 59  (Using difference cover)  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60  Sorting block time: 00:00:00Returning block of 110 for bucket 59
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:00500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times85.80% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #9)" name="8" time="38.567950963974">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60Getting block 2 of 60  Reserving size (126) for bucket 2  Reserving size (126) for bucket 1Getting block 3 of 60  Calculating Z arrays for bucket 1Getting block 4 of 60  Reserving size (126) for bucket 4  Reserving size (126) for bucket 3  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 3Getting block 5 of 60  Entering block accumulator loop for bucket 2:  Entering block accumulator loop for bucket 1:  Calculating Z arrays for bucket 4  bucket 2: 10%  Entering block accumulator loop for bucket 3:Getting block 6 of 60  Entering block accumulator loop for bucket 4:  bucket 2: 20%  bucket 1: 10%  Reserving size (126) for bucket 6Getting block 7 of 60  Calculating Z arrays for bucket 6  bucket 2: 30%  Reserving size (126) for bucket 7  bucket 1: 20%  bucket 2: 40%  Reserving size (126) for bucket 5  bucket 2: 50%  bucket 3: 10%  bucket 4: 10%  Calculating Z arrays for bucket 5  Entering block accumulator loop for bucket 6:  bucket 2: 60%  Calculating Z arrays for bucket 7  bucket 1: 30%  bucket 2: 70%  bucket 6: 10%Getting block 8 of 60  bucket 2: 80%  bucket 4: 20%  Entering block accumulator loop for bucket 5:  bucket 2: 90%  Reserving size (126) for bucket 8  bucket 2: 100%  bucket 1: 40%  Calculating Z arrays for bucket 8  Sorting block of length 84 for bucket 2  (Using difference cover)  bucket 3: 20%  bucket 4: 30%  bucket 6: 20%  bucket 1: 50%  Entering block accumulator loop for bucket 7:  bucket 3: 30%  bucket 5: 10%  bucket 4: 40%  bucket 3: 40%  bucket 1: 60%  bucket 6: 30%  bucket 4: 50%  bucket 7: 10%  bucket 5: 20%  Entering block accumulator loop for bucket 8:  bucket 1: 70%  bucket 5: 30%  bucket 7: 20%  bucket 4: 60%  bucket 1: 80%  bucket 5: 40%  bucket 3: 50%  bucket 4: 70%  bucket 8: 10%  bucket 5: 50%  bucket 4: 80%  bucket 8: 20%  bucket 6: 40%  bucket 7: 30%  bucket 3: 60%  bucket 5: 60%  bucket 8: 30%  bucket 6: 50%  bucket 4: 90%  bucket 5: 70%  bucket 1: 90%  bucket 8: 40%  bucket 4: 100%  bucket 6: 60%  bucket 3: 70%  Sorting block of length 68 for bucket 4  bucket 6: 70%  (Using difference cover)  bucket 7: 40%  bucket 3: 80%  Sorting block time: 00:00:00  bucket 1: 100%  bucket 8: 50%Returning block of 85 for bucket 2  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 8: 60%  bucket 6: 80%  bucket 5: 80%  bucket 7: 50%  bucket 8: 70%  bucket 6: 90%  bucket 3: 90%  bucket 8: 80%  bucket 5: 90%  bucket 3: 100%  bucket 8: 90%  bucket 6: 100%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 5: 100%  bucket 8: 100%  Sorting block of length 94 for bucket 8  (Using difference cover)  Sorting block of length 63 for bucket 5  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 7: 60%  (Using difference cover)  bucket 7: 70%  bucket 7: 80%  bucket 7: 90%  bucket 7: 100%  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 91 for bucket 6  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 107 for bucket 3Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9  Entering block accumulator loop for bucket 9:  bucket 9: 10%  bucket 9: 20%Getting block 10 of 60  Reserving size (126) for bucket 10  bucket 9: 30%  Calculating Z arrays for bucket 10  bucket 9: 40%  bucket 9: 50%  bucket 9: 60%  Entering block accumulator loop for bucket 10:  bucket 9: 70%  bucket 10: 10%  bucket 9: 80%  bucket 10: 20%  bucket 9: 90%  bucket 10: 30%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 40%  bucket 10: 50%  bucket 10: 60%  bucket 10: 70%  bucket 10: 80%  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 12:  bucket 12: 10%  Entering block accumulator loop for bucket 11:  bucket 12: 20%  bucket 11: 10%  bucket 12: 30%  bucket 11: 20%  bucket 12: 40%  bucket 11: 30%  bucket 12: 50%  bucket 11: 40%  bucket 12: 60%  bucket 11: 50%  bucket 12: 70%  bucket 11: 60%  bucket 12: 80%  bucket 11: 70%  bucket 12: 90%  bucket 11: 80%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12  Sorting block time: 00:00:00Returning block of 96 for bucket 11Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13Getting block 14 of 60  Reserving size (126) for bucket 14  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 13:  bucket 13: 10%  Entering block accumulator loop for bucket 14:  bucket 13: 20%  bucket 14: 10%  bucket 13: 30%  bucket 14: 20%  bucket 13: 40%  bucket 14: 30%  bucket 13: 50%  bucket 14: 40%  bucket 13: 60%  bucket 14: 50%  bucket 13: 70%  bucket 14: 60%  bucket 13: 80%  bucket 14: 70%  bucket 13: 90%  bucket 14: 80%  bucket 14: 90%  bucket 13: 100%  bucket 14: 100%  Sorting block of length 85 for bucket 13  (Using difference cover)  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14  Sorting block time: 00:00:00Returning block of 86 for bucket 13Getting block 15 of 60  Reserving size (126) for bucket 15Getting block 16 of 60  Calculating Z arrays for bucket 15  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16  Entering block accumulator loop for bucket 15:  bucket 15: 10%  Entering block accumulator loop for bucket 16:  bucket 15: 20%  bucket 16: 10%  bucket 15: 30%  bucket 16: 20%  bucket 15: 40%  bucket 16: 30%  bucket 15: 50%  bucket 16: 40%  bucket 15: 60%  bucket 16: 50%  bucket 15: 70%  bucket 16: 60%  bucket 15: 80%  bucket 16: 70%  bucket 15: 90%  bucket 16: 80%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  bucket 16: 90%  bucket 16: 100%  Sorting block of length 100 for bucket 16  (Using difference cover)  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17Getting block 18 of 60  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  Entering block accumulator loop for bucket 17:  Entering block accumulator loop for bucket 18:  bucket 17: 10%  bucket 18: 10%  bucket 17: 20%  bucket 18: 20%  bucket 17: 30%  bucket 18: 30%  bucket 17: 40%  bucket 18: 40%  bucket 17: 50%  bucket 18: 50%  bucket 17: 60%  bucket 18: 60%  bucket 18: 70%  bucket 17: 70%  bucket 18: 80%  bucket 17: 80%  bucket 18: 90%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  bucket 17: 90%  bucket 17: 100%  Sorting block of length 39 for bucket 17  (Using difference cover)  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 40 for bucket 17Getting block 19 of 60  Reserving size (126) for bucket 19  Calculating Z arrays for bucket 19  Entering block accumulator loop for bucket 19:  bucket 19: 10%  bucket 19: 20%  bucket 19: 30%  bucket 19: 40%  bucket 19: 50%Getting block 20 of 60  bucket 19: 60%  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  bucket 19: 70%  bucket 19: 80%  Entering block accumulator loop for bucket 20:  bucket 19: 90%  bucket 20: 10%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 19  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21  Entering block accumulator loop for bucket 21:  bucket 21: 10%  bucket 21: 20%  bucket 21: 30%Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  bucket 21: 40%  bucket 21: 50%  Entering block accumulator loop for bucket 22:  bucket 21: 60%  bucket 21: 70%  bucket 22: 10%  bucket 21: 80%  bucket 22: 20%  bucket 21: 90%  bucket 22: 30%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 40%  bucket 22: 50%  bucket 22: 60%  bucket 22: 70%  bucket 22: 80%  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%Getting block 24 of 60  Reserving size (126) for bucket 24  bucket 23: 30%  Calculating Z arrays for bucket 24  bucket 23: 40%  bucket 23: 50%  Entering block accumulator loop for bucket 24:  bucket 23: 60%  bucket 23: 70%  bucket 24: 10%  bucket 23: 80%  bucket 24: 20%  bucket 23: 90%  bucket 24: 30%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  bucket 24: 40%  bucket 24: 50%  bucket 24: 60%  bucket 24: 70%  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 25:  bucket 25: 10%  bucket 25: 20%  bucket 25: 30%  bucket 25: 40%  bucket 25: 50%  bucket 25: 60%  bucket 25: 70%  bucket 25: 80%  bucket 25: 90%  bucket 25: 100%  Sorting block of length 66 for bucket 25  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26Getting block 27 of 60  Entering block accumulator loop for bucket 26:  Reserving size (126) for bucket 27  Calculating Z arrays for bucket 27  bucket 26: 10%  bucket 26: 20%  Entering block accumulator loop for bucket 27:  bucket 26: 30%  bucket 27: 10%  bucket 26: 40%  bucket 27: 20%  bucket 26: 50%  bucket 27: 30%  bucket 26: 60%  bucket 27: 40%  bucket 26: 70%  bucket 27: 50%  bucket 26: 80%  bucket 27: 60%  bucket 26: 90%  bucket 27: 70%  bucket 26: 100%  Sorting block of length 107 for bucket 26  bucket 27: 80%  (Using difference cover)  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%Getting block 29 of 60  bucket 28: 50%  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29  bucket 28: 60%  Entering block accumulator loop for bucket 29:  bucket 28: 70%  bucket 29: 10%  bucket 28: 80%  bucket 29: 20%  bucket 28: 90%  bucket 29: 30%  bucket 28: 100%  bucket 29: 40%  Sorting block of length 106 for bucket 28  (Using difference cover)  bucket 29: 50%  bucket 29: 60%  bucket 29: 70%  bucket 29: 80%  bucket 29: 90%  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28  Sorting block time: 00:00:00Returning block of 52 for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 30:  bucket 30: 10%  bucket 30: 20%  bucket 30: 30%  bucket 30: 40%  bucket 30: 50%  bucket 30: 60%  bucket 30: 70%  bucket 30: 80%  bucket 30: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31Getting block 32 of 60  Reserving size (126) for bucket 32  Entering block accumulator loop for bucket 31:  Calculating Z arrays for bucket 32  bucket 31: 10%  bucket 31: 20%  Entering block accumulator loop for bucket 32:  bucket 31: 30%  bucket 31: 40%  bucket 32: 10%  bucket 31: 50%  bucket 32: 20%  bucket 31: 60%  bucket 32: 30%  bucket 31: 70%  bucket 32: 40%  bucket 31: 80%  bucket 32: 50%  bucket 31: 90%  bucket 32: 60%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 111 for bucket 31  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34  bucket 33: 20%  bucket 33: 30%  Entering block accumulator loop for bucket 34:  bucket 33: 40%  bucket 34: 10%  bucket 33: 50%  bucket 34: 20%  bucket 33: 60%  bucket 34: 30%  bucket 33: 70%  bucket 34: 40%  bucket 33: 80%  bucket 34: 50%  bucket 33: 90%  bucket 34: 60%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  bucket 34: 70%  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 35:  bucket 35: 10%  bucket 35: 20%  bucket 35: 30%  bucket 35: 40%  bucket 35: 50%  bucket 35: 60%  bucket 35: 70%  bucket 35: 80%  bucket 35: 90%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36  Entering block accumulator loop for bucket 36:  bucket 36: 10%Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  bucket 36: 20%  bucket 36: 30%  bucket 36: 40%  Entering block accumulator loop for bucket 37:  bucket 36: 50%  bucket 36: 60%  bucket 37: 10%  bucket 36: 70%  bucket 37: 20%  bucket 36: 80%  bucket 37: 30%  bucket 36: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 37: 40%  bucket 37: 50%  bucket 37: 60%  bucket 37: 70%  bucket 37: 80%  bucket 37: 90%  bucket 37: 100%  Sorting block time: 00:00:00  Sorting block of length 59 for bucket 37Returning block of 121 for bucket 36  (Using difference cover)  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%Getting block 39 of 60  bucket 38: 90%  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Entering block accumulator loop for bucket 39:  bucket 39: 10%  bucket 39: 20%  bucket 39: 30%  bucket 39: 40%  bucket 39: 50%  Sorting block time: 00:00:00  bucket 39: 60%Returning block of 118 for bucket 38  bucket 39: 70%  bucket 39: 80%  bucket 39: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 40:  bucket 40: 10%  bucket 40: 20%  bucket 40: 30%  bucket 40: 40%  bucket 40: 50%  bucket 40: 60%  bucket 40: 70%  bucket 40: 80%  bucket 40: 90%  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41  Entering block accumulator loop for bucket 41:Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  bucket 41: 10%  Entering block accumulator loop for bucket 42:  bucket 41: 20%  bucket 42: 10%  bucket 41: 30%  bucket 42: 20%  bucket 41: 40%  bucket 41: 50%  bucket 42: 30%  bucket 41: 60%  bucket 42: 40%  bucket 41: 70%  bucket 42: 50%  bucket 41: 80%  bucket 42: 60%  bucket 41: 90%  bucket 42: 70%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 80%  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  Entering block accumulator loop for bucket 44:  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%  bucket 44: 50%  bucket 44: 60%  bucket 44: 70%  bucket 44: 80%  Sorting block time: 00:00:00Returning block of 122 for bucket 43  bucket 44: 90%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  Entering block accumulator loop for bucket 45:  bucket 45: 10%  bucket 45: 20%  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  bucket 46: 70%  bucket 46: 80%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)Getting block 47 of 60  Sorting block time: 00:00:00  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47Returning block of 70 for bucket 46  Entering block accumulator loop for bucket 47:  bucket 47: 10%  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)Getting block 49 of 60  Reserving size (126) for bucket 49  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 49:  bucket 49: 10%  bucket 49: 20%  bucket 49: 30%  bucket 49: 40%  bucket 49: 50%  Sorting block time: 00:00:00Returning block of 114 for bucket 48  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Entering block accumulator loop for bucket 50:  bucket 50: 10%  bucket 50: 20%  bucket 50: 30%  bucket 50: 40%  bucket 50: 50%  bucket 50: 60%  bucket 50: 70%  bucket 50: 80%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51  Entering block accumulator loop for bucket 51:  bucket 51: 10%  bucket 51: 20%  bucket 51: 30%  bucket 51: 40%  bucket 51: 50%  bucket 51: 60%  bucket 51: 70%  bucket 51: 80%  bucket 51: 90%  bucket 51: 100%  Sorting block of length 91 for bucket 51  (Using difference cover)  Sorting block time: 00:00:00Getting block 52 of 60  Reserving size (126) for bucket 52Returning block of 92 for bucket 51  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 52:  bucket 52: 10%  bucket 52: 20%  bucket 52: 30%  bucket 52: 40%  bucket 52: 50%  bucket 52: 60%  bucket 52: 70%  bucket 52: 80%  bucket 52: 90%  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53  Entering block accumulator loop for bucket 53:  bucket 53: 10%Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  bucket 53: 20%  Entering block accumulator loop for bucket 54:  bucket 53: 30%  bucket 54: 10%  bucket 53: 40%  bucket 54: 20%  bucket 53: 50%  bucket 54: 30%  bucket 53: 60%  bucket 54: 40%  bucket 53: 70%  bucket 54: 50%  bucket 53: 80%  bucket 54: 60%  bucket 54: 70%  bucket 53: 90%  bucket 54: 80%  bucket 53: 100%  bucket 54: 90%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Entering block accumulator loop for bucket 56:  bucket 56: 10%  Entering block accumulator loop for bucket 57:  bucket 56: 20%  bucket 56: 30%  bucket 57: 10%  bucket 56: 40%  bucket 56: 50%  bucket 57: 20%  bucket 56: 60%  bucket 57: 30%  bucket 56: 70%  bucket 57: 40%  bucket 56: 80%  bucket 57: 50%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 56 for bucket 56  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Entering block accumulator loop for bucket 58:  Calculating Z arrays for bucket 59  bucket 58: 10%  Entering block accumulator loop for bucket 59:  bucket 58: 20%  bucket 58: 30%  bucket 59: 10%  bucket 58: 40%  bucket 59: 20%  bucket 58: 50%  bucket 58: 60%  bucket 59: 30%  bucket 58: 70%  bucket 59: 40%  bucket 58: 80%  bucket 59: 50%  bucket 58: 90%  bucket 59: 60%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 59: 70%  bucket 59: 80%  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:01500 reads; of these:  500 (100.00%) were paired; of these:    71 (14.20%) aligned concordantly 0 times    429 (85.80%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times85.80% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #10)" name="9" time="10.882364749908447">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 9, "time_seconds": 10.882364749908447, "tool_id": "hisat2", "tool_version": "2.2.1+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="hisat2 (Test #10)" name="9" time="38.23121118545532">
        
            
            <system-out><![CDATA[
            Building DifferenceCoverSample  Building sPrime  Building sPrimeOrder  V-Sorting samples  V-Sorting samples time: 00:00:00  Allocating rank array  Ranking v-sort output  Ranking v-sort output time: 00:00:00  Invoking Larsson-Sadakane on ranks  Invoking Larsson-Sadakane on ranks time: 00:00:00  Sanity-checking and returningBuilding samplesReserving space for 88 sample suffixesGenerating random suffixesQSorting 88 sample offsets, eliminating duplicatesQSorting sample offsets, eliminating duplicates time: 00:00:00Multikey QSorting 88 samples  (Using difference cover)  Multikey QSorting samples time: 00:00:00Calculating bucket sizesSplitting and merging  Splitting and merging time: 00:00:00Split 8, merged 39; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 6, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Split 2, merged 3; iterating...Splitting and merging  Splitting and merging time: 00:00:00Avg bucket size: 88.7833 (target: 125)Getting block 1 of 60  Reserving size (126) for bucket 1  Calculating Z arrays for bucket 1Getting block 2 of 60  Reserving size (126) for bucket 2  Entering block accumulator loop for bucket 1:Getting block 3 of 60  Reserving size (126) for bucket 3  bucket 1: 10%Getting block 4 of 60  Reserving size (126) for bucket 4  bucket 1: 20%  Calculating Z arrays for bucket 4  Calculating Z arrays for bucket 3Getting block 5 of 60  Entering block accumulator loop for bucket 4:  bucket 1: 30%  Reserving size (126) for bucket 5  Entering block accumulator loop for bucket 3:  Calculating Z arrays for bucket 2  Calculating Z arrays for bucket 5  bucket 3: 10%Getting block 6 of 60Getting block 7 of 60  Reserving size (126) for bucket 7  Reserving size (126) for bucket 6  Entering block accumulator loop for bucket 5:  bucket 3: 20%Getting block 8 of 60  bucket 5: 10%  bucket 3: 30%  Reserving size (126) for bucket 8  bucket 5: 20%  bucket 4: 10%  Calculating Z arrays for bucket 7  bucket 1: 40%  Calculating Z arrays for bucket 8  bucket 3: 40%  bucket 4: 20%  Calculating Z arrays for bucket 6  bucket 3: 50%  bucket 5: 30%  Entering block accumulator loop for bucket 2:  bucket 5: 40%  bucket 3: 60%  Entering block accumulator loop for bucket 6:  bucket 2: 10%  bucket 4: 30%  bucket 3: 70%  bucket 6: 10%  bucket 5: 50%  Entering block accumulator loop for bucket 8:  bucket 6: 20%  bucket 5: 60%  bucket 2: 20%  bucket 3: 80%  bucket 6: 30%  bucket 5: 70%  bucket 4: 40%  Entering block accumulator loop for bucket 7:  bucket 3: 90%  bucket 8: 10%  bucket 5: 80%  bucket 1: 50%  bucket 7: 10%  bucket 5: 90%  bucket 4: 50%  bucket 6: 40%  bucket 8: 20%  bucket 3: 100%  bucket 4: 60%  bucket 1: 60%  bucket 2: 30%  bucket 6: 50%  bucket 5: 100%  Sorting block of length 106 for bucket 3  (Using difference cover)  bucket 4: 70%  bucket 8: 30%  bucket 2: 40%  bucket 7: 20%  bucket 4: 80%  bucket 8: 40%  bucket 2: 50%  bucket 6: 60%  bucket 4: 90%  bucket 7: 30%  bucket 6: 70%  bucket 1: 70%  bucket 8: 50%  bucket 2: 60%  bucket 4: 100%  bucket 6: 80%  Sorting block of length 63 for bucket 5  bucket 2: 70%  (Using difference cover)  bucket 7: 40%  bucket 2: 80%  bucket 1: 80%  bucket 6: 90%  bucket 2: 90%  bucket 7: 50%  bucket 6: 100%  Sorting block of length 68 for bucket 4  bucket 2: 100%  (Using difference cover)  bucket 8: 60%  bucket 1: 90%  Sorting block of length 84 for bucket 2  (Using difference cover)  Sorting block of length 90 for bucket 6  (Using difference cover)  bucket 8: 70%  bucket 7: 60%  bucket 1: 100%  Sorting block of length 42 for bucket 1  (Using difference cover)  bucket 8: 80%  bucket 7: 70%  bucket 7: 80%  bucket 8: 90%  bucket 7: 90%  bucket 8: 100%  Sorting block of length 94 for bucket 8  bucket 7: 100%  (Using difference cover)  Sorting block of length 75 for bucket 7  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 3  Sorting block time: 00:00:00Returning block of 43 for bucket 1  Sorting block time: 00:00:00Returning block of 64 for bucket 5  Sorting block time: 00:00:00Returning block of 69 for bucket 4  Sorting block time: 00:00:00Returning block of 95 for bucket 8  Sorting block time: 00:00:00Returning block of 85 for bucket 2  Sorting block time: 00:00:00Returning block of 76 for bucket 7  Sorting block time: 00:00:00Returning block of 91 for bucket 6Getting block 9 of 60  Reserving size (126) for bucket 9  Calculating Z arrays for bucket 9Getting block 10 of 60  Reserving size (126) for bucket 10  Calculating Z arrays for bucket 10  Entering block accumulator loop for bucket 9:  bucket 9: 10%  Entering block accumulator loop for bucket 10:  bucket 9: 20%  bucket 9: 30%  bucket 10: 10%  bucket 9: 40%  bucket 10: 20%  bucket 9: 50%  bucket 10: 30%  bucket 9: 60%  bucket 10: 40%  bucket 9: 70%  bucket 10: 50%  bucket 9: 80%  bucket 10: 60%  bucket 9: 90%  bucket 10: 70%  bucket 10: 80%  bucket 9: 100%  Sorting block of length 124 for bucket 9  (Using difference cover)  bucket 10: 90%  bucket 10: 100%  Sorting block of length 89 for bucket 10  (Using difference cover)  Sorting block time: 00:00:00Returning block of 125 for bucket 9  Sorting block time: 00:00:00Returning block of 90 for bucket 10Getting block 11 of 60  Reserving size (126) for bucket 11  Calculating Z arrays for bucket 11  Entering block accumulator loop for bucket 11:  bucket 11: 10%  bucket 11: 20%  bucket 11: 30%  bucket 11: 40%  bucket 11: 50%  bucket 11: 60%  bucket 11: 70%  bucket 11: 80%  bucket 11: 90%  bucket 11: 100%  Sorting block of length 95 for bucket 11  (Using difference cover)Getting block 12 of 60  Reserving size (126) for bucket 12  Calculating Z arrays for bucket 12  Entering block accumulator loop for bucket 12:  Sorting block time: 00:00:00Returning block of 96 for bucket 11  bucket 12: 10%  bucket 12: 20%  bucket 12: 30%  bucket 12: 40%  bucket 12: 50%  bucket 12: 60%  bucket 12: 70%  bucket 12: 80%  bucket 12: 90%  bucket 12: 100%  Sorting block of length 82 for bucket 12  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 12Getting block 13 of 60  Reserving size (126) for bucket 13  Calculating Z arrays for bucket 13  Entering block accumulator loop for bucket 13:  bucket 13: 10%  bucket 13: 20%  bucket 13: 30%  bucket 13: 40%  bucket 13: 50%  bucket 13: 60%  bucket 13: 70%  bucket 13: 80%  bucket 13: 90%  bucket 13: 100%Getting block 14 of 60  Reserving size (126) for bucket 14  Sorting block of length 85 for bucket 13  (Using difference cover)  Calculating Z arrays for bucket 14  Entering block accumulator loop for bucket 14:  bucket 14: 10%  bucket 14: 20%  bucket 14: 30%  Sorting block time: 00:00:01Returning block of 86 for bucket 13  bucket 14: 40%  bucket 14: 50%  bucket 14: 60%  bucket 14: 70%  bucket 14: 80%  bucket 14: 90%  bucket 14: 100%  Sorting block of length 82 for bucket 14  (Using difference cover)  Sorting block time: 00:00:00Returning block of 83 for bucket 14Getting block 15 of 60  Reserving size (126) for bucket 15  Calculating Z arrays for bucket 15  Entering block accumulator loop for bucket 15:  bucket 15: 10%  bucket 15: 20%  bucket 15: 30%  bucket 15: 40%  bucket 15: 50%  bucket 15: 60%  bucket 15: 70%  bucket 15: 80%  bucket 15: 90%  bucket 15: 100%  Sorting block of length 68 for bucket 15  (Using difference cover)  Sorting block time: 00:00:00Returning block of 69 for bucket 15Getting block 16 of 60  Reserving size (126) for bucket 16  Calculating Z arrays for bucket 16Getting block 17 of 60  Reserving size (126) for bucket 17  Calculating Z arrays for bucket 17  Entering block accumulator loop for bucket 16:  bucket 16: 10%  Entering block accumulator loop for bucket 17:  bucket 16: 20%Getting block 18 of 60  bucket 16: 30%  bucket 17: 10%  Reserving size (126) for bucket 18  Calculating Z arrays for bucket 18  bucket 16: 40%Getting block 19 of 60  bucket 16: 50%  Entering block accumulator loop for bucket 18:  bucket 17: 20%  Reserving size (126) for bucket 19  bucket 16: 60%  Calculating Z arrays for bucket 19  bucket 18: 10%  bucket 17: 30%  bucket 16: 70%  bucket 18: 20%  bucket 17: 40%  bucket 16: 80%  Entering block accumulator loop for bucket 19:  bucket 17: 50%  bucket 18: 30%  bucket 16: 90%  bucket 19: 10%  bucket 18: 40%  bucket 17: 60%  bucket 16: 100%  bucket 18: 50%  bucket 17: 70%  Sorting block of length 100 for bucket 16  bucket 18: 60%  bucket 19: 20%  bucket 18: 70%  bucket 17: 80%  (Using difference cover)  bucket 19: 30%  bucket 18: 80%  bucket 17: 90%  bucket 19: 40%  bucket 18: 90%  bucket 17: 100%  bucket 19: 50%  bucket 18: 100%  Sorting block of length 122 for bucket 18  (Using difference cover)  Sorting block of length 39 for bucket 17  (Using difference cover)  bucket 19: 60%  bucket 19: 70%  bucket 19: 80%  bucket 19: 90%  bucket 19: 100%  Sorting block of length 107 for bucket 19  (Using difference cover)  Sorting block time: 00:00:00Returning block of 40 for bucket 17  Sorting block time: 00:00:00Returning block of 101 for bucket 16  Sorting block time: 00:00:00Returning block of 123 for bucket 18  Sorting block time: 00:00:00Returning block of 108 for bucket 19Getting block 20 of 60  Reserving size (126) for bucket 20  Calculating Z arrays for bucket 20  Entering block accumulator loop for bucket 20:  bucket 20: 10%  bucket 20: 20%  bucket 20: 30%  bucket 20: 40%  bucket 20: 50%  bucket 20: 60%  bucket 20: 70%  bucket 20: 80%  bucket 20: 90%  bucket 20: 100%  Sorting block of length 97 for bucket 20  (Using difference cover)  Sorting block time: 00:00:00Returning block of 98 for bucket 20Getting block 21 of 60  Reserving size (126) for bucket 21  Calculating Z arrays for bucket 21Getting block 22 of 60  Reserving size (126) for bucket 22  Calculating Z arrays for bucket 22  Entering block accumulator loop for bucket 21:  bucket 21: 10%  Entering block accumulator loop for bucket 22:  bucket 21: 20%  bucket 22: 10%  bucket 21: 30%  bucket 22: 20%  bucket 21: 40%  bucket 22: 30%  bucket 21: 50%  bucket 22: 40%  bucket 21: 60%  bucket 22: 50%  bucket 21: 70%  bucket 22: 60%  bucket 21: 80%  bucket 22: 70%  bucket 21: 90%  bucket 22: 80%  bucket 21: 100%  Sorting block of length 54 for bucket 21  (Using difference cover)  bucket 22: 90%  bucket 22: 100%  Sorting block of length 80 for bucket 22  (Using difference cover)  Sorting block time: 00:00:00Returning block of 55 for bucket 21  Sorting block time: 00:00:00Returning block of 81 for bucket 22Getting block 23 of 60  Reserving size (126) for bucket 23  Calculating Z arrays for bucket 23  Entering block accumulator loop for bucket 23:  bucket 23: 10%  bucket 23: 20%  bucket 23: 30%  bucket 23: 40%  bucket 23: 50%  bucket 23: 60%  bucket 23: 70%  bucket 23: 80%  bucket 23: 90%  bucket 23: 100%  Sorting block of length 64 for bucket 23  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 23Getting block 24 of 60  Reserving size (126) for bucket 24  Calculating Z arrays for bucket 24Getting block 25 of 60  Reserving size (126) for bucket 25  Calculating Z arrays for bucket 25  Entering block accumulator loop for bucket 24:  Entering block accumulator loop for bucket 25:  bucket 24: 10%  bucket 25: 10%  bucket 24: 20%  bucket 25: 20%  bucket 24: 30%  bucket 25: 30%  bucket 25: 40%  bucket 24: 40%  bucket 25: 50%  bucket 25: 60%  bucket 24: 50%  bucket 25: 70%  bucket 25: 80%  bucket 24: 60%  bucket 25: 90%  bucket 25: 100%  bucket 24: 70%  Sorting block of length 66 for bucket 25  (Using difference cover)  bucket 24: 80%  bucket 24: 90%  bucket 24: 100%  Sorting block of length 68 for bucket 24  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 25  Sorting block time: 00:00:00Returning block of 69 for bucket 24Getting block 26 of 60  Reserving size (126) for bucket 26  Calculating Z arrays for bucket 26  Entering block accumulator loop for bucket 26:Getting block 27 of 60  Reserving size (126) for bucket 27  bucket 26: 10%  Calculating Z arrays for bucket 27  bucket 26: 20%  Entering block accumulator loop for bucket 27:  bucket 26: 30%  bucket 26: 40%  bucket 27: 10%  bucket 26: 50%  bucket 27: 20%  bucket 26: 60%  bucket 26: 70%  bucket 27: 30%  bucket 26: 80%  bucket 27: 40%  bucket 26: 90%  bucket 27: 50%  bucket 26: 100%  bucket 27: 60%  Sorting block of length 107 for bucket 26  (Using difference cover)  bucket 27: 70%  bucket 27: 80%  bucket 27: 90%  bucket 27: 100%  Sorting block of length 119 for bucket 27  (Using difference cover)  Sorting block time: 00:00:00Returning block of 108 for bucket 26  Sorting block time: 00:00:00Returning block of 120 for bucket 27Getting block 28 of 60  Reserving size (126) for bucket 28  Calculating Z arrays for bucket 28  Entering block accumulator loop for bucket 28:  bucket 28: 10%  bucket 28: 20%  bucket 28: 30%  bucket 28: 40%  bucket 28: 50%  bucket 28: 60%  bucket 28: 70%  bucket 28: 80%  bucket 28: 90%  bucket 28: 100%  Sorting block of length 106 for bucket 28  (Using difference cover)  Sorting block time: 00:00:00Returning block of 107 for bucket 28Getting block 29 of 60  Reserving size (126) for bucket 29  Calculating Z arrays for bucket 29Getting block 30 of 60  Reserving size (126) for bucket 30  Calculating Z arrays for bucket 30  Entering block accumulator loop for bucket 29:  Entering block accumulator loop for bucket 30:  bucket 29: 10%  bucket 30: 10%  bucket 29: 20%  bucket 30: 20%  bucket 29: 30%  bucket 30: 30%  bucket 29: 40%  bucket 30: 40%  bucket 29: 50%  bucket 30: 50%  bucket 30: 60%  bucket 29: 60%  bucket 30: 70%  bucket 29: 70%  bucket 30: 80%  bucket 29: 80%  bucket 30: 90%  bucket 29: 90%  bucket 30: 100%  Sorting block of length 124 for bucket 30  (Using difference cover)  bucket 29: 100%  Sorting block of length 51 for bucket 29  (Using difference cover)  Sorting block time: 00:00:00Returning block of 52 for bucket 29  Sorting block time: 00:00:00Returning block of 125 for bucket 30Getting block 31 of 60  Reserving size (126) for bucket 31  Calculating Z arrays for bucket 31  Entering block accumulator loop for bucket 31:  bucket 31: 10%  bucket 31: 20%  bucket 31: 30%  bucket 31: 40%  bucket 31: 50%  bucket 31: 60%  bucket 31: 70%  bucket 31: 80%  bucket 31: 90%  bucket 31: 100%  Sorting block of length 110 for bucket 31  (Using difference cover)Getting block 32 of 60  Reserving size (126) for bucket 32  Calculating Z arrays for bucket 32  Entering block accumulator loop for bucket 32:  bucket 32: 10%  bucket 32: 20%  bucket 32: 30%  Sorting block time: 00:00:00Returning block of 111 for bucket 31  bucket 32: 40%  bucket 32: 50%  bucket 32: 60%  bucket 32: 70%  bucket 32: 80%  bucket 32: 90%  bucket 32: 100%  Sorting block of length 125 for bucket 32  (Using difference cover)  Sorting block time: 00:00:00Returning block of 126 for bucket 32Getting block 33 of 60  Reserving size (126) for bucket 33  Calculating Z arrays for bucket 33  Entering block accumulator loop for bucket 33:  bucket 33: 10%  bucket 33: 20%  bucket 33: 30%  bucket 33: 40%  bucket 33: 50%  bucket 33: 60%  bucket 33: 70%  bucket 33: 80%  bucket 33: 90%  bucket 33: 100%  Sorting block of length 44 for bucket 33  (Using difference cover)  Sorting block time: 00:00:00Returning block of 45 for bucket 33Getting block 34 of 60  Reserving size (126) for bucket 34  Calculating Z arrays for bucket 34Getting block 35 of 60  Reserving size (126) for bucket 35  Calculating Z arrays for bucket 35  Entering block accumulator loop for bucket 34:  Entering block accumulator loop for bucket 35:  bucket 34: 10%  bucket 35: 10%  bucket 34: 20%  bucket 35: 20%  bucket 35: 30%  bucket 34: 30%  bucket 35: 40%  bucket 34: 40%  bucket 35: 50%  bucket 35: 60%  bucket 34: 50%  bucket 35: 70%  bucket 34: 60%  bucket 35: 80%  bucket 35: 90%  bucket 34: 70%  bucket 35: 100%  Sorting block of length 112 for bucket 35  (Using difference cover)  bucket 34: 80%  bucket 34: 90%  bucket 34: 100%  Sorting block of length 122 for bucket 34  (Using difference cover)  Sorting block time: 00:00:00Returning block of 113 for bucket 35  Sorting block time: 00:00:00Returning block of 123 for bucket 34Getting block 36 of 60  Reserving size (126) for bucket 36  Calculating Z arrays for bucket 36Getting block 37 of 60  Reserving size (126) for bucket 37  Calculating Z arrays for bucket 37  Entering block accumulator loop for bucket 36:  Entering block accumulator loop for bucket 37:  bucket 36: 10%  bucket 37: 10%  bucket 36: 20%  bucket 37: 20%  bucket 36: 30%  bucket 37: 30%  bucket 36: 40%  bucket 37: 40%  bucket 36: 50%  bucket 37: 50%  bucket 36: 60%  bucket 37: 60%  bucket 36: 70%  bucket 37: 70%  bucket 36: 80%  bucket 37: 80%  bucket 36: 90%  bucket 37: 90%  bucket 36: 100%  Sorting block of length 120 for bucket 36  (Using difference cover)  bucket 37: 100%  Sorting block of length 59 for bucket 37  (Using difference cover)  Sorting block time: 00:00:00Returning block of 121 for bucket 36  Sorting block time: 00:00:00Returning block of 60 for bucket 37Getting block 38 of 60  Reserving size (126) for bucket 38  Calculating Z arrays for bucket 38  Entering block accumulator loop for bucket 38:  bucket 38: 10%  bucket 38: 20%  bucket 38: 30%  bucket 38: 40%  bucket 38: 50%  bucket 38: 60%  bucket 38: 70%  bucket 38: 80%  bucket 38: 90%  bucket 38: 100%  Sorting block of length 117 for bucket 38  (Using difference cover)  Sorting block time: 00:00:00Returning block of 118 for bucket 38Getting block 39 of 60  Reserving size (126) for bucket 39  Calculating Z arrays for bucket 39Getting block 40 of 60  Reserving size (126) for bucket 40  Calculating Z arrays for bucket 40  Entering block accumulator loop for bucket 39:  bucket 39: 10%  Entering block accumulator loop for bucket 40:  bucket 39: 20%  bucket 40: 10%  bucket 39: 30%  bucket 40: 20%  bucket 39: 40%  bucket 40: 30%  bucket 39: 50%  bucket 40: 40%  bucket 40: 50%  bucket 39: 60%  bucket 40: 60%  bucket 39: 70%  bucket 40: 70%  bucket 39: 80%  bucket 40: 80%  bucket 39: 90%  bucket 40: 90%  bucket 39: 100%  Sorting block of length 125 for bucket 39  (Using difference cover)  bucket 40: 100%  Sorting block of length 41 for bucket 40  (Using difference cover)  Sorting block time: 00:00:00Returning block of 42 for bucket 40  Sorting block time: 00:00:00Returning block of 126 for bucket 39Getting block 41 of 60  Reserving size (126) for bucket 41  Calculating Z arrays for bucket 41Getting block 42 of 60  Reserving size (126) for bucket 42  Calculating Z arrays for bucket 42  Entering block accumulator loop for bucket 41:  Entering block accumulator loop for bucket 42:  bucket 41: 10%  bucket 41: 20%  bucket 42: 10%  bucket 41: 30%  bucket 42: 20%  bucket 41: 40%  bucket 42: 30%  bucket 41: 50%  bucket 42: 40%  bucket 41: 60%  bucket 42: 50%  bucket 41: 70%  bucket 42: 60%  bucket 41: 80%  bucket 42: 70%  bucket 41: 90%  bucket 42: 80%  bucket 41: 100%  Sorting block of length 88 for bucket 41  (Using difference cover)  bucket 42: 90%  bucket 42: 100%  Sorting block of length 119 for bucket 42  (Using difference cover)  Sorting block time: 00:00:00Returning block of 89 for bucket 41  Sorting block time: 00:00:00Returning block of 120 for bucket 42Getting block 43 of 60  Reserving size (126) for bucket 43  Calculating Z arrays for bucket 43  Entering block accumulator loop for bucket 43:  bucket 43: 10%  bucket 43: 20%  bucket 43: 30%  bucket 43: 40%  bucket 43: 50%  bucket 43: 60%  bucket 43: 70%  bucket 43: 80%  bucket 43: 90%  bucket 43: 100%  Sorting block of length 121 for bucket 43  (Using difference cover)  Sorting block time: 00:00:00Returning block of 122 for bucket 43Getting block 44 of 60  Reserving size (126) for bucket 44  Calculating Z arrays for bucket 44  Entering block accumulator loop for bucket 44:  bucket 44: 10%  bucket 44: 20%  bucket 44: 30%  bucket 44: 40%Getting block 45 of 60  Reserving size (126) for bucket 45  Calculating Z arrays for bucket 45  bucket 44: 50%  bucket 44: 60%  Entering block accumulator loop for bucket 45:  bucket 44: 70%  bucket 44: 80%  bucket 45: 10%  bucket 44: 90%  bucket 45: 20%  bucket 44: 100%  Sorting block of length 66 for bucket 44  (Using difference cover)  bucket 45: 30%  bucket 45: 40%  bucket 45: 50%  bucket 45: 60%  bucket 45: 70%  bucket 45: 80%  bucket 45: 90%  bucket 45: 100%  Sorting block of length 79 for bucket 45  (Using difference cover)  Sorting block time: 00:00:00Returning block of 67 for bucket 44  Sorting block time: 00:00:00Returning block of 80 for bucket 45Getting block 46 of 60  Reserving size (126) for bucket 46  Calculating Z arrays for bucket 46  Entering block accumulator loop for bucket 46:  bucket 46: 10%  bucket 46: 20%  bucket 46: 30%Getting block 47 of 60  Reserving size (126) for bucket 47  Calculating Z arrays for bucket 47  bucket 46: 40%  bucket 46: 50%  bucket 46: 60%  Entering block accumulator loop for bucket 47:  bucket 46: 70%  bucket 46: 80%  bucket 47: 10%  bucket 46: 90%  bucket 46: 100%  Sorting block of length 69 for bucket 46  (Using difference cover)  bucket 47: 20%  bucket 47: 30%  bucket 47: 40%  bucket 47: 50%  bucket 47: 60%  bucket 47: 70%  Sorting block time: 00:00:00Returning block of 70 for bucket 46  bucket 47: 80%  bucket 47: 90%  bucket 47: 100%  Sorting block of length 83 for bucket 47  (Using difference cover)  Sorting block time: 00:00:00Returning block of 84 for bucket 47Getting block 48 of 60  Reserving size (126) for bucket 48  Calculating Z arrays for bucket 48  Entering block accumulator loop for bucket 48:  bucket 48: 10%  bucket 48: 20%  bucket 48: 30%  bucket 48: 40%  bucket 48: 50%  bucket 48: 60%  bucket 48: 70%  bucket 48: 80%  bucket 48: 90%  bucket 48: 100%  Sorting block of length 113 for bucket 48  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 48Getting block 49 of 60  Reserving size (126) for bucket 49Getting block 50 of 60  Reserving size (126) for bucket 50  Calculating Z arrays for bucket 50  Calculating Z arrays for bucket 49  Entering block accumulator loop for bucket 50:  Entering block accumulator loop for bucket 49:  bucket 50: 10%  bucket 50: 20%  bucket 49: 10%  bucket 50: 30%  bucket 49: 20%  bucket 50: 40%  bucket 50: 50%  bucket 49: 30%  bucket 50: 60%  bucket 50: 70%  bucket 49: 40%  bucket 50: 80%  bucket 49: 50%  bucket 50: 90%  bucket 50: 100%  Sorting block of length 108 for bucket 50  (Using difference cover)  bucket 49: 60%  bucket 49: 70%  bucket 49: 80%  bucket 49: 90%  bucket 49: 100%  Sorting block of length 74 for bucket 49  (Using difference cover)  Sorting block time: 00:00:00Returning block of 109 for bucket 50  Sorting block time: 00:00:00Returning block of 75 for bucket 49Getting block 51 of 60  Reserving size (126) for bucket 51  Calculating Z arrays for bucket 51Getting block 52 of 60  Reserving size (126) for bucket 52  Calculating Z arrays for bucket 52  Entering block accumulator loop for bucket 51:  Entering block accumulator loop for bucket 52:  bucket 51: 10%  bucket 52: 10%  bucket 51: 20%  bucket 51: 30%  bucket 52: 20%  bucket 51: 40%  bucket 52: 30%  bucket 51: 50%  bucket 52: 40%  bucket 51: 60%  bucket 52: 50%  bucket 51: 70%  bucket 52: 60%  bucket 51: 80%  bucket 52: 70%  bucket 51: 90%  bucket 52: 80%  bucket 51: 100%  bucket 52: 90%  Sorting block of length 91 for bucket 51  (Using difference cover)  bucket 52: 100%  Sorting block of length 106 for bucket 52  (Using difference cover)  Sorting block time: 00:00:00Returning block of 92 for bucket 51  Sorting block time: 00:00:00Returning block of 107 for bucket 52Getting block 53 of 60  Reserving size (126) for bucket 53  Calculating Z arrays for bucket 53Getting block 54 of 60  Reserving size (126) for bucket 54  Calculating Z arrays for bucket 54  Entering block accumulator loop for bucket 53:  bucket 53: 10%  Entering block accumulator loop for bucket 54:  bucket 53: 20%  bucket 54: 10%  bucket 53: 30%  bucket 54: 20%  bucket 53: 40%  bucket 54: 30%  bucket 53: 50%  bucket 54: 40%  bucket 53: 60%  bucket 54: 50%  bucket 53: 70%  bucket 54: 60%  bucket 53: 80%  bucket 54: 70%  bucket 53: 90%  bucket 54: 80%  bucket 54: 90%  bucket 53: 100%  Sorting block of length 78 for bucket 53  (Using difference cover)  bucket 54: 100%  Sorting block of length 64 for bucket 54  (Using difference cover)  Sorting block time: 00:00:00Returning block of 65 for bucket 54  Sorting block time: 00:00:00Returning block of 79 for bucket 53Getting block 55 of 60  Reserving size (126) for bucket 55  Calculating Z arrays for bucket 55  Entering block accumulator loop for bucket 55:  bucket 55: 10%  bucket 55: 20%  bucket 55: 30%  bucket 55: 40%  bucket 55: 50%  bucket 55: 60%  bucket 55: 70%  bucket 55: 80%  bucket 55: 90%  bucket 55: 100%  Sorting block of length 79 for bucket 55  (Using difference cover)  Sorting block time: 00:00:00Returning block of 80 for bucket 55Getting block 56 of 60  Reserving size (126) for bucket 56  Calculating Z arrays for bucket 56  Entering block accumulator loop for bucket 56:  bucket 56: 10%  bucket 56: 20%  bucket 56: 30%  bucket 56: 40%  bucket 56: 50%  bucket 56: 60%  bucket 56: 70%  bucket 56: 80%  bucket 56: 90%  bucket 56: 100%  Sorting block of length 55 for bucket 56  (Using difference cover)Getting block 57 of 60  Reserving size (126) for bucket 57  Calculating Z arrays for bucket 57  Sorting block time: 00:00:00  Entering block accumulator loop for bucket 57:Returning block of 56 for bucket 56  bucket 57: 10%  bucket 57: 20%  bucket 57: 30%  bucket 57: 40%  bucket 57: 50%  bucket 57: 60%  bucket 57: 70%  bucket 57: 80%  bucket 57: 90%  bucket 57: 100%  Sorting block of length 85 for bucket 57  (Using difference cover)  Sorting block time: 00:00:00Returning block of 86 for bucket 57Getting block 58 of 60  Reserving size (126) for bucket 58  Calculating Z arrays for bucket 58Getting block 59 of 60  Reserving size (126) for bucket 59  Entering block accumulator loop for bucket 58:  Calculating Z arrays for bucket 59  bucket 58: 10%  Entering block accumulator loop for bucket 59:  bucket 58: 20%  bucket 59: 10%  bucket 58: 30%  bucket 59: 20%  bucket 58: 40%  bucket 59: 30%  bucket 58: 50%  bucket 59: 40%  bucket 58: 60%  bucket 59: 50%  bucket 58: 70%  bucket 59: 60%  bucket 58: 80%  bucket 59: 70%  bucket 58: 90%  bucket 59: 80%  bucket 58: 100%  Sorting block of length 113 for bucket 58  (Using difference cover)  bucket 59: 90%  bucket 59: 100%  Sorting block of length 109 for bucket 59  (Using difference cover)  Sorting block time: 00:00:00Returning block of 114 for bucket 58  Sorting block time: 00:00:00Returning block of 110 for bucket 59Getting block 60 of 60  Reserving size (126) for bucket 60  Calculating Z arrays for bucket 60  Entering block accumulator loop for bucket 60:  bucket 60: 10%  bucket 60: 20%  bucket 60: 30%  bucket 60: 40%  bucket 60: 50%  bucket 60: 60%  bucket 60: 70%  bucket 60: 80%  bucket 60: 90%  bucket 60: 100%  Sorting block of length 101 for bucket 60  (Using difference cover)  Sorting block time: 00:00:00Returning block of 102 for bucket 60
            ]]></system-out>
            <system-err><![CDATA[
            Settings:  Output files: "genome.*.ht2"  Line rate: 6 (line is 64 bytes)  Lines per side: 1 (side is 64 bytes)  Offset rate: 4 (one in 16)  FTable chars: 10  Strings: unpacked  Local offset rate: 3 (one in 8)  Local fTable chars: 6  Local sequence length: 57344  Local sequence overlap between two consecutive indexes: 1024  Endianness: little  Actual local endianness: little  Sanity checking: disabled  Assertions: disabled  Random seed: 0  Sizeofs: void*:8, int:4, long:8, size_t:8Input files DNA, FASTA:  genome.faReading reference sizes  Time reading reference sizes: 00:00:00Calculating joined lengthWriting headerReserving space for joined stringJoining reference sequences  Time to join reference sequences: 00:00:00  Time to read SNPs and splice sites: 00:00:00Using parameters --bmax 126 --dcv 1024  Doing ahead-of-time memory usage test  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024Constructing suffix-array element generatorConverting suffix-array elements to index imageAllocating ftab, absorbFtabEntering GFM loopExited GFM loopfchr[A]: 0fchr[C]: 1292fchr[G]: 2447fchr[T]: 3700fchr[$]: 5386Exiting GFM::buildToDisk()Returning from initFromVectorWrote 4196349 bytes to primary GFM file: genome.1.ht2Wrote 1352 bytes to secondary GFM file: genome.2.ht2Re-opening _in1 and _in2 as input streamsReturning from GFM constructorReturning from initFromVectorWrote 9893 bytes to primary GFM file: genome.5.ht2Wrote 1352 bytes to secondary GFM file: genome.6.ht2Re-opening _in5 and _in5 as input streamsReturning from HGFM constructorHeaders:    len: 5386    gbwtLen: 5387    nodes: 5387    sz: 1347    gbwtSz: 1347    lineRate: 6    offRate: 4    offMask: 0xfffffff0    ftabChars: 10    eftabLen: 0    eftabSz: 0    ftabLen: 1048577    ftabSz: 4194308    offsLen: 337    offsSz: 1348    lineSz: 64    sideSz: 64    sideGbwtSz: 48    sideGbwtLen: 192    numSides: 29    numLines: 29    gbwtTotLen: 1856    gbwtTotSz: 1856    reverse: 0    linearFM: YesTotal time for call to driver() for forward index: 00:00:0110 reads; of these:  10 (100.00%) were paired; of these:    1 (10.00%) aligned concordantly 0 times    9 (90.00%) aligned concordantly exactly 1 time    0 (0.00%) aligned concordantly >1 times    ----    1 pairs aligned concordantly 0 times; of these:      0 (0.00%) aligned discordantly 1 time    ----    1 pairs aligned 0 times concordantly or discordantly; of these:      2 mates make up the pairs; of these:        1 (50.00%) aligned 0 times        1 (50.00%) aligned exactly 1 time        0 (0.00%) aligned >1 times95.00% overall alignment rate
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="ivar_consensus (Test #1)" name="0" time="38.87810015678406">
        
            
            <system-out><![CDATA[
            Minimum Quality: 20Threshold: 0Minimum depth: 10Minimum Insert Threshold: 0.8Regions with depth less than minimum depth covered by: NReference length: 29903Positions with 0 depth: 113Positions with depth below 10: 1034
            ]]></system-out>
            <system-err><![CDATA[
            [mpileup] 1 samples in 1 input files[mpileup] Max depth set to maximum value (2147483647)
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="lofreq_viterbi (Test #1)" name="0" time="41.027530670166016">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 4 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="lofreq_viterbi (Test #2)" name="1" time="33.56753158569336">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 4 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="minimap2 (Test #1)" name="0" time="34.633498430252075">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.003*1.22] collected minimizers[M::mm_idx_gen::0.004*1.91] sorted minimizers[M::main::0.004*1.90] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.004*1.90] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.004*1.86] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967; total length: 16569[M::worker_pipeline::0.007*1.55] mapped 100 sequences[M::main] Version: 2.28-r1209[M::main] CMD: minimap2 -x sr --q-occ-frac 0.01 -t 8 -a reference.fa /galaxy/server/database/objects/b/5/b/dataset_b5b1ec82-cabd-49c5-9ff5-2b6125d86bc5.dat[M::main] Real time: 0.009 sec; CPU: 0.012 sec; Peak RSS: 0.005 GB
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="minimap2 (Test #2)" name="1" time="32.55713772773743">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.003*1.20] collected minimizers[M::mm_idx_gen::0.004*2.09] sorted minimizers[M::main::0.004*2.09] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.004*2.08] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.004*2.04] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967; total length: 16569[M::worker_pipeline::0.007*1.71] mapped 100 sequences[M::main] Version: 2.28-r1209[M::main] CMD: minimap2 -x sr --q-occ-frac 0.01 -t 8 -a reference.fa /galaxy/server/database/objects/d/0/0/dataset_d00700d5-e3d7-4b74-b009-2923eae645c6.dat[M::main] Real time: 0.008 sec; CPU: 0.013 sec; Peak RSS: 0.004 GB
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="minimap2 (Test #11)" name="10" time="31.734200716018677">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.026*0.97] collected minimizers[M::mm_idx_gen::0.041*2.71] sorted minimizers[M::main::0.041*2.70] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.043*2.62] mid_occ = 50[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.044*2.58] distinct minimizers: 86298 (91.20% are singletons); average occurrences: 1.212; average spacing: 9.858; total length: 1031372[M::worker_pipeline::0.070*2.56] mapped 234 sequences[M::main] Version: 2.28-r1209[M::main] CMD: minimap2 -x map-hifi --q-occ-frac 0.01 -t 8 -a reference.fa /galaxy/server/database/objects/6/4/e/dataset_64e97a76-cdec-4020-86b5-db596da3887e.dat[M::main] Real time: 0.076 sec; CPU: 0.185 sec; Peak RSS: 0.015 GB
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="minimap2 (Test #12)" name="11" time="32.142498254776">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.014*0.98] collected minimizers[M::mm_idx_gen::0.022*2.59] sorted minimizers[M::main::0.022*2.59] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.023*2.50] mid_occ = 62[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.024*2.46] distinct minimizers: 44423 (93.60% are singletons); average occurrences: 1.142; average spacing: 9.827; total length: 498556[M::worker_pipeline::0.051*2.35] mapped 234 sequences[M::main] Version: 2.28-r1209[M::main] CMD: minimap2 -x map-hifi --q-occ-frac 0.01 -t 8 -a reference.fa /galaxy/server/database/objects/d/2/1/dataset_d21f2776-6415-48b3-9d3e-96a49674ee70.dat[M::main] Real time: 0.055 sec; CPU: 0.123 sec; Peak RSS: 0.011 GB
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="minimap2 (Test #13)" name="12" time="9.662129163742065">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 12, "time_seconds": 9.662129163742065, "tool_id": "minimap2", "tool_version": "2.28+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="minimap2 (Test #3)" name="2" time="18.4027898311615">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 2, "time_seconds": 18.4027898311615, "tool_id": "minimap2", "tool_version": "2.28+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="minimap2 (Test #4)" name="3" time="35.562093019485474">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.003*1.15] collected minimizers[M::mm_idx_gen::0.005*1.66] sorted minimizers[M::main::0.005*1.65] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.005*1.65] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.005*1.62] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967; total length: 16569[M::worker_pipeline::0.011*1.77] mapped 200 sequences[M::main] Version: 2.28-r1209[M::main] CMD: minimap2 -x sr --q-occ-frac 0.01 -t 8 -a reference.fa /galaxy/server/database/objects/5/5/d/dataset_55d058cf-0f9c-4911-a2d0-18b08baa39b1.dat /galaxy/server/database/objects/d/6/0/dataset_d60ae09e-1694-4932-b201-884c44fb9825.dat[M::main] Real time: 0.014 sec; CPU: 0.021 sec; Peak RSS: 0.005 GB
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="minimap2 (Test #5)" name="4" time="10.008926153182983">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 4, "time_seconds": 10.008926153182983, "tool_id": "minimap2", "tool_version": "2.28+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="minimap2 (Test #6)" name="5" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 5, "tool_id": "minimap2", "tool_version": "2.28+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="minimap2 (Test #7)" name="6" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 6, "tool_id": "minimap2", "tool_version": "2.28+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="minimap2 (Test #8)" name="7" time="29.623993396759033">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.015*1.00] collected minimizers[M::mm_idx_gen::0.028*3.24] sorted minimizers[M::main::0.028*3.23] loaded/built the index for 25 target sequence(s)[M::mm_mapopt_update::0.030*3.11] mid_occ = 10[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25[M::mm_idx_stat::0.031*3.03] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935; total length: 235533[M::worker_pipeline::0.038*3.13] mapped 25 sequences[M::main] Version: 2.28-r1209[M::main] CMD: minimap2 -x ava-ont --q-occ-frac 0.01 -t 8 reference.fa /galaxy/server/database/objects/c/7/c/dataset_c7c33e24-ef6e-43f2-9fe5-708afe480273.dat[M::main] Real time: 0.046 sec; CPU: 0.126 sec; Peak RSS: 0.012 GB
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="minimap2 (Test #9)" name="8" time="29.979039192199707">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.003*1.17] collected minimizers[M::mm_idx_gen::0.005*1.63] sorted minimizers[M::main::0.005*1.63] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.005*1.60] mid_occ = 10[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.005*1.58] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057; total length: 30000[M::worker_pipeline::0.025*1.08] mapped 1 sequences[M::main] Version: 2.28-r1209[M::main] CMD: minimap2 -DP -k19 -w19 -m200 --q-occ-frac 0.01 -t 8 -a reference.fa /galaxy/server/database/objects/c/f/1/dataset_cf125b3e-4553-4cfc-b675-772504906c7b.dat[M::main] Real time: 0.026 sec; CPU: 0.028 sec; Peak RSS: 0.012 GB
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="minimap2 (Test #10)" name="9" time="31.61805772781372">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [M::mm_idx_gen::0.004*0.95] collected minimizers[M::mm_idx_gen::0.005*1.56] sorted minimizers[M::main::0.005*1.56] loaded/built the index for 1 target sequence(s)[M::mm_mapopt_update::0.005*1.56] mid_occ = 1000[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1[M::mm_idx_stat::0.005*1.53] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967; total length: 16569[M::worker_pipeline::0.009*1.35] mapped 100 sequences[M::main] Version: 2.28-r1209[M::main] CMD: minimap2 -x sr --q-occ-frac 0.01 --mask-len 100 -t 8 -a reference.fa /galaxy/server/database/objects/3/5/4/dataset_35425e3a-38f1-47e7-b8f8-22955887d262.dat[M::main] Real time: 0.010 sec; CPU: 0.012 sec; Peak RSS: 0.004 GB
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #1)" name="0" time="10.428491592407227">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 0, "time_seconds": 10.428491592407227, "tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #2)" name="1" time="11.380112171173096">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 1, "time_seconds": 11.380112171173096, "tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #3)" name="2" time="53.85620617866516">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #4)" name="3" time="32.34899139404297">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_tabular (Test #5)" name="4" time="30.97704839706421">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_merge (Test #1)" name="0" time="40.601757526397705">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_merge (Test #1)" name="0" time="37.10551309585571">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_merge (Test #2)" name="1" time="38.44628643989563">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bam_translate] PG tag "colt" on read "r001" encountered with no corresponding entry in header, tag lost. Unknown tags are only reported once per input file for each tag ID.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_merge (Test #2)" name="1" time="36.73419189453125">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bam_translate] PG tag "colt" on read "r001" encountered with no corresponding entry in header, tag lost. Unknown tags are only reported once per input file for each tag ID.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_merge (Test #3)" name="2" time="11.367560863494873">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 2, "time_seconds": 11.367560863494873, "tool_id": "samtools_merge", "tool_version": "1.9"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="samtools_merge (Test #3)" name="2" time="31.42555832862854">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_merge (Test #4)" name="3" time="33.78663468360901">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bam_translate] PG tag "colt" on read "r001" encountered with no corresponding entry in header, tag lost. Unknown tags are only reported once per input file for each tag ID.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_merge (Test #4)" name="3" time="34.12637209892273">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bam_translate] PG tag "colt" on read "r001" encountered with no corresponding entry in header, tag lost. Unknown tags are only reported once per input file for each tag ID.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_merge (Test #5)" name="4" time="11.71222186088562">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 4, "time_seconds": 11.71222186088562, "tool_id": "samtools_merge", "tool_version": "1.9"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="samtools_merge (Test #5)" name="4" time="32.7519006729126">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            [bam_translate] PG tag "colt" on read "r001" encountered with no corresponding entry in header, tag lost. Unknown tags are only reported once per input file for each tag ID.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #1)" name="0" time="71.56054854393005">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file umap.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #1)" name="0" time="36.56599569320679">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file umap.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #2)" name="1" time="36.52655339241028">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file scatter.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #2)" name="1" time="35.785879373550415">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file scatter.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #11)" name="10" time="35.60477352142334">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.WARNING: saving figure to file matrixplot_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #11)" name="10" time="36.33045482635498">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.WARNING: saving figure to file matrixplot_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #12)" name="11" time="34.8255980014801">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #12)" name="11" time="37.35400319099426">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #13)" name="12" time="36.228745460510254">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adata": {   "id": "5b0fe23cb4b20ee0",   "src": "hda"  },  "advanced_common|show_log": true,  "format": "png",  "method|gene_symbols": "means",  "method|method": "pl.highest_expr_genes",  "method|n_top": "30",  "method|setseaborn_boxplot|color": "blue",  "method|setseaborn_boxplot|saturation": "0.5" }, "job": {  "command_line": "cp \u0027/galaxy/server/database/objects/c/5/6/dataset_c56cfd15-b93e-4c8f-9f52-b422b3cd9bc6.dat\u0027 \u0027anndata.h5ad\u0027 \u0026\u0026 cat \u0027/galaxy/server/database/jobs_directory/000/377/configs/tmpedzl4bom\u0027 \u003e \u0027/galaxy/server/database/objects/c/d/e/dataset_cde7c5bd-1da2-442a-9a5d-fb74c2559d05.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/377/configs/tmpedzl4bom\u0027 \u003e\u003e \u0027/galaxy/server/database/objects/c/d/e/dataset_cde7c5bd-1da2-442a-9a5d-fb74c2559d05.dat\u0027 \u0026\u0026 ls . \u003e\u003e \u0027/galaxy/server/database/objects/c/d/e/dataset_cde7c5bd-1da2-442a-9a5d-fb74c2559d05.dat\u0027 \u0026\u0026 touch \u0027anndata_info.txt\u0027 \u0026\u0026 cat \u0027anndata_info.txt\u0027  | sed -r \u00271 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g\u0027 | sed \"s|\u0027||g\"  | sed -r \u0027s|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g\u0027 | sed \u0027s|, |\\n-    |g\u0027",  "command_version": "scanpy version: 1.9.6",  "copied_from_job_id": null,  "create_time": "2025-01-10T07:38:23.119565",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-kfrf8",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "07e1844fd3fb9e72",  "inputs": {   "adata": {    "id": "5b0fe23cb4b20ee0",    "src": "hda",    "uuid": "c56cfd15-b93e-4c8f-9f52-b422b3cd9bc6"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "5.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "5 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736494709.0000000",    "title": "Job End Time",    "value": "2025-01-10 07:38:29"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736494704.0000000",    "title": "Job Start Time",    "value": "2025-01-10 07:38:24"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "hidden_output": {    "id": "3ccedcc65949bd13",    "src": "hda",    "uuid": "cde7c5bd-1da2-442a-9a5d-fb74c2559d05"   },   "out_png": {    "id": "f9bd7ae770558e36",    "src": "hda",    "uuid": "dbdf91d2-590f-43a0-8e44-96cc6a7eb258"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced_common": "{\"show_log\": true}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "format": "\"png\"",   "method": "{\"__current_case__\": 8, \"gene_symbols\": \"means\", \"method\": \"pl.highest_expr_genes\", \"n_top\": \"30\", \"setseaborn_boxplot\": {\"color\": \"blue\", \"palette\": null, \"saturation\": \"0.5\"}}"  },  "state": "ok",  "stderr": "WARNING: saving figure to file highest_expr_genes.png\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4",  "tool_stderr": "WARNING: saving figure to file highest_expr_genes.png\n",  "tool_stdout": "",  "update_time": "2025-01-10T07:38:39.919798",  "user_email": "tests@fake.org" }, "output_problems": [  "Output out_png:  different than expected, difference (using sim_size):\n( /tmp/tmp_w9oro9tpl.highest_expr_genes.filter_genes_dispersion.krumsiek11-seurat.png v. /tmp/tmpr6ydawn0pl.highest_expr_genes.filter_genes_dispersion.krumsiek11-seurat.png )\nFiles /tmp/tmp_w9oro9tpl.highest_expr_genes.filter_genes_dispersion.krumsiek11-seurat.png=17117b but /tmp/tmpr6ydawn0pl.highest_expr_genes.filter_genes_dispersion.krumsiek11-seurat.png=38230b - compare by size (delta=10000) failed" ], "status": "failure", "test_index": 12, "time_seconds": 36.228745460510254, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file highest_expr_genes.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #13)" name="12" time="37.083914279937744">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adata": {   "id": "3c9bfe75af1f156d",   "src": "hda"  },  "advanced_common|show_log": true,  "format": "png",  "method|gene_symbols": "means",  "method|method": "pl.highest_expr_genes",  "method|n_top": "30",  "method|setseaborn_boxplot|color": "blue",  "method|setseaborn_boxplot|saturation": "0.5" }, "job": {  "command_line": "cp \u0027/galaxy/server/database/objects/4/5/0/dataset_45015098-b5a7-4cbe-bdb5-7e8664323464.dat\u0027 \u0027anndata.h5ad\u0027 \u0026\u0026 cat \u0027/galaxy/server/database/jobs_directory/000/450/configs/tmpg6rgew9y\u0027 \u003e \u0027/galaxy/server/database/objects/b/9/7/dataset_b978415f-7e33-4511-a2a1-33fda73ee079.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/450/configs/tmpg6rgew9y\u0027 \u003e\u003e \u0027/galaxy/server/database/objects/b/9/7/dataset_b978415f-7e33-4511-a2a1-33fda73ee079.dat\u0027 \u0026\u0026 ls . \u003e\u003e \u0027/galaxy/server/database/objects/b/9/7/dataset_b978415f-7e33-4511-a2a1-33fda73ee079.dat\u0027 \u0026\u0026 touch \u0027anndata_info.txt\u0027 \u0026\u0026 cat \u0027anndata_info.txt\u0027  | sed -r \u00271 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g\u0027 | sed \"s|\u0027||g\"  | sed -r \u0027s|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g\u0027 | sed \u0027s|, |\\n-    |g\u0027",  "command_version": "scanpy version: 1.9.6",  "copied_from_job_id": null,  "create_time": "2025-01-10T08:00:55.557988",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-xtpzv",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "1645cb7beb332a4b",  "inputs": {   "adata": {    "id": "3c9bfe75af1f156d",    "src": "hda",    "uuid": "45015098-b5a7-4cbe-bdb5-7e8664323464"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "4.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "4 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736496061.0000000",    "title": "Job End Time",    "value": "2025-01-10 08:01:01"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736496057.0000000",    "title": "Job Start Time",    "value": "2025-01-10 08:00:57"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "hidden_output": {    "id": "a9b20d0031fa2f63",    "src": "hda",    "uuid": "b978415f-7e33-4511-a2a1-33fda73ee079"   },   "out_png": {    "id": "d2aa496998208290",    "src": "hda",    "uuid": "bf2d55aa-1a2a-479c-9b23-ebdaf8b8e6ef"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced_common": "{\"show_log\": true}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "format": "\"png\"",   "method": "{\"__current_case__\": 8, \"gene_symbols\": \"means\", \"method\": \"pl.highest_expr_genes\", \"n_top\": \"30\", \"setseaborn_boxplot\": {\"color\": \"blue\", \"palette\": null, \"saturation\": \"0.5\"}}"  },  "state": "ok",  "stderr": "WARNING: saving figure to file highest_expr_genes.png\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4",  "tool_stderr": "WARNING: saving figure to file highest_expr_genes.png\n",  "tool_stdout": "",  "update_time": "2025-01-10T08:01:12.848443",  "user_email": "tests@fake.org" }, "output_problems": [  "Output out_png:  different than expected, difference (using sim_size):\n( /tmp/tmpoezs1zhfpl.highest_expr_genes.filter_genes_dispersion.krumsiek11-seurat.png v. /tmp/tmpyj44f8gdpl.highest_expr_genes.filter_genes_dispersion.krumsiek11-seurat.png )\nFiles /tmp/tmpoezs1zhfpl.highest_expr_genes.filter_genes_dispersion.krumsiek11-seurat.png=17117b but /tmp/tmpyj44f8gdpl.highest_expr_genes.filter_genes_dispersion.krumsiek11-seurat.png=38230b - compare by size (delta=10000) failed" ], "status": "failure", "test_index": 12, "time_seconds": 37.083914279937744, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file highest_expr_genes.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #14)" name="13" time="37.51966047286987">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file filter_genes_dispersion.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #14)" name="13" time="38.196383476257324">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file filter_genes_dispersion.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #15)" name="14" time="36.09494066238403">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adata": {   "id": "87cd9662ca0c2e1d",   "src": "hda"  },  "advanced_common|show_log": true,  "format": "pdf",  "method|color": "CD3D,CD79A",  "method|matplotlib_pyplot_scatter|edgecolors": "face",  "method|matplotlib_pyplot_scatter|linewidths": "0",  "method|method": "pl.pca",  "method|plot|components_0|axis1": "1",  "method|plot|components_0|axis2": "2",  "method|plot|components_1|axis1": "1",  "method|plot|components_1|axis2": "3",  "method|plot|frameon": true,  "method|plot|hspace": "0.25",  "method|plot|legend_fontsize": "1",  "method|plot|legend_fontweight": "normal",  "method|plot|legend_loc": "right margin",  "method|plot|ncols": "2",  "method|plot|palette": "viridis",  "method|plot|projection": "2d",  "method|plot|size": "1",  "method|plot|wspace": "0.1",  "method|sort_order": true,  "method|use_raw": false }, "job": {  "command_line": "cp \u0027/galaxy/server/database/objects/c/0/1/dataset_c018376a-d70d-4b9f-8961-43e05a6e0ca3.dat\u0027 \u0027anndata.h5ad\u0027 \u0026\u0026 cat \u0027/galaxy/server/database/jobs_directory/000/381/configs/tmpawzzxeqp\u0027 \u003e \u0027/galaxy/server/database/objects/b/b/f/dataset_bbf29fee-7ceb-4c8a-b81f-62e13dfbbf00.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/381/configs/tmpawzzxeqp\u0027 \u003e\u003e \u0027/galaxy/server/database/objects/b/b/f/dataset_bbf29fee-7ceb-4c8a-b81f-62e13dfbbf00.dat\u0027 \u0026\u0026 ls . \u003e\u003e \u0027/galaxy/server/database/objects/b/b/f/dataset_bbf29fee-7ceb-4c8a-b81f-62e13dfbbf00.dat\u0027 \u0026\u0026 touch \u0027anndata_info.txt\u0027 \u0026\u0026 cat \u0027anndata_info.txt\u0027  | sed -r \u00271 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g\u0027 | sed \"s|\u0027||g\"  | sed -r \u0027s|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g\u0027 | sed \u0027s|, |\\n-    |g\u0027",  "command_version": "scanpy version: 1.9.6",  "copied_from_job_id": null,  "create_time": "2025-01-10T07:39:36.795131",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-vrmrw",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "1b080c51566cb263",  "inputs": {   "adata": {    "id": "87cd9662ca0c2e1d",    "src": "hda",    "uuid": "c018376a-d70d-4b9f-8961-43e05a6e0ca3"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "5.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "5 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736494783.0000000",    "title": "Job End Time",    "value": "2025-01-10 07:39:43"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736494778.0000000",    "title": "Job Start Time",    "value": "2025-01-10 07:39:38"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "hidden_output": {    "id": "49f22329b6f3918a",    "src": "hda",    "uuid": "bbf29fee-7ceb-4c8a-b81f-62e13dfbbf00"   },   "out_pdf": {    "id": "a3b812fc71e33619",    "src": "hda",    "uuid": "ab44e0e7-47f2-4736-b9cb-ab7bbd5cbb5a"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced_common": "{\"show_log\": true}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "format": "\"pdf\"",   "method": "{\"__current_case__\": 9, \"color\": \"CD3D,CD79A\", \"groups\": \"\", \"matplotlib_pyplot_scatter\": {\"alpha\": \"\", \"edgecolors\": \"face\", \"linewidths\": \"0.0\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.pca\", \"plot\": {\"color_map\": null, \"components\": [{\"__index__\": 0, \"axis1\": \"1\", \"axis2\": \"2\"}, {\"__index__\": 1, \"axis1\": \"1\", \"axis2\": \"3\"}], \"frameon\": true, \"hspace\": \"0.25\", \"legend_fontsize\": \"1\", \"legend_fontweight\": \"normal\", \"legend_loc\": \"right margin\", \"ncols\": \"2\", \"palette\": \"viridis\", \"projection\": \"2d\", \"size\": \"1.0\", \"title\": \"\", \"wspace\": \"0.1\"}, \"sort_order\": true, \"use_raw\": false}"  },  "state": "ok",  "stderr": "WARNING: saving figure to file pca.pdf\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4",  "tool_stderr": "WARNING: saving figure to file pca.pdf\n",  "tool_stdout": "",  "update_time": "2025-01-10T07:39:53.635339",  "user_email": "tests@fake.org" }, "output_problems": [  "Output out_pdf:  different than expected, difference (using sim_size):\n( /tmp/tmpu68k9jxdpl.pca.pbmc68k_reduced.CD3D_CD79A_components_2d.pdf v. /tmp/tmp1z_bj4vhpl.pca.pbmc68k_reduced.CD3D_CD79A_components_2d.pdf )\nFiles /tmp/tmpu68k9jxdpl.pca.pbmc68k_reduced.CD3D_CD79A_components_2d.pdf=24001b but /tmp/tmp1z_bj4vhpl.pca.pbmc68k_reduced.CD3D_CD79A_components_2d.pdf=75424b - compare by size (delta=10000) failed" ], "status": "failure", "test_index": 14, "time_seconds": 36.09494066238403, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file pca.pdf
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #15)" name="14" time="38.398582220077515">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adata": {   "id": "0fcfc70eae222074",   "src": "hda"  },  "advanced_common|show_log": true,  "format": "pdf",  "method|color": "CD3D,CD79A",  "method|matplotlib_pyplot_scatter|edgecolors": "face",  "method|matplotlib_pyplot_scatter|linewidths": "0",  "method|method": "pl.pca",  "method|plot|components_0|axis1": "1",  "method|plot|components_0|axis2": "2",  "method|plot|components_1|axis1": "1",  "method|plot|components_1|axis2": "3",  "method|plot|frameon": true,  "method|plot|hspace": "0.25",  "method|plot|legend_fontsize": "1",  "method|plot|legend_fontweight": "normal",  "method|plot|legend_loc": "right margin",  "method|plot|ncols": "2",  "method|plot|palette": "viridis",  "method|plot|projection": "2d",  "method|plot|size": "1",  "method|plot|wspace": "0.1",  "method|sort_order": true,  "method|use_raw": false }, "job": {  "command_line": "cp \u0027/galaxy/server/database/objects/e/0/6/dataset_e064b839-22a0-425b-8142-d73c0135b3a6.dat\u0027 \u0027anndata.h5ad\u0027 \u0026\u0026 cat \u0027/galaxy/server/database/jobs_directory/000/454/configs/tmpqy3lfs24\u0027 \u003e \u0027/galaxy/server/database/objects/4/e/d/dataset_4ed881dc-d42d-4a43-b9fc-73a5ef79e726.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/454/configs/tmpqy3lfs24\u0027 \u003e\u003e \u0027/galaxy/server/database/objects/4/e/d/dataset_4ed881dc-d42d-4a43-b9fc-73a5ef79e726.dat\u0027 \u0026\u0026 ls . \u003e\u003e \u0027/galaxy/server/database/objects/4/e/d/dataset_4ed881dc-d42d-4a43-b9fc-73a5ef79e726.dat\u0027 \u0026\u0026 touch \u0027anndata_info.txt\u0027 \u0026\u0026 cat \u0027anndata_info.txt\u0027  | sed -r \u00271 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g\u0027 | sed \"s|\u0027||g\"  | sed -r \u0027s|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g\u0027 | sed \u0027s|, |\\n-    |g\u0027",  "command_version": "scanpy version: 1.9.6",  "copied_from_job_id": null,  "create_time": "2025-01-10T08:02:11.884652",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-q5586",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "457ec5efa206679f",  "inputs": {   "adata": {    "id": "0fcfc70eae222074",    "src": "hda",    "uuid": "e064b839-22a0-425b-8142-d73c0135b3a6"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "6.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "6 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736496139.0000000",    "title": "Job End Time",    "value": "2025-01-10 08:02:19"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736496133.0000000",    "title": "Job Start Time",    "value": "2025-01-10 08:02:13"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "hidden_output": {    "id": "cdd93fc6047c1422",    "src": "hda",    "uuid": "4ed881dc-d42d-4a43-b9fc-73a5ef79e726"   },   "out_pdf": {    "id": "fcd30362b86a7783",    "src": "hda",    "uuid": "7f832668-7f53-4947-9b5b-ec87a52a4018"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced_common": "{\"show_log\": true}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "format": "\"pdf\"",   "method": "{\"__current_case__\": 9, \"color\": \"CD3D,CD79A\", \"groups\": \"\", \"matplotlib_pyplot_scatter\": {\"alpha\": \"\", \"edgecolors\": \"face\", \"linewidths\": \"0.0\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.pca\", \"plot\": {\"color_map\": null, \"components\": [{\"__index__\": 0, \"axis1\": \"1\", \"axis2\": \"2\"}, {\"__index__\": 1, \"axis1\": \"1\", \"axis2\": \"3\"}], \"frameon\": true, \"hspace\": \"0.25\", \"legend_fontsize\": \"1\", \"legend_fontweight\": \"normal\", \"legend_loc\": \"right margin\", \"ncols\": \"2\", \"palette\": \"viridis\", \"projection\": \"2d\", \"size\": \"1.0\", \"title\": \"\", \"wspace\": \"0.1\"}, \"sort_order\": true, \"use_raw\": false}"  },  "state": "ok",  "stderr": "WARNING: saving figure to file pca.pdf\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4",  "tool_stderr": "WARNING: saving figure to file pca.pdf\n",  "tool_stdout": "",  "update_time": "2025-01-10T08:02:29.758050",  "user_email": "tests@fake.org" }, "output_problems": [  "Output out_pdf:  different than expected, difference (using sim_size):\n( /tmp/tmp8auzfguypl.pca.pbmc68k_reduced.CD3D_CD79A_components_2d.pdf v. /tmp/tmpxjvl8d92pl.pca.pbmc68k_reduced.CD3D_CD79A_components_2d.pdf )\nFiles /tmp/tmp8auzfguypl.pca.pbmc68k_reduced.CD3D_CD79A_components_2d.pdf=24001b but /tmp/tmpxjvl8d92pl.pca.pbmc68k_reduced.CD3D_CD79A_components_2d.pdf=75424b - compare by size (delta=10000) failed" ], "status": "failure", "test_index": 14, "time_seconds": 38.398582220077515, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file pca.pdf
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #16)" name="15" time="36.58214068412781">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file pca_loadings.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #16)" name="15" time="36.04561495780945">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file pca_loadings.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #17)" name="16" time="35.70963406562805">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file pca_variance_ratio.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #17)" name="16" time="37.377551555633545">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file pca_variance_ratio.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #18)" name="17" time="36.459874868392944">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file pca.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #18)" name="17" time="29.687939405441284">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "adata": {   "id": "c09b369c43fd9cd9",   "src": "hda"  },  "advanced_common|show_log": true,  "format": "png",  "method|method": "pl.pca_overview",  "method|plot|frameon": true,  "method|plot|hspace": "0.25",  "method|plot|legend_fontsize": "1",  "method|plot|legend_fontweight": "normal",  "method|plot|legend_loc": "right margin",  "method|plot|ncols": "4",  "method|plot|palette": "viridis",  "method|plot|projection": "2d",  "method|plot|size": "1",  "method|plot|wspace": "0.1",  "method|sort_order": true,  "method|use_raw": false }, "job": {  "command_line": "cp \u0027/galaxy/server/database/objects/5/f/2/dataset_5f22cf95-397d-44cb-aa6a-bd48d07fabd8.dat\u0027 \u0027anndata.h5ad\u0027 \u0026\u0026 cat \u0027/galaxy/server/database/jobs_directory/000/460/configs/tmphchs8f3z\u0027 \u003e \u0027/galaxy/server/database/objects/d/5/6/dataset_d566bb8a-05c5-4f48-b936-ed5933ad83fb.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/460/configs/tmphchs8f3z\u0027 \u003e\u003e \u0027/galaxy/server/database/objects/d/5/6/dataset_d566bb8a-05c5-4f48-b936-ed5933ad83fb.dat\u0027 \u0026\u0026 ls . \u003e\u003e \u0027/galaxy/server/database/objects/d/5/6/dataset_d566bb8a-05c5-4f48-b936-ed5933ad83fb.dat\u0027 \u0026\u0026 touch \u0027anndata_info.txt\u0027 \u0026\u0026 cat \u0027anndata_info.txt\u0027  | sed -r \u00271 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g\u0027 | sed \"s|\u0027||g\"  | sed -r \u0027s|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g\u0027 | sed \u0027s|, |\\n-    |g\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-10T08:04:03.868527",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-p5ndt",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "429a6e9826d0a500",  "inputs": {   "adata": {    "id": "c09b369c43fd9cd9",    "src": "hda",    "uuid": "5f22cf95-397d-44cb-aa6a-bd48d07fabd8"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "hidden_output": {    "id": "3fa3b24368211a24",    "src": "hda",    "uuid": "d566bb8a-05c5-4f48-b936-ed5933ad83fb"   },   "out_png": {    "id": "17789fd7a2c0d37d",    "src": "hda",    "uuid": "3e758289-846e-400b-b3d2-cea1a93fe957"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced_common": "{\"show_log\": true}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "format": "\"png\"",   "method": "{\"__current_case__\": 12, \"color\": \"\", \"groups\": \"\", \"matplotlib_pyplot_scatter\": {\"alpha\": \"\", \"edgecolors\": null, \"linewidths\": \"0.0\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.pca_overview\", \"plot\": {\"color_map\": null, \"components\": [], \"frameon\": true, \"hspace\": \"0.25\", \"legend_fontsize\": \"1\", \"legend_fontweight\": \"normal\", \"legend_loc\": \"right margin\", \"ncols\": \"4\", \"palette\": \"viridis\", \"projection\": \"2d\", \"size\": \"1.0\", \"title\": \"\", \"wspace\": \"0.1\"}, \"sort_order\": true, \"use_raw\": false}"  },  "state": "error",  "stderr": "WARNING: saving figure to file pca.png\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4",  "tool_stderr": "WARNING: saving figure to file pca.png\n",  "tool_stdout": "",  "update_time": "2025-01-10T08:04:13.086169",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4, exit_code: None, stderr: WARNING: saving figure to file pca.png\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4, exit_code: None, stderr: WARNING: saving figure to file pca.png\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4, exit_code: None, stderr: WARNING: saving figure to file pca.png\n." ], "status": "failure", "test_index": 17, "time_seconds": 29.687939405441284, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file pca.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #19)" name="18" time="37.5474419593811">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file tsne.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #19)" name="18" time="35.69578433036804">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file tsne.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #20)" name="19" time="35.64191293716431">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adata": {   "id": "825c3868d3374b05",   "src": "hda"  },  "advanced_common|show_log": true,  "format": "png",  "method|arrows": false,  "method|color": "paul15_clusters",  "method|edges|edges": "True",  "method|edges|edges_color": "AliceBlue",  "method|edges|edges_width": "0.1",  "method|matplotlib_pyplot_scatter|edgecolors": "face",  "method|matplotlib_pyplot_scatter|linewidths": "0",  "method|method": "pl.umap",  "method|plot|frameon": true,  "method|plot|hspace": "0.25",  "method|plot|legend_fontsize": "1",  "method|plot|legend_fontweight": "normal",  "method|plot|legend_loc": "right margin",  "method|plot|ncols": "4",  "method|plot|palette": "viridis",  "method|plot|projection": "2d",  "method|plot|size": "1",  "method|plot|wspace": "0.1",  "method|use_raw": false }, "job": {  "command_line": "cp \u0027/galaxy/server/database/objects/9/a/e/dataset_9ae9c03e-cf2f-432a-9aeb-7d5dbe370285.dat\u0027 \u0027anndata.h5ad\u0027 \u0026\u0026 cat \u0027/galaxy/server/database/jobs_directory/000/391/configs/tmpfjjcobag\u0027 \u003e \u0027/galaxy/server/database/objects/6/3/8/dataset_6387a5d0-6ba0-4cd3-bacd-6b36feae6f17.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/391/configs/tmpfjjcobag\u0027 \u003e\u003e \u0027/galaxy/server/database/objects/6/3/8/dataset_6387a5d0-6ba0-4cd3-bacd-6b36feae6f17.dat\u0027 \u0026\u0026 ls . \u003e\u003e \u0027/galaxy/server/database/objects/6/3/8/dataset_6387a5d0-6ba0-4cd3-bacd-6b36feae6f17.dat\u0027 \u0026\u0026 touch \u0027anndata_info.txt\u0027 \u0026\u0026 cat \u0027anndata_info.txt\u0027  | sed -r \u00271 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g\u0027 | sed \"s|\u0027||g\"  | sed -r \u0027s|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g\u0027 | sed \u0027s|, |\\n-    |g\u0027",  "command_version": "scanpy version: 1.9.6",  "copied_from_job_id": null,  "create_time": "2025-01-10T07:42:40.425140",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-txclk",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "d85f6a731835eed2",  "inputs": {   "adata": {    "id": "825c3868d3374b05",    "src": "hda",    "uuid": "9ae9c03e-cf2f-432a-9aeb-7d5dbe370285"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "5.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "5 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736494966.0000000",    "title": "Job End Time",    "value": "2025-01-10 07:42:46"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736494961.0000000",    "title": "Job Start Time",    "value": "2025-01-10 07:42:41"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "hidden_output": {    "id": "f3e4dec60fb981f3",    "src": "hda",    "uuid": "6387a5d0-6ba0-4cd3-bacd-6b36feae6f17"   },   "out_png": {    "id": "1e7bc6eadd5c2faa",    "src": "hda",    "uuid": "c474807d-d6b7-430f-9b5f-f3714ff3c101"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced_common": "{\"show_log\": true}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "format": "\"png\"",   "method": "{\"__current_case__\": 14, \"arrows\": false, \"color\": \"paul15_clusters\", \"edges\": {\"__current_case__\": 0, \"edges\": \"True\", \"edges_color\": \"AliceBlue\", \"edges_width\": \"0.1\"}, \"groups\": \"\", \"matplotlib_pyplot_scatter\": {\"alpha\": \"\", \"edgecolors\": \"face\", \"linewidths\": \"0.0\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.umap\", \"plot\": {\"color_map\": null, \"components\": [], \"frameon\": true, \"hspace\": \"0.25\", \"legend_fontsize\": \"1\", \"legend_fontweight\": \"normal\", \"legend_loc\": \"right margin\", \"ncols\": \"4\", \"palette\": \"viridis\", \"projection\": \"2d\", \"size\": \"1.0\", \"title\": \"\", \"wspace\": \"0.1\"}, \"sort_order\": true, \"use_raw\": false}"  },  "state": "ok",  "stderr": "WARNING: saving figure to file umap.png\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4",  "tool_stderr": "WARNING: saving figure to file umap.png\n",  "tool_stdout": "",  "update_time": "2025-01-10T07:42:56.137899",  "user_email": "tests@fake.org" }, "output_problems": [  "Output out_png:  different than expected, difference (using sim_size):\n( /tmp/tmp3rnfjq_4pl.umap.neighbors_umap_euclidean.recipe_weinreb17.paul15_subsample.png v. /tmp/tmp0i6zdbsfpl.umap.neighbors_umap_euclidean.recipe_weinreb17.paul15_subsample.png )\nFiles /tmp/tmp3rnfjq_4pl.umap.neighbors_umap_euclidean.recipe_weinreb17.paul15_subsample.png=119587b but /tmp/tmp0i6zdbsfpl.umap.neighbors_umap_euclidean.recipe_weinreb17.paul15_subsample.png=78337b - compare by size (delta=10000) failed" ], "status": "failure", "test_index": 19, "time_seconds": 35.64191293716431, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file umap.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #20)" name="19" time="37.863709926605225">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adata": {   "id": "ace055f54dd2d35b",   "src": "hda"  },  "advanced_common|show_log": true,  "format": "png",  "method|arrows": false,  "method|color": "paul15_clusters",  "method|edges|edges": "True",  "method|edges|edges_color": "AliceBlue",  "method|edges|edges_width": "0.1",  "method|matplotlib_pyplot_scatter|edgecolors": "face",  "method|matplotlib_pyplot_scatter|linewidths": "0",  "method|method": "pl.umap",  "method|plot|frameon": true,  "method|plot|hspace": "0.25",  "method|plot|legend_fontsize": "1",  "method|plot|legend_fontweight": "normal",  "method|plot|legend_loc": "right margin",  "method|plot|ncols": "4",  "method|plot|palette": "viridis",  "method|plot|projection": "2d",  "method|plot|size": "1",  "method|plot|wspace": "0.1",  "method|use_raw": false }, "job": {  "command_line": "cp \u0027/galaxy/server/database/objects/7/c/5/dataset_7c52d4f4-9146-4509-9883-10e7ecdb49fd.dat\u0027 \u0027anndata.h5ad\u0027 \u0026\u0026 cat \u0027/galaxy/server/database/jobs_directory/000/464/configs/tmps_v8fx5b\u0027 \u003e \u0027/galaxy/server/database/objects/2/9/c/dataset_29c482c3-a059-4005-8049-d452c407a31f.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/464/configs/tmps_v8fx5b\u0027 \u003e\u003e \u0027/galaxy/server/database/objects/2/9/c/dataset_29c482c3-a059-4005-8049-d452c407a31f.dat\u0027 \u0026\u0026 ls . \u003e\u003e \u0027/galaxy/server/database/objects/2/9/c/dataset_29c482c3-a059-4005-8049-d452c407a31f.dat\u0027 \u0026\u0026 touch \u0027anndata_info.txt\u0027 \u0026\u0026 cat \u0027anndata_info.txt\u0027  | sed -r \u00271 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g\u0027 | sed \"s|\u0027||g\"  | sed -r \u0027s|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g\u0027 | sed \u0027s|, |\\n-    |g\u0027",  "command_version": "scanpy version: 1.9.6",  "copied_from_job_id": null,  "create_time": "2025-01-10T08:05:08.548532",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-8bm6t",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "ae471cbc77d9ad6e",  "inputs": {   "adata": {    "id": "ace055f54dd2d35b",    "src": "hda",    "uuid": "7c52d4f4-9146-4509-9883-10e7ecdb49fd"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "5.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "5 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736496315.0000000",    "title": "Job End Time",    "value": "2025-01-10 08:05:15"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736496310.0000000",    "title": "Job Start Time",    "value": "2025-01-10 08:05:10"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "hidden_output": {    "id": "9b2ef4ca93678b57",    "src": "hda",    "uuid": "29c482c3-a059-4005-8049-d452c407a31f"   },   "out_png": {    "id": "a9cd5d468cfef235",    "src": "hda",    "uuid": "f2835722-3d15-4e2a-acd3-6ccd2bad8682"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced_common": "{\"show_log\": true}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "format": "\"png\"",   "method": "{\"__current_case__\": 14, \"arrows\": false, \"color\": \"paul15_clusters\", \"edges\": {\"__current_case__\": 0, \"edges\": \"True\", \"edges_color\": \"AliceBlue\", \"edges_width\": \"0.1\"}, \"groups\": \"\", \"matplotlib_pyplot_scatter\": {\"alpha\": \"\", \"edgecolors\": \"face\", \"linewidths\": \"0.0\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.umap\", \"plot\": {\"color_map\": null, \"components\": [], \"frameon\": true, \"hspace\": \"0.25\", \"legend_fontsize\": \"1\", \"legend_fontweight\": \"normal\", \"legend_loc\": \"right margin\", \"ncols\": \"4\", \"palette\": \"viridis\", \"projection\": \"2d\", \"size\": \"1.0\", \"title\": \"\", \"wspace\": \"0.1\"}, \"sort_order\": true, \"use_raw\": false}"  },  "state": "ok",  "stderr": "WARNING: saving figure to file umap.png\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4",  "tool_stderr": "WARNING: saving figure to file umap.png\n",  "tool_stdout": "",  "update_time": "2025-01-10T08:05:26.547355",  "user_email": "tests@fake.org" }, "output_problems": [  "Output out_png:  different than expected, difference (using sim_size):\n( /tmp/tmp2u9m_14ppl.umap.neighbors_umap_euclidean.recipe_weinreb17.paul15_subsample.png v. /tmp/tmp76t25174pl.umap.neighbors_umap_euclidean.recipe_weinreb17.paul15_subsample.png )\nFiles /tmp/tmp2u9m_14ppl.umap.neighbors_umap_euclidean.recipe_weinreb17.paul15_subsample.png=119587b but /tmp/tmp76t25174pl.umap.neighbors_umap_euclidean.recipe_weinreb17.paul15_subsample.png=78337b - compare by size (delta=10000) failed" ], "status": "failure", "test_index": 19, "time_seconds": 37.863709926605225, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file umap.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #3)" name="2" time="36.15424680709839">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.WARNING: saving figure to file heatmap.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #3)" name="2" time="37.53561878204346">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.WARNING: saving figure to file heatmap.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #21)" name="20" time="36.09060597419739">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file diffmap.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #21)" name="20" time="43.328956604003906">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file diffmap.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #22)" name="21" time="36.62735986709595">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file draw_graph_fr.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #22)" name="21" time="37.99022316932678">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file draw_graph_fr.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #23)" name="22" time="38.15654754638672">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adata": {   "id": "6b4dca6994c3a08b",   "src": "hda"  },  "advanced_common|show_log": true,  "format": "png",  "method|basis": "umap",  "method|key": "umap_density_bulk_labels",  "method|method": "pl.embedding_density" }, "job": {  "command_line": "cp \u0027/galaxy/server/database/objects/c/8/8/dataset_c88f0329-5b61-4f85-b3cf-ab5ef2d79497.dat\u0027 \u0027anndata.h5ad\u0027 \u0026\u0026 cat \u0027/galaxy/server/database/jobs_directory/000/397/configs/tmpkii821nr\u0027 \u003e \u0027/galaxy/server/database/objects/f/b/d/dataset_fbd47c8d-aa6f-4e79-bc13-96eb9df12cfe.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/397/configs/tmpkii821nr\u0027 \u003e\u003e \u0027/galaxy/server/database/objects/f/b/d/dataset_fbd47c8d-aa6f-4e79-bc13-96eb9df12cfe.dat\u0027 \u0026\u0026 ls . \u003e\u003e \u0027/galaxy/server/database/objects/f/b/d/dataset_fbd47c8d-aa6f-4e79-bc13-96eb9df12cfe.dat\u0027 \u0026\u0026 touch \u0027anndata_info.txt\u0027 \u0026\u0026 cat \u0027anndata_info.txt\u0027  | sed -r \u00271 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g\u0027 | sed \"s|\u0027||g\"  | sed -r \u0027s|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g\u0027 | sed \u0027s|, |\\n-    |g\u0027",  "command_version": "scanpy version: 1.9.6",  "copied_from_job_id": null,  "create_time": "2025-01-10T07:44:29.450431",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-lw7r7",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "cbb637d94bf66068",  "inputs": {   "adata": {    "id": "6b4dca6994c3a08b",    "src": "hda",    "uuid": "c88f0329-5b61-4f85-b3cf-ab5ef2d79497"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "5.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "5 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736495076.0000000",    "title": "Job End Time",    "value": "2025-01-10 07:44:36"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736495071.0000000",    "title": "Job Start Time",    "value": "2025-01-10 07:44:31"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "hidden_output": {    "id": "ede5facaa43a86d7",    "src": "hda",    "uuid": "fbd47c8d-aa6f-4e79-bc13-96eb9df12cfe"   },   "out_png": {    "id": "2a651ada7757fa78",    "src": "hda",    "uuid": "54652ac6-e1e3-4e93-a76e-5e9c0c4bac3d"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced_common": "{\"show_log\": true}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "format": "\"png\"",   "method": "{\"__current_case__\": 17, \"basis\": \"umap\", \"bg_dotsize\": \"80\", \"color_map\": null, \"fg_dotsize\": \"180\", \"group\": \"\", \"groupby\": \"\", \"hspace\": \"0.25\", \"key\": \"umap_density_bulk_labels\", \"method\": \"pl.embedding_density\", \"ncols\": \"4\", \"wspace\": \"0.1\"}"  },  "state": "ok",  "stderr": "WARNING: saving figure to file umap_density_bulk_labels_.png\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4",  "tool_stderr": "WARNING: saving figure to file umap_density_bulk_labels_.png\n",  "tool_stdout": "",  "update_time": "2025-01-10T07:44:47.153527",  "user_email": "tests@fake.org" }, "output_problems": [  "Output out_png:  different than expected, difference (using sim_size):\n( /tmp/tmpwab3f6rdpl.embedding_density.pbmc68k_reduced.png v. /tmp/tmpgv_bg_zwpl.embedding_density.pbmc68k_reduced.png )\nFiles /tmp/tmpwab3f6rdpl.embedding_density.pbmc68k_reduced.png=123621b but /tmp/tmpgv_bg_zwpl.embedding_density.pbmc68k_reduced.png=309812b - compare by size (delta=10000) failed" ], "status": "failure", "test_index": 22, "time_seconds": 38.15654754638672, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file umap_density_bulk_labels_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #23)" name="22" time="38.41957426071167">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adata": {   "id": "e65a05bdcf5fc144",   "src": "hda"  },  "advanced_common|show_log": true,  "format": "png",  "method|basis": "umap",  "method|key": "umap_density_bulk_labels",  "method|method": "pl.embedding_density" }, "job": {  "command_line": "cp \u0027/galaxy/server/database/objects/f/6/9/dataset_f699d48c-379b-4b51-be5f-21aaef9e9db3.dat\u0027 \u0027anndata.h5ad\u0027 \u0026\u0026 cat \u0027/galaxy/server/database/jobs_directory/000/470/configs/tmpclno_woa\u0027 \u003e \u0027/galaxy/server/database/objects/1/c/b/dataset_1cbb9627-517a-4e0b-a510-06ec804b47c2.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/470/configs/tmpclno_woa\u0027 \u003e\u003e \u0027/galaxy/server/database/objects/1/c/b/dataset_1cbb9627-517a-4e0b-a510-06ec804b47c2.dat\u0027 \u0026\u0026 ls . \u003e\u003e \u0027/galaxy/server/database/objects/1/c/b/dataset_1cbb9627-517a-4e0b-a510-06ec804b47c2.dat\u0027 \u0026\u0026 touch \u0027anndata_info.txt\u0027 \u0026\u0026 cat \u0027anndata_info.txt\u0027  | sed -r \u00271 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g\u0027 | sed \"s|\u0027||g\"  | sed -r \u0027s|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g\u0027 | sed \u0027s|, |\\n-    |g\u0027",  "command_version": "scanpy version: 1.9.6",  "copied_from_job_id": null,  "create_time": "2025-01-10T08:07:08.865216",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-qcz95",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "df007b4e1e34a45e",  "inputs": {   "adata": {    "id": "e65a05bdcf5fc144",    "src": "hda",    "uuid": "f699d48c-379b-4b51-be5f-21aaef9e9db3"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "6.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "6 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736496436.0000000",    "title": "Job End Time",    "value": "2025-01-10 08:07:16"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736496430.0000000",    "title": "Job Start Time",    "value": "2025-01-10 08:07:10"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "hidden_output": {    "id": "4d9be9e809071185",    "src": "hda",    "uuid": "1cbb9627-517a-4e0b-a510-06ec804b47c2"   },   "out_png": {    "id": "cfd5115eb47e9634",    "src": "hda",    "uuid": "d7e95c70-bb4e-4264-90af-29904fec16f2"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced_common": "{\"show_log\": true}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "format": "\"png\"",   "method": "{\"__current_case__\": 17, \"basis\": \"umap\", \"bg_dotsize\": \"80\", \"color_map\": null, \"fg_dotsize\": \"180\", \"group\": \"\", \"groupby\": \"\", \"hspace\": \"0.25\", \"key\": \"umap_density_bulk_labels\", \"method\": \"pl.embedding_density\", \"ncols\": \"4\", \"wspace\": \"0.1\"}"  },  "state": "ok",  "stderr": "WARNING: saving figure to file umap_density_bulk_labels_.png\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4",  "tool_stderr": "WARNING: saving figure to file umap_density_bulk_labels_.png\n",  "tool_stdout": "",  "update_time": "2025-01-10T08:07:26.416374",  "user_email": "tests@fake.org" }, "output_problems": [  "Output out_png:  different than expected, difference (using sim_size):\n( /tmp/tmpwt9nybr9pl.embedding_density.pbmc68k_reduced.png v. /tmp/tmp221i5ff1pl.embedding_density.pbmc68k_reduced.png )\nFiles /tmp/tmpwt9nybr9pl.embedding_density.pbmc68k_reduced.png=123621b but /tmp/tmp221i5ff1pl.embedding_density.pbmc68k_reduced.png=309812b - compare by size (delta=10000) failed" ], "status": "failure", "test_index": 22, "time_seconds": 38.41957426071167, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file umap_density_bulk_labels_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #24)" name="23" time="40.57553434371948">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file dpt_groups_pseudotime.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #24)" name="23" time="38.36227059364319">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file dpt_groups_pseudotime.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #25)" name="24" time="42.5268919467926">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: Plotting more than 100 genes might take some while, consider selecting only highly variable genes, for example.WARNING: saving figure to file dpt_timeseries.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #25)" name="24" time="43.650124311447144">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: Plotting more than 100 genes might take some while, consider selecting only highly variable genes, for example.WARNING: saving figure to file dpt_timeseries.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #26)" name="25" time="37.00549936294556">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file paga.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #26)" name="25" time="37.48016333580017">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file paga.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #27)" name="26" time="37.134891748428345">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file paga_compare.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #27)" name="26" time="36.34038257598877">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file paga_compare.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #28)" name="27" time="43.22076869010925">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file rank_genes_groups_cell_type.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #28)" name="27" time="37.983665466308594">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file rank_genes_groups_cell_type.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #29)" name="28" time="43.936678647994995">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file rank_genes_groups_cell_type_Ery.pngWARNING: saving figure to file rank_genes_groups_cell_type_Mk.pngWARNING: saving figure to file rank_genes_groups_cell_type_Mo.pngWARNING: saving figure to file rank_genes_groups_cell_type_Neu.pngWARNING: saving figure to file rank_genes_groups_cell_type_progenitor.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #29)" name="28" time="44.336302280426025">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file rank_genes_groups_cell_type_Ery.pngWARNING: saving figure to file rank_genes_groups_cell_type_Mk.pngWARNING: saving figure to file rank_genes_groups_cell_type_Mo.pngWARNING: saving figure to file rank_genes_groups_cell_type_Neu.pngWARNING: saving figure to file rank_genes_groups_cell_type_progenitor.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #30)" name="29" time="35.44199299812317">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adata": {   "id": "1879b128d2b613cd",   "src": "hda"  },  "advanced_common|show_log": true,  "format": "png",  "method|color_map": "viridis",  "method|dendrogram": false,  "method|gene_symbols": "symbol",  "method|log": false,  "method|matplotlib_pyplot_scatter|edgecolors": "face",  "method|matplotlib_pyplot_scatter|linewidths": "0",  "method|method": "pl.rank_genes_groups_dotplot",  "method|n_genes": "10",  "method|use_raw": false,  "method|var_names|type": "all" }, "job": {  "command_line": "cp \u0027/galaxy/server/database/objects/d/2/e/dataset_d2e52755-877a-4483-9af4-6a141e5c6f07.dat\u0027 \u0027anndata.h5ad\u0027 \u0026\u0026 cat \u0027/galaxy/server/database/jobs_directory/000/411/configs/tmp8xmf4834\u0027 \u003e \u0027/galaxy/server/database/objects/b/f/7/dataset_bf73da20-b366-4c26-9b24-f2b7023e6476.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/411/configs/tmp8xmf4834\u0027 \u003e\u003e \u0027/galaxy/server/database/objects/b/f/7/dataset_bf73da20-b366-4c26-9b24-f2b7023e6476.dat\u0027 \u0026\u0026 ls . \u003e\u003e \u0027/galaxy/server/database/objects/b/f/7/dataset_bf73da20-b366-4c26-9b24-f2b7023e6476.dat\u0027 \u0026\u0026 touch \u0027anndata_info.txt\u0027 \u0026\u0026 cat \u0027anndata_info.txt\u0027  | sed -r \u00271 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g\u0027 | sed \"s|\u0027||g\"  | sed -r \u0027s|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g\u0027 | sed \u0027s|, |\\n-    |g\u0027",  "command_version": "scanpy version: 1.9.6",  "copied_from_job_id": null,  "create_time": "2025-01-10T07:49:10.861661",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-5t8n7",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "8b33f02f6f0ee5ae",  "inputs": {   "adata": {    "id": "1879b128d2b613cd",    "src": "hda",    "uuid": "d2e52755-877a-4483-9af4-6a141e5c6f07"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "5.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "5 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736495357.0000000",    "title": "Job End Time",    "value": "2025-01-10 07:49:17"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736495352.0000000",    "title": "Job Start Time",    "value": "2025-01-10 07:49:12"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "hidden_output": {    "id": "76b0bb8256ff149f",    "src": "hda",    "uuid": "bf73da20-b366-4c26-9b24-f2b7023e6476"   },   "out_png": {    "id": "529e7be47c7c3adb",    "src": "hda",    "uuid": "0eab0037-b6c7-4265-8f29-86156d00b530"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced_common": "{\"show_log\": true}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "format": "\"png\"",   "method": "{\"__current_case__\": 25, \"color_map\": \"viridis\", \"dendrogram\": false, \"dot_max\": \"\", \"dot_min\": \"\", \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"gene_symbols\": \"symbol\", \"groupby\": \"\", \"groups\": \"\", \"key\": \"\", \"layer\": \"\", \"log\": false, \"matplotlib_pyplot_scatter\": {\"alpha\": \"\", \"edgecolors\": \"face\", \"linewidths\": \"0.0\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.rank_genes_groups_dotplot\", \"n_genes\": \"10\", \"num_categories\": \"7\", \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\", \"var_names\": {\"__current_case__\": 0, \"type\": \"all\"}}"  },  "state": "ok",  "stderr": "WARNING: saving figure to file dotplot_.png\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4",  "tool_stderr": "WARNING: saving figure to file dotplot_.png\n",  "tool_stdout": "",  "update_time": "2025-01-10T07:49:27.584503",  "user_email": "tests@fake.org" }, "output_problems": [  "Output out_png:  different than expected, difference (using sim_size):\n( /tmp/tmp93iiiut8pl.rank_genes_groups_dotplot.rank_genes_groups.krumsiek11.png v. /tmp/tmpv3sfi9dlpl.rank_genes_groups_dotplot.rank_genes_groups.krumsiek11.png )\nFiles /tmp/tmp93iiiut8pl.rank_genes_groups_dotplot.rank_genes_groups.krumsiek11.png=88159b but /tmp/tmpv3sfi9dlpl.rank_genes_groups_dotplot.rank_genes_groups.krumsiek11.png=109397b - compare by size (delta=10000) failed" ], "status": "failure", "test_index": 29, "time_seconds": 35.44199299812317, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file dotplot_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #30)" name="29" time="37.794923543930054">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adata": {   "id": "4cab7fb0eb2dc16c",   "src": "hda"  },  "advanced_common|show_log": true,  "format": "png",  "method|color_map": "viridis",  "method|dendrogram": false,  "method|gene_symbols": "symbol",  "method|log": false,  "method|matplotlib_pyplot_scatter|edgecolors": "face",  "method|matplotlib_pyplot_scatter|linewidths": "0",  "method|method": "pl.rank_genes_groups_dotplot",  "method|n_genes": "10",  "method|use_raw": false,  "method|var_names|type": "all" }, "job": {  "command_line": "cp \u0027/galaxy/server/database/objects/9/8/4/dataset_984d9eff-b3a0-4506-965b-6ca901e98571.dat\u0027 \u0027anndata.h5ad\u0027 \u0026\u0026 cat \u0027/galaxy/server/database/jobs_directory/000/484/configs/tmpebxit5nh\u0027 \u003e \u0027/galaxy/server/database/objects/1/e/3/dataset_1e3bda7f-f9c9-4a0e-99f0-761ac40415a0.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/484/configs/tmpebxit5nh\u0027 \u003e\u003e \u0027/galaxy/server/database/objects/1/e/3/dataset_1e3bda7f-f9c9-4a0e-99f0-761ac40415a0.dat\u0027 \u0026\u0026 ls . \u003e\u003e \u0027/galaxy/server/database/objects/1/e/3/dataset_1e3bda7f-f9c9-4a0e-99f0-761ac40415a0.dat\u0027 \u0026\u0026 touch \u0027anndata_info.txt\u0027 \u0026\u0026 cat \u0027anndata_info.txt\u0027  | sed -r \u00271 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g\u0027 | sed \"s|\u0027||g\"  | sed -r \u0027s|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g\u0027 | sed \u0027s|, |\\n-    |g\u0027",  "command_version": "scanpy version: 1.9.6",  "copied_from_job_id": null,  "create_time": "2025-01-10T08:11:45.170105",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-hwfdg",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "3ccedcc65949bd13",  "inputs": {   "adata": {    "id": "4cab7fb0eb2dc16c",    "src": "hda",    "uuid": "984d9eff-b3a0-4506-965b-6ca901e98571"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "5.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "5 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736496712.0000000",    "title": "Job End Time",    "value": "2025-01-10 08:11:52"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736496707.0000000",    "title": "Job Start Time",    "value": "2025-01-10 08:11:47"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "hidden_output": {    "id": "ef5e413cd3f030d2",    "src": "hda",    "uuid": "1e3bda7f-f9c9-4a0e-99f0-761ac40415a0"   },   "out_png": {    "id": "7e8a6c0cb3d63340",    "src": "hda",    "uuid": "3f92e885-c26c-449c-87b2-76e8789500e6"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced_common": "{\"show_log\": true}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "format": "\"png\"",   "method": "{\"__current_case__\": 25, \"color_map\": \"viridis\", \"dendrogram\": false, \"dot_max\": \"\", \"dot_min\": \"\", \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"gene_symbols\": \"symbol\", \"groupby\": \"\", \"groups\": \"\", \"key\": \"\", \"layer\": \"\", \"log\": false, \"matplotlib_pyplot_scatter\": {\"alpha\": \"\", \"edgecolors\": \"face\", \"linewidths\": \"0.0\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.rank_genes_groups_dotplot\", \"n_genes\": \"10\", \"num_categories\": \"7\", \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\", \"var_names\": {\"__current_case__\": 0, \"type\": \"all\"}}"  },  "state": "ok",  "stderr": "WARNING: saving figure to file dotplot_.png\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4",  "tool_stderr": "WARNING: saving figure to file dotplot_.png\n",  "tool_stdout": "",  "update_time": "2025-01-10T08:12:02.985169",  "user_email": "tests@fake.org" }, "output_problems": [  "Output out_png:  different than expected, difference (using sim_size):\n( /tmp/tmp_7km6pn8pl.rank_genes_groups_dotplot.rank_genes_groups.krumsiek11.png v. /tmp/tmperydjihupl.rank_genes_groups_dotplot.rank_genes_groups.krumsiek11.png )\nFiles /tmp/tmp_7km6pn8pl.rank_genes_groups_dotplot.rank_genes_groups.krumsiek11.png=88159b but /tmp/tmperydjihupl.rank_genes_groups_dotplot.rank_genes_groups.krumsiek11.png=109397b - compare by size (delta=10000) failed" ], "status": "failure", "test_index": 29, "time_seconds": 37.794923543930054, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file dotplot_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #4)" name="3" time="35.86825251579285">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.WARNING: saving figure to file heatmap.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #4)" name="3" time="38.026692628860474">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.WARNING: saving figure to file heatmap.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #31)" name="30" time="36.548195600509644">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file heatmap.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #31)" name="30" time="11.190560817718506">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 30, "time_seconds": 11.190560817718506, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #32)" name="31" time="37.23210000991821">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file matrixplot_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #32)" name="31" time="36.410577058792114">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file matrixplot_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #33)" name="32" time="54.33556795120239">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adata": {   "id": "7b24c80b3aa17b0e",   "src": "hda"  },  "advanced_common|show_log": true,  "format": "png",  "method|dendrogram": true,  "method|gene_symbols": "symbol",  "method|log": false,  "method|method": "pl.rank_genes_groups_stacked_violin",  "method|n_genes": "10",  "method|row_palette": "muted",  "method|seaborn_violinplot|bw": "scott",  "method|seaborn_violinplot|color": "AliceBlue",  "method|seaborn_violinplot|linewidth": "0",  "method|seaborn_violinplot|saturation": "0.75",  "method|standard_scale": "None",  "method|swap_axes": true,  "method|use_raw": false,  "method|violin_plot|scale": "width",  "method|violin_plot|stripplot|stripplot": "True" }, "job": {  "command_line": "cp \u0027/galaxy/server/database/objects/5/a/9/dataset_5a945e0e-5b51-4ae4-a6a7-a035abdd3323.dat\u0027 \u0027anndata.h5ad\u0027 \u0026\u0026 cat \u0027/galaxy/server/database/jobs_directory/000/417/configs/tmp6sy7zotp\u0027 \u003e \u0027/galaxy/server/database/objects/7/a/e/dataset_7ae999a4-b738-4fc0-90d0-902ec4cb7acc.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/417/configs/tmp6sy7zotp\u0027 \u003e\u003e \u0027/galaxy/server/database/objects/7/a/e/dataset_7ae999a4-b738-4fc0-90d0-902ec4cb7acc.dat\u0027 \u0026\u0026 ls . \u003e\u003e \u0027/galaxy/server/database/objects/7/a/e/dataset_7ae999a4-b738-4fc0-90d0-902ec4cb7acc.dat\u0027 \u0026\u0026 touch \u0027anndata_info.txt\u0027 \u0026\u0026 cat \u0027anndata_info.txt\u0027  | sed -r \u00271 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g\u0027 | sed \"s|\u0027||g\"  | sed -r \u0027s|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g\u0027 | sed \u0027s|, |\\n-    |g\u0027",  "command_version": "scanpy version: 1.9.6",  "copied_from_job_id": null,  "create_time": "2025-01-10T07:51:00.645638",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-xnrb7",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "c608b4927aa9d400",  "inputs": {   "adata": {    "id": "7b24c80b3aa17b0e",    "src": "hda",    "uuid": "5a945e0e-5b51-4ae4-a6a7-a035abdd3323"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "23.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "23 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736495485.0000000",    "title": "Job End Time",    "value": "2025-01-10 07:51:25"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736495462.0000000",    "title": "Job Start Time",    "value": "2025-01-10 07:51:02"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "hidden_output": {    "id": "05c1aeded8846503",    "src": "hda",    "uuid": "7ae999a4-b738-4fc0-90d0-902ec4cb7acc"   },   "out_png": {    "id": "4ddc7210fd23918b",    "src": "hda",    "uuid": "60e4e77d-abd0-4b93-b203-964cf8422323"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced_common": "{\"show_log\": true}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "format": "\"png\"",   "method": "{\"__current_case__\": 28, \"dendrogram\": true, \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"gene_symbols\": \"symbol\", \"groups\": \"\", \"key\": \"\", \"layer\": \"\", \"log\": false, \"method\": \"pl.rank_genes_groups_stacked_violin\", \"n_genes\": \"10\", \"row_palette\": \"muted\", \"seaborn_violinplot\": {\"bw\": \"scott\", \"color\": \"AliceBlue\", \"linewidth\": \"0.0\", \"orient\": null, \"saturation\": \"0.75\"}, \"standard_scale\": \"None\", \"swap_axes\": true, \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\", \"violin_plot\": {\"scale\": \"width\", \"stripplot\": {\"__current_case__\": 0, \"jitter\": {\"__current_case__\": 0, \"jitter\": \"True\", \"size\": \"1.0\"}, \"stripplot\": \"True\"}}}"  },  "state": "ok",  "stderr": "WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file stacked_violin_.png\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4",  "tool_stderr": "WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file stacked_violin_.png\n",  "tool_stdout": "",  "update_time": "2025-01-10T07:51:35.801277",  "user_email": "tests@fake.org" }, "output_problems": [  "Output out_png:  different than expected, difference (using sim_size):\n( /tmp/tmpgaguwyr6pl.rank_genes_groups_stacked_violin.rank_genes_groups.krumsiek11.png v. /tmp/tmptvyg9buopl.rank_genes_groups_stacked_violin.rank_genes_groups.krumsiek11.png )\nFiles /tmp/tmpgaguwyr6pl.rank_genes_groups_stacked_violin.rank_genes_groups.krumsiek11.png=103357b but /tmp/tmptvyg9buopl.rank_genes_groups_stacked_violin.rank_genes_groups.krumsiek11.png=89606b - compare by size (delta=10000) failed" ], "status": "failure", "test_index": 32, "time_seconds": 54.33556795120239, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.WARNING: saving figure to file stacked_violin_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #33)" name="32" time="56.209837198257446">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adata": {   "id": "9eb2cc26261042b9",   "src": "hda"  },  "advanced_common|show_log": true,  "format": "png",  "method|dendrogram": true,  "method|gene_symbols": "symbol",  "method|log": false,  "method|method": "pl.rank_genes_groups_stacked_violin",  "method|n_genes": "10",  "method|row_palette": "muted",  "method|seaborn_violinplot|bw": "scott",  "method|seaborn_violinplot|color": "AliceBlue",  "method|seaborn_violinplot|linewidth": "0",  "method|seaborn_violinplot|saturation": "0.75",  "method|standard_scale": "None",  "method|swap_axes": true,  "method|use_raw": false,  "method|violin_plot|scale": "width",  "method|violin_plot|stripplot|stripplot": "True" }, "job": {  "command_line": "cp \u0027/galaxy/server/database/objects/3/0/8/dataset_308bbefe-fb2f-49ee-a71a-0fb22fe7a8fe.dat\u0027 \u0027anndata.h5ad\u0027 \u0026\u0026 cat \u0027/galaxy/server/database/jobs_directory/000/489/configs/tmp4cy0ry2t\u0027 \u003e \u0027/galaxy/server/database/objects/a/6/0/dataset_a601eda4-2749-4792-8a78-ee1cd861ecd4.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/489/configs/tmp4cy0ry2t\u0027 \u003e\u003e \u0027/galaxy/server/database/objects/a/6/0/dataset_a601eda4-2749-4792-8a78-ee1cd861ecd4.dat\u0027 \u0026\u0026 ls . \u003e\u003e \u0027/galaxy/server/database/objects/a/6/0/dataset_a601eda4-2749-4792-8a78-ee1cd861ecd4.dat\u0027 \u0026\u0026 touch \u0027anndata_info.txt\u0027 \u0026\u0026 cat \u0027anndata_info.txt\u0027  | sed -r \u00271 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g\u0027 | sed \"s|\u0027||g\"  | sed -r \u0027s|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g\u0027 | sed \u0027s|, |\\n-    |g\u0027",  "command_version": "scanpy version: 1.9.6",  "copied_from_job_id": null,  "create_time": "2025-01-10T08:13:10.875112",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-jkdt6",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "a3b812fc71e33619",  "inputs": {   "adata": {    "id": "9eb2cc26261042b9",    "src": "hda",    "uuid": "308bbefe-fb2f-49ee-a71a-0fb22fe7a8fe"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "24.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "24 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736496816.0000000",    "title": "Job End Time",    "value": "2025-01-10 08:13:36"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736496792.0000000",    "title": "Job Start Time",    "value": "2025-01-10 08:13:12"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "hidden_output": {    "id": "eabdf53f1cbc9fbe",    "src": "hda",    "uuid": "a601eda4-2749-4792-8a78-ee1cd861ecd4"   },   "out_png": {    "id": "e04576f8f1bd078c",    "src": "hda",    "uuid": "cb6821d7-c510-4d6d-92b5-af4f90981541"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced_common": "{\"show_log\": true}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "format": "\"png\"",   "method": "{\"__current_case__\": 28, \"dendrogram\": true, \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"gene_symbols\": \"symbol\", \"groups\": \"\", \"key\": \"\", \"layer\": \"\", \"log\": false, \"method\": \"pl.rank_genes_groups_stacked_violin\", \"n_genes\": \"10\", \"row_palette\": \"muted\", \"seaborn_violinplot\": {\"bw\": \"scott\", \"color\": \"AliceBlue\", \"linewidth\": \"0.0\", \"orient\": null, \"saturation\": \"0.75\"}, \"standard_scale\": \"None\", \"swap_axes\": true, \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\", \"violin_plot\": {\"scale\": \"width\", \"stripplot\": {\"__current_case__\": 0, \"jitter\": {\"__current_case__\": 0, \"jitter\": \"True\", \"size\": \"1.0\"}, \"stripplot\": \"True\"}}}"  },  "state": "ok",  "stderr": "WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file stacked_violin_.png\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4",  "tool_stderr": "WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file stacked_violin_.png\n",  "tool_stdout": "",  "update_time": "2025-01-10T08:13:47.119596",  "user_email": "tests@fake.org" }, "output_problems": [  "Output out_png:  different than expected, difference (using sim_size):\n( /tmp/tmpgnp371rjpl.rank_genes_groups_stacked_violin.rank_genes_groups.krumsiek11.png v. /tmp/tmpkm_z11qgpl.rank_genes_groups_stacked_violin.rank_genes_groups.krumsiek11.png )\nFiles /tmp/tmpgnp371rjpl.rank_genes_groups_stacked_violin.rank_genes_groups.krumsiek11.png=103357b but /tmp/tmpkm_z11qgpl.rank_genes_groups_stacked_violin.rank_genes_groups.krumsiek11.png=90132b - compare by size (delta=10000) failed" ], "status": "failure", "test_index": 32, "time_seconds": 56.209837198257446, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.WARNING: saving figure to file stacked_violin_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #34)" name="33" time="36.41519570350647">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file scatter.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #34)" name="33" time="37.346726417541504">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file scatter.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #35)" name="34" time="42.34893465042114">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adata": {   "id": "0a22de5de8d92aec",   "src": "hda"  },  "advanced_common|show_log": true,  "format": "png",  "method|color_map": "viridis",  "method|dendrogram": false,  "method|groupby": "bulk_labels",  "method|log": false,  "method|matplotlib_pyplot_scatter|edgecolors": "face",  "method|matplotlib_pyplot_scatter|linewidths": "0",  "method|method": "pl.rank_genes_groups_dotplot",  "method|use_raw": false,  "method|var_names|type": "customfile",  "method|var_names|var_names": {   "id": "d6b5b1a0a9ecfbd6",   "src": "hda"  } }, "job": {  "command_line": "cp \u0027/galaxy/server/database/objects/f/5/8/dataset_f587dcce-67e0-46bb-a878-4a4ac73661c4.dat\u0027 \u0027anndata.h5ad\u0027 \u0026\u0026 cat \u0027/galaxy/server/database/jobs_directory/000/422/configs/tmpn8leeruz\u0027 \u003e \u0027/galaxy/server/database/objects/e/2/d/dataset_e2db7157-9999-428f-b40a-6d126d4f14ab.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/422/configs/tmpn8leeruz\u0027 \u003e\u003e \u0027/galaxy/server/database/objects/e/2/d/dataset_e2db7157-9999-428f-b40a-6d126d4f14ab.dat\u0027 \u0026\u0026 ls . \u003e\u003e \u0027/galaxy/server/database/objects/e/2/d/dataset_e2db7157-9999-428f-b40a-6d126d4f14ab.dat\u0027 \u0026\u0026 touch \u0027anndata_info.txt\u0027 \u0026\u0026 cat \u0027anndata_info.txt\u0027  | sed -r \u00271 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g\u0027 | sed \"s|\u0027||g\"  | sed -r \u0027s|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g\u0027 | sed \u0027s|, |\\n-    |g\u0027",  "command_version": "scanpy version: 1.9.6",  "copied_from_job_id": null,  "create_time": "2025-01-10T07:52:33.024445",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-w4lh9",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "58353eb2d738ff30",  "inputs": {   "adata": {    "id": "0a22de5de8d92aec",    "src": "hda",    "uuid": "f587dcce-67e0-46bb-a878-4a4ac73661c4"   },   "method|var_names|var_names": {    "id": "d6b5b1a0a9ecfbd6",    "src": "hda",    "uuid": "957e9702-6f5b-41a6-954b-4a05641dfbe1"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "9.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "9 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736495563.0000000",    "title": "Job End Time",    "value": "2025-01-10 07:52:43"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736495554.0000000",    "title": "Job Start Time",    "value": "2025-01-10 07:52:34"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "hidden_output": {    "id": "c628b1ffa4419828",    "src": "hda",    "uuid": "e2db7157-9999-428f-b40a-6d126d4f14ab"   },   "out_png": {    "id": "ad4d7c6bbebc3f1a",    "src": "hda",    "uuid": "df954a05-3017-43fd-aa5e-0c0f1742ba13"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced_common": "{\"show_log\": true}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "format": "\"png\"",   "method": "{\"__current_case__\": 25, \"color_map\": \"viridis\", \"dendrogram\": false, \"dot_max\": \"\", \"dot_min\": \"\", \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"gene_symbols\": \"\", \"groupby\": \"bulk_labels\", \"groups\": \"\", \"key\": \"\", \"layer\": \"\", \"log\": false, \"matplotlib_pyplot_scatter\": {\"alpha\": \"\", \"edgecolors\": \"face\", \"linewidths\": \"0.0\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.rank_genes_groups_dotplot\", \"n_genes\": \"10\", \"num_categories\": \"7\", \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\", \"var_names\": {\"__current_case__\": 2, \"header\": \"included\", \"type\": \"customfile\", \"var_names\": {\"values\": [{\"id\": 551, \"src\": \"hda\"}]}}}"  },  "state": "ok",  "stderr": "WARNING: saving figure to file dotplot_.png\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4",  "tool_stderr": "WARNING: saving figure to file dotplot_.png\n",  "tool_stdout": "",  "update_time": "2025-01-10T07:52:54.569155",  "user_email": "tests@fake.org" }, "output_problems": [  "Output out_png:  different than expected, difference (using sim_size):\n( /tmp/tmpfvof6x3bpl.rank_genes_groups.newton-cg.pbmc68k_highly_reduced_marker_1.png v. /tmp/tmpo7wxa2erpl.rank_genes_groups.newton-cg.pbmc68k_highly_reduced_marker_1.png )\nFiles /tmp/tmpfvof6x3bpl.rank_genes_groups.newton-cg.pbmc68k_highly_reduced_marker_1.png=697709b but /tmp/tmpo7wxa2erpl.rank_genes_groups.newton-cg.pbmc68k_highly_reduced_marker_1.png=930673b - compare by size (delta=10000) failed" ], "status": "failure", "test_index": 34, "time_seconds": 42.34893465042114, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file dotplot_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #35)" name="34" time="43.51091170310974">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adata": {   "id": "06d824d7fd42d680",   "src": "hda"  },  "advanced_common|show_log": true,  "format": "png",  "method|color_map": "viridis",  "method|dendrogram": false,  "method|groupby": "bulk_labels",  "method|log": false,  "method|matplotlib_pyplot_scatter|edgecolors": "face",  "method|matplotlib_pyplot_scatter|linewidths": "0",  "method|method": "pl.rank_genes_groups_dotplot",  "method|use_raw": false,  "method|var_names|type": "customfile",  "method|var_names|var_names": {   "id": "cea0d9cb0efa07f2",   "src": "hda"  } }, "job": {  "command_line": "cp \u0027/galaxy/server/database/objects/7/6/6/dataset_76684d2e-2a93-43ba-86da-80f9e09800a5.dat\u0027 \u0027anndata.h5ad\u0027 \u0026\u0026 cat \u0027/galaxy/server/database/jobs_directory/000/494/configs/tmpb5kilpm9\u0027 \u003e \u0027/galaxy/server/database/objects/0/f/4/dataset_0f4f4c9a-4c0e-49ee-ac9d-2df48f7fc903.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/494/configs/tmpb5kilpm9\u0027 \u003e\u003e \u0027/galaxy/server/database/objects/0/f/4/dataset_0f4f4c9a-4c0e-49ee-ac9d-2df48f7fc903.dat\u0027 \u0026\u0026 ls . \u003e\u003e \u0027/galaxy/server/database/objects/0/f/4/dataset_0f4f4c9a-4c0e-49ee-ac9d-2df48f7fc903.dat\u0027 \u0026\u0026 touch \u0027anndata_info.txt\u0027 \u0026\u0026 cat \u0027anndata_info.txt\u0027  | sed -r \u00271 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g\u0027 | sed \"s|\u0027||g\"  | sed -r \u0027s|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g\u0027 | sed \u0027s|, |\\n-    |g\u0027",  "command_version": "scanpy version: 1.9.6",  "copied_from_job_id": null,  "create_time": "2025-01-10T08:14:45.689974",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-57hn4",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "698c91a0ccda02d3",  "inputs": {   "adata": {    "id": "06d824d7fd42d680",    "src": "hda",    "uuid": "76684d2e-2a93-43ba-86da-80f9e09800a5"   },   "method|var_names|var_names": {    "id": "cea0d9cb0efa07f2",    "src": "hda",    "uuid": "4ae18974-662a-451d-bf65-ce4104872718"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "10.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "10 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736496897.0000000",    "title": "Job End Time",    "value": "2025-01-10 08:14:57"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736496887.0000000",    "title": "Job Start Time",    "value": "2025-01-10 08:14:47"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "hidden_output": {    "id": "678b79e7fc7dae91",    "src": "hda",    "uuid": "0f4f4c9a-4c0e-49ee-ac9d-2df48f7fc903"   },   "out_png": {    "id": "32233436b491cbec",    "src": "hda",    "uuid": "e5d30a41-fe43-4a01-97c4-f60b05184a8e"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced_common": "{\"show_log\": true}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "format": "\"png\"",   "method": "{\"__current_case__\": 25, \"color_map\": \"viridis\", \"dendrogram\": false, \"dot_max\": \"\", \"dot_min\": \"\", \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"gene_symbols\": \"\", \"groupby\": \"bulk_labels\", \"groups\": \"\", \"key\": \"\", \"layer\": \"\", \"log\": false, \"matplotlib_pyplot_scatter\": {\"alpha\": \"\", \"edgecolors\": \"face\", \"linewidths\": \"0.0\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.rank_genes_groups_dotplot\", \"n_genes\": \"10\", \"num_categories\": \"7\", \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\", \"var_names\": {\"__current_case__\": 2, \"header\": \"included\", \"type\": \"customfile\", \"var_names\": {\"values\": [{\"id\": 659, \"src\": \"hda\"}]}}}"  },  "state": "ok",  "stderr": "WARNING: saving figure to file dotplot_.png\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4",  "tool_stderr": "WARNING: saving figure to file dotplot_.png\n",  "tool_stdout": "",  "update_time": "2025-01-10T08:15:08.104484",  "user_email": "tests@fake.org" }, "output_problems": [  "Output out_png:  different than expected, difference (using sim_size):\n( /tmp/tmpn8aezha2pl.rank_genes_groups.newton-cg.pbmc68k_highly_reduced_marker_1.png v. /tmp/tmpmcrulz8rpl.rank_genes_groups.newton-cg.pbmc68k_highly_reduced_marker_1.png )\nFiles /tmp/tmpn8aezha2pl.rank_genes_groups.newton-cg.pbmc68k_highly_reduced_marker_1.png=697709b but /tmp/tmpmcrulz8rpl.rank_genes_groups.newton-cg.pbmc68k_highly_reduced_marker_1.png=930673b - compare by size (delta=10000) failed" ], "status": "failure", "test_index": 34, "time_seconds": 43.51091170310974, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file dotplot_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #36)" name="35" time="39.19859433174133">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adata": {   "id": "83807f0f8f72e37b",   "src": "hda"  },  "advanced_common|show_log": true,  "format": "png",  "method|color_map": "viridis",  "method|dendrogram": false,  "method|groupby": "bulk_labels",  "method|log": false,  "method|matplotlib_pyplot_scatter|edgecolors": "face",  "method|matplotlib_pyplot_scatter|linewidths": "0",  "method|method": "pl.rank_genes_groups_dotplot",  "method|use_raw": false,  "method|var_names|type": "customfile",  "method|var_names|var_names": {   "id": "49a250c420378129",   "src": "hda"  } }, "job": {  "command_line": "cp \u0027/galaxy/server/database/objects/f/2/8/dataset_f28b204a-fbce-4155-8c2c-9d07cbdee8a7.dat\u0027 \u0027anndata.h5ad\u0027 \u0026\u0026 cat \u0027/galaxy/server/database/jobs_directory/000/425/configs/tmpme2aq7ql\u0027 \u003e \u0027/galaxy/server/database/objects/7/9/2/dataset_7927a8c6-2e00-4223-b56b-6a5605ed903e.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/425/configs/tmpme2aq7ql\u0027 \u003e\u003e \u0027/galaxy/server/database/objects/7/9/2/dataset_7927a8c6-2e00-4223-b56b-6a5605ed903e.dat\u0027 \u0026\u0026 ls . \u003e\u003e \u0027/galaxy/server/database/objects/7/9/2/dataset_7927a8c6-2e00-4223-b56b-6a5605ed903e.dat\u0027 \u0026\u0026 touch \u0027anndata_info.txt\u0027 \u0026\u0026 cat \u0027anndata_info.txt\u0027  | sed -r \u00271 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g\u0027 | sed \"s|\u0027||g\"  | sed -r \u0027s|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g\u0027 | sed \u0027s|, |\\n-    |g\u0027",  "command_version": "scanpy version: 1.9.6",  "copied_from_job_id": null,  "create_time": "2025-01-10T07:53:15.389588",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-jfkvq",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "9873dce580859f8d",  "inputs": {   "adata": {    "id": "83807f0f8f72e37b",    "src": "hda",    "uuid": "f28b204a-fbce-4155-8c2c-9d07cbdee8a7"   },   "method|var_names|var_names": {    "id": "49a250c420378129",    "src": "hda",    "uuid": "c3b5250e-ee2d-4d6f-b584-e46a85937f5d"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "6.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "6 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736495603.0000000",    "title": "Job End Time",    "value": "2025-01-10 07:53:23"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736495597.0000000",    "title": "Job Start Time",    "value": "2025-01-10 07:53:17"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "hidden_output": {    "id": "241c238052ca3f1a",    "src": "hda",    "uuid": "7927a8c6-2e00-4223-b56b-6a5605ed903e"   },   "out_png": {    "id": "f75487e44db480b7",    "src": "hda",    "uuid": "f1665535-4235-40c8-b8c6-e4d8c558676e"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced_common": "{\"show_log\": true}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "format": "\"png\"",   "method": "{\"__current_case__\": 25, \"color_map\": \"viridis\", \"dendrogram\": false, \"dot_max\": \"\", \"dot_min\": \"\", \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"gene_symbols\": \"\", \"groupby\": \"bulk_labels\", \"groups\": \"\", \"key\": \"\", \"layer\": \"\", \"log\": false, \"matplotlib_pyplot_scatter\": {\"alpha\": \"\", \"edgecolors\": \"face\", \"linewidths\": \"0.0\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.rank_genes_groups_dotplot\", \"n_genes\": \"10\", \"num_categories\": \"7\", \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\", \"var_names\": {\"__current_case__\": 2, \"header\": \"included\", \"type\": \"customfile\", \"var_names\": {\"values\": [{\"id\": 555, \"src\": \"hda\"}]}}}"  },  "state": "ok",  "stderr": "WARNING: saving figure to file dotplot_.png\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4",  "tool_stderr": "WARNING: saving figure to file dotplot_.png\n",  "tool_stdout": "",  "update_time": "2025-01-10T07:53:33.945372",  "user_email": "tests@fake.org" }, "output_problems": [  "Output out_png:  different than expected, difference (using sim_size):\n( /tmp/tmpaqff3euzpl.rank_genes_groups.newton-cg.pbmc68k_highly_reduced_marker_filtered_1.png v. /tmp/tmpg4ucystgpl.rank_genes_groups.newton-cg.pbmc68k_highly_reduced_marker_filtered_1.png )\nFiles /tmp/tmpaqff3euzpl.rank_genes_groups.newton-cg.pbmc68k_highly_reduced_marker_filtered_1.png=328486b but /tmp/tmpg4ucystgpl.rank_genes_groups.newton-cg.pbmc68k_highly_reduced_marker_filtered_1.png=442714b - compare by size (delta=10000) failed" ], "status": "failure", "test_index": 35, "time_seconds": 39.19859433174133, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file dotplot_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #36)" name="35" time="38.32126712799072">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "adata": {   "id": "005175872753bb15",   "src": "hda"  },  "advanced_common|show_log": true,  "format": "png",  "method|color_map": "viridis",  "method|dendrogram": false,  "method|groupby": "bulk_labels",  "method|log": false,  "method|matplotlib_pyplot_scatter|edgecolors": "face",  "method|matplotlib_pyplot_scatter|linewidths": "0",  "method|method": "pl.rank_genes_groups_dotplot",  "method|use_raw": false,  "method|var_names|type": "customfile",  "method|var_names|var_names": {   "id": "866416bf0d07838f",   "src": "hda"  } }, "job": {  "command_line": "cp \u0027/galaxy/server/database/objects/c/2/3/dataset_c238a21c-1bc0-4693-8f83-d02413842999.dat\u0027 \u0027anndata.h5ad\u0027 \u0026\u0026 cat \u0027/galaxy/server/database/jobs_directory/000/497/configs/tmpfi571aza\u0027 \u003e \u0027/galaxy/server/database/objects/6/7/3/dataset_67329c53-3245-4303-b33b-28fa415916ee.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/497/configs/tmpfi571aza\u0027 \u003e\u003e \u0027/galaxy/server/database/objects/6/7/3/dataset_67329c53-3245-4303-b33b-28fa415916ee.dat\u0027 \u0026\u0026 ls . \u003e\u003e \u0027/galaxy/server/database/objects/6/7/3/dataset_67329c53-3245-4303-b33b-28fa415916ee.dat\u0027 \u0026\u0026 touch \u0027anndata_info.txt\u0027 \u0026\u0026 cat \u0027anndata_info.txt\u0027  | sed -r \u00271 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g\u0027 | sed \"s|\u0027||g\"  | sed -r \u0027s|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g\u0027 | sed \u0027s|, |\\n-    |g\u0027",  "command_version": "scanpy version: 1.9.6",  "copied_from_job_id": null,  "create_time": "2025-01-10T08:15:27.885071",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-phhfs",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "603774118e3a728f",  "inputs": {   "adata": {    "id": "005175872753bb15",    "src": "hda",    "uuid": "c238a21c-1bc0-4693-8f83-d02413842999"   },   "method|var_names|var_names": {    "id": "866416bf0d07838f",    "src": "hda",    "uuid": "cfc6ba71-277a-4c57-b581-38824ec15534"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "7.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "7 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1736496936.0000000",    "title": "Job End Time",    "value": "2025-01-10 08:15:36"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1736496929.0000000",    "title": "Job Start Time",    "value": "2025-01-10 08:15:29"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "hidden_output": {    "id": "50ea04c332665717",    "src": "hda",    "uuid": "67329c53-3245-4303-b33b-28fa415916ee"   },   "out_png": {    "id": "2d48a31d6a24da51",    "src": "hda",    "uuid": "7db5d6bf-e295-4930-8174-6a22987df84f"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced_common": "{\"show_log\": true}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "format": "\"png\"",   "method": "{\"__current_case__\": 25, \"color_map\": \"viridis\", \"dendrogram\": false, \"dot_max\": \"\", \"dot_min\": \"\", \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"gene_symbols\": \"\", \"groupby\": \"bulk_labels\", \"groups\": \"\", \"key\": \"\", \"layer\": \"\", \"log\": false, \"matplotlib_pyplot_scatter\": {\"alpha\": \"\", \"edgecolors\": \"face\", \"linewidths\": \"0.0\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.rank_genes_groups_dotplot\", \"n_genes\": \"10\", \"num_categories\": \"7\", \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\", \"var_names\": {\"__current_case__\": 2, \"header\": \"included\", \"type\": \"customfile\", \"var_names\": {\"values\": [{\"id\": 663, \"src\": \"hda\"}]}}}"  },  "state": "ok",  "stderr": "WARNING: saving figure to file dotplot_.png\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4",  "tool_stderr": "WARNING: saving figure to file dotplot_.png\n",  "tool_stdout": "",  "update_time": "2025-01-10T08:15:46.491031",  "user_email": "tests@fake.org" }, "output_problems": [  "Output out_png:  different than expected, difference (using sim_size):\n( /tmp/tmpl9op0v9jpl.rank_genes_groups.newton-cg.pbmc68k_highly_reduced_marker_filtered_1.png v. /tmp/tmpgu3hqnb4pl.rank_genes_groups.newton-cg.pbmc68k_highly_reduced_marker_filtered_1.png )\nFiles /tmp/tmpl9op0v9jpl.rank_genes_groups.newton-cg.pbmc68k_highly_reduced_marker_filtered_1.png=328486b but /tmp/tmpgu3hqnb4pl.rank_genes_groups.newton-cg.pbmc68k_highly_reduced_marker_filtered_1.png=442714b - compare by size (delta=10000) failed" ], "status": "failure", "test_index": 35, "time_seconds": 38.32126712799072, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file dotplot_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #5)" name="4" time="27.98541498184204">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "adata": {   "id": "358e5172f42ba3b6",   "src": "hda"  },  "advanced_common|show_log": true,  "format": "png",  "method|color_map": "hot",  "method|dendrogram": true,  "method|dot_max": "0.7",  "method|dot_min": "0.1",  "method|figsize|test": "no",  "method|groupby": "louvain",  "method|log": false,  "method|matplotlib_pyplot_scatter|edgecolors": "face",  "method|matplotlib_pyplot_scatter|linewidths": "0",  "method|method": "pl.dotplot",  "method|num_categories": "7",  "method|use_raw": false,  "method|var_group_positions_0|end": "1",  "method|var_group_positions_0|label": "B cells",  "method|var_group_positions_0|start": "0",  "method|var_group_positions_1|end": "12",  "method|var_group_positions_1|label": "dendritic",  "method|var_group_positions_1|start": "11",  "method|var_names|type": "custom",  "method|var_names|var_names": "CD79A, MS4A1, CD8A, CD8B, LYZ, GNLY, NKG7, RP3-467N11.1, FCGR3A, FCER1A, CST3, POU2AF1, LINC00402" }, "job": {  "command_line": "cp \u0027/galaxy/server/database/objects/c/c/8/dataset_cc8117d7-df32-4155-9d1a-4db07e6bfed7.dat\u0027 \u0027anndata.h5ad\u0027 \u0026\u0026 cat \u0027/galaxy/server/database/jobs_directory/000/361/configs/tmpovyz3qug\u0027 \u003e \u0027/galaxy/server/database/objects/2/b/7/dataset_2b70584a-eccd-467c-bef1-9cefc9d1b646.dat\u0027 \u0026\u0026 python \u0027/galaxy/server/database/jobs_directory/000/361/configs/tmpovyz3qug\u0027 \u003e\u003e \u0027/galaxy/server/database/objects/2/b/7/dataset_2b70584a-eccd-467c-bef1-9cefc9d1b646.dat\u0027 \u0026\u0026 ls . \u003e\u003e \u0027/galaxy/server/database/objects/2/b/7/dataset_2b70584a-eccd-467c-bef1-9cefc9d1b646.dat\u0027 \u0026\u0026 touch \u0027anndata_info.txt\u0027 \u0026\u0026 cat \u0027anndata_info.txt\u0027  | sed -r \u00271 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g\u0027 | sed \"s|\u0027||g\"  | sed -r \u0027s|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g\u0027 | sed \u0027s|, |\\n-    |g\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-10T07:33:36.405149",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-mff9t",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "8ab6e140be71d8d5",  "inputs": {   "adata": {    "id": "358e5172f42ba3b6",    "src": "hda",    "uuid": "cc8117d7-df32-4155-9d1a-4db07e6bfed7"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "hidden_output": {    "id": "429a6e9826d0a500",    "src": "hda",    "uuid": "2b70584a-eccd-467c-bef1-9cefc9d1b646"   },   "out_png": {    "id": "8a2b9a6172f9b697",    "src": "hda",    "uuid": "95110275-e8f6-40fe-9950-30485f51c83b"   }  },  "params": {   "__input_ext": "\"input\"",   "advanced_common": "{\"show_log\": true}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "format": "\"png\"",   "method": "{\"__current_case__\": 2, \"color_map\": \"hot\", \"dendrogram\": true, \"dot_max\": \"0.7\", \"dot_min\": \"0.1\", \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"gene_symbols\": \"\", \"groupby\": \"louvain\", \"layer\": \"\", \"log\": false, \"matplotlib_pyplot_scatter\": {\"alpha\": \"\", \"edgecolors\": \"face\", \"linewidths\": \"0.0\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.dotplot\", \"num_categories\": \"7\", \"use_raw\": false, \"var_group_positions\": [{\"__index__\": 0, \"end\": \"1\", \"label\": \"B cells\", \"start\": \"0\"}, {\"__index__\": 1, \"end\": \"12\", \"label\": \"dendritic\", \"start\": \"11\"}], \"var_group_rotation\": \"\", \"var_names\": {\"__current_case__\": 1, \"type\": \"custom\", \"var_names\": \"CD79A, MS4A1, CD8A, CD8B, LYZ, GNLY, NKG7, RP3-467N11.1, FCGR3A, FCER1A, CST3, POU2AF1, LINC00402\"}}"  },  "state": "error",  "stderr": "WARNING: dendrogram data not found (using key=dendrogram_louvain). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: Groups are not reordered because the `groupby` categories and the `var_group_labels` are different.\ncategories: 0, 1, 2, etc.\nvar_group_labels: B cells, dendritic\nWARNING: saving figure to file dotplot_.png\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4",  "tool_stderr": "WARNING: dendrogram data not found (using key=dendrogram_louvain). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: Groups are not reordered because the `groupby` categories and the `var_group_labels` are different.\ncategories: 0, 1, 2, etc.\nvar_group_labels: B cells, dendritic\nWARNING: saving figure to file dotplot_.png\n",  "tool_stdout": "",  "update_time": "2025-01-10T07:33:44.997905",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4, exit_code: None, stderr: WARNING: dendrogram data not found (using key=dendrogram_louvain). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: Groups are not reordered because the `groupby` categories and the `var_group_labels` are different.\ncategories: 0, 1, 2, etc.\nvar_group_labels: B cells, dendritic\nWARNING: saving figure to file dotplot_.png\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4, exit_code: None, stderr: WARNING: dendrogram data not found (using key=dendrogram_louvain). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: Groups are not reordered because the `groupby` categories and the `var_group_labels` are different.\ncategories: 0, 1, 2, etc.\nvar_group_labels: B cells, dendritic\nWARNING: saving figure to file dotplot_.png\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.9.6+galaxy4, exit_code: None, stderr: WARNING: dendrogram data not found (using key=dendrogram_louvain). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: Groups are not reordered because the `groupby` categories and the `var_group_labels` are different.\ncategories: 0, 1, 2, etc.\nvar_group_labels: B cells, dendritic\nWARNING: saving figure to file dotplot_.png\n." ], "status": "failure", "test_index": 4, "time_seconds": 27.98541498184204, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: dendrogram data not found (using key=dendrogram_louvain). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.WARNING: Groups are not reordered because the `groupby` categories and the `var_group_labels` are different.categories: 0, 1, 2, etc.var_group_labels: B cells, dendriticWARNING: saving figure to file dotplot_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #5)" name="4" time="10.481966257095337">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 4, "time_seconds": 10.481966257095337, "tool_id": "scanpy_plot", "tool_version": "1.9.6+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #6)" name="5" time="35.46448230743408">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.WARNING: saving figure to file dotplot_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #6)" name="5" time="34.74647784233093">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.WARNING: saving figure to file dotplot_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #7)" name="6" time="37.45065116882324">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file violin.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #7)" name="6" time="37.68233799934387">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: saving figure to file violin.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #8)" name="7" time="40.507604122161865">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.WARNING: saving figure to file stacked_violin_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #8)" name="7" time="40.20461130142212">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.WARNING: saving figure to file stacked_violin_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #9)" name="8" time="38.69900870323181">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.WARNING: saving figure to file stacked_violin_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #9)" name="8" time="37.36314082145691">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.WARNING: saving figure to file stacked_violin_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #10)" name="9" time="35.84713530540466">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.WARNING: saving figure to file matrixplot_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot (Test #10)" name="9" time="37.68015432357788">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            WARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.WARNING: saving figure to file matrixplot_.png
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_run_pca (Test #1)" name="0" time="0.14687657356262207">
        
            <error type="error" message="Input staging problem: Test input file (scale_data.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (scale_data.h5) cannot be found.", "status": "error", "test_index": 0, "time_seconds": 0.14687657356262207, "tool_id": "scanpy_run_pca", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="scanpy_run_pca (Test #1)" name="0" time="0.13777709007263184">
        
            <error type="error" message="Input staging problem: Test input file (scale_data.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (scale_data.h5) cannot be found.", "status": "error", "test_index": 0, "time_seconds": 0.13777709007263184, "tool_id": "scanpy_run_pca", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="table_compute (Test #1)" name="0" time="41.50414323806763">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #2)" name="1" time="33.14200258255005">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #11)" name="10" time="32.464266777038574">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #12)" name="11" time="33.05107235908508">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #13)" name="12" time="31.44577932357788">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #14)" name="13" time="25.382930278778076">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "singtabop|input": {   "id": "e775e492b01e299b",   "src": "hda"  },  "singtabop|user|elem_val|element_op": "None",  "singtabop|user|element|custom_expr": "-math.log(1 - elem/4096) * 4096 if elem != 4096 else elem - 0.5",  "singtabop|user|element|mode": "custom",  "singtabop|user|mode": "element" }, "job": {  "command_line": "cp \u0027/galaxy/server/database/jobs_directory/000/525/configs/tmpa0yqzwzk\u0027 ./userconfig.py \u0026\u0026 cp \u0027/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py\u0027 ./safety.py \u0026\u0026 cp \u0027/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py\u0027 ./table_compute.py \u0026\u0026 python ./table_compute.py",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-10T08:23:12.986672",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-k2xgl",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "75c3b9318a27f0bf",  "inputs": {   "singtabop|input": {    "id": "e775e492b01e299b",    "src": "hda",    "uuid": "2f9adfa9-07b9-4f33-8edd-11ed9b4f4820"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "table": {    "id": "86a57bc877b16310",    "src": "hda",    "uuid": "726fea07-279d-4eca-94ad-04c2c045fcab"   }  },  "params": {   "__input_ext": "\"tabular\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]",   "precision": "\"6\"",   "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 692, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 0, \"element_op\": \"None\"}, \"element\": {\"__current_case__\": 3, \"custom_expr\": \"-math.log(1 - elem/4096) * 4096 if elem != 4096 else elem - 0.5\", \"mode\": \"custom\"}, \"mode\": \"element\"}}"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-01-10T08:23:19.318434",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0, exit_code: None, stderr: ." ], "status": "failure", "test_index": 13, "time_seconds": 25.382930278778076, "tool_id": "table_compute", "tool_version": "1.2.4+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #15)" name="14" time="34.768497943878174">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #16)" name="15" time="34.810627460479736">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #17)" name="16" time="11.174746990203857">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 16, "time_seconds": 11.174746990203857, "tool_id": "table_compute", "tool_version": "1.2.4+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="table_compute (Test #18)" name="17" time="33.17232942581177">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #19)" name="18" time="33.349711894989014">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #20)" name="19" time="18.564958095550537">
        
            <error type="error" message="Parameter fulltable_custom_expr: An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.<>()"><![CDATA[
                { "dynamic_param_error": false, "execution_problem": "Parameter fulltable_custom_expr: An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.\u003c\u003e()", "inputs": {  "singtabop|input": {   "id": "8eaead9247e4a227",   "src": "hda"  },  "singtabop|use_type": "single",  "singtabop|user|general|fulltable_custom_expr": "for n in table: n = n + 1",  "singtabop|user|general|use": "custom",  "singtabop|user|mode": "fulltable" }, "status": "success", "test_index": 19, "time_seconds": 18.564958095550537, "tool_id": "table_compute", "tool_version": "1.2.4+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="table_compute (Test #3)" name="2" time="30.980505228042603">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #21)" name="20" time="19.196621656417847">
        
            <error type="error" message="Parameter fulltable_custom_expr: An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.<>()"><![CDATA[
                { "dynamic_param_error": false, "execution_problem": "Parameter fulltable_custom_expr: An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.\u003c\u003e()", "inputs": {  "singtabop|input": {   "id": "af65ff05c6c2afe0",   "src": "hda"  },  "singtabop|use_type": "single",  "singtabop|user|general|fulltable_custom_expr": "table + table[0,0]",  "singtabop|user|general|use": "custom",  "singtabop|user|mode": "fulltable" }, "status": "success", "test_index": 20, "time_seconds": 19.196621656417847, "tool_id": "table_compute", "tool_version": "1.2.4+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="table_compute (Test #22)" name="21" time="34.134056091308594">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #23)" name="22" time="33.337037324905396">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #24)" name="23" time="33.001498222351074">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #25)" name="24" time="32.108558177948">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #26)" name="25" time="32.63670468330383">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #27)" name="26" time="33.99732518196106">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #28)" name="27" time="74.30726766586304">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #29)" name="28" time="33.07091784477234">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #30)" name="29" time="32.33417201042175">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #4)" name="3" time="32.323808431625366">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #31)" name="30" time="36.829458713531494">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #32)" name="31" time="32.72598195075989">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #33)" name="32" time="31.987571716308594">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #34)" name="33" time="33.67527675628662">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #35)" name="34" time="35.045817375183105">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #36)" name="35" time="31.0982027053833">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #37)" name="36" time="32.401211738586426">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #38)" name="37" time="33.17369222640991">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #39)" name="38" time="33.415839433670044">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #40)" name="39" time="34.43833684921265">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #5)" name="4" time="30.25406265258789">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #41)" name="40" time="18.477139711380005">
        
            <error type="error" message="Parameter custom_expr: An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.<>()"><![CDATA[
                { "dynamic_param_error": false, "execution_problem": "Parameter custom_expr: An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.\u003c\u003e()", "inputs": {  "singtabop|col_row_names": [   "has_col_names",   "has_row_names"  ],  "singtabop|input": {   "id": "92b46df44aa88b44",   "src": "hda"  },  "singtabop|use_type": "single",  "singtabop|user|element|custom_expr": "el\u0027+\u0027em",  "singtabop|user|element|mode": "custom",  "singtabop|user|mode": "element" }, "status": "success", "test_index": 40, "time_seconds": 18.477139711380005, "tool_id": "table_compute", "tool_version": "1.2.4+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="table_compute (Test #42)" name="41" time="33.881314277648926">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #43)" name="42" time="34.021470069885254">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #6)" name="5" time="33.4037344455719">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #7)" name="6" time="32.46550965309143">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #8)" name="7" time="25.57939386367798">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "precision": "5",  "singtabop|input": {   "id": "2e77cb7fc07f9b1d",   "src": "hda"  },  "singtabop|use_type": "single",  "singtabop|user|axis": "1",  "singtabop|user|filtersumval_mode|against": "2",  "singtabop|user|filtersumval_mode|minmatch": "2",  "singtabop|user|filtersumval_mode|operation": "gt",  "singtabop|user|filtersumval_mode|use": "element",  "singtabop|user|mode": "filtersumval" }, "job": {  "command_line": "cp \u0027/galaxy/server/database/jobs_directory/000/513/configs/tmp7hitjzp5\u0027 ./userconfig.py \u0026\u0026 cp \u0027/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py\u0027 ./safety.py \u0026\u0026 cp \u0027/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py\u0027 ./table_compute.py \u0026\u0026 python ./table_compute.py",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-10T08:20:04.113717",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-rgfr4",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "2a651ada7757fa78",  "inputs": {   "singtabop|input": {    "id": "2e77cb7fc07f9b1d",    "src": "hda",    "uuid": "e171c674-84cb-48af-b87b-ef439a960e1b"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "table": {    "id": "b5ecdd5450281205",    "src": "hda",    "uuid": "db86c042-07eb-473a-91fa-7d10dc0e160c"   }  },  "params": {   "__input_ext": "\"tabular\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]",   "precision": "\"5\"",   "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 680, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"1\", \"filtersumval_mode\": {\"__current_case__\": 1, \"against\": \"2\", \"minmatch\": \"2\", \"operation\": \"gt\", \"use\": \"element\"}, \"mode\": \"filtersumval\"}}"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2025-01-10T08:20:10.611211",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0, exit_code: None, stderr: ." ], "status": "failure", "test_index": 7, "time_seconds": 25.57939386367798, "tool_id": "table_compute", "tool_version": "1.2.4+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #9)" name="8" time="32.35987949371338">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="table_compute (Test #10)" name="9" time="33.4278302192688">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="trim_galore (Test #1)" name="0" time="10.355212211608887">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 0, "time_seconds": 10.355212211608887, "tool_id": "trim_galore", "tool_version": "0.6.7+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="trim_galore (Test #2)" name="1" time="45.218573570251465">
        
            
            <system-out><![CDATA[
            pigz 2.6total 20K    drwxr-sr-x    2 101      root        4.0K Jan 10 06:35 .drwxr-sr-x   11 101      root        4.0K Jan 10 06:35 ..lrwxrwxrwx    1 root     root          86 Jan 10 06:35 input_1.fastq.gz -> /galaxy/server/database/objects/1/4/5/dataset_14531bc0-e70e-474e-8d10-0a5a692c794b.dat-rw-r--r--    1 root     root        1.9K Jan 10 06:35 input_1.fastq.gz_trimming_report.txt-rw-r--r--    1 root     root         291 Jan 10 06:35 input_1_trimmed.fq
            ]]></system-out>
            <system-err><![CDATA[
            Path to Cutadapt set as: 'cutadapt' (default)Cutadapt seems to be working fine (tested command 'cutadapt --version')Cutadapt version: 3.4Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)Letting the (modified) Cutadapt deal with the Python version insteadParallel gzip (pigz) detected. Proceeding with multicore (de)compression using 5 coresOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/38/working/AUTO-DETECTING ADAPTER TYPE===========================Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq.gz <<)Found perfect matches for the following adapter sequences:Adapter typeCountSequenceSequences analysedPercentageNextera0CTGTCTCTTATA20.00Illumina0AGATCGGAAGAGC20.00smallRNA0TGGAATTCTCGG20.00Unable to auto-detect most prominent adapter from the first specified file (count Nextera: 0, count Illumina: 0, count smallRNA: 0)Defaulting to Illumina universal adapter ( AGATCGGAAGAGC ). Specify -a SEQUENCE to avoid this behavior).Writing report to '/galaxy/server/database/jobs_directory/000/38/working/input_1.fastq.gz_trimming_report.txt'SUMMARISING RUN PARAMETERS==========================Input filename: input_1.fastq.gzTrimming mode: single-endTrim Galore version: 0.6.7Cutadapt version: 3.4Python version: could not detectNumber of cores used for trimming: 5Quality Phred score cutoff: 20Quality encoding type selected: ASCII+33Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; default (inconclusive auto-detection))Maximum trimming error rate: 0.1 (default)Minimum required adapter overlap (stringency): 1 bpMinimum required sequence length before a sequence gets removed: 20 bpOutput file(s) will be GZIP compressedCutadapt seems to be fairly up-to-date (version 3.4). Setting -j 5Writing final adapter and quality trimmed output to input_1_trimmed.fq.gz  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file input_1.fastq.gz <<< This is cutadapt 3.4 with Python 3.9.6Command line parameters: -j 5 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC input_1.fastq.gzProcessing reads on 5 cores in single-end mode ...Finished in 0.02 s (7876 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       2Reads with adapters:                         1 (50.0%)Reads written (passing filters):             2 (100.0%)Total basepairs processed:           188 bpQuality-trimmed:                      20 bp (10.6%)Total written (filtered):            167 bp (88.8%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 timesNo. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 100.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts110.501RUN STATISTICS FOR INPUT FILE: input_1.fastq.gz=============================================2 sequences processed in totalSequences removed because they became shorter than the length cutoff of 20 bp:0 (0.0%)
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="trim_galore (Test #11)" name="10" time="32.06322908401489">
        
            
            <system-out><![CDATA[
            pigz 2.6total 40K    drwxr-sr-x    2 101      root        4.0K Jan 10 06:39 .drwxr-sr-x   11 101      root        4.0K Jan 10 06:39 ..lrwxrwxrwx    1 root     root          86 Jan 10 06:39 input_1.fastq -> /galaxy/server/database/objects/1/e/9/dataset_1e9a4148-14f9-4845-8810-4e20384e43b5.dat-rw-r--r--    1 root     root        8.7K Jan 10 06:39 input_1_hardtrim.fqlrwxrwxrwx    1 root     root          86 Jan 10 06:39 input_2.fastq -> /galaxy/server/database/objects/f/3/b/dataset_f3b24d2c-4e73-4bb4-9540-11552ad70d11.dat-rw-r--r--    1 root     root        8.7K Jan 10 06:39 input_2_hardtrim.fq
            ]]></system-out>
            <system-err><![CDATA[
            Path to Cutadapt set as: 'cutadapt' (default)Cutadapt seems to be working fine (tested command 'cutadapt --version')Cutadapt version: 3.4Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)Letting the (modified) Cutadapt deal with the Python version insteadParallel gzip (pigz) detected. Proceeding with multicore (de)compression using 5 coresOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/60/working/Hard-trimming from 5'-end selected. File(s) will be trimmed to leave the rightmost 20 bp on the 3'-end, and Trim Galore will then exit.Input file name:  input_1.fastqWriting trimmed version (using the last 20 bp only) of the input file 'input_1.fastq' to 'input_1.20bp_3prime.fq'Finished writing out converted version of the FastQ file input_1.fastq (99 sequences in total)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Input file name:  input_2.fastqWriting trimmed version (using the last 20 bp only) of the input file 'input_2.fastq' to 'input_2.20bp_3prime.fq'Finished writing out converted version of the FastQ file input_2.fastq (99 sequences in total)~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="trim_galore (Test #12)" name="11" time="12.671915292739868">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 11, "time_seconds": 12.671915292739868, "tool_id": "trim_galore", "tool_version": "0.6.7+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="trim_galore (Test #13)" name="12" time="31.797954082489014">
        
            
            <system-out><![CDATA[
            pigz 2.6total 128K   drwxr-sr-x    2 101      root        4.0K Jan 10 06:40 .drwxr-sr-x   11 101      root        4.0K Jan 10 06:40 ..-rw-r--r--    1 root     root       54.8K Jan 10 06:40 input_1.clock_UMI.R1.fqlrwxrwxrwx    1 root     root          86 Jan 10 06:40 input_1.fastq -> /galaxy/server/database/objects/9/b/9/dataset_9b9a5bc6-8211-46b6-b2f5-ed8597774318.dat-rw-r--r--    1 root     root       54.8K Jan 10 06:40 input_2.clock_UMI.R2.fqlrwxrwxrwx    1 root     root          86 Jan 10 06:40 input_2.fastq -> /galaxy/server/database/objects/3/1/6/dataset_3169001e-3763-4247-b88d-8a322be8eaa3.dat
            ]]></system-out>
            <system-err><![CDATA[
            Path to Cutadapt set as: 'cutadapt' (default)Cutadapt seems to be working fine (tested command 'cutadapt --version')Cutadapt version: 3.4Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)Letting the (modified) Cutadapt deal with the Python version insteadParallel gzip (pigz) detected. Proceeding with multicore (de)compression using 5 coresOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/65/working/IT'S TIME FOR CLOCK PROCESSING!!![pun intended]Writing dual trimmed version of the input file 'input_1.fastq' to 'input_1.clock_UMI.R1.fq'Writing dual trimmed version of the input file 'input_2.fastq' to 'input_2.clock_UMI.R2.fq'                 ---Sequences processed in total: 99thereof had fixed sequence CAGT in both R1 and R2: 99 (100.00%)     ~~~~~~~~~~~~~~~~~~~~~~~~~~~Pre-processing finished...Please run Trim Galore again to remove adapters, poor quality bases as well as UMI/fixed sequences from the 3'-end of the reads.A sample command for this is:~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~trim_galore --paired --three_prime_clip_R1 15 --three_prime_clip_R2 15 *.clock_UMI.R1.fq.gz *.clock_UMI.R2.fq.gz~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Trim Galore Epigenetic Clock processing complete.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="trim_galore (Test #14)" name="13" time="18.464032649993896">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 13, "time_seconds": 18.464032649993896, "tool_id": "trim_galore", "tool_version": "0.6.7+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="trim_galore (Test #3)" name="2" time="30.38044786453247">
        
            
            <system-out><![CDATA[
            pigz 2.6total 20K    drwxr-sr-x    2 101      root        4.0K Jan 10 06:35 .drwxr-sr-x   11 101      root        4.0K Jan 10 06:35 ..lrwxrwxrwx    1 root     root          86 Jan 10 06:35 input_1.fastq -> /galaxy/server/database/objects/1/e/d/dataset_1edebd6b-3824-4014-a934-706929bc45e3.dat-rw-r--r--    1 root     root        1.6K Jan 10 06:35 input_1.fastq_trimming_report.txt-rw-r--r--    1 root     root         508 Jan 10 06:35 input_1_trimmed.fq
            ]]></system-out>
            <system-err><![CDATA[
            Path to Cutadapt set as: 'cutadapt' (default)Cutadapt seems to be working fine (tested command 'cutadapt --version')Cutadapt version: 3.4Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)Letting the (modified) Cutadapt deal with the Python version insteadParallel gzip (pigz) detected. Proceeding with multicore (de)compression using 5 coresOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/40/working/Writing report to '/galaxy/server/database/jobs_directory/000/40/working/input_1.fastq_trimming_report.txt'SUMMARISING RUN PARAMETERS==========================Input filename: input_1.fastqTrimming mode: single-endTrim Galore version: 0.6.7Cutadapt version: 3.4Python version: could not detectNumber of cores used for trimming: 5Quality Phred score cutoff: 20Quality encoding type selected: ASCII+33Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; user defined)Maximum trimming error rate: 0.1 (default)Minimum required adapter overlap (stringency): 1 bpMinimum required sequence length before a sequence gets removed: 20 bpCutadapt seems to be fairly up-to-date (version 3.4). Setting -j 5Writing final adapter and quality trimmed output to input_1_trimmed.fq  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file input_1.fastq <<< This is cutadapt 3.4 with Python 3.9.6Command line parameters: -j 5 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC input_1.fastqProcessing reads on 5 cores in single-end mode ...Finished in 0.01 s (7408 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       2Reads with adapters:                         1 (50.0%)Reads written (passing filters):             2 (100.0%)Total basepairs processed:           188 bpQuality-trimmed:                      20 bp (10.6%)Total written (filtered):            167 bp (88.8%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 timesNo. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 100.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts110.501RUN STATISTICS FOR INPUT FILE: input_1.fastq=============================================2 sequences processed in totalSequences removed because they became shorter than the length cutoff of 20 bp:0 (0.0%)
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="trim_galore (Test #4)" name="3" time="29.37830138206482">
        
            
            <system-out><![CDATA[
            pigz 2.6total 20K    drwxr-sr-x    2 101      root        4.0K Jan 10 06:36 .drwxr-sr-x   11 101      root        4.0K Jan 10 06:36 ..lrwxrwxrwx    1 root     root          86 Jan 10 06:36 input_1.fastq.gz -> /galaxy/server/database/objects/0/b/9/dataset_0b98a784-c438-478a-9288-5eacdbf02cd3.dat-rw-r--r--    1 root     root        1.6K Jan 10 06:36 input_1.fastq.gz_trimming_report.txt-rw-r--r--    1 root     root         291 Jan 10 06:36 input_1_trimmed.fq
            ]]></system-out>
            <system-err><![CDATA[
            Path to Cutadapt set as: 'cutadapt' (default)Cutadapt seems to be working fine (tested command 'cutadapt --version')Cutadapt version: 3.4Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)Letting the (modified) Cutadapt deal with the Python version insteadParallel gzip (pigz) detected. Proceeding with multicore (de)compression using 5 coresOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/42/working/Writing report to '/galaxy/server/database/jobs_directory/000/42/working/input_1.fastq.gz_trimming_report.txt'SUMMARISING RUN PARAMETERS==========================Input filename: input_1.fastq.gzTrimming mode: single-endTrim Galore version: 0.6.7Cutadapt version: 3.4Python version: could not detectNumber of cores used for trimming: 5Quality Phred score cutoff: 20Quality encoding type selected: ASCII+33Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; user defined)Maximum trimming error rate: 0.1 (default)Minimum required adapter overlap (stringency): 1 bpMinimum required sequence length before a sequence gets removed: 20 bpOutput file(s) will be GZIP compressedCutadapt seems to be fairly up-to-date (version 3.4). Setting -j 5Writing final adapter and quality trimmed output to input_1_trimmed.fq.gz  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file input_1.fastq.gz <<< This is cutadapt 3.4 with Python 3.9.6Command line parameters: -j 5 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC input_1.fastq.gzProcessing reads on 5 cores in single-end mode ...Finished in 0.02 s (7558 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       2Reads with adapters:                         1 (50.0%)Reads written (passing filters):             2 (100.0%)Total basepairs processed:           188 bpQuality-trimmed:                      20 bp (10.6%)Total written (filtered):            167 bp (88.8%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 timesNo. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 100.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts110.501RUN STATISTICS FOR INPUT FILE: input_1.fastq.gz=============================================2 sequences processed in totalSequences removed because they became shorter than the length cutoff of 20 bp:0 (0.0%)
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="trim_galore (Test #5)" name="4" time="30.072561740875244">
        
            
            <system-out><![CDATA[
            pigz 2.6total 20K    drwxr-sr-x    2 101      root        4.0K Jan 10 06:36 .drwxr-sr-x   11 101      root        4.0K Jan 10 06:36 ..lrwxrwxrwx    1 root     root          86 Jan 10 06:36 input_1.fastq -> /galaxy/server/database/objects/6/3/6/dataset_636fb9e1-509f-420f-9423-28bb4dd846b8.dat-rw-r--r--    1 root     root        1.8K Jan 10 06:36 input_1.fastq_trimming_report.txt-rw-r--r--    1 root     root         508 Jan 10 06:36 input_1_trimmed.fq
            ]]></system-out>
            <system-err><![CDATA[
            Path to Cutadapt set as: 'cutadapt' (default)Cutadapt seems to be working fine (tested command 'cutadapt --version')Cutadapt version: 3.4Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)Letting the (modified) Cutadapt deal with the Python version insteadParallel gzip (pigz) detected. Proceeding with multicore (de)compression using 5 coresOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/44/working/AUTO-DETECTING ADAPTER TYPE===========================Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq <<)Found perfect matches for the following adapter sequences:Adapter typeCountSequenceSequences analysedPercentageNextera0CTGTCTCTTATA20.00Illumina0AGATCGGAAGAGC20.00smallRNA0TGGAATTCTCGG20.00Unable to auto-detect most prominent adapter from the first specified file (count Nextera: 0, count Illumina: 0, count smallRNA: 0)Defaulting to Illumina universal adapter ( AGATCGGAAGAGC ). Specify -a SEQUENCE to avoid this behavior).Writing report to '/galaxy/server/database/jobs_directory/000/44/working/input_1.fastq_trimming_report.txt'SUMMARISING RUN PARAMETERS==========================Input filename: input_1.fastqTrimming mode: single-endTrim Galore version: 0.6.7Cutadapt version: 3.4Python version: could not detectNumber of cores used for trimming: 5Quality Phred score cutoff: 20Quality encoding type selected: ASCII+33Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; default (inconclusive auto-detection))Maximum trimming error rate: 0.1 (default)Minimum required adapter overlap (stringency): 1 bpMinimum required sequence length before a sequence gets removed: 20 bpCutadapt seems to be fairly up-to-date (version 3.4). Setting -j 5Writing final adapter and quality trimmed output to input_1_trimmed.fq  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file input_1.fastq <<< This is cutadapt 3.4 with Python 3.9.6Command line parameters: -j 5 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC input_1.fastqProcessing reads on 5 cores in single-end mode ...Finished in 0.02 s (8156 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       2Reads with adapters:                         1 (50.0%)Reads written (passing filters):             2 (100.0%)Total basepairs processed:           188 bpQuality-trimmed:                      20 bp (10.6%)Total written (filtered):            167 bp (88.8%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 timesNo. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 100.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts110.501RUN STATISTICS FOR INPUT FILE: input_1.fastq=============================================2 sequences processed in totalSequences removed because they became shorter than the length cutoff of 20 bp:0 (0.0%)
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="trim_galore (Test #6)" name="5" time="31.33782958984375">
        
            
            <system-out><![CDATA[
            pigz 2.6total 20K    drwxr-sr-x    2 101      root        4.0K Jan 10 06:37 .drwxr-sr-x   11 101      root        4.0K Jan 10 06:37 ..lrwxrwxrwx    1 root     root          86 Jan 10 06:37 input_1.fastq.gz -> /galaxy/server/database/objects/f/7/5/dataset_f75796a4-9177-456f-a7c3-05789260899c.dat-rw-r--r--    1 root     root        1.9K Jan 10 06:37 input_1.fastq.gz_trimming_report.txt-rw-r--r--    1 root     root         291 Jan 10 06:37 input_1_trimmed.fq
            ]]></system-out>
            <system-err><![CDATA[
            Path to Cutadapt set as: 'cutadapt' (default)Cutadapt seems to be working fine (tested command 'cutadapt --version')Cutadapt version: 3.4Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)Letting the (modified) Cutadapt deal with the Python version insteadParallel gzip (pigz) detected. Proceeding with multicore (de)compression using 5 coresOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/46/working/AUTO-DETECTING ADAPTER TYPE===========================Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq.gz <<)Found perfect matches for the following adapter sequences:Adapter typeCountSequenceSequences analysedPercentageIllumina0AGATCGGAAGAGC20.00smallRNA0TGGAATTCTCGG20.00Nextera0CTGTCTCTTATA20.00Unable to auto-detect most prominent adapter from the first specified file (count Illumina: 0, count smallRNA: 0, count Nextera: 0)Defaulting to Illumina universal adapter ( AGATCGGAAGAGC ). Specify -a SEQUENCE to avoid this behavior).Writing report to '/galaxy/server/database/jobs_directory/000/46/working/input_1.fastq.gz_trimming_report.txt'SUMMARISING RUN PARAMETERS==========================Input filename: input_1.fastq.gzTrimming mode: single-endTrim Galore version: 0.6.7Cutadapt version: 3.4Python version: could not detectNumber of cores used for trimming: 5Quality Phred score cutoff: 20Quality encoding type selected: ASCII+33Adapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; default (inconclusive auto-detection))Maximum trimming error rate: 0.1 (default)Minimum required adapter overlap (stringency): 1 bpMinimum required sequence length before a sequence gets removed: 20 bpOutput file(s) will be GZIP compressedCutadapt seems to be fairly up-to-date (version 3.4). Setting -j 5Writing final adapter and quality trimmed output to input_1_trimmed.fq.gz  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file input_1.fastq.gz <<< This is cutadapt 3.4 with Python 3.9.6Command line parameters: -j 5 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC input_1.fastq.gzProcessing reads on 5 cores in single-end mode ...Finished in 0.02 s (8122 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       2Reads with adapters:                         1 (50.0%)Reads written (passing filters):             2 (100.0%)Total basepairs processed:           188 bpQuality-trimmed:                      20 bp (10.6%)Total written (filtered):            167 bp (88.8%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 timesNo. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 100.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts110.501RUN STATISTICS FOR INPUT FILE: input_1.fastq.gz=============================================2 sequences processed in totalSequences removed because they became shorter than the length cutoff of 20 bp:0 (0.0%)
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="trim_galore (Test #7)" name="6" time="32.47871279716492">
        
            
            <system-out><![CDATA[
            pigz 2.6total 128K   drwxr-sr-x    2 101      root        4.0K Jan 10 06:37 .drwxr-sr-x   11 101      root        4.0K Jan 10 06:37 ..lrwxrwxrwx    1 root     root          86 Jan 10 06:37 input_1.fastq -> /galaxy/server/database/objects/c/b/8/dataset_cb8cd487-1f7d-4bfc-94ae-a680c25d2499.dat-rw-r--r--    1 root     root        2.0K Jan 10 06:37 input_1.fastq_trimming_report.txt-rw-r--r--    1 root     root       49.9K Jan 10 06:37 input_1_val_1.fqlrwxrwxrwx    1 root     root          86 Jan 10 06:37 input_2.fastq -> /galaxy/server/database/objects/e/c/7/dataset_ec7cdeb1-ad88-4af0-a73c-653e2d98763b.dat-rw-r--r--    1 root     root        2.2K Jan 10 06:37 input_2.fastq_trimming_report.txt-rw-r--r--    1 root     root       49.8K Jan 10 06:37 input_2_val_2.fq
            ]]></system-out>
            <system-err><![CDATA[
            Path to Cutadapt set as: 'cutadapt' (default)Cutadapt seems to be working fine (tested command 'cutadapt --version')Cutadapt version: 3.4Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)Letting the (modified) Cutadapt deal with the Python version insteadParallel gzip (pigz) detected. Proceeding with multicore (de)compression using 5 coresOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/49/working/AUTO-DETECTING ADAPTER TYPE===========================Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq <<)Found perfect matches for the following adapter sequences:Adapter typeCountSequenceSequences analysedPercentageNextera29CTGTCTCTTATA9929.29Illumina0AGATCGGAAGAGC990.00smallRNA0TGGAATTCTCGG990.00Using Nextera adapter for trimming (count: 29). Second best hit was Illumina (count: 0)Writing report to '/galaxy/server/database/jobs_directory/000/49/working/input_1.fastq_trimming_report.txt'SUMMARISING RUN PARAMETERS==========================Input filename: input_1.fastqTrimming mode: paired-endTrim Galore version: 0.6.7Cutadapt version: 3.4Python version: could not detectNumber of cores used for trimming: 5Quality Phred score cutoff: 20Quality encoding type selected: ASCII+33Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)Maximum trimming error rate: 0.1 (default)Minimum required adapter overlap (stringency): 1 bpMinimum required sequence length for both reads before a sequence pair gets removed: 20 bpCutadapt seems to be fairly up-to-date (version 3.4). Setting -j 5Writing final adapter and quality trimmed output to input_1_trimmed.fq  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_1.fastq <<< This is cutadapt 3.4 with Python 3.9.6Command line parameters: -j 5 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_1.fastqProcessing reads on 5 cores in single-end mode ...Finished in 0.02 s (167 µs/read; 0.36 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                        52 (52.5%)Reads written (passing filters):            99 (100.0%)Total basepairs processed:        24,849 bpQuality-trimmed:                     205 bp (0.8%)Total written (filtered):         23,339 bp (93.9%)=== Adapter 1 ===Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 52 timesNo. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 9.6%  C: 38.5%  G: 23.1%  T: 28.8%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts11124.8011256.205331.503430.4031210.0111320.0121410.0111610.0111710.010 12020.0122110.0112410.0112620.0123110.0113310.0114120.0124910.0115010.0115410.0115610.0115820.0126010.0116720.0126810.0116910.0117310.0118010.0118610.011RUN STATISTICS FOR INPUT FILE: input_1.fastq=============================================99 sequences processed in totalThe length threshold of paired-end sequences gets evaluated later on (in the validation step)Writing report to '/galaxy/server/database/jobs_directory/000/49/working/input_2.fastq_trimming_report.txt'SUMMARISING RUN PARAMETERS==========================Input filename: input_2.fastqTrimming mode: paired-endTrim Galore version: 0.6.7Cutadapt version: 3.4Python version: could not detectNumber of cores used for trimming: 5Quality Phred score cutoff: 20Quality encoding type selected: ASCII+33Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)Maximum trimming error rate: 0.1 (default)Minimum required adapter overlap (stringency): 1 bpMinimum required sequence length for both reads before a sequence pair gets removed: 20 bpCutadapt seems to be fairly up-to-date (version 3.4). Setting -j -j 5Writing final adapter and quality trimmed output to input_2_trimmed.fq  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_2.fastq <<< This is cutadapt 3.4 with Python 3.9.6Command line parameters: -j 5 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_2.fastqProcessing reads on 5 cores in single-end mode ...Finished in 0.02 s (163 µs/read; 0.37 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                        58 (58.6%)Reads written (passing filters):            99 (100.0%)Total basepairs processed:        24,849 bpQuality-trimmed:                     745 bp (3.0%)Total written (filtered):         23,035 bp (92.7%)=== Adapter 1 ===Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 58 timesNo. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 12.1%  C: 37.9%  G: 8.6%  T: 41.4%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts11624.8016276.207311.501420.402620.002910.0011010.0111310.0111420.0121510.0111610.0111710.0111920.0122110.0112510.0113010.0113220.0123410.0113620.0123810.0114010.0114110.0114210.0114310.0114910.0115110.0115610.0115710.0116010.0116710.0118010.011RUN STATISTICS FOR INPUT FILE: input_2.fastq=============================================99 sequences processed in totalThe length threshold of paired-end sequences gets evaluated later on (in the validation step)Validate paired-end files input_1_trimmed.fq and input_2_trimmed.fqfile_1: input_1_trimmed.fq, file_2: input_2_trimmed.fq>>>>> Now validing the length of the 2 paired-end infiles: input_1_trimmed.fq and input_2_trimmed.fq <<<<<Writing validated paired-end Read 1 reads to input_1_val_1.fqWriting validated paired-end Read 2 reads to input_2_val_2.fqTotal number of sequences analysed: 99Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 1 (1.01%)Deleting both intermediate output files input_1_trimmed.fq and input_2_trimmed.fq====================================================================================================
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="trim_galore (Test #8)" name="7" time="32.09718441963196">
        
            
            <system-out><![CDATA[
            pigz 2.6total 48K    drwxr-sr-x    2 101      root        4.0K Jan 10 06:38 .drwxr-sr-x   11 101      root        4.0K Jan 10 06:38 ..lrwxrwxrwx    1 root     root          86 Jan 10 06:38 input_1.fastq.gz -> /galaxy/server/database/objects/7/2/9/dataset_729be253-b31b-4673-9aa6-0967d944af06.dat-rw-r--r--    1 root     root        2.0K Jan 10 06:38 input_1.fastq.gz_trimming_report.txt-rw-r--r--    1 root     root       10.7K Jan 10 06:38 input_1_val_1.fqlrwxrwxrwx    1 root     root          86 Jan 10 06:38 input_2.fastq.gz -> /galaxy/server/database/objects/3/0/0/dataset_300a5a5e-385d-4ee4-8c23-4f599a9a1b1a.dat-rw-r--r--    1 root     root        2.2K Jan 10 06:38 input_2.fastq.gz_trimming_report.txt-rw-r--r--    1 root     root       10.5K Jan 10 06:38 input_2_val_2.fq
            ]]></system-out>
            <system-err><![CDATA[
            Path to Cutadapt set as: 'cutadapt' (default)Cutadapt seems to be working fine (tested command 'cutadapt --version')Cutadapt version: 3.4Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)Letting the (modified) Cutadapt deal with the Python version insteadParallel gzip (pigz) detected. Proceeding with multicore (de)compression using 5 coresOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/52/working/AUTO-DETECTING ADAPTER TYPE===========================Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq.gz <<)Found perfect matches for the following adapter sequences:Adapter typeCountSequenceSequences analysedPercentageNextera29CTGTCTCTTATA9929.29Illumina0AGATCGGAAGAGC990.00smallRNA0TGGAATTCTCGG990.00Using Nextera adapter for trimming (count: 29). Second best hit was Illumina (count: 0)Writing report to '/galaxy/server/database/jobs_directory/000/52/working/input_1.fastq.gz_trimming_report.txt'SUMMARISING RUN PARAMETERS==========================Input filename: input_1.fastq.gzTrimming mode: paired-endTrim Galore version: 0.6.7Cutadapt version: 3.4Python version: could not detectNumber of cores used for trimming: 5Quality Phred score cutoff: 20Quality encoding type selected: ASCII+33Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)Maximum trimming error rate: 0.1 (default)Minimum required adapter overlap (stringency): 1 bpMinimum required sequence length for both reads before a sequence pair gets removed: 20 bpOutput file(s) will be GZIP compressedCutadapt seems to be fairly up-to-date (version 3.4). Setting -j 5Writing final adapter and quality trimmed output to input_1_trimmed.fq.gz  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_1.fastq.gz <<< This is cutadapt 3.4 with Python 3.9.6Command line parameters: -j 5 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_1.fastq.gzProcessing reads on 5 cores in single-end mode ...Finished in 0.02 s (161 µs/read; 0.37 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                        52 (52.5%)Reads written (passing filters):            99 (100.0%)Total basepairs processed:        24,849 bpQuality-trimmed:                     205 bp (0.8%)Total written (filtered):         23,339 bp (93.9%)=== Adapter 1 ===Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 52 timesNo. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 9.6%  C: 38.5%  G: 23.1%  T: 28.8%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts11124.8011256.205331.503430.4031210.0111320.0121410.0111610.0111710.010 12020.0122110.0112410.0112620.0123110.0113310.0114120.0124910.0115010.0115410.0115610.0115820.0126010.0116720.0126810.0116910.0117310.0118010.0118610.011RUN STATISTICS FOR INPUT FILE: input_1.fastq.gz=============================================99 sequences processed in totalThe length threshold of paired-end sequences gets evaluated later on (in the validation step)Writing report to '/galaxy/server/database/jobs_directory/000/52/working/input_2.fastq.gz_trimming_report.txt'SUMMARISING RUN PARAMETERS==========================Input filename: input_2.fastq.gzTrimming mode: paired-endTrim Galore version: 0.6.7Cutadapt version: 3.4Python version: could not detectNumber of cores used for trimming: 5Quality Phred score cutoff: 20Quality encoding type selected: ASCII+33Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)Maximum trimming error rate: 0.1 (default)Minimum required adapter overlap (stringency): 1 bpMinimum required sequence length for both reads before a sequence pair gets removed: 20 bpOutput file(s) will be GZIP compressedCutadapt seems to be fairly up-to-date (version 3.4). Setting -j -j 5Writing final adapter and quality trimmed output to input_2_trimmed.fq.gz  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_2.fastq.gz <<< This is cutadapt 3.4 with Python 3.9.6Command line parameters: -j 5 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_2.fastq.gzProcessing reads on 5 cores in single-end mode ...Finished in 0.02 s (170 µs/read; 0.35 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                        58 (58.6%)Reads written (passing filters):            99 (100.0%)Total basepairs processed:        24,849 bpQuality-trimmed:                     745 bp (3.0%)Total written (filtered):         23,035 bp (92.7%)=== Adapter 1 ===Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 58 timesNo. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 12.1%  C: 37.9%  G: 8.6%  T: 41.4%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts11624.8016276.207311.501420.402620.002910.0011010.0111310.0111420.0121510.0111610.0111710.0111920.0122110.0112510.0113010.0113220.0123410.0113620.0123810.0114010.0114110.0114210.0114310.0114910.0115110.0115610.0115710.0116010.0116710.0118010.011RUN STATISTICS FOR INPUT FILE: input_2.fastq.gz=============================================99 sequences processed in totalThe length threshold of paired-end sequences gets evaluated later on (in the validation step)Validate paired-end files input_1_trimmed.fq.gz and input_2_trimmed.fq.gzfile_1: input_1_trimmed.fq.gz, file_2: input_2_trimmed.fq.gz>>>>> Now validing the length of the 2 paired-end infiles: input_1_trimmed.fq.gz and input_2_trimmed.fq.gz <<<<<Writing validated paired-end Read 1 reads to input_1_val_1.fq.gzWriting validated paired-end Read 2 reads to input_2_val_2.fq.gzTotal number of sequences analysed: 99Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 1 (1.01%)Deleting both intermediate output files input_1_trimmed.fq.gz and input_2_trimmed.fq.gz====================================================================================================
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="trim_galore (Test #9)" name="8" time="32.996469259262085">
        
            
            <system-out><![CDATA[
            pigz 2.6total 132K   drwxr-sr-x    2 101      root        4.0K Jan 10 06:38 .drwxr-sr-x   11 101      root        4.0K Jan 10 06:38 ..lrwxrwxrwx    1 root     root          86 Jan 10 06:38 input_1.fastq -> /galaxy/server/database/objects/8/b/0/dataset_8b080b7a-6369-4c59-9816-9bb0247652b0.dat-rw-r--r--    1 root     root        2.0K Jan 10 06:38 input_1.fastq_trimming_report.txt-rw-r--r--    1 root     root         551 Jan 10 06:38 input_1_unpaired_1.fq-rw-r--r--    1 root     root       49.9K Jan 10 06:38 input_1_val_1.fqlrwxrwxrwx    1 root     root          86 Jan 10 06:38 input_2.fastq -> /galaxy/server/database/objects/e/5/7/dataset_e573ca4e-f9ca-43a1-9131-767038c202bb.dat-rw-r--r--    1 root     root        2.3K Jan 10 06:38 input_2.fastq_trimming_report.txt-rw-r--r--    1 root     root           0 Jan 10 06:38 input_2_unpaired_2.fq-rw-r--r--    1 root     root       49.8K Jan 10 06:38 input_2_val_2.fq
            ]]></system-out>
            <system-err><![CDATA[
            Path to Cutadapt set as: 'cutadapt' (default)Cutadapt seems to be working fine (tested command 'cutadapt --version')Cutadapt version: 3.4Could not detect version of Python used by Cutadapt from the first line of Cutadapt (but found this: >>>#!/bin/sh<<<)Letting the (modified) Cutadapt deal with the Python version insteadParallel gzip (pigz) detected. Proceeding with multicore (de)compression using 5 coresOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/55/working/AUTO-DETECTING ADAPTER TYPE===========================Attempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq <<)Found perfect matches for the following adapter sequences:Adapter typeCountSequenceSequences analysedPercentageNextera29CTGTCTCTTATA9929.29smallRNA0TGGAATTCTCGG990.00Illumina0AGATCGGAAGAGC990.00Using Nextera adapter for trimming (count: 29). Second best hit was smallRNA (count: 0)Writing report to '/galaxy/server/database/jobs_directory/000/55/working/input_1.fastq_trimming_report.txt'SUMMARISING RUN PARAMETERS==========================Input filename: input_1.fastqTrimming mode: paired-endTrim Galore version: 0.6.7Cutadapt version: 3.4Python version: could not detectNumber of cores used for trimming: 5Quality Phred score cutoff: 20Quality encoding type selected: ASCII+33Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)Maximum trimming error rate: 0.1 (default)Minimum required adapter overlap (stringency): 1 bpMinimum required sequence length for both reads before a sequence pair gets removed: 20 bpLength cut-off for read 1: 35 bp (default)Length cut-off for read 2: 35 bb (default)Cutadapt seems to be fairly up-to-date (version 3.4). Setting -j 5Writing final adapter and quality trimmed output to input_1_trimmed.fq  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_1.fastq <<< This is cutadapt 3.4 with Python 3.9.6Command line parameters: -j 5 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_1.fastqProcessing reads on 5 cores in single-end mode ...Finished in 0.02 s (177 µs/read; 0.34 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                        52 (52.5%)Reads written (passing filters):            99 (100.0%)Total basepairs processed:        24,849 bpQuality-trimmed:                     205 bp (0.8%)Total written (filtered):         23,339 bp (93.9%)=== Adapter 1 ===Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 52 timesNo. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 9.6%  C: 38.5%  G: 23.1%  T: 28.8%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts11124.8011256.205331.503430.4031210.0111320.0121410.0111610.0111710.010 12020.0122110.0112410.0112620.0123110.0113310.0114120.0124910.0115010.0115410.0115610.0115820.0126010.0116720.0126810.0116910.0117310.0118010.0118610.011RUN STATISTICS FOR INPUT FILE: input_1.fastq=============================================99 sequences processed in totalThe length threshold of paired-end sequences gets evaluated later on (in the validation step)Writing report to '/galaxy/server/database/jobs_directory/000/55/working/input_2.fastq_trimming_report.txt'SUMMARISING RUN PARAMETERS==========================Input filename: input_2.fastqTrimming mode: paired-endTrim Galore version: 0.6.7Cutadapt version: 3.4Python version: could not detectNumber of cores used for trimming: 5Quality Phred score cutoff: 20Quality encoding type selected: ASCII+33Adapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)Maximum trimming error rate: 0.1 (default)Minimum required adapter overlap (stringency): 1 bpMinimum required sequence length for both reads before a sequence pair gets removed: 20 bpLength cut-off for read 1: 35 bp (default)Length cut-off for read 2: 35 bb (default)Cutadapt seems to be fairly up-to-date (version 3.4). Setting -j -j 5Writing final adapter and quality trimmed output to input_2_trimmed.fq  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_2.fastq <<< This is cutadapt 3.4 with Python 3.9.6Command line parameters: -j 5 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_2.fastqProcessing reads on 5 cores in single-end mode ...Finished in 0.02 s (178 µs/read; 0.34 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                        58 (58.6%)Reads written (passing filters):            99 (100.0%)Total basepairs processed:        24,849 bpQuality-trimmed:                     745 bp (3.0%)Total written (filtered):         23,035 bp (92.7%)=== Adapter 1 ===Sequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 58 timesNo. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 12.1%  C: 37.9%  G: 8.6%  T: 41.4%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts11624.8016276.207311.501420.402620.002910.0011010.0111310.0111420.0121510.0111610.0111710.0111920.0122110.0112510.0113010.0113220.0123410.0113620.0123810.0114010.0114110.0114210.0114310.0114910.0115110.0115610.0115710.0116010.0116710.0118010.011RUN STATISTICS FOR INPUT FILE: input_2.fastq=============================================99 sequences processed in totalThe length threshold of paired-end sequences gets evaluated later on (in the validation step)Validate paired-end files input_1_trimmed.fq and input_2_trimmed.fqfile_1: input_1_trimmed.fq, file_2: input_2_trimmed.fq>>>>> Now validing the length of the 2 paired-end infiles: input_1_trimmed.fq and input_2_trimmed.fq <<<<<Writing validated paired-end Read 1 reads to input_1_val_1.fqWriting validated paired-end Read 2 reads to input_2_val_2.fqWriting unpaired read 1 reads to input_1_unpaired_1.fqWriting unpaired read 2 reads to input_2_unpaired_2.fqTotal number of sequences analysed: 99Number of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 1 (1.01%)Deleting both intermediate output files input_1_trimmed.fq and input_2_trimmed.fq====================================================================================================
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="trim_galore (Test #10)" name="9" time="10.5863037109375">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 9, "time_seconds": 10.5863037109375, "tool_id": "trim_galore", "tool_version": "0.6.7+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="vcfaddinfo (Test #1)" name="0" time="39.47861170768738">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="vcfleftalign (Test #1)" name="0" time="25.089781761169434">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "input_vcf": {   "id": "804ea9cec6e42a3f",   "src": "hda"  },  "reference_source|ref_file": {   "id": "e506208f88a03ca7",   "src": "hda"  },  "reference_source|reference_source_selector": "history",  "window_size": "150" }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/c/c/8/dataset_cc871331-d8bb-41d6-ba0b-f71a93b64628.dat\u0027 \u0027localref.fa\u0027 \u0026\u0026 vcfleftalign -r \u0027localref.fa\u0027 -w \"150\" \u0027/galaxy/server/database/objects/3/e/7/dataset_3e79c644-dbfe-4091-bb6f-1cb450b4155e.dat\u0027 \u003e \u0027/galaxy/server/database/objects/c/b/5/dataset_cb5a2f43-ece3-4688-951c-31430cc90b29.dat\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2025-01-10T08:44:58.800366",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-vz55x",  "galaxy_version": "24.1",  "handler": null,  "history_id": "da5ec9bd15875be3",  "id": "a4513ea5964d8c5e",  "inputs": {   "input_vcf": {    "id": "804ea9cec6e42a3f",    "src": "hda",    "uuid": "3e79c644-dbfe-4091-bb6f-1cb450b4155e"   },   "reference_source|ref_file": {    "id": "e506208f88a03ca7",    "src": "hda",    "uuid": "cc871331-d8bb-41d6-ba0b-f71a93b64628"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "out_file1": {    "id": "88723d8965298029",    "src": "hda",    "uuid": "cb5a2f43-ece3-4688-951c-31430cc90b29"   }  },  "params": {   "__input_ext": "\"vcf\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 778, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}",   "window_size": "\"150\""  },  "state": "error",  "stderr": "index file localref.fa.fai not found, generating...\n",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/vcfleftalign/vcfleftalign/1.0.0_rc3+galaxy0",  "tool_stderr": "index file localref.fa.fai not found, generating...\n",  "tool_stdout": "",  "update_time": "2025-01-10T08:45:04.104755",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/vcfleftalign/vcfleftalign/1.0.0_rc3+galaxy0, exit_code: None, stderr: index file localref.fa.fai not found, generating...\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/vcfleftalign/vcfleftalign/1.0.0_rc3+galaxy0, exit_code: None, stderr: index file localref.fa.fai not found, generating...\n." ], "status": "failure", "test_index": 0, "time_seconds": 25.089781761169434, "tool_id": "vcfleftalign", "tool_version": "1.0.0_rc3+galaxy0"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            index file localref.fa.fai not found, generating...
            ]]></system-err>
        
    </testcase>
    
</testsuite>