{
    "model_class": "Job",
    "id": "6ec31e132dbaa44b",
    "state": "error",
    "exit_code": null,
    "update_time": "2024-01-26T07:16:51.833158",
    "create_time": "2024-01-26T07:16:36.066428",
    "galaxy_version": "23.1",
    "command_version": null,
    "copied_from_job_id": null,
    "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0",
    "history_id": "818d686125206558",
    "external_id": "gxy-zw4gz",
    "command_line": "mkdir ./index && mkdir ./output && salmon index -i ./index --kmerLen '31' --gencode --transcripts '/galaxy/server/database/objects/a/0/6/dataset_a06a4e06-3bb4-4a44-9b0d-3a95f7e8cb6e.dat' && cp '/galaxy/server/database/objects/7/2/7/dataset_727eada5-5044-4446-82fd-df0df638d6b1.dat' ./mate1.fastq.gz && gunzip ./mate1.fastq.gz && cp '/galaxy/server/database/objects/a/8/3/dataset_a8306777-8e00-45ce-9fd7-866c19a46b6f.dat' ./mate2.fastq.gz && gunzip ./mate2.fastq.gz  && ln -s '/galaxy/server/database/objects/6/9/f/dataset_69f0f2b8-b0ce-4364-9bc0-2e563d2c58d0.dat' ./alevinmap.tsv && salmon alevin -l A -i ./index -1 ./mate1.fastq -2 ./mate2.fastq -o ./output -p \"${GALAXY_SLOTS:-4}\" --chromium --tgMap ./alevinmap.tsv --keepCBFraction '1.0'   --dumpFeatures  --dumpMtx --freqThreshold '5'  && gunzip output/alevin/quants_mat.mtx.gz  && gunzip output/alevin/quants_tier_mat.gz  && gunzip output/aux_info/fld.gz && gunzip output/aux_info/observed_bias.gz && gunzip output/aux_info/observed_bias_3p.gz",
    "traceback": "Traceback (most recent call last):\n  File \"/galaxy/server/lib/galaxy/jobs/runners/__init__.py\", line 649, in _finish_or_resubmit_job\n    job_wrapper.finish(\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1961, in finish\n    self._finish_dataset(output_name, dataset, job, context, final_job_state, remote_metadata_directory)\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1778, in _finish_dataset\n    dataset.datatype.set_meta(dataset, overwrite=False)\n  File \"/galaxy/server/lib/galaxy/datatypes/tabular.py\", line 1689, in set_meta\n    for line in dataset_fh:\n  File \"/usr/local/lib/python3.10/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 1: invalid start byte\n",
    "params": {
        "__input_ext": "\"input\"",
        "dbkey": "\"?\"",
        "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",
        "optional": "{\"dumpBfh\": false, \"dumpFeatures\": true, \"dumpMtx\": true, \"dumpUmiGraph\": false, \"expectCells\": \"\", \"forceCells\": \"\", \"freqThreshold\": \"5\", \"keepCBFraction\": \"1.0\", \"lowRegionMinNumBarcodes\": \"\", \"maxNumBarcodes\": \"\", \"minScoreFraction\": \"\", \"mrna\": null, \"noDedup\": false, \"numCellBootstraps\": \"\", \"rrna\": null, \"whitelist\": null}",
        "allout": "false",
        "protocol": "\"--chromium\"",
        "pairstraight": "{\"__current_case__\": 0, \"file1\": {\"values\": [{\"id\": 347, \"src\": \"hda\"}]}, \"file2\": {\"values\": [{\"id\": 348, \"src\": \"hda\"}]}, \"libtype\": {\"__current_case__\": 0, \"strandedness\": \"A\"}, \"readselect\": \"paired\"}",
        "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 346, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}"
    },
    "inputs": {
        "refTranscriptSource|s_index|fasta": {
            "id": "f92170880b2ab61f",
            "src": "hda",
            "uuid": "a06a4e06-3bb4-4a44-9b0d-3a95f7e8cb6e"
        },
        "pairstraight|file1": {
            "id": "6392654709465b90",
            "src": "hda",
            "uuid": "727eada5-5044-4446-82fd-df0df638d6b1"
        },
        "pairstraight|file2": {
            "id": "e6faf5e74927c51f",
            "src": "hda",
            "uuid": "a8306777-8e00-45ce-9fd7-866c19a46b6f"
        },
        "tgmap": {
            "id": "1d2ba3ee6b695bf4",
            "src": "hda",
            "uuid": "69f0f2b8-b0ce-4364-9bc0-2e563d2c58d0"
        }
    },
    "outputs": {
        "flenDist_txt": {
            "id": "7984c8907ddd6d9c",
            "src": "hda",
            "uuid": "d3938fb3-d571-4b9f-8172-51d26ca67453"
        },
        "observed_bias_3p": {
            "id": "1fa2917ee284bb6b",
            "src": "hda",
            "uuid": "c82edd64-9db8-4136-92cd-3ab56855d32d"
        },
        "observed_bias": {
            "id": "4f3c3ce40ef7ff66",
            "src": "hda",
            "uuid": "00cd4152-5be3-43ef-91a9-f7ea47cd0f0b"
        },
        "expected_bias": {
            "id": "7755b60fd5cf73d6",
            "src": "hda",
            "uuid": "538b7635-9675-4b56-9282-43ca45de8422"
        },
        "whitelist_txt": {
            "id": "9a82d6d3499491f3",
            "src": "hda",
            "uuid": "44fa77d9-27ef-40cd-bd8f-2568c31b62cf"
        },
        "featureDump_txt": {
            "id": "3576324388f26cab",
            "src": "hda",
            "uuid": "1b0178a9-8a14-49a9-bc56-28b8c8ff8dcd"
        },
        "quants_tier_mat": {
            "id": "e45c2483a2ed7d0b",
            "src": "hda",
            "uuid": "f2dc8fb8-be91-44cb-9445-103504a968fc"
        },
        "quants_mat_rows_txt": {
            "id": "2fc141429c39074a",
            "src": "hda",
            "uuid": "c04c0a43-d154-494b-959a-cacf1ae95cfb"
        },
        "quants_mat_cols_txt": {
            "id": "c59a08a316165b0e",
            "src": "hda",
            "uuid": "be3a9cb4-0814-49a0-ab82-4f1d2855487a"
        },
        "raw_cb_frequency_txt": {
            "id": "10eb052087f553f2",
            "src": "hda",
            "uuid": "8ab855ee-6f9d-4e64-a9b1-52665a43c385"
        },
        "quants_mat_mtx": {
            "id": "a8897e5be3bc9d94",
            "src": "hda",
            "uuid": "0d1896bf-2036-4265-a69f-70d8e59cf182"
        }
    },
    "output_collections": {},
    "tool_stdout": "",
    "tool_stderr": "",
    "job_stdout": null,
    "job_stderr": null,
    "stderr": "",
    "stdout": "",
    "job_messages": [],
    "dependencies": [],
    "user_email": "tests@fake.org",
    "job_metrics": []
}
