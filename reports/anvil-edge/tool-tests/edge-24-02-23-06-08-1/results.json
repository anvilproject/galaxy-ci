{"version": "0.1", "suitename": "Galaxy Tool Tests", "results": {"total": 209, "errors": 52, "failures": 13, "skips": 4}, "tests": [{"id": "alevin/1.5.1+galaxy0-0", "has_data": true, "data": {"tool_id": "alevin", "tool_version": "1.5.1+galaxy0", "test_index": 0, "time_seconds": 48.98665261268616, "inputs": {"refTranscriptSource|s_index|fasta": {"src": "hda", "id": "1030acb1ab7184dc"}, "refTranscriptSource|TranscriptSource": "history", "pairstraight|file1": {"src": "hda", "id": "a85f3164e578a377"}, "pairstraight|file2": {"src": "hda", "id": "05e50d6efde54083"}, "pairstraight|readselect": "paired", "protocol": "--chromium", "tgmap": {"src": "hda", "id": "0870cc3ddebb8d8d"}, "optional|dumpFeatures": true, "optional|dumpMtx": true, "optional|keepCBFraction": "1", "optional|freqThreshold": "5"}, "job": {"model_class": "Job", "id": "9c27cd99893a1dbd", "state": "error", "exit_code": null, "update_time": "2024-02-23T07:13:09.849125", "create_time": "2024-02-23T07:12:42.121204", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-vszvm", "command_line": "mkdir ./index && mkdir ./output && salmon index -i ./index --kmerLen '31' --gencode --transcripts '/galaxy/server/database/objects/c/d/4/dataset_cd4a28ad-1c07-42c3-bc5c-97fc2106b54d.dat' && cp '/galaxy/server/database/objects/a/b/2/dataset_ab2c1e9e-4697-44a0-a658-5a65ae56e0cd.dat' ./mate1.fastq.gz && gunzip ./mate1.fastq.gz && cp '/galaxy/server/database/objects/1/9/c/dataset_19c61dbf-e4be-4429-b989-ad4845f6968a.dat' ./mate2.fastq.gz && gunzip ./mate2.fastq.gz  && ln -s '/galaxy/server/database/objects/7/a/2/dataset_7a226190-7c58-4afb-91ad-5d03d17d04f8.dat' ./alevinmap.tsv && salmon alevin -l A -i ./index -1 ./mate1.fastq -2 ./mate2.fastq -o ./output -p \"${GALAXY_SLOTS:-4}\" --chromium --tgMap ./alevinmap.tsv --keepCBFraction '1.0'   --dumpFeatures  --dumpMtx --freqThreshold '5'  && gunzip output/alevin/quants_mat.mtx.gz  && gunzip output/alevin/quants_tier_mat.gz  && gunzip output/aux_info/fld.gz && gunzip output/aux_info/observed_bias.gz && gunzip output/aux_info/observed_bias_3p.gz", "traceback": "Traceback (most recent call last):\n  File \"/galaxy/server/lib/galaxy/jobs/runners/__init__.py\", line 649, in _finish_or_resubmit_job\n    job_wrapper.finish(\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1961, in finish\n    self._finish_dataset(output_name, dataset, job, context, final_job_state, remote_metadata_directory)\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1778, in _finish_dataset\n    dataset.datatype.set_meta(dataset, overwrite=False)\n  File \"/galaxy/server/lib/galaxy/datatypes/tabular.py\", line 1689, in set_meta\n    for line in dataset_fh:\n  File \"/usr/local/lib/python3.10/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 55: invalid start byte\n", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "optional": "{\"dumpBfh\": false, \"dumpFeatures\": true, \"dumpMtx\": true, \"dumpUmiGraph\": false, \"expectCells\": \"\", \"forceCells\": \"\", \"freqThreshold\": \"5\", \"keepCBFraction\": \"1.0\", \"lowRegionMinNumBarcodes\": \"\", \"maxNumBarcodes\": \"\", \"minScoreFraction\": \"\", \"mrna\": null, \"noDedup\": false, \"numCellBootstraps\": \"\", \"rrna\": null, \"whitelist\": null}", "allout": "false", "protocol": "\"--chromium\"", "pairstraight": "{\"__current_case__\": 0, \"file1\": {\"values\": [{\"id\": 311, \"src\": \"hda\"}]}, \"file2\": {\"values\": [{\"id\": 312, \"src\": \"hda\"}]}, \"libtype\": {\"__current_case__\": 0, \"strandedness\": \"A\"}, \"readselect\": \"paired\"}", "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 310, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}"}, "inputs": {"refTranscriptSource|s_index|fasta": {"id": "1030acb1ab7184dc", "src": "hda", "uuid": "cd4a28ad-1c07-42c3-bc5c-97fc2106b54d"}, "pairstraight|file1": {"id": "a85f3164e578a377", "src": "hda", "uuid": "ab2c1e9e-4697-44a0-a658-5a65ae56e0cd"}, "pairstraight|file2": {"id": "05e50d6efde54083", "src": "hda", "uuid": "19c61dbf-e4be-4429-b989-ad4845f6968a"}, "tgmap": {"id": "0870cc3ddebb8d8d", "src": "hda", "uuid": "7a226190-7c58-4afb-91ad-5d03d17d04f8"}}, "outputs": {"flenDist_txt": {"id": "cd1efbe0f63441d1", "src": "hda", "uuid": "595a1b00-169a-4fe3-8b2a-cb8523d5514c"}, "observed_bias_3p": {"id": "53b3c281eeae8594", "src": "hda", "uuid": "ebb29cc9-93f9-4e3b-8898-7cc53621de72"}, "observed_bias": {"id": "949a798d2fa77190", "src": "hda", "uuid": "3a4d869d-5a40-4ad1-a221-ee03f8c02375"}, "expected_bias": {"id": "a2d111a9d455b40c", "src": "hda", "uuid": "8540b918-74c7-4fd2-b902-775fd25093f9"}, "whitelist_txt": {"id": "396443ad47681571", "src": "hda", "uuid": "78e1b1cb-0c68-4c4b-8f8c-ee2db807a261"}, "featureDump_txt": {"id": "c2f18a86bb840bee", "src": "hda", "uuid": "416f1c5c-ae4c-448d-9a9f-14ca31290ffd"}, "quants_tier_mat": {"id": "6e9935b630f64045", "src": "hda", "uuid": "74518b98-e712-4377-8292-ac1594a0daea"}, "quants_mat_rows_txt": {"id": "f09685fd4ef4be35", "src": "hda", "uuid": "84f7d528-ae8d-4de8-aee6-790a6b3f482d"}, "quants_mat_cols_txt": {"id": "6c3758d943b68969", "src": "hda", "uuid": "8ed170b0-42bb-4337-8d0f-32c3d4ac5258"}, "raw_cb_frequency_txt": {"id": "785cf0018baccdc9", "src": "hda", "uuid": "b7549c36-8da5-45f4-8358-6d9a0716bf72"}, "quants_mat_mtx": {"id": "987e07c707f5bb0d", "src": "hda", "uuid": "d5f6bce8-3dce-4cc5-8bbd-f5cb668548b0"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "alevin/1.5.1+galaxy0-0", "has_data": true, "data": {"tool_id": "alevin", "tool_version": "1.5.1+galaxy0", "test_index": 0, "time_seconds": 36.49439978599548, "inputs": {"refTranscriptSource|s_index|fasta": {"src": "hda", "id": "4119f4b1d51f68e2"}, "refTranscriptSource|TranscriptSource": "history", "pairstraight|file1": {"src": "hda", "id": "48e58fe64c23944a"}, "pairstraight|file2": {"src": "hda", "id": "503eebe1a70d0f65"}, "pairstraight|readselect": "paired", "protocol": "--chromium", "tgmap": {"src": "hda", "id": "47f43b5f4dc6a8e0"}, "optional|dumpFeatures": true, "optional|dumpMtx": true, "optional|keepCBFraction": "1", "optional|freqThreshold": "5"}, "job": {"model_class": "Job", "id": "2ed364ac3ec17c72", "state": "error", "exit_code": null, "update_time": "2024-02-23T07:14:24.548236", "create_time": "2024-02-23T07:14:10.055990", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-82xdd", "command_line": "mkdir ./index && mkdir ./output && salmon index -i ./index --kmerLen '31' --gencode --transcripts '/galaxy/server/database/objects/d/0/4/dataset_d04ddae4-2c8f-40ea-a161-c2d6a6afc9ba.dat' && cp '/galaxy/server/database/objects/b/4/d/dataset_b4de1713-4987-4329-9dfb-33411411dc00.dat' ./mate1.fastq.gz && gunzip ./mate1.fastq.gz && cp '/galaxy/server/database/objects/1/a/8/dataset_1a8efbbb-92e3-4add-9239-2a22378c7a1c.dat' ./mate2.fastq.gz && gunzip ./mate2.fastq.gz  && ln -s '/galaxy/server/database/objects/a/1/8/dataset_a1871264-1f21-414f-80d9-a24c2f50e618.dat' ./alevinmap.tsv && salmon alevin -l A -i ./index -1 ./mate1.fastq -2 ./mate2.fastq -o ./output -p \"${GALAXY_SLOTS:-4}\" --chromium --tgMap ./alevinmap.tsv --keepCBFraction '1.0'   --dumpFeatures  --dumpMtx --freqThreshold '5'  && gunzip output/alevin/quants_mat.mtx.gz  && gunzip output/alevin/quants_tier_mat.gz  && gunzip output/aux_info/fld.gz && gunzip output/aux_info/observed_bias.gz && gunzip output/aux_info/observed_bias_3p.gz", "traceback": "Traceback (most recent call last):\n  File \"/galaxy/server/lib/galaxy/jobs/runners/__init__.py\", line 649, in _finish_or_resubmit_job\n    job_wrapper.finish(\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1961, in finish\n    self._finish_dataset(output_name, dataset, job, context, final_job_state, remote_metadata_directory)\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1778, in _finish_dataset\n    dataset.datatype.set_meta(dataset, overwrite=False)\n  File \"/galaxy/server/lib/galaxy/datatypes/tabular.py\", line 1689, in set_meta\n    for line in dataset_fh:\n  File \"/usr/local/lib/python3.10/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 37: invalid start byte\n", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "optional": "{\"dumpBfh\": false, \"dumpFeatures\": true, \"dumpMtx\": true, \"dumpUmiGraph\": false, \"expectCells\": \"\", \"forceCells\": \"\", \"freqThreshold\": \"5\", \"keepCBFraction\": \"1.0\", \"lowRegionMinNumBarcodes\": \"\", \"maxNumBarcodes\": \"\", \"minScoreFraction\": \"\", \"mrna\": null, \"noDedup\": false, \"numCellBootstraps\": \"\", \"rrna\": null, \"whitelist\": null}", "allout": "false", "protocol": "\"--chromium\"", "pairstraight": "{\"__current_case__\": 0, \"file1\": {\"values\": [{\"id\": 344, \"src\": \"hda\"}]}, \"file2\": {\"values\": [{\"id\": 345, \"src\": \"hda\"}]}, \"libtype\": {\"__current_case__\": 0, \"strandedness\": \"A\"}, \"readselect\": \"paired\"}", "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 343, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}"}, "inputs": {"refTranscriptSource|s_index|fasta": {"id": "4119f4b1d51f68e2", "src": "hda", "uuid": "d04ddae4-2c8f-40ea-a161-c2d6a6afc9ba"}, "pairstraight|file1": {"id": "48e58fe64c23944a", "src": "hda", "uuid": "b4de1713-4987-4329-9dfb-33411411dc00"}, "pairstraight|file2": {"id": "503eebe1a70d0f65", "src": "hda", "uuid": "1a8efbbb-92e3-4add-9239-2a22378c7a1c"}, "tgmap": {"id": "47f43b5f4dc6a8e0", "src": "hda", "uuid": "a1871264-1f21-414f-80d9-a24c2f50e618"}}, "outputs": {"flenDist_txt": {"id": "81aae0179528a31d", "src": "hda", "uuid": "27218734-3eea-4d82-9edc-7816a5cf5462"}, "observed_bias_3p": {"id": "a58acbf78befe6d7", "src": "hda", "uuid": "5c8c3f0c-3a2f-4726-b828-71597d3094e8"}, "observed_bias": {"id": "3f835c7a24d90d0a", "src": "hda", "uuid": "43ab049f-ca62-4af1-a36a-c450037684a5"}, "expected_bias": {"id": "9eb6ca773bc36258", "src": "hda", "uuid": "b4070204-e4b8-452e-9e0a-5123c5444b5b"}, "whitelist_txt": {"id": "cc2dd5ce6f62ca2c", "src": "hda", "uuid": "f29a6c6b-5a1c-422a-b99e-182c9b0aedd5"}, "featureDump_txt": {"id": "789c28cbc601ec9e", "src": "hda", "uuid": "156506f9-16ec-4347-a2d9-774ae575c80f"}, "quants_tier_mat": {"id": "6100c30de454a84d", "src": "hda", "uuid": "050b707c-c2de-4f8a-b01a-1b9a8912e76c"}, "quants_mat_rows_txt": {"id": "f4cf9bad2eb578fa", "src": "hda", "uuid": "b2478d85-6da5-488c-8f42-e42e8ca41244"}, "quants_mat_cols_txt": {"id": "d41fb639bc8355cf", "src": "hda", "uuid": "3b658005-a0d4-41c8-accc-198f5c5d8918"}, "raw_cb_frequency_txt": {"id": "0427c77fa3233533", "src": "hda", "uuid": "09d4a1e4-5221-4e49-a200-d7415ecd2214"}, "quants_mat_mtx": {"id": "e062abcec124e296", "src": "hda", "uuid": "76b006fa-4ad3-4e33-9e08-c731de395e30"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "alevin/1.5.1+galaxy0-1", "has_data": true, "data": {"tool_id": "alevin", "tool_version": "1.5.1+galaxy0", "test_index": 1, "time_seconds": 37.14829778671265, "inputs": {"refTranscriptSource|s_index|fasta": {"src": "hda", "id": "d3d0f7843ad97fd1"}, "refTranscriptSource|TranscriptSource": "history", "pairstraight|file1": {"src": "hda", "id": "730fd87be7064621"}, "pairstraight|file2": {"src": "hda", "id": "2b05a932cf7093b0"}, "pairstraight|readselect": "paired", "protocol": "--chromium", "tgmap": {"src": "hda", "id": "98904ff6ce459e00"}, "optional|dumpFeatures": true, "optional|dumpMtx": true, "optional|numCellBootstraps": "2", "optional|keepCBFraction": "1", "optional|freqThreshold": "5"}, "job": {"model_class": "Job", "id": "80ba957c0e9e9ab8", "state": "error", "exit_code": null, "update_time": "2024-02-23T07:13:47.193205", "create_time": "2024-02-23T07:13:30.846359", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-zzpnp", "command_line": "mkdir ./index && mkdir ./output && salmon index -i ./index --kmerLen '31' --gencode --transcripts '/galaxy/server/database/objects/7/e/3/dataset_7e3b273e-cbd1-4144-8b52-2cd83c330f7a.dat' && cp '/galaxy/server/database/objects/b/e/5/dataset_be5e1741-c1ee-4b49-837e-a686ecb0e517.dat' ./mate1.fastq.gz && gunzip ./mate1.fastq.gz && cp '/galaxy/server/database/objects/7/3/3/dataset_73336c49-7d83-48e9-8a33-8efc88f40086.dat' ./mate2.fastq.gz && gunzip ./mate2.fastq.gz  && ln -s '/galaxy/server/database/objects/c/f/9/dataset_cf9a7157-0b1b-4535-bdcf-d6d5034a0e04.dat' ./alevinmap.tsv && salmon alevin -l A -i ./index -1 ./mate1.fastq -2 ./mate2.fastq -o ./output -p \"${GALAXY_SLOTS:-4}\" --chromium --tgMap ./alevinmap.tsv --numCellBootstraps '2' --keepCBFraction '1.0'   --dumpFeatures  --dumpMtx --freqThreshold '5'  && gunzip output/alevin/quants_mat.mtx.gz  && gunzip output/alevin/quants_tier_mat.gz && gunzip output/alevin/quants_mean_mat.gz && gunzip output/alevin/quants_var_mat.gz  && gunzip output/aux_info/fld.gz && gunzip output/aux_info/observed_bias.gz && gunzip output/aux_info/observed_bias_3p.gz", "traceback": "Traceback (most recent call last):\n  File \"/galaxy/server/lib/galaxy/jobs/runners/__init__.py\", line 649, in _finish_or_resubmit_job\n    job_wrapper.finish(\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1961, in finish\n    self._finish_dataset(output_name, dataset, job, context, final_job_state, remote_metadata_directory)\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1778, in _finish_dataset\n    dataset.datatype.set_meta(dataset, overwrite=False)\n  File \"/galaxy/server/lib/galaxy/datatypes/tabular.py\", line 1689, in set_meta\n    for line in dataset_fh:\n  File \"/usr/local/lib/python3.10/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 10: invalid start byte\n", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "optional": "{\"dumpBfh\": false, \"dumpFeatures\": true, \"dumpMtx\": true, \"dumpUmiGraph\": false, \"expectCells\": \"\", \"forceCells\": \"\", \"freqThreshold\": \"5\", \"keepCBFraction\": \"1.0\", \"lowRegionMinNumBarcodes\": \"\", \"maxNumBarcodes\": \"\", \"minScoreFraction\": \"\", \"mrna\": null, \"noDedup\": false, \"numCellBootstraps\": \"2\", \"rrna\": null, \"whitelist\": null}", "allout": "false", "protocol": "\"--chromium\"", "pairstraight": "{\"__current_case__\": 0, \"file1\": {\"values\": [{\"id\": 326, \"src\": \"hda\"}]}, \"file2\": {\"values\": [{\"id\": 327, \"src\": \"hda\"}]}, \"libtype\": {\"__current_case__\": 0, \"strandedness\": \"A\"}, \"readselect\": \"paired\"}", "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 325, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}"}, "inputs": {"refTranscriptSource|s_index|fasta": {"id": "d3d0f7843ad97fd1", "src": "hda", "uuid": "7e3b273e-cbd1-4144-8b52-2cd83c330f7a"}, "pairstraight|file1": {"id": "730fd87be7064621", "src": "hda", "uuid": "be5e1741-c1ee-4b49-837e-a686ecb0e517"}, "pairstraight|file2": {"id": "2b05a932cf7093b0", "src": "hda", "uuid": "73336c49-7d83-48e9-8a33-8efc88f40086"}, "tgmap": {"id": "98904ff6ce459e00", "src": "hda", "uuid": "cf9a7157-0b1b-4535-bdcf-d6d5034a0e04"}}, "outputs": {"flenDist_txt": {"id": "6eed7a8beb96cb5e", "src": "hda", "uuid": "0f8d2833-64df-4183-ab18-3c6244dc8aa1"}, "observed_bias_3p": {"id": "9a626fc3a10f65e2", "src": "hda", "uuid": "9523106a-0204-4fed-ac23-f0f272fef83d"}, "observed_bias": {"id": "269c8bdb80254fd8", "src": "hda", "uuid": "b9b957a2-febd-4a02-833d-3c2f3fe4d775"}, "expected_bias": {"id": "3b3a4ac94d1bceda", "src": "hda", "uuid": "e3b445c7-20b6-4e10-98bc-727686d0f1eb"}, "quants_boot_rows_txt": {"id": "5cb87767d31b5497", "src": "hda", "uuid": "001ac315-2fea-4b6a-a9ac-610385dd529a"}, "quants_var_mat": {"id": "8b5bb23ea802e522", "src": "hda", "uuid": "53f129bb-3df7-4764-ad90-9fdd7253c2e3"}, "quants_mean_mat": {"id": "8916eb031f8869a7", "src": "hda", "uuid": "ad91204d-b5e6-4686-b399-4f0a824cd330"}, "whitelist_txt": {"id": "925545d366b1deba", "src": "hda", "uuid": "e7942363-9c4c-4146-bd56-dd0966618bea"}, "featureDump_txt": {"id": "e36fee48a7301c4f", "src": "hda", "uuid": "27d58fe6-fc47-4cf0-8b09-d1395cbe313a"}, "quants_tier_mat": {"id": "29a3bf5212c5b7ca", "src": "hda", "uuid": "85f39a46-8b67-4673-a3b1-b584894994e2"}, "quants_mat_rows_txt": {"id": "678ae42d9724835b", "src": "hda", "uuid": "f3736f66-f90d-489b-99ed-9fc97de2b9e3"}, "quants_mat_cols_txt": {"id": "d13e0b85c2041f81", "src": "hda", "uuid": "760bc267-174f-48bb-8a7d-8cb62b78a6c2"}, "raw_cb_frequency_txt": {"id": "c2f13028e3445d48", "src": "hda", "uuid": "172e2b7d-ced1-43d7-b729-ca6eea0c1149"}, "quants_mat_mtx": {"id": "4646c5deff3fb20a", "src": "hda", "uuid": "eb1fdecd-fcd7-4b7f-8b32-5d7861d3499d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "alevin/1.5.1+galaxy0-1", "has_data": true, "data": {"tool_id": "alevin", "tool_version": "1.5.1+galaxy0", "test_index": 1, "time_seconds": 36.736507177352905, "inputs": {"refTranscriptSource|s_index|fasta": {"src": "hda", "id": "11ca3f51da5d0012"}, "refTranscriptSource|TranscriptSource": "history", "pairstraight|file1": {"src": "hda", "id": "d1e70d9d39931217"}, "pairstraight|file2": {"src": "hda", "id": "e21573af37f15d73"}, "pairstraight|readselect": "paired", "protocol": "--chromium", "tgmap": {"src": "hda", "id": "a0454d2cebf88430"}, "optional|dumpFeatures": true, "optional|dumpMtx": true, "optional|numCellBootstraps": "2", "optional|keepCBFraction": "1", "optional|freqThreshold": "5"}, "job": {"model_class": "Job", "id": "1618fe80d73eafc3", "state": "error", "exit_code": null, "update_time": "2024-02-23T07:15:01.433547", "create_time": "2024-02-23T07:14:45.782817", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-dpgt7", "command_line": "mkdir ./index && mkdir ./output && salmon index -i ./index --kmerLen '31' --gencode --transcripts '/galaxy/server/database/objects/2/5/9/dataset_2591f592-27d3-406c-92ea-2da760a4e6c5.dat' && cp '/galaxy/server/database/objects/b/d/3/dataset_bd3865b7-b865-48aa-a4a1-40eb3594dd08.dat' ./mate1.fastq.gz && gunzip ./mate1.fastq.gz && cp '/galaxy/server/database/objects/2/5/6/dataset_2563d20c-9199-4baf-bdb4-f7d2d4222256.dat' ./mate2.fastq.gz && gunzip ./mate2.fastq.gz  && ln -s '/galaxy/server/database/objects/3/0/7/dataset_30782230-dab1-4470-90bc-d7f10859c1b4.dat' ./alevinmap.tsv && salmon alevin -l A -i ./index -1 ./mate1.fastq -2 ./mate2.fastq -o ./output -p \"${GALAXY_SLOTS:-4}\" --chromium --tgMap ./alevinmap.tsv --numCellBootstraps '2' --keepCBFraction '1.0'   --dumpFeatures  --dumpMtx --freqThreshold '5'  && gunzip output/alevin/quants_mat.mtx.gz  && gunzip output/alevin/quants_tier_mat.gz && gunzip output/alevin/quants_mean_mat.gz && gunzip output/alevin/quants_var_mat.gz  && gunzip output/aux_info/fld.gz && gunzip output/aux_info/observed_bias.gz && gunzip output/aux_info/observed_bias_3p.gz", "traceback": "Traceback (most recent call last):\n  File \"/galaxy/server/lib/galaxy/jobs/runners/__init__.py\", line 649, in _finish_or_resubmit_job\n    job_wrapper.finish(\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1961, in finish\n    self._finish_dataset(output_name, dataset, job, context, final_job_state, remote_metadata_directory)\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1778, in _finish_dataset\n    dataset.datatype.set_meta(dataset, overwrite=False)\n  File \"/galaxy/server/lib/galaxy/datatypes/tabular.py\", line 1689, in set_meta\n    for line in dataset_fh:\n  File \"/usr/local/lib/python3.10/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 10: invalid start byte\n", "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "optional": "{\"dumpBfh\": false, \"dumpFeatures\": true, \"dumpMtx\": true, \"dumpUmiGraph\": false, \"expectCells\": \"\", \"forceCells\": \"\", \"freqThreshold\": \"5\", \"keepCBFraction\": \"1.0\", \"lowRegionMinNumBarcodes\": \"\", \"maxNumBarcodes\": \"\", \"minScoreFraction\": \"\", \"mrna\": null, \"noDedup\": false, \"numCellBootstraps\": \"2\", \"rrna\": null, \"whitelist\": null}", "allout": "false", "protocol": "\"--chromium\"", "pairstraight": "{\"__current_case__\": 0, \"file1\": {\"values\": [{\"id\": 359, \"src\": \"hda\"}]}, \"file2\": {\"values\": [{\"id\": 360, \"src\": \"hda\"}]}, \"libtype\": {\"__current_case__\": 0, \"strandedness\": \"A\"}, \"readselect\": \"paired\"}", "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 358, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}"}, "inputs": {"refTranscriptSource|s_index|fasta": {"id": "11ca3f51da5d0012", "src": "hda", "uuid": "2591f592-27d3-406c-92ea-2da760a4e6c5"}, "pairstraight|file1": {"id": "d1e70d9d39931217", "src": "hda", "uuid": "bd3865b7-b865-48aa-a4a1-40eb3594dd08"}, "pairstraight|file2": {"id": "e21573af37f15d73", "src": "hda", "uuid": "2563d20c-9199-4baf-bdb4-f7d2d4222256"}, "tgmap": {"id": "a0454d2cebf88430", "src": "hda", "uuid": "30782230-dab1-4470-90bc-d7f10859c1b4"}}, "outputs": {"flenDist_txt": {"id": "1eca9baa117ea95b", "src": "hda", "uuid": "293356d0-56b4-4429-95c1-296a619a0a20"}, "observed_bias_3p": {"id": "f2817af51672472d", "src": "hda", "uuid": "dee9f6aa-1465-4f6a-bf81-ebbf1b84dc3c"}, "observed_bias": {"id": "0324e13d865e24ce", "src": "hda", "uuid": "83a042ff-f7a1-433d-9641-6f8d099cb4b3"}, "expected_bias": {"id": "a603db068a3e1f53", "src": "hda", "uuid": "668ebeef-0228-4ba0-a319-0126dbc7a60a"}, "quants_boot_rows_txt": {"id": "442f86c6d56449fa", "src": "hda", "uuid": "e1b2db27-4a70-4f1e-920b-4333c720ac48"}, "quants_var_mat": {"id": "da0014c9b91249e2", "src": "hda", "uuid": "3bf7c245-55aa-4deb-bb33-25f44203dd68"}, "quants_mean_mat": {"id": "0fac9b777b3ab31f", "src": "hda", "uuid": "437a1d9b-bcd5-4cdb-93cb-9e231fb51c57"}, "whitelist_txt": {"id": "d4f2043ae7553822", "src": "hda", "uuid": "e102f969-89fd-44ac-b6c2-817eda923648"}, "featureDump_txt": {"id": "10d7d871324b7bee", "src": "hda", "uuid": "af0df67b-4d22-44b6-aced-8f5ca45fa331"}, "quants_tier_mat": {"id": "67ffe8ea156a1ece", "src": "hda", "uuid": "0722e851-26d3-4cac-b82a-f7e398569df0"}, "quants_mat_rows_txt": {"id": "bcd87326993f3b30", "src": "hda", "uuid": "b77098b8-b380-4207-8972-2cc516e24a5e"}, "quants_mat_cols_txt": {"id": "411c69de6ad2cc33", "src": "hda", "uuid": "8356b8d3-57a7-4b18-8e49-6c77d3aaf684"}, "raw_cb_frequency_txt": {"id": "cd730d14dcdf8651", "src": "hda", "uuid": "8824d863-ec00-452f-9f4e-594b7163bf5d"}, "quants_mat_mtx": {"id": "f1a610d76ed75ae7", "src": "hda", "uuid": "dae08b43-f026-4f28-8eb9-2d490dcc5882"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "anndata_export/0.7.5+galaxy1-0", "has_data": true, "data": {"tool_id": "anndata_export", "tool_version": "0.7.5+galaxy1", "test_index": 0, "time_seconds": 14.142913341522217, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "anndata_export/0.7.5+galaxy1-0", "has_data": true, "data": {"tool_id": "anndata_export", "tool_version": "0.7.5+galaxy1", "test_index": 0, "time_seconds": 12.746389627456665, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "anndata_export/0.7.5+galaxy1-1", "has_data": true, "data": {"tool_id": "anndata_export", "tool_version": "0.7.5+galaxy1", "test_index": 1, "time_seconds": 13.744689702987671, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "anndata_export/0.7.5+galaxy1-1", "has_data": true, "data": {"tool_id": "anndata_export", "tool_version": "0.7.5+galaxy1", "test_index": 1, "time_seconds": 14.051893711090088, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "anndata_export/0.7.5+galaxy1-2", "has_data": true, "data": {"tool_id": "anndata_export", "tool_version": "0.7.5+galaxy1", "test_index": 2, "time_seconds": 37.349618673324585, "inputs": {"hd5_format|input": {"src": "hda", "id": "492813ebce4892bc"}, "hd5_format|filetype": "loom"}, "job": {"model_class": "Job", "id": "d82ff9c73ba53596", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:11:25.169929", "create_time": "2024-02-23T07:11:04.057556", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_export/anndata_export/0.7.5+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-j8dpn", "command_line": "mkdir ./output && mkdir ./attributes && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/anndata_export/0cb889db0910/anndata_export/loompy_to_tsv.py' -f '/galaxy/server/database/objects/e/3/7/dataset_e3790dcf-7747-44d4-8709-4e7d1b6e8e22.dat'", "traceback": null, "params": {"__input_ext": "\"loom\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "hd5_format": "{\"__current_case__\": 1, \"filetype\": \"loom\", \"input\": {\"values\": [{\"id\": 296, \"src\": \"hda\"}]}}"}, "inputs": {"hd5_format|input": {"id": "492813ebce4892bc", "src": "hda", "uuid": "e3790dcf-7747-44d4-8709-4e7d1b6e8e22"}}, "outputs": {"__new_primary_file_attribute_tsvs|col_attr.tsv__": {"id": "7bbc335009d2e1b9", "src": "hda", "uuid": "f39dfcc4-b6c0-4e29-9cf3-abecf97d75e9"}, "__new_primary_file_attribute_tsvs|row_attr.tsv__": {"id": "e2e3221f77bcd2be", "src": "hda", "uuid": "d96b2a5b-3f9d-42f7-a250-81348985a198"}, "__new_primary_file_layer_tsvs|extralayer.tsv__": {"id": "51833dd6521117c5", "src": "hda", "uuid": "3dfd245d-a177-4acc-816a-e7f41b55af7f"}, "__new_primary_file_layer_tsvs|mainmatrix.tsv__": {"id": "b52b26949467b083", "src": "hda", "uuid": "5bdc3b07-e4ce-4fc1-a6cf-835674fbbca3"}, "__new_primary_file_layer_tsvs|thirdlayer.tsv__": {"id": "53bc156de52f86bd", "src": "hda", "uuid": "444456a2-f2aa-4b85-8c3d-bf6dcd7ae773"}}, "output_collections": {"attribute_tsvs": {"id": "a8bf9c11f9aca122", "src": "hdca"}, "layer_tsvs": {"id": "bd4e497025990c60", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:11:14", "plugin": "core", "name": "end_epoch", "raw_value": "1708672274.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:11:13", "plugin": "core", "name": "start_epoch", "raw_value": "1708672273.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "anndata_export/0.7.5+galaxy1-2", "has_data": true, "data": {"tool_id": "anndata_export", "tool_version": "0.7.5+galaxy1", "test_index": 2, "time_seconds": 25.73324680328369, "inputs": {"hd5_format|input": {"src": "hda", "id": "8ce62d252a2f3079"}, "hd5_format|filetype": "loom"}, "job": {"model_class": "Job", "id": "2a2b2ed17b6182b3", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:12:18.873114", "create_time": "2024-02-23T07:12:07.848755", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/anndata_export/anndata_export/0.7.5+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-kkqdn", "command_line": "mkdir ./output && mkdir ./attributes && python '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/anndata_export/0cb889db0910/anndata_export/loompy_to_tsv.py' -f '/galaxy/server/database/objects/a/0/e/dataset_a0e69e8f-8648-4d02-9cf6-daaabd4a4f0d.dat'", "traceback": null, "params": {"__input_ext": "\"loom\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "hd5_format": "{\"__current_case__\": 1, \"filetype\": \"loom\", \"input\": {\"values\": [{\"id\": 304, \"src\": \"hda\"}]}}"}, "inputs": {"hd5_format|input": {"id": "8ce62d252a2f3079", "src": "hda", "uuid": "a0e69e8f-8648-4d02-9cf6-daaabd4a4f0d"}}, "outputs": {"__new_primary_file_layer_tsvs|thirdlayer.tsv__": {"id": "01885f0886444bad", "src": "hda", "uuid": "fb85d240-da80-4b4a-be97-80f7ca198f86"}, "__new_primary_file_layer_tsvs|mainmatrix.tsv__": {"id": "c17741b1826bab21", "src": "hda", "uuid": "7791c0b5-52d1-4240-a746-75a43091e534"}, "__new_primary_file_layer_tsvs|extralayer.tsv__": {"id": "46ef6c0702fd5dee", "src": "hda", "uuid": "2eba26d0-b670-4159-a037-98a48ea34d21"}, "__new_primary_file_attribute_tsvs|row_attr.tsv__": {"id": "c5ddf948601c3ac5", "src": "hda", "uuid": "d3601360-ff0c-41e9-b7b1-d1aedf8fcd1b"}, "__new_primary_file_attribute_tsvs|col_attr.tsv__": {"id": "309374670c0ec001", "src": "hda", "uuid": "bcfd661d-16d7-4074-9cd0-e21c94b6338d"}}, "output_collections": {"attribute_tsvs": {"id": "4e861cc1295c18e5", "src": "hdca"}, "layer_tsvs": {"id": "227b23af134c5673", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:12:10", "plugin": "core", "name": "end_epoch", "raw_value": "1708672330.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:12:09", "plugin": "core", "name": "start_epoch", "raw_value": "1708672329.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "bam_to_sam/2.0.1-0", "has_data": true, "data": {"tool_id": "bam_to_sam", "tool_version": "2.0.1", "test_index": 0, "time_seconds": 25.054657697677612, "inputs": {"input1": {"src": "hda", "id": "a2c72478aae4206b"}, "header": "-h"}, "job": {"model_class": "Job", "id": "fce2e0cbe0d427be", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:09:30.967539", "create_time": "2024-02-23T07:09:21.246791", "galaxy_version": "23.1", "command_version": "Version: 1.9 (using htslib 1.9)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bam_to_sam/bam_to_sam/2.0.1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-pwfbp", "command_line": "samtools view -o '/galaxy/server/database/objects/d/5/f/dataset_d5fe62e4-3474-4a2e-8f70-1ef4f6932f03.dat' -h '/galaxy/server/database/objects/a/9/6/dataset_a9653b96-6e9a-4cc5-b819-67e621230f6c.dat'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "header": "\"-h\""}, "inputs": {"input1": {"id": "a2c72478aae4206b", "src": "hda", "uuid": "a9653b96-6e9a-4cc5-b819-67e621230f6c"}}, "outputs": {"output1": {"id": "b28dead96e3b9746", "src": "hda", "uuid": "d5fe62e4-3474-4a2e-8f70-1ef4f6932f03"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:09:23", "plugin": "core", "name": "end_epoch", "raw_value": "1708672163.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:09:23", "plugin": "core", "name": "start_epoch", "raw_value": "1708672163.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bam_to_sam/2.0.1-1", "has_data": true, "data": {"tool_id": "bam_to_sam", "tool_version": "2.0.1", "test_index": 1, "time_seconds": 23.5683536529541, "inputs": {"input1": {"src": "hda", "id": "af6a6619ea065aac"}, "header": "-H"}, "job": {"model_class": "Job", "id": "e33d454b75c463ca", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:09:54.506944", "create_time": "2024-02-23T07:09:45.559164", "galaxy_version": "23.1", "command_version": "Version: 1.9 (using htslib 1.9)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bam_to_sam/bam_to_sam/2.0.1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-dvb4j", "command_line": "samtools view -o '/galaxy/server/database/objects/0/a/b/dataset_0abcf64a-064a-4f07-8f72-7be1dad146ff.dat' -H '/galaxy/server/database/objects/9/4/0/dataset_9402ad20-987d-466c-bc4a-1c2bfbbb72ea.dat'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "header": "\"-H\""}, "inputs": {"input1": {"id": "af6a6619ea065aac", "src": "hda", "uuid": "9402ad20-987d-466c-bc4a-1c2bfbbb72ea"}}, "outputs": {"output1": {"id": "8100f32b0c83d981", "src": "hda", "uuid": "0abcf64a-064a-4f07-8f72-7be1dad146ff"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:09:46", "plugin": "core", "name": "end_epoch", "raw_value": "1708672186.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:09:46", "plugin": "core", "name": "start_epoch", "raw_value": "1708672186.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bam_to_sam/2.0.1-2", "has_data": true, "data": {"tool_id": "bam_to_sam", "tool_version": "2.0.1", "test_index": 2, "time_seconds": 25.349303722381592, "inputs": {"input1": {"src": "hda", "id": "48e97f23af4cfff1"}, "header": ""}, "job": {"model_class": "Job", "id": "2f8e4500c1a92a7f", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:10:19.955198", "create_time": "2024-02-23T07:10:09.962728", "galaxy_version": "23.1", "command_version": "Version: 1.9 (using htslib 1.9)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/bam_to_sam/bam_to_sam/2.0.1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-pbdn7", "command_line": "samtools view -o '/galaxy/server/database/objects/5/9/b/dataset_59bd05e4-7e15-4ae0-b2c7-f378e02a68e7.dat'  '/galaxy/server/database/objects/6/4/c/dataset_64c4f8a0-b013-4723-a6a8-52a08e4a913b.dat'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "header": "\"\""}, "inputs": {"input1": {"id": "48e97f23af4cfff1", "src": "hda", "uuid": "64c4f8a0-b013-4723-a6a8-52a08e4a913b"}}, "outputs": {"output1": {"id": "658e44c9a0bb9ccc", "src": "hda", "uuid": "59bd05e4-7e15-4ae0-b2c7-f378e02a68e7"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:10:11", "plugin": "core", "name": "end_epoch", "raw_value": "1708672211.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:10:11", "plugin": "core", "name": "start_epoch", "raw_value": "1708672211.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bcftools_convert_to_vcf/1.10-0", "has_data": true, "data": {"tool_id": "bcftools_convert_to_vcf", "tool_version": "1.10", "test_index": 0, "time_seconds": 30.29550075531006, "inputs": {"convert|input_file": {"src": "hda", "id": "813bf72328c09384"}, "convert|input_sample": {"src": "hda", "id": "c5a4b79ea29990a4"}, "convert|convert_from": "gen_sample", "output_type": "v"}, "job": {"model_class": "Job", "id": "f1634c7183aebc3b", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:53:06.575681", "create_time": "2024-02-23T07:52:50.941320", "galaxy_version": "23.1", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_convert_to_vcf/bcftools_convert_to_vcf/1.10", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-7hd7v", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;    bcftools convert   --output-type 'v'   --gensample2vcf '/galaxy/server/database/objects/4/8/e/dataset_48e86066-402d-41a0-8803-97e5ba2d33e7.dat,/galaxy/server/database/objects/7/a/6/dataset_7a6ee167-c215-4575-b5a1-8e030e03bcab.dat' > '/galaxy/server/database/objects/2/1/3/dataset_213484c2-7358-440f-b9fd-aaf564580333.dat'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "convert": "{\"__current_case__\": 2, \"convert_from\": \"gen_sample\", \"input_file\": {\"values\": [{\"id\": 561, \"src\": \"hda\"}]}, \"input_sample\": {\"values\": [{\"id\": 562, \"src\": \"hda\"}]}}"}, "inputs": {"convert|input_file": {"id": "813bf72328c09384", "src": "hda", "uuid": "48e86066-402d-41a0-8803-97e5ba2d33e7"}, "convert|input_sample": {"id": "c5a4b79ea29990a4", "src": "hda", "uuid": "7a6ee167-c215-4575-b5a1-8e030e03bcab"}}, "outputs": {"output_file": {"id": "e2da3a2b161a3638", "src": "hda", "uuid": "213484c2-7358-440f-b9fd-aaf564580333"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Number of processed rows: \t32\n", "job_stdout": "", "job_stderr": "", "stderr": "Number of processed rows: \t32\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:52:57", "plugin": "core", "name": "end_epoch", "raw_value": "1708674777.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:52:57", "plugin": "core", "name": "start_epoch", "raw_value": "1708674777.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bcftools_convert_to_vcf/1.10-1", "has_data": true, "data": {"tool_id": "bcftools_convert_to_vcf", "tool_version": "1.10", "test_index": 1, "time_seconds": 24.671307802200317, "inputs": {"convert|input_file": {"src": "hda", "id": "923990942654f633"}, "convert|input_sample": {"src": "hda", "id": "dedb2d972060375c"}, "convert|convert_from": "hap_sample", "output_type": "v"}, "job": {"model_class": "Job", "id": "c02dd1c2bdb70330", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:53:31.079823", "create_time": "2024-02-23T07:53:21.606324", "galaxy_version": "23.1", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_convert_to_vcf/bcftools_convert_to_vcf/1.10", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-nh5bd", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;    bcftools convert   --output-type 'v'   --hapsample2vcf '/galaxy/server/database/objects/a/3/1/dataset_a31f696f-bdaf-4fcf-a2f3-03b80e67b9c9.dat,/galaxy/server/database/objects/2/f/b/dataset_2fb438b5-b0b7-4901-ba0e-3eb08e97833c.dat' > '/galaxy/server/database/objects/d/b/c/dataset_dbc01fef-dc63-449f-a99b-3c53566aeb4e.dat'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "convert": "{\"__current_case__\": 3, \"convert_from\": \"hap_sample\", \"input_file\": {\"values\": [{\"id\": 564, \"src\": \"hda\"}]}, \"input_sample\": {\"values\": [{\"id\": 565, \"src\": \"hda\"}]}}"}, "inputs": {"convert|input_sample": {"id": "dedb2d972060375c", "src": "hda", "uuid": "2fb438b5-b0b7-4901-ba0e-3eb08e97833c"}, "convert|input_file": {"id": "923990942654f633", "src": "hda", "uuid": "a31f696f-bdaf-4fcf-a2f3-03b80e67b9c9"}}, "outputs": {"output_file": {"id": "ef10ecbb8886f5da", "src": "hda", "uuid": "dbc01fef-dc63-449f-a99b-3c53566aeb4e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Number of processed rows: \t35\n", "job_stdout": "", "job_stderr": "", "stderr": "Number of processed rows: \t35\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:53:23", "plugin": "core", "name": "end_epoch", "raw_value": "1708674803.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:53:23", "plugin": "core", "name": "start_epoch", "raw_value": "1708674803.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bcftools_convert_to_vcf/1.10-2", "has_data": true, "data": {"tool_id": "bcftools_convert_to_vcf", "tool_version": "1.10", "test_index": 2, "time_seconds": 26.79244875907898, "inputs": {"convert|input_file": {"src": "hda", "id": "3b3dc9112cbadfcd"}, "convert|input_legend": {"src": "hda", "id": "cc4dff67dc6e3f3f"}, "convert|input_sample": {"src": "hda", "id": "2380890d50fd6016"}, "convert|convert_from": "hap_legend_sample", "output_type": "v"}, "job": {"model_class": "Job", "id": "9571cfaf0816aba9", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:53:57.882684", "create_time": "2024-02-23T07:53:48.463681", "galaxy_version": "23.1", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_convert_to_vcf/bcftools_convert_to_vcf/1.10", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-lq72f", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;    bcftools convert   --output-type 'v'   --haplegendsample2vcf '/galaxy/server/database/objects/6/4/d/dataset_64d45018-a562-42ed-9dcc-4d04a2cee97a.dat,/galaxy/server/database/objects/5/2/0/dataset_52098527-5966-4272-bd98-533e69c97d31.dat,/galaxy/server/database/objects/e/3/7/dataset_e3736541-ceaf-4488-82cc-756a585bfc0c.dat' > '/galaxy/server/database/objects/3/1/e/dataset_31e9322a-3287-49ff-b3c0-ff24d62ba75f.dat'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "convert": "{\"__current_case__\": 4, \"convert_from\": \"hap_legend_sample\", \"input_file\": {\"values\": [{\"id\": 567, \"src\": \"hda\"}]}, \"input_legend\": {\"values\": [{\"id\": 568, \"src\": \"hda\"}]}, \"input_sample\": {\"values\": [{\"id\": 569, \"src\": \"hda\"}]}}"}, "inputs": {"convert|input_sample": {"id": "2380890d50fd6016", "src": "hda", "uuid": "e3736541-ceaf-4488-82cc-756a585bfc0c"}, "convert|input_legend": {"id": "cc4dff67dc6e3f3f", "src": "hda", "uuid": "52098527-5966-4272-bd98-533e69c97d31"}, "convert|input_file": {"id": "3b3dc9112cbadfcd", "src": "hda", "uuid": "64d45018-a562-42ed-9dcc-4d04a2cee97a"}}, "outputs": {"output_file": {"id": "005567f5bf5efa1a", "src": "hda", "uuid": "31e9322a-3287-49ff-b3c0-ff24d62ba75f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Number of processed rows: \t35\n", "job_stdout": "", "job_stderr": "", "stderr": "Number of processed rows: \t35\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:53:50", "plugin": "core", "name": "end_epoch", "raw_value": "1708674830.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:53:50", "plugin": "core", "name": "start_epoch", "raw_value": "1708674830.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bcftools_convert_to_vcf/1.10-3", "has_data": true, "data": {"tool_id": "bcftools_convert_to_vcf", "tool_version": "1.10", "test_index": 3, "time_seconds": 26.319456100463867, "inputs": {"convert|input_file": {"src": "hda", "id": "f3a04f1615c2492e"}, "convert|reference_source|fasta_ref": {"src": "hda", "id": "9a33c0861b542b74"}, "convert|reference_source|reference_source_selector": "history", "convert|convert_from": "gvcf", "output_type": "v"}, "job": {"model_class": "Job", "id": "48ac93cfc798b4e2", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:54:24.545637", "create_time": "2024-02-23T07:54:14.203504", "galaxy_version": "23.1", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_convert_to_vcf/bcftools_convert_to_vcf/1.10", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-jbj9q", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;   bgzip -c '/galaxy/server/database/objects/2/6/1/dataset_261b6404-bb31-46a6-b08d-b5dd22c18697.dat' > input.vcf.gz && bcftools index input.vcf.gz &&   ln -s '/galaxy/server/database/objects/d/7/b/dataset_d7b7bc63-9aa0-472c-bd74-113c5c2df73f.dat' ref.fa && samtools faidx ref.fa &&    bcftools convert   --output-type 'v'    --fasta-ref ref.fa  --gvcf2vcf input.vcf.gz > '/galaxy/server/database/objects/3/1/6/dataset_316e279c-caed-4aac-a304-badf5a4f2e65.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "convert": "{\"__current_case__\": 1, \"convert_from\": \"gvcf\", \"input_file\": {\"values\": [{\"id\": 571, \"src\": \"hda\"}]}, \"reference_source\": {\"__current_case__\": 1, \"fasta_ref\": {\"values\": [{\"id\": 572, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}}"}, "inputs": {"convert|reference_source|fasta_ref": {"id": "9a33c0861b542b74", "src": "hda", "uuid": "d7b7bc63-9aa0-472c-bd74-113c5c2df73f"}, "convert|input_file": {"id": "f3a04f1615c2492e", "src": "hda", "uuid": "261b6404-bb31-46a6-b08d-b5dd22c18697"}}, "outputs": {"output_file": {"id": "88568d8dc3760f37", "src": "hda", "uuid": "316e279c-caed-4aac-a304-badf5a4f2e65"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:54:16", "plugin": "core", "name": "end_epoch", "raw_value": "1708674856.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:54:15", "plugin": "core", "name": "start_epoch", "raw_value": "1708674855.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bcftools_convert_to_vcf/1.10-4", "has_data": true, "data": {"tool_id": "bcftools_convert_to_vcf", "tool_version": "1.10", "test_index": 4, "status": "skip"}}, {"id": "bcftools_convert_to_vcf/1.10-5", "has_data": true, "data": {"tool_id": "bcftools_convert_to_vcf", "tool_version": "1.10", "test_index": 5, "time_seconds": 24.624846696853638, "inputs": {"convert|input_file": {"src": "hda", "id": "3c40fdaad1b440e3"}, "convert|reference_source|fasta_ref": {"src": "hda", "id": "90603b2eb93f9622"}, "convert|reference_source|reference_source_selector": "history", "convert|samples": "SAMPLE1", "convert|columns": "ID,CHROM,POS,AA", "convert|convert_from": "tsv", "output_type": "v"}, "job": {"model_class": "Job", "id": "204423918a952381", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:54:49.102148", "create_time": "2024-02-23T07:54:39.617905", "galaxy_version": "23.1", "command_version": "Version: 1.10.2 (using htslib 1.10.2)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_convert_to_vcf/bcftools_convert_to_vcf/1.10", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-87pd5", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     ln -s '/galaxy/server/database/objects/f/a/2/dataset_fa26e3d1-3411-4d80-be7e-b2a10dbe1c92.dat' ref.fa && samtools faidx ref.fa &&    bcftools convert   --output-type 'v'    --fasta-ref ref.fa   --samples 'SAMPLE1'   --columns 'ID,CHROM,POS,AA'  --tsv2vcf '/galaxy/server/database/objects/7/f/c/dataset_7fca6b9b-6a34-4c65-a3df-461c78a3a552.dat' > '/galaxy/server/database/objects/a/2/f/dataset_a2f9b2ea-11d4-4db0-9933-505b956bba47.dat'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "convert": "{\"__current_case__\": 0, \"columns\": \"ID,CHROM,POS,AA\", \"convert_from\": \"tsv\", \"input_file\": {\"values\": [{\"id\": 574, \"src\": \"hda\"}]}, \"invert_samples\": false, \"invert_samples_file\": false, \"reference_source\": {\"__current_case__\": 1, \"fasta_ref\": {\"values\": [{\"id\": 575, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}, \"samples\": \"SAMPLE1\", \"samples_file\": null}"}, "inputs": {"convert|reference_source|fasta_ref": {"id": "90603b2eb93f9622", "src": "hda", "uuid": "fa26e3d1-3411-4d80-be7e-b2a10dbe1c92"}, "convert|input_file": {"id": "3c40fdaad1b440e3", "src": "hda", "uuid": "7fca6b9b-6a34-4c65-a3df-461c78a3a552"}}, "outputs": {"output_file": {"id": "b0baef4de9d6b0ad", "src": "hda", "uuid": "a2f9b2ea-11d4-4db0-9933-505b956bba47"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Rows total: \t27\nRows skipped: \t0\nMissing GTs: \t1\nHom RR: \t14\nHet RA: \t7\nHom AA: \t5\nHet AA: \t0\n", "job_stdout": "", "job_stderr": "", "stderr": "Rows total: \t27\nRows skipped: \t0\nMissing GTs: \t1\nHom RR: \t14\nHet RA: \t7\nHom AA: \t5\nHet AA: \t0\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:54:41", "plugin": "core", "name": "end_epoch", "raw_value": "1708674881.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:54:41", "plugin": "core", "name": "start_epoch", "raw_value": "1708674881.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "bcftools_convert_to_vcf/1.10-6", "has_data": true, "data": {"tool_id": "bcftools_convert_to_vcf", "tool_version": "1.10", "test_index": 6, "status": "skip"}}, {"id": "bcftools_plugin_fill_an_ac/1.10-0", "has_data": true, "data": {"tool_id": "bcftools_plugin_fill_an_ac", "tool_version": "1.10", "test_index": 0, "time_seconds": 24.894059896469116, "inputs": {"input_file": {"src": "hda", "id": "200dfb31dd76ee4a"}, "output_type": "v"}, "job": {"model_class": "Job", "id": "7db2fa425c3f6c22", "state": "error", "exit_code": null, "update_time": "2024-02-23T07:55:15.206135", "create_time": "2024-02-23T07:55:04.926244", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_plugin_fill_an_ac/bcftools_plugin_fill_an_ac/1.10", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-r98q6", "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed 's,bin/bcftools,libexec/bcftools,'`;     bgzip -c '/galaxy/server/database/objects/7/c/c/dataset_7ccb3f63-4ce5-4cd0-9231-453e5111ea78.dat' > input.vcf.gz && bcftools index input.vcf.gz &&            bcftools plugin fill-AN-AC               --output-type 'v'   --threads ${GALAXY_SLOTS:-4}    input.vcf.gz  > '/galaxy/server/database/objects/7/f/7/dataset_7f7c752a-8075-4859-b02d-07a6c28a6d7f.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "output_type": "\"v\"", "sec_restrict": "{\"exclude\": null, \"include\": null, \"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}}"}, "inputs": {"input_file": {"id": "200dfb31dd76ee4a", "src": "hda", "uuid": "7ccb3f63-4ce5-4cd0-9231-453e5111ea78"}}, "outputs": {"output_file": {"id": "c19a9a40e3a0a793", "src": "hda", "uuid": "7f7c752a-8075-4859-b02d-07a6c28a6d7f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": null, "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/bcftools_plugin_fill_an_ac/bcftools_plugin_fill_an_ac/1.10, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/bcftools_plugin_fill_an_ac/bcftools_plugin_fill_an_ac/1.10, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "collection_column_join/0.0.3-0", "has_data": true, "data": {"tool_id": "collection_column_join", "tool_version": "0.0.3", "test_index": 0, "time_seconds": 71.6219584941864, "inputs": {"input_tabular": [{"src": "hda", "id": "9f8c5b59a2218bae"}, {"src": "hda", "id": "68a5971abc40bb97"}, {"src": "hda", "id": "3b0b6ffdfb0372c2"}], "identifier_column": "1", "has_header": "1", "old_col_in_header": true, "fill_char": ".", "include_outputs": null}, "job": {"model_class": "Job", "id": "9715618a89b78b45", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:26:50.605943", "create_time": "2024-02-23T06:26:10.020845", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/collection_column_join/collection_column_join/0.0.3", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-rpd4c", "command_line": "sh '/galaxy/server/database/jobs_directory/000/4/configs/tmp_6euv5z1'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "include_outputs": null, "fill_char": "\".\"", "old_col_in_header": "true", "has_header": "\"1\"", "identifier_column": "\"1\""}, "inputs": {"input_tabular3": {"id": "3b0b6ffdfb0372c2", "src": "hda", "uuid": "04d55280-4cc4-485f-a287-b9bfafe079b9"}, "input_tabular2": {"id": "68a5971abc40bb97", "src": "hda", "uuid": "ecedc14d-faa1-43ee-84a7-3553a432b48d"}, "input_tabular1": {"id": "9f8c5b59a2218bae", "src": "hda", "uuid": "32e02ced-aeae-4012-89be-90fa4f7b00bf"}, "input_tabular": {"id": "9f8c5b59a2218bae", "src": "hda", "uuid": "32e02ced-aeae-4012-89be-90fa4f7b00bf"}}, "outputs": {"tabular_output": {"id": "9715618a89b78b45", "src": "hda", "uuid": "8401e717-0678-42d2-8477-6c6664e0c04c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:26:42", "plugin": "core", "name": "end_epoch", "raw_value": "1708669602.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:26:42", "plugin": "core", "name": "start_epoch", "raw_value": "1708669602.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "collection_column_join/0.0.3-0", "has_data": true, "data": {"tool_id": "collection_column_join", "tool_version": "0.0.3", "test_index": 0, "time_seconds": 28.817264795303345, "inputs": {"input_tabular": [{"src": "hda", "id": "e3a4d9dc6023f1d3"}, {"src": "hda", "id": "286ecd88a6339267"}, {"src": "hda", "id": "e1a4055961748dcb"}], "identifier_column": "1", "has_header": "1", "old_col_in_header": true, "fill_char": ".", "include_outputs": null}, "job": {"model_class": "Job", "id": "b6acdbd8a076352a", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:28:46.464341", "create_time": "2024-02-23T06:28:36.153995", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/collection_column_join/collection_column_join/0.0.3", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-xbvfd", "command_line": "sh '/galaxy/server/database/jobs_directory/000/20/configs/tmpt5kqvfh8'", "traceback": null, "params": {"identifier_column": "\"1\"", "has_header": "\"1\"", "old_col_in_header": "true", "fill_char": "\".\"", "include_outputs": null, "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"tabular\""}, "inputs": {"input_tabular": {"id": "e3a4d9dc6023f1d3", "src": "hda", "uuid": "aae2da0d-1204-491f-9981-4562f828c11a"}, "input_tabular1": {"id": "e3a4d9dc6023f1d3", "src": "hda", "uuid": "aae2da0d-1204-491f-9981-4562f828c11a"}, "input_tabular2": {"id": "286ecd88a6339267", "src": "hda", "uuid": "f3f64ea6-2d9a-4622-85b6-1788d8099fdd"}, "input_tabular3": {"id": "e1a4055961748dcb", "src": "hda", "uuid": "d725ea59-ccdb-499d-83e6-1735c2eaecd1"}}, "outputs": {"tabular_output": {"id": "b6acdbd8a076352a", "src": "hda", "uuid": "461e9602-3dc6-4d87-b355-904ea128e831"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:28:37", "plugin": "core", "name": "start_epoch", "raw_value": "1708669717.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:28:38", "plugin": "core", "name": "end_epoch", "raw_value": "1708669718.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "collection_column_join/0.0.3-1", "has_data": true, "data": {"tool_id": "collection_column_join", "tool_version": "0.0.3", "test_index": 1, "time_seconds": 26.702878952026367, "inputs": {"input_tabular": [{"src": "hda", "id": "d99bc8ca5795c185"}, {"src": "hda", "id": "c8cd61dfdd5f6c13"}, {"src": "hda", "id": "bd4e497025990c60"}], "identifier_column": "1", "has_header": "0", "old_col_in_header": true, "fill_char": ".", "include_outputs": null}, "job": {"model_class": "Job", "id": "a8bf9c11f9aca122", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:27:17.490734", "create_time": "2024-02-23T06:27:07.903774", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/collection_column_join/collection_column_join/0.0.3", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-c4sdd", "command_line": "sh '/galaxy/server/database/jobs_directory/000/8/configs/tmp_t4x5zlx'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "include_outputs": null, "fill_char": "\".\"", "old_col_in_header": "true", "has_header": "\"0\"", "identifier_column": "\"1\""}, "inputs": {"input_tabular3": {"id": "bd4e497025990c60", "src": "hda", "uuid": "920499a3-614a-4e3a-99d5-3591a6a7eee3"}, "input_tabular2": {"id": "c8cd61dfdd5f6c13", "src": "hda", "uuid": "1d13bfcd-2319-45b3-9dfc-aab68f26800c"}, "input_tabular1": {"id": "d99bc8ca5795c185", "src": "hda", "uuid": "7f025db2-f443-4e0f-a607-01b8998aadf2"}, "input_tabular": {"id": "d99bc8ca5795c185", "src": "hda", "uuid": "7f025db2-f443-4e0f-a607-01b8998aadf2"}}, "outputs": {"tabular_output": {"id": "a8bf9c11f9aca122", "src": "hda", "uuid": "dee8a57d-2507-45d1-81cd-dfbb3b6dd4dd"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:27:09", "plugin": "core", "name": "end_epoch", "raw_value": "1708669629.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:27:09", "plugin": "core", "name": "start_epoch", "raw_value": "1708669629.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "collection_column_join/0.0.3-1", "has_data": true, "data": {"tool_id": "collection_column_join", "tool_version": "0.0.3", "test_index": 1, "time_seconds": 29.101190328598022, "inputs": {"input_tabular": [{"src": "hda", "id": "cbf2a1b77aa1c6fe"}, {"src": "hda", "id": "ebeb687d993837f8"}, {"src": "hda", "id": "31f64ac1f8e40acd"}], "identifier_column": "1", "has_header": "0", "old_col_in_header": true, "fill_char": ".", "include_outputs": null}, "job": {"model_class": "Job", "id": "5a15976bb40b122e", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:29:15.530030", "create_time": "2024-02-23T06:29:04.983238", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/collection_column_join/collection_column_join/0.0.3", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-tzwc5", "command_line": "sh '/galaxy/server/database/jobs_directory/000/24/configs/tmpdh_1qu01'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "include_outputs": null, "fill_char": "\".\"", "old_col_in_header": "true", "has_header": "\"0\"", "identifier_column": "\"1\""}, "inputs": {"input_tabular": {"id": "cbf2a1b77aa1c6fe", "src": "hda", "uuid": "d9de7566-4117-45dd-ba82-7c330b977390"}, "input_tabular1": {"id": "cbf2a1b77aa1c6fe", "src": "hda", "uuid": "d9de7566-4117-45dd-ba82-7c330b977390"}, "input_tabular2": {"id": "ebeb687d993837f8", "src": "hda", "uuid": "56603c51-41b1-4dd9-a3a6-a4e334dc96f3"}, "input_tabular3": {"id": "31f64ac1f8e40acd", "src": "hda", "uuid": "0ac093d2-c538-4b16-8526-1d436ae1aaac"}}, "outputs": {"tabular_output": {"id": "5a15976bb40b122e", "src": "hda", "uuid": "2432a0ce-bc42-476f-92df-35774951b54d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:29:06", "plugin": "core", "name": "start_epoch", "raw_value": "1708669746.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:29:06", "plugin": "core", "name": "end_epoch", "raw_value": "1708669746.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "collection_column_join/0.0.3-2", "has_data": true, "data": {"tool_id": "collection_column_join", "tool_version": "0.0.3", "test_index": 2, "time_seconds": 28.314887762069702, "inputs": {"input_tabular": [{"src": "hda", "id": "227b23af134c5673"}, {"src": "hda", "id": "4e861cc1295c18e5"}, {"src": "hda", "id": "28afc92e8b91544a"}], "identifier_column": "1", "has_header": "1", "old_col_in_header": false, "fill_char": ".", "include_outputs": null}, "job": {"model_class": "Job", "id": "ae69512045358bea", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:27:45.860009", "create_time": "2024-02-23T06:27:35.633388", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/collection_column_join/collection_column_join/0.0.3", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-nlk9r", "command_line": "sh '/galaxy/server/database/jobs_directory/000/12/configs/tmpt1blgqcz'", "traceback": null, "params": {"identifier_column": "\"1\"", "has_header": "\"1\"", "old_col_in_header": "false", "fill_char": "\".\"", "include_outputs": null, "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"tabular\""}, "inputs": {"input_tabular3": {"id": "28afc92e8b91544a", "src": "hda", "uuid": "1465bdd9-3fcc-4482-9ffe-b68c863ca54a"}, "input_tabular2": {"id": "4e861cc1295c18e5", "src": "hda", "uuid": "5d176d62-9d37-45b1-b945-72859f52de78"}, "input_tabular1": {"id": "227b23af134c5673", "src": "hda", "uuid": "4b8c01aa-4770-43da-8634-dae22e24754c"}, "input_tabular": {"id": "227b23af134c5673", "src": "hda", "uuid": "4b8c01aa-4770-43da-8634-dae22e24754c"}}, "outputs": {"tabular_output": {"id": "ae69512045358bea", "src": "hda", "uuid": "2471fcad-4daf-4813-b9cd-498ddbbbf5a3"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:27:38", "plugin": "core", "name": "end_epoch", "raw_value": "1708669658.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:27:37", "plugin": "core", "name": "start_epoch", "raw_value": "1708669657.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "collection_column_join/0.0.3-2", "has_data": true, "data": {"tool_id": "collection_column_join", "tool_version": "0.0.3", "test_index": 2, "time_seconds": 29.495288848876953, "inputs": {"input_tabular": [{"src": "hda", "id": "681d66989089dd83"}, {"src": "hda", "id": "c9dbdbdbc895d954"}, {"src": "hda", "id": "044128a9d1c75081"}], "identifier_column": "1", "has_header": "1", "old_col_in_header": false, "fill_char": ".", "include_outputs": null}, "job": {"model_class": "Job", "id": "7a191a1d215a2104", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:29:44.876041", "create_time": "2024-02-23T06:29:34.029093", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/collection_column_join/collection_column_join/0.0.3", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-f547b", "command_line": "sh '/galaxy/server/database/jobs_directory/000/28/configs/tmpndgb96dh'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "include_outputs": null, "fill_char": "\".\"", "old_col_in_header": "false", "has_header": "\"1\"", "identifier_column": "\"1\""}, "inputs": {"input_tabular": {"id": "681d66989089dd83", "src": "hda", "uuid": "29fe284d-687d-441c-930a-c77138015f6c"}, "input_tabular1": {"id": "681d66989089dd83", "src": "hda", "uuid": "29fe284d-687d-441c-930a-c77138015f6c"}, "input_tabular2": {"id": "c9dbdbdbc895d954", "src": "hda", "uuid": "8ca2acea-4096-4f43-9923-01b73e51d93e"}, "input_tabular3": {"id": "044128a9d1c75081", "src": "hda", "uuid": "6d4c319a-5a4c-44ec-92e6-fb936ca03dc7"}}, "outputs": {"tabular_output": {"id": "7a191a1d215a2104", "src": "hda", "uuid": "11204f4b-7419-4e6f-aab1-1f4df7da4cbb"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:29:36", "plugin": "core", "name": "end_epoch", "raw_value": "1708669776.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:29:35", "plugin": "core", "name": "start_epoch", "raw_value": "1708669775.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "collection_column_join/0.0.3-3", "has_data": true, "data": {"tool_id": "collection_column_join", "tool_version": "0.0.3", "test_index": 3, "time_seconds": 30.733346939086914, "inputs": {"input_tabular": [{"src": "hda", "id": "be66199a889effeb"}, {"src": "hda", "id": "83f26304bb06b257"}, {"src": "hda", "id": "7a7a55c8ec5e5cf5"}], "identifier_column": "1", "has_header": "0", "old_col_in_header": false, "fill_char": ".", "include_outputs": null}, "job": {"model_class": "Job", "id": "69fcd12a122ed718", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:28:16.605972", "create_time": "2024-02-23T06:28:04.719201", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/collection_column_join/collection_column_join/0.0.3", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-f79pf", "command_line": "sh '/galaxy/server/database/jobs_directory/000/16/configs/tmph1vo89gu'", "traceback": null, "params": {"identifier_column": "\"1\"", "has_header": "\"0\"", "old_col_in_header": "false", "fill_char": "\".\"", "include_outputs": null, "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"tabular\""}, "inputs": {"input_tabular3": {"id": "7a7a55c8ec5e5cf5", "src": "hda", "uuid": "42032197-3f02-425b-8205-2c103b282e8d"}, "input_tabular2": {"id": "83f26304bb06b257", "src": "hda", "uuid": "5cc05653-b867-43b7-848c-043ff561afaa"}, "input_tabular1": {"id": "be66199a889effeb", "src": "hda", "uuid": "ee4c5a6c-443f-4c9e-abc9-04031608e29a"}, "input_tabular": {"id": "be66199a889effeb", "src": "hda", "uuid": "ee4c5a6c-443f-4c9e-abc9-04031608e29a"}}, "outputs": {"tabular_output": {"id": "69fcd12a122ed718", "src": "hda", "uuid": "26ca51f9-ebfa-48cd-918b-25ceb0b03cad"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:28:07", "plugin": "core", "name": "end_epoch", "raw_value": "1708669687.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:28:07", "plugin": "core", "name": "start_epoch", "raw_value": "1708669687.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "collection_column_join/0.0.3-3", "has_data": true, "data": {"tool_id": "collection_column_join", "tool_version": "0.0.3", "test_index": 3, "time_seconds": 29.57168436050415, "inputs": {"input_tabular": [{"src": "hda", "id": "327c5c007c18b26e"}, {"src": "hda", "id": "8dde6868a33ed10e"}, {"src": "hda", "id": "5965a5ed4d27b6d9"}], "identifier_column": "1", "has_header": "0", "old_col_in_header": false, "fill_char": ".", "include_outputs": null}, "job": {"model_class": "Job", "id": "0dffa246f48ffef4", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:30:14.650651", "create_time": "2024-02-23T06:30:03.996573", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/collection_column_join/collection_column_join/0.0.3", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-q2zmp", "command_line": "sh '/galaxy/server/database/jobs_directory/000/32/configs/tmpn4glgtyt'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "include_outputs": null, "fill_char": "\".\"", "old_col_in_header": "false", "has_header": "\"0\"", "identifier_column": "\"1\""}, "inputs": {"input_tabular": {"id": "327c5c007c18b26e", "src": "hda", "uuid": "2ddd5d83-9051-4ab4-a8d4-8036949c05dc"}, "input_tabular1": {"id": "327c5c007c18b26e", "src": "hda", "uuid": "2ddd5d83-9051-4ab4-a8d4-8036949c05dc"}, "input_tabular2": {"id": "8dde6868a33ed10e", "src": "hda", "uuid": "dbce6c22-295d-4e8c-9c13-b827553534bb"}, "input_tabular3": {"id": "5965a5ed4d27b6d9", "src": "hda", "uuid": "b488db96-3360-4df4-bfdd-b87978bfc65f"}}, "outputs": {"tabular_output": {"id": "0dffa246f48ffef4", "src": "hda", "uuid": "9d80f6f9-714b-4bcb-b77c-72a5efc9de3e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:30:06", "plugin": "core", "name": "end_epoch", "raw_value": "1708669806.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:30:05", "plugin": "core", "name": "start_epoch", "raw_value": "1708669805.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deeptools_plot_coverage/3.3.2.0.0-0", "has_data": true, "data": {"tool_id": "deeptools_plot_coverage", "tool_version": "3.3.2.0.0", "test_index": 0, "time_seconds": 128.1396472454071, "inputs": {"multibam_conditional|bamfiles": [{"src": "hda", "id": "0142f698db611d7b"}, {"src": "hda", "id": "0142f698db611d7b"}], "advancedOpt|plotTitle": "Test Title from Galaxy", "advancedOpt|showAdvancedOpt": "yes", "outRawCounts": true}, "job": {"model_class": "Job", "id": "a42e2f448e00a0e2", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:32:23.111749", "create_time": "2024-02-23T06:30:30.977061", "galaxy_version": "23.1", "command_version": "plotCoverage 3.3.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/deeptools_plot_coverage/deeptools_plot_coverage/3.3.2.0.0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-p9hg5", "command_line": "ln -s '/galaxy/server/database/objects/6/3/8/dataset_6384e56e-74cb-453b-be46-b287f29fbf7e.dat' './0.bam' && ln -s '/galaxy/server/database/objects/_metadata_files/e/8/3/metadata_e83c0f37-9eac-4e29-ae1c-e57ae8c3372e.dat' './0.bam.bai' && ln -s '/galaxy/server/database/objects/6/3/8/dataset_6384e56e-74cb-453b-be46-b287f29fbf7e.dat' './1.bam' && ln -s '/galaxy/server/database/objects/_metadata_files/e/8/3/metadata_e83c0f37-9eac-4e29-ae1c-e57ae8c3372e.dat' './1.bam.bai' &&    plotCoverage  --numberOfProcessors \"${GALAXY_SLOTS:-4}\"  --plotFile '/galaxy/server/database/objects/9/2/2/dataset_922dce1d-d18b-4ca0-b9e5-191ab246d2dc.dat' --bamfiles '0.bam' '1.bam' --labels 'bowtie2 test1.bam' 'bowtie2 test1.bam' --plotFileFormat 'png'  --outRawCounts '/galaxy/server/database/objects/2/c/2/dataset_2c2396fa-d9a4-4df5-aac5-d2363ab25b57.dat'    --numberOfSamples '100000'   --numberOfSamples 100000  --plotTitle 'Test Title from Galaxy'    --minMappingQuality '1'   --plotWidth '15.0' --plotHeight '5.0'", "traceback": null, "params": {"multibam_conditional": "{\"__current_case__\": 0, \"bamfiles\": {\"values\": [{\"id\": 33, \"src\": \"hda\"}, {\"id\": 33, \"src\": \"hda\"}]}, \"orderMatters\": \"No\"}", "custom_sample_labels_conditional": "{\"__current_case__\": 0, \"custom_labels_select\": \"No\"}", "BED": null, "coverageOpt": "{\"__current_case__\": 0, \"showCoverageOpt\": \"no\"}", "advancedOpt": "{\"__current_case__\": 1, \"blackListFileName\": null, \"centerReads\": false, \"doExtendCustom\": {\"__current_case__\": 0, \"doExtend\": \"no\"}, \"ignoreDuplicates\": false, \"maxFragmentLength\": \"0\", \"minFragmentLength\": \"0\", \"minMappingQuality\": \"1\", \"numberOfSamples\": \"100000\", \"plotHeight\": \"5.0\", \"plotTitle\": \"Test Title from Galaxy\", \"plotWidth\": \"15.0\", \"region\": \"\", \"samFlagExclude\": \"\", \"samFlagInclude\": \"\", \"showAdvancedOpt\": \"yes\", \"skipZeros\": false}", "outFileFormat": "\"png\"", "outRawCounts": "true", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"multibam_conditional|bamfiles2": {"id": "0142f698db611d7b", "src": "hda", "uuid": "6384e56e-74cb-453b-be46-b287f29fbf7e"}, "multibam_conditional|bamfiles1": {"id": "0142f698db611d7b", "src": "hda", "uuid": "6384e56e-74cb-453b-be46-b287f29fbf7e"}, "multibam_conditional|bamfiles": {"id": "0142f698db611d7b", "src": "hda", "uuid": "6384e56e-74cb-453b-be46-b287f29fbf7e"}}, "outputs": {"outFileName": {"id": "a42e2f448e00a0e2", "src": "hda", "uuid": "922dce1d-d18b-4ca0-b9e5-191ab246d2dc"}, "outFileRawCounts": {"id": "791bd04997b6ffe4", "src": "hda", "uuid": "2c2396fa-d9a4-4df5-aac5-d2363ab25b57"}, "outFileCoverageMetrics": {"id": "b8765af64768ee7f", "src": "hda", "uuid": "a59a284c-94bc-4a42-8d7e-e6549b78fd7b"}}, "output_collections": {}, "tool_stdout": "sample\tmean\tstd\tmin\t25%\t50%\t75%\tmax\nbowtie2 test1.bam\t0.50\t4.10\t0\t0.0\t0.0\t0.0\t35\t\nbowtie2 test1.bam\t0.50\t4.10\t0\t0.0\t0.0\t0.0\t35\t\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "sample\tmean\tstd\tmin\t25%\t50%\t75%\tmax\nbowtie2 test1.bam\t0.50\t4.10\t0\t0.0\t0.0\t0.0\t35\t\nbowtie2 test1.bam\t0.50\t4.10\t0\t0.0\t0.0\t0.0\t35\t\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:32:08", "plugin": "core", "name": "end_epoch", "raw_value": "1708669928.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:32:06", "plugin": "core", "name": "start_epoch", "raw_value": "1708669926.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "deeptools_plot_coverage/3.3.2.0.0-1", "has_data": true, "data": {"tool_id": "deeptools_plot_coverage", "tool_version": "3.3.2.0.0", "test_index": 1, "time_seconds": 26.00181245803833, "inputs": {"multibam_conditional|bamfiles": [{"src": "hda", "id": "410b926d6fb8d66d"}, {"src": "hda", "id": "410b926d6fb8d66d"}], "coverageOpt|thresholds_0|coverageThreshold": "20", "coverageOpt|thresholds_1|coverageThreshold": "10", "coverageOpt|thresholds_2|coverageThreshold": "5", "coverageOpt|thresholds_3|coverageThreshold": "0", "coverageOpt|showCoverageOpt": "yes", "advancedOpt|plotTitle": "Test Title from Galaxy", "advancedOpt|showAdvancedOpt": "yes"}, "job": {"model_class": "Job", "id": "b8765af64768ee7f", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:32:49.314634", "create_time": "2024-02-23T06:32:38.311311", "galaxy_version": "23.1", "command_version": "plotCoverage 3.3.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/deeptools_plot_coverage/deeptools_plot_coverage/3.3.2.0.0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-s9b4s", "command_line": "ln -s '/galaxy/server/database/objects/5/f/8/dataset_5f807f86-c7f8-4b3e-b3ec-9605200cf275.dat' './0.bam' && ln -s '/galaxy/server/database/objects/_metadata_files/1/1/a/metadata_11acae07-066c-4ac2-9537-7a9bcb6d3b44.dat' './0.bam.bai' && ln -s '/galaxy/server/database/objects/5/f/8/dataset_5f807f86-c7f8-4b3e-b3ec-9605200cf275.dat' './1.bam' && ln -s '/galaxy/server/database/objects/_metadata_files/1/1/a/metadata_11acae07-066c-4ac2-9537-7a9bcb6d3b44.dat' './1.bam.bai' &&    plotCoverage  --numberOfProcessors \"${GALAXY_SLOTS:-4}\"  --plotFile '/galaxy/server/database/objects/1/c/a/dataset_1ca7ee92-214c-43c3-8878-619ed62d756e.dat' --bamfiles '0.bam' '1.bam' --labels 'bowtie2 test1.bam' 'bowtie2 test1.bam' --plotFileFormat 'png'    --outCoverageMetrics '/galaxy/server/database/objects/3/7/b/dataset_37bf4fdf-9281-4940-ae68-0548204a6751.dat' -ct 20 -ct 10 -ct 5 -ct 0  --numberOfSamples '100000'   --numberOfSamples 100000  --plotTitle 'Test Title from Galaxy'    --minMappingQuality '1'   --plotWidth '15.0' --plotHeight '5.0'", "traceback": null, "params": {"multibam_conditional": "{\"__current_case__\": 0, \"bamfiles\": {\"values\": [{\"id\": 37, \"src\": \"hda\"}, {\"id\": 37, \"src\": \"hda\"}]}, \"orderMatters\": \"No\"}", "custom_sample_labels_conditional": "{\"__current_case__\": 0, \"custom_labels_select\": \"No\"}", "BED": null, "coverageOpt": "{\"__current_case__\": 1, \"outCoverageMetrics\": false, \"showCoverageOpt\": \"yes\", \"thresholds\": [{\"__index__\": 0, \"coverageThreshold\": \"20\"}, {\"__index__\": 1, \"coverageThreshold\": \"10\"}, {\"__index__\": 2, \"coverageThreshold\": \"5\"}, {\"__index__\": 3, \"coverageThreshold\": \"0\"}]}", "advancedOpt": "{\"__current_case__\": 1, \"blackListFileName\": null, \"centerReads\": false, \"doExtendCustom\": {\"__current_case__\": 0, \"doExtend\": \"no\"}, \"ignoreDuplicates\": false, \"maxFragmentLength\": \"0\", \"minFragmentLength\": \"0\", \"minMappingQuality\": \"1\", \"numberOfSamples\": \"100000\", \"plotHeight\": \"5.0\", \"plotTitle\": \"Test Title from Galaxy\", \"plotWidth\": \"15.0\", \"region\": \"\", \"samFlagExclude\": \"\", \"samFlagInclude\": \"\", \"showAdvancedOpt\": \"yes\", \"skipZeros\": false}", "outFileFormat": "\"png\"", "outRawCounts": "false", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"multibam_conditional|bamfiles2": {"id": "410b926d6fb8d66d", "src": "hda", "uuid": "5f807f86-c7f8-4b3e-b3ec-9605200cf275"}, "multibam_conditional|bamfiles1": {"id": "410b926d6fb8d66d", "src": "hda", "uuid": "5f807f86-c7f8-4b3e-b3ec-9605200cf275"}, "multibam_conditional|bamfiles": {"id": "410b926d6fb8d66d", "src": "hda", "uuid": "5f807f86-c7f8-4b3e-b3ec-9605200cf275"}}, "outputs": {"outFileName": {"id": "0a27f868415013c9", "src": "hda", "uuid": "1ca7ee92-214c-43c3-8878-619ed62d756e"}, "outFileCoverageMetrics": {"id": "b2cd774e03062289", "src": "hda", "uuid": "37bf4fdf-9281-4940-ae68-0548204a6751"}}, "output_collections": {}, "tool_stdout": "sample\tmean\tstd\tmin\t25%\t50%\t75%\tmax\nbowtie2 test1.bam\t0.50\t4.10\t0\t0.0\t0.0\t0.0\t35\t\nbowtie2 test1.bam\t0.50\t4.10\t0\t0.0\t0.0\t0.0\t35\t\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "sample\tmean\tstd\tmin\t25%\t50%\t75%\tmax\nbowtie2 test1.bam\t0.50\t4.10\t0\t0.0\t0.0\t0.0\t35\t\nbowtie2 test1.bam\t0.50\t4.10\t0\t0.0\t0.0\t0.0\t35\t\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:32:41", "plugin": "core", "name": "end_epoch", "raw_value": "1708669961.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:32:39", "plugin": "core", "name": "start_epoch", "raw_value": "1708669959.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "flye/2.6-0", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.6", "test_index": 0, "time_seconds": 109.65330195426941, "inputs": {"inputs": {"src": "hda", "id": "9382e65d2d0e1351"}, "mode": "--pacbio-raw", "g": "10000"}, "job": {"model_class": "Job", "id": "57b867ec879815de", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:42:13.583201", "create_time": "2024-02-23T06:40:39.954513", "galaxy_version": "23.1", "command_version": "2.6-release", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.6", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-ptq8k", "command_line": "ln -s '/galaxy/server/database/objects/a/e/1/dataset_ae1fe4fa-2d5b-42f2-85be-5ba377adba27.dat' ./input_0.fasta &&  flye --pacbio-raw ./input_0.fasta  -o out_dir -g '10000' -t ${GALAXY_SLOTS:-4} -i 1    2>&1", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "no_trestle": "false", "meta": "false", "plasmids": "false", "asm": "\"\"", "m": "\"\"", "i": "\"1\"", "g": "\"10000\"", "mode": "\"--pacbio-raw\""}, "inputs": {"inputs": {"id": "9382e65d2d0e1351", "src": "hda", "uuid": "ae1fe4fa-2d5b-42f2-85be-5ba377adba27"}, "inputs1": {"id": "9382e65d2d0e1351", "src": "hda", "uuid": "ae1fe4fa-2d5b-42f2-85be-5ba377adba27"}}, "outputs": {"consensus": {"id": "73339eb7ebfb4a6f", "src": "hda", "uuid": "bf20600d-bbe4-4013-8780-3066f48c71b9"}, "assembly_graph": {"id": "a2d13c6dbac85e60", "src": "hda", "uuid": "c5e7dda7-b3bf-4697-8e54-d7644c5b34a6"}, "assembly_gfa": {"id": "5a1e3240812258b4", "src": "hda", "uuid": "27f74dda-22dd-4892-a770-292627b08502"}, "assembly_info": {"id": "5b96885ed887d89e", "src": "hda", "uuid": "ee8bada5-8211-4798-a8da-afd3d962dfbe"}, "flye_log": {"id": "fd0078bb1db351fb", "src": "hda", "uuid": "f2c79ae6-5860-416c-b112-0ea2b31c45d6"}}, "output_collections": {}, "tool_stdout": "[2024-02-23 06:40:48] INFO: Starting Flye 2.6-release\n[2024-02-23 06:40:48] INFO: >>>STAGE: configure\n[2024-02-23 06:40:48] INFO: Configuring run\n[2024-02-23 06:40:48] INFO: Total read length: 1466260\n[2024-02-23 06:40:48] INFO: Input genome size: 10000\n[2024-02-23 06:40:48] INFO: Estimated coverage: 146\n[2024-02-23 06:40:48] INFO: Reads N50/N90: 9054 / 4697\n[2024-02-23 06:40:48] INFO: Minimum overlap set to 5000\n[2024-02-23 06:40:48] INFO: Selected k-mer size: 15\n[2024-02-23 06:40:48] INFO: >>>STAGE: assembly\n[2024-02-23 06:40:48] INFO: Assembling disjointigs\n[2024-02-23 06:40:48] INFO: Reading sequences\n[2024-02-23 06:40:48] INFO: Generating solid k-mer index\n[2024-02-23 06:41:10] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:41:10] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:41:10] INFO: Filling index table\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:41:14] INFO: Extending reads\n[2024-02-23 06:41:17] INFO: Overlap-based coverage: 25\n[2024-02-23 06:41:17] INFO: Median overlap divergence: 0.168952\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:41:17] INFO: Assembled 1 disjointigs\n[2024-02-23 06:41:17] INFO: Generating sequence\n10% 20% 40% 50% 70% 80% 100% \n[2024-02-23 06:41:17] INFO: >>>STAGE: consensus\n[2024-02-23 06:41:17] INFO: Running Minimap2\n[2024-02-23 06:41:17] INFO: Computing consensus\n[2024-02-23 06:41:18] INFO: Alignment error rate: 0.158711\n[2024-02-23 06:41:18] INFO: >>>STAGE: repeat\n[2024-02-23 06:41:18] INFO: Building and resolving repeat graph\n[2024-02-23 06:41:18] INFO: Reading sequences\n[2024-02-23 06:41:18] INFO: Building repeat graph\n50% 100% \n[2024-02-23 06:41:40] INFO: Median overlap divergence: 0\n[2024-02-23 06:41:40] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:42:02] INFO: Aligned read sequence: 1184568 / 1313105 (0.902112)\n[2024-02-23 06:42:02] INFO: Median overlap divergence: 0.0607255\n[2024-02-23 06:42:02] INFO: Mean edge coverage: 29\n[2024-02-23 06:42:02] INFO: Resolving repeats\n[2024-02-23 06:42:02] INFO: >>>STAGE: trestle\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a53e200000065'\n[2024-02-23 06:42:02] INFO: Simple unbridged repeats: 0\n[2024-02-23 06:42:02] INFO: Resolved: 0\n[2024-02-23 06:42:02] INFO: >>>STAGE: contigger\n[2024-02-23 06:42:02] INFO: Generating contigs\n[2024-02-23 06:42:02] INFO: Reading sequences\n[2024-02-23 06:42:02] INFO: Generated 1 contigs\n[2024-02-23 06:42:02] INFO: Added 0 scaffold connections\n[2024-02-23 06:42:02] INFO: >>>STAGE: polishing\n[2024-02-23 06:42:02] INFO: Polishing genome (1/1)\n[2024-02-23 06:42:02] INFO: Running minimap2\n[2024-02-23 06:42:02] INFO: Separating alignment into bubbles\n[2024-02-23 06:42:04] INFO: Alignment error rate: 0.101562\n[2024-02-23 06:42:04] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a53fd00000066'\n[2024-02-23 06:42:04] INFO: >>>STAGE: finalize\n[2024-02-23 06:42:04] INFO: Assembly statistics:\n\n\tTotal length:\t39948\n\tFragments:\t1\n\tFragments N50:\t39948\n\tLargest frg:\t39948\n\tScaffolds:\t0\n\tMean coverage:\t28\n\n[2024-02-23 06:42:04] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/82/working/out_dir/assembly.fasta\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[2024-02-23 06:40:48] INFO: Starting Flye 2.6-release\n[2024-02-23 06:40:48] INFO: >>>STAGE: configure\n[2024-02-23 06:40:48] INFO: Configuring run\n[2024-02-23 06:40:48] INFO: Total read length: 1466260\n[2024-02-23 06:40:48] INFO: Input genome size: 10000\n[2024-02-23 06:40:48] INFO: Estimated coverage: 146\n[2024-02-23 06:40:48] INFO: Reads N50/N90: 9054 / 4697\n[2024-02-23 06:40:48] INFO: Minimum overlap set to 5000\n[2024-02-23 06:40:48] INFO: Selected k-mer size: 15\n[2024-02-23 06:40:48] INFO: >>>STAGE: assembly\n[2024-02-23 06:40:48] INFO: Assembling disjointigs\n[2024-02-23 06:40:48] INFO: Reading sequences\n[2024-02-23 06:40:48] INFO: Generating solid k-mer index\n[2024-02-23 06:41:10] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:41:10] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:41:10] INFO: Filling index table\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:41:14] INFO: Extending reads\n[2024-02-23 06:41:17] INFO: Overlap-based coverage: 25\n[2024-02-23 06:41:17] INFO: Median overlap divergence: 0.168952\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:41:17] INFO: Assembled 1 disjointigs\n[2024-02-23 06:41:17] INFO: Generating sequence\n10% 20% 40% 50% 70% 80% 100% \n[2024-02-23 06:41:17] INFO: >>>STAGE: consensus\n[2024-02-23 06:41:17] INFO: Running Minimap2\n[2024-02-23 06:41:17] INFO: Computing consensus\n[2024-02-23 06:41:18] INFO: Alignment error rate: 0.158711\n[2024-02-23 06:41:18] INFO: >>>STAGE: repeat\n[2024-02-23 06:41:18] INFO: Building and resolving repeat graph\n[2024-02-23 06:41:18] INFO: Reading sequences\n[2024-02-23 06:41:18] INFO: Building repeat graph\n50% 100% \n[2024-02-23 06:41:40] INFO: Median overlap divergence: 0\n[2024-02-23 06:41:40] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:42:02] INFO: Aligned read sequence: 1184568 / 1313105 (0.902112)\n[2024-02-23 06:42:02] INFO: Median overlap divergence: 0.0607255\n[2024-02-23 06:42:02] INFO: Mean edge coverage: 29\n[2024-02-23 06:42:02] INFO: Resolving repeats\n[2024-02-23 06:42:02] INFO: >>>STAGE: trestle\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a53e200000065'\n[2024-02-23 06:42:02] INFO: Simple unbridged repeats: 0\n[2024-02-23 06:42:02] INFO: Resolved: 0\n[2024-02-23 06:42:02] INFO: >>>STAGE: contigger\n[2024-02-23 06:42:02] INFO: Generating contigs\n[2024-02-23 06:42:02] INFO: Reading sequences\n[2024-02-23 06:42:02] INFO: Generated 1 contigs\n[2024-02-23 06:42:02] INFO: Added 0 scaffold connections\n[2024-02-23 06:42:02] INFO: >>>STAGE: polishing\n[2024-02-23 06:42:02] INFO: Polishing genome (1/1)\n[2024-02-23 06:42:02] INFO: Running minimap2\n[2024-02-23 06:42:02] INFO: Separating alignment into bubbles\n[2024-02-23 06:42:04] INFO: Alignment error rate: 0.101562\n[2024-02-23 06:42:04] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a53fd00000066'\n[2024-02-23 06:42:04] INFO: >>>STAGE: finalize\n[2024-02-23 06:42:04] INFO: Assembly statistics:\n\n\tTotal length:\t39948\n\tFragments:\t1\n\tFragments N50:\t39948\n\tLargest frg:\t39948\n\tScaffolds:\t0\n\tMean coverage:\t28\n\n[2024-02-23 06:42:04] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/82/working/out_dir/assembly.fasta\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "76.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:42:04", "plugin": "core", "name": "end_epoch", "raw_value": "1708670524.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:40:48", "plugin": "core", "name": "start_epoch", "raw_value": "1708670448.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "flye/2.6-1", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.6", "test_index": 1, "time_seconds": 101.7152886390686, "inputs": {"inputs": {"src": "hda", "id": "18e6975e93f3a413"}, "mode": "--nano-raw", "g": "10000"}, "job": {"model_class": "Job", "id": "55bdb0bffa9a9733", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:43:55.261933", "create_time": "2024-02-23T06:42:29.514646", "galaxy_version": "23.1", "command_version": "2.6-release", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.6", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-7hm5f", "command_line": "ln -s '/galaxy/server/database/objects/f/1/2/dataset_f12a5249-1ed9-417c-a920-1185fad7a947.dat' ./input_0.fasta &&  flye --nano-raw ./input_0.fasta  -o out_dir -g '10000' -t ${GALAXY_SLOTS:-4} -i 1    2>&1", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "no_trestle": "false", "meta": "false", "plasmids": "false", "asm": "\"\"", "m": "\"\"", "i": "\"1\"", "g": "\"10000\"", "mode": "\"--nano-raw\""}, "inputs": {"inputs": {"id": "18e6975e93f3a413", "src": "hda", "uuid": "f12a5249-1ed9-417c-a920-1185fad7a947"}, "inputs1": {"id": "18e6975e93f3a413", "src": "hda", "uuid": "f12a5249-1ed9-417c-a920-1185fad7a947"}}, "outputs": {"assembly_graph": {"id": "c882e50077ccd589", "src": "hda", "uuid": "921f24c6-f658-401f-92bc-3f9df23ec691"}, "consensus": {"id": "9bbcbb89955b23a8", "src": "hda", "uuid": "4cbbb8d5-c842-474a-ab87-7b4333b2a683"}, "assembly_gfa": {"id": "430f46c4dae4daa0", "src": "hda", "uuid": "40522ae9-5107-43cf-9bb0-1f552ef3b0ef"}, "assembly_info": {"id": "6ab0bad77d26ba43", "src": "hda", "uuid": "76a2f6bc-cddf-4296-b53a-4b957717020d"}, "flye_log": {"id": "3092e1b9c010f869", "src": "hda", "uuid": "4b579890-f3a0-4d15-9b76-5cd250a4c0b6"}}, "output_collections": {}, "tool_stdout": "[2024-02-23 06:42:31] INFO: Starting Flye 2.6-release\n[2024-02-23 06:42:31] INFO: >>>STAGE: configure\n[2024-02-23 06:42:31] INFO: Configuring run\n[2024-02-23 06:42:31] INFO: Total read length: 1466260\n[2024-02-23 06:42:31] INFO: Input genome size: 10000\n[2024-02-23 06:42:31] INFO: Estimated coverage: 146\n[2024-02-23 06:42:31] INFO: Reads N50/N90: 9054 / 4697\n[2024-02-23 06:42:31] INFO: Minimum overlap set to 5000\n[2024-02-23 06:42:31] INFO: Selected k-mer size: 15\n[2024-02-23 06:42:31] INFO: >>>STAGE: assembly\n[2024-02-23 06:42:31] INFO: Assembling disjointigs\n[2024-02-23 06:42:31] INFO: Reading sequences\n[2024-02-23 06:42:31] INFO: Generating solid k-mer index\n[2024-02-23 06:42:53] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:42:53] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:42:53] INFO: Filling index table\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:42:56] INFO: Extending reads\n[2024-02-23 06:42:59] INFO: Overlap-based coverage: 25\n[2024-02-23 06:42:59] INFO: Median overlap divergence: 0.168973\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:42:59] INFO: Assembled 1 disjointigs\n[2024-02-23 06:42:59] INFO: Generating sequence\n10% 20% 40% 50% 70% 80% 100% \n[2024-02-23 06:42:59] INFO: >>>STAGE: consensus\n[2024-02-23 06:43:00] INFO: Running Minimap2\n[2024-02-23 06:43:00] INFO: Computing consensus\n[2024-02-23 06:43:01] INFO: Alignment error rate: 0.156815\n[2024-02-23 06:43:01] INFO: >>>STAGE: repeat\n[2024-02-23 06:43:01] INFO: Building and resolving repeat graph\n[2024-02-23 06:43:01] INFO: Reading sequences\n[2024-02-23 06:43:01] INFO: Building repeat graph\n50% 100% \n[2024-02-23 06:43:22] INFO: Median overlap divergence: 0\n[2024-02-23 06:43:22] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:43:44] INFO: Aligned read sequence: 1184563 / 1313105 (0.902108)\n[2024-02-23 06:43:44] INFO: Median overlap divergence: 0.0610287\n[2024-02-23 06:43:44] INFO: Mean edge coverage: 29\n[2024-02-23 06:43:44] INFO: Resolving repeats\n[2024-02-23 06:43:44] INFO: >>>STAGE: trestle\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a545100000068'\n[2024-02-23 06:43:44] INFO: Simple unbridged repeats: 0\n[2024-02-23 06:43:44] INFO: Resolved: 0\n[2024-02-23 06:43:44] INFO: >>>STAGE: contigger\n[2024-02-23 06:43:44] INFO: Generating contigs\n[2024-02-23 06:43:44] INFO: Reading sequences\n[2024-02-23 06:43:44] INFO: Generated 1 contigs\n[2024-02-23 06:43:44] INFO: Added 0 scaffold connections\n[2024-02-23 06:43:45] INFO: >>>STAGE: polishing\n[2024-02-23 06:43:45] INFO: Polishing genome (1/1)\n[2024-02-23 06:43:45] INFO: Running minimap2\n[2024-02-23 06:43:45] INFO: Separating alignment into bubbles\n[2024-02-23 06:43:46] INFO: Alignment error rate: 0.101979\n[2024-02-23 06:43:46] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a546800000069'\n[2024-02-23 06:43:47] INFO: >>>STAGE: finalize\n[2024-02-23 06:43:47] INFO: Assembly statistics:\n\n\tTotal length:\t40422\n\tFragments:\t1\n\tFragments N50:\t40422\n\tLargest frg:\t40422\n\tScaffolds:\t0\n\tMean coverage:\t27\n\n[2024-02-23 06:43:47] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/84/working/out_dir/assembly.fasta\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[2024-02-23 06:42:31] INFO: Starting Flye 2.6-release\n[2024-02-23 06:42:31] INFO: >>>STAGE: configure\n[2024-02-23 06:42:31] INFO: Configuring run\n[2024-02-23 06:42:31] INFO: Total read length: 1466260\n[2024-02-23 06:42:31] INFO: Input genome size: 10000\n[2024-02-23 06:42:31] INFO: Estimated coverage: 146\n[2024-02-23 06:42:31] INFO: Reads N50/N90: 9054 / 4697\n[2024-02-23 06:42:31] INFO: Minimum overlap set to 5000\n[2024-02-23 06:42:31] INFO: Selected k-mer size: 15\n[2024-02-23 06:42:31] INFO: >>>STAGE: assembly\n[2024-02-23 06:42:31] INFO: Assembling disjointigs\n[2024-02-23 06:42:31] INFO: Reading sequences\n[2024-02-23 06:42:31] INFO: Generating solid k-mer index\n[2024-02-23 06:42:53] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:42:53] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:42:53] INFO: Filling index table\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:42:56] INFO: Extending reads\n[2024-02-23 06:42:59] INFO: Overlap-based coverage: 25\n[2024-02-23 06:42:59] INFO: Median overlap divergence: 0.168973\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:42:59] INFO: Assembled 1 disjointigs\n[2024-02-23 06:42:59] INFO: Generating sequence\n10% 20% 40% 50% 70% 80% 100% \n[2024-02-23 06:42:59] INFO: >>>STAGE: consensus\n[2024-02-23 06:43:00] INFO: Running Minimap2\n[2024-02-23 06:43:00] INFO: Computing consensus\n[2024-02-23 06:43:01] INFO: Alignment error rate: 0.156815\n[2024-02-23 06:43:01] INFO: >>>STAGE: repeat\n[2024-02-23 06:43:01] INFO: Building and resolving repeat graph\n[2024-02-23 06:43:01] INFO: Reading sequences\n[2024-02-23 06:43:01] INFO: Building repeat graph\n50% 100% \n[2024-02-23 06:43:22] INFO: Median overlap divergence: 0\n[2024-02-23 06:43:22] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:43:44] INFO: Aligned read sequence: 1184563 / 1313105 (0.902108)\n[2024-02-23 06:43:44] INFO: Median overlap divergence: 0.0610287\n[2024-02-23 06:43:44] INFO: Mean edge coverage: 29\n[2024-02-23 06:43:44] INFO: Resolving repeats\n[2024-02-23 06:43:44] INFO: >>>STAGE: trestle\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a545100000068'\n[2024-02-23 06:43:44] INFO: Simple unbridged repeats: 0\n[2024-02-23 06:43:44] INFO: Resolved: 0\n[2024-02-23 06:43:44] INFO: >>>STAGE: contigger\n[2024-02-23 06:43:44] INFO: Generating contigs\n[2024-02-23 06:43:44] INFO: Reading sequences\n[2024-02-23 06:43:44] INFO: Generated 1 contigs\n[2024-02-23 06:43:44] INFO: Added 0 scaffold connections\n[2024-02-23 06:43:45] INFO: >>>STAGE: polishing\n[2024-02-23 06:43:45] INFO: Polishing genome (1/1)\n[2024-02-23 06:43:45] INFO: Running minimap2\n[2024-02-23 06:43:45] INFO: Separating alignment into bubbles\n[2024-02-23 06:43:46] INFO: Alignment error rate: 0.101979\n[2024-02-23 06:43:46] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a546800000069'\n[2024-02-23 06:43:47] INFO: >>>STAGE: finalize\n[2024-02-23 06:43:47] INFO: Assembly statistics:\n\n\tTotal length:\t40422\n\tFragments:\t1\n\tFragments N50:\t40422\n\tLargest frg:\t40422\n\tScaffolds:\t0\n\tMean coverage:\t27\n\n[2024-02-23 06:43:47] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/84/working/out_dir/assembly.fasta\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "76.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:43:47", "plugin": "core", "name": "end_epoch", "raw_value": "1708670627.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:42:31", "plugin": "core", "name": "start_epoch", "raw_value": "1708670551.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "flye/2.6-2", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.6", "test_index": 2, "time_seconds": 102.69609594345093, "inputs": {"inputs": {"src": "hda", "id": "5177e684e27bddf7"}, "mode": "--nano-corr", "g": "10000", "i": "2", "asm": "40"}, "job": {"model_class": "Job", "id": "8ae27138ebba0b77", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:45:37.976976", "create_time": "2024-02-23T06:44:12.544615", "galaxy_version": "23.1", "command_version": "2.6-release", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.6", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-5kfxs", "command_line": "ln -s '/galaxy/server/database/objects/8/5/0/dataset_85056000-c659-4a42-9fef-5194e7515764.dat' ./input_0.fasta &&  flye --nano-corr ./input_0.fasta  -o out_dir -g '10000' -t ${GALAXY_SLOTS:-4} -i 2 --asm-coverage '40'    2>&1", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "no_trestle": "false", "meta": "false", "plasmids": "false", "asm": "\"40\"", "m": "\"\"", "i": "\"2\"", "g": "\"10000\"", "mode": "\"--nano-corr\""}, "inputs": {"inputs": {"id": "5177e684e27bddf7", "src": "hda", "uuid": "85056000-c659-4a42-9fef-5194e7515764"}, "inputs1": {"id": "5177e684e27bddf7", "src": "hda", "uuid": "85056000-c659-4a42-9fef-5194e7515764"}}, "outputs": {"consensus": {"id": "542468b633d40bba", "src": "hda", "uuid": "004460bc-143b-403e-ae72-3e313799978d"}, "assembly_graph": {"id": "836bf0c26916464e", "src": "hda", "uuid": "fbcfcd7b-4476-4f0b-8235-db20fd8c99d2"}, "assembly_gfa": {"id": "7e4c2c5c0bed4fa3", "src": "hda", "uuid": "bd1d9e57-765f-4b42-bd70-4246cc8e6e42"}, "assembly_info": {"id": "72bb733d8c4e816d", "src": "hda", "uuid": "ca2b178e-ada6-438b-a0a0-099ecaa7da1b"}, "flye_log": {"id": "56e89a112de66c93", "src": "hda", "uuid": "9622cafb-98f9-4aaa-9536-d8751b7e40c4"}}, "output_collections": {}, "tool_stdout": "[2024-02-23 06:44:15] INFO: Starting Flye 2.6-release\n[2024-02-23 06:44:15] INFO: >>>STAGE: configure\n[2024-02-23 06:44:15] INFO: Configuring run\n[2024-02-23 06:44:15] INFO: Total read length: 1466260\n[2024-02-23 06:44:15] INFO: Input genome size: 10000\n[2024-02-23 06:44:15] INFO: Estimated coverage: 146\n[2024-02-23 06:44:15] INFO: Reads N50/N90: 9054 / 4697\n[2024-02-23 06:44:15] INFO: Minimum overlap set to 5000\n[2024-02-23 06:44:15] INFO: Selected k-mer size: 17\n[2024-02-23 06:44:15] INFO: Using longest 40x reads for contig assembly\n[2024-02-23 06:44:15] INFO: >>>STAGE: assembly\n[2024-02-23 06:44:15] INFO: Assembling disjointigs\n[2024-02-23 06:44:15] INFO: Reading sequences\n[2024-02-23 06:44:15] INFO: Generating solid k-mer index\n[2024-02-23 06:44:36] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:44:36] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:44:36] INFO: Filling index table\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:44:39] INFO: Extending reads\n[2024-02-23 06:44:40] INFO: Overlap-based coverage: 3\n[2024-02-23 06:44:40] INFO: Median overlap divergence: 0.173468\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:44:40] INFO: Assembled 1 disjointigs\n[2024-02-23 06:44:40] INFO: Generating sequence\n10% 20% 40% 50% 70% 80% 100% \n[2024-02-23 06:44:40] INFO: >>>STAGE: consensus\n[2024-02-23 06:44:40] INFO: Running Minimap2\n[2024-02-23 06:44:40] INFO: Computing consensus\n[2024-02-23 06:44:41] INFO: Alignment error rate: 0.146313\n[2024-02-23 06:44:41] INFO: >>>STAGE: repeat\n[2024-02-23 06:44:41] INFO: Building and resolving repeat graph\n[2024-02-23 06:44:41] INFO: Reading sequences\n[2024-02-23 06:44:41] INFO: Building repeat graph\n50% 100% \n[2024-02-23 06:45:03] INFO: Median overlap divergence: 0\n[2024-02-23 06:45:03] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:45:25] INFO: Aligned read sequence: 1174263 / 1313105 (0.894264)\n[2024-02-23 06:45:25] INFO: Median overlap divergence: 0.0589391\n[2024-02-23 06:45:25] INFO: Mean edge coverage: 29\n[2024-02-23 06:45:25] INFO: Resolving repeats\n[2024-02-23 06:45:25] INFO: >>>STAGE: contigger\n[2024-02-23 06:45:25] INFO: Generating contigs\n[2024-02-23 06:45:25] INFO: Reading sequences\n[2024-02-23 06:45:25] INFO: Generated 1 contigs\n[2024-02-23 06:45:25] INFO: Added 0 scaffold connections\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a54bf0000006b'\n[2024-02-23 06:45:25] INFO: >>>STAGE: polishing\n[2024-02-23 06:45:25] INFO: Polishing genome (1/2)\n[2024-02-23 06:45:25] INFO: Running minimap2\n[2024-02-23 06:45:25] INFO: Separating alignment into bubbles\n[2024-02-23 06:45:26] INFO: Alignment error rate: 0.099017\n[2024-02-23 06:45:26] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a54d00000006c'\n[2024-02-23 06:45:27] INFO: Polishing genome (2/2)\n[2024-02-23 06:45:27] INFO: Running minimap2\n[2024-02-23 06:45:27] INFO: Separating alignment into bubbles\n[2024-02-23 06:45:28] INFO: Alignment error rate: 0.094400\n[2024-02-23 06:45:28] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:45:29] INFO: >>>STAGE: finalize\n[2024-02-23 06:45:29] INFO: Assembly statistics:\n\n\tTotal length:\t40414\n\tFragments:\t1\n\tFragments N50:\t40414\n\tLargest frg:\t40414\n\tScaffolds:\t0\n\tMean coverage:\t27\n\n[2024-02-23 06:45:29] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/86/working/out_dir/assembly.fasta\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a54d20000006e'\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[2024-02-23 06:44:15] INFO: Starting Flye 2.6-release\n[2024-02-23 06:44:15] INFO: >>>STAGE: configure\n[2024-02-23 06:44:15] INFO: Configuring run\n[2024-02-23 06:44:15] INFO: Total read length: 1466260\n[2024-02-23 06:44:15] INFO: Input genome size: 10000\n[2024-02-23 06:44:15] INFO: Estimated coverage: 146\n[2024-02-23 06:44:15] INFO: Reads N50/N90: 9054 / 4697\n[2024-02-23 06:44:15] INFO: Minimum overlap set to 5000\n[2024-02-23 06:44:15] INFO: Selected k-mer size: 17\n[2024-02-23 06:44:15] INFO: Using longest 40x reads for contig assembly\n[2024-02-23 06:44:15] INFO: >>>STAGE: assembly\n[2024-02-23 06:44:15] INFO: Assembling disjointigs\n[2024-02-23 06:44:15] INFO: Reading sequences\n[2024-02-23 06:44:15] INFO: Generating solid k-mer index\n[2024-02-23 06:44:36] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:44:36] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:44:36] INFO: Filling index table\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:44:39] INFO: Extending reads\n[2024-02-23 06:44:40] INFO: Overlap-based coverage: 3\n[2024-02-23 06:44:40] INFO: Median overlap divergence: 0.173468\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:44:40] INFO: Assembled 1 disjointigs\n[2024-02-23 06:44:40] INFO: Generating sequence\n10% 20% 40% 50% 70% 80% 100% \n[2024-02-23 06:44:40] INFO: >>>STAGE: consensus\n[2024-02-23 06:44:40] INFO: Running Minimap2\n[2024-02-23 06:44:40] INFO: Computing consensus\n[2024-02-23 06:44:41] INFO: Alignment error rate: 0.146313\n[2024-02-23 06:44:41] INFO: >>>STAGE: repeat\n[2024-02-23 06:44:41] INFO: Building and resolving repeat graph\n[2024-02-23 06:44:41] INFO: Reading sequences\n[2024-02-23 06:44:41] INFO: Building repeat graph\n50% 100% \n[2024-02-23 06:45:03] INFO: Median overlap divergence: 0\n[2024-02-23 06:45:03] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:45:25] INFO: Aligned read sequence: 1174263 / 1313105 (0.894264)\n[2024-02-23 06:45:25] INFO: Median overlap divergence: 0.0589391\n[2024-02-23 06:45:25] INFO: Mean edge coverage: 29\n[2024-02-23 06:45:25] INFO: Resolving repeats\n[2024-02-23 06:45:25] INFO: >>>STAGE: contigger\n[2024-02-23 06:45:25] INFO: Generating contigs\n[2024-02-23 06:45:25] INFO: Reading sequences\n[2024-02-23 06:45:25] INFO: Generated 1 contigs\n[2024-02-23 06:45:25] INFO: Added 0 scaffold connections\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a54bf0000006b'\n[2024-02-23 06:45:25] INFO: >>>STAGE: polishing\n[2024-02-23 06:45:25] INFO: Polishing genome (1/2)\n[2024-02-23 06:45:25] INFO: Running minimap2\n[2024-02-23 06:45:25] INFO: Separating alignment into bubbles\n[2024-02-23 06:45:26] INFO: Alignment error rate: 0.099017\n[2024-02-23 06:45:26] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a54d00000006c'\n[2024-02-23 06:45:27] INFO: Polishing genome (2/2)\n[2024-02-23 06:45:27] INFO: Running minimap2\n[2024-02-23 06:45:27] INFO: Separating alignment into bubbles\n[2024-02-23 06:45:28] INFO: Alignment error rate: 0.094400\n[2024-02-23 06:45:28] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:45:29] INFO: >>>STAGE: finalize\n[2024-02-23 06:45:29] INFO: Assembly statistics:\n\n\tTotal length:\t40414\n\tFragments:\t1\n\tFragments N50:\t40414\n\tLargest frg:\t40414\n\tScaffolds:\t0\n\tMean coverage:\t27\n\n[2024-02-23 06:45:29] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/86/working/out_dir/assembly.fasta\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a54d20000006e'\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "75.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:45:29", "plugin": "core", "name": "end_epoch", "raw_value": "1708670729.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:44:14", "plugin": "core", "name": "start_epoch", "raw_value": "1708670654.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "flye/2.6-3", "has_data": true, "data": {"tool_id": "flye", "tool_version": "2.6", "test_index": 3, "time_seconds": 104.73285675048828, "inputs": {"inputs": {"src": "hda", "id": "da72e20b67f4caf1"}, "mode": "--pacbio-raw", "g": "10000", "i": "1", "plasmids": true, "meta": true}, "job": {"model_class": "Job", "id": "bf9d9387a5360d87", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:47:22.744602", "create_time": "2024-02-23T06:45:55.290819", "galaxy_version": "23.1", "command_version": "2.6-release", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/flye/flye/2.6", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-mtzwt", "command_line": "ln -s '/galaxy/server/database/objects/8/1/b/dataset_81bf467c-966b-4bf8-8199-ec101a62f20c.dat' ./input_0.fasta &&  flye --pacbio-raw ./input_0.fasta  -o out_dir -g '10000' -t ${GALAXY_SLOTS:-4} -i 1 --plasmids --meta  2>&1", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "no_trestle": "false", "meta": "true", "plasmids": "true", "asm": "\"\"", "m": "\"\"", "i": "\"1\"", "g": "\"10000\"", "mode": "\"--pacbio-raw\""}, "inputs": {"inputs": {"id": "da72e20b67f4caf1", "src": "hda", "uuid": "81bf467c-966b-4bf8-8199-ec101a62f20c"}, "inputs1": {"id": "da72e20b67f4caf1", "src": "hda", "uuid": "81bf467c-966b-4bf8-8199-ec101a62f20c"}}, "outputs": {"consensus": {"id": "b596af48cfac254b", "src": "hda", "uuid": "93e476c1-870b-4ffe-a088-ca66a8c609d7"}, "assembly_graph": {"id": "67524b5a7cf88857", "src": "hda", "uuid": "77699631-374f-45c9-a32d-8bf961517265"}, "assembly_gfa": {"id": "de81500736dbfccb", "src": "hda", "uuid": "f15cc8bc-9c61-4fdd-85ef-ba7e1f36f3d1"}, "assembly_info": {"id": "a206c9e02f54a3b3", "src": "hda", "uuid": "61649134-f9ba-445a-825c-05a31588b30e"}, "flye_log": {"id": "4bbbeb7ba3e90bde", "src": "hda", "uuid": "5bae5188-5650-425e-9d4d-b7f0088e7fee"}}, "output_collections": {}, "tool_stdout": "[2024-02-23 06:45:57] INFO: Starting Flye 2.6-release\n[2024-02-23 06:45:57] INFO: >>>STAGE: configure\n[2024-02-23 06:45:57] INFO: Configuring run\n[2024-02-23 06:45:57] INFO: Total read length: 1466260\n[2024-02-23 06:45:57] INFO: Input genome size: 10000\n[2024-02-23 06:45:57] INFO: Estimated coverage: 146\n[2024-02-23 06:45:57] INFO: Reads N50/N90: 9054 / 4697\n[2024-02-23 06:45:57] INFO: Minimum overlap set to 5000\n[2024-02-23 06:45:57] INFO: Selected k-mer size: 15\n[2024-02-23 06:45:57] INFO: >>>STAGE: assembly\n[2024-02-23 06:45:57] INFO: Assembling disjointigs\n[2024-02-23 06:45:57] INFO: Reading sequences\n[2024-02-23 06:45:57] INFO: Generating solid k-mer index\n[2024-02-23 06:46:19] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:46:19] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:46:19] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:46:19] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:46:22] INFO: Extending reads\n[2024-02-23 06:46:25] INFO: Overlap-based coverage: 24\n[2024-02-23 06:46:25] INFO: Median overlap divergence: 0.184447\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:46:25] INFO: Assembled 1 disjointigs\n[2024-02-23 06:46:25] INFO: Generating sequence\n10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2024-02-23 06:46:26] INFO: >>>STAGE: consensus\n[2024-02-23 06:46:26] INFO: Running Minimap2\n[2024-02-23 06:46:26] INFO: Computing consensus\n[2024-02-23 06:46:27] INFO: Alignment error rate: 0.182990\n[2024-02-23 06:46:27] INFO: >>>STAGE: repeat\n[2024-02-23 06:46:27] INFO: Building and resolving repeat graph\n[2024-02-23 06:46:27] INFO: Reading sequences\n[2024-02-23 06:46:27] INFO: Building repeat graph\n50% 100% \n[2024-02-23 06:46:49] INFO: Median overlap divergence: 0\n[2024-02-23 06:46:49] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:47:11] INFO: Aligned read sequence: 1158758 / 1313105 (0.882456)\n[2024-02-23 06:47:11] INFO: Median overlap divergence: 0.0639983\n[2024-02-23 06:47:11] INFO: Mean edge coverage: 32\n[2024-02-23 06:47:11] INFO: Resolving repeats\n[2024-02-23 06:47:11] INFO: >>>STAGE: plasmids\n[2024-02-23 06:47:11] INFO: Recovering short unassembled sequences\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a552800000070'\n[2024-02-23 06:47:11] INFO: Added 0 extra contigs\n[2024-02-23 06:47:11] INFO: >>>STAGE: contigger\n[2024-02-23 06:47:11] INFO: Generating contigs\n[2024-02-23 06:47:11] INFO: Reading sequences\n[2024-02-23 06:47:11] INFO: Generated 1 contigs\n[2024-02-23 06:47:11] INFO: Added 0 scaffold connections\n[2024-02-23 06:47:11] INFO: >>>STAGE: polishing\n[2024-02-23 06:47:11] INFO: Polishing genome (1/1)\n[2024-02-23 06:47:11] INFO: Running minimap2\n[2024-02-23 06:47:12] INFO: Separating alignment into bubbles\n[2024-02-23 06:47:13] INFO: Alignment error rate: 0.115118\n[2024-02-23 06:47:13] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a553800000071'\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a554400000072'\n[2024-02-23 06:47:14] INFO: >>>STAGE: finalize\n[2024-02-23 06:47:14] INFO: Assembly statistics:\n\n\tTotal length:\t35687\n\tFragments:\t1\n\tFragments N50:\t35687\n\tLargest frg:\t35687\n\tScaffolds:\t0\n\tMean coverage:\t35\n\n[2024-02-23 06:47:14] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/88/working/out_dir/assembly.fasta\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[2024-02-23 06:45:57] INFO: Starting Flye 2.6-release\n[2024-02-23 06:45:57] INFO: >>>STAGE: configure\n[2024-02-23 06:45:57] INFO: Configuring run\n[2024-02-23 06:45:57] INFO: Total read length: 1466260\n[2024-02-23 06:45:57] INFO: Input genome size: 10000\n[2024-02-23 06:45:57] INFO: Estimated coverage: 146\n[2024-02-23 06:45:57] INFO: Reads N50/N90: 9054 / 4697\n[2024-02-23 06:45:57] INFO: Minimum overlap set to 5000\n[2024-02-23 06:45:57] INFO: Selected k-mer size: 15\n[2024-02-23 06:45:57] INFO: >>>STAGE: assembly\n[2024-02-23 06:45:57] INFO: Assembling disjointigs\n[2024-02-23 06:45:57] INFO: Reading sequences\n[2024-02-23 06:45:57] INFO: Generating solid k-mer index\n[2024-02-23 06:46:19] INFO: Counting k-mers (1/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:46:19] INFO: Counting k-mers (2/2):\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:46:19] INFO: Filling index table (1/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:46:19] INFO: Filling index table (2/2)\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:46:22] INFO: Extending reads\n[2024-02-23 06:46:25] INFO: Overlap-based coverage: 24\n[2024-02-23 06:46:25] INFO: Median overlap divergence: 0.184447\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:46:25] INFO: Assembled 1 disjointigs\n[2024-02-23 06:46:25] INFO: Generating sequence\n10% 20% 30% 40% 50% 60% 70% 80% 100% \n[2024-02-23 06:46:26] INFO: >>>STAGE: consensus\n[2024-02-23 06:46:26] INFO: Running Minimap2\n[2024-02-23 06:46:26] INFO: Computing consensus\n[2024-02-23 06:46:27] INFO: Alignment error rate: 0.182990\n[2024-02-23 06:46:27] INFO: >>>STAGE: repeat\n[2024-02-23 06:46:27] INFO: Building and resolving repeat graph\n[2024-02-23 06:46:27] INFO: Reading sequences\n[2024-02-23 06:46:27] INFO: Building repeat graph\n50% 100% \n[2024-02-23 06:46:49] INFO: Median overlap divergence: 0\n[2024-02-23 06:46:49] INFO: Aligning reads to the graph\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \n[2024-02-23 06:47:11] INFO: Aligned read sequence: 1158758 / 1313105 (0.882456)\n[2024-02-23 06:47:11] INFO: Median overlap divergence: 0.0639983\n[2024-02-23 06:47:11] INFO: Mean edge coverage: 32\n[2024-02-23 06:47:11] INFO: Resolving repeats\n[2024-02-23 06:47:11] INFO: >>>STAGE: plasmids\n[2024-02-23 06:47:11] INFO: Recovering short unassembled sequences\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a552800000070'\n[2024-02-23 06:47:11] INFO: Added 0 extra contigs\n[2024-02-23 06:47:11] INFO: >>>STAGE: contigger\n[2024-02-23 06:47:11] INFO: Generating contigs\n[2024-02-23 06:47:11] INFO: Reading sequences\n[2024-02-23 06:47:11] INFO: Generated 1 contigs\n[2024-02-23 06:47:11] INFO: Added 0 scaffold connections\n[2024-02-23 06:47:11] INFO: >>>STAGE: polishing\n[2024-02-23 06:47:11] INFO: Polishing genome (1/1)\n[2024-02-23 06:47:11] INFO: Running minimap2\n[2024-02-23 06:47:12] INFO: Separating alignment into bubbles\n[2024-02-23 06:47:13] INFO: Alignment error rate: 0.115118\n[2024-02-23 06:47:13] INFO: Correcting bubbles\n0% 10% 20% 30% 40% 50% 60% 70% 80% 90% 100% \nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a553800000071'\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 297, in _bootstrap\n    self.run()\n  File \"/usr/local/lib/python3.7/multiprocessing/process.py\", line 99, in run\n    self._target(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 577, in _run_server\n    server.serve_forever()\n  File \"/usr/local/lib/python3.7/multiprocessing/managers.py\", line 173, in serve_forever\n    sys.exit(0)\nSystemExit: 0\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 265, in _run_finalizers\n    finalizer()\n  File \"/usr/local/lib/python3.7/multiprocessing/util.py\", line 189, in __call__\n    res = self._callback(*self._args, **self._kwargs)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 491, in rmtree\n    _rmtree_safe_fd(fd, path, onerror)\n  File \"/usr/local/lib/python3.7/shutil.py\", line 449, in _rmtree_safe_fd\n    onerror(os.unlink, fullname, sys.exc_info())\n  File \"/usr/local/lib/python3.7/shutil.py\", line 447, in _rmtree_safe_fd\n    os.unlink(entry.name, dir_fd=topfd)\nOSError: [Errno 16] Device or resource busy: '.nfs00000000009a554400000072'\n[2024-02-23 06:47:14] INFO: >>>STAGE: finalize\n[2024-02-23 06:47:14] INFO: Assembly statistics:\n\n\tTotal length:\t35687\n\tFragments:\t1\n\tFragments N50:\t35687\n\tLargest frg:\t35687\n\tScaffolds:\t0\n\tMean coverage:\t35\n\n[2024-02-23 06:47:14] INFO: Final assembly: /galaxy/server/database/jobs_directory/000/88/working/out_dir/assembly.fasta\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 minute", "plugin": "core", "name": "runtime_seconds", "raw_value": "77.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:47:14", "plugin": "core", "name": "end_epoch", "raw_value": "1708670834.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:45:57", "plugin": "core", "name": "start_epoch", "raw_value": "1708670757.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-0", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 0, "time_seconds": 37.14848780632019, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "250573225fc63c68"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "e6c19e36c5a2d19d"}, "library|input_2": {"src": "hda", "id": "0665dc4a24f77e1e"}, "library|type": "paired", "adv|reporting_options|reporting_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "5b96885ed887d89e", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:50:34.906019", "create_time": "2024-02-23T06:50:16.158771", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-h6tt6", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/3/a/2/dataset_3a2a4c74-b828-4b9b-a4b4-c87cab79b7a5.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/0/f/b/dataset_0fb5cb25-5b9a-491f-968b-1d4a7da82523.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/1/1/4/dataset_114d400b-c7d0-4392-99c7-e81de9e7b4f6.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/6/b/7/dataset_6b721ef3-306f-4846-9d3f-1caefee927ad.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 1, \"max_primary\": \"\", \"reporting_options_selector\": \"advanced\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 133, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 134, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 132, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "250573225fc63c68", "src": "hda", "uuid": "3a2a4c74-b828-4b9b-a4b4-c87cab79b7a5"}, "library|input_1": {"id": "e6c19e36c5a2d19d", "src": "hda", "uuid": "0fb5cb25-5b9a-491f-968b-1d4a7da82523"}, "library|input_2": {"id": "0665dc4a24f77e1e", "src": "hda", "uuid": "114d400b-c7d0-4392-99c7-e81de9e7b4f6"}}, "outputs": {"output_alignments": {"id": "d74621502dd7522d", "src": "hda", "uuid": "6b721ef3-306f-4846-9d3f-1caefee927ad"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 4 of 60\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 1:\nGetting block 5 of 60\nGetting block 6 of 60\n  Calculating Z arrays for bucket 3\n  Reserving size (126) for bucket 5\nGetting block 8 of 60\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 3:\n  Reserving size (126) for bucket 6\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 10%\n  Reserving size (126) for bucket 8\n  bucket 1: 20%\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 6\n  bucket 2: 10%\n  bucket 5: 10%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 6:\nGetting block 7 of 60\n  bucket 6: 10%\n  Reserving size (126) for bucket 7\n  bucket 5: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 8: 10%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 8: 20%\n  bucket 1: 40%\n  bucket 5: 30%\n  bucket 3: 40%\n  bucket 6: 20%\n  bucket 5: 40%\n  Calculating Z arrays for bucket 7\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 2: 30%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 4: 30%\n  bucket 3: 60%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 1: 50%\n  bucket 8: 30%\n  bucket 6: 50%\n  bucket 2: 50%\n  bucket 5: 80%\n  bucket 7: 10%\n  bucket 3: 80%\n  bucket 6: 60%\n  bucket 8: 40%\n  bucket 2: 60%\n  bucket 3: 90%\n  bucket 6: 70%\n  bucket 7: 20%\n  bucket 5: 90%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 6: 80%\n  bucket 8: 50%\n  bucket 2: 80%\n  bucket 5: 100%\n  bucket 7: 30%\n  bucket 2: 90%\n  Sorting block of length 63 for bucket 5\n  bucket 4: 60%\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 6: 90%\n  Sorting block of length 106 for bucket 3\n  bucket 4: 70%\n  bucket 2: 100%\n  bucket 6: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 8: 60%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 7: 40%\n  bucket 4: 80%\n  bucket 8: 70%\n  bucket 1: 70%\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 4: 100%\n  bucket 8: 80%\n  bucket 1: 80%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 7: 60%\n  bucket 8: 90%\n  bucket 1: 90%\n  bucket 7: 70%\n  bucket 8: 100%\n  bucket 1: 100%\n  bucket 7: 80%\n  Sorting block of length 42 for bucket 1\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  bucket 9: 40%\n  Calculating Z arrays for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 9: 50%\n  bucket 9: 60%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 70%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 80%\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 10: 20%\n  bucket 11: 20%\n  bucket 10: 30%\n  bucket 11: 30%\n  bucket 9: 90%\n  bucket 10: 40%\n  bucket 11: 40%\n  bucket 9: 100%\n  bucket 10: 50%\n  bucket 11: 50%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 60%\n  bucket 11: 60%\n  bucket 10: 70%\n  bucket 11: 70%\n  bucket 10: 80%\n  bucket 11: 80%\n  bucket 10: 90%\n  bucket 11: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 13: 10%\n  bucket 12: 30%\n  bucket 13: 20%\n  bucket 12: 40%\n  bucket 13: 30%\n  bucket 12: 50%\n  bucket 13: 40%\n  bucket 12: 60%\n  bucket 13: 50%\n  bucket 12: 70%\n  bucket 13: 60%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 13: 70%\n  bucket 12: 100%\n  bucket 13: 80%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 15: 40%\n  bucket 16: 40%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 15: 60%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 16: 70%\n  bucket 15: 80%\n  bucket 16: 80%\n  bucket 15: 90%\n  bucket 16: 90%\n  bucket 15: 100%\n  bucket 16: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 17: 80%\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 17: 100%\n  bucket 18: 60%\n  Entering block accumulator loop for bucket 19:\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 19: 10%\n  bucket 18: 80%\n  bucket 19: 20%\n  bucket 18: 90%\n  bucket 19: 30%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 40%\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  bucket 19: 50%\n  bucket 19: 60%\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Calculating Z arrays for bucket 21\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 21:\n  bucket 22: 10%\n  bucket 20: 10%\n  bucket 21: 10%\n  bucket 20: 20%\n  bucket 22: 20%\n  bucket 21: 20%\n  bucket 20: 30%\n  bucket 22: 30%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 22: 40%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 22: 50%\n  bucket 20: 70%\n  bucket 22: 60%\n  bucket 21: 50%\n  bucket 20: 80%\n  bucket 22: 70%\n  bucket 20: 90%\n  bucket 21: 60%\n  bucket 20: 100%\n  bucket 22: 80%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 70%\n  bucket 22: 90%\n  bucket 21: 80%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 23:\n  bucket 24: 10%\n  bucket 23: 10%\n  bucket 24: 20%\n  bucket 23: 20%\n  bucket 24: 30%\n  bucket 23: 30%\n  bucket 24: 40%\n  bucket 23: 40%\n  bucket 24: 50%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 25:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 25: 10%\n  bucket 26: 30%\n  bucket 25: 20%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 25: 30%\n  bucket 26: 60%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 25: 70%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 40%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 50%\n  bucket 28: 10%\n  bucket 27: 60%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 28: 100%\n  bucket 27: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 10%\n  bucket 30: 20%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 30%\n  bucket 31: 10%\n  bucket 30: 40%\n  bucket 31: 20%\n  bucket 30: 50%\n  bucket 31: 30%\n  bucket 30: 60%\n  bucket 31: 40%\n  bucket 30: 70%\n  bucket 31: 50%\n  bucket 30: 80%\n  bucket 31: 60%\n  bucket 30: 90%\n  bucket 31: 70%\n  bucket 30: 100%\n  bucket 31: 80%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 32\nReturning block of 125 for bucket 30\nReturning block of 111 for bucket 31\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 30%\n  bucket 33: 40%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 34: 10%\n  bucket 33: 70%\n  bucket 34: 20%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 34: 30%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 10%\n  bucket 36: 10%\n  bucket 35: 20%\n  bucket 36: 20%\n  bucket 35: 30%\n  bucket 36: 30%\n  bucket 35: 40%\n  bucket 36: 40%\n  bucket 35: 50%\n  bucket 36: 50%\n  bucket 35: 60%\n  bucket 36: 60%\n  bucket 35: 70%\n  bucket 36: 70%\n  bucket 35: 80%\n  bucket 36: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 37:\n  bucket 38: 10%\n  bucket 37: 10%\n  bucket 38: 20%\n  bucket 37: 20%\n  bucket 38: 30%\n  bucket 37: 30%\n  bucket 38: 40%\n  bucket 37: 40%\n  bucket 38: 50%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  bucket 38: 60%\n  bucket 37: 50%\n  bucket 38: 70%\n  bucket 37: 60%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 80%\n  bucket 37: 70%\n  bucket 38: 90%\n  bucket 37: 80%\n  bucket 39: 10%\n  bucket 37: 90%\n  bucket 38: 100%\n  bucket 39: 20%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Calculating Z arrays for bucket 42\n  bucket 41: 10%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 20%\n  bucket 42: 10%\n  bucket 41: 30%\n  bucket 42: 20%\n  bucket 41: 40%\n  bucket 42: 30%\n  bucket 41: 50%\n  bucket 42: 40%\n  bucket 41: 60%\n  bucket 42: 50%\n  bucket 41: 70%\n  bucket 42: 60%\n  bucket 41: 80%\n  bucket 42: 70%\n  bucket 41: 90%\n  bucket 42: 80%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  bucket 42: 90%\n  (Using difference cover)\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  bucket 45: 10%\n  Calculating Z arrays for bucket 46\n  bucket 45: 20%\n  bucket 45: 30%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 40%\n  bucket 46: 10%\n  bucket 45: 50%\n  bucket 46: 20%\n  bucket 45: 60%\n  bucket 46: 30%\n  bucket 45: 70%\n  bucket 46: 40%\n  bucket 45: 80%\n  bucket 46: 50%\n  bucket 45: 90%\n  bucket 46: 60%\n  bucket 45: 100%\n  bucket 46: 70%\n  Sorting block of length 79 for bucket 45\n  bucket 46: 80%\n  (Using difference cover)\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 48: 10%\n  bucket 47: 30%\n  bucket 48: 20%\n  bucket 47: 40%\n  bucket 48: 30%\n  bucket 47: 50%\n  bucket 48: 40%\n  bucket 47: 60%\n  bucket 48: 50%\n  bucket 47: 70%\n  bucket 48: 60%\n  bucket 47: 80%\n  bucket 48: 70%\n  bucket 47: 90%\n  bucket 48: 80%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 54:\nReturning block of 79 for bucket 53\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  bucket 55: 80%\n  Calculating Z arrays for bucket 56\n  bucket 55: 90%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 100%\n  bucket 56: 10%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  bucket 57: 30%\n  Calculating Z arrays for bucket 58\n  bucket 57: 40%\n  bucket 57: 50%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 60%\n  bucket 58: 10%\n  bucket 57: 70%\n  bucket 58: 20%\n  bucket 57: 80%\n  bucket 58: 30%\n  bucket 57: 90%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 4 of 60\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 1:\nGetting block 5 of 60\nGetting block 6 of 60\n  Calculating Z arrays for bucket 3\n  Reserving size (126) for bucket 5\nGetting block 8 of 60\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 3:\n  Reserving size (126) for bucket 6\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 10%\n  Reserving size (126) for bucket 8\n  bucket 1: 20%\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 6\n  bucket 2: 10%\n  bucket 5: 10%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 6:\nGetting block 7 of 60\n  bucket 6: 10%\n  Reserving size (126) for bucket 7\n  bucket 5: 20%\n  bucket 2: 20%\n  bucket 1: 30%\n  bucket 8: 10%\n  bucket 3: 20%\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 8: 20%\n  bucket 1: 40%\n  bucket 5: 30%\n  bucket 3: 40%\n  bucket 6: 20%\n  bucket 5: 40%\n  Calculating Z arrays for bucket 7\n  bucket 4: 20%\n  bucket 3: 50%\n  bucket 2: 30%\n  bucket 5: 50%\n  bucket 6: 30%\n  bucket 4: 30%\n  bucket 3: 60%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 60%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 2: 40%\n  bucket 4: 50%\n  bucket 1: 50%\n  bucket 8: 30%\n  bucket 6: 50%\n  bucket 2: 50%\n  bucket 5: 80%\n  bucket 7: 10%\n  bucket 3: 80%\n  bucket 6: 60%\n  bucket 8: 40%\n  bucket 2: 60%\n  bucket 3: 90%\n  bucket 6: 70%\n  bucket 7: 20%\n  bucket 5: 90%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 6: 80%\n  bucket 8: 50%\n  bucket 2: 80%\n  bucket 5: 100%\n  bucket 7: 30%\n  bucket 2: 90%\n  Sorting block of length 63 for bucket 5\n  bucket 4: 60%\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 6: 90%\n  Sorting block of length 106 for bucket 3\n  bucket 4: 70%\n  bucket 2: 100%\n  bucket 6: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 8: 60%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 7: 40%\n  bucket 4: 80%\n  bucket 8: 70%\n  bucket 1: 70%\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 4: 100%\n  bucket 8: 80%\n  bucket 1: 80%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 7: 60%\n  bucket 8: 90%\n  bucket 1: 90%\n  bucket 7: 70%\n  bucket 8: 100%\n  bucket 1: 100%\n  bucket 7: 80%\n  Sorting block of length 42 for bucket 1\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  bucket 9: 40%\n  Calculating Z arrays for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 9: 50%\n  bucket 9: 60%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 70%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 80%\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 10: 20%\n  bucket 11: 20%\n  bucket 10: 30%\n  bucket 11: 30%\n  bucket 9: 90%\n  bucket 10: 40%\n  bucket 11: 40%\n  bucket 9: 100%\n  bucket 10: 50%\n  bucket 11: 50%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 60%\n  bucket 11: 60%\n  bucket 10: 70%\n  bucket 11: 70%\n  bucket 10: 80%\n  bucket 11: 80%\n  bucket 10: 90%\n  bucket 11: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 13: 10%\n  bucket 12: 30%\n  bucket 13: 20%\n  bucket 12: 40%\n  bucket 13: 30%\n  bucket 12: 50%\n  bucket 13: 40%\n  bucket 12: 60%\n  bucket 13: 50%\n  bucket 12: 70%\n  bucket 13: 60%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 13: 70%\n  bucket 12: 100%\n  bucket 13: 80%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 15: 40%\n  bucket 16: 40%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 15: 60%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 16: 70%\n  bucket 15: 80%\n  bucket 16: 80%\n  bucket 15: 90%\n  bucket 16: 90%\n  bucket 15: 100%\n  bucket 16: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 17: 80%\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 17: 100%\n  bucket 18: 60%\n  Entering block accumulator loop for bucket 19:\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 19: 10%\n  bucket 18: 80%\n  bucket 19: 20%\n  bucket 18: 90%\n  bucket 19: 30%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 40%\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  bucket 19: 50%\n  bucket 19: 60%\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Calculating Z arrays for bucket 21\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 21:\n  bucket 22: 10%\n  bucket 20: 10%\n  bucket 21: 10%\n  bucket 20: 20%\n  bucket 22: 20%\n  bucket 21: 20%\n  bucket 20: 30%\n  bucket 22: 30%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 22: 40%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 22: 50%\n  bucket 20: 70%\n  bucket 22: 60%\n  bucket 21: 50%\n  bucket 20: 80%\n  bucket 22: 70%\n  bucket 20: 90%\n  bucket 21: 60%\n  bucket 20: 100%\n  bucket 22: 80%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 70%\n  bucket 22: 90%\n  bucket 21: 80%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 23:\n  bucket 24: 10%\n  bucket 23: 10%\n  bucket 24: 20%\n  bucket 23: 20%\n  bucket 24: 30%\n  bucket 23: 30%\n  bucket 24: 40%\n  bucket 23: 40%\n  bucket 24: 50%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 25:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 25: 10%\n  bucket 26: 30%\n  bucket 25: 20%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 25: 30%\n  bucket 26: 60%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 25: 70%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 40%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 50%\n  bucket 28: 10%\n  bucket 27: 60%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 27: 80%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 28: 100%\n  bucket 27: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 10%\n  bucket 30: 20%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 30%\n  bucket 31: 10%\n  bucket 30: 40%\n  bucket 31: 20%\n  bucket 30: 50%\n  bucket 31: 30%\n  bucket 30: 60%\n  bucket 31: 40%\n  bucket 30: 70%\n  bucket 31: 50%\n  bucket 30: 80%\n  bucket 31: 60%\n  bucket 30: 90%\n  bucket 31: 70%\n  bucket 30: 100%\n  bucket 31: 80%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 32\nReturning block of 125 for bucket 30\nReturning block of 111 for bucket 31\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 30%\n  bucket 33: 40%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 34: 10%\n  bucket 33: 70%\n  bucket 34: 20%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 34: 30%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 10%\n  bucket 36: 10%\n  bucket 35: 20%\n  bucket 36: 20%\n  bucket 35: 30%\n  bucket 36: 30%\n  bucket 35: 40%\n  bucket 36: 40%\n  bucket 35: 50%\n  bucket 36: 50%\n  bucket 35: 60%\n  bucket 36: 60%\n  bucket 35: 70%\n  bucket 36: 70%\n  bucket 35: 80%\n  bucket 36: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 37:\n  bucket 38: 10%\n  bucket 37: 10%\n  bucket 38: 20%\n  bucket 37: 20%\n  bucket 38: 30%\n  bucket 37: 30%\n  bucket 38: 40%\n  bucket 37: 40%\n  bucket 38: 50%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  bucket 38: 60%\n  bucket 37: 50%\n  bucket 38: 70%\n  bucket 37: 60%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 80%\n  bucket 37: 70%\n  bucket 38: 90%\n  bucket 37: 80%\n  bucket 39: 10%\n  bucket 37: 90%\n  bucket 38: 100%\n  bucket 39: 20%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Calculating Z arrays for bucket 42\n  bucket 41: 10%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 20%\n  bucket 42: 10%\n  bucket 41: 30%\n  bucket 42: 20%\n  bucket 41: 40%\n  bucket 42: 30%\n  bucket 41: 50%\n  bucket 42: 40%\n  bucket 41: 60%\n  bucket 42: 50%\n  bucket 41: 70%\n  bucket 42: 60%\n  bucket 41: 80%\n  bucket 42: 70%\n  bucket 41: 90%\n  bucket 42: 80%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  bucket 42: 90%\n  (Using difference cover)\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  bucket 45: 10%\n  Calculating Z arrays for bucket 46\n  bucket 45: 20%\n  bucket 45: 30%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 40%\n  bucket 46: 10%\n  bucket 45: 50%\n  bucket 46: 20%\n  bucket 45: 60%\n  bucket 46: 30%\n  bucket 45: 70%\n  bucket 46: 40%\n  bucket 45: 80%\n  bucket 46: 50%\n  bucket 45: 90%\n  bucket 46: 60%\n  bucket 45: 100%\n  bucket 46: 70%\n  Sorting block of length 79 for bucket 45\n  bucket 46: 80%\n  (Using difference cover)\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 48: 10%\n  bucket 47: 30%\n  bucket 48: 20%\n  bucket 47: 40%\n  bucket 48: 30%\n  bucket 47: 50%\n  bucket 48: 40%\n  bucket 47: 60%\n  bucket 48: 50%\n  bucket 47: 70%\n  bucket 48: 60%\n  bucket 47: 80%\n  bucket 48: 70%\n  bucket 47: 90%\n  bucket 48: 80%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 54:\nReturning block of 79 for bucket 53\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  bucket 55: 80%\n  Calculating Z arrays for bucket 56\n  bucket 55: 90%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 100%\n  bucket 56: 10%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  bucket 57: 30%\n  Calculating Z arrays for bucket 58\n  bucket 57: 40%\n  bucket 57: 50%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 60%\n  bucket 58: 10%\n  bucket 57: 70%\n  bucket 58: 20%\n  bucket 57: 80%\n  bucket 58: 30%\n  bucket 57: 90%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:50:24", "plugin": "core", "name": "end_epoch", "raw_value": "1708671024.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:50:24", "plugin": "core", "name": "start_epoch", "raw_value": "1708671024.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-0", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 0, "time_seconds": 28.855109691619873, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "87554430e228c6a0"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "56c06a9fd026d34a"}, "library|input_2": {"src": "hda", "id": "3916fe6fced061d7"}, "library|type": "paired", "adv|reporting_options|reporting_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "8c41d0964472153e", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:58:20.129025", "create_time": "2024-02-23T06:58:09.500447", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-jzxl6", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/b/a/2/dataset_ba2fb887-8a95-4208-a80e-6de50c940a6a.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/9/d/8/dataset_9d81050a-e459-4a5a-97c4-1364d47db7b2.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/b/b/5/dataset_bb58efb5-b980-4e2e-86c6-3f2485fa840b.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/7/4/6/dataset_74650aff-c0ae-4397-b46e-e6c56ff7044a.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 1, \"max_primary\": \"\", \"reporting_options_selector\": \"advanced\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 196, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 197, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 195, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "87554430e228c6a0", "src": "hda", "uuid": "ba2fb887-8a95-4208-a80e-6de50c940a6a"}, "library|input_1": {"id": "56c06a9fd026d34a", "src": "hda", "uuid": "9d81050a-e459-4a5a-97c4-1364d47db7b2"}, "library|input_2": {"id": "3916fe6fced061d7", "src": "hda", "uuid": "bb58efb5-b980-4e2e-86c6-3f2485fa840b"}}, "outputs": {"output_alignments": {"id": "bbaa2df979c436e3", "src": "hda", "uuid": "74650aff-c0ae-4397-b46e-e6c56ff7044a"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\nGetting block 6 of 60\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 2\nGetting block 7 of 60\n  Reserving size (126) for bucket 1\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\nGetting block 8 of 60\n  Calculating Z arrays for bucket 5\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 8\n  bucket 4: 10%\n  Calculating Z arrays for bucket 8\n  Reserving size (126) for bucket 7\n  bucket 4: 20%\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 6\n  bucket 4: 30%\n  Calculating Z arrays for bucket 3\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 1:\n  bucket 2: 20%\n  bucket 1: 10%\n  bucket 8: 10%\n  bucket 4: 50%\n  bucket 7: 10%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 4: 60%\n  bucket 2: 40%\n  bucket 8: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 4: 70%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 50%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 4: 80%\n  bucket 5: 30%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 1: 20%\n  bucket 7: 30%\n  bucket 4: 90%\n  bucket 6: 30%\n  bucket 3: 10%\n  bucket 7: 40%\n  bucket 4: 100%\n  bucket 5: 50%\n  bucket 3: 20%\n  bucket 6: 40%\n  Sorting block of length 68 for bucket 4\n  bucket 8: 40%\n  (Using difference cover)\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 5: 60%\n  bucket 2: 60%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 2: 70%\n  bucket 8: 60%\n  bucket 1: 40%\n  bucket 3: 40%\n  bucket 2: 80%\n  bucket 1: 50%\n  bucket 2: 90%\n  bucket 3: 50%\n  bucket 7: 60%\n  bucket 2: 100%\n  bucket 5: 70%\n  bucket 3: 60%\n  bucket 8: 70%\n  bucket 5: 80%\n  bucket 1: 60%\n  bucket 8: 80%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 7: 70%\n  bucket 8: 90%\n  bucket 6: 50%\n  bucket 5: 100%\n  bucket 8: 100%\n  bucket 7: 80%\n  bucket 1: 70%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 3: 70%\n  Sorting block time: 00:00:00\n  bucket 1: 80%\n  Sorting block of length 63 for bucket 5\n  bucket 6: 60%\n  (Using difference cover)\nReturning block of 69 for bucket 4\n  bucket 1: 90%\n  bucket 7: 90%\n  bucket 6: 70%\n  bucket 1: 100%\n  bucket 7: 100%\n  bucket 3: 80%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  Sorting block of length 75 for bucket 7\n  bucket 6: 80%\n  bucket 3: 90%\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 70%\n  bucket 10: 90%\n  bucket 9: 80%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  bucket 13: 10%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  bucket 12: 30%\n  bucket 13: 30%\n  bucket 12: 40%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 40%\n  bucket 12: 50%\n  bucket 13: 50%\n  bucket 14: 10%\n  bucket 12: 60%\n  bucket 13: 60%\n  bucket 14: 20%\n  bucket 12: 70%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 12: 80%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 12: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 12: 100%\n  bucket 14: 80%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\nGetting block 16 of 60\n  bucket 15: 60%\n  Reserving size (126) for bucket 16\n  bucket 15: 70%\n  Calculating Z arrays for bucket 16\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\nGetting block 18 of 60\n  bucket 17: 40%\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 50%\n  bucket 17: 60%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 70%\n  bucket 18: 10%\n  bucket 17: 80%\n  bucket 18: 20%\n  bucket 17: 90%\n  bucket 18: 30%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  bucket 18: 40%\n  (Using difference cover)\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  Sorting block time: 00:00:00\n  bucket 18: 100%\nReturning block of 40 for bucket 17\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 80%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 90%\n  bucket 20: 10%\n  bucket 19: 100%\n  bucket 20: 20%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 30%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  bucket 20: 40%\n  Calculating Z arrays for bucket 21\n  bucket 20: 50%\n  bucket 20: 60%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 70%\n  Sorting block time: 00:00:00\n  bucket 21: 10%\nReturning block of 108 for bucket 19\n  bucket 20: 80%\n  bucket 21: 20%\n  bucket 20: 90%\n  bucket 21: 30%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 70%\n  bucket 22: 80%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\nGetting block 27 of 60\n  bucket 26: 60%\n  Reserving size (126) for bucket 27\n  bucket 26: 70%\n  Calculating Z arrays for bucket 27\n  bucket 26: 80%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 90%\n  bucket 27: 10%\n  bucket 26: 100%\n  bucket 27: 20%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 28:\n  bucket 29: 10%\n  bucket 28: 10%\n  bucket 29: 20%\n  bucket 28: 20%\n  bucket 29: 30%\n  bucket 28: 30%\n  bucket 29: 40%\n  bucket 28: 40%\n  bucket 29: 50%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 29: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 70%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 80%\n  bucket 31: 10%\n  bucket 30: 90%\n  bucket 31: 20%\n  bucket 30: 100%\n  bucket 31: 30%\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 40%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\nGetting block 33 of 60\n  bucket 31: 50%\n  Reserving size (126) for bucket 33\n  Entering block accumulator loop for bucket 32:\n  Calculating Z arrays for bucket 33\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 32: 10%\n  Entering block accumulator loop for bucket 33:\n  bucket 31: 80%\n  bucket 32: 20%\n  bucket 33: 10%\n  bucket 31: 90%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  bucket 32: 30%\n  bucket 31: 100%\n  bucket 33: 20%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 40%\n  bucket 33: 30%\n  bucket 32: 50%\n  bucket 33: 40%\n  bucket 32: 60%\n  bucket 33: 50%\n  bucket 32: 70%\n  bucket 33: 60%\n  bucket 32: 80%\n  bucket 33: 70%\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  bucket 32: 90%\n  bucket 33: 80%\n  bucket 32: 100%\n  bucket 33: 90%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 20%\n  bucket 35: 30%\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 35: 40%\n  Entering block accumulator loop for bucket 37:\n  bucket 35: 50%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 60%\n  bucket 37: 10%\n  bucket 35: 70%\n  bucket 36: 10%\n  bucket 35: 80%\n  bucket 36: 20%\n  bucket 35: 90%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 35: 100%\n  bucket 36: 30%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 40%\n  bucket 37: 50%\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\nGetting block 39 of 60\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Reserving size (126) for bucket 39\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 39\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 39:\n  bucket 40: 10%\n  Entering block accumulator loop for bucket 38:\n  bucket 39: 10%\n  bucket 38: 10%\n  bucket 39: 20%\n  bucket 38: 20%\n  bucket 39: 30%\n  bucket 38: 30%\n  bucket 40: 20%\n  bucket 39: 40%\n  bucket 38: 40%\n  bucket 40: 30%\n  bucket 39: 50%\n  bucket 38: 50%\n  bucket 40: 40%\n  bucket 39: 60%\n  bucket 40: 50%\n  bucket 39: 70%\n  bucket 40: 60%\n  bucket 39: 80%\n  bucket 40: 70%\n  bucket 39: 90%\n  bucket 38: 60%\n  bucket 40: 80%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 38: 70%\n  bucket 40: 90%\n  bucket 38: 80%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 20%\n  bucket 42: 10%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 42: 20%\n  bucket 41: 50%\n  bucket 42: 30%\n  bucket 41: 60%\n  bucket 42: 40%\n  bucket 41: 70%\n  bucket 42: 50%\n  bucket 41: 80%\n  bucket 42: 60%\n  bucket 41: 90%\n  bucket 42: 70%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\nGetting block 48 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Reserving size (126) for bucket 48\nGetting block 49 of 60\n  Calculating Z arrays for bucket 48\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 47: 20%\n  bucket 49: 10%\n  bucket 47: 30%\n  bucket 49: 20%\n  bucket 48: 10%\n  bucket 47: 40%\n  bucket 48: 20%\n  bucket 49: 30%\n  bucket 48: 30%\n  bucket 49: 40%\n  bucket 48: 40%\n  bucket 47: 50%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 47: 60%\n  bucket 48: 70%\n  bucket 49: 50%\n  bucket 48: 80%\n  bucket 47: 70%\n  bucket 49: 60%\n  bucket 48: 90%\n  bucket 47: 80%\n  bucket 48: 100%\n  bucket 49: 70%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 47: 90%\n  bucket 49: 80%\n  bucket 47: 100%\n  bucket 49: 90%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  Entering block accumulator loop for bucket 52:\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 52: 10%\n  bucket 53: 50%\n  bucket 52: 20%\n  bucket 53: 60%\n  bucket 52: 30%\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  bucket 53: 70%\n  Calculating Z arrays for bucket 54\n  bucket 53: 80%\n  bucket 52: 40%\n  bucket 53: 90%\n  Entering block accumulator loop for bucket 54:\n  bucket 52: 50%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 52: 60%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 52: 70%\n  bucket 54: 50%\n  bucket 52: 80%\n  bucket 54: 60%\n  bucket 52: 90%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\nGetting block 57 of 60\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 10%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 20%\n  bucket 57: 10%\nGetting block 58 of 60\n  bucket 56: 30%\n  bucket 57: 20%\n  bucket 55: 20%\n  bucket 57: 30%\n  bucket 56: 40%\n  bucket 57: 40%\n  bucket 55: 30%\n  bucket 56: 50%\n  Reserving size (126) for bucket 58\n  bucket 57: 50%\n  Calculating Z arrays for bucket 58\n  bucket 55: 40%\n  bucket 56: 60%\n  bucket 57: 60%\n  Entering block accumulator loop for bucket 58:\n  bucket 56: 70%\n  bucket 57: 70%\n  bucket 55: 50%\n  bucket 58: 10%\n  bucket 56: 80%\n  bucket 58: 20%\n  bucket 55: 60%\n  bucket 56: 90%\nGetting block 59 of 60\n  bucket 58: 30%\n  bucket 56: 100%\n  bucket 55: 70%\n  bucket 58: 40%\n  Reserving size (126) for bucket 59\n  Sorting block of length 55 for bucket 56\n  bucket 58: 50%\n  (Using difference cover)\n  Calculating Z arrays for bucket 59\n  bucket 55: 80%\n  bucket 58: 60%\n  bucket 57: 80%\n  bucket 58: 70%\n  Entering block accumulator loop for bucket 59:\n  bucket 57: 90%\n  bucket 55: 90%\n  bucket 59: 10%\n  Sorting block time: 00:00:00\n  bucket 58: 80%\nReturning block of 56 for bucket 56\n  bucket 59: 20%\n  bucket 57: 100%\n  bucket 55: 100%\n  Sorting block of length 85 for bucket 57\n  bucket 58: 90%\n  bucket 59: 30%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 40%\n  (Using difference cover)\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\nGetting block 6 of 60\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 2\nGetting block 7 of 60\n  Reserving size (126) for bucket 1\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\nGetting block 8 of 60\n  Calculating Z arrays for bucket 5\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 8\n  bucket 4: 10%\n  Calculating Z arrays for bucket 8\n  Reserving size (126) for bucket 7\n  bucket 4: 20%\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 6\n  bucket 4: 30%\n  Calculating Z arrays for bucket 3\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 1:\n  bucket 2: 20%\n  bucket 1: 10%\n  bucket 8: 10%\n  bucket 4: 50%\n  bucket 7: 10%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 4: 60%\n  bucket 2: 40%\n  bucket 8: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  bucket 4: 70%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 50%\n  bucket 5: 20%\n  bucket 6: 10%\n  bucket 4: 80%\n  bucket 5: 30%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 1: 20%\n  bucket 7: 30%\n  bucket 4: 90%\n  bucket 6: 30%\n  bucket 3: 10%\n  bucket 7: 40%\n  bucket 4: 100%\n  bucket 5: 50%\n  bucket 3: 20%\n  bucket 6: 40%\n  Sorting block of length 68 for bucket 4\n  bucket 8: 40%\n  (Using difference cover)\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 5: 60%\n  bucket 2: 60%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 2: 70%\n  bucket 8: 60%\n  bucket 1: 40%\n  bucket 3: 40%\n  bucket 2: 80%\n  bucket 1: 50%\n  bucket 2: 90%\n  bucket 3: 50%\n  bucket 7: 60%\n  bucket 2: 100%\n  bucket 5: 70%\n  bucket 3: 60%\n  bucket 8: 70%\n  bucket 5: 80%\n  bucket 1: 60%\n  bucket 8: 80%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 7: 70%\n  bucket 8: 90%\n  bucket 6: 50%\n  bucket 5: 100%\n  bucket 8: 100%\n  bucket 7: 80%\n  bucket 1: 70%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 3: 70%\n  Sorting block time: 00:00:00\n  bucket 1: 80%\n  Sorting block of length 63 for bucket 5\n  bucket 6: 60%\n  (Using difference cover)\nReturning block of 69 for bucket 4\n  bucket 1: 90%\n  bucket 7: 90%\n  bucket 6: 70%\n  bucket 1: 100%\n  bucket 7: 100%\n  bucket 3: 80%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  Sorting block of length 75 for bucket 7\n  bucket 6: 80%\n  bucket 3: 90%\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 9: 70%\n  bucket 10: 90%\n  bucket 9: 80%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  bucket 13: 10%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  bucket 12: 30%\n  bucket 13: 30%\n  bucket 12: 40%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 40%\n  bucket 12: 50%\n  bucket 13: 50%\n  bucket 14: 10%\n  bucket 12: 60%\n  bucket 13: 60%\n  bucket 14: 20%\n  bucket 12: 70%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 12: 80%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 12: 90%\n  bucket 14: 70%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 12: 100%\n  bucket 14: 80%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\nGetting block 16 of 60\n  bucket 15: 60%\n  Reserving size (126) for bucket 16\n  bucket 15: 70%\n  Calculating Z arrays for bucket 16\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\nGetting block 18 of 60\n  bucket 17: 40%\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 50%\n  bucket 17: 60%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 70%\n  bucket 18: 10%\n  bucket 17: 80%\n  bucket 18: 20%\n  bucket 17: 90%\n  bucket 18: 30%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  bucket 18: 40%\n  (Using difference cover)\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  Sorting block time: 00:00:00\n  bucket 18: 100%\nReturning block of 40 for bucket 17\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 80%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 90%\n  bucket 20: 10%\n  bucket 19: 100%\n  bucket 20: 20%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 30%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  bucket 20: 40%\n  Calculating Z arrays for bucket 21\n  bucket 20: 50%\n  bucket 20: 60%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 70%\n  Sorting block time: 00:00:00\n  bucket 21: 10%\nReturning block of 108 for bucket 19\n  bucket 20: 80%\n  bucket 21: 20%\n  bucket 20: 90%\n  bucket 21: 30%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 70%\n  bucket 22: 80%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\nGetting block 27 of 60\n  bucket 26: 60%\n  Reserving size (126) for bucket 27\n  bucket 26: 70%\n  Calculating Z arrays for bucket 27\n  bucket 26: 80%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 90%\n  bucket 27: 10%\n  bucket 26: 100%\n  bucket 27: 20%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 28:\n  bucket 29: 10%\n  bucket 28: 10%\n  bucket 29: 20%\n  bucket 28: 20%\n  bucket 29: 30%\n  bucket 28: 30%\n  bucket 29: 40%\n  bucket 28: 40%\n  bucket 29: 50%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 29: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 70%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 80%\n  bucket 31: 10%\n  bucket 30: 90%\n  bucket 31: 20%\n  bucket 30: 100%\n  bucket 31: 30%\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 40%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\nGetting block 33 of 60\n  bucket 31: 50%\n  Reserving size (126) for bucket 33\n  Entering block accumulator loop for bucket 32:\n  Calculating Z arrays for bucket 33\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 32: 10%\n  Entering block accumulator loop for bucket 33:\n  bucket 31: 80%\n  bucket 32: 20%\n  bucket 33: 10%\n  bucket 31: 90%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  bucket 32: 30%\n  bucket 31: 100%\n  bucket 33: 20%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 40%\n  bucket 33: 30%\n  bucket 32: 50%\n  bucket 33: 40%\n  bucket 32: 60%\n  bucket 33: 50%\n  bucket 32: 70%\n  bucket 33: 60%\n  bucket 32: 80%\n  bucket 33: 70%\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  bucket 32: 90%\n  bucket 33: 80%\n  bucket 32: 100%\n  bucket 33: 90%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 20%\n  bucket 35: 30%\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 35: 40%\n  Entering block accumulator loop for bucket 37:\n  bucket 35: 50%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 60%\n  bucket 37: 10%\n  bucket 35: 70%\n  bucket 36: 10%\n  bucket 35: 80%\n  bucket 36: 20%\n  bucket 35: 90%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 35: 100%\n  bucket 36: 30%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 40%\n  bucket 37: 50%\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\nGetting block 39 of 60\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Reserving size (126) for bucket 39\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 39\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 39:\n  bucket 40: 10%\n  Entering block accumulator loop for bucket 38:\n  bucket 39: 10%\n  bucket 38: 10%\n  bucket 39: 20%\n  bucket 38: 20%\n  bucket 39: 30%\n  bucket 38: 30%\n  bucket 40: 20%\n  bucket 39: 40%\n  bucket 38: 40%\n  bucket 40: 30%\n  bucket 39: 50%\n  bucket 38: 50%\n  bucket 40: 40%\n  bucket 39: 60%\n  bucket 40: 50%\n  bucket 39: 70%\n  bucket 40: 60%\n  bucket 39: 80%\n  bucket 40: 70%\n  bucket 39: 90%\n  bucket 38: 60%\n  bucket 40: 80%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 38: 70%\n  bucket 40: 90%\n  bucket 38: 80%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 20%\n  bucket 42: 10%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 42: 20%\n  bucket 41: 50%\n  bucket 42: 30%\n  bucket 41: 60%\n  bucket 42: 40%\n  bucket 41: 70%\n  bucket 42: 50%\n  bucket 41: 80%\n  bucket 42: 60%\n  bucket 41: 90%\n  bucket 42: 70%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\nGetting block 48 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Reserving size (126) for bucket 48\nGetting block 49 of 60\n  Calculating Z arrays for bucket 48\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 47: 20%\n  bucket 49: 10%\n  bucket 47: 30%\n  bucket 49: 20%\n  bucket 48: 10%\n  bucket 47: 40%\n  bucket 48: 20%\n  bucket 49: 30%\n  bucket 48: 30%\n  bucket 49: 40%\n  bucket 48: 40%\n  bucket 47: 50%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 47: 60%\n  bucket 48: 70%\n  bucket 49: 50%\n  bucket 48: 80%\n  bucket 47: 70%\n  bucket 49: 60%\n  bucket 48: 90%\n  bucket 47: 80%\n  bucket 48: 100%\n  bucket 49: 70%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 47: 90%\n  bucket 49: 80%\n  bucket 47: 100%\n  bucket 49: 90%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  Entering block accumulator loop for bucket 52:\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 52: 10%\n  bucket 53: 50%\n  bucket 52: 20%\n  bucket 53: 60%\n  bucket 52: 30%\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  bucket 53: 70%\n  Calculating Z arrays for bucket 54\n  bucket 53: 80%\n  bucket 52: 40%\n  bucket 53: 90%\n  Entering block accumulator loop for bucket 54:\n  bucket 52: 50%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 52: 60%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 52: 70%\n  bucket 54: 50%\n  bucket 52: 80%\n  bucket 54: 60%\n  bucket 52: 90%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\nGetting block 57 of 60\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 10%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 20%\n  bucket 57: 10%\nGetting block 58 of 60\n  bucket 56: 30%\n  bucket 57: 20%\n  bucket 55: 20%\n  bucket 57: 30%\n  bucket 56: 40%\n  bucket 57: 40%\n  bucket 55: 30%\n  bucket 56: 50%\n  Reserving size (126) for bucket 58\n  bucket 57: 50%\n  Calculating Z arrays for bucket 58\n  bucket 55: 40%\n  bucket 56: 60%\n  bucket 57: 60%\n  Entering block accumulator loop for bucket 58:\n  bucket 56: 70%\n  bucket 57: 70%\n  bucket 55: 50%\n  bucket 58: 10%\n  bucket 56: 80%\n  bucket 58: 20%\n  bucket 55: 60%\n  bucket 56: 90%\nGetting block 59 of 60\n  bucket 58: 30%\n  bucket 56: 100%\n  bucket 55: 70%\n  bucket 58: 40%\n  Reserving size (126) for bucket 59\n  Sorting block of length 55 for bucket 56\n  bucket 58: 50%\n  (Using difference cover)\n  Calculating Z arrays for bucket 59\n  bucket 55: 80%\n  bucket 58: 60%\n  bucket 57: 80%\n  bucket 58: 70%\n  Entering block accumulator loop for bucket 59:\n  bucket 57: 90%\n  bucket 55: 90%\n  bucket 59: 10%\n  Sorting block time: 00:00:00\n  bucket 58: 80%\nReturning block of 56 for bucket 56\n  bucket 59: 20%\n  bucket 57: 100%\n  bucket 55: 100%\n  Sorting block of length 85 for bucket 57\n  bucket 58: 90%\n  bucket 59: 30%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 40%\n  (Using difference cover)\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:58:11", "plugin": "core", "name": "end_epoch", "raw_value": "1708671491.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:58:11", "plugin": "core", "name": "start_epoch", "raw_value": "1708671491.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-1", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 1, "time_seconds": 9.183363676071167, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "hisat2/2.2.1+galaxy1-1", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 1, "time_seconds": 28.784386157989502, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "5dc7144c5a13ebd0"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "c1f2b5866230ed5b"}, "library|input_2": {"src": "hda", "id": "3dbdc5dbb5a1a92c"}, "library|type": "paired"}, "job": {"model_class": "Job", "id": "dcf434eacdaecb9e", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:58:49.009851", "create_time": "2024-02-23T06:58:38.378473", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-59j8c", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/6/d/a/dataset_6da24e00-1264-4131-8795-d1058c1bf726.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/6/d/b/dataset_6db63045-11ea-493b-9fe2-0db57d3c40d1.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/c/4/a/dataset_c4ad0b5d-4e82-4c4c-83f1-45251927881c.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/2/1/0/dataset_21028ad9-4b0d-449d-adb1-fd76c74052ba.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 200, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 201, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 199, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "5dc7144c5a13ebd0", "src": "hda", "uuid": "6da24e00-1264-4131-8795-d1058c1bf726"}, "library|input_1": {"id": "c1f2b5866230ed5b", "src": "hda", "uuid": "6db63045-11ea-493b-9fe2-0db57d3c40d1"}, "library|input_2": {"id": "3dbdc5dbb5a1a92c", "src": "hda", "uuid": "c4ad0b5d-4e82-4c4c-83f1-45251927881c"}}, "outputs": {"output_alignments": {"id": "4bb2a940eeb1f50d", "src": "hda", "uuid": "21028ad9-4b0d-449d-adb1-fd76c74052ba"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\nGetting block 4 of 60\n  Reserving size (126) for bucket 1\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 2\nGetting block 5 of 60\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 3\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Reserving size (126) for bucket 4\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 5\nGetting block 8 of 60\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 5\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 8\n  bucket 2: 10%\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 10%\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 5:\n  bucket 7: 10%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 8: 10%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 8: 20%\n  bucket 5: 20%\n  bucket 4: 30%\n  bucket 8: 30%\n  bucket 7: 20%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 2: 80%\n  bucket 1: 50%\n  bucket 7: 30%\n  bucket 2: 90%\n  bucket 5: 40%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 8: 40%\n  bucket 1: 60%\n  bucket 6: 30%\n  bucket 2: 100%\n  bucket 5: 50%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 1: 70%\n  bucket 8: 50%\n  bucket 1: 80%\n  bucket 5: 70%\n  bucket 1: 90%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 1: 100%\n  bucket 6: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 8: 60%\n  Sorting block of length 42 for bucket 1\n  bucket 6: 60%\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 7: 50%\n  bucket 6: 70%\n  bucket 3: 70%\n  bucket 5: 80%\n  Sorting block time: 00:00:00\n  bucket 7: 60%\n  bucket 5: 90%\n  bucket 4: 80%\n  bucket 8: 70%\n  bucket 5: 100%\nReturning block of 85 for bucket 2\n  bucket 4: 90%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 4: 100%\n  bucket 6: 80%\n  bucket 7: 70%\n  Sorting block of length 68 for bucket 4\n  bucket 6: 90%\n  bucket 8: 90%\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 7: 80%\n  bucket 6: 100%\n  bucket 8: 100%\n  bucket 7: 90%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 3: 90%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  bucket 10: 90%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 13: 10%\n  bucket 12: 20%\n  bucket 11: 10%\n  bucket 12: 30%\n  bucket 11: 20%\n  bucket 12: 40%\n  bucket 11: 30%\n  bucket 12: 50%\n  bucket 11: 40%\n  bucket 12: 60%\n  bucket 11: 50%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 11: 60%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  Sorting block time: 00:00:00\n  bucket 13: 60%\nReturning block of 83 for bucket 12\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 15: 30%\n  bucket 14: 40%\n  bucket 15: 40%\n  bucket 14: 50%\n  bucket 15: 50%\n  bucket 14: 60%\n  bucket 15: 60%\n  bucket 14: 70%\n  bucket 15: 70%\n  bucket 14: 80%\n  bucket 15: 80%\n  bucket 14: 90%\n  bucket 15: 90%\n  bucket 14: 100%\n  bucket 15: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nReturning block of 83 for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\n  Calculating Z arrays for bucket 18\n  bucket 16: 10%\n  bucket 17: 10%\n  bucket 16: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 16: 30%\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 16: 40%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 16: 50%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 16: 60%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 16: 70%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 16: 80%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 16: 90%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  bucket 16: 100%\n  Sorting block of length 39 for bucket 17\n  bucket 18: 90%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  (Using difference cover)\nGetting block 19 of 60\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Entering block accumulator loop for bucket 19:\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nReturning block of 123 for bucket 18\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 60\n  Entering block accumulator loop for bucket 20:\n  Reserving size (126) for bucket 21\n  bucket 20: 10%\n  Calculating Z arrays for bucket 21\n  bucket 20: 20%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 20: 50%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  bucket 20: 60%\n  Calculating Z arrays for bucket 22\n  bucket 21: 30%\n  bucket 20: 70%\n  bucket 21: 40%\n  bucket 20: 80%\n  Entering block accumulator loop for bucket 22:\n  bucket 20: 90%\n  bucket 21: 50%\n  bucket 22: 10%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 60%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 22: 30%\n  bucket 21: 80%\n  bucket 22: 40%\n  bucket 21: 90%\n  bucket 22: 50%\n  Sorting block time: 00:00:00\n  bucket 22: 60%\nReturning block of 98 for bucket 20\n  bucket 22: 70%\n  bucket 21: 100%\n  bucket 22: 80%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 30%\n  bucket 24: 10%\n  bucket 23: 40%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 23: 70%\n  bucket 24: 70%\n  bucket 23: 80%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 30%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 25: 50%\nGetting block 27 of 60\n  bucket 26: 20%\n  Reserving size (126) for bucket 27\n  bucket 26: 30%\n  bucket 25: 60%\n  Calculating Z arrays for bucket 27\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 25: 80%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 50%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 60%\n  bucket 27: 10%\n  bucket 26: 70%\n  bucket 27: 20%\n  bucket 26: 80%\n  bucket 27: 30%\n  bucket 26: 90%\n  bucket 27: 40%\n  bucket 26: 100%\n  bucket 27: 50%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 60%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 10%\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 30: 20%\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 30: 30%\n  bucket 32: 10%\n  bucket 31: 10%\n  bucket 32: 20%\n  bucket 31: 20%\n  bucket 32: 30%\n  bucket 31: 30%\n  bucket 32: 40%\n  bucket 31: 40%\n  bucket 32: 50%\n  bucket 31: 50%\n  bucket 32: 60%\n  bucket 31: 60%\n  bucket 32: 70%\n  bucket 31: 70%\n  bucket 32: 80%\n  bucket 31: 80%\n  bucket 30: 40%\n  bucket 32: 90%\n  bucket 31: 90%\n  bucket 32: 100%\n  bucket 31: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Entering block accumulator loop for bucket 35:\n  Reserving size (126) for bucket 36\n  bucket 35: 10%\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  bucket 35: 20%\n  Calculating Z arrays for bucket 37\n  Calculating Z arrays for bucket 36\n  bucket 35: 30%\n  bucket 35: 40%\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 37:\n  bucket 35: 50%\n  bucket 36: 10%\n  bucket 35: 60%\n  bucket 37: 10%\n  bucket 36: 20%\n  bucket 35: 70%\n  bucket 36: 30%\n  bucket 37: 20%\n  bucket 35: 80%\n  bucket 36: 40%\n  bucket 35: 90%\n  bucket 37: 30%\n  bucket 36: 50%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 60%\n  bucket 37: 40%\n  bucket 36: 70%\n  bucket 37: 50%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 37: 60%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 39: 10%\n  bucket 38: 50%\n  bucket 39: 20%\n  bucket 38: 60%\n  bucket 39: 30%\n  bucket 38: 70%\n  bucket 39: 40%\n  bucket 38: 80%\n  bucket 39: 50%\n  bucket 38: 90%\n  bucket 39: 60%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 41:\n  bucket 42: 10%\n  bucket 41: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 41: 20%\n  bucket 42: 40%\n  bucket 41: 30%\n  bucket 42: 50%\n  bucket 41: 40%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 41: 50%\n  bucket 42: 80%\n  bucket 41: 60%\n  bucket 42: 90%\n  bucket 41: 70%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 20%\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 44: 40%\n  bucket 43: 50%\n  bucket 44: 50%\n  bucket 43: 60%\n  bucket 44: 60%\n  bucket 43: 70%\n  bucket 44: 70%\n  bucket 43: 80%\n  bucket 44: 80%\n  bucket 43: 90%\n  bucket 44: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  bucket 48: 10%\n  bucket 48: 20%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 30%\n  bucket 49: 10%\n  bucket 48: 40%\n  bucket 49: 20%\n  bucket 48: 50%\n  bucket 49: 30%\n  bucket 48: 60%\n  bucket 49: 40%\n  bucket 48: 70%\n  bucket 49: 50%\n  bucket 48: 80%\n  bucket 49: 60%\n  bucket 48: 90%\n  bucket 49: 70%\n  bucket 48: 100%\n  bucket 49: 80%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\nGetting block 51 of 60\n  bucket 50: 40%\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 50%\n  bucket 50: 60%\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 50: 70%\n  bucket 51: 20%\n  bucket 50: 80%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 50: 90%\n  bucket 51: 50%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  bucket 51: 60%\n  (Using difference cover)\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 20%\n  bucket 57: 10%\n  bucket 56: 30%\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 20%\n  bucket 56: 40%\n  bucket 57: 30%\n  bucket 56: 50%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 40%\n  bucket 56: 60%\n  bucket 58: 10%\n  bucket 57: 50%\n  bucket 56: 70%\n  bucket 58: 20%\n  bucket 57: 60%\n  bucket 56: 80%\n  bucket 57: 70%\n  bucket 58: 30%\n  bucket 56: 90%\n  bucket 57: 80%\n  bucket 58: 40%\n  bucket 56: 100%\n  bucket 58: 50%\n  bucket 57: 90%\n  bucket 58: 60%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\nGetting block 4 of 60\n  Reserving size (126) for bucket 1\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 2\nGetting block 5 of 60\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 3\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Reserving size (126) for bucket 4\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 5\nGetting block 8 of 60\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 5\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 8\n  bucket 2: 10%\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 10%\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 10%\n  bucket 2: 20%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 5:\n  bucket 7: 10%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 8: 10%\n  bucket 1: 40%\n  bucket 2: 50%\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 8: 20%\n  bucket 5: 20%\n  bucket 4: 30%\n  bucket 8: 30%\n  bucket 7: 20%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 2: 80%\n  bucket 1: 50%\n  bucket 7: 30%\n  bucket 2: 90%\n  bucket 5: 40%\n  bucket 4: 50%\n  bucket 3: 50%\n  bucket 8: 40%\n  bucket 1: 60%\n  bucket 6: 30%\n  bucket 2: 100%\n  bucket 5: 50%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 1: 70%\n  bucket 8: 50%\n  bucket 1: 80%\n  bucket 5: 70%\n  bucket 1: 90%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 1: 100%\n  bucket 6: 50%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 8: 60%\n  Sorting block of length 42 for bucket 1\n  bucket 6: 60%\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 7: 50%\n  bucket 6: 70%\n  bucket 3: 70%\n  bucket 5: 80%\n  Sorting block time: 00:00:00\n  bucket 7: 60%\n  bucket 5: 90%\n  bucket 4: 80%\n  bucket 8: 70%\n  bucket 5: 100%\nReturning block of 85 for bucket 2\n  bucket 4: 90%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 4: 100%\n  bucket 6: 80%\n  bucket 7: 70%\n  Sorting block of length 68 for bucket 4\n  bucket 6: 90%\n  bucket 8: 90%\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 7: 80%\n  bucket 6: 100%\n  bucket 8: 100%\n  bucket 7: 90%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 3: 90%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 10: 80%\n  bucket 9: 100%\n  bucket 10: 90%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 13: 10%\n  bucket 12: 20%\n  bucket 11: 10%\n  bucket 12: 30%\n  bucket 11: 20%\n  bucket 12: 40%\n  bucket 11: 30%\n  bucket 12: 50%\n  bucket 11: 40%\n  bucket 12: 60%\n  bucket 11: 50%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 11: 60%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  Sorting block time: 00:00:00\n  bucket 13: 60%\nReturning block of 83 for bucket 12\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 15: 20%\n  bucket 14: 30%\n  bucket 15: 30%\n  bucket 14: 40%\n  bucket 15: 40%\n  bucket 14: 50%\n  bucket 15: 50%\n  bucket 14: 60%\n  bucket 15: 60%\n  bucket 14: 70%\n  bucket 15: 70%\n  bucket 14: 80%\n  bucket 15: 80%\n  bucket 14: 90%\n  bucket 15: 90%\n  bucket 14: 100%\n  bucket 15: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nReturning block of 83 for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\n  Calculating Z arrays for bucket 18\n  bucket 16: 10%\n  bucket 17: 10%\n  bucket 16: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 16: 30%\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 16: 40%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 16: 50%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 16: 60%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 16: 70%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 16: 80%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 16: 90%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  bucket 16: 100%\n  Sorting block of length 39 for bucket 17\n  bucket 18: 90%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  (Using difference cover)\nGetting block 19 of 60\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Entering block accumulator loop for bucket 19:\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nReturning block of 123 for bucket 18\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 60\n  Entering block accumulator loop for bucket 20:\n  Reserving size (126) for bucket 21\n  bucket 20: 10%\n  Calculating Z arrays for bucket 21\n  bucket 20: 20%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 20: 50%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  bucket 20: 60%\n  Calculating Z arrays for bucket 22\n  bucket 21: 30%\n  bucket 20: 70%\n  bucket 21: 40%\n  bucket 20: 80%\n  Entering block accumulator loop for bucket 22:\n  bucket 20: 90%\n  bucket 21: 50%\n  bucket 22: 10%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 60%\n  bucket 22: 20%\n  bucket 21: 70%\n  bucket 22: 30%\n  bucket 21: 80%\n  bucket 22: 40%\n  bucket 21: 90%\n  bucket 22: 50%\n  Sorting block time: 00:00:00\n  bucket 22: 60%\nReturning block of 98 for bucket 20\n  bucket 22: 70%\n  bucket 21: 100%\n  bucket 22: 80%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 30%\n  bucket 24: 10%\n  bucket 23: 40%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 23: 70%\n  bucket 24: 70%\n  bucket 23: 80%\n  bucket 24: 80%\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 30%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 25: 50%\nGetting block 27 of 60\n  bucket 26: 20%\n  Reserving size (126) for bucket 27\n  bucket 26: 30%\n  bucket 25: 60%\n  Calculating Z arrays for bucket 27\n  bucket 26: 40%\n  bucket 25: 70%\n  bucket 25: 80%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 50%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 60%\n  bucket 27: 10%\n  bucket 26: 70%\n  bucket 27: 20%\n  bucket 26: 80%\n  bucket 27: 30%\n  bucket 26: 90%\n  bucket 27: 40%\n  bucket 26: 100%\n  bucket 27: 50%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 60%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 10%\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 30: 20%\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 30: 30%\n  bucket 32: 10%\n  bucket 31: 10%\n  bucket 32: 20%\n  bucket 31: 20%\n  bucket 32: 30%\n  bucket 31: 30%\n  bucket 32: 40%\n  bucket 31: 40%\n  bucket 32: 50%\n  bucket 31: 50%\n  bucket 32: 60%\n  bucket 31: 60%\n  bucket 32: 70%\n  bucket 31: 70%\n  bucket 32: 80%\n  bucket 31: 80%\n  bucket 30: 40%\n  bucket 32: 90%\n  bucket 31: 90%\n  bucket 32: 100%\n  bucket 31: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Entering block accumulator loop for bucket 35:\n  Reserving size (126) for bucket 36\n  bucket 35: 10%\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  bucket 35: 20%\n  Calculating Z arrays for bucket 37\n  Calculating Z arrays for bucket 36\n  bucket 35: 30%\n  bucket 35: 40%\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 37:\n  bucket 35: 50%\n  bucket 36: 10%\n  bucket 35: 60%\n  bucket 37: 10%\n  bucket 36: 20%\n  bucket 35: 70%\n  bucket 36: 30%\n  bucket 37: 20%\n  bucket 35: 80%\n  bucket 36: 40%\n  bucket 35: 90%\n  bucket 37: 30%\n  bucket 36: 50%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 60%\n  bucket 37: 40%\n  bucket 36: 70%\n  bucket 37: 50%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 37: 60%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 39: 10%\n  bucket 38: 50%\n  bucket 39: 20%\n  bucket 38: 60%\n  bucket 39: 30%\n  bucket 38: 70%\n  bucket 39: 40%\n  bucket 38: 80%\n  bucket 39: 50%\n  bucket 38: 90%\n  bucket 39: 60%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 41:\n  bucket 42: 10%\n  bucket 41: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 41: 20%\n  bucket 42: 40%\n  bucket 41: 30%\n  bucket 42: 50%\n  bucket 41: 40%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 41: 50%\n  bucket 42: 80%\n  bucket 41: 60%\n  bucket 42: 90%\n  bucket 41: 70%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 20%\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 44: 40%\n  bucket 43: 50%\n  bucket 44: 50%\n  bucket 43: 60%\n  bucket 44: 60%\n  bucket 43: 70%\n  bucket 44: 70%\n  bucket 43: 80%\n  bucket 44: 80%\n  bucket 43: 90%\n  bucket 44: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  bucket 48: 10%\n  bucket 48: 20%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 30%\n  bucket 49: 10%\n  bucket 48: 40%\n  bucket 49: 20%\n  bucket 48: 50%\n  bucket 49: 30%\n  bucket 48: 60%\n  bucket 49: 40%\n  bucket 48: 70%\n  bucket 49: 50%\n  bucket 48: 80%\n  bucket 49: 60%\n  bucket 48: 90%\n  bucket 49: 70%\n  bucket 48: 100%\n  bucket 49: 80%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\nGetting block 51 of 60\n  bucket 50: 40%\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 50%\n  bucket 50: 60%\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 50: 70%\n  bucket 51: 20%\n  bucket 50: 80%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 50: 90%\n  bucket 51: 50%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  bucket 51: 60%\n  (Using difference cover)\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 20%\n  bucket 57: 10%\n  bucket 56: 30%\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 20%\n  bucket 56: 40%\n  bucket 57: 30%\n  bucket 56: 50%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 40%\n  bucket 56: 60%\n  bucket 58: 10%\n  bucket 57: 50%\n  bucket 56: 70%\n  bucket 58: 20%\n  bucket 57: 60%\n  bucket 56: 80%\n  bucket 57: 70%\n  bucket 58: 30%\n  bucket 56: 90%\n  bucket 57: 80%\n  bucket 58: 40%\n  bucket 56: 100%\n  bucket 58: 50%\n  bucket 57: 90%\n  bucket 58: 60%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:58:40", "plugin": "core", "name": "end_epoch", "raw_value": "1708671520.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:58:40", "plugin": "core", "name": "start_epoch", "raw_value": "1708671520.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-10", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 10, "time_seconds": 26.23650360107422, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "88361a08a226e8b2"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "35775dc463d24caf"}, "library|rna_strandness": "R", "library|type": "single", "sum|new_summary": true, "sum|summary_file": true}, "job": {"model_class": "Job", "id": "c987fa0993bc3a04", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:55:19.386259", "create_time": "2024-02-23T06:55:09.174529", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-d8k44", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/a/7/1/dataset_a7141f0f-efc2-48cd-bdf9-2357ad00c178.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/8/b/7/dataset_8b7693ff-8aa1-4601-861c-a31b6d43c3f7.dat' input_f.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'     -U 'input_f.fastq'      --rna-strandness R                        --new-summary  --summary-file summary.txt   | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/0/2/2/dataset_022bc779-fd92-446e-906a-af640fd53118.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": true, \"summary_file\": true}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 173, \"src\": \"hda\"}]}, \"rna_strandness\": \"R\", \"type\": \"single\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 172, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "88361a08a226e8b2", "src": "hda", "uuid": "a7141f0f-efc2-48cd-bdf9-2357ad00c178"}, "library|input_1": {"id": "35775dc463d24caf", "src": "hda", "uuid": "8b7693ff-8aa1-4601-861c-a31b6d43c3f7"}}, "outputs": {"output_alignments": {"id": "c570edcd2b7111d6", "src": "hda", "uuid": "022bc779-fd92-446e-906a-af640fd53118"}, "summary_file": {"id": "94bb4b0d65f0a8cb", "src": "hda", "uuid": "70e42417-4c17-4011-8a6d-3d8563fd79d1"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 3 of 60\nGetting block 4 of 60\nGetting block 5 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 4\nGetting block 7 of 60\n  Entering block accumulator loop for bucket 1:\nGetting block 6 of 60\n  Calculating Z arrays for bucket 4\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 3\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 3:\nGetting block 2 of 60\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 7\n  bucket 4: 10%\n  Reserving size (126) for bucket 2\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 1: 20%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 8\n  bucket 6: 10%\n  bucket 3: 20%\n  bucket 5: 10%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 7: 10%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 6: 20%\n  bucket 3: 40%\n  bucket 7: 20%\n  bucket 5: 20%\n  bucket 1: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 1: 50%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 1: 60%\n  bucket 5: 40%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 1: 70%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 4: 60%\n  bucket 1: 80%\n  bucket 5: 60%\n  bucket 7: 30%\n  bucket 6: 50%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 1: 90%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 3: 80%\n  bucket 4: 80%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  Calculating Z arrays for bucket 2\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 1: 100%\n  bucket 5: 80%\n  bucket 3: 100%\n  bucket 8: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 7: 60%\n  bucket 6: 80%\n  Sorting block of length 42 for bucket 1\n  bucket 5: 90%\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 8: 20%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 6: 100%\n  bucket 7: 80%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 8: 30%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 2: 10%\n  bucket 7: 90%\n  bucket 8: 40%\n  bucket 7: 100%\n  bucket 2: 20%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 2: 30%\n  bucket 8: 60%\n  bucket 2: 40%\n  bucket 8: 70%\n  bucket 2: 50%\n  bucket 8: 80%\n  bucket 2: 60%\n  bucket 8: 90%\n  bucket 2: 70%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 10 of 60\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 11: 20%\n  bucket 10: 10%\n  bucket 11: 30%\n  bucket 10: 20%\n  bucket 11: 40%\n  bucket 10: 30%\n  bucket 11: 50%\n  bucket 10: 40%\n  bucket 11: 60%\n  bucket 10: 50%\n  bucket 11: 70%\n  bucket 10: 60%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 10: 70%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Entering block accumulator loop for bucket 12:\nGetting block 14 of 60\n  Calculating Z arrays for bucket 13\n  Reserving size (126) for bucket 14\n  bucket 12: 10%\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Calculating Z arrays for bucket 15\n  bucket 12: 20%\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 12: 30%\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 10%\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 12: 40%\n  bucket 15: 10%\n  bucket 12: 50%\n  bucket 15: 20%\n  bucket 12: 60%\n  bucket 13: 20%\n  bucket 15: 30%\n  bucket 13: 30%\n  bucket 12: 70%\n  bucket 16: 20%\n  bucket 14: 20%\n  bucket 16: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 12: 80%\n  bucket 15: 40%\n  bucket 14: 40%\n  bucket 12: 90%\n  bucket 13: 50%\n  bucket 15: 50%\n  bucket 12: 100%\n  bucket 14: 50%\n  Sorting block of length 82 for bucket 12\n  bucket 15: 60%\n  bucket 14: 60%\n  bucket 15: 70%\n  bucket 13: 60%\n  bucket 16: 40%\n  bucket 14: 70%\n  bucket 15: 80%\n  bucket 13: 70%\n  bucket 16: 50%\n  bucket 14: 80%\n  bucket 15: 90%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  bucket 16: 70%\n  bucket 13: 90%\n  bucket 14: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block of length 82 for bucket 14\n  bucket 16: 80%\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  bucket 16: 90%\n  bucket 16: 100%\n  (Using difference cover)\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 30%\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  bucket 17: 40%\n  bucket 18: 10%\n  Calculating Z arrays for bucket 19\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 19: 30%\n  bucket 17: 100%\n  bucket 18: 60%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 19: 40%\n  bucket 18: 70%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 19: 60%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 10%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 20: 90%\n  bucket 21: 80%\n  bucket 20: 100%\n  bucket 21: 90%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 60\n  Entering block accumulator loop for bucket 23:\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 22:\n  bucket 23: 10%\n  bucket 22: 10%\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 22: 20%\n  bucket 23: 30%\n  bucket 22: 30%\n  bucket 23: 40%\n  bucket 24: 10%\n  bucket 22: 40%\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 24: 20%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 24: 30%\n  bucket 23: 70%\n  bucket 22: 70%\n  bucket 24: 40%\n  bucket 23: 80%\n  bucket 22: 80%\n  bucket 24: 50%\n  bucket 23: 90%\n  bucket 22: 90%\n  bucket 24: 60%\n  bucket 23: 100%\n  bucket 22: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  bucket 25: 50%\n  Calculating Z arrays for bucket 26\n  bucket 25: 60%\n  bucket 25: 70%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 80%\n  bucket 26: 10%\n  bucket 25: 90%\n  bucket 26: 20%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\nGetting block 29 of 60\n  bucket 27: 90%\n  bucket 28: 60%\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Calculating Z arrays for bucket 31\n  bucket 30: 10%\n  bucket 30: 20%\n  Entering block accumulator loop for bucket 31:\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  bucket 30: 30%\n  Calculating Z arrays for bucket 32\n  bucket 30: 40%\n  bucket 31: 10%\n  Entering block accumulator loop for bucket 32:\n  bucket 30: 50%\n  bucket 31: 20%\n  bucket 30: 60%\n  bucket 32: 10%\n  bucket 30: 70%\n  bucket 32: 20%\n  bucket 31: 30%\n  bucket 30: 80%\n  bucket 32: 30%\n  bucket 31: 40%\n  bucket 30: 90%\n  bucket 31: 50%\n  bucket 32: 40%\n  bucket 30: 100%\n  bucket 31: 60%\n  Sorting block of length 124 for bucket 30\n  bucket 32: 50%\n  (Using difference cover)\n  bucket 31: 70%\n  bucket 32: 60%\n  bucket 31: 80%\n  bucket 32: 70%\n  bucket 31: 90%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 90%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  bucket 35: 90%\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Entering block accumulator loop for bucket 36:\n  Calculating Z arrays for bucket 37\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 10%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 37: 10%\n  bucket 36: 40%\n  bucket 37: 20%\n  bucket 36: 50%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 36: 60%\n  bucket 37: 50%\n  bucket 36: 70%\n  bucket 37: 60%\n  Sorting block time: 00:00:00\n  bucket 36: 80%\nReturning block of 113 for bucket 35\n  bucket 37: 70%\n  bucket 36: 90%\n  bucket 37: 80%\n  bucket 36: 100%\n  bucket 37: 90%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  bucket 38: 100%\n  Calculating Z arrays for bucket 39\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 10%\n  bucket 41: 10%\n  bucket 40: 20%\n  bucket 41: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 41: 30%\n  bucket 40: 80%\n  bucket 41: 40%\n  bucket 40: 90%\n  bucket 41: 50%\n  bucket 40: 100%\n  bucket 41: 60%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 44:\nGetting block 46 of 60\n  Entering block accumulator loop for bucket 45:\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 44: 10%\n  bucket 45: 10%\n  bucket 44: 20%\n  bucket 45: 20%\n  Entering block accumulator loop for bucket 46:\n  bucket 44: 30%\n  bucket 45: 30%\n  bucket 44: 40%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  bucket 46: 10%\n  bucket 44: 50%\n  Calculating Z arrays for bucket 47\n  bucket 45: 40%\n  bucket 44: 60%\n  bucket 46: 20%\n  bucket 45: 50%\n  bucket 44: 70%\n  bucket 46: 30%\n  bucket 45: 60%\n  bucket 44: 80%\n  bucket 46: 40%\n  Entering block accumulator loop for bucket 47:\n  bucket 45: 70%\n  bucket 46: 50%\n  bucket 44: 90%\n  bucket 45: 80%\n  bucket 46: 60%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 47: 10%\n  bucket 46: 70%\n  bucket 45: 90%\n  bucket 46: 80%\n  bucket 45: 100%\n  bucket 47: 20%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 90%\n  bucket 47: 30%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  bucket 48: 40%\n  Calculating Z arrays for bucket 49\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 49: 10%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Calculating Z arrays for bucket 52\n  bucket 51: 10%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 20%\n  bucket 52: 10%\n  bucket 51: 30%\n  bucket 52: 20%\n  bucket 51: 40%\n  bucket 52: 30%\n  bucket 51: 50%\n  bucket 52: 40%\n  bucket 51: 60%\n  bucket 52: 50%\n  bucket 51: 70%\n  bucket 52: 60%\n  bucket 51: 80%\n  bucket 52: 70%\n  bucket 51: 90%\n  bucket 52: 80%\n  bucket 51: 100%\n  bucket 52: 90%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 53: 40%\n  bucket 54: 40%\n  bucket 53: 50%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 53: 70%\n  bucket 54: 80%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\nGetting block 56 of 60\n  Calculating Z arrays for bucket 55\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 55: 20%\n  bucket 56: 30%\n  bucket 55: 30%\n  bucket 56: 40%\n  bucket 55: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 56: 90%\n  bucket 55: 70%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 58\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 58:\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 10%\n  bucket 59: 10%\n  bucket 58: 20%\n  bucket 59: 20%\n  bucket 58: 30%\n  bucket 59: 30%\n  bucket 58: 40%\n  bucket 59: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 59: 50%\n  bucket 58: 70%\n  bucket 59: 60%\n  bucket 58: 80%\n  bucket 59: 70%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\nHISAT2 summary stats:\n\tTotal reads: 10\n\t\tAligned 0 time: 0 (0.00%)\n\t\tAligned 1 time: 10 (100.00%)\n\t\tAligned >1 times: 0 (0.00%)\n\tOverall alignment rate: 100.00%\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\nHISAT2 summary stats:\n\tTotal reads: 10\n\t\tAligned 0 time: 0 (0.00%)\n\t\tAligned 1 time: 10 (100.00%)\n\t\tAligned >1 times: 0 (0.00%)\n\tOverall alignment rate: 100.00%\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 3 of 60\nGetting block 4 of 60\nGetting block 5 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 4\nGetting block 7 of 60\n  Entering block accumulator loop for bucket 1:\nGetting block 6 of 60\n  Calculating Z arrays for bucket 4\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 3\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 3:\nGetting block 2 of 60\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 7\n  bucket 4: 10%\n  Reserving size (126) for bucket 2\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 1: 20%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 8\n  bucket 6: 10%\n  bucket 3: 20%\n  bucket 5: 10%\n  bucket 4: 20%\n  bucket 1: 30%\n  bucket 7: 10%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 6: 20%\n  bucket 3: 40%\n  bucket 7: 20%\n  bucket 5: 20%\n  bucket 1: 40%\n  bucket 4: 40%\n  bucket 3: 50%\n  bucket 1: 50%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 1: 60%\n  bucket 5: 40%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 1: 70%\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 4: 60%\n  bucket 1: 80%\n  bucket 5: 60%\n  bucket 7: 30%\n  bucket 6: 50%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 1: 90%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 3: 80%\n  bucket 4: 80%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  Calculating Z arrays for bucket 2\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 3: 90%\n  bucket 4: 90%\n  bucket 1: 100%\n  bucket 5: 80%\n  bucket 3: 100%\n  bucket 8: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 7: 60%\n  bucket 6: 80%\n  Sorting block of length 42 for bucket 1\n  bucket 5: 90%\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 8: 20%\n  bucket 5: 100%\n  bucket 6: 90%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 6: 100%\n  bucket 7: 80%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 8: 30%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 2: 10%\n  bucket 7: 90%\n  bucket 8: 40%\n  bucket 7: 100%\n  bucket 2: 20%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 2: 30%\n  bucket 8: 60%\n  bucket 2: 40%\n  bucket 8: 70%\n  bucket 2: 50%\n  bucket 8: 80%\n  bucket 2: 60%\n  bucket 8: 90%\n  bucket 2: 70%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 2: 90%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 10 of 60\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 11: 20%\n  bucket 10: 10%\n  bucket 11: 30%\n  bucket 10: 20%\n  bucket 11: 40%\n  bucket 10: 30%\n  bucket 11: 50%\n  bucket 10: 40%\n  bucket 11: 60%\n  bucket 10: 50%\n  bucket 11: 70%\n  bucket 10: 60%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 10: 70%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Entering block accumulator loop for bucket 12:\nGetting block 14 of 60\n  Calculating Z arrays for bucket 13\n  Reserving size (126) for bucket 14\n  bucket 12: 10%\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Calculating Z arrays for bucket 15\n  bucket 12: 20%\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 12: 30%\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 10%\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 12: 40%\n  bucket 15: 10%\n  bucket 12: 50%\n  bucket 15: 20%\n  bucket 12: 60%\n  bucket 13: 20%\n  bucket 15: 30%\n  bucket 13: 30%\n  bucket 12: 70%\n  bucket 16: 20%\n  bucket 14: 20%\n  bucket 16: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 12: 80%\n  bucket 15: 40%\n  bucket 14: 40%\n  bucket 12: 90%\n  bucket 13: 50%\n  bucket 15: 50%\n  bucket 12: 100%\n  bucket 14: 50%\n  Sorting block of length 82 for bucket 12\n  bucket 15: 60%\n  bucket 14: 60%\n  bucket 15: 70%\n  bucket 13: 60%\n  bucket 16: 40%\n  bucket 14: 70%\n  bucket 15: 80%\n  bucket 13: 70%\n  bucket 16: 50%\n  bucket 14: 80%\n  bucket 15: 90%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 16: 60%\n  bucket 15: 100%\n  bucket 16: 70%\n  bucket 13: 90%\n  bucket 14: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block of length 82 for bucket 14\n  bucket 16: 80%\n  (Using difference cover)\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  bucket 16: 90%\n  bucket 16: 100%\n  (Using difference cover)\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 30%\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  bucket 17: 40%\n  bucket 18: 10%\n  Calculating Z arrays for bucket 19\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 19: 30%\n  bucket 17: 100%\n  bucket 18: 60%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 19: 40%\n  bucket 18: 70%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 19: 60%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 10%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 20%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 20: 90%\n  bucket 21: 80%\n  bucket 20: 100%\n  bucket 21: 90%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 60\n  Entering block accumulator loop for bucket 23:\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 22:\n  bucket 23: 10%\n  bucket 22: 10%\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 22: 20%\n  bucket 23: 30%\n  bucket 22: 30%\n  bucket 23: 40%\n  bucket 24: 10%\n  bucket 22: 40%\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 24: 20%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 24: 30%\n  bucket 23: 70%\n  bucket 22: 70%\n  bucket 24: 40%\n  bucket 23: 80%\n  bucket 22: 80%\n  bucket 24: 50%\n  bucket 23: 90%\n  bucket 22: 90%\n  bucket 24: 60%\n  bucket 23: 100%\n  bucket 22: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  bucket 25: 50%\n  Calculating Z arrays for bucket 26\n  bucket 25: 60%\n  bucket 25: 70%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 80%\n  bucket 26: 10%\n  bucket 25: 90%\n  bucket 26: 20%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 27: 80%\nGetting block 29 of 60\n  bucket 27: 90%\n  bucket 28: 60%\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Calculating Z arrays for bucket 31\n  bucket 30: 10%\n  bucket 30: 20%\n  Entering block accumulator loop for bucket 31:\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  bucket 30: 30%\n  Calculating Z arrays for bucket 32\n  bucket 30: 40%\n  bucket 31: 10%\n  Entering block accumulator loop for bucket 32:\n  bucket 30: 50%\n  bucket 31: 20%\n  bucket 30: 60%\n  bucket 32: 10%\n  bucket 30: 70%\n  bucket 32: 20%\n  bucket 31: 30%\n  bucket 30: 80%\n  bucket 32: 30%\n  bucket 31: 40%\n  bucket 30: 90%\n  bucket 31: 50%\n  bucket 32: 40%\n  bucket 30: 100%\n  bucket 31: 60%\n  Sorting block of length 124 for bucket 30\n  bucket 32: 50%\n  (Using difference cover)\n  bucket 31: 70%\n  bucket 32: 60%\n  bucket 31: 80%\n  bucket 32: 70%\n  bucket 31: 90%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 90%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  bucket 35: 90%\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Entering block accumulator loop for bucket 36:\n  Calculating Z arrays for bucket 37\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 10%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 37: 10%\n  bucket 36: 40%\n  bucket 37: 20%\n  bucket 36: 50%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 36: 60%\n  bucket 37: 50%\n  bucket 36: 70%\n  bucket 37: 60%\n  Sorting block time: 00:00:00\n  bucket 36: 80%\nReturning block of 113 for bucket 35\n  bucket 37: 70%\n  bucket 36: 90%\n  bucket 37: 80%\n  bucket 36: 100%\n  bucket 37: 90%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  bucket 38: 100%\n  Calculating Z arrays for bucket 39\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 10%\n  bucket 41: 10%\n  bucket 40: 20%\n  bucket 41: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 41: 30%\n  bucket 40: 80%\n  bucket 41: 40%\n  bucket 40: 90%\n  bucket 41: 50%\n  bucket 40: 100%\n  bucket 41: 60%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 44:\nGetting block 46 of 60\n  Entering block accumulator loop for bucket 45:\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 44: 10%\n  bucket 45: 10%\n  bucket 44: 20%\n  bucket 45: 20%\n  Entering block accumulator loop for bucket 46:\n  bucket 44: 30%\n  bucket 45: 30%\n  bucket 44: 40%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  bucket 46: 10%\n  bucket 44: 50%\n  Calculating Z arrays for bucket 47\n  bucket 45: 40%\n  bucket 44: 60%\n  bucket 46: 20%\n  bucket 45: 50%\n  bucket 44: 70%\n  bucket 46: 30%\n  bucket 45: 60%\n  bucket 44: 80%\n  bucket 46: 40%\n  Entering block accumulator loop for bucket 47:\n  bucket 45: 70%\n  bucket 46: 50%\n  bucket 44: 90%\n  bucket 45: 80%\n  bucket 46: 60%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 47: 10%\n  bucket 46: 70%\n  bucket 45: 90%\n  bucket 46: 80%\n  bucket 45: 100%\n  bucket 47: 20%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 90%\n  bucket 47: 30%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  bucket 48: 40%\n  Calculating Z arrays for bucket 49\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 49: 10%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Calculating Z arrays for bucket 52\n  bucket 51: 10%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 20%\n  bucket 52: 10%\n  bucket 51: 30%\n  bucket 52: 20%\n  bucket 51: 40%\n  bucket 52: 30%\n  bucket 51: 50%\n  bucket 52: 40%\n  bucket 51: 60%\n  bucket 52: 50%\n  bucket 51: 70%\n  bucket 52: 60%\n  bucket 51: 80%\n  bucket 52: 70%\n  bucket 51: 90%\n  bucket 52: 80%\n  bucket 51: 100%\n  bucket 52: 90%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 53: 40%\n  bucket 54: 40%\n  bucket 53: 50%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 53: 70%\n  bucket 54: 80%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\nGetting block 56 of 60\n  Calculating Z arrays for bucket 55\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 55: 20%\n  bucket 56: 30%\n  bucket 55: 30%\n  bucket 56: 40%\n  bucket 55: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 56: 90%\n  bucket 55: 70%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 58\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 58:\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 10%\n  bucket 59: 10%\n  bucket 58: 20%\n  bucket 59: 20%\n  bucket 58: 30%\n  bucket 59: 30%\n  bucket 58: 40%\n  bucket 59: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 59: 50%\n  bucket 58: 70%\n  bucket 59: 60%\n  bucket 58: 80%\n  bucket 59: 70%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:55:11", "plugin": "core", "name": "end_epoch", "raw_value": "1708671311.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:55:10", "plugin": "core", "name": "start_epoch", "raw_value": "1708671310.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-10", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 10, "time_seconds": 25.88382911682129, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "bd7da511b9bdf53d"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "77865d1273ea6201"}, "library|rna_strandness": "R", "library|type": "single", "sum|new_summary": true, "sum|summary_file": true}, "job": {"model_class": "Job", "id": "eb51320f4d006cc2", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:02:26.597325", "create_time": "2024-02-23T07:02:16.036323", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-zvmgn", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/f/1/4/dataset_f148ea77-a9b7-4c54-8429-6df855011df4.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/2/b/2/dataset_2b2ba65c-b519-4c52-af85-48079fadf693.dat' input_f.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'     -U 'input_f.fastq'      --rna-strandness R                        --new-summary  --summary-file summary.txt   | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/6/d/c/dataset_6dc6a067-d379-4881-a0f7-5be0a7cb903a.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": true, \"summary_file\": true}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 236, \"src\": \"hda\"}]}, \"rna_strandness\": \"R\", \"type\": \"single\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 235, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "bd7da511b9bdf53d", "src": "hda", "uuid": "f148ea77-a9b7-4c54-8429-6df855011df4"}, "library|input_1": {"id": "77865d1273ea6201", "src": "hda", "uuid": "2b2ba65c-b519-4c52-af85-48079fadf693"}}, "outputs": {"output_alignments": {"id": "7258faf6b5207f43", "src": "hda", "uuid": "6dc6a067-d379-4881-a0f7-5be0a7cb903a"}, "summary_file": {"id": "d0a575891c9966fc", "src": "hda", "uuid": "7a85f156-d687-4681-8cd7-e2f2777515d4"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 2:\n  bucket 2: 10%\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 1:\n  bucket 2: 30%\nGetting block 4 of 60\n  bucket 1: 10%\n  bucket 2: 40%\n  Calculating Z arrays for bucket 3\n  bucket 1: 20%\nGetting block 5 of 60\n  Reserving size (126) for bucket 4\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 2: 50%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 60%\n  bucket 1: 30%\n  Reserving size (126) for bucket 5\n  bucket 2: 70%\n  bucket 3: 10%\nGetting block 8 of 60\n  Calculating Z arrays for bucket 5\n  bucket 3: 20%\n  Calculating Z arrays for bucket 7\n  bucket 2: 80%\n  Calculating Z arrays for bucket 4\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 30%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 90%\n  Reserving size (126) for bucket 8\n  bucket 7: 10%\n  bucket 2: 100%\n  bucket 5: 10%\n  bucket 3: 40%\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 6:\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Calculating Z arrays for bucket 8\n  bucket 3: 50%\n  bucket 4: 20%\n  bucket 7: 20%\n  bucket 5: 20%\n  bucket 1: 40%\n  bucket 7: 30%\n  bucket 3: 60%\n  bucket 4: 30%\n  bucket 1: 50%\n  bucket 7: 40%\n  bucket 4: 40%\n  bucket 6: 10%\n  bucket 3: 70%\n  bucket 7: 50%\n  bucket 5: 30%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 6: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 1: 60%\n  bucket 5: 40%\n  bucket 7: 60%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 5: 50%\n  bucket 1: 70%\n  bucket 4: 70%\n  bucket 7: 70%\n  bucket 6: 30%\n  bucket 4: 80%\n  bucket 8: 10%\n  bucket 5: 60%\n  bucket 3: 100%\n  bucket 7: 80%\n  bucket 8: 20%\n  bucket 1: 80%\n  bucket 5: 70%\n  bucket 7: 90%\n  bucket 1: 90%\n  bucket 4: 90%\n  bucket 5: 80%\n  bucket 8: 30%\n  Sorting block of length 106 for bucket 3\n  bucket 7: 100%\n  (Using difference cover)\n  bucket 8: 40%\n  bucket 1: 100%\n  bucket 6: 40%\n  bucket 5: 90%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 5: 100%\n  bucket 6: 50%\n  bucket 8: 60%\n  Sorting block time: 00:00:00\n  Sorting block of length 75 for bucket 7\n  bucket 8: 70%\n  (Using difference cover)\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\nReturning block of 85 for bucket 2\n  bucket 8: 80%\n  bucket 6: 60%\n  bucket 8: 90%\n  bucket 6: 70%\n  bucket 8: 100%\n  bucket 4: 100%\n  bucket 6: 80%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  bucket 13: 10%\n  bucket 12: 30%\n  bucket 13: 20%\n  bucket 12: 40%\n  bucket 13: 30%\n  bucket 12: 50%\n  bucket 13: 40%\n  bucket 12: 60%\n  bucket 13: 50%\n  bucket 12: 70%\n  bucket 13: 60%\n  bucket 12: 80%\n  bucket 13: 70%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 12: 90%\n  bucket 13: 80%\n  bucket 12: 100%\n  bucket 13: 90%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 13: 100%\n  Entering block accumulator loop for bucket 14:\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 10%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 20%\n  bucket 15: 10%\n  bucket 14: 30%\n  bucket 15: 20%\n  bucket 14: 40%\n  bucket 15: 30%\n  bucket 14: 50%\n  bucket 15: 40%\n  bucket 14: 60%\n  bucket 15: 50%\n  bucket 14: 70%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 15: 60%\n  bucket 14: 100%\n  bucket 15: 70%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Entering block accumulator loop for bucket 16:\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  Entering block accumulator loop for bucket 21:\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 21: 10%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 21: 20%\n  bucket 19: 80%\n  bucket 21: 30%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 21: 40%\n  bucket 20: 100%\n  bucket 19: 100%\n  Sorting block of length 97 for bucket 20\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 21: 50%\n  (Using difference cover)\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 22:\n  bucket 23: 10%\n  bucket 22: 10%\n  bucket 23: 20%\n  bucket 22: 20%\n  bucket 23: 30%\n  bucket 22: 30%\n  bucket 23: 40%\n  bucket 22: 40%\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 22: 70%\n  bucket 23: 80%\n  bucket 22: 80%\n  bucket 23: 90%\n  bucket 22: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 40%\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\nGetting block 28 of 60\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 80%\n  bucket 26: 70%\n  bucket 27: 90%\n  bucket 26: 80%\n  Entering block accumulator loop for bucket 28:\n  bucket 26: 90%\n  bucket 28: 10%\n  bucket 26: 100%\n  bucket 27: 100%\n  bucket 28: 20%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Reserving size (126) for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Entering block accumulator loop for bucket 31:\n  Calculating Z arrays for bucket 30\n  bucket 31: 10%\n  Entering block accumulator loop for bucket 30:\n  bucket 31: 20%\n  Calculating Z arrays for bucket 32\n  bucket 30: 10%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 30: 20%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 50%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 31: 60%\n  bucket 32: 10%\n  bucket 30: 50%\n  bucket 31: 70%\n  bucket 32: 20%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 32: 30%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 40%\n  bucket 30: 60%\n  bucket 32: 50%\n  bucket 30: 70%\n  bucket 32: 60%\n  bucket 30: 80%\n  bucket 32: 70%\n  bucket 30: 90%\n  bucket 32: 80%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\n  bucket 34: 10%\n  bucket 33: 20%\n  bucket 34: 20%\n  bucket 33: 30%\n  bucket 34: 30%\n  bucket 33: 40%\n  bucket 34: 40%\n  bucket 33: 50%\n  bucket 34: 50%\n  bucket 33: 60%\n  bucket 34: 60%\n  bucket 33: 70%\n  bucket 34: 70%\n  bucket 33: 80%\n  bucket 34: 80%\n  bucket 33: 90%\n  bucket 34: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 30%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 40%\n  bucket 36: 10%\n  bucket 35: 50%\n  bucket 36: 20%\n  bucket 35: 60%\n  bucket 36: 30%\n  bucket 35: 70%\n  bucket 36: 40%\n  bucket 35: 80%\n  bucket 36: 50%\n  bucket 35: 90%\n  bucket 36: 60%\n  bucket 35: 100%\n  bucket 36: 70%\n  bucket 36: 80%\n  Sorting block of length 112 for bucket 35\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 37:\n  bucket 38: 10%\n  bucket 37: 10%\n  bucket 38: 20%\n  bucket 37: 20%\n  bucket 38: 30%\n  bucket 37: 30%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  bucket 37: 40%\n  bucket 37: 50%\n  Entering block accumulator loop for bucket 39:\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 39: 10%\n  bucket 37: 80%\n  bucket 39: 20%\n  bucket 37: 90%\n  bucket 39: 30%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block time: 00:00:00\n  bucket 38: 40%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\nReturning block of 60 for bucket 37\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 50%\n  bucket 46: 60%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 47: 10%\n  bucket 46: 90%\n  bucket 47: 20%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 10%\n  bucket 51: 10%\n  bucket 50: 20%\n  bucket 51: 20%\n  bucket 50: 30%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 50: 40%\n  bucket 51: 60%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  bucket 51: 70%\n  bucket 50: 50%\n  bucket 51: 80%\n  bucket 50: 60%\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  bucket 51: 90%\n  bucket 50: 70%\n  Calculating Z arrays for bucket 53\n  bucket 51: 100%\n  bucket 50: 80%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 50: 90%\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 53:\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 53: 10%\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 53: 20%\n  bucket 52: 40%\n  bucket 53: 30%\n  bucket 52: 50%\n  bucket 53: 40%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 53: 50%\n  bucket 52: 90%\n  Sorting block time: 00:00:00\n  bucket 52: 100%\n  bucket 53: 60%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\nReturning block of 92 for bucket 51\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 57:\n  Entering block accumulator loop for bucket 56:\n  bucket 57: 10%\n  bucket 56: 10%\n  bucket 57: 20%\n  bucket 56: 20%\n  bucket 57: 30%\n  bucket 56: 30%\n  bucket 57: 40%\n  bucket 56: 40%\n  bucket 57: 50%\n  bucket 56: 50%\n  bucket 57: 60%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 57: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 57: 80%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\nHISAT2 summary stats:\n\tTotal reads: 10\n\t\tAligned 0 time: 0 (0.00%)\n\t\tAligned 1 time: 10 (100.00%)\n\t\tAligned >1 times: 0 (0.00%)\n\tOverall alignment rate: 100.00%\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\nHISAT2 summary stats:\n\tTotal reads: 10\n\t\tAligned 0 time: 0 (0.00%)\n\t\tAligned 1 time: 10 (100.00%)\n\t\tAligned >1 times: 0 (0.00%)\n\tOverall alignment rate: 100.00%\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 2:\n  bucket 2: 10%\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 1:\n  bucket 2: 30%\nGetting block 4 of 60\n  bucket 1: 10%\n  bucket 2: 40%\n  Calculating Z arrays for bucket 3\n  bucket 1: 20%\nGetting block 5 of 60\n  Reserving size (126) for bucket 4\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 2: 50%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 60%\n  bucket 1: 30%\n  Reserving size (126) for bucket 5\n  bucket 2: 70%\n  bucket 3: 10%\nGetting block 8 of 60\n  Calculating Z arrays for bucket 5\n  bucket 3: 20%\n  Calculating Z arrays for bucket 7\n  bucket 2: 80%\n  Calculating Z arrays for bucket 4\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 30%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 90%\n  Reserving size (126) for bucket 8\n  bucket 7: 10%\n  bucket 2: 100%\n  bucket 5: 10%\n  bucket 3: 40%\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 6:\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Calculating Z arrays for bucket 8\n  bucket 3: 50%\n  bucket 4: 20%\n  bucket 7: 20%\n  bucket 5: 20%\n  bucket 1: 40%\n  bucket 7: 30%\n  bucket 3: 60%\n  bucket 4: 30%\n  bucket 1: 50%\n  bucket 7: 40%\n  bucket 4: 40%\n  bucket 6: 10%\n  bucket 3: 70%\n  bucket 7: 50%\n  bucket 5: 30%\n  bucket 4: 50%\n  bucket 3: 80%\n  bucket 6: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 1: 60%\n  bucket 5: 40%\n  bucket 7: 60%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 5: 50%\n  bucket 1: 70%\n  bucket 4: 70%\n  bucket 7: 70%\n  bucket 6: 30%\n  bucket 4: 80%\n  bucket 8: 10%\n  bucket 5: 60%\n  bucket 3: 100%\n  bucket 7: 80%\n  bucket 8: 20%\n  bucket 1: 80%\n  bucket 5: 70%\n  bucket 7: 90%\n  bucket 1: 90%\n  bucket 4: 90%\n  bucket 5: 80%\n  bucket 8: 30%\n  Sorting block of length 106 for bucket 3\n  bucket 7: 100%\n  (Using difference cover)\n  bucket 8: 40%\n  bucket 1: 100%\n  bucket 6: 40%\n  bucket 5: 90%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 5: 100%\n  bucket 6: 50%\n  bucket 8: 60%\n  Sorting block time: 00:00:00\n  Sorting block of length 75 for bucket 7\n  bucket 8: 70%\n  (Using difference cover)\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\nReturning block of 85 for bucket 2\n  bucket 8: 80%\n  bucket 6: 60%\n  bucket 8: 90%\n  bucket 6: 70%\n  bucket 8: 100%\n  bucket 4: 100%\n  bucket 6: 80%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  bucket 13: 10%\n  bucket 12: 30%\n  bucket 13: 20%\n  bucket 12: 40%\n  bucket 13: 30%\n  bucket 12: 50%\n  bucket 13: 40%\n  bucket 12: 60%\n  bucket 13: 50%\n  bucket 12: 70%\n  bucket 13: 60%\n  bucket 12: 80%\n  bucket 13: 70%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 12: 90%\n  bucket 13: 80%\n  bucket 12: 100%\n  bucket 13: 90%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 13: 100%\n  Entering block accumulator loop for bucket 14:\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 10%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 20%\n  bucket 15: 10%\n  bucket 14: 30%\n  bucket 15: 20%\n  bucket 14: 40%\n  bucket 15: 30%\n  bucket 14: 50%\n  bucket 15: 40%\n  bucket 14: 60%\n  bucket 15: 50%\n  bucket 14: 70%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 15: 60%\n  bucket 14: 100%\n  bucket 15: 70%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Entering block accumulator loop for bucket 16:\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  Entering block accumulator loop for bucket 21:\n  bucket 19: 60%\n  bucket 20: 70%\n  bucket 21: 10%\n  bucket 19: 70%\n  bucket 20: 80%\n  bucket 21: 20%\n  bucket 19: 80%\n  bucket 21: 30%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 21: 40%\n  bucket 20: 100%\n  bucket 19: 100%\n  Sorting block of length 97 for bucket 20\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 21: 50%\n  (Using difference cover)\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 23:\n  Entering block accumulator loop for bucket 22:\n  bucket 23: 10%\n  bucket 22: 10%\n  bucket 23: 20%\n  bucket 22: 20%\n  bucket 23: 30%\n  bucket 22: 30%\n  bucket 23: 40%\n  bucket 22: 40%\n  bucket 23: 50%\n  bucket 22: 50%\n  bucket 23: 60%\n  bucket 22: 60%\n  bucket 23: 70%\n  bucket 22: 70%\n  bucket 23: 80%\n  bucket 22: 80%\n  bucket 23: 90%\n  bucket 22: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 40%\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\nGetting block 28 of 60\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 80%\n  bucket 26: 70%\n  bucket 27: 90%\n  bucket 26: 80%\n  Entering block accumulator loop for bucket 28:\n  bucket 26: 90%\n  bucket 28: 10%\n  bucket 26: 100%\n  bucket 27: 100%\n  bucket 28: 20%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Reserving size (126) for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Entering block accumulator loop for bucket 31:\n  Calculating Z arrays for bucket 30\n  bucket 31: 10%\n  Entering block accumulator loop for bucket 30:\n  bucket 31: 20%\n  Calculating Z arrays for bucket 32\n  bucket 30: 10%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 30: 20%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 50%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 31: 60%\n  bucket 32: 10%\n  bucket 30: 50%\n  bucket 31: 70%\n  bucket 32: 20%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 32: 30%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 40%\n  bucket 30: 60%\n  bucket 32: 50%\n  bucket 30: 70%\n  bucket 32: 60%\n  bucket 30: 80%\n  bucket 32: 70%\n  bucket 30: 90%\n  bucket 32: 80%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\n  bucket 34: 10%\n  bucket 33: 20%\n  bucket 34: 20%\n  bucket 33: 30%\n  bucket 34: 30%\n  bucket 33: 40%\n  bucket 34: 40%\n  bucket 33: 50%\n  bucket 34: 50%\n  bucket 33: 60%\n  bucket 34: 60%\n  bucket 33: 70%\n  bucket 34: 70%\n  bucket 33: 80%\n  bucket 34: 80%\n  bucket 33: 90%\n  bucket 34: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 30%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 40%\n  bucket 36: 10%\n  bucket 35: 50%\n  bucket 36: 20%\n  bucket 35: 60%\n  bucket 36: 30%\n  bucket 35: 70%\n  bucket 36: 40%\n  bucket 35: 80%\n  bucket 36: 50%\n  bucket 35: 90%\n  bucket 36: 60%\n  bucket 35: 100%\n  bucket 36: 70%\n  bucket 36: 80%\n  Sorting block of length 112 for bucket 35\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 37:\n  bucket 38: 10%\n  bucket 37: 10%\n  bucket 38: 20%\n  bucket 37: 20%\n  bucket 38: 30%\n  bucket 37: 30%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  bucket 37: 40%\n  bucket 37: 50%\n  Entering block accumulator loop for bucket 39:\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 39: 10%\n  bucket 37: 80%\n  bucket 39: 20%\n  bucket 37: 90%\n  bucket 39: 30%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block time: 00:00:00\n  bucket 38: 40%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\nReturning block of 60 for bucket 37\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 50%\n  bucket 46: 60%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 47: 10%\n  bucket 46: 90%\n  bucket 47: 20%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 10%\n  bucket 51: 10%\n  bucket 50: 20%\n  bucket 51: 20%\n  bucket 50: 30%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 50: 40%\n  bucket 51: 60%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  bucket 51: 70%\n  bucket 50: 50%\n  bucket 51: 80%\n  bucket 50: 60%\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  bucket 51: 90%\n  bucket 50: 70%\n  Calculating Z arrays for bucket 53\n  bucket 51: 100%\n  bucket 50: 80%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 50: 90%\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 53:\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 53: 10%\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 53: 20%\n  bucket 52: 40%\n  bucket 53: 30%\n  bucket 52: 50%\n  bucket 53: 40%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 53: 50%\n  bucket 52: 90%\n  Sorting block time: 00:00:00\n  bucket 52: 100%\n  bucket 53: 60%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\nReturning block of 92 for bucket 51\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 57:\n  Entering block accumulator loop for bucket 56:\n  bucket 57: 10%\n  bucket 56: 10%\n  bucket 57: 20%\n  bucket 56: 20%\n  bucket 57: 30%\n  bucket 56: 30%\n  bucket 57: 40%\n  bucket 56: 40%\n  bucket 57: 50%\n  bucket 56: 50%\n  bucket 57: 60%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 57: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 57: 80%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:02:18", "plugin": "core", "name": "end_epoch", "raw_value": "1708671738.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:02:17", "plugin": "core", "name": "start_epoch", "raw_value": "1708671737.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-11", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 11, "time_seconds": 26.35278058052063, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "5740965a3941659f"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "b787eb6d158e2442"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "7ab52321b4e5659f", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:55:45.864000", "create_time": "2024-02-23T06:55:35.273730", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-25fjl", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/0/3/6/dataset_0360281b-7560-441c-9754-7fb67d43c3b0.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        seqtk seq -1 '/galaxy/server/database/objects/e/7/c/dataset_e7cc2570-69fa-4086-a1b1-46bccf0af667.dat' > input_f.fastq && seqtk seq -2 '/galaxy/server/database/objects/e/7/c/dataset_e7cc2570-69fa-4086-a1b1-46bccf0af667.dat' > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/2/7/a/dataset_27a47ce4-c3e9-4821-98d4-82f8011c2e47.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 177, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 176, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "5740965a3941659f", "src": "hda", "uuid": "0360281b-7560-441c-9754-7fb67d43c3b0"}, "library|input_1": {"id": "b787eb6d158e2442", "src": "hda", "uuid": "e7cc2570-69fa-4086-a1b1-46bccf0af667"}}, "outputs": {"output_alignments": {"id": "a212a7ea4c6c7fcf", "src": "hda", "uuid": "27a47ce4-c3e9-4821-98d4-82f8011c2e47"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Entering block accumulator loop for bucket 1:\nGetting block 3 of 60\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 40%\n  bucket 2: 10%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 3\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 100%\n  bucket 2: 40%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 3: 10%\n  bucket 2: 50%\n  bucket 3: 20%\n  bucket 2: 60%\n  bucket 3: 30%\n  bucket 2: 70%\n  bucket 3: 40%\n  bucket 2: 80%\n  bucket 3: 50%\n  bucket 2: 90%\n  Sorting block time: 00:00:00\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  bucket 3: 60%\n  bucket 2: 100%\n  Calculating Z arrays for bucket 4\nReturning block of 43 for bucket 1\n  bucket 3: 70%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 80%\n  Sorting block time: 00:00:00\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 5\nGetting block 7 of 60\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 90%\n  bucket 4: 10%\nGetting block 8 of 60\n  bucket 4: 20%\nReturning block of 85 for bucket 2\n  bucket 4: 30%\n  bucket 5: 10%\n  bucket 3: 100%\n  Reserving size (126) for bucket 8\n  bucket 5: 20%\n  bucket 4: 40%\n  Reserving size (126) for bucket 7\n  bucket 5: 30%\n  bucket 4: 50%\n  Calculating Z arrays for bucket 6\n  bucket 5: 40%\n  bucket 4: 60%\n  Calculating Z arrays for bucket 8\n  Sorting block of length 106 for bucket 3\n  bucket 5: 50%\n  (Using difference cover)\n  bucket 4: 70%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 60%\n  bucket 4: 80%\n  bucket 5: 70%\n  bucket 6: 10%\n  bucket 4: 90%\n  Calculating Z arrays for bucket 7\n  bucket 5: 80%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 20%\n  bucket 4: 100%\n  bucket 5: 90%\n  bucket 8: 10%\n  Sorting block of length 68 for bucket 4\n  bucket 5: 100%\n  (Using difference cover)\n  bucket 6: 30%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 40%\n  bucket 8: 30%\n  bucket 7: 10%\n  bucket 6: 50%\n  bucket 8: 40%\n  bucket 6: 60%\n  bucket 8: 50%\n  bucket 7: 20%\n  bucket 6: 70%\n  bucket 8: 60%\n  bucket 7: 30%\n  bucket 6: 80%\n  bucket 7: 40%\n  bucket 8: 70%\n  bucket 7: 50%\n  bucket 6: 90%\n  bucket 7: 60%\n  bucket 8: 80%\n  bucket 7: 70%\n  bucket 6: 100%\n  bucket 8: 90%\n  Sorting block of length 90 for bucket 6\n  bucket 7: 80%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  (Using difference cover)\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 60\n  bucket 9: 20%\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 60%\n  bucket 10: 10%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 90%\n  bucket 10: 50%\n  bucket 9: 100%\n  bucket 10: 60%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  bucket 10: 80%\n  Calculating Z arrays for bucket 11\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 50%\nGetting block 14 of 60\n  bucket 12: 60%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 70%\n  bucket 13: 10%\n  bucket 12: 80%\n  Reserving size (126) for bucket 14\n  bucket 13: 20%\n  Calculating Z arrays for bucket 14\n  bucket 12: 90%\n  bucket 13: 30%\n  bucket 12: 100%\n  bucket 13: 40%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 50%\n  bucket 13: 60%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 10%\n  bucket 13: 90%\n  bucket 13: 100%\n  bucket 14: 20%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  Sorting block time: 00:00:00\n  bucket 14: 100%\nReturning block of 83 for bucket 12\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 18: 20%\n  bucket 17: 10%\n  bucket 18: 30%\n  bucket 17: 20%\n  bucket 18: 40%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 21 of 60\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 21: 10%\n  bucket 20: 20%\n  bucket 21: 20%\n  bucket 20: 30%\n  bucket 21: 30%\n  bucket 20: 40%\n  bucket 21: 40%\n  bucket 20: 50%\n  bucket 21: 50%\n  bucket 20: 60%\n  bucket 21: 60%\n  bucket 20: 70%\n  bucket 21: 70%\n  bucket 20: 80%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 21: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  bucket 22: 10%\n  Calculating Z arrays for bucket 23\n  bucket 22: 20%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 30%\n  bucket 23: 10%\n  bucket 22: 40%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 22: 50%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 22: 90%\n  bucket 23: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  Sorting block time: 00:00:00\n  bucket 26: 70%\nReturning block of 67 for bucket 25\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  bucket 28: 20%\n  Calculating Z arrays for bucket 29\n  bucket 28: 30%\n  bucket 27: 20%\n  bucket 28: 40%\n  Entering block accumulator loop for bucket 29:\n  bucket 27: 30%\n  bucket 28: 50%\n  bucket 27: 40%\n  bucket 29: 10%\n  bucket 28: 60%\n  bucket 29: 20%\n  bucket 27: 50%\n  bucket 28: 70%\n  bucket 29: 30%\n  bucket 27: 60%\n  bucket 29: 40%\n  bucket 27: 70%\n  bucket 29: 50%\n  bucket 28: 80%\n  bucket 27: 80%\n  bucket 29: 60%\n  bucket 28: 90%\n  bucket 27: 90%\n  bucket 29: 70%\n  bucket 28: 100%\n  bucket 27: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  Sorting block time: 00:00:00\n  bucket 31: 100%\nReturning block of 125 for bucket 30\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 40%\n  bucket 32: 50%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 33: 10%\n  bucket 32: 80%\n  bucket 33: 20%\n  bucket 32: 90%\n  bucket 33: 30%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 40%\n  bucket 34: 50%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 60%\n  bucket 35: 10%\n  bucket 34: 70%\n  bucket 35: 20%\n  bucket 34: 80%\n  bucket 35: 30%\n  bucket 34: 90%\n  bucket 35: 40%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Entering block accumulator loop for bucket 36:\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 37:\n  bucket 38: 10%\n  bucket 37: 10%\n  bucket 38: 20%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 38: 30%\n  bucket 37: 40%\n  bucket 38: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 38: 50%\n  bucket 37: 70%\n  bucket 38: 60%\n  bucket 37: 80%\n  bucket 38: 70%\n  bucket 37: 90%\n  bucket 37: 100%\n  bucket 38: 80%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 10%\n  bucket 39: 50%\n  bucket 40: 20%\n  bucket 41: 10%\n  bucket 40: 30%\n  bucket 41: 20%\n  bucket 40: 40%\n  bucket 41: 30%\n  bucket 40: 50%\n  bucket 41: 40%\n  bucket 40: 60%\n  bucket 41: 50%\n  bucket 40: 70%\n  bucket 41: 60%\n  bucket 40: 80%\n  bucket 41: 70%\n  bucket 40: 90%\n  bucket 41: 80%\n  bucket 40: 100%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 43: 10%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 50%\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  bucket 43: 60%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 70%\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 43: 80%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 43: 90%\n  bucket 44: 50%\n  bucket 43: 100%\n  bucket 44: 60%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  bucket 45: 40%\n  Calculating Z arrays for bucket 46\n  bucket 45: 50%\n  bucket 45: 60%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 70%\n  bucket 46: 10%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 46: 20%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 10%\n  bucket 50: 10%\n  bucket 49: 20%\n  bucket 50: 20%\n  bucket 49: 30%\n  bucket 50: 30%\n  bucket 49: 40%\n  bucket 50: 40%\n  bucket 49: 50%\n  bucket 50: 50%\n  bucket 49: 60%\n  bucket 50: 60%\n  bucket 49: 70%\n  bucket 50: 70%\n  bucket 49: 80%\n  bucket 50: 80%\n  bucket 49: 90%\n  bucket 50: 90%\n  bucket 49: 100%\n  bucket 50: 100%\n  Sorting block of length 74 for bucket 49\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 53: 40%\n  bucket 54: 40%\n  bucket 53: 50%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 54: 60%\n  bucket 53: 70%\n  bucket 54: 70%\n  bucket 53: 80%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 53: 90%\n  bucket 54: 100%\n  bucket 53: 100%\n  Sorting block of length 64 for bucket 54\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  (Using difference cover)\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  bucket 58: 70%\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 59\n  bucket 58: 80%\n  Calculating Z arrays for bucket 57\n  bucket 58: 90%\n  bucket 58: 100%\n  Entering block accumulator loop for bucket 59:\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Entering block accumulator loop for bucket 57:\n  bucket 59: 10%\n  bucket 57: 10%\n  bucket 59: 20%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 59: 30%\n  bucket 57: 60%\n  Sorting block time: 00:00:00\n  bucket 59: 40%\nReturning block of 114 for bucket 58\n  bucket 57: 70%\n  bucket 59: 50%\n  bucket 57: 80%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 57: 90%\n  bucket 59: 80%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  bucket 59: 90%\n  (Using difference cover)\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Entering block accumulator loop for bucket 1:\nGetting block 3 of 60\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 40%\n  bucket 2: 10%\n  bucket 1: 50%\n  bucket 2: 20%\n  bucket 1: 60%\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 3\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 1: 90%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 100%\n  bucket 2: 40%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 3: 10%\n  bucket 2: 50%\n  bucket 3: 20%\n  bucket 2: 60%\n  bucket 3: 30%\n  bucket 2: 70%\n  bucket 3: 40%\n  bucket 2: 80%\n  bucket 3: 50%\n  bucket 2: 90%\n  Sorting block time: 00:00:00\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  bucket 3: 60%\n  bucket 2: 100%\n  Calculating Z arrays for bucket 4\nReturning block of 43 for bucket 1\n  bucket 3: 70%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 80%\n  Sorting block time: 00:00:00\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 5\nGetting block 7 of 60\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 90%\n  bucket 4: 10%\nGetting block 8 of 60\n  bucket 4: 20%\nReturning block of 85 for bucket 2\n  bucket 4: 30%\n  bucket 5: 10%\n  bucket 3: 100%\n  Reserving size (126) for bucket 8\n  bucket 5: 20%\n  bucket 4: 40%\n  Reserving size (126) for bucket 7\n  bucket 5: 30%\n  bucket 4: 50%\n  Calculating Z arrays for bucket 6\n  bucket 5: 40%\n  bucket 4: 60%\n  Calculating Z arrays for bucket 8\n  Sorting block of length 106 for bucket 3\n  bucket 5: 50%\n  (Using difference cover)\n  bucket 4: 70%\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 60%\n  bucket 4: 80%\n  bucket 5: 70%\n  bucket 6: 10%\n  bucket 4: 90%\n  Calculating Z arrays for bucket 7\n  bucket 5: 80%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 20%\n  bucket 4: 100%\n  bucket 5: 90%\n  bucket 8: 10%\n  Sorting block of length 68 for bucket 4\n  bucket 5: 100%\n  (Using difference cover)\n  bucket 6: 30%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 40%\n  bucket 8: 30%\n  bucket 7: 10%\n  bucket 6: 50%\n  bucket 8: 40%\n  bucket 6: 60%\n  bucket 8: 50%\n  bucket 7: 20%\n  bucket 6: 70%\n  bucket 8: 60%\n  bucket 7: 30%\n  bucket 6: 80%\n  bucket 7: 40%\n  bucket 8: 70%\n  bucket 7: 50%\n  bucket 6: 90%\n  bucket 7: 60%\n  bucket 8: 80%\n  bucket 7: 70%\n  bucket 6: 100%\n  bucket 8: 90%\n  Sorting block of length 90 for bucket 6\n  bucket 7: 80%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  (Using difference cover)\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 60\n  bucket 9: 20%\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 60%\n  bucket 10: 10%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 9: 90%\n  bucket 10: 50%\n  bucket 9: 100%\n  bucket 10: 60%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  bucket 10: 80%\n  Calculating Z arrays for bucket 11\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 50%\nGetting block 14 of 60\n  bucket 12: 60%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 70%\n  bucket 13: 10%\n  bucket 12: 80%\n  Reserving size (126) for bucket 14\n  bucket 13: 20%\n  Calculating Z arrays for bucket 14\n  bucket 12: 90%\n  bucket 13: 30%\n  bucket 12: 100%\n  bucket 13: 40%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 50%\n  bucket 13: 60%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 10%\n  bucket 13: 90%\n  bucket 13: 100%\n  bucket 14: 20%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  Sorting block time: 00:00:00\n  bucket 14: 100%\nReturning block of 83 for bucket 12\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 18: 20%\n  bucket 17: 10%\n  bucket 18: 30%\n  bucket 17: 20%\n  bucket 18: 40%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 21 of 60\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 21: 10%\n  bucket 20: 20%\n  bucket 21: 20%\n  bucket 20: 30%\n  bucket 21: 30%\n  bucket 20: 40%\n  bucket 21: 40%\n  bucket 20: 50%\n  bucket 21: 50%\n  bucket 20: 60%\n  bucket 21: 60%\n  bucket 20: 70%\n  bucket 21: 70%\n  bucket 20: 80%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 21: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  bucket 22: 10%\n  Calculating Z arrays for bucket 23\n  bucket 22: 20%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 30%\n  bucket 23: 10%\n  bucket 22: 40%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 22: 50%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 22: 90%\n  bucket 23: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  Sorting block time: 00:00:00\n  bucket 26: 70%\nReturning block of 67 for bucket 25\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  bucket 28: 20%\n  Calculating Z arrays for bucket 29\n  bucket 28: 30%\n  bucket 27: 20%\n  bucket 28: 40%\n  Entering block accumulator loop for bucket 29:\n  bucket 27: 30%\n  bucket 28: 50%\n  bucket 27: 40%\n  bucket 29: 10%\n  bucket 28: 60%\n  bucket 29: 20%\n  bucket 27: 50%\n  bucket 28: 70%\n  bucket 29: 30%\n  bucket 27: 60%\n  bucket 29: 40%\n  bucket 27: 70%\n  bucket 29: 50%\n  bucket 28: 80%\n  bucket 27: 80%\n  bucket 29: 60%\n  bucket 28: 90%\n  bucket 27: 90%\n  bucket 29: 70%\n  bucket 28: 100%\n  bucket 27: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  Sorting block time: 00:00:00\n  bucket 31: 100%\nReturning block of 125 for bucket 30\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 40%\n  bucket 32: 50%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 33: 10%\n  bucket 32: 80%\n  bucket 33: 20%\n  bucket 32: 90%\n  bucket 33: 30%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 40%\n  bucket 34: 50%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 60%\n  bucket 35: 10%\n  bucket 34: 70%\n  bucket 35: 20%\n  bucket 34: 80%\n  bucket 35: 30%\n  bucket 34: 90%\n  bucket 35: 40%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Entering block accumulator loop for bucket 36:\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 37:\n  bucket 38: 10%\n  bucket 37: 10%\n  bucket 38: 20%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 38: 30%\n  bucket 37: 40%\n  bucket 38: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 38: 50%\n  bucket 37: 70%\n  bucket 38: 60%\n  bucket 37: 80%\n  bucket 38: 70%\n  bucket 37: 90%\n  bucket 37: 100%\n  bucket 38: 80%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 10%\n  bucket 39: 50%\n  bucket 40: 20%\n  bucket 41: 10%\n  bucket 40: 30%\n  bucket 41: 20%\n  bucket 40: 40%\n  bucket 41: 30%\n  bucket 40: 50%\n  bucket 41: 40%\n  bucket 40: 60%\n  bucket 41: 50%\n  bucket 40: 70%\n  bucket 41: 60%\n  bucket 40: 80%\n  bucket 41: 70%\n  bucket 40: 90%\n  bucket 41: 80%\n  bucket 40: 100%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 43: 10%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 50%\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  bucket 43: 60%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 70%\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 43: 80%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 43: 90%\n  bucket 44: 50%\n  bucket 43: 100%\n  bucket 44: 60%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  bucket 45: 40%\n  Calculating Z arrays for bucket 46\n  bucket 45: 50%\n  bucket 45: 60%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 70%\n  bucket 46: 10%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 46: 20%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 10%\n  bucket 50: 10%\n  bucket 49: 20%\n  bucket 50: 20%\n  bucket 49: 30%\n  bucket 50: 30%\n  bucket 49: 40%\n  bucket 50: 40%\n  bucket 49: 50%\n  bucket 50: 50%\n  bucket 49: 60%\n  bucket 50: 60%\n  bucket 49: 70%\n  bucket 50: 70%\n  bucket 49: 80%\n  bucket 50: 80%\n  bucket 49: 90%\n  bucket 50: 90%\n  bucket 49: 100%\n  bucket 50: 100%\n  Sorting block of length 74 for bucket 49\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 53: 40%\n  bucket 54: 40%\n  bucket 53: 50%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 54: 60%\n  bucket 53: 70%\n  bucket 54: 70%\n  bucket 53: 80%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 53: 90%\n  bucket 54: 100%\n  bucket 53: 100%\n  Sorting block of length 64 for bucket 54\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  (Using difference cover)\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  bucket 58: 70%\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 59\n  bucket 58: 80%\n  Calculating Z arrays for bucket 57\n  bucket 58: 90%\n  bucket 58: 100%\n  Entering block accumulator loop for bucket 59:\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Entering block accumulator loop for bucket 57:\n  bucket 59: 10%\n  bucket 57: 10%\n  bucket 59: 20%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 59: 30%\n  bucket 57: 60%\n  Sorting block time: 00:00:00\n  bucket 59: 40%\nReturning block of 114 for bucket 58\n  bucket 57: 70%\n  bucket 59: 50%\n  bucket 57: 80%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 57: 90%\n  bucket 59: 80%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  bucket 59: 90%\n  (Using difference cover)\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:55:37", "plugin": "core", "name": "end_epoch", "raw_value": "1708671337.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:55:37", "plugin": "core", "name": "start_epoch", "raw_value": "1708671337.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-11", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 11, "time_seconds": 8.164295434951782, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "hisat2/2.2.1+galaxy1-12", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 12, "time_seconds": 26.79465365409851, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "a5620149f1691925"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "8eb37979a15c5915"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "1f080e8410b93ba2", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:56:12.643665", "create_time": "2024-02-23T06:56:01.735343", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-z58vd", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/d/7/3/dataset_d7306569-7edb-4f77-850f-a858b196468a.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        bzcat '/galaxy/server/database/objects/9/2/6/dataset_92651800-b0c6-40e3-a0dd-0e22f6b58170.dat' | seqtk seq -1 /dev/stdin > input_f.fastq && bzcat '/galaxy/server/database/objects/9/2/6/dataset_92651800-b0c6-40e3-a0dd-0e22f6b58170.dat' | seqtk seq -2 /dev/stdin > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/2/b/a/dataset_2ba936f0-dd96-4290-a51d-bb7b525a664e.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 180, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 179, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "a5620149f1691925", "src": "hda", "uuid": "d7306569-7edb-4f77-850f-a858b196468a"}, "library|input_1": {"id": "8eb37979a15c5915", "src": "hda", "uuid": "92651800-b0c6-40e3-a0dd-0e22f6b58170"}}, "outputs": {"output_alignments": {"id": "b484f6d920d72738", "src": "hda", "uuid": "2ba936f0-dd96-4290-a51d-bb7b525a664e"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\nGetting block 5 of 60\nGetting block 4 of 60\nGetting block 3 of 60\nGetting block 6 of 60\nGetting block 7 of 60\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 1:\nGetting block 8 of 60\n  Reserving size (126) for bucket 2\n  Entering block accumulator loop for bucket 6:\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 7:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 10%\n  bucket 1: 20%\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 2:\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 6: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 8: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 6: 40%\n  bucket 7: 20%\n  bucket 1: 40%\n  bucket 2: 10%\n  bucket 8: 20%\n  bucket 1: 50%\n  bucket 7: 30%\n  bucket 6: 50%\n  bucket 8: 30%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 5: 10%\n  bucket 7: 40%\n  bucket 6: 60%\n  bucket 1: 70%\n  bucket 5: 20%\n  bucket 7: 50%\n  bucket 3: 20%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 5: 30%\n  bucket 8: 50%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 5: 40%\n  bucket 8: 60%\n  bucket 4: 20%\n  bucket 5: 50%\n  bucket 6: 80%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 8: 70%\n  bucket 1: 80%\n  bucket 3: 40%\n  bucket 2: 30%\n  bucket 6: 90%\n  bucket 4: 40%\n  bucket 8: 80%\n  bucket 2: 40%\n  bucket 5: 60%\n  bucket 1: 90%\n  bucket 7: 80%\n  bucket 6: 100%\n  bucket 5: 70%\n  bucket 1: 100%\n  bucket 8: 90%\n  Sorting block of length 90 for bucket 6\n  bucket 5: 80%\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 8: 100%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 5: 90%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 2: 70%\n  Sorting block of length 42 for bucket 1\n  bucket 5: 100%\n  bucket 7: 90%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 3: 70%\n  (Using difference cover)\n  bucket 7: 100%\n  bucket 2: 80%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 2: 100%\n  bucket 3: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 4: 90%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\nGetting block 10 of 60\n  Calculating Z arrays for bucket 9\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  bucket 10: 80%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 13: 10%\n  bucket 12: 40%\n  bucket 13: 20%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 13: 30%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\nGetting block 17 of 60\nGetting block 18 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 16: 60%\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 16: 70%\n  bucket 18: 10%\n  bucket 16: 80%\n  bucket 17: 10%\n  bucket 18: 20%\n  bucket 16: 90%\n  bucket 18: 30%\n  bucket 17: 20%\n  bucket 16: 100%\n  bucket 17: 30%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 18: 40%\n  bucket 17: 40%\n  bucket 18: 50%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 17: 60%\n  bucket 18: 70%\n  bucket 17: 70%\n  bucket 18: 80%\n  bucket 17: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  bucket 24: 10%\n  bucket 23: 30%\n  Calculating Z arrays for bucket 25\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 25: 10%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 25: 20%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 25: 30%\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 25: 40%\n  bucket 24: 90%\n  bucket 25: 50%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 60\n  bucket 26: 10%\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Calculating Z arrays for bucket 29\n  bucket 28: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 29: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  bucket 29: 100%\n  (Using difference cover)\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 70%\n  bucket 31: 80%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 90%\n  bucket 31: 100%\n  bucket 32: 10%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\n  bucket 34: 10%\n  bucket 33: 20%\n  bucket 34: 20%\n  bucket 33: 30%\n  bucket 34: 30%\n  bucket 33: 40%\n  bucket 34: 40%\n  bucket 33: 50%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 33: 60%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 33: 70%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\nGetting block 36 of 60\n  bucket 35: 40%\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 50%\n  bucket 35: 60%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 70%\n  bucket 36: 10%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 36: 20%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\nGetting block 39 of 60\n  bucket 38: 10%\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  bucket 38: 20%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 30%\n  bucket 39: 10%\n  bucket 38: 40%\n  bucket 39: 20%\n  bucket 38: 50%\n  bucket 39: 30%\n  bucket 38: 60%\n  bucket 39: 40%\n  bucket 38: 70%\n  bucket 39: 50%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 39: 60%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 40:\n  bucket 41: 10%\n  bucket 40: 10%\n  bucket 41: 20%\n  bucket 40: 20%\n  bucket 41: 30%\n  bucket 40: 30%\n  bucket 41: 40%\n  bucket 40: 40%\n  bucket 41: 50%\n  bucket 40: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 40: 60%\n  bucket 41: 80%\n  bucket 40: 70%\n  bucket 41: 90%\n  bucket 40: 80%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 42: 40%\n  bucket 42: 50%\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 43: 10%\n  bucket 42: 80%\n  bucket 43: 20%\n  bucket 42: 90%\n  bucket 43: 30%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  bucket 43: 40%\n  (Using difference cover)\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  Entering block accumulator loop for bucket 45:\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 10%\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 45: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 45: 30%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 45: 40%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  bucket 44: 70%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  bucket 49: 10%\n  bucket 48: 20%\n  bucket 49: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 49: 30%\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  bucket 48: 50%\n  Calculating Z arrays for bucket 50\n  bucket 49: 40%\n  bucket 48: 60%\n  bucket 49: 50%\n  bucket 48: 70%\n  Entering block accumulator loop for bucket 50:\n  bucket 48: 80%\n  bucket 50: 10%\n  bucket 48: 90%\n  bucket 50: 20%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 50: 30%\n  bucket 49: 60%\n  bucket 50: 40%\n  bucket 49: 70%\n  bucket 50: 50%\n  bucket 49: 80%\n  bucket 50: 60%\n  bucket 49: 90%\n  bucket 50: 70%\n  bucket 49: 100%\n  bucket 50: 80%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 53: 40%\n  bucket 54: 40%\n  bucket 53: 50%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 54: 60%\n  bucket 53: 70%\n  bucket 54: 70%\n  bucket 53: 80%\n  bucket 54: 80%\n  bucket 53: 90%\n  bucket 54: 90%\n  bucket 53: 100%\n  bucket 54: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  bucket 56: 20%\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Entering block accumulator loop for bucket 57:\n  Calculating Z arrays for bucket 58\n  bucket 56: 30%\n  bucket 57: 10%\n  bucket 56: 40%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 20%\n  bucket 56: 50%\n  bucket 58: 10%\n  bucket 57: 30%\n  bucket 58: 20%\n  bucket 56: 60%\n  bucket 57: 40%\n  bucket 56: 70%\n  bucket 58: 30%\n  bucket 57: 50%\n  bucket 56: 80%\n  bucket 58: 40%\n  bucket 57: 60%\n  bucket 56: 90%\n  bucket 57: 70%\n  bucket 58: 50%\n  bucket 56: 100%\n  bucket 58: 60%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  bucket 57: 80%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Entering block accumulator loop for bucket 59:\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 59: 10%\n  bucket 60: 40%\n  bucket 59: 20%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 59: 30%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 59: 40%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\nGetting block 5 of 60\nGetting block 4 of 60\nGetting block 3 of 60\nGetting block 6 of 60\nGetting block 7 of 60\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 1:\nGetting block 8 of 60\n  Reserving size (126) for bucket 2\n  Entering block accumulator loop for bucket 6:\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 7:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 10%\n  bucket 1: 20%\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 2:\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 6: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 8: 10%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 6: 40%\n  bucket 7: 20%\n  bucket 1: 40%\n  bucket 2: 10%\n  bucket 8: 20%\n  bucket 1: 50%\n  bucket 7: 30%\n  bucket 6: 50%\n  bucket 8: 30%\n  bucket 2: 20%\n  bucket 1: 60%\n  bucket 5: 10%\n  bucket 7: 40%\n  bucket 6: 60%\n  bucket 1: 70%\n  bucket 5: 20%\n  bucket 7: 50%\n  bucket 3: 20%\n  bucket 8: 40%\n  bucket 7: 60%\n  bucket 5: 30%\n  bucket 8: 50%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 5: 40%\n  bucket 8: 60%\n  bucket 4: 20%\n  bucket 5: 50%\n  bucket 6: 80%\n  bucket 3: 30%\n  bucket 4: 30%\n  bucket 8: 70%\n  bucket 1: 80%\n  bucket 3: 40%\n  bucket 2: 30%\n  bucket 6: 90%\n  bucket 4: 40%\n  bucket 8: 80%\n  bucket 2: 40%\n  bucket 5: 60%\n  bucket 1: 90%\n  bucket 7: 80%\n  bucket 6: 100%\n  bucket 5: 70%\n  bucket 1: 100%\n  bucket 8: 90%\n  Sorting block of length 90 for bucket 6\n  bucket 5: 80%\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 8: 100%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 4: 60%\n  bucket 5: 90%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 2: 70%\n  Sorting block of length 42 for bucket 1\n  bucket 5: 100%\n  bucket 7: 90%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 3: 70%\n  (Using difference cover)\n  bucket 7: 100%\n  bucket 2: 80%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 4: 80%\n  bucket 2: 100%\n  bucket 3: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 4: 90%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\nGetting block 10 of 60\n  Calculating Z arrays for bucket 9\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  bucket 10: 80%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 13: 10%\n  bucket 12: 40%\n  bucket 13: 20%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 13: 30%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\nGetting block 17 of 60\nGetting block 18 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 16: 60%\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 16: 70%\n  bucket 18: 10%\n  bucket 16: 80%\n  bucket 17: 10%\n  bucket 18: 20%\n  bucket 16: 90%\n  bucket 18: 30%\n  bucket 17: 20%\n  bucket 16: 100%\n  bucket 17: 30%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 18: 40%\n  bucket 17: 40%\n  bucket 18: 50%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 17: 60%\n  bucket 18: 70%\n  bucket 17: 70%\n  bucket 18: 80%\n  bucket 17: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  bucket 24: 10%\n  bucket 23: 30%\n  Calculating Z arrays for bucket 25\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 23: 50%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 25: 10%\n  bucket 24: 60%\n  bucket 23: 80%\n  bucket 25: 20%\n  bucket 24: 70%\n  bucket 23: 90%\n  bucket 25: 30%\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 25: 40%\n  bucket 24: 90%\n  bucket 25: 50%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\nGetting block 27 of 60\n  bucket 26: 10%\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 27: 10%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 27: 40%\n  bucket 26: 70%\n  bucket 27: 50%\n  bucket 26: 80%\n  bucket 27: 60%\n  bucket 26: 90%\n  bucket 27: 70%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Calculating Z arrays for bucket 29\n  bucket 28: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 29: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  bucket 29: 100%\n  (Using difference cover)\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 70%\n  bucket 31: 80%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 90%\n  bucket 31: 100%\n  bucket 32: 10%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\n  bucket 34: 10%\n  bucket 33: 20%\n  bucket 34: 20%\n  bucket 33: 30%\n  bucket 34: 30%\n  bucket 33: 40%\n  bucket 34: 40%\n  bucket 33: 50%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 33: 60%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 33: 70%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\nGetting block 36 of 60\n  bucket 35: 40%\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 50%\n  bucket 35: 60%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 70%\n  bucket 36: 10%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 36: 20%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\nGetting block 39 of 60\n  bucket 38: 10%\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  bucket 38: 20%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 30%\n  bucket 39: 10%\n  bucket 38: 40%\n  bucket 39: 20%\n  bucket 38: 50%\n  bucket 39: 30%\n  bucket 38: 60%\n  bucket 39: 40%\n  bucket 38: 70%\n  bucket 39: 50%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 39: 60%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 40:\n  bucket 41: 10%\n  bucket 40: 10%\n  bucket 41: 20%\n  bucket 40: 20%\n  bucket 41: 30%\n  bucket 40: 30%\n  bucket 41: 40%\n  bucket 40: 40%\n  bucket 41: 50%\n  bucket 40: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 40: 60%\n  bucket 41: 80%\n  bucket 40: 70%\n  bucket 41: 90%\n  bucket 40: 80%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 42: 40%\n  bucket 42: 50%\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 43: 10%\n  bucket 42: 80%\n  bucket 43: 20%\n  bucket 42: 90%\n  bucket 43: 30%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  bucket 43: 40%\n  (Using difference cover)\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  Entering block accumulator loop for bucket 45:\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 10%\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 45: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 45: 30%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 45: 40%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  bucket 44: 70%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  bucket 49: 10%\n  bucket 48: 20%\n  bucket 49: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 49: 30%\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  bucket 48: 50%\n  Calculating Z arrays for bucket 50\n  bucket 49: 40%\n  bucket 48: 60%\n  bucket 49: 50%\n  bucket 48: 70%\n  Entering block accumulator loop for bucket 50:\n  bucket 48: 80%\n  bucket 50: 10%\n  bucket 48: 90%\n  bucket 50: 20%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 50: 30%\n  bucket 49: 60%\n  bucket 50: 40%\n  bucket 49: 70%\n  bucket 50: 50%\n  bucket 49: 80%\n  bucket 50: 60%\n  bucket 49: 90%\n  bucket 50: 70%\n  bucket 49: 100%\n  bucket 50: 80%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 53: 40%\n  bucket 54: 40%\n  bucket 53: 50%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 54: 60%\n  bucket 53: 70%\n  bucket 54: 70%\n  bucket 53: 80%\n  bucket 54: 80%\n  bucket 53: 90%\n  bucket 54: 90%\n  bucket 53: 100%\n  bucket 54: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  bucket 56: 20%\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Entering block accumulator loop for bucket 57:\n  Calculating Z arrays for bucket 58\n  bucket 56: 30%\n  bucket 57: 10%\n  bucket 56: 40%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 20%\n  bucket 56: 50%\n  bucket 58: 10%\n  bucket 57: 30%\n  bucket 58: 20%\n  bucket 56: 60%\n  bucket 57: 40%\n  bucket 56: 70%\n  bucket 58: 30%\n  bucket 57: 50%\n  bucket 56: 80%\n  bucket 58: 40%\n  bucket 57: 60%\n  bucket 56: 90%\n  bucket 57: 70%\n  bucket 58: 50%\n  bucket 56: 100%\n  bucket 58: 60%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  bucket 57: 80%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Entering block accumulator loop for bucket 59:\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 59: 10%\n  bucket 60: 40%\n  bucket 59: 20%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 59: 30%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 59: 40%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:56:03", "plugin": "core", "name": "end_epoch", "raw_value": "1708671363.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:56:03", "plugin": "core", "name": "start_epoch", "raw_value": "1708671363.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-12", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 12, "time_seconds": 26.971709728240967, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "641954d7690eab5a"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "fce2e0cbe0d427be"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "3916fe6fced061d7", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:03:02.091572", "create_time": "2024-02-23T07:02:50.994690", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-zvghq", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/a/9/e/dataset_a9ecdd5e-a096-4c7b-9039-e3f9346a0b6a.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        bzcat '/galaxy/server/database/objects/2/3/b/dataset_23b6c27e-b5b8-48d6-843a-76e6500cd0b6.dat' | seqtk seq -1 /dev/stdin > input_f.fastq && bzcat '/galaxy/server/database/objects/2/3/b/dataset_23b6c27e-b5b8-48d6-843a-76e6500cd0b6.dat' | seqtk seq -2 /dev/stdin > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/3/e/a/dataset_3ea74277-c4cb-49ef-b2fe-930357733bc1.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 242, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 241, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "641954d7690eab5a", "src": "hda", "uuid": "a9ecdd5e-a096-4c7b-9039-e3f9346a0b6a"}, "library|input_1": {"id": "fce2e0cbe0d427be", "src": "hda", "uuid": "23b6c27e-b5b8-48d6-843a-76e6500cd0b6"}}, "outputs": {"output_alignments": {"id": "6df80d3158f1b4bf", "src": "hda", "uuid": "3ea74277-c4cb-49ef-b2fe-930357733bc1"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\nGetting block 4 of 60\nGetting block 3 of 60\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\nGetting block 5 of 60\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 3:\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 6\n  bucket 2: 10%\n  bucket 1: 10%\n  Calculating Z arrays for bucket 5\n  bucket 2: 20%\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 6\n  bucket 3: 10%\nGetting block 7 of 60\n  bucket 3: 20%\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 4:\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 20%\n  bucket 2: 30%\n  bucket 6: 10%\n  bucket 2: 40%\n  bucket 6: 20%\n  bucket 2: 50%\n  bucket 6: 30%\n  bucket 1: 30%\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 30%\n  Reserving size (126) for bucket 8\n  bucket 4: 20%\n  bucket 6: 40%\n  bucket 1: 40%\n  bucket 3: 40%\n  Calculating Z arrays for bucket 8\n  bucket 5: 10%\n  bucket 2: 60%\n  bucket 1: 50%\n  bucket 6: 50%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 6: 60%\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 70%\n  bucket 1: 70%\n  bucket 5: 30%\n  bucket 2: 80%\n  bucket 6: 80%\n  bucket 4: 40%\n  Calculating Z arrays for bucket 7\n  bucket 5: 40%\n  bucket 1: 80%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 2: 90%\n  bucket 6: 90%\n  bucket 1: 90%\n  bucket 5: 50%\n  bucket 4: 60%\n  bucket 6: 100%\n  bucket 5: 60%\n  Sorting block of length 90 for bucket 6\n  bucket 4: 70%\n  (Using difference cover)\n  bucket 8: 10%\n  bucket 2: 100%\n  bucket 1: 100%\n  Sorting block of length 84 for bucket 2\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  (Using difference cover)\n  bucket 3: 70%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 70%\n  bucket 4: 80%\n  bucket 8: 20%\n  bucket 5: 80%\n  bucket 4: 90%\n  bucket 7: 10%\n  bucket 5: 90%\n  bucket 3: 80%\n  bucket 4: 100%\n  bucket 8: 30%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 7: 20%\n  bucket 5: 100%\n  bucket 8: 40%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 7: 30%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 7: 40%\n  bucket 8: 60%\n  bucket 7: 50%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 7: 60%\n  bucket 8: 90%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  Sorting block time: 00:00:00\n  bucket 10: 20%\nReturning block of 125 for bucket 9\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 15: 40%\n  bucket 16: 40%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 15: 60%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 16: 70%\n  bucket 15: 80%\n  bucket 16: 80%\n  bucket 15: 90%\n  bucket 16: 90%\n  bucket 15: 100%\n  bucket 16: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 17\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  bucket 22: 20%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 23: 10%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 23: 20%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 23: 30%\n  bucket 22: 90%\n  bucket 23: 40%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 40%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 50%\n  bucket 30: 10%\n  bucket 29: 60%\n  bucket 30: 20%\n  bucket 29: 70%\n  bucket 30: 30%\n  bucket 29: 80%\n  bucket 30: 40%\n  bucket 29: 90%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  bucket 30: 70%\n  (Using difference cover)\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 10%\n  bucket 32: 10%\n  bucket 31: 20%\n  bucket 32: 20%\n  bucket 31: 30%\n  bucket 32: 30%\n  bucket 31: 40%\n  bucket 32: 40%\n  bucket 31: 50%\n  bucket 32: 50%\n  bucket 31: 60%\n  bucket 32: 60%\n  bucket 31: 70%\n  bucket 32: 70%\n  bucket 31: 80%\n  bucket 32: 80%\n  bucket 31: 90%\n  bucket 32: 90%\n  bucket 31: 100%\n  bucket 32: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  Calculating Z arrays for bucket 35\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  Entering block accumulator loop for bucket 35:\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 35: 10%\n  bucket 35: 20%\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  Entering block accumulator loop for bucket 41:\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\nGetting block 43 of 60\n  bucket 41: 10%\n  Entering block accumulator loop for bucket 42:\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 41: 20%\n  bucket 42: 10%\n  bucket 41: 30%\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 20%\n  bucket 43: 10%\n  bucket 42: 30%\n  bucket 43: 20%\n  bucket 41: 40%\n  bucket 43: 30%\n  bucket 42: 40%\n  bucket 41: 50%\n  bucket 43: 40%\n  bucket 42: 50%\n  bucket 43: 50%\n  bucket 41: 60%\n  bucket 42: 60%\n  bucket 43: 60%\n  bucket 41: 70%\n  bucket 42: 70%\n  bucket 43: 70%\n  bucket 41: 80%\n  bucket 42: 80%\n  bucket 43: 80%\n  bucket 41: 90%\n  bucket 42: 90%\n  bucket 43: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 43: 100%\n  bucket 42: 100%\n  Sorting block of length 121 for bucket 43\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Reserving size (126) for bucket 45\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 45\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 47:\n  bucket 45: 10%\n  bucket 47: 10%\n  bucket 46: 10%\n  bucket 47: 20%\n  bucket 45: 20%\n  bucket 47: 30%\n  bucket 45: 30%\n  bucket 46: 20%\n  bucket 47: 40%\n  bucket 45: 40%\n  bucket 47: 50%\n  bucket 46: 30%\n  bucket 45: 50%\n  bucket 46: 40%\n  bucket 45: 60%\n  bucket 47: 60%\n  bucket 45: 70%\n  bucket 47: 70%\n  bucket 45: 80%\n  bucket 47: 80%\n  bucket 46: 50%\n  bucket 45: 90%\n  bucket 47: 90%\n  bucket 45: 100%\n  bucket 47: 100%\n  bucket 46: 60%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\nGetting block 50 of 60\n  Calculating Z arrays for bucket 48\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 50:\n  bucket 48: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 20%\n  bucket 50: 10%\n  bucket 48: 30%\n  bucket 49: 10%\n  bucket 50: 20%\n  bucket 48: 40%\n  bucket 49: 20%\n  bucket 50: 30%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 50: 40%\n  bucket 49: 30%\n  bucket 48: 70%\n  bucket 50: 50%\n  bucket 49: 40%\n  bucket 48: 80%\n  bucket 50: 60%\n  bucket 49: 50%\n  bucket 48: 90%\n  bucket 50: 70%\n  bucket 48: 100%\n  bucket 49: 60%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 50: 80%\n  bucket 49: 70%\n  bucket 50: 90%\n  bucket 49: 80%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Calculating Z arrays for bucket 52\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 52: 10%\n  bucket 51: 60%\n  bucket 52: 20%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 52: 30%\n  bucket 51: 90%\n  bucket 52: 40%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 54:\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 54: 30%\n  bucket 53: 30%\n  bucket 54: 40%\n  bucket 53: 40%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 50%\n  bucket 53: 50%\n  bucket 55: 10%\n  bucket 54: 60%\n  bucket 53: 60%\n  bucket 54: 70%\n  bucket 55: 20%\n  bucket 53: 70%\n  bucket 54: 80%\n  bucket 53: 80%\n  bucket 54: 90%\n  bucket 53: 90%\n  bucket 54: 100%\n  bucket 53: 100%\n  bucket 55: 30%\n  Sorting block of length 64 for bucket 54\n  Sorting block of length 78 for bucket 53\n  bucket 55: 40%\n  (Using difference cover)\n  (Using difference cover)\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 30%\n  bucket 56: 40%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 57: 10%\n  bucket 56: 70%\n  bucket 57: 20%\n  bucket 56: 80%\n  bucket 57: 30%\n  bucket 56: 90%\n  bucket 57: 40%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  Sorting block time: 00:00:00\n  bucket 59: 10%\nReturning block of 114 for bucket 58\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\nGetting block 4 of 60\nGetting block 3 of 60\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\nGetting block 5 of 60\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 3:\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 6\n  bucket 2: 10%\n  bucket 1: 10%\n  Calculating Z arrays for bucket 5\n  bucket 2: 20%\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 6\n  bucket 3: 10%\nGetting block 7 of 60\n  bucket 3: 20%\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 4:\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 20%\n  bucket 2: 30%\n  bucket 6: 10%\n  bucket 2: 40%\n  bucket 6: 20%\n  bucket 2: 50%\n  bucket 6: 30%\n  bucket 1: 30%\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 30%\n  Reserving size (126) for bucket 8\n  bucket 4: 20%\n  bucket 6: 40%\n  bucket 1: 40%\n  bucket 3: 40%\n  Calculating Z arrays for bucket 8\n  bucket 5: 10%\n  bucket 2: 60%\n  bucket 1: 50%\n  bucket 6: 50%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 2: 70%\n  bucket 6: 60%\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 70%\n  bucket 1: 70%\n  bucket 5: 30%\n  bucket 2: 80%\n  bucket 6: 80%\n  bucket 4: 40%\n  Calculating Z arrays for bucket 7\n  bucket 5: 40%\n  bucket 1: 80%\n  bucket 4: 50%\n  bucket 3: 60%\n  bucket 2: 90%\n  bucket 6: 90%\n  bucket 1: 90%\n  bucket 5: 50%\n  bucket 4: 60%\n  bucket 6: 100%\n  bucket 5: 60%\n  Sorting block of length 90 for bucket 6\n  bucket 4: 70%\n  (Using difference cover)\n  bucket 8: 10%\n  bucket 2: 100%\n  bucket 1: 100%\n  Sorting block of length 84 for bucket 2\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  (Using difference cover)\n  bucket 3: 70%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 70%\n  bucket 4: 80%\n  bucket 8: 20%\n  bucket 5: 80%\n  bucket 4: 90%\n  bucket 7: 10%\n  bucket 5: 90%\n  bucket 3: 80%\n  bucket 4: 100%\n  bucket 8: 30%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 7: 20%\n  bucket 5: 100%\n  bucket 8: 40%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 7: 30%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 7: 40%\n  bucket 8: 60%\n  bucket 7: 50%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 7: 60%\n  bucket 8: 90%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  Sorting block time: 00:00:00\n  bucket 10: 20%\nReturning block of 125 for bucket 9\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\n  bucket 15: 20%\n  bucket 16: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 15: 40%\n  bucket 16: 40%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 15: 60%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 16: 70%\n  bucket 15: 80%\n  bucket 16: 80%\n  bucket 15: 90%\n  bucket 16: 90%\n  bucket 15: 100%\n  bucket 16: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 17\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 18: 40%\n  bucket 17: 50%\n  bucket 18: 50%\n  bucket 17: 60%\n  bucket 18: 60%\n  bucket 17: 70%\n  bucket 18: 70%\n  bucket 17: 80%\n  bucket 18: 80%\n  bucket 17: 90%\n  bucket 18: 90%\n  bucket 17: 100%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  bucket 22: 20%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 23: 10%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 23: 20%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 23: 30%\n  bucket 22: 90%\n  bucket 23: 40%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 40%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 50%\n  bucket 30: 10%\n  bucket 29: 60%\n  bucket 30: 20%\n  bucket 29: 70%\n  bucket 30: 30%\n  bucket 29: 80%\n  bucket 30: 40%\n  bucket 29: 90%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  bucket 30: 70%\n  (Using difference cover)\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 10%\n  bucket 32: 10%\n  bucket 31: 20%\n  bucket 32: 20%\n  bucket 31: 30%\n  bucket 32: 30%\n  bucket 31: 40%\n  bucket 32: 40%\n  bucket 31: 50%\n  bucket 32: 50%\n  bucket 31: 60%\n  bucket 32: 60%\n  bucket 31: 70%\n  bucket 32: 70%\n  bucket 31: 80%\n  bucket 32: 80%\n  bucket 31: 90%\n  bucket 32: 90%\n  bucket 31: 100%\n  bucket 32: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  Calculating Z arrays for bucket 35\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  Entering block accumulator loop for bucket 35:\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 35: 10%\n  bucket 35: 20%\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  Entering block accumulator loop for bucket 41:\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\nGetting block 43 of 60\n  bucket 41: 10%\n  Entering block accumulator loop for bucket 42:\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 41: 20%\n  bucket 42: 10%\n  bucket 41: 30%\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 20%\n  bucket 43: 10%\n  bucket 42: 30%\n  bucket 43: 20%\n  bucket 41: 40%\n  bucket 43: 30%\n  bucket 42: 40%\n  bucket 41: 50%\n  bucket 43: 40%\n  bucket 42: 50%\n  bucket 43: 50%\n  bucket 41: 60%\n  bucket 42: 60%\n  bucket 43: 60%\n  bucket 41: 70%\n  bucket 42: 70%\n  bucket 43: 70%\n  bucket 41: 80%\n  bucket 42: 80%\n  bucket 43: 80%\n  bucket 41: 90%\n  bucket 42: 90%\n  bucket 43: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 43: 100%\n  bucket 42: 100%\n  Sorting block of length 121 for bucket 43\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Reserving size (126) for bucket 45\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 45\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 47:\n  bucket 45: 10%\n  bucket 47: 10%\n  bucket 46: 10%\n  bucket 47: 20%\n  bucket 45: 20%\n  bucket 47: 30%\n  bucket 45: 30%\n  bucket 46: 20%\n  bucket 47: 40%\n  bucket 45: 40%\n  bucket 47: 50%\n  bucket 46: 30%\n  bucket 45: 50%\n  bucket 46: 40%\n  bucket 45: 60%\n  bucket 47: 60%\n  bucket 45: 70%\n  bucket 47: 70%\n  bucket 45: 80%\n  bucket 47: 80%\n  bucket 46: 50%\n  bucket 45: 90%\n  bucket 47: 90%\n  bucket 45: 100%\n  bucket 47: 100%\n  bucket 46: 60%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\nGetting block 50 of 60\n  Calculating Z arrays for bucket 48\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 50:\n  bucket 48: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 20%\n  bucket 50: 10%\n  bucket 48: 30%\n  bucket 49: 10%\n  bucket 50: 20%\n  bucket 48: 40%\n  bucket 49: 20%\n  bucket 50: 30%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 50: 40%\n  bucket 49: 30%\n  bucket 48: 70%\n  bucket 50: 50%\n  bucket 49: 40%\n  bucket 48: 80%\n  bucket 50: 60%\n  bucket 49: 50%\n  bucket 48: 90%\n  bucket 50: 70%\n  bucket 48: 100%\n  bucket 49: 60%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 50: 80%\n  bucket 49: 70%\n  bucket 50: 90%\n  bucket 49: 80%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Calculating Z arrays for bucket 52\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 52: 10%\n  bucket 51: 60%\n  bucket 52: 20%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 52: 30%\n  bucket 51: 90%\n  bucket 52: 40%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 54:\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 54: 30%\n  bucket 53: 30%\n  bucket 54: 40%\n  bucket 53: 40%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 50%\n  bucket 53: 50%\n  bucket 55: 10%\n  bucket 54: 60%\n  bucket 53: 60%\n  bucket 54: 70%\n  bucket 55: 20%\n  bucket 53: 70%\n  bucket 54: 80%\n  bucket 53: 80%\n  bucket 54: 90%\n  bucket 53: 90%\n  bucket 54: 100%\n  bucket 53: 100%\n  bucket 55: 30%\n  Sorting block of length 64 for bucket 54\n  Sorting block of length 78 for bucket 53\n  bucket 55: 40%\n  (Using difference cover)\n  (Using difference cover)\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 30%\n  bucket 56: 40%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 57: 10%\n  bucket 56: 70%\n  bucket 57: 20%\n  bucket 56: 80%\n  bucket 57: 30%\n  bucket 56: 90%\n  bucket 57: 40%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  Sorting block time: 00:00:00\n  bucket 59: 10%\nReturning block of 114 for bucket 58\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:02:53", "plugin": "core", "name": "end_epoch", "raw_value": "1708671773.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:02:52", "plugin": "core", "name": "start_epoch", "raw_value": "1708671772.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-13", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 13, "time_seconds": 25.309962511062622, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "c77514d044f8cece"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "34591d5a29716bf0"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "77c014b10b16392f", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:56:38.333163", "create_time": "2024-02-23T06:56:28.543241", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-sptg5", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/f/b/c/dataset_fbc9f1b7-d3b9-45f6-8a89-db6f997f7735.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        seqtk seq -1 '/galaxy/server/database/objects/0/8/2/dataset_08270ec5-6a3d-48dc-9dc7-c689f32199be.dat' > input_f.fastq && seqtk seq -2 '/galaxy/server/database/objects/0/8/2/dataset_08270ec5-6a3d-48dc-9dc7-c689f32199be.dat' > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/0/7/5/dataset_075677a7-a7c5-4693-a433-bb79b043906b.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 183, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 182, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "c77514d044f8cece", "src": "hda", "uuid": "fbc9f1b7-d3b9-45f6-8a89-db6f997f7735"}, "library|input_1": {"id": "34591d5a29716bf0", "src": "hda", "uuid": "08270ec5-6a3d-48dc-9dc7-c689f32199be"}}, "outputs": {"output_alignments": {"id": "731a89902d1aaa82", "src": "hda", "uuid": "075677a7-a7c5-4693-a433-bb79b043906b"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\nGetting block 3 of 60\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 2\nGetting block 7 of 60\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 4\n  bucket 5: 10%\n  Calculating Z arrays for bucket 4\n  Reserving size (126) for bucket 7\n  bucket 5: 20%\n  bucket 2: 10%\n  bucket 1: 10%\n  bucket 2: 20%\n  Calculating Z arrays for bucket 7\n  bucket 2: 30%\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 40%\n  bucket 3: 10%\n  bucket 2: 50%\n  Reserving size (126) for bucket 6\n  bucket 2: 60%\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 6\nGetting block 8 of 60\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 4:\n  Reserving size (126) for bucket 8\n  bucket 3: 30%\n  bucket 7: 10%\n  bucket 2: 70%\n  Calculating Z arrays for bucket 8\n  bucket 2: 80%\n  bucket 1: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 3: 40%\n  bucket 2: 90%\n  bucket 4: 10%\n  bucket 6: 20%\n  bucket 2: 100%\n  bucket 7: 20%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 6: 30%\n  bucket 4: 20%\n  bucket 3: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 40%\n  bucket 1: 30%\n  bucket 3: 60%\n  bucket 7: 30%\n  bucket 1: 40%\n  bucket 6: 50%\n  bucket 4: 30%\n  bucket 5: 40%\n  bucket 8: 10%\n  bucket 1: 50%\n  bucket 7: 40%\n  bucket 6: 60%\n  bucket 5: 50%\n  bucket 8: 20%\n  bucket 3: 70%\n  bucket 4: 40%\n  bucket 5: 60%\n  bucket 1: 60%\n  bucket 7: 50%\n  bucket 5: 70%\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 3: 80%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 6: 70%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 8: 40%\n  bucket 5: 80%\n  bucket 4: 70%\n  bucket 5: 90%\n  bucket 8: 50%\n  bucket 4: 80%\n  bucket 6: 80%\n  bucket 5: 100%\n  bucket 1: 80%\n  bucket 7: 70%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 8: 60%\n  bucket 3: 100%\n  bucket 7: 80%\n  bucket 4: 100%\n  bucket 1: 90%\n  bucket 8: 70%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 85 for bucket 2\n  bucket 1: 100%\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 8: 80%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  bucket 8: 90%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  bucket 8: 100%\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Reserving size (126) for bucket 9\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 9\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 11: 10%\n  bucket 9: 40%\n  bucket 11: 20%\n  bucket 9: 50%\n  bucket 11: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 11: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 11: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 11: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  bucket 11: 70%\n  Sorting block of length 124 for bucket 9\n  bucket 10: 80%\n  (Using difference cover)\n  bucket 11: 80%\n  bucket 10: 90%\n  bucket 11: 90%\n  bucket 10: 100%\n  bucket 11: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 60%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 70%\n  bucket 13: 10%\n  bucket 12: 80%\n  bucket 13: 20%\n  bucket 12: 90%\n  bucket 13: 30%\nGetting block 14 of 60\n  bucket 13: 40%\n  Reserving size (126) for bucket 14\n  bucket 12: 100%\n  bucket 13: 50%\n  Calculating Z arrays for bucket 14\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 60%\n  bucket 14: 10%\n  bucket 13: 70%\n  bucket 14: 20%\n  bucket 13: 80%\n  bucket 14: 30%\n  bucket 13: 90%\n  bucket 14: 40%\n  bucket 13: 100%\n  bucket 14: 50%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 16: 30%\n  bucket 17: 30%\n  bucket 16: 40%\n  bucket 17: 40%\n  bucket 16: 50%\n  bucket 17: 50%\n  bucket 16: 60%\n  bucket 17: 60%\n  bucket 16: 70%\n  bucket 17: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 17: 80%\n  bucket 16: 100%\n  bucket 17: 90%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 20 of 60\nReturning block of 108 for bucket 19\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 20: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 20: 20%\n  bucket 21: 60%\n  bucket 20: 30%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 20: 40%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 50%\n  bucket 22: 60%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 23: 10%\n  bucket 22: 90%\n  bucket 23: 20%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  bucket 23: 80%\n  Calculating Z arrays for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  bucket 23: 90%\n  bucket 23: 100%\n  Entering block accumulator loop for bucket 24:\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\nGetting block 28 of 60\n  bucket 27: 40%\n  Reserving size (126) for bucket 28\n  bucket 27: 50%\n  Calculating Z arrays for bucket 28\n  bucket 27: 60%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 70%\n  bucket 28: 10%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 28: 20%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  Sorting block time: 00:00:00\n  bucket 28: 100%\nReturning block of 120 for bucket 27\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 10%\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 20%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 31: 10%\n  bucket 30: 30%\n  bucket 31: 20%\n  Entering block accumulator loop for bucket 32:\n  bucket 30: 40%\n  bucket 31: 30%\n  bucket 30: 50%\n  bucket 31: 40%\n  bucket 32: 10%\n  bucket 30: 60%\n  bucket 31: 50%\n  bucket 32: 20%\n  bucket 30: 70%\n  bucket 31: 60%\n  bucket 32: 30%\n  bucket 30: 80%\n  bucket 31: 70%\n  bucket 32: 40%\n  bucket 30: 90%\n  bucket 31: 80%\n  bucket 32: 50%\n  bucket 30: 100%\n  bucket 32: 60%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 90%\n  bucket 32: 70%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 35:\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 10%\n  Calculating Z arrays for bucket 37\n  bucket 36: 10%\n  bucket 35: 20%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 20%\n  bucket 35: 30%\n  bucket 37: 10%\n  bucket 36: 30%\n  bucket 35: 40%\n  bucket 37: 20%\n  bucket 36: 40%\n  bucket 35: 50%\n  bucket 37: 30%\n  bucket 36: 50%\n  bucket 37: 40%\n  bucket 35: 60%\n  bucket 37: 50%\n  bucket 36: 60%\n  bucket 35: 70%\n  bucket 37: 60%\n  bucket 36: 70%\n  bucket 35: 80%\n  bucket 37: 70%\n  bucket 36: 80%\n  bucket 35: 90%\n  bucket 37: 80%\n  bucket 35: 100%\n  bucket 37: 90%\n  bucket 36: 90%\n  bucket 37: 100%\n  bucket 36: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\nGetting block 40 of 60\n  Entering block accumulator loop for bucket 39:\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 39: 10%\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  bucket 39: 20%\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 41:\n  bucket 39: 30%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  bucket 39: 40%\n  bucket 40: 10%\n  bucket 42: 10%\n  bucket 41: 20%\n  bucket 39: 50%\n  bucket 40: 20%\n  bucket 41: 30%\n  bucket 42: 20%\n  bucket 39: 60%\n  bucket 40: 30%\n  bucket 41: 40%\n  bucket 42: 30%\n  bucket 39: 70%\n  bucket 40: 40%\n  bucket 42: 40%\n  bucket 39: 80%\n  bucket 41: 50%\n  bucket 40: 50%\n  bucket 42: 50%\n  bucket 39: 90%\n  bucket 41: 60%\n  bucket 42: 60%\n  bucket 40: 60%\n  bucket 39: 100%\n  bucket 41: 70%\n  bucket 42: 70%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 70%\n  bucket 42: 80%\n  bucket 41: 80%\n  bucket 40: 80%\n  bucket 42: 90%\n  bucket 41: 90%\n  bucket 40: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 20%\n  bucket 44: 10%\n  bucket 43: 30%\n  bucket 44: 20%\n  bucket 43: 40%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 43: 50%\n  bucket 44: 50%\n  bucket 43: 60%\n  bucket 44: 60%\n  bucket 43: 70%\n  bucket 44: 70%\n  bucket 43: 80%\n  bucket 44: 80%\n  bucket 43: 90%\n  bucket 44: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 48: 10%\n  bucket 47: 90%\n  bucket 48: 20%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 50: 10%\n  bucket 49: 90%\n  bucket 49: 100%\n  bucket 50: 20%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  bucket 52: 60%\n  Calculating Z arrays for bucket 53\n  bucket 52: 70%\n  bucket 52: 80%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 90%\n  bucket 53: 10%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 57:\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Entering block accumulator loop for bucket 58:\n  Calculating Z arrays for bucket 59\n  bucket 57: 10%\n  bucket 58: 10%\n  Entering block accumulator loop for bucket 59:\n  bucket 57: 20%\n  bucket 58: 20%\n  bucket 59: 10%\n  bucket 57: 30%\n  bucket 59: 20%\n  bucket 58: 30%\n  bucket 59: 30%\n  bucket 57: 40%\n  bucket 58: 40%\n  bucket 59: 40%\n  bucket 57: 50%\n  bucket 58: 50%\n  bucket 59: 50%\n  bucket 57: 60%\n  bucket 59: 60%\n  bucket 58: 60%\n  bucket 59: 70%\n  bucket 57: 70%\n  bucket 58: 70%\n  bucket 59: 80%\n  bucket 57: 80%\n  bucket 58: 80%\n  bucket 59: 90%\n  bucket 57: 90%\n  bucket 58: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 57: 100%\n  bucket 58: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\nGetting block 3 of 60\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 2\nGetting block 7 of 60\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 4\n  bucket 5: 10%\n  Calculating Z arrays for bucket 4\n  Reserving size (126) for bucket 7\n  bucket 5: 20%\n  bucket 2: 10%\n  bucket 1: 10%\n  bucket 2: 20%\n  Calculating Z arrays for bucket 7\n  bucket 2: 30%\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 40%\n  bucket 3: 10%\n  bucket 2: 50%\n  Reserving size (126) for bucket 6\n  bucket 2: 60%\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 6\nGetting block 8 of 60\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 4:\n  Reserving size (126) for bucket 8\n  bucket 3: 30%\n  bucket 7: 10%\n  bucket 2: 70%\n  Calculating Z arrays for bucket 8\n  bucket 2: 80%\n  bucket 1: 20%\n  bucket 6: 10%\n  bucket 5: 30%\n  bucket 3: 40%\n  bucket 2: 90%\n  bucket 4: 10%\n  bucket 6: 20%\n  bucket 2: 100%\n  bucket 7: 20%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 6: 30%\n  bucket 4: 20%\n  bucket 3: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 40%\n  bucket 1: 30%\n  bucket 3: 60%\n  bucket 7: 30%\n  bucket 1: 40%\n  bucket 6: 50%\n  bucket 4: 30%\n  bucket 5: 40%\n  bucket 8: 10%\n  bucket 1: 50%\n  bucket 7: 40%\n  bucket 6: 60%\n  bucket 5: 50%\n  bucket 8: 20%\n  bucket 3: 70%\n  bucket 4: 40%\n  bucket 5: 60%\n  bucket 1: 60%\n  bucket 7: 50%\n  bucket 5: 70%\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 3: 80%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 6: 70%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 8: 40%\n  bucket 5: 80%\n  bucket 4: 70%\n  bucket 5: 90%\n  bucket 8: 50%\n  bucket 4: 80%\n  bucket 6: 80%\n  bucket 5: 100%\n  bucket 1: 80%\n  bucket 7: 70%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 8: 60%\n  bucket 3: 100%\n  bucket 7: 80%\n  bucket 4: 100%\n  bucket 1: 90%\n  bucket 8: 70%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 85 for bucket 2\n  bucket 1: 100%\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 8: 80%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  bucket 8: 90%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  bucket 8: 100%\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Reserving size (126) for bucket 9\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 9\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 11: 10%\n  bucket 9: 40%\n  bucket 11: 20%\n  bucket 9: 50%\n  bucket 11: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 11: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 11: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 11: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  bucket 11: 70%\n  Sorting block of length 124 for bucket 9\n  bucket 10: 80%\n  (Using difference cover)\n  bucket 11: 80%\n  bucket 10: 90%\n  bucket 11: 90%\n  bucket 10: 100%\n  bucket 11: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 60%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 70%\n  bucket 13: 10%\n  bucket 12: 80%\n  bucket 13: 20%\n  bucket 12: 90%\n  bucket 13: 30%\nGetting block 14 of 60\n  bucket 13: 40%\n  Reserving size (126) for bucket 14\n  bucket 12: 100%\n  bucket 13: 50%\n  Calculating Z arrays for bucket 14\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 60%\n  bucket 14: 10%\n  bucket 13: 70%\n  bucket 14: 20%\n  bucket 13: 80%\n  bucket 14: 30%\n  bucket 13: 90%\n  bucket 14: 40%\n  bucket 13: 100%\n  bucket 14: 50%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 16: 30%\n  bucket 17: 30%\n  bucket 16: 40%\n  bucket 17: 40%\n  bucket 16: 50%\n  bucket 17: 50%\n  bucket 16: 60%\n  bucket 17: 60%\n  bucket 16: 70%\n  bucket 17: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 17: 80%\n  bucket 16: 100%\n  bucket 17: 90%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 20 of 60\nReturning block of 108 for bucket 19\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 20: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 20: 20%\n  bucket 21: 60%\n  bucket 20: 30%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 20: 40%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 50%\n  bucket 22: 60%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 23: 10%\n  bucket 22: 90%\n  bucket 23: 20%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  bucket 23: 80%\n  Calculating Z arrays for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  bucket 23: 90%\n  bucket 23: 100%\n  Entering block accumulator loop for bucket 24:\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\nGetting block 28 of 60\n  bucket 27: 40%\n  Reserving size (126) for bucket 28\n  bucket 27: 50%\n  Calculating Z arrays for bucket 28\n  bucket 27: 60%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 70%\n  bucket 28: 10%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 28: 20%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  Sorting block time: 00:00:00\n  bucket 28: 100%\nReturning block of 120 for bucket 27\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 10%\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 20%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 31: 10%\n  bucket 30: 30%\n  bucket 31: 20%\n  Entering block accumulator loop for bucket 32:\n  bucket 30: 40%\n  bucket 31: 30%\n  bucket 30: 50%\n  bucket 31: 40%\n  bucket 32: 10%\n  bucket 30: 60%\n  bucket 31: 50%\n  bucket 32: 20%\n  bucket 30: 70%\n  bucket 31: 60%\n  bucket 32: 30%\n  bucket 30: 80%\n  bucket 31: 70%\n  bucket 32: 40%\n  bucket 30: 90%\n  bucket 31: 80%\n  bucket 32: 50%\n  bucket 30: 100%\n  bucket 32: 60%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 90%\n  bucket 32: 70%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 35:\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 10%\n  Calculating Z arrays for bucket 37\n  bucket 36: 10%\n  bucket 35: 20%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 20%\n  bucket 35: 30%\n  bucket 37: 10%\n  bucket 36: 30%\n  bucket 35: 40%\n  bucket 37: 20%\n  bucket 36: 40%\n  bucket 35: 50%\n  bucket 37: 30%\n  bucket 36: 50%\n  bucket 37: 40%\n  bucket 35: 60%\n  bucket 37: 50%\n  bucket 36: 60%\n  bucket 35: 70%\n  bucket 37: 60%\n  bucket 36: 70%\n  bucket 35: 80%\n  bucket 37: 70%\n  bucket 36: 80%\n  bucket 35: 90%\n  bucket 37: 80%\n  bucket 35: 100%\n  bucket 37: 90%\n  bucket 36: 90%\n  bucket 37: 100%\n  bucket 36: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\nGetting block 40 of 60\n  Entering block accumulator loop for bucket 39:\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 39: 10%\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  bucket 39: 20%\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 41:\n  bucket 39: 30%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  bucket 39: 40%\n  bucket 40: 10%\n  bucket 42: 10%\n  bucket 41: 20%\n  bucket 39: 50%\n  bucket 40: 20%\n  bucket 41: 30%\n  bucket 42: 20%\n  bucket 39: 60%\n  bucket 40: 30%\n  bucket 41: 40%\n  bucket 42: 30%\n  bucket 39: 70%\n  bucket 40: 40%\n  bucket 42: 40%\n  bucket 39: 80%\n  bucket 41: 50%\n  bucket 40: 50%\n  bucket 42: 50%\n  bucket 39: 90%\n  bucket 41: 60%\n  bucket 42: 60%\n  bucket 40: 60%\n  bucket 39: 100%\n  bucket 41: 70%\n  bucket 42: 70%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 70%\n  bucket 42: 80%\n  bucket 41: 80%\n  bucket 40: 80%\n  bucket 42: 90%\n  bucket 41: 90%\n  bucket 40: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 20%\n  bucket 44: 10%\n  bucket 43: 30%\n  bucket 44: 20%\n  bucket 43: 40%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 43: 50%\n  bucket 44: 50%\n  bucket 43: 60%\n  bucket 44: 60%\n  bucket 43: 70%\n  bucket 44: 70%\n  bucket 43: 80%\n  bucket 44: 80%\n  bucket 43: 90%\n  bucket 44: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 48: 10%\n  bucket 47: 90%\n  bucket 48: 20%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 50: 10%\n  bucket 49: 90%\n  bucket 49: 100%\n  bucket 50: 20%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  bucket 52: 60%\n  Calculating Z arrays for bucket 53\n  bucket 52: 70%\n  bucket 52: 80%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 90%\n  bucket 53: 10%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 57:\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Entering block accumulator loop for bucket 58:\n  Calculating Z arrays for bucket 59\n  bucket 57: 10%\n  bucket 58: 10%\n  Entering block accumulator loop for bucket 59:\n  bucket 57: 20%\n  bucket 58: 20%\n  bucket 59: 10%\n  bucket 57: 30%\n  bucket 59: 20%\n  bucket 58: 30%\n  bucket 59: 30%\n  bucket 57: 40%\n  bucket 58: 40%\n  bucket 59: 40%\n  bucket 57: 50%\n  bucket 58: 50%\n  bucket 59: 50%\n  bucket 57: 60%\n  bucket 59: 60%\n  bucket 58: 60%\n  bucket 59: 70%\n  bucket 57: 70%\n  bucket 58: 70%\n  bucket 59: 80%\n  bucket 57: 80%\n  bucket 58: 80%\n  bucket 59: 90%\n  bucket 57: 90%\n  bucket 58: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 57: 100%\n  bucket 58: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:56:30", "plugin": "core", "name": "end_epoch", "raw_value": "1708671390.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:56:29", "plugin": "core", "name": "start_epoch", "raw_value": "1708671389.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-13", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 13, "time_seconds": 24.606240272521973, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "e33d454b75c463ca"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "f545e11ea9cdb8e9"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "c1f2b5866230ed5b", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:03:26.708436", "create_time": "2024-02-23T07:03:16.974168", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-448zq", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/f/9/9/dataset_f99a4af8-8d08-40c0-9c9d-1b82e93d5000.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        seqtk seq -1 '/galaxy/server/database/objects/b/5/4/dataset_b54697e1-2655-4f1e-881d-86e429887cd7.dat' > input_f.fastq && seqtk seq -2 '/galaxy/server/database/objects/b/5/4/dataset_b54697e1-2655-4f1e-881d-86e429887cd7.dat' > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/b/4/b/dataset_b4b7f041-d7f2-43a3-b7a4-f051febff3cd.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 245, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 244, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "e33d454b75c463ca", "src": "hda", "uuid": "f99a4af8-8d08-40c0-9c9d-1b82e93d5000"}, "library|input_1": {"id": "f545e11ea9cdb8e9", "src": "hda", "uuid": "b54697e1-2655-4f1e-881d-86e429887cd7"}}, "outputs": {"output_alignments": {"id": "2f8e4500c1a92a7f", "src": "hda", "uuid": "b4b7f041-d7f2-43a3-b7a4-f051febff3cd"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\nGetting block 3 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 1:\nGetting block 6 of 60\n  Calculating Z arrays for bucket 3\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 6\n  bucket 1: 10%\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 1: 20%\n  Reserving size (126) for bucket 2\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 30%\n  Calculating Z arrays for bucket 7\nGetting block 8 of 60\n  Calculating Z arrays for bucket 6\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 2:\n  bucket 3: 10%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 5\n  bucket 3: 20%\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 6: 20%\n  bucket 2: 10%\n  bucket 8: 10%\n  bucket 4: 40%\n  bucket 2: 20%\n  bucket 6: 30%\n  bucket 1: 40%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 7: 10%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 5: 10%\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 6: 40%\n  bucket 4: 50%\n  bucket 5: 20%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 7: 20%\n  bucket 6: 50%\n  bucket 2: 80%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 6: 60%\n  bucket 7: 30%\n  bucket 1: 60%\n  bucket 4: 80%\n  bucket 5: 30%\n  bucket 8: 20%\n  bucket 6: 70%\n  bucket 2: 100%\n  bucket 4: 90%\n  bucket 3: 60%\n  bucket 6: 80%\n  bucket 5: 40%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 1: 70%\n  bucket 8: 30%\n  bucket 6: 90%\n  bucket 4: 100%\n  bucket 5: 50%\n  bucket 1: 80%\n  bucket 7: 40%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 3: 70%\n  bucket 1: 90%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 6: 100%\n  bucket 3: 80%\n  bucket 5: 70%\n  bucket 8: 50%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 1: 100%\n  bucket 7: 60%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 5: 80%\n  bucket 3: 100%\n  bucket 8: 70%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 5: 90%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 5: 100%\n  bucket 8: 90%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 60%\n  bucket 10: 10%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 10: 30%\n  bucket 9: 90%\n  bucket 10: 40%\n  bucket 9: 100%\n  bucket 10: 50%\n  bucket 10: 60%\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Entering block accumulator loop for bucket 12:\n  Calculating Z arrays for bucket 14\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 10%\n  bucket 12: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 12: 30%\n  Entering block accumulator loop for bucket 13:\n  bucket 14: 10%\n  bucket 12: 40%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 12: 50%\n  bucket 14: 30%\n  bucket 12: 60%\n  bucket 14: 40%\n  bucket 12: 70%\n  bucket 14: 50%\n  bucket 12: 80%\n  bucket 13: 20%\n  bucket 14: 60%\n  bucket 12: 90%\n  bucket 13: 30%\n  bucket 14: 70%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 40%\n  bucket 14: 80%\n  bucket 13: 50%\n  bucket 14: 90%\n  bucket 13: 60%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 15\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 10%\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 20%\n  bucket 15: 10%\n  bucket 16: 30%\n  Entering block accumulator loop for bucket 17:\n  bucket 15: 20%\n  bucket 16: 40%\n  bucket 15: 30%\n  bucket 17: 10%\n  bucket 16: 50%\n  bucket 15: 40%\n  bucket 17: 20%\n  bucket 15: 50%\n  bucket 16: 60%\n  bucket 15: 60%\n  bucket 17: 30%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 17: 40%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 17: 50%\n  bucket 15: 90%\n  bucket 16: 90%\n  bucket 17: 60%\n  bucket 15: 100%\n  bucket 16: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Entering block accumulator loop for bucket 18:\n  Calculating Z arrays for bucket 19\n  bucket 18: 10%\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 30%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 19: 20%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 19: 30%\n  bucket 18: 80%\n  bucket 19: 40%\n  bucket 18: 90%\n  bucket 19: 50%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 40%\n  bucket 20: 50%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 60%\n  bucket 21: 10%\n  bucket 20: 70%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 20%\n  bucket 20: 80%\n  bucket 21: 30%\n  bucket 20: 90%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 40%\n  bucket 20: 100%\n  bucket 22: 10%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 50%\n  bucket 22: 20%\n  bucket 21: 60%\n  bucket 22: 30%\n  bucket 21: 70%\n  bucket 22: 40%\n  bucket 21: 80%\n  bucket 22: 50%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 60%\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  bucket 22: 70%\n  bucket 22: 80%\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 50%\n  bucket 24: 10%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 24: 30%\n  bucket 23: 80%\n  bucket 24: 40%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\nGetting block 28 of 60\n  bucket 27: 20%\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 30%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 27: 50%\n  bucket 28: 20%\n  bucket 27: 60%\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 30%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 40%\n  bucket 29: 10%\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  bucket 29: 20%\n  bucket 28: 50%\n  Calculating Z arrays for bucket 30\n  bucket 27: 70%\n  bucket 29: 30%\n  bucket 27: 80%\n  bucket 28: 60%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 40%\n  bucket 30: 10%\n  bucket 29: 50%\n  bucket 27: 90%\n  bucket 29: 60%\n  bucket 30: 20%\n  bucket 27: 100%\n  bucket 28: 70%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 30: 30%\n  bucket 28: 80%\n  bucket 30: 40%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 30: 50%\n  bucket 29: 90%\n  bucket 30: 60%\n  bucket 28: 100%\n  bucket 29: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block of length 51 for bucket 29\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 120 for bucket 27\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 33:\n  bucket 34: 10%\n  bucket 33: 10%\n  bucket 34: 20%\n  bucket 33: 20%\n  bucket 34: 30%\n  bucket 33: 30%\n  bucket 34: 40%\n  bucket 33: 40%\n  bucket 34: 50%\n  bucket 33: 50%\n  bucket 34: 60%\n  bucket 33: 60%\n  bucket 34: 70%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 34: 80%\n  bucket 33: 90%\n  bucket 34: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  bucket 35: 80%\n  Calculating Z arrays for bucket 36\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  bucket 40: 30%\n  Calculating Z arrays for bucket 41\n  bucket 40: 40%\n  bucket 40: 50%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 60%\n  bucket 41: 10%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Entering block accumulator loop for bucket 42:\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 10%\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 42: 20%\n  bucket 43: 30%\n  bucket 42: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 42: 40%\n  bucket 43: 60%\n  bucket 42: 50%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 42: 60%\n  bucket 43: 90%\n  bucket 42: 70%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Calculating Z arrays for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  bucket 45: 10%\n  Calculating Z arrays for bucket 46\n  bucket 45: 20%\n  bucket 45: 30%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 46: 10%\n  bucket 45: 60%\n  bucket 46: 20%\n  bucket 45: 70%\n  bucket 46: 30%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 46: 40%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Reserving size (126) for bucket 47\n  Entering block accumulator loop for bucket 49:\n  Calculating Z arrays for bucket 47\n  bucket 48: 10%\n  bucket 49: 10%\n  bucket 48: 20%\n  Entering block accumulator loop for bucket 47:\n  bucket 49: 20%\n  bucket 48: 30%\n  bucket 47: 10%\n  bucket 49: 30%\n  bucket 48: 40%\n  bucket 47: 20%\n  bucket 49: 40%\n  bucket 48: 50%\n  bucket 47: 30%\n  bucket 49: 50%\n  bucket 48: 60%\n  bucket 47: 40%\n  bucket 49: 60%\n  bucket 48: 70%\n  bucket 47: 50%\n  bucket 49: 70%\n  bucket 48: 80%\n  bucket 47: 60%\n  bucket 49: 80%\n  bucket 48: 90%\n  bucket 47: 70%\n  bucket 49: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 47: 80%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  bucket 47: 90%\n  (Using difference cover)\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 80%\n  bucket 50: 90%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  bucket 51: 40%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 50%\n  bucket 52: 10%\n  bucket 51: 60%\n  bucket 52: 20%\n  bucket 51: 70%\n  bucket 52: 30%\n  bucket 51: 80%\n  bucket 52: 40%\n  bucket 51: 90%\n  bucket 52: 50%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 20%\n  bucket 54: 10%\n  bucket 53: 30%\n  bucket 54: 20%\n  bucket 53: 40%\n  bucket 54: 30%\n  bucket 53: 50%\n  bucket 54: 40%\n  bucket 53: 60%\n  bucket 54: 50%\n  bucket 53: 70%\n  bucket 54: 60%\n  bucket 53: 80%\n  bucket 54: 70%\n  bucket 53: 90%\n  bucket 54: 80%\n  bucket 53: 100%\n  bucket 54: 90%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 30%\n  bucket 56: 40%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 50%\n  bucket 57: 10%\n  bucket 56: 60%\n  bucket 57: 20%\n  bucket 56: 70%\n  bucket 57: 30%\n  bucket 56: 80%\n  bucket 57: 40%\n  bucket 56: 90%\n  bucket 57: 50%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 59:\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 59: 10%\n  bucket 60: 30%\n  bucket 59: 20%\n  bucket 60: 40%\n  bucket 59: 30%\n  bucket 60: 50%\n  bucket 59: 40%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 60: 80%\n  bucket 59: 70%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\nGetting block 3 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 1:\nGetting block 6 of 60\n  Calculating Z arrays for bucket 3\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 6\n  bucket 1: 10%\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 1: 20%\n  Reserving size (126) for bucket 2\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 30%\n  Calculating Z arrays for bucket 7\nGetting block 8 of 60\n  Calculating Z arrays for bucket 6\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 2:\n  bucket 3: 10%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 5\n  bucket 3: 20%\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 6: 20%\n  bucket 2: 10%\n  bucket 8: 10%\n  bucket 4: 40%\n  bucket 2: 20%\n  bucket 6: 30%\n  bucket 1: 40%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 7: 10%\n  bucket 2: 40%\n  bucket 1: 50%\n  bucket 5: 10%\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 6: 40%\n  bucket 4: 50%\n  bucket 5: 20%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 7: 20%\n  bucket 6: 50%\n  bucket 2: 80%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 6: 60%\n  bucket 7: 30%\n  bucket 1: 60%\n  bucket 4: 80%\n  bucket 5: 30%\n  bucket 8: 20%\n  bucket 6: 70%\n  bucket 2: 100%\n  bucket 4: 90%\n  bucket 3: 60%\n  bucket 6: 80%\n  bucket 5: 40%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 1: 70%\n  bucket 8: 30%\n  bucket 6: 90%\n  bucket 4: 100%\n  bucket 5: 50%\n  bucket 1: 80%\n  bucket 7: 40%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 3: 70%\n  bucket 1: 90%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 6: 100%\n  bucket 3: 80%\n  bucket 5: 70%\n  bucket 8: 50%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 1: 100%\n  bucket 7: 60%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 5: 80%\n  bucket 3: 100%\n  bucket 8: 70%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 5: 90%\n  bucket 7: 80%\n  bucket 8: 80%\n  bucket 5: 100%\n  bucket 8: 90%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 60%\n  bucket 10: 10%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 10: 30%\n  bucket 9: 90%\n  bucket 10: 40%\n  bucket 9: 100%\n  bucket 10: 50%\n  bucket 10: 60%\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Entering block accumulator loop for bucket 12:\n  Calculating Z arrays for bucket 14\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 10%\n  bucket 12: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 12: 30%\n  Entering block accumulator loop for bucket 13:\n  bucket 14: 10%\n  bucket 12: 40%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 12: 50%\n  bucket 14: 30%\n  bucket 12: 60%\n  bucket 14: 40%\n  bucket 12: 70%\n  bucket 14: 50%\n  bucket 12: 80%\n  bucket 13: 20%\n  bucket 14: 60%\n  bucket 12: 90%\n  bucket 13: 30%\n  bucket 14: 70%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 40%\n  bucket 14: 80%\n  bucket 13: 50%\n  bucket 14: 90%\n  bucket 13: 60%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 15\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 10%\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 20%\n  bucket 15: 10%\n  bucket 16: 30%\n  Entering block accumulator loop for bucket 17:\n  bucket 15: 20%\n  bucket 16: 40%\n  bucket 15: 30%\n  bucket 17: 10%\n  bucket 16: 50%\n  bucket 15: 40%\n  bucket 17: 20%\n  bucket 15: 50%\n  bucket 16: 60%\n  bucket 15: 60%\n  bucket 17: 30%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 17: 40%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 17: 50%\n  bucket 15: 90%\n  bucket 16: 90%\n  bucket 17: 60%\n  bucket 15: 100%\n  bucket 16: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Entering block accumulator loop for bucket 18:\n  Calculating Z arrays for bucket 19\n  bucket 18: 10%\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 30%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 19: 20%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 19: 30%\n  bucket 18: 80%\n  bucket 19: 40%\n  bucket 18: 90%\n  bucket 19: 50%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 40%\n  bucket 20: 50%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 60%\n  bucket 21: 10%\n  bucket 20: 70%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 20%\n  bucket 20: 80%\n  bucket 21: 30%\n  bucket 20: 90%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 40%\n  bucket 20: 100%\n  bucket 22: 10%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 50%\n  bucket 22: 20%\n  bucket 21: 60%\n  bucket 22: 30%\n  bucket 21: 70%\n  bucket 22: 40%\n  bucket 21: 80%\n  bucket 22: 50%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 60%\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  bucket 22: 70%\n  bucket 22: 80%\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 50%\n  bucket 24: 10%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 24: 30%\n  bucket 23: 80%\n  bucket 24: 40%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\nGetting block 28 of 60\n  bucket 27: 20%\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 30%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 27: 50%\n  bucket 28: 20%\n  bucket 27: 60%\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 30%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 40%\n  bucket 29: 10%\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  bucket 29: 20%\n  bucket 28: 50%\n  Calculating Z arrays for bucket 30\n  bucket 27: 70%\n  bucket 29: 30%\n  bucket 27: 80%\n  bucket 28: 60%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 40%\n  bucket 30: 10%\n  bucket 29: 50%\n  bucket 27: 90%\n  bucket 29: 60%\n  bucket 30: 20%\n  bucket 27: 100%\n  bucket 28: 70%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 30: 30%\n  bucket 28: 80%\n  bucket 30: 40%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 30: 50%\n  bucket 29: 90%\n  bucket 30: 60%\n  bucket 28: 100%\n  bucket 29: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block of length 51 for bucket 29\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 120 for bucket 27\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 33:\n  bucket 34: 10%\n  bucket 33: 10%\n  bucket 34: 20%\n  bucket 33: 20%\n  bucket 34: 30%\n  bucket 33: 30%\n  bucket 34: 40%\n  bucket 33: 40%\n  bucket 34: 50%\n  bucket 33: 50%\n  bucket 34: 60%\n  bucket 33: 60%\n  bucket 34: 70%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 34: 80%\n  bucket 33: 90%\n  bucket 34: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  bucket 35: 80%\n  Calculating Z arrays for bucket 36\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  bucket 40: 30%\n  Calculating Z arrays for bucket 41\n  bucket 40: 40%\n  bucket 40: 50%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 60%\n  bucket 41: 10%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Entering block accumulator loop for bucket 42:\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 10%\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 42: 20%\n  bucket 43: 30%\n  bucket 42: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 42: 40%\n  bucket 43: 60%\n  bucket 42: 50%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 42: 60%\n  bucket 43: 90%\n  bucket 42: 70%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Calculating Z arrays for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  bucket 45: 10%\n  Calculating Z arrays for bucket 46\n  bucket 45: 20%\n  bucket 45: 30%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 46: 10%\n  bucket 45: 60%\n  bucket 46: 20%\n  bucket 45: 70%\n  bucket 46: 30%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 46: 40%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Reserving size (126) for bucket 47\n  Entering block accumulator loop for bucket 49:\n  Calculating Z arrays for bucket 47\n  bucket 48: 10%\n  bucket 49: 10%\n  bucket 48: 20%\n  Entering block accumulator loop for bucket 47:\n  bucket 49: 20%\n  bucket 48: 30%\n  bucket 47: 10%\n  bucket 49: 30%\n  bucket 48: 40%\n  bucket 47: 20%\n  bucket 49: 40%\n  bucket 48: 50%\n  bucket 47: 30%\n  bucket 49: 50%\n  bucket 48: 60%\n  bucket 47: 40%\n  bucket 49: 60%\n  bucket 48: 70%\n  bucket 47: 50%\n  bucket 49: 70%\n  bucket 48: 80%\n  bucket 47: 60%\n  bucket 49: 80%\n  bucket 48: 90%\n  bucket 47: 70%\n  bucket 49: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 47: 80%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  bucket 47: 90%\n  (Using difference cover)\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 80%\n  bucket 50: 90%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  bucket 51: 40%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 50%\n  bucket 52: 10%\n  bucket 51: 60%\n  bucket 52: 20%\n  bucket 51: 70%\n  bucket 52: 30%\n  bucket 51: 80%\n  bucket 52: 40%\n  bucket 51: 90%\n  bucket 52: 50%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 20%\n  bucket 54: 10%\n  bucket 53: 30%\n  bucket 54: 20%\n  bucket 53: 40%\n  bucket 54: 30%\n  bucket 53: 50%\n  bucket 54: 40%\n  bucket 53: 60%\n  bucket 54: 50%\n  bucket 53: 70%\n  bucket 54: 60%\n  bucket 53: 80%\n  bucket 54: 70%\n  bucket 53: 90%\n  bucket 54: 80%\n  bucket 53: 100%\n  bucket 54: 90%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 30%\n  bucket 56: 40%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 50%\n  bucket 57: 10%\n  bucket 56: 60%\n  bucket 57: 20%\n  bucket 56: 70%\n  bucket 57: 30%\n  bucket 56: 80%\n  bucket 57: 40%\n  bucket 56: 90%\n  bucket 57: 50%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 59:\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 59: 10%\n  bucket 60: 30%\n  bucket 59: 20%\n  bucket 60: 40%\n  bucket 59: 30%\n  bucket 60: 50%\n  bucket 59: 40%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 60: 80%\n  bucket 59: 70%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:03:19", "plugin": "core", "name": "end_epoch", "raw_value": "1708671799.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:03:18", "plugin": "core", "name": "start_epoch", "raw_value": "1708671798.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-14", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 14, "time_seconds": 20.73296046257019, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "4a287d2f42e64ab7"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "acf7510d6166f330"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "2419ceaebc661b63", "state": "error", "exit_code": null, "update_time": "2024-02-23T06:56:59.411635", "create_time": "2024-02-23T06:56:54.205218", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-chwg5", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/8/7/e/dataset_87ec495f-9cfa-4ff8-8234-062a7e722ded.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        seqtk seq -1 '/galaxy/server/database/objects/1/a/a/dataset_1aa47980-5c80-433d-be42-dfa2a7ee3ded.dat' > input_f.fasta && seqtk seq -2 '/galaxy/server/database/objects/1/a/a/dataset_1aa47980-5c80-433d-be42-dfa2a7ee3ded.dat' > input_r.fasta &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f   -1 input_f.fasta -2 input_r.fasta                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/8/6/a/dataset_86a34299-9b5a-421f-a1bb-ee5964d8c4d3.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 186, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 185, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "4a287d2f42e64ab7", "src": "hda", "uuid": "87ec495f-9cfa-4ff8-8234-062a7e722ded"}, "library|input_1": {"id": "acf7510d6166f330", "src": "hda", "uuid": "1aa47980-5c80-433d-be42-dfa2a7ee3ded"}}, "outputs": {"output_alignments": {"id": "42a9576021cc07de", "src": "hda", "uuid": "86a34299-9b5a-421f-a1bb-ee5964d8c4d3"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": null, "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "hisat2/2.2.1+galaxy1-14", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 14, "time_seconds": 26.676844120025635, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "25cd62e0c415b2d5"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "3c940b0e59904c6c"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "0c771f4d264f808d", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:03:53.465845", "create_time": "2024-02-23T07:03:42.722699", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-xscv9", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/0/e/c/dataset_0eccc71e-495f-4b06-ba18-ae1ccfa1552c.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        seqtk seq -1 '/galaxy/server/database/objects/1/f/9/dataset_1f946096-a96b-479d-ba92-5fb40f650777.dat' > input_f.fasta && seqtk seq -2 '/galaxy/server/database/objects/1/f/9/dataset_1f946096-a96b-479d-ba92-5fb40f650777.dat' > input_r.fasta &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f   -1 input_f.fasta -2 input_r.fasta                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/0/4/7/dataset_04707d06-d7d9-4bad-abc1-43c52f16e5cb.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 248, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 247, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "25cd62e0c415b2d5", "src": "hda", "uuid": "0eccc71e-495f-4b06-ba18-ae1ccfa1552c"}, "library|input_1": {"id": "3c940b0e59904c6c", "src": "hda", "uuid": "1f946096-a96b-479d-ba92-5fb40f650777"}}, "outputs": {"output_alignments": {"id": "ff4439c76331747f", "src": "hda", "uuid": "04707d06-d7d9-4bad-abc1-43c52f16e5cb"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 60\n  Entering block accumulator loop for bucket 3:\nGetting block 7 of 60\nGetting block 6 of 60\nGetting block 8 of 60\n  Reserving size (126) for bucket 6\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 8\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 8: 10%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 5: 10%\n  bucket 2: 20%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 5: 20%\n  bucket 1: 20%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 7: 30%\n  bucket 3: 60%\n  bucket 2: 30%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 5: 50%\n  bucket 2: 40%\n  bucket 3: 80%\n  bucket 8: 50%\n  bucket 6: 30%\n  bucket 7: 50%\n  bucket 1: 30%\n  bucket 3: 90%\n  bucket 4: 50%\n  bucket 2: 50%\n  bucket 8: 60%\n  bucket 5: 60%\n  bucket 7: 60%\n  bucket 1: 40%\n  bucket 4: 60%\n  bucket 3: 100%\n  bucket 8: 70%\n  bucket 5: 70%\n  bucket 7: 70%\n  bucket 6: 40%\n  bucket 8: 80%\n  bucket 4: 70%\n  Sorting block of length 106 for bucket 3\n  bucket 2: 60%\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 1: 50%\n  bucket 6: 50%\n  bucket 7: 80%\n  bucket 8: 90%\n  bucket 1: 60%\n  bucket 5: 90%\n  bucket 2: 70%\n  bucket 6: 60%\n  bucket 7: 90%\n  bucket 5: 100%\n  bucket 8: 100%\n  bucket 6: 70%\n  bucket 7: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 1: 70%\n  bucket 4: 80%\n  bucket 2: 80%\n  bucket 6: 90%\n  bucket 1: 80%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 6: 100%\n  bucket 1: 90%\n  Sorting block of length 90 for bucket 6\n  bucket 2: 100%\n  (Using difference cover)\n  bucket 1: 100%\n  bucket 4: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  bucket 9: 90%\n  Calculating Z arrays for bucket 10\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 60\n  Entering block accumulator loop for bucket 11:\n  Reserving size (126) for bucket 12\nGetting block 13 of 60\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  Reserving size (126) for bucket 13\n  bucket 11: 20%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  bucket 11: 30%\n  Calculating Z arrays for bucket 14\n  Calculating Z arrays for bucket 13\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 15\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 15:\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 15: 10%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 15: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 12: 70%\n  bucket 13: 20%\n  bucket 11: 80%\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 15: 30%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 15: 40%\n  bucket 13: 40%\n  bucket 12: 100%\n  bucket 11: 100%\n  bucket 13: 50%\n  bucket 14: 20%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 15: 50%\n  Sorting block of length 95 for bucket 11\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 15: 60%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 15: 70%\n  bucket 13: 90%\n  bucket 14: 50%\n  bucket 13: 100%\n  bucket 14: 60%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 14: 70%\n  bucket 15: 90%\n  bucket 14: 80%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  bucket 14: 90%\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 14: 100%\nReturning block of 83 for bucket 12\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  bucket 17: 30%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  bucket 18: 80%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Calculating Z arrays for bucket 20\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 23:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 23: 10%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 23: 20%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 23: 30%\n  bucket 24: 70%\n  bucket 23: 40%\n  bucket 24: 80%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 24: 90%\n  bucket 23: 70%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 26 of 60\nGetting block 25 of 60\n  Reserving size (126) for bucket 26\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 26\n  Calculating Z arrays for bucket 25\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Entering block accumulator loop for bucket 25:\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 27: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 27: 50%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 27: 60%\n  bucket 26: 80%\n  bucket 25: 100%\n  bucket 27: 70%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 26: 100%\n  bucket 27: 90%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 28 of 60\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  Entering block accumulator loop for bucket 28:\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 28: 10%\n  bucket 29: 70%\n  bucket 28: 20%\n  bucket 29: 80%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 29: 90%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  bucket 28: 70%\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\nGetting block 30 of 60\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 30\nReturning block of 52 for bucket 29\n  Calculating Z arrays for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 30%\n  bucket 32: 10%\n  bucket 31: 40%\n  bucket 32: 20%\n  bucket 31: 50%\n  bucket 32: 30%\n  bucket 31: 60%\n  bucket 32: 40%\n  bucket 31: 70%\n  bucket 32: 50%\n  bucket 31: 80%\n  bucket 32: 60%\n  bucket 31: 90%\n  bucket 32: 70%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 34: 20%\n  bucket 34: 30%\n  Entering block accumulator loop for bucket 33:\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 33: 10%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 33: 20%\n  bucket 34: 80%\n  bucket 33: 30%\n  bucket 34: 90%\n  bucket 34: 100%\n  bucket 33: 40%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  bucket 37: 10%\n  Calculating Z arrays for bucket 38\n  bucket 37: 20%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 30%\n  bucket 38: 10%\n  bucket 37: 40%\n  bucket 38: 20%\n  bucket 37: 50%\n  bucket 38: 30%\n  bucket 37: 60%\n  bucket 38: 40%\n  bucket 37: 70%\n  bucket 38: 50%\n  bucket 37: 80%\n  bucket 38: 60%\n  bucket 37: 90%\n  bucket 38: 70%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  bucket 39: 40%\n  Calculating Z arrays for bucket 40\n  bucket 39: 50%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 60%\n  bucket 40: 10%\n  bucket 39: 70%\n  bucket 40: 20%\n  bucket 39: 80%\n  bucket 40: 30%\n  bucket 39: 90%\n  bucket 40: 40%\n  bucket 39: 100%\n  bucket 40: 50%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 41:\n  bucket 42: 10%\n  bucket 41: 10%\n  bucket 42: 20%\n  bucket 41: 20%\n  bucket 42: 30%\n  bucket 41: 30%\n  bucket 42: 40%\n  bucket 41: 40%\n  bucket 42: 50%\n  bucket 41: 50%\n  bucket 42: 60%\n  bucket 41: 60%\n  bucket 42: 70%\n  bucket 41: 70%\n  bucket 42: 80%\n  bucket 41: 80%\n  bucket 42: 90%\n  bucket 41: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  bucket 43: 70%\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 80%\n  bucket 44: 10%\n  bucket 43: 90%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 20%\n  bucket 43: 100%\n  bucket 45: 10%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 30%\n  bucket 45: 20%\n  bucket 44: 40%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 44: 50%\n  bucket 45: 50%\n  bucket 44: 60%\n  bucket 45: 60%\n  bucket 44: 70%\n  bucket 45: 70%\n  bucket 44: 80%\n  Sorting block time: 00:00:00\n  bucket 45: 80%\n  bucket 44: 90%\nReturning block of 122 for bucket 43\n  bucket 45: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 10%\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 46: 20%\n  bucket 47: 30%\n  bucket 46: 30%\n  bucket 47: 40%\n  bucket 46: 40%\n  bucket 47: 50%\n  bucket 46: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 46: 60%\n  bucket 47: 80%\n  bucket 46: 70%\n  bucket 47: 90%\n  bucket 46: 80%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Calculating Z arrays for bucket 48\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  Entering block accumulator loop for bucket 48:\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 20%\n  bucket 48: 10%\n  bucket 50: 10%\n  bucket 49: 30%\n  bucket 50: 20%\n  bucket 48: 20%\n  bucket 49: 40%\n  bucket 50: 30%\n  bucket 49: 50%\n  bucket 50: 40%\n  bucket 49: 60%\n  bucket 50: 50%\n  bucket 49: 70%\n  bucket 50: 60%\n  bucket 48: 30%\n  bucket 49: 80%\n  bucket 50: 70%\n  bucket 49: 90%\n  bucket 48: 40%\n  bucket 50: 80%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 90%\n  bucket 48: 50%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\nGetting block 52 of 60\n  bucket 51: 80%\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 60%\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 53: 70%\n  bucket 54: 30%\n  bucket 53: 80%\n  bucket 54: 40%\n  bucket 53: 90%\n  bucket 54: 50%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 20%\n  bucket 57: 10%\n  bucket 56: 30%\n  bucket 57: 20%\n  bucket 56: 40%\n  bucket 57: 30%\n  bucket 56: 50%\n  bucket 57: 40%\n  bucket 56: 60%\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  bucket 56: 70%\n  Calculating Z arrays for bucket 58\n  bucket 57: 50%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 57: 60%\n  Entering block accumulator loop for bucket 58:\n  bucket 56: 100%\n  bucket 57: 70%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 58: 10%\n  bucket 57: 80%\n  bucket 58: 20%\n  bucket 57: 90%\n  bucket 57: 100%\n  bucket 58: 30%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Entering block accumulator loop for bucket 59:\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 10%\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 59: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 59: 30%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 59: 40%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 59: 50%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:01\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    3 (30.00%) aligned concordantly 0 times\n    7 (70.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        3 (50.00%) aligned 0 times\n        3 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n85.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:01\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    3 (30.00%) aligned concordantly 0 times\n    7 (70.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        3 (50.00%) aligned 0 times\n        3 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n85.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 3\nGetting block 4 of 60\n  Entering block accumulator loop for bucket 3:\nGetting block 7 of 60\nGetting block 6 of 60\nGetting block 8 of 60\n  Reserving size (126) for bucket 6\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 8\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 3: 30%\n  bucket 4: 10%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 8: 10%\n  bucket 3: 40%\n  bucket 4: 20%\n  bucket 5: 10%\n  bucket 2: 20%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 5: 20%\n  bucket 1: 20%\n  bucket 7: 10%\n  bucket 8: 20%\n  bucket 5: 30%\n  bucket 6: 10%\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 5: 40%\n  bucket 6: 20%\n  bucket 7: 30%\n  bucket 3: 60%\n  bucket 2: 30%\n  bucket 4: 40%\n  bucket 3: 70%\n  bucket 8: 40%\n  bucket 7: 40%\n  bucket 5: 50%\n  bucket 2: 40%\n  bucket 3: 80%\n  bucket 8: 50%\n  bucket 6: 30%\n  bucket 7: 50%\n  bucket 1: 30%\n  bucket 3: 90%\n  bucket 4: 50%\n  bucket 2: 50%\n  bucket 8: 60%\n  bucket 5: 60%\n  bucket 7: 60%\n  bucket 1: 40%\n  bucket 4: 60%\n  bucket 3: 100%\n  bucket 8: 70%\n  bucket 5: 70%\n  bucket 7: 70%\n  bucket 6: 40%\n  bucket 8: 80%\n  bucket 4: 70%\n  Sorting block of length 106 for bucket 3\n  bucket 2: 60%\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 1: 50%\n  bucket 6: 50%\n  bucket 7: 80%\n  bucket 8: 90%\n  bucket 1: 60%\n  bucket 5: 90%\n  bucket 2: 70%\n  bucket 6: 60%\n  bucket 7: 90%\n  bucket 5: 100%\n  bucket 8: 100%\n  bucket 6: 70%\n  bucket 7: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 1: 70%\n  bucket 4: 80%\n  bucket 2: 80%\n  bucket 6: 90%\n  bucket 1: 80%\n  bucket 2: 90%\n  bucket 4: 90%\n  bucket 6: 100%\n  bucket 1: 90%\n  Sorting block of length 90 for bucket 6\n  bucket 2: 100%\n  (Using difference cover)\n  bucket 1: 100%\n  bucket 4: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  bucket 9: 90%\n  Calculating Z arrays for bucket 10\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 60\n  Entering block accumulator loop for bucket 11:\n  Reserving size (126) for bucket 12\nGetting block 13 of 60\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  Reserving size (126) for bucket 13\n  bucket 11: 20%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  bucket 11: 30%\n  Calculating Z arrays for bucket 14\n  Calculating Z arrays for bucket 13\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 13:\n  Calculating Z arrays for bucket 15\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 15:\n  bucket 12: 40%\n  bucket 11: 60%\n  bucket 12: 50%\n  bucket 15: 10%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 15: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 12: 70%\n  bucket 13: 20%\n  bucket 11: 80%\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 15: 30%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 15: 40%\n  bucket 13: 40%\n  bucket 12: 100%\n  bucket 11: 100%\n  bucket 13: 50%\n  bucket 14: 20%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 15: 50%\n  Sorting block of length 95 for bucket 11\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 15: 60%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 15: 70%\n  bucket 13: 90%\n  bucket 14: 50%\n  bucket 13: 100%\n  bucket 14: 60%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  (Using difference cover)\n  bucket 15: 80%\n  bucket 14: 70%\n  bucket 15: 90%\n  bucket 14: 80%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  bucket 14: 90%\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 14: 100%\nReturning block of 83 for bucket 12\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  bucket 17: 30%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  bucket 18: 80%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Calculating Z arrays for bucket 20\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 20: 40%\n  bucket 19: 60%\n  bucket 20: 50%\n  bucket 19: 70%\n  bucket 20: 60%\n  bucket 19: 80%\n  bucket 20: 70%\n  bucket 19: 90%\n  bucket 20: 80%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 23:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 23: 10%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 23: 20%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 23: 30%\n  bucket 24: 70%\n  bucket 23: 40%\n  bucket 24: 80%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 24: 90%\n  bucket 23: 70%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 26 of 60\nGetting block 25 of 60\n  Reserving size (126) for bucket 26\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 26\n  Calculating Z arrays for bucket 25\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Entering block accumulator loop for bucket 25:\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 27: 10%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 25: 60%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 27: 50%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 27: 60%\n  bucket 26: 80%\n  bucket 25: 100%\n  bucket 27: 70%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 27: 80%\n  bucket 26: 100%\n  bucket 27: 90%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 28 of 60\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  Entering block accumulator loop for bucket 28:\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 28: 10%\n  bucket 29: 70%\n  bucket 28: 20%\n  bucket 29: 80%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 29: 90%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  bucket 28: 70%\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\nGetting block 30 of 60\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 30\nReturning block of 52 for bucket 29\n  Calculating Z arrays for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 30%\n  bucket 32: 10%\n  bucket 31: 40%\n  bucket 32: 20%\n  bucket 31: 50%\n  bucket 32: 30%\n  bucket 31: 60%\n  bucket 32: 40%\n  bucket 31: 70%\n  bucket 32: 50%\n  bucket 31: 80%\n  bucket 32: 60%\n  bucket 31: 90%\n  bucket 32: 70%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 34: 20%\n  bucket 34: 30%\n  Entering block accumulator loop for bucket 33:\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 33: 10%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 33: 20%\n  bucket 34: 80%\n  bucket 33: 30%\n  bucket 34: 90%\n  bucket 34: 100%\n  bucket 33: 40%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  bucket 37: 10%\n  Calculating Z arrays for bucket 38\n  bucket 37: 20%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 30%\n  bucket 38: 10%\n  bucket 37: 40%\n  bucket 38: 20%\n  bucket 37: 50%\n  bucket 38: 30%\n  bucket 37: 60%\n  bucket 38: 40%\n  bucket 37: 70%\n  bucket 38: 50%\n  bucket 37: 80%\n  bucket 38: 60%\n  bucket 37: 90%\n  bucket 38: 70%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  bucket 39: 40%\n  Calculating Z arrays for bucket 40\n  bucket 39: 50%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 60%\n  bucket 40: 10%\n  bucket 39: 70%\n  bucket 40: 20%\n  bucket 39: 80%\n  bucket 40: 30%\n  bucket 39: 90%\n  bucket 40: 40%\n  bucket 39: 100%\n  bucket 40: 50%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 41:\n  bucket 42: 10%\n  bucket 41: 10%\n  bucket 42: 20%\n  bucket 41: 20%\n  bucket 42: 30%\n  bucket 41: 30%\n  bucket 42: 40%\n  bucket 41: 40%\n  bucket 42: 50%\n  bucket 41: 50%\n  bucket 42: 60%\n  bucket 41: 60%\n  bucket 42: 70%\n  bucket 41: 70%\n  bucket 42: 80%\n  bucket 41: 80%\n  bucket 42: 90%\n  bucket 41: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  bucket 43: 70%\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 80%\n  bucket 44: 10%\n  bucket 43: 90%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 20%\n  bucket 43: 100%\n  bucket 45: 10%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 30%\n  bucket 45: 20%\n  bucket 44: 40%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 44: 50%\n  bucket 45: 50%\n  bucket 44: 60%\n  bucket 45: 60%\n  bucket 44: 70%\n  bucket 45: 70%\n  bucket 44: 80%\n  Sorting block time: 00:00:00\n  bucket 45: 80%\n  bucket 44: 90%\nReturning block of 122 for bucket 43\n  bucket 45: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 10%\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 46: 20%\n  bucket 47: 30%\n  bucket 46: 30%\n  bucket 47: 40%\n  bucket 46: 40%\n  bucket 47: 50%\n  bucket 46: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 46: 60%\n  bucket 47: 80%\n  bucket 46: 70%\n  bucket 47: 90%\n  bucket 46: 80%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Calculating Z arrays for bucket 48\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  Entering block accumulator loop for bucket 48:\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 20%\n  bucket 48: 10%\n  bucket 50: 10%\n  bucket 49: 30%\n  bucket 50: 20%\n  bucket 48: 20%\n  bucket 49: 40%\n  bucket 50: 30%\n  bucket 49: 50%\n  bucket 50: 40%\n  bucket 49: 60%\n  bucket 50: 50%\n  bucket 49: 70%\n  bucket 50: 60%\n  bucket 48: 30%\n  bucket 49: 80%\n  bucket 50: 70%\n  bucket 49: 90%\n  bucket 48: 40%\n  bucket 50: 80%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 90%\n  bucket 48: 50%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\nGetting block 52 of 60\n  bucket 51: 80%\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 60%\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 53: 70%\n  bucket 54: 30%\n  bucket 53: 80%\n  bucket 54: 40%\n  bucket 53: 90%\n  bucket 54: 50%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 20%\n  bucket 57: 10%\n  bucket 56: 30%\n  bucket 57: 20%\n  bucket 56: 40%\n  bucket 57: 30%\n  bucket 56: 50%\n  bucket 57: 40%\n  bucket 56: 60%\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  bucket 56: 70%\n  Calculating Z arrays for bucket 58\n  bucket 57: 50%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 57: 60%\n  Entering block accumulator loop for bucket 58:\n  bucket 56: 100%\n  bucket 57: 70%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 58: 10%\n  bucket 57: 80%\n  bucket 58: 20%\n  bucket 57: 90%\n  bucket 57: 100%\n  bucket 58: 30%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Entering block accumulator loop for bucket 59:\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 10%\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 59: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 59: 30%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 59: 40%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 59: 50%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:03:45", "plugin": "core", "name": "end_epoch", "raw_value": "1708671825.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:03:44", "plugin": "core", "name": "start_epoch", "raw_value": "1708671824.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-15", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 15, "time_seconds": 27.077431440353394, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "22223e46397f66d4"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "f8d26f9ba7bd2974"}, "library|rna_strandness": "R", "library|type": "single", "adv|spliced_options|novel_splicesite_outfile": true, "adv|spliced_options|spliced_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "d4df75928b958a9f", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:57:25.763474", "create_time": "2024-02-23T06:57:14.317385", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-575zp", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/7/5/0/dataset_7503c0fb-bf25-4746-8921-14cb4b0b2145.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/e/6/8/dataset_e689eb92-d3fe-4f5a-b84c-05aa132b115b.dat' input_f.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'     -U 'input_f.fastq'      --rna-strandness R             --pen-cansplice 0 --pen-noncansplice 12 --pen-canintronlen G,-8.0,1.0 --pen-noncanintronlen G,-8.0,1.0  --min-intronlen 20 --max-intronlen 500000   --novel-splicesite-outfile '/galaxy/server/database/objects/e/9/2/dataset_e929b475-227b-4c08-a3be-8a8db0402f81.dat'                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/3/f/1/dataset_3f10144a-def4-49c7-94ff-0a430e16d118.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 1, \"canonical_penalty\": \"0\", \"coefficient\": \"1.0\", \"constant_term\": \"-8.0\", \"function_type\": \"G\", \"known_splice_gtf\": null, \"max_intron\": \"500000\", \"min_intron\": \"20\", \"nc_coefficient\": \"1.0\", \"nc_constant_term\": \"-8.0\", \"nc_function_type\": \"G\", \"no_spliced_alignment_options\": {\"__current_case__\": 1, \"no_spliced_alignment\": \"\"}, \"noncanonical_penalty\": \"12\", \"notmplen\": false, \"novel_splicesite_outfile\": true, \"spliced_options_selector\": \"advanced\", \"tma\": \"\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 189, \"src\": \"hda\"}]}, \"rna_strandness\": \"R\", \"type\": \"single\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 188, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "22223e46397f66d4", "src": "hda", "uuid": "7503c0fb-bf25-4746-8921-14cb4b0b2145"}, "library|input_1": {"id": "f8d26f9ba7bd2974", "src": "hda", "uuid": "e689eb92-d3fe-4f5a-b84c-05aa132b115b"}}, "outputs": {"output_alignments": {"id": "d9f4ab14ef27f9a8", "src": "hda", "uuid": "3f10144a-def4-49c7-94ff-0a430e16d118"}, "novel_splicesite_output": {"id": "d3e5dbfcbcdea020", "src": "hda", "uuid": "e929b475-227b-4c08-a3be-8a8db0402f81"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 60\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 4\n  bucket 1: 10%\nGetting block 5 of 60\n  Calculating Z arrays for bucket 4\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 3\nGetting block 6 of 60\n  Calculating Z arrays for bucket 8\n  Reserving size (126) for bucket 6\nGetting block 7 of 60\n  bucket 1: 20%\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 8:\n  bucket 2: 10%\n  Reserving size (126) for bucket 7\n  bucket 1: 30%\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 10%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 40%\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 8: 10%\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 5:\n  bucket 7: 10%\n  bucket 1: 60%\n  bucket 8: 20%\n  bucket 4: 30%\n  bucket 3: 10%\n  bucket 6: 20%\n  bucket 1: 70%\n  bucket 8: 30%\n  bucket 7: 20%\n  bucket 4: 40%\n  bucket 3: 20%\n  bucket 1: 80%\n  bucket 2: 30%\n  bucket 6: 30%\n  bucket 8: 40%\n  bucket 4: 50%\n  bucket 7: 30%\n  bucket 5: 10%\n  bucket 1: 90%\n  bucket 6: 40%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 8: 50%\n  bucket 4: 60%\n  bucket 7: 40%\n  bucket 1: 100%\n  bucket 2: 50%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 3: 40%\n  bucket 4: 70%\n  bucket 6: 50%\n  bucket 8: 60%\n  bucket 2: 60%\n  bucket 7: 50%\n  bucket 4: 80%\n  bucket 5: 20%\n  bucket 7: 60%\n  bucket 2: 70%\n  bucket 8: 70%\n  bucket 4: 90%\n  bucket 3: 50%\n  bucket 6: 60%\n  bucket 2: 80%\n  bucket 7: 70%\n  bucket 5: 30%\n  bucket 8: 80%\n  bucket 4: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 2: 90%\n  bucket 8: 90%\n  bucket 5: 40%\n  bucket 3: 60%\n  bucket 6: 80%\n  bucket 8: 100%\n  bucket 2: 100%\n  bucket 5: 50%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 3: 70%\n  Sorting block of length 94 for bucket 8\n  bucket 3: 80%\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 6: 90%\n  bucket 3: 90%\n  bucket 6: 100%\n  bucket 3: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\nReturning block of 43 for bucket 1\n  Sorting block of length 106 for bucket 3\n  bucket 7: 90%\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 10:\n  Calculating Z arrays for bucket 11\nReturning block of 125 for bucket 9\n  bucket 10: 10%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 11: 10%\n  bucket 10: 30%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 11: 80%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 13: 20%\n  bucket 12: 10%\n  bucket 13: 30%\n  bucket 12: 20%\n  bucket 13: 40%\n  bucket 12: 30%\n  bucket 13: 50%\n  bucket 12: 40%\n  bucket 13: 60%\n  bucket 12: 50%\n  bucket 13: 70%\n  bucket 12: 60%\n  bucket 13: 80%\n  bucket 12: 70%\n  bucket 13: 90%\n  bucket 12: 80%\n  bucket 13: 100%\n  bucket 12: 90%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\nGetting block 15 of 60\n  bucket 14: 40%\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 50%\n  bucket 14: 60%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 70%\n  bucket 15: 10%\n  bucket 14: 80%\n  bucket 15: 20%\n  bucket 14: 90%\n  bucket 15: 30%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 16: 10%\n  bucket 17: 10%\n  bucket 16: 20%\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 60\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 16: 30%\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 16: 40%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 16: 50%\n  bucket 17: 50%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 16: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 19: 10%\n  bucket 16: 70%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 19: 20%\n  bucket 16: 80%\n  bucket 17: 100%\n  bucket 18: 80%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 19: 30%\n  bucket 18: 90%\n  bucket 16: 90%\n  bucket 18: 100%\n  bucket 19: 40%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Sorting block time: 00:00:00\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\nReturning block of 55 for bucket 21\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 22: 40%\n  bucket 23: 30%\n  bucket 22: 50%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  bucket 24: 90%\n  Calculating Z arrays for bucket 25\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  bucket 28: 100%\n  Sorting block of length 119 for bucket 27\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Entering block accumulator loop for bucket 29:\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 29: 40%\n  bucket 30: 20%\n  bucket 29: 50%\n  bucket 30: 30%\n  bucket 29: 60%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  bucket 29: 70%\n  Calculating Z arrays for bucket 31\n  bucket 30: 40%\n  bucket 29: 80%\n  bucket 30: 50%\n  Entering block accumulator loop for bucket 31:\n  bucket 29: 90%\n  bucket 30: 60%\n  bucket 31: 10%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  bucket 31: 20%\n  (Using difference cover)\n  bucket 31: 30%\n  bucket 30: 70%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 30: 80%\n  bucket 31: 60%\n  bucket 30: 90%\n  bucket 31: 70%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 80%\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 32\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 32:\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 32: 10%\n  bucket 33: 20%\n  bucket 32: 20%\n  bucket 33: 30%\n  bucket 32: 30%\n  bucket 33: 40%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 33: 50%\n  bucket 32: 70%\n  bucket 33: 60%\n  bucket 32: 80%\n  bucket 33: 70%\n  bucket 32: 90%\n  bucket 33: 80%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  bucket 33: 90%\n  (Using difference cover)\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 80%\n  bucket 34: 90%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 60%\n  bucket 36: 70%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 37: 10%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  bucket 38: 40%\n  Calculating Z arrays for bucket 39\n  bucket 38: 50%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 39: 10%\n  bucket 38: 80%\n  bucket 39: 20%\n  bucket 38: 90%\n  bucket 39: 30%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  bucket 40: 90%\n  Calculating Z arrays for bucket 41\n  bucket 40: 100%\n  Entering block accumulator loop for bucket 41:\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  Sorting block time: 00:00:00\n  bucket 41: 80%\nReturning block of 42 for bucket 40\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 42: 70%\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 10%\n  bucket 42: 80%\n  bucket 44: 10%\n  bucket 42: 90%\n  bucket 43: 20%\n  bucket 44: 20%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 30%\n  bucket 44: 30%\n  bucket 43: 40%\n  bucket 44: 40%\n  bucket 43: 50%\n  bucket 44: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  Sorting block time: 00:00:00\n  bucket 43: 90%\nReturning block of 120 for bucket 42\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 46: 10%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 20%\n  bucket 45: 20%\n  bucket 46: 30%\n  Entering block accumulator loop for bucket 47:\n  bucket 45: 30%\n  bucket 46: 40%\n  bucket 47: 10%\n  bucket 46: 50%\n  bucket 45: 40%\n  bucket 47: 20%\n  bucket 46: 60%\n  bucket 45: 50%\n  bucket 47: 30%\n  bucket 46: 70%\n  bucket 47: 40%\n  bucket 46: 80%\n  bucket 45: 60%\n  bucket 47: 50%\n  bucket 46: 90%\n  bucket 45: 70%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 60%\n  bucket 45: 80%\n  bucket 47: 70%\n  bucket 45: 90%\n  bucket 47: 80%\n  bucket 45: 100%\n  bucket 47: 90%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 49:\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 48: 10%\n  bucket 49: 10%\n  bucket 48: 20%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 20%\n  bucket 48: 30%\n  bucket 50: 10%\n  bucket 48: 40%\n  bucket 50: 20%\n  bucket 49: 30%\n  bucket 48: 50%\n  bucket 50: 30%\n  bucket 49: 40%\n  bucket 50: 40%\n  bucket 48: 60%\n  bucket 50: 50%\n  bucket 49: 50%\n  bucket 48: 70%\n  bucket 50: 60%\n  bucket 49: 60%\n  bucket 48: 80%\n  bucket 50: 70%\n  bucket 49: 70%\n  bucket 48: 90%\n  bucket 50: 80%\n  bucket 49: 80%\n  bucket 48: 100%\n  bucket 50: 90%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 10%\n  bucket 52: 10%\n  bucket 51: 20%\n  bucket 52: 20%\n  bucket 51: 30%\n  bucket 52: 30%\n  bucket 51: 40%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 51: 50%\n  bucket 52: 60%\n  bucket 51: 60%\n  bucket 52: 70%\n  bucket 51: 70%\n  bucket 52: 80%\n  bucket 51: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  bucket 51: 90%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\nGetting block 54 of 60\n  bucket 53: 30%\nGetting block 55 of 60\n  bucket 53: 40%\n  Reserving size (126) for bucket 55\n  bucket 53: 50%\n  Calculating Z arrays for bucket 55\n  bucket 53: 60%\n  Entering block accumulator loop for bucket 55:\n  bucket 53: 70%\n  bucket 55: 10%\n  bucket 53: 80%\n  bucket 55: 20%\n  bucket 53: 90%\n  bucket 55: 30%\n  bucket 53: 100%\n  bucket 55: 40%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 55: 50%\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 54\n  bucket 55: 60%\nReturning block of 79 for bucket 53\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 57: 20%\n  bucket 56: 70%\n  bucket 57: 30%\n  bucket 56: 80%\n  bucket 57: 40%\n  bucket 56: 90%\n  bucket 57: 50%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were unpaired; of these:\n    0 (0.00%) aligned 0 times\n    10 (100.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n100.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were unpaired; of these:\n    0 (0.00%) aligned 0 times\n    10 (100.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n100.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 60\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 4\n  bucket 1: 10%\nGetting block 5 of 60\n  Calculating Z arrays for bucket 4\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 3\nGetting block 6 of 60\n  Calculating Z arrays for bucket 8\n  Reserving size (126) for bucket 6\nGetting block 7 of 60\n  bucket 1: 20%\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 8:\n  bucket 2: 10%\n  Reserving size (126) for bucket 7\n  bucket 1: 30%\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 10%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 40%\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 8: 10%\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 5:\n  bucket 7: 10%\n  bucket 1: 60%\n  bucket 8: 20%\n  bucket 4: 30%\n  bucket 3: 10%\n  bucket 6: 20%\n  bucket 1: 70%\n  bucket 8: 30%\n  bucket 7: 20%\n  bucket 4: 40%\n  bucket 3: 20%\n  bucket 1: 80%\n  bucket 2: 30%\n  bucket 6: 30%\n  bucket 8: 40%\n  bucket 4: 50%\n  bucket 7: 30%\n  bucket 5: 10%\n  bucket 1: 90%\n  bucket 6: 40%\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 8: 50%\n  bucket 4: 60%\n  bucket 7: 40%\n  bucket 1: 100%\n  bucket 2: 50%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 3: 40%\n  bucket 4: 70%\n  bucket 6: 50%\n  bucket 8: 60%\n  bucket 2: 60%\n  bucket 7: 50%\n  bucket 4: 80%\n  bucket 5: 20%\n  bucket 7: 60%\n  bucket 2: 70%\n  bucket 8: 70%\n  bucket 4: 90%\n  bucket 3: 50%\n  bucket 6: 60%\n  bucket 2: 80%\n  bucket 7: 70%\n  bucket 5: 30%\n  bucket 8: 80%\n  bucket 4: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 2: 90%\n  bucket 8: 90%\n  bucket 5: 40%\n  bucket 3: 60%\n  bucket 6: 80%\n  bucket 8: 100%\n  bucket 2: 100%\n  bucket 5: 50%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 3: 70%\n  Sorting block of length 94 for bucket 8\n  bucket 3: 80%\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 6: 90%\n  bucket 3: 90%\n  bucket 6: 100%\n  bucket 3: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\nReturning block of 43 for bucket 1\n  Sorting block of length 106 for bucket 3\n  bucket 7: 90%\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 10:\n  Calculating Z arrays for bucket 11\nReturning block of 125 for bucket 9\n  bucket 10: 10%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 11: 10%\n  bucket 10: 30%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 11: 80%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 13: 20%\n  bucket 12: 10%\n  bucket 13: 30%\n  bucket 12: 20%\n  bucket 13: 40%\n  bucket 12: 30%\n  bucket 13: 50%\n  bucket 12: 40%\n  bucket 13: 60%\n  bucket 12: 50%\n  bucket 13: 70%\n  bucket 12: 60%\n  bucket 13: 80%\n  bucket 12: 70%\n  bucket 13: 90%\n  bucket 12: 80%\n  bucket 13: 100%\n  bucket 12: 90%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\nGetting block 15 of 60\n  bucket 14: 40%\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 50%\n  bucket 14: 60%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 70%\n  bucket 15: 10%\n  bucket 14: 80%\n  bucket 15: 20%\n  bucket 14: 90%\n  bucket 15: 30%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 16: 10%\n  bucket 17: 10%\n  bucket 16: 20%\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 60\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 16: 30%\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 16: 40%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 16: 50%\n  bucket 17: 50%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 16: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 19: 10%\n  bucket 16: 70%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 19: 20%\n  bucket 16: 80%\n  bucket 17: 100%\n  bucket 18: 80%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 19: 30%\n  bucket 18: 90%\n  bucket 16: 90%\n  bucket 18: 100%\n  bucket 19: 40%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Sorting block time: 00:00:00\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\nReturning block of 55 for bucket 21\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 22: 40%\n  bucket 23: 30%\n  bucket 22: 50%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  bucket 24: 90%\n  Calculating Z arrays for bucket 25\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  bucket 28: 100%\n  Sorting block of length 119 for bucket 27\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Entering block accumulator loop for bucket 29:\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 29: 40%\n  bucket 30: 20%\n  bucket 29: 50%\n  bucket 30: 30%\n  bucket 29: 60%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  bucket 29: 70%\n  Calculating Z arrays for bucket 31\n  bucket 30: 40%\n  bucket 29: 80%\n  bucket 30: 50%\n  Entering block accumulator loop for bucket 31:\n  bucket 29: 90%\n  bucket 30: 60%\n  bucket 31: 10%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  bucket 31: 20%\n  (Using difference cover)\n  bucket 31: 30%\n  bucket 30: 70%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 30: 80%\n  bucket 31: 60%\n  bucket 30: 90%\n  bucket 31: 70%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 80%\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 32\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 32:\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 32: 10%\n  bucket 33: 20%\n  bucket 32: 20%\n  bucket 33: 30%\n  bucket 32: 30%\n  bucket 33: 40%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 33: 50%\n  bucket 32: 70%\n  bucket 33: 60%\n  bucket 32: 80%\n  bucket 33: 70%\n  bucket 32: 90%\n  bucket 33: 80%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  bucket 33: 90%\n  (Using difference cover)\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 80%\n  bucket 34: 90%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 60%\n  bucket 36: 70%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 37: 10%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  bucket 38: 40%\n  Calculating Z arrays for bucket 39\n  bucket 38: 50%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 39: 10%\n  bucket 38: 80%\n  bucket 39: 20%\n  bucket 38: 90%\n  bucket 39: 30%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  bucket 40: 90%\n  Calculating Z arrays for bucket 41\n  bucket 40: 100%\n  Entering block accumulator loop for bucket 41:\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  Sorting block time: 00:00:00\n  bucket 41: 80%\nReturning block of 42 for bucket 40\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 42: 70%\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 10%\n  bucket 42: 80%\n  bucket 44: 10%\n  bucket 42: 90%\n  bucket 43: 20%\n  bucket 44: 20%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 30%\n  bucket 44: 30%\n  bucket 43: 40%\n  bucket 44: 40%\n  bucket 43: 50%\n  bucket 44: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  Sorting block time: 00:00:00\n  bucket 43: 90%\nReturning block of 120 for bucket 42\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 46: 10%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 20%\n  bucket 45: 20%\n  bucket 46: 30%\n  Entering block accumulator loop for bucket 47:\n  bucket 45: 30%\n  bucket 46: 40%\n  bucket 47: 10%\n  bucket 46: 50%\n  bucket 45: 40%\n  bucket 47: 20%\n  bucket 46: 60%\n  bucket 45: 50%\n  bucket 47: 30%\n  bucket 46: 70%\n  bucket 47: 40%\n  bucket 46: 80%\n  bucket 45: 60%\n  bucket 47: 50%\n  bucket 46: 90%\n  bucket 45: 70%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 60%\n  bucket 45: 80%\n  bucket 47: 70%\n  bucket 45: 90%\n  bucket 47: 80%\n  bucket 45: 100%\n  bucket 47: 90%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 49:\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 48: 10%\n  bucket 49: 10%\n  bucket 48: 20%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 20%\n  bucket 48: 30%\n  bucket 50: 10%\n  bucket 48: 40%\n  bucket 50: 20%\n  bucket 49: 30%\n  bucket 48: 50%\n  bucket 50: 30%\n  bucket 49: 40%\n  bucket 50: 40%\n  bucket 48: 60%\n  bucket 50: 50%\n  bucket 49: 50%\n  bucket 48: 70%\n  bucket 50: 60%\n  bucket 49: 60%\n  bucket 48: 80%\n  bucket 50: 70%\n  bucket 49: 70%\n  bucket 48: 90%\n  bucket 50: 80%\n  bucket 49: 80%\n  bucket 48: 100%\n  bucket 50: 90%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 10%\n  bucket 52: 10%\n  bucket 51: 20%\n  bucket 52: 20%\n  bucket 51: 30%\n  bucket 52: 30%\n  bucket 51: 40%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 51: 50%\n  bucket 52: 60%\n  bucket 51: 60%\n  bucket 52: 70%\n  bucket 51: 70%\n  bucket 52: 80%\n  bucket 51: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  bucket 51: 90%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\nGetting block 54 of 60\n  bucket 53: 30%\nGetting block 55 of 60\n  bucket 53: 40%\n  Reserving size (126) for bucket 55\n  bucket 53: 50%\n  Calculating Z arrays for bucket 55\n  bucket 53: 60%\n  Entering block accumulator loop for bucket 55:\n  bucket 53: 70%\n  bucket 55: 10%\n  bucket 53: 80%\n  bucket 55: 20%\n  bucket 53: 90%\n  bucket 55: 30%\n  bucket 53: 100%\n  bucket 55: 40%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 55: 50%\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 54\n  bucket 55: 60%\nReturning block of 79 for bucket 53\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 57: 20%\n  bucket 56: 70%\n  bucket 57: 30%\n  bucket 56: 80%\n  bucket 57: 40%\n  bucket 56: 90%\n  bucket 57: 50%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:57:16", "plugin": "core", "name": "end_epoch", "raw_value": "1708671436.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:57:16", "plugin": "core", "name": "start_epoch", "raw_value": "1708671436.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-15", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 15, "time_seconds": 25.38582491874695, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "d82ff9c73ba53596"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "ae874a04fb587a25"}, "library|rna_strandness": "R", "library|type": "single", "adv|spliced_options|novel_splicesite_outfile": true, "adv|spliced_options|spliced_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "861f307559a18b2d", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:04:18.133116", "create_time": "2024-02-23T07:04:08.361718", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-9dxt8", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/8/f/3/dataset_8f3ae087-ec7e-48cf-893b-5a8741e80ff8.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/2/f/e/dataset_2fe07cad-a685-46aa-aeb0-1bbf97eecbc4.dat' input_f.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'     -U 'input_f.fastq'      --rna-strandness R             --pen-cansplice 0 --pen-noncansplice 12 --pen-canintronlen G,-8.0,1.0 --pen-noncanintronlen G,-8.0,1.0  --min-intronlen 20 --max-intronlen 500000   --novel-splicesite-outfile '/galaxy/server/database/objects/3/0/a/dataset_30a0a2b7-f41c-44d0-9864-d78024ff728c.dat'                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/4/f/a/dataset_4fade6d5-938a-4193-9f44-a4f6ea2dde3a.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 1, \"canonical_penalty\": \"0\", \"coefficient\": \"1.0\", \"constant_term\": \"-8.0\", \"function_type\": \"G\", \"known_splice_gtf\": null, \"max_intron\": \"500000\", \"min_intron\": \"20\", \"nc_coefficient\": \"1.0\", \"nc_constant_term\": \"-8.0\", \"nc_function_type\": \"G\", \"no_spliced_alignment_options\": {\"__current_case__\": 1, \"no_spliced_alignment\": \"\"}, \"noncanonical_penalty\": \"12\", \"notmplen\": false, \"novel_splicesite_outfile\": true, \"spliced_options_selector\": \"advanced\", \"tma\": \"\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 251, \"src\": \"hda\"}]}, \"rna_strandness\": \"R\", \"type\": \"single\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 250, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "d82ff9c73ba53596", "src": "hda", "uuid": "8f3ae087-ec7e-48cf-893b-5a8741e80ff8"}, "library|input_1": {"id": "ae874a04fb587a25", "src": "hda", "uuid": "2fe07cad-a685-46aa-aeb0-1bbf97eecbc4"}}, "outputs": {"output_alignments": {"id": "4ab123c1acd263e9", "src": "hda", "uuid": "4fade6d5-938a-4193-9f44-a4f6ea2dde3a"}, "novel_splicesite_output": {"id": "37aa6fab23a25ca4", "src": "hda", "uuid": "30a0a2b7-f41c-44d0-9864-d78024ff728c"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 2\n  bucket 1: 10%\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\nGetting block 6 of 60\n  bucket 1: 20%\n  Calculating Z arrays for bucket 2\n  bucket 1: 30%\n  Reserving size (126) for bucket 6\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 1: 40%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\nGetting block 4 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 50%\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 10%\n  bucket 7: 10%\n  bucket 1: 60%\n  bucket 2: 20%\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  bucket 2: 30%\n  bucket 1: 70%\nGetting block 8 of 60\n  bucket 3: 10%\n  bucket 2: 40%\n  Entering block accumulator loop for bucket 5:\n  bucket 7: 20%\n  bucket 1: 80%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 4:\n  bucket 5: 10%\n  bucket 2: 50%\n  bucket 3: 20%\n  bucket 7: 30%\n  bucket 6: 10%\n  bucket 1: 90%\n  Reserving size (126) for bucket 8\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 5: 20%\n  bucket 7: 40%\n  Calculating Z arrays for bucket 8\n  bucket 6: 20%\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 40%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 6: 30%\n  bucket 7: 50%\n  bucket 2: 70%\n  bucket 3: 50%\n  bucket 8: 10%\n  bucket 3: 60%\n  bucket 6: 40%\n  bucket 8: 20%\n  bucket 2: 80%\n  bucket 5: 50%\n  bucket 2: 90%\n  bucket 3: 70%\n  bucket 5: 60%\n  bucket 3: 80%\n  bucket 2: 100%\n  bucket 1: 100%\n  bucket 7: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 8: 30%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 7: 70%\n  bucket 6: 60%\n  bucket 4: 20%\n  bucket 3: 100%\n  bucket 8: 40%\n  Sorting block of length 106 for bucket 3\n  bucket 4: 30%\n  bucket 6: 70%\n  bucket 4: 40%\n  bucket 5: 80%\n  bucket 4: 50%\n  bucket 6: 80%\n  bucket 8: 50%\n  bucket 6: 90%\n  bucket 5: 90%\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 5: 100%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 6: 100%\n  bucket 7: 90%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 7: 100%\n  bucket 8: 70%\n  bucket 4: 70%\n  Sorting block of length 63 for bucket 5\n  bucket 8: 80%\n  (Using difference cover)\n  bucket 4: 80%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\nReturning block of 85 for bucket 2\n  bucket 8: 90%\n  bucket 4: 90%\n  bucket 8: 100%\n  bucket 4: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  bucket 9: 20%\n  bucket 10: 10%\n  Calculating Z arrays for bucket 11\n  bucket 9: 30%\n  bucket 10: 20%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 40%\n  bucket 11: 10%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 9: 100%\n  bucket 11: 70%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 11: 80%\n  bucket 10: 100%\n  bucket 11: 90%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 10%\n  bucket 15: 10%\n  bucket 16: 20%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 16: 40%\n  bucket 15: 60%\n  bucket 16: 50%\n  bucket 15: 70%\n  bucket 16: 60%\n  bucket 15: 80%\n  bucket 16: 70%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 15: 100%\n  bucket 16: 90%\n  Sorting block of length 68 for bucket 15\n  bucket 16: 100%\n  (Using difference cover)\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 60%\n  bucket 17: 70%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 80%\n  bucket 18: 10%\n  bucket 17: 90%\nGetting block 19 of 60\n  bucket 17: 100%\n  bucket 18: 20%\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 30%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 19: 40%\n  bucket 18: 70%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 19: 60%\n  bucket 18: 90%\n  bucket 19: 70%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 40 for bucket 17\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  Sorting block time: 00:00:00\n  bucket 21: 100%\nReturning block of 98 for bucket 20\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 60%\nGetting block 27 of 60\n  Entering block accumulator loop for bucket 26:\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  bucket 25: 70%\n  bucket 26: 20%\n  bucket 25: 80%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 25: 90%\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 30%\n  bucket 26: 80%\n  bucket 27: 40%\n  bucket 26: 90%\n  Sorting block time: 00:00:00\nGetting block 28 of 60\nReturning block of 67 for bucket 25\n  bucket 26: 100%\n  Reserving size (126) for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Calculating Z arrays for bucket 28\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 50%\n  Entering block accumulator loop for bucket 29:\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 60%\n  bucket 29: 10%\n  bucket 28: 10%\n  bucket 27: 70%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 27: 80%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 27: 90%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 27: 100%\n  bucket 28: 60%\n  Sorting block of length 119 for bucket 27\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 28: 80%\n  bucket 29: 60%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 20%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 30%\n  bucket 31: 10%\n  bucket 30: 40%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  bucket 30: 50%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 50%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 34: 10%\n  bucket 33: 80%\n  bucket 34: 20%\n  bucket 33: 90%\n  bucket 34: 30%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  bucket 34: 40%\n  (Using difference cover)\n  bucket 34: 50%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 60%\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  bucket 34: 70%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 35: 10%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 50%\n  bucket 36: 60%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 70%\n  bucket 37: 10%\n  bucket 36: 80%\n  bucket 37: 20%\n  bucket 36: 90%\n  bucket 37: 30%\n  bucket 36: 100%\n  bucket 37: 40%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  Sorting block time: 00:00:00\n  bucket 37: 100%\nReturning block of 121 for bucket 36\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\nGetting block 39 of 60\n  bucket 38: 80%\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 45: 10%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 45: 20%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  bucket 48: 10%\n  bucket 47: 20%\n  bucket 48: 20%\n  bucket 47: 30%\n  bucket 48: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 48: 40%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 10%\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 49: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 49: 30%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 49: 40%\n  bucket 50: 70%\n  bucket 49: 50%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 49: 60%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  bucket 51: 40%\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 51: 50%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 30%\n  bucket 51: 60%\n  bucket 52: 40%\n  bucket 53: 10%\n  bucket 51: 70%\n  bucket 52: 50%\n  bucket 53: 20%\n  bucket 51: 80%\n  bucket 52: 60%\n  bucket 53: 30%\n  bucket 51: 90%\n  bucket 52: 70%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 80%\n  bucket 53: 40%\n  bucket 52: 90%\n  bucket 53: 50%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  Sorting block time: 00:00:00\n  bucket 54: 40%\nReturning block of 80 for bucket 55\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Entering block accumulator loop for bucket 57:\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 10%\n  bucket 57: 20%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 30%\n  bucket 58: 10%\n  bucket 57: 40%\n  bucket 58: 20%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 58: 30%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 58: 40%\n  bucket 57: 90%\n  bucket 57: 100%\n  bucket 58: 50%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 59: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 59: 20%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 59: 30%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 59: 40%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were unpaired; of these:\n    0 (0.00%) aligned 0 times\n    10 (100.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n100.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were unpaired; of these:\n    0 (0.00%) aligned 0 times\n    10 (100.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n100.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 2\n  bucket 1: 10%\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\nGetting block 6 of 60\n  bucket 1: 20%\n  Calculating Z arrays for bucket 2\n  bucket 1: 30%\n  Reserving size (126) for bucket 6\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 1: 40%\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\nGetting block 4 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 50%\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 10%\n  bucket 7: 10%\n  bucket 1: 60%\n  bucket 2: 20%\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  bucket 2: 30%\n  bucket 1: 70%\nGetting block 8 of 60\n  bucket 3: 10%\n  bucket 2: 40%\n  Entering block accumulator loop for bucket 5:\n  bucket 7: 20%\n  bucket 1: 80%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 4:\n  bucket 5: 10%\n  bucket 2: 50%\n  bucket 3: 20%\n  bucket 7: 30%\n  bucket 6: 10%\n  bucket 1: 90%\n  Reserving size (126) for bucket 8\n  bucket 4: 10%\n  bucket 3: 30%\n  bucket 5: 20%\n  bucket 7: 40%\n  Calculating Z arrays for bucket 8\n  bucket 6: 20%\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 40%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 6: 30%\n  bucket 7: 50%\n  bucket 2: 70%\n  bucket 3: 50%\n  bucket 8: 10%\n  bucket 3: 60%\n  bucket 6: 40%\n  bucket 8: 20%\n  bucket 2: 80%\n  bucket 5: 50%\n  bucket 2: 90%\n  bucket 3: 70%\n  bucket 5: 60%\n  bucket 3: 80%\n  bucket 2: 100%\n  bucket 1: 100%\n  bucket 7: 60%\n  bucket 6: 50%\n  bucket 5: 70%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 8: 30%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 7: 70%\n  bucket 6: 60%\n  bucket 4: 20%\n  bucket 3: 100%\n  bucket 8: 40%\n  Sorting block of length 106 for bucket 3\n  bucket 4: 30%\n  bucket 6: 70%\n  bucket 4: 40%\n  bucket 5: 80%\n  bucket 4: 50%\n  bucket 6: 80%\n  bucket 8: 50%\n  bucket 6: 90%\n  bucket 5: 90%\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 5: 100%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 6: 100%\n  bucket 7: 90%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 7: 100%\n  bucket 8: 70%\n  bucket 4: 70%\n  Sorting block of length 63 for bucket 5\n  bucket 8: 80%\n  (Using difference cover)\n  bucket 4: 80%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\nReturning block of 85 for bucket 2\n  bucket 8: 90%\n  bucket 4: 90%\n  bucket 8: 100%\n  bucket 4: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  bucket 9: 20%\n  bucket 10: 10%\n  Calculating Z arrays for bucket 11\n  bucket 9: 30%\n  bucket 10: 20%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 40%\n  bucket 11: 10%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 9: 90%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 9: 100%\n  bucket 11: 70%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 11: 80%\n  bucket 10: 100%\n  bucket 11: 90%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 10%\n  bucket 15: 10%\n  bucket 16: 20%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 16: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 16: 40%\n  bucket 15: 60%\n  bucket 16: 50%\n  bucket 15: 70%\n  bucket 16: 60%\n  bucket 15: 80%\n  bucket 16: 70%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 15: 100%\n  bucket 16: 90%\n  Sorting block of length 68 for bucket 15\n  bucket 16: 100%\n  (Using difference cover)\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 60%\n  bucket 17: 70%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 80%\n  bucket 18: 10%\n  bucket 17: 90%\nGetting block 19 of 60\n  bucket 17: 100%\n  bucket 18: 20%\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 30%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 19: 40%\n  bucket 18: 70%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 19: 60%\n  bucket 18: 90%\n  bucket 19: 70%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 40 for bucket 17\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  Sorting block time: 00:00:00\n  bucket 21: 100%\nReturning block of 98 for bucket 20\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 60%\nGetting block 27 of 60\n  Entering block accumulator loop for bucket 26:\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  bucket 25: 70%\n  bucket 26: 20%\n  bucket 25: 80%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 25: 90%\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 30%\n  bucket 26: 80%\n  bucket 27: 40%\n  bucket 26: 90%\n  Sorting block time: 00:00:00\nGetting block 28 of 60\nReturning block of 67 for bucket 25\n  bucket 26: 100%\n  Reserving size (126) for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Calculating Z arrays for bucket 28\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 50%\n  Entering block accumulator loop for bucket 29:\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 60%\n  bucket 29: 10%\n  bucket 28: 10%\n  bucket 27: 70%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 27: 80%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 27: 90%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 27: 100%\n  bucket 28: 60%\n  Sorting block of length 119 for bucket 27\n  bucket 28: 70%\n  bucket 29: 50%\n  bucket 28: 80%\n  bucket 29: 60%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 20%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 30%\n  bucket 31: 10%\n  bucket 30: 40%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  bucket 30: 50%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 50%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 34: 10%\n  bucket 33: 80%\n  bucket 34: 20%\n  bucket 33: 90%\n  bucket 34: 30%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  bucket 34: 40%\n  (Using difference cover)\n  bucket 34: 50%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 60%\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  bucket 34: 70%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 35: 10%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 50%\n  bucket 36: 60%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 70%\n  bucket 37: 10%\n  bucket 36: 80%\n  bucket 37: 20%\n  bucket 36: 90%\n  bucket 37: 30%\n  bucket 36: 100%\n  bucket 37: 40%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  Sorting block time: 00:00:00\n  bucket 37: 100%\nReturning block of 121 for bucket 36\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\nGetting block 39 of 60\n  bucket 38: 80%\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 45: 10%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 45: 20%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  bucket 48: 10%\n  bucket 47: 20%\n  bucket 48: 20%\n  bucket 47: 30%\n  bucket 48: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 48: 40%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 10%\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 49: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 49: 30%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 49: 40%\n  bucket 50: 70%\n  bucket 49: 50%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 49: 60%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  bucket 51: 40%\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 51: 50%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 30%\n  bucket 51: 60%\n  bucket 52: 40%\n  bucket 53: 10%\n  bucket 51: 70%\n  bucket 52: 50%\n  bucket 53: 20%\n  bucket 51: 80%\n  bucket 52: 60%\n  bucket 53: 30%\n  bucket 51: 90%\n  bucket 52: 70%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 80%\n  bucket 53: 40%\n  bucket 52: 90%\n  bucket 53: 50%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  Sorting block time: 00:00:00\n  bucket 54: 40%\nReturning block of 80 for bucket 55\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Entering block accumulator loop for bucket 57:\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 10%\n  bucket 57: 20%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 30%\n  bucket 58: 10%\n  bucket 57: 40%\n  bucket 58: 20%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 58: 30%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 58: 40%\n  bucket 57: 90%\n  bucket 57: 100%\n  bucket 58: 50%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 59: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 59: 20%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 59: 30%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 59: 40%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:04:10", "plugin": "core", "name": "end_epoch", "raw_value": "1708671850.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:04:09", "plugin": "core", "name": "start_epoch", "raw_value": "1708671849.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-16", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 16, "time_seconds": 24.12983512878418, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "eb51320f4d006cc2"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "b7b4068bad927dca"}, "library|type": "paired_interleaved", "adv|sam_options|no_unal": true, "adv|sam_options|read_groups|read_groups_0|rg": "BC:test1", "adv|sam_options|read_groups|read_groups_1|rg": "CN:test2", "adv|sam_options|read_groups|rg_labels": "Yes", "adv|sam_options|chr_text": "--add-chrname", "adv|sam_options|omit_sec_seq": true, "adv|sam_options|sam_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "516a3a738488155d", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:57:50.276272", "create_time": "2024-02-23T06:57:41.503360", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-6cdmj", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/2/b/a/dataset_2ba707cf-7804-467b-b80a-e59f2d0a964a.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        bzcat '/galaxy/server/database/objects/8/5/a/dataset_85af608d-7f8b-4e4a-b62f-8e635491d275.dat' | seqtk seq -1 /dev/stdin > input_f.fastq && bzcat '/galaxy/server/database/objects/8/5/a/dataset_85af608d-7f8b-4e4a-b62f-8e635491d275.dat' | seqtk seq -2 /dev/stdin > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                        --no-unal --rg-id 'read_group' --rg 'BC:test1' --rg 'CN:test2' --add-chrname --omit-sec-seq         | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/e/5/a/dataset_e5a7ab77-1068-4d42-adbe-6b1c9c8724bf.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 1, \"chr_text\": \"--add-chrname\", \"no_unal\": true, \"omit_sec_seq\": true, \"read_groups\": {\"__current_case__\": 1, \"read_groups\": [{\"__index__\": 0, \"rg\": \"BC:test1\"}, {\"__index__\": 1, \"rg\": \"CN:test2\"}], \"rg_id\": \"read_group\", \"rg_labels\": \"Yes\"}, \"sam_options_selector\": \"advanced\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 193, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 192, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "eb51320f4d006cc2", "src": "hda", "uuid": "2ba707cf-7804-467b-b80a-e59f2d0a964a"}, "library|input_1": {"id": "b7b4068bad927dca", "src": "hda", "uuid": "85af608d-7f8b-4e4a-b62f-8e635491d275"}}, "outputs": {"output_alignments": {"id": "0aa10897266253dc", "src": "hda", "uuid": "e5a7ab77-1068-4d42-adbe-6b1c9c8724bf"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 5\n  Reserving size (126) for bucket 3\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 6\nGetting block 7 of 60\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 7\n  bucket 5: 10%\n  bucket 4: 10%\n  bucket 5: 20%\n  bucket 1: 10%\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 8\n  bucket 5: 30%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 6: 10%\n  bucket 4: 20%\n  bucket 5: 40%\n  bucket 1: 30%\n  bucket 4: 30%\n  Calculating Z arrays for bucket 8\n  bucket 6: 20%\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 20%\n  bucket 6: 30%\n  bucket 3: 10%\n  bucket 5: 50%\n  bucket 1: 40%\n  bucket 6: 40%\n  bucket 7: 10%\n  bucket 5: 60%\n  bucket 1: 50%\n  bucket 3: 20%\n  bucket 6: 50%\n  bucket 7: 20%\n  bucket 5: 70%\n  bucket 1: 60%\n  bucket 6: 60%\n  bucket 4: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 2: 30%\n  bucket 4: 60%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 8: 10%\n  bucket 6: 70%\n  bucket 3: 30%\n  bucket 2: 50%\n  bucket 4: 70%\n  bucket 6: 80%\n  bucket 8: 20%\n  bucket 4: 80%\n  bucket 3: 40%\n  bucket 6: 90%\n  bucket 8: 30%\n  bucket 4: 90%\n  bucket 5: 80%\n  bucket 6: 100%\n  bucket 4: 100%\n  bucket 3: 50%\n  Sorting block of length 90 for bucket 6\n  bucket 7: 30%\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 8: 40%\n  bucket 2: 60%\n  bucket 8: 50%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 3: 70%\n  bucket 7: 40%\n  bucket 1: 80%\n  bucket 3: 80%\n  bucket 5: 100%\n  bucket 7: 50%\n  Sorting block time: 00:00:00\n  bucket 8: 60%\n  bucket 3: 90%\n  bucket 2: 70%\n  bucket 8: 70%\nReturning block of 91 for bucket 6\n  bucket 7: 60%\n  bucket 2: 80%\n  Sorting block of length 63 for bucket 5\n  bucket 7: 70%\n  bucket 3: 100%\n  (Using difference cover)\n  bucket 8: 80%\n  Sorting block of length 106 for bucket 3\n  bucket 2: 90%\n  bucket 8: 90%\n  bucket 1: 90%\n  bucket 7: 80%\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 8: 100%\n  bucket 1: 100%\n  bucket 7: 90%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 9\n  Calculating Z arrays for bucket 10\nGetting block 11 of 60\n  Entering block accumulator loop for bucket 10:\n  Reserving size (126) for bucket 11\n  Entering block accumulator loop for bucket 9:\n  Calculating Z arrays for bucket 11\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 30%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 11: 10%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 11: 20%\n  bucket 10: 80%\n  bucket 9: 80%\n  Entering block accumulator loop for bucket 12:\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 12: 10%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  bucket 12: 20%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 80%\n  bucket 16: 10%\n  bucket 15: 90%\n  bucket 16: 20%\n  bucket 15: 100%\n  bucket 16: 30%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Entering block accumulator loop for bucket 19:\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 10%\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 20: 50%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  bucket 19: 80%\n  Calculating Z arrays for bucket 21\n  bucket 20: 60%\n  bucket 19: 90%\n  bucket 20: 70%\n  Entering block accumulator loop for bucket 21:\n  bucket 19: 100%\n  bucket 20: 80%\n  bucket 21: 10%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 21: 20%\n  bucket 20: 100%\n  bucket 21: 30%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  bucket 22: 20%\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  bucket 22: 30%\n  Entering block accumulator loop for bucket 24:\n  bucket 22: 40%\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 22: 50%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 22: 60%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 22: 70%\n  bucket 24: 40%\n  bucket 23: 50%\n  bucket 24: 50%\n  bucket 22: 80%\n  bucket 23: 60%\n  bucket 24: 60%\n  bucket 22: 90%\n  bucket 23: 70%\n  bucket 24: 70%\n  bucket 22: 100%\n  bucket 23: 80%\n  bucket 24: 80%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 24: 100%\n  bucket 23: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 40%\n  bucket 26: 80%\n  bucket 27: 50%\n  bucket 26: 90%\n  bucket 27: 60%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 29: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 30 of 60\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 30:\n  bucket 31: 10%\n  bucket 30: 10%\n  bucket 31: 20%\n  bucket 30: 20%\n  bucket 31: 30%\n  bucket 30: 30%\n  bucket 31: 40%\n  bucket 30: 40%\n  bucket 31: 50%\n  bucket 30: 50%\n  bucket 31: 60%\n  bucket 30: 60%\n  bucket 31: 70%\n  bucket 30: 70%\n  bucket 31: 80%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 31: 90%\n  bucket 30: 100%\n  bucket 31: 100%\n  Sorting block of length 124 for bucket 30\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 32:\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 10%\n  bucket 33: 10%\n  bucket 32: 20%\n  bucket 33: 20%\n  bucket 32: 30%\n  bucket 33: 30%\n  bucket 32: 40%\n  bucket 33: 40%\n  bucket 32: 50%\n  bucket 33: 50%\n  bucket 32: 60%\n  bucket 33: 60%\n  bucket 32: 70%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 32: 80%\n  bucket 33: 90%\n  bucket 32: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Entering block accumulator loop for bucket 36:\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 10%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 20%\n  bucket 37: 10%\n  bucket 36: 30%\n  bucket 37: 20%\n  bucket 36: 40%\n  bucket 37: 30%\n  bucket 36: 50%\n  bucket 37: 40%\n  bucket 36: 60%\n  bucket 37: 50%\n  bucket 36: 70%\n  bucket 37: 60%\n  bucket 36: 80%\n  bucket 37: 70%\n  bucket 36: 90%\n  bucket 37: 80%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  bucket 37: 90%\n  (Using difference cover)\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Entering block accumulator loop for bucket 39:\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  bucket 40: 60%\n  Calculating Z arrays for bucket 41\n  bucket 40: 70%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 80%\n  bucket 41: 10%\n  bucket 40: 90%\n  bucket 41: 20%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  bucket 41: 30%\n  (Using difference cover)\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  Reserving size (126) for bucket 42\n  bucket 43: 10%\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 20%\n  bucket 44: 10%\n  bucket 43: 30%\n  bucket 44: 20%\n  bucket 43: 40%\n  bucket 44: 30%\n  Entering block accumulator loop for bucket 42:\n  bucket 43: 50%\n  bucket 44: 40%\n  bucket 43: 60%\n  bucket 42: 10%\n  bucket 44: 50%\n  bucket 43: 70%\n  bucket 44: 60%\n  bucket 42: 20%\n  bucket 43: 80%\n  bucket 44: 70%\n  bucket 43: 90%\n  bucket 44: 80%\n  bucket 42: 30%\n  bucket 43: 100%\n  bucket 44: 90%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 42: 40%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\nGetting block 48 of 60\n  bucket 47: 50%\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 60%\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  bucket 47: 70%\n  Entering block accumulator loop for bucket 48:\n  Calculating Z arrays for bucket 49\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 48: 10%\n  bucket 47: 100%\n  Entering block accumulator loop for bucket 49:\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 20%\n  bucket 49: 10%\n  bucket 48: 30%\n  bucket 49: 20%\n  bucket 48: 40%\n  bucket 49: 30%\n  bucket 48: 50%\n  bucket 49: 40%\n  bucket 48: 60%\n  bucket 49: 50%\n  bucket 48: 70%\n  bucket 49: 60%\n  bucket 48: 80%\n  bucket 49: 70%\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  bucket 48: 90%\n  bucket 49: 80%\n  bucket 48: 100%\n  bucket 49: 90%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 20%\n  bucket 50: 30%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 51: 10%\n  bucket 50: 60%\n  bucket 51: 20%\n  bucket 50: 70%\n  bucket 51: 30%\n  bucket 50: 80%\n  bucket 51: 40%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 20%\n  bucket 53: 10%\n  bucket 52: 30%\n  bucket 53: 20%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 53: 30%\n  bucket 52: 60%\n  bucket 53: 40%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 53: 50%\n  bucket 52: 90%\n  bucket 53: 60%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 54:\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 56:\n  bucket 54: 10%\n  bucket 56: 10%\n  bucket 55: 10%\n  bucket 54: 20%\n  bucket 56: 20%\n  bucket 55: 20%\n  bucket 56: 30%\n  bucket 54: 30%\n  bucket 55: 30%\n  bucket 56: 40%\n  bucket 54: 40%\n  bucket 55: 40%\n  bucket 56: 50%\n  bucket 55: 50%\n  bucket 54: 50%\n  bucket 56: 60%\n  bucket 55: 60%\n  bucket 56: 70%\n  bucket 54: 60%\n  bucket 55: 70%\n  bucket 56: 80%\n  bucket 54: 70%\n  bucket 55: 80%\n  bucket 56: 90%\n  bucket 54: 80%\n  bucket 55: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 10%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 20%\n  bucket 58: 10%\n  bucket 57: 30%\n  bucket 58: 20%\n  bucket 57: 40%\n  bucket 58: 30%\n  bucket 57: 50%\n  bucket 58: 40%\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  bucket 57: 60%\n  Calculating Z arrays for bucket 59\n  bucket 58: 50%\n  bucket 57: 70%\n  bucket 58: 60%\n  Entering block accumulator loop for bucket 59:\n  bucket 57: 80%\n  bucket 58: 70%\n  bucket 59: 10%\n  bucket 57: 90%\n  bucket 58: 80%\n  bucket 59: 20%\n  bucket 58: 90%\n  bucket 59: 30%\n  bucket 57: 100%\n  bucket 59: 40%\n  Sorting block of length 85 for bucket 57\n  bucket 59: 50%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  (Using difference cover)\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 5\n  Reserving size (126) for bucket 3\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 6\nGetting block 7 of 60\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 7\n  bucket 5: 10%\n  bucket 4: 10%\n  bucket 5: 20%\n  bucket 1: 10%\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 8\n  bucket 5: 30%\n  bucket 1: 20%\n  bucket 2: 10%\n  bucket 6: 10%\n  bucket 4: 20%\n  bucket 5: 40%\n  bucket 1: 30%\n  bucket 4: 30%\n  Calculating Z arrays for bucket 8\n  bucket 6: 20%\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 20%\n  bucket 6: 30%\n  bucket 3: 10%\n  bucket 5: 50%\n  bucket 1: 40%\n  bucket 6: 40%\n  bucket 7: 10%\n  bucket 5: 60%\n  bucket 1: 50%\n  bucket 3: 20%\n  bucket 6: 50%\n  bucket 7: 20%\n  bucket 5: 70%\n  bucket 1: 60%\n  bucket 6: 60%\n  bucket 4: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 2: 30%\n  bucket 4: 60%\n  bucket 1: 70%\n  bucket 2: 40%\n  bucket 8: 10%\n  bucket 6: 70%\n  bucket 3: 30%\n  bucket 2: 50%\n  bucket 4: 70%\n  bucket 6: 80%\n  bucket 8: 20%\n  bucket 4: 80%\n  bucket 3: 40%\n  bucket 6: 90%\n  bucket 8: 30%\n  bucket 4: 90%\n  bucket 5: 80%\n  bucket 6: 100%\n  bucket 4: 100%\n  bucket 3: 50%\n  Sorting block of length 90 for bucket 6\n  bucket 7: 30%\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 8: 40%\n  bucket 2: 60%\n  bucket 8: 50%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 3: 70%\n  bucket 7: 40%\n  bucket 1: 80%\n  bucket 3: 80%\n  bucket 5: 100%\n  bucket 7: 50%\n  Sorting block time: 00:00:00\n  bucket 8: 60%\n  bucket 3: 90%\n  bucket 2: 70%\n  bucket 8: 70%\nReturning block of 91 for bucket 6\n  bucket 7: 60%\n  bucket 2: 80%\n  Sorting block of length 63 for bucket 5\n  bucket 7: 70%\n  bucket 3: 100%\n  (Using difference cover)\n  bucket 8: 80%\n  Sorting block of length 106 for bucket 3\n  bucket 2: 90%\n  bucket 8: 90%\n  bucket 1: 90%\n  bucket 7: 80%\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 8: 100%\n  bucket 1: 100%\n  bucket 7: 90%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 9\n  Calculating Z arrays for bucket 10\nGetting block 11 of 60\n  Entering block accumulator loop for bucket 10:\n  Reserving size (126) for bucket 11\n  Entering block accumulator loop for bucket 9:\n  Calculating Z arrays for bucket 11\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 30%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 11: 10%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 11: 20%\n  bucket 10: 80%\n  bucket 9: 80%\n  Entering block accumulator loop for bucket 12:\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 12: 10%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 9: 100%\n  bucket 12: 20%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 13: 40%\n  bucket 14: 40%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 80%\n  bucket 16: 10%\n  bucket 15: 90%\n  bucket 16: 20%\n  bucket 15: 100%\n  bucket 16: 30%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 17: 20%\n  bucket 18: 20%\n  bucket 17: 30%\n  bucket 18: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 18: 40%\n  bucket 17: 60%\n  bucket 18: 50%\n  bucket 17: 70%\n  bucket 18: 60%\n  bucket 17: 80%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Entering block accumulator loop for bucket 19:\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 10%\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 20: 50%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  bucket 19: 80%\n  Calculating Z arrays for bucket 21\n  bucket 20: 60%\n  bucket 19: 90%\n  bucket 20: 70%\n  Entering block accumulator loop for bucket 21:\n  bucket 19: 100%\n  bucket 20: 80%\n  bucket 21: 10%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 21: 20%\n  bucket 20: 100%\n  bucket 21: 30%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  bucket 22: 20%\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  bucket 22: 30%\n  Entering block accumulator loop for bucket 24:\n  bucket 22: 40%\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 22: 50%\n  bucket 23: 30%\n  bucket 24: 20%\n  bucket 22: 60%\n  bucket 23: 40%\n  bucket 24: 30%\n  bucket 22: 70%\n  bucket 24: 40%\n  bucket 23: 50%\n  bucket 24: 50%\n  bucket 22: 80%\n  bucket 23: 60%\n  bucket 24: 60%\n  bucket 22: 90%\n  bucket 23: 70%\n  bucket 24: 70%\n  bucket 22: 100%\n  bucket 23: 80%\n  bucket 24: 80%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 24: 90%\n  bucket 24: 100%\n  bucket 23: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 27: 20%\n  bucket 26: 50%\n  bucket 27: 30%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 40%\n  bucket 26: 80%\n  bucket 27: 50%\n  bucket 26: 90%\n  bucket 27: 60%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  bucket 28: 30%\n  bucket 29: 30%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 29: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 30 of 60\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 30:\n  bucket 31: 10%\n  bucket 30: 10%\n  bucket 31: 20%\n  bucket 30: 20%\n  bucket 31: 30%\n  bucket 30: 30%\n  bucket 31: 40%\n  bucket 30: 40%\n  bucket 31: 50%\n  bucket 30: 50%\n  bucket 31: 60%\n  bucket 30: 60%\n  bucket 31: 70%\n  bucket 30: 70%\n  bucket 31: 80%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 31: 90%\n  bucket 30: 100%\n  bucket 31: 100%\n  Sorting block of length 124 for bucket 30\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 32:\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 10%\n  bucket 33: 10%\n  bucket 32: 20%\n  bucket 33: 20%\n  bucket 32: 30%\n  bucket 33: 30%\n  bucket 32: 40%\n  bucket 33: 40%\n  bucket 32: 50%\n  bucket 33: 50%\n  bucket 32: 60%\n  bucket 33: 60%\n  bucket 32: 70%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 32: 80%\n  bucket 33: 90%\n  bucket 32: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Entering block accumulator loop for bucket 36:\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 10%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 20%\n  bucket 37: 10%\n  bucket 36: 30%\n  bucket 37: 20%\n  bucket 36: 40%\n  bucket 37: 30%\n  bucket 36: 50%\n  bucket 37: 40%\n  bucket 36: 60%\n  bucket 37: 50%\n  bucket 36: 70%\n  bucket 37: 60%\n  bucket 36: 80%\n  bucket 37: 70%\n  bucket 36: 90%\n  bucket 37: 80%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  bucket 37: 90%\n  (Using difference cover)\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Entering block accumulator loop for bucket 39:\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  bucket 40: 60%\n  Calculating Z arrays for bucket 41\n  bucket 40: 70%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 80%\n  bucket 41: 10%\n  bucket 40: 90%\n  bucket 41: 20%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  bucket 41: 30%\n  (Using difference cover)\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  Reserving size (126) for bucket 42\n  bucket 43: 10%\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 20%\n  bucket 44: 10%\n  bucket 43: 30%\n  bucket 44: 20%\n  bucket 43: 40%\n  bucket 44: 30%\n  Entering block accumulator loop for bucket 42:\n  bucket 43: 50%\n  bucket 44: 40%\n  bucket 43: 60%\n  bucket 42: 10%\n  bucket 44: 50%\n  bucket 43: 70%\n  bucket 44: 60%\n  bucket 42: 20%\n  bucket 43: 80%\n  bucket 44: 70%\n  bucket 43: 90%\n  bucket 44: 80%\n  bucket 42: 30%\n  bucket 43: 100%\n  bucket 44: 90%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 42: 40%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\nGetting block 48 of 60\n  bucket 47: 50%\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 60%\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  bucket 47: 70%\n  Entering block accumulator loop for bucket 48:\n  Calculating Z arrays for bucket 49\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 48: 10%\n  bucket 47: 100%\n  Entering block accumulator loop for bucket 49:\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 20%\n  bucket 49: 10%\n  bucket 48: 30%\n  bucket 49: 20%\n  bucket 48: 40%\n  bucket 49: 30%\n  bucket 48: 50%\n  bucket 49: 40%\n  bucket 48: 60%\n  bucket 49: 50%\n  bucket 48: 70%\n  bucket 49: 60%\n  bucket 48: 80%\n  bucket 49: 70%\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  bucket 48: 90%\n  bucket 49: 80%\n  bucket 48: 100%\n  bucket 49: 90%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 20%\n  bucket 50: 30%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 51: 10%\n  bucket 50: 60%\n  bucket 51: 20%\n  bucket 50: 70%\n  bucket 51: 30%\n  bucket 50: 80%\n  bucket 51: 40%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 20%\n  bucket 53: 10%\n  bucket 52: 30%\n  bucket 53: 20%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 53: 30%\n  bucket 52: 60%\n  bucket 53: 40%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 53: 50%\n  bucket 52: 90%\n  bucket 53: 60%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 54:\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 56:\n  bucket 54: 10%\n  bucket 56: 10%\n  bucket 55: 10%\n  bucket 54: 20%\n  bucket 56: 20%\n  bucket 55: 20%\n  bucket 56: 30%\n  bucket 54: 30%\n  bucket 55: 30%\n  bucket 56: 40%\n  bucket 54: 40%\n  bucket 55: 40%\n  bucket 56: 50%\n  bucket 55: 50%\n  bucket 54: 50%\n  bucket 56: 60%\n  bucket 55: 60%\n  bucket 56: 70%\n  bucket 54: 60%\n  bucket 55: 70%\n  bucket 56: 80%\n  bucket 54: 70%\n  bucket 55: 80%\n  bucket 56: 90%\n  bucket 54: 80%\n  bucket 55: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 10%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 20%\n  bucket 58: 10%\n  bucket 57: 30%\n  bucket 58: 20%\n  bucket 57: 40%\n  bucket 58: 30%\n  bucket 57: 50%\n  bucket 58: 40%\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  bucket 57: 60%\n  Calculating Z arrays for bucket 59\n  bucket 58: 50%\n  bucket 57: 70%\n  bucket 58: 60%\n  Entering block accumulator loop for bucket 59:\n  bucket 57: 80%\n  bucket 58: 70%\n  bucket 59: 10%\n  bucket 57: 90%\n  bucket 58: 80%\n  bucket 59: 20%\n  bucket 58: 90%\n  bucket 59: 30%\n  bucket 57: 100%\n  bucket 59: 40%\n  Sorting block of length 85 for bucket 57\n  bucket 59: 50%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  (Using difference cover)\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:57:43", "plugin": "core", "name": "end_epoch", "raw_value": "1708671463.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:57:42", "plugin": "core", "name": "start_epoch", "raw_value": "1708671462.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-16", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 16, "time_seconds": 26.946941614151, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "2a2b2ed17b6182b3"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "7b0fc1c3c5be290c"}, "library|type": "paired_interleaved", "adv|sam_options|no_unal": true, "adv|sam_options|read_groups|read_groups_0|rg": "BC:test1", "adv|sam_options|read_groups|read_groups_1|rg": "CN:test2", "adv|sam_options|read_groups|rg_labels": "Yes", "adv|sam_options|chr_text": "--add-chrname", "adv|sam_options|omit_sec_seq": true, "adv|sam_options|sam_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "0668f0a725333d39", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:04:45.793883", "create_time": "2024-02-23T07:04:35.204888", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-nlhc8", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/e/d/0/dataset_ed011071-5f9a-4b63-afd0-3e63b5d54dbc.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        bzcat '/galaxy/server/database/objects/f/1/d/dataset_f1d8cc84-2f62-477a-a97e-c7f88a1ea6e8.dat' | seqtk seq -1 /dev/stdin > input_f.fastq && bzcat '/galaxy/server/database/objects/f/1/d/dataset_f1d8cc84-2f62-477a-a97e-c7f88a1ea6e8.dat' | seqtk seq -2 /dev/stdin > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                        --no-unal --rg-id 'read_group' --rg 'BC:test1' --rg 'CN:test2' --add-chrname --omit-sec-seq         | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/8/b/8/dataset_8b8eeeb2-678e-4107-8d8d-be13ef7a749e.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 1, \"chr_text\": \"--add-chrname\", \"no_unal\": true, \"omit_sec_seq\": true, \"read_groups\": {\"__current_case__\": 1, \"read_groups\": [{\"__index__\": 0, \"rg\": \"BC:test1\"}, {\"__index__\": 1, \"rg\": \"CN:test2\"}], \"rg_id\": \"read_group\", \"rg_labels\": \"Yes\"}, \"sam_options_selector\": \"advanced\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 255, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 254, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "2a2b2ed17b6182b3", "src": "hda", "uuid": "ed011071-5f9a-4b63-afd0-3e63b5d54dbc"}, "library|input_1": {"id": "7b0fc1c3c5be290c", "src": "hda", "uuid": "f1d8cc84-2f62-477a-a97e-c7f88a1ea6e8"}}, "outputs": {"output_alignments": {"id": "bc3b37206399bf4e", "src": "hda", "uuid": "8b8eeeb2-678e-4107-8d8d-be13ef7a749e"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 5\n  Reserving size (126) for bucket 2\nGetting block 7 of 60\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 5:\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 20%\n  bucket 5: 10%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 3:\n  bucket 6: 10%\nGetting block 8 of 60\n  bucket 1: 30%\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 2:\n  bucket 7: 10%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 6: 20%\n  bucket 1: 40%\n  bucket 7: 20%\n  bucket 2: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 3: 20%\n  Reserving size (126) for bucket 8\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 2: 30%\n  Calculating Z arrays for bucket 8\n  bucket 6: 50%\n  bucket 5: 40%\n  bucket 7: 40%\n  bucket 1: 70%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 6: 60%\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 50%\n  bucket 1: 80%\n  bucket 2: 40%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 3: 40%\n  bucket 1: 90%\n  bucket 5: 60%\n  bucket 4: 40%\n  bucket 8: 10%\n  bucket 7: 60%\n  bucket 6: 80%\n  bucket 1: 100%\n  bucket 2: 50%\n  bucket 5: 70%\n  bucket 4: 50%\n  bucket 8: 20%\n  bucket 3: 50%\n  bucket 6: 90%\n  bucket 7: 70%\n  bucket 5: 80%\n  bucket 4: 60%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 7: 80%\n  bucket 5: 90%\n  bucket 8: 30%\n  bucket 6: 100%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 7: 90%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 3: 80%\n  bucket 5: 100%\n  bucket 8: 40%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 2: 70%\n  bucket 3: 90%\n  bucket 7: 100%\n  bucket 4: 90%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 4: 100%\n  bucket 3: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 2: 80%\n  bucket 8: 70%\n  bucket 2: 90%\n  bucket 8: 80%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  bucket 8: 90%\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  bucket 9: 100%\n  Calculating Z arrays for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Entering block accumulator loop for bucket 10:\n  Calculating Z arrays for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 10: 20%\n  bucket 11: 10%\n  bucket 10: 30%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 12: 20%\n  bucket 11: 30%\n  Entering block accumulator loop for bucket 13:\n  bucket 10: 50%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 12: 40%\n  bucket 13: 10%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 12: 50%\n  bucket 13: 20%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 13: 30%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 13: 40%\n  bucket 12: 80%\n  bucket 11: 90%\nReturning block of 125 for bucket 9\n  bucket 13: 50%\n  bucket 12: 90%\n  bucket 11: 100%\n  bucket 13: 60%\n  Sorting block of length 95 for bucket 11\n  Sorting block time: 00:00:00\n  (Using difference cover)\n  bucket 12: 100%\n  bucket 13: 70%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\nReturning block of 90 for bucket 10\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  bucket 14: 50%\n  Calculating Z arrays for bucket 15\n  bucket 14: 60%\n  bucket 14: 70%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 80%\n  bucket 15: 10%\n  bucket 14: 90%\n  bucket 15: 20%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 17: 40%\n  bucket 16: 60%\n  bucket 17: 50%\n  bucket 16: 70%\n  bucket 17: 60%\n  bucket 16: 80%\n  bucket 17: 70%\n  bucket 16: 90%\n  bucket 17: 80%\n  bucket 16: 100%\n  bucket 17: 90%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 70%\n  bucket 18: 80%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 90%\n  bucket 19: 10%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  bucket 19: 20%\n  (Using difference cover)\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 22: 60%\n  bucket 23: 60%\n  bucket 22: 70%\n  bucket 23: 70%\n  bucket 22: 80%\n  bucket 23: 80%\n  bucket 22: 90%\n  bucket 23: 90%\n  bucket 22: 100%\n  bucket 23: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  bucket 24: 90%\n  Calculating Z arrays for bucket 25\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\nGetting block 27 of 60\n  bucket 26: 30%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Calculating Z arrays for bucket 28\n  bucket 26: 40%\n  bucket 26: 50%\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 26: 80%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 26: 90%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  bucket 28: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nReturning block of 120 for bucket 27\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\nGetting block 32 of 60\n  bucket 31: 10%\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 20%\n  bucket 31: 30%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 40%\n  bucket 32: 10%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 32: 20%\n  bucket 31: 80%\n  bucket 32: 30%\n  bucket 31: 90%\n  bucket 32: 40%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 30%\n  bucket 35: 40%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 50%\n  bucket 36: 10%\n  bucket 35: 60%\n  bucket 36: 20%\n  bucket 35: 70%\n  bucket 36: 30%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 36: 40%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 10%\n  bucket 38: 10%\n  bucket 37: 20%\n  bucket 38: 20%\n  bucket 37: 30%\n  bucket 38: 30%\n  bucket 37: 40%\n  bucket 38: 40%\n  bucket 37: 50%\n  bucket 38: 50%\n  bucket 37: 60%\n  bucket 38: 60%\n  bucket 37: 70%\n  bucket 38: 70%\n  bucket 37: 80%\n  bucket 38: 80%\n  bucket 37: 90%\n  bucket 38: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\nGetting block 40 of 60\n  Entering block accumulator loop for bucket 39:\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  bucket 39: 10%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 20%\n  bucket 40: 10%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 40: 20%\n  bucket 39: 50%\n  bucket 40: 30%\n  bucket 39: 60%\n  bucket 40: 40%\n  bucket 39: 70%\n  bucket 40: 50%\n  bucket 39: 80%\n  bucket 40: 60%\n  bucket 39: 90%\n  bucket 40: 70%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  bucket 41: 70%\n  bucket 41: 80%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 90%\n  bucket 42: 10%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  bucket 42: 20%\n  bucket 41: 100%\n  bucket 42: 30%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Calculating Z arrays for bucket 43\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 70%\n  bucket 43: 10%\n  bucket 42: 80%\n  bucket 43: 20%\n  bucket 42: 90%\n  bucket 43: 30%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 40%\n  bucket 43: 50%\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  bucket 44: 30%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 40%\n  bucket 45: 10%\n  bucket 44: 50%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 44: 60%\n  bucket 45: 40%\n  bucket 44: 70%\n  bucket 45: 50%\n  bucket 44: 80%\n  bucket 45: 60%\n  bucket 44: 90%\n  bucket 45: 70%\n  bucket 44: 100%\n  bucket 45: 80%\n  Sorting block of length 66 for bucket 44\n  bucket 45: 90%\n  (Using difference cover)\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 30%\n  bucket 46: 40%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 50%\n  bucket 47: 10%\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 20%\n  bucket 46: 60%\n  bucket 47: 30%\n  bucket 46: 70%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 40%\n  bucket 46: 80%\n  bucket 47: 50%\n  bucket 46: 90%\n  bucket 47: 60%\n  bucket 48: 10%\n  bucket 47: 70%\n  bucket 46: 100%\n  bucket 48: 20%\n  Sorting block of length 69 for bucket 46\n  bucket 47: 80%\n  (Using difference cover)\n  bucket 48: 30%\n  bucket 47: 90%\n  bucket 48: 40%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 40%\n  bucket 50: 50%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 60%\n  bucket 51: 10%\n  bucket 50: 70%\n  bucket 51: 20%\n  bucket 50: 80%\n  bucket 51: 30%\n  bucket 50: 90%\n  bucket 51: 40%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  bucket 52: 50%\n  Calculating Z arrays for bucket 53\n  bucket 52: 60%\n  bucket 52: 70%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 80%\n  bucket 53: 10%\n  bucket 52: 90%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  bucket 53: 40%\n  (Using difference cover)\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 54:\n  bucket 55: 10%\n  bucket 54: 10%\n  bucket 55: 20%\n  bucket 54: 20%\n  bucket 55: 30%\n  bucket 54: 30%\n  bucket 55: 40%\n  bucket 54: 40%\n  bucket 55: 50%\n  bucket 54: 50%\n  bucket 55: 60%\n  bucket 54: 60%\n  bucket 55: 70%\n  bucket 54: 70%\n  bucket 55: 80%\n  bucket 54: 80%\n  bucket 55: 90%\n  bucket 54: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 70%\n  bucket 57: 80%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 90%\n  bucket 58: 10%\n  bucket 57: 100%\n  bucket 58: 20%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  Sorting block time: 00:00:00\n  bucket 58: 60%\nReturning block of 86 for bucket 57\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 5\n  Reserving size (126) for bucket 2\nGetting block 7 of 60\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 5:\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 20%\n  bucket 5: 10%\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 3:\n  bucket 6: 10%\nGetting block 8 of 60\n  bucket 1: 30%\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 2:\n  bucket 7: 10%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 6: 20%\n  bucket 1: 40%\n  bucket 7: 20%\n  bucket 2: 20%\n  bucket 5: 30%\n  bucket 6: 30%\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 3: 20%\n  Reserving size (126) for bucket 8\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 1: 60%\n  bucket 4: 20%\n  bucket 2: 30%\n  Calculating Z arrays for bucket 8\n  bucket 6: 50%\n  bucket 5: 40%\n  bucket 7: 40%\n  bucket 1: 70%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 6: 60%\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 50%\n  bucket 1: 80%\n  bucket 2: 40%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 3: 40%\n  bucket 1: 90%\n  bucket 5: 60%\n  bucket 4: 40%\n  bucket 8: 10%\n  bucket 7: 60%\n  bucket 6: 80%\n  bucket 1: 100%\n  bucket 2: 50%\n  bucket 5: 70%\n  bucket 4: 50%\n  bucket 8: 20%\n  bucket 3: 50%\n  bucket 6: 90%\n  bucket 7: 70%\n  bucket 5: 80%\n  bucket 4: 60%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 7: 80%\n  bucket 5: 90%\n  bucket 8: 30%\n  bucket 6: 100%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 7: 90%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 2: 60%\n  bucket 3: 80%\n  bucket 5: 100%\n  bucket 8: 40%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 2: 70%\n  bucket 3: 90%\n  bucket 7: 100%\n  bucket 4: 90%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 4: 100%\n  bucket 3: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 2: 80%\n  bucket 8: 70%\n  bucket 2: 90%\n  bucket 8: 80%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  bucket 8: 90%\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  bucket 9: 100%\n  Calculating Z arrays for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Entering block accumulator loop for bucket 10:\n  Calculating Z arrays for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 10: 20%\n  bucket 11: 10%\n  bucket 10: 30%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 10: 40%\n  bucket 12: 20%\n  bucket 11: 30%\n  Entering block accumulator loop for bucket 13:\n  bucket 10: 50%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 12: 40%\n  bucket 13: 10%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 12: 50%\n  bucket 13: 20%\n  bucket 11: 60%\n  bucket 10: 80%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 10: 90%\n  bucket 13: 30%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 13: 40%\n  bucket 12: 80%\n  bucket 11: 90%\nReturning block of 125 for bucket 9\n  bucket 13: 50%\n  bucket 12: 90%\n  bucket 11: 100%\n  bucket 13: 60%\n  Sorting block of length 95 for bucket 11\n  Sorting block time: 00:00:00\n  (Using difference cover)\n  bucket 12: 100%\n  bucket 13: 70%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\nReturning block of 90 for bucket 10\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  bucket 14: 50%\n  Calculating Z arrays for bucket 15\n  bucket 14: 60%\n  bucket 14: 70%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 80%\n  bucket 15: 10%\n  bucket 14: 90%\n  bucket 15: 20%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 17: 40%\n  bucket 16: 60%\n  bucket 17: 50%\n  bucket 16: 70%\n  bucket 17: 60%\n  bucket 16: 80%\n  bucket 17: 70%\n  bucket 16: 90%\n  bucket 17: 80%\n  bucket 16: 100%\n  bucket 17: 90%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 70%\n  bucket 18: 80%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 90%\n  bucket 19: 10%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  bucket 19: 20%\n  (Using difference cover)\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 22: 60%\n  bucket 23: 60%\n  bucket 22: 70%\n  bucket 23: 70%\n  bucket 22: 80%\n  bucket 23: 80%\n  bucket 22: 90%\n  bucket 23: 90%\n  bucket 22: 100%\n  bucket 23: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  bucket 24: 90%\n  Calculating Z arrays for bucket 25\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\nGetting block 27 of 60\n  bucket 26: 30%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Calculating Z arrays for bucket 28\n  bucket 26: 40%\n  bucket 26: 50%\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 26: 80%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 26: 90%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  bucket 28: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nReturning block of 120 for bucket 27\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\nGetting block 32 of 60\n  bucket 31: 10%\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 20%\n  bucket 31: 30%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 40%\n  bucket 32: 10%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 32: 20%\n  bucket 31: 80%\n  bucket 32: 30%\n  bucket 31: 90%\n  bucket 32: 40%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 30%\n  bucket 35: 40%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 50%\n  bucket 36: 10%\n  bucket 35: 60%\n  bucket 36: 20%\n  bucket 35: 70%\n  bucket 36: 30%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 36: 40%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 10%\n  bucket 38: 10%\n  bucket 37: 20%\n  bucket 38: 20%\n  bucket 37: 30%\n  bucket 38: 30%\n  bucket 37: 40%\n  bucket 38: 40%\n  bucket 37: 50%\n  bucket 38: 50%\n  bucket 37: 60%\n  bucket 38: 60%\n  bucket 37: 70%\n  bucket 38: 70%\n  bucket 37: 80%\n  bucket 38: 80%\n  bucket 37: 90%\n  bucket 38: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\nGetting block 40 of 60\n  Entering block accumulator loop for bucket 39:\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  bucket 39: 10%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 20%\n  bucket 40: 10%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 40: 20%\n  bucket 39: 50%\n  bucket 40: 30%\n  bucket 39: 60%\n  bucket 40: 40%\n  bucket 39: 70%\n  bucket 40: 50%\n  bucket 39: 80%\n  bucket 40: 60%\n  bucket 39: 90%\n  bucket 40: 70%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  bucket 41: 70%\n  bucket 41: 80%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 90%\n  bucket 42: 10%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  bucket 42: 20%\n  bucket 41: 100%\n  bucket 42: 30%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Calculating Z arrays for bucket 43\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 70%\n  bucket 43: 10%\n  bucket 42: 80%\n  bucket 43: 20%\n  bucket 42: 90%\n  bucket 43: 30%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 40%\n  bucket 43: 50%\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  bucket 44: 30%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 40%\n  bucket 45: 10%\n  bucket 44: 50%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 44: 60%\n  bucket 45: 40%\n  bucket 44: 70%\n  bucket 45: 50%\n  bucket 44: 80%\n  bucket 45: 60%\n  bucket 44: 90%\n  bucket 45: 70%\n  bucket 44: 100%\n  bucket 45: 80%\n  Sorting block of length 66 for bucket 44\n  bucket 45: 90%\n  (Using difference cover)\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 30%\n  bucket 46: 40%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 50%\n  bucket 47: 10%\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 20%\n  bucket 46: 60%\n  bucket 47: 30%\n  bucket 46: 70%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 40%\n  bucket 46: 80%\n  bucket 47: 50%\n  bucket 46: 90%\n  bucket 47: 60%\n  bucket 48: 10%\n  bucket 47: 70%\n  bucket 46: 100%\n  bucket 48: 20%\n  Sorting block of length 69 for bucket 46\n  bucket 47: 80%\n  (Using difference cover)\n  bucket 48: 30%\n  bucket 47: 90%\n  bucket 48: 40%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 40%\n  bucket 50: 50%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 60%\n  bucket 51: 10%\n  bucket 50: 70%\n  bucket 51: 20%\n  bucket 50: 80%\n  bucket 51: 30%\n  bucket 50: 90%\n  bucket 51: 40%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  bucket 52: 50%\n  Calculating Z arrays for bucket 53\n  bucket 52: 60%\n  bucket 52: 70%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 80%\n  bucket 53: 10%\n  bucket 52: 90%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  bucket 53: 40%\n  (Using difference cover)\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 54:\n  bucket 55: 10%\n  bucket 54: 10%\n  bucket 55: 20%\n  bucket 54: 20%\n  bucket 55: 30%\n  bucket 54: 30%\n  bucket 55: 40%\n  bucket 54: 40%\n  bucket 55: 50%\n  bucket 54: 50%\n  bucket 55: 60%\n  bucket 54: 60%\n  bucket 55: 70%\n  bucket 54: 70%\n  bucket 55: 80%\n  bucket 54: 80%\n  bucket 55: 90%\n  bucket 54: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 70%\n  bucket 57: 80%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 90%\n  bucket 58: 10%\n  bucket 57: 100%\n  bucket 58: 20%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  Sorting block time: 00:00:00\n  bucket 58: 60%\nReturning block of 86 for bucket 57\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:04:36", "plugin": "core", "name": "end_epoch", "raw_value": "1708671876.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:04:36", "plugin": "core", "name": "start_epoch", "raw_value": "1708671876.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-2", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 2, "time_seconds": 78.7387306690216, "inputs": {"reference_genome|source": "indexed", "library|input_1": {"src": "hda", "id": "7ab52321b4e5659f"}, "library|input_2": {"src": "hda", "id": "92246b3a4ccd9ea5"}, "library|type": "paired"}, "job": {"model_class": "Job", "id": "6ab0bad77d26ba43", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:52:03.309333", "create_time": "2024-02-23T06:50:59.604213", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-8lsc6", "command_line": "set -o pipefail;         ln -f -s '/galaxy/server/database/objects/7/a/3/dataset_7a361e9e-97ce-4119-8982-0a36ba4224c7.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/c/7/8/dataset_c7825b00-6a11-4c66-9ea7-8f6cf4012a35.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x '/cvmfs/data.galaxyproject.org/managed/hisat2_index/apiMel4/apiMel4'    -1 'input_f.fastq' -2 'input_r.fastq'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/6/1/3/dataset_613be80a-7853-49f9-a8bc-366a86d01a26.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"phiX\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/phiX.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 139, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 140, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 0, \"index\": \"apiMel4\", \"source\": \"indexed\"}"}, "inputs": {"library|input_1": {"id": "7ab52321b4e5659f", "src": "hda", "uuid": "7a361e9e-97ce-4119-8982-0a36ba4224c7"}, "library|input_2": {"id": "92246b3a4ccd9ea5", "src": "hda", "uuid": "c7825b00-6a11-4c66-9ea7-8f6cf4012a35"}}, "outputs": {"output_alignments": {"id": "759c0e0ce0a29882", "src": "hda", "uuid": "613be80a-7853-49f9-a8bc-366a86d01a26"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "54 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "54.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:51:55", "plugin": "core", "name": "end_epoch", "raw_value": "1708671115.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:51:01", "plugin": "core", "name": "start_epoch", "raw_value": "1708671061.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_65d9jt1j.sam v. /tmp/history_bam_converted_to_sam_dbjqzd4m.sam )\n--- local_file\n+++ history_data\n@@ -1,23 +1,5343 @@\n @HD\tVN:1.0\tSO:coordinate\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome -1 input_f.fastq -2 input_r.fastq\"\n-@SQ\tSN:phiX174\tLN:5386\n-phiX174_1141_1609_1:0:0_1:0:0_4\t147\tphiX174\t1540\t60\t70M\t=\t1141\t-469\tTTCTAGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tZS:i:-5\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:4C65\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1141_1609_1:0:0_1:0:0_4\t99\tphiX174\t1141\t60\t70M\t=\t1540\t469\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:24G45\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1363_1914_3:0:0_0:0:0_6\t133\tphiX174\t1845\t0\t*\t=\t1845\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_1363_1914_3:0:0_0:0:0_6\t89\tphiX174\t1845\t60\t70M\t=\t1845\t0\tGCACTATGTTTACTCTTGCGCTTGTTCGTTTTCCGCCTACTGCGACTAAAGAGATTCAGTACCTTAACGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYT:Z:UP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t147\tphiX174\t1896\t60\t70M\t=\t1542\t-424\tAGATTCAGTACCTTAACGCTAAAGGTGCTTTGACTTATACCGATATTGCTGGCGACCCTGTTTTGTATGG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t99\tphiX174\t1542\t60\t70M\t=\t1896\t424\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t147\tphiX174\t639\t60\t70M\t=\t185\t-524\tTATTATGTTCATCCCGTCAACATTCAAACGGCCTGTCGCATCATGGAAGGCGCTGAATTTACGGAAAACA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:37T32\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t163\tphiX174\t1980\t60\t70M\t=\t2432\t522\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:12T57\tYS:i:-9\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t83\tphiX174\t2432\t60\t70M\t=\t1980\t-522\tTTTTTTCTGATAAGCTGGTTCTCAATTCTGTTAATCCAGCTTCTTCGGCACCTGTTTTACACACACCTAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-9\tXN:i:0\tXM:i:3\tXO:i:0\tXG:i:0\tNM:i:3\tMD:Z:24C8C27G8\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t147\tphiX174\t2508\t60\t70M\t=\t2128\t-450\tATCGTCAACGTTATATTTTGATAGTTTGAAGGTTAATGCTGGTATTGGTGGTTTTCTTAATTCCATTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-12\tXN:i:0\tXM:i:4\tXO:i:0\tXG:i:0\tNM:i:4\tMD:Z:29C14A13C3G7\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t99\tphiX174\t2128\t60\t70M\t=\t2508\t450\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-12\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t147\tphiX174\t2670\t60\t70M\t=\t2259\t-481\tTCGCTTTGAGTCTTCGTCGGTTCCGACTACCCTCCCGACTGCCTATGATGTTTATCCTTTGAATGGTCGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:15T54\tYS:i:-2\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t99\tphiX174\t2259\t60\t68M2S\t=\t2670\t481\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-2\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:68\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t163\tphiX174\t2950\t60\t70M\t=\t3308\t428\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-6\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t83\tphiX174\t3308\t60\t70M\t=\t2950\t-428\tTGAGATTAATGCTTGGGAGCGTGCTGGTGCTGATGCTTCCTATGCTGGTATGGTTGACGCCGGATTTGAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-6\tZS:i:-8\tXN:i:0\tXM:i:2\tXO:i:0\tXG:i:0\tNM:i:2\tMD:Z:4C36C28\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t147\tphiX174\t3663\t60\t70M\t=\t3199\t-534\tAATGACCAAATCAATGAAATGACTCGCAAGGTTAGTGCTGAGGTTGACTTAGTTCATCAGCAAACGCAGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:14A55\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t99\tphiX174\t3199\t60\t70M\t=\t3663\t534\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n********\n*SNIP *\n********\n+@SQ\tSN:Group6\tLN:18472937\n+@SQ\tSN:Group7\tLN:13219345\n+@SQ\tSN:Group8\tLN:13546544\n+@SQ\tSN:Group9\tLN:11120453\n+@SQ\tSN:chrM\tLN:16343\n+phiX174_1141_1609_1:0:0_1:0:0_4\t141\t*\t0\t0\t*\t*\t0\t0\tCAAATTAGCATAAGCAGCTTGCAGACCCATAATGTCAATAGATGTGGTAGAAGTCGTCATTTGGCTAGAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1141_1609_1:0:0_1:0:0_4\t77\t*\t0\t0\t*\t*\t0\t0\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t141\t*\t0\t0\t*\t*\t0\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t77\t*\t0\t0\t*\t*\t0\t0\tGCGTTAAGGTACTGAATCTCTTTAGTCGCAGTAGGCGGAAAACGAACAAGCGCAAGAGTAAACATAGTGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t141\t*\t0\t0\t*\t*\t0\t0\tCCATACAAAACAGGGTCGCCAGCAATATCGGTATAAGTCAAAGCACCTTTAGCGTTAAGGTACTGAATCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t141\t*\t0\t0\t*\t*\t0\t0\tTGTTTTCCGTAAATTCAGCGCCTTCCATGATGCGACAGGCCGTTTGAATGTTGACGGGATGAACATAATA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t77\t*\t0\t0\t*\t*\t0\t0\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t141\t*\t0\t0\t*\t*\t0\t0\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGGTGTGTGTAAAACAGGTGCCGAAGAAGCTGGATTAACAGAATTGAGAACCAGCTTATCAGAAAAAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t141\t*\t0\t0\t*\t*\t0\t0\tCTGAATGGAATTAAGAAAACCACCAATACCAGCATTAACCTTCAAACTATCAAAATATAACGTTGACGAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t77\t*\t0\t0\t*\t*\t0\t0\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t141\t*\t0\t0\t*\t*\t0\t0\tGCGACCATTCAAAGGATAAACATCATAGGCAGTCGGGAGGGTAGTCGGAACCGACGAAGACTCAAAGCGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t141\t*\t0\t0\t*\t*\t0\t0\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t77\t*\t0\t0\t*\t*\t0\t0\tCTCAAATCCGGCGTCAACCATACCAGCATAGGAAGCATCAGCACCAGCACGCTCCCAAGCATTAATCTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t141\t*\t0\t0\t*\t*\t0\t0\tTCTGCGTTTGCTGATGAACTAAGTCAACCTCAGCACTAACCTTGCGAGTCATTTCATTGATTTGGTCATT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t77\t*\t0\t0\t*\t*\t0\t0\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t141\t*\t0\t0\t*\t*\t0\t0\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t77\t*\t0\t0\t*\t*\t0\t0\tACCATAAACGCAAGCCTCAACGCAGCGACGAGCACGAGAGCGGTCAGTAGCAATCCAAACTTTGTTACTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n"], "status": "failure"}}, {"id": "hisat2/2.2.1+galaxy1-2", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 2, "time_seconds": 9.140777587890625, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "hisat2/2.2.1+galaxy1-3", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 3, "time_seconds": 23.912984132766724, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "1f080e8410b93ba2"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "5147980f7a3bdb79"}, "library|input_2": {"src": "hda", "id": "589c09592deaf242"}, "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "836bf0c26916464e", "state": "error", "exit_code": null, "update_time": "2024-02-23T06:52:27.183028", "create_time": "2024-02-23T06:52:22.116984", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-fcvs5", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/c/b/7/dataset_cb73fb9e-1a12-4376-80ee-a2e703a5264a.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/2/1/e/dataset_21ed7b96-2625-48cb-bb14-c377652e9817.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/d/8/2/dataset_d825f2bf-bf7b-4ce0-bdcf-78b28642365c.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'         --trim5 '15' --trim3 '15' --phred33                          | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/9/d/e/dataset_9deb61ad-2de2-476b-ab6c-d58b01458795.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 143, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 144, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 142, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "1f080e8410b93ba2", "src": "hda", "uuid": "cb73fb9e-1a12-4376-80ee-a2e703a5264a"}, "library|input_1": {"id": "5147980f7a3bdb79", "src": "hda", "uuid": "21ed7b96-2625-48cb-bb14-c377652e9817"}, "library|input_2": {"id": "589c09592deaf242", "src": "hda", "uuid": "d825f2bf-bf7b-4ce0-bdcf-78b28642365c"}}, "outputs": {"output_alignments": {"id": "77c014b10b16392f", "src": "hda", "uuid": "9deb61ad-2de2-476b-ab6c-d58b01458795"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": null, "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "hisat2/2.2.1+galaxy1-3", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 3, "time_seconds": 29.106029748916626, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "a64c2f65b5d01809"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "861f307559a18b2d"}, "library|input_2": {"src": "hda", "id": "c1fe0b2c7423a7e3"}, "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "d6cecda3c58419ac", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:59:27.509804", "create_time": "2024-02-23T06:59:17.381199", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-2hmfz", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/4/7/0/dataset_47057afb-cfda-4d34-b858-c368a48a2f4c.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/2/2/a/dataset_22a49036-339f-4db0-8bd1-bf855395903b.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/b/b/2/dataset_bb260237-e40b-423d-8b57-9eb64a368220.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'         --trim5 '15' --trim3 '15' --phred33                          | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/a/8/b/dataset_a8bef9ae-ec44-440f-aa8a-dea1fdec5a3a.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 206, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 207, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 205, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"library|input_1": {"id": "861f307559a18b2d", "src": "hda", "uuid": "22a49036-339f-4db0-8bd1-bf855395903b"}, "reference_genome|history_item": {"id": "a64c2f65b5d01809", "src": "hda", "uuid": "47057afb-cfda-4d34-b858-c368a48a2f4c"}, "library|input_2": {"id": "c1fe0b2c7423a7e3", "src": "hda", "uuid": "bb260237-e40b-423d-8b57-9eb64a368220"}}, "outputs": {"output_alignments": {"id": "c8bb0be1ec9030af", "src": "hda", "uuid": "a8bef9ae-ec44-440f-aa8a-dea1fdec5a3a"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 3 of 60\n  Calculating Z arrays for bucket 1\nGetting block 4 of 60\nGetting block 5 of 60\nGetting block 6 of 60\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 6\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Reserving size (126) for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 5:\nGetting block 8 of 60\n  Calculating Z arrays for bucket 4\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  Reserving size (126) for bucket 8\n  bucket 4: 10%\n  Calculating Z arrays for bucket 8\n  bucket 4: 20%\n  bucket 1: 30%\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 1: 40%\nGetting block 7 of 60\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 2\n  bucket 6: 20%\n  bucket 1: 50%\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 2:\n  bucket 6: 30%\n  Reserving size (126) for bucket 7\n  bucket 3: 10%\n  bucket 1: 60%\n  bucket 2: 10%\n  bucket 8: 10%\n  bucket 6: 40%\n  bucket 4: 50%\n  Calculating Z arrays for bucket 7\n  bucket 1: 70%\n  bucket 3: 20%\n  bucket 5: 10%\n  bucket 4: 60%\n  bucket 8: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 50%\n  bucket 2: 20%\n  bucket 6: 60%\n  bucket 1: 80%\n  bucket 5: 20%\n  bucket 3: 30%\n  bucket 4: 70%\n  bucket 6: 70%\n  bucket 1: 90%\n  bucket 8: 30%\n  bucket 2: 30%\n  bucket 1: 100%\n  bucket 5: 30%\n  bucket 7: 10%\n  bucket 3: 40%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 8: 40%\n  bucket 4: 80%\n  bucket 6: 80%\n  bucket 5: 40%\n  bucket 7: 20%\n  bucket 4: 90%\n  bucket 3: 50%\n  bucket 6: 90%\n  bucket 2: 40%\n  bucket 5: 50%\n  bucket 4: 100%\n  bucket 7: 30%\n  bucket 8: 50%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 5: 60%\n  bucket 8: 60%\n  bucket 6: 100%\n  bucket 2: 60%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 7: 40%\n  bucket 3: 70%\n  bucket 5: 70%\n  bucket 8: 80%\n  bucket 2: 70%\n  bucket 7: 50%\n  bucket 8: 90%\n  bucket 5: 80%\n  bucket 2: 80%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 5: 90%\n  bucket 2: 90%\n  bucket 7: 60%\n  bucket 3: 90%\n  bucket 5: 100%\n  bucket 2: 100%\n  Sorting block of length 63 for bucket 5\n  Sorting block time: 00:00:00\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 7: 70%\nReturning block of 43 for bucket 1\n  bucket 3: 100%\n  bucket 7: 80%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  bucket 10: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 11:\n  bucket 12: 10%\n  bucket 11: 10%\n  bucket 12: 20%\n  bucket 11: 20%\n  bucket 12: 30%\n  bucket 11: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 12: 90%\n  bucket 11: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 10%\n  bucket 13: 50%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 14: 60%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 16: 50%\n  bucket 15: 50%\n  bucket 16: 60%\n  bucket 15: 60%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 16: 90%\n  bucket 15: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 60\n  bucket 18: 10%\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 30%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 18: 70%\n  bucket 19: 60%\n  bucket 18: 80%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 18: 100%\n  bucket 19: 100%\n  Sorting block of length 122 for bucket 18\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 10%\n  bucket 20: 20%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 20: 50%\n  bucket 21: 30%\n  bucket 20: 60%\n  bucket 21: 40%\n  bucket 20: 70%\n  bucket 21: 50%\n  bucket 20: 80%\n  bucket 21: 60%\n  bucket 20: 90%\n  bucket 21: 70%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 20%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 30%\n  bucket 23: 10%\n  bucket 22: 40%\n  bucket 23: 20%\n  bucket 22: 50%\n  bucket 23: 30%\n  bucket 22: 60%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  bucket 23: 40%\n  Calculating Z arrays for bucket 24\n  bucket 22: 70%\n  bucket 23: 50%\n  bucket 22: 80%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 60%\n  bucket 22: 90%\n  bucket 23: 70%\n  bucket 24: 10%\n  bucket 22: 100%\n  bucket 23: 80%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 24: 20%\n  bucket 23: 90%\n  bucket 24: 30%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 26: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\nGetting block 33 of 60\n  Entering block accumulator loop for bucket 32:\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 10%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 20%\n  bucket 33: 10%\n  bucket 32: 30%\n  bucket 33: 20%\n  bucket 32: 40%\n  bucket 33: 30%\n  bucket 32: 50%\n  bucket 33: 40%\n  bucket 32: 60%\n  bucket 33: 50%\n  bucket 32: 70%\n  bucket 33: 60%\n  bucket 32: 80%\n  bucket 33: 70%\n  bucket 32: 90%\n  bucket 33: 80%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 20%\n  bucket 35: 10%\n  bucket 34: 30%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 20%\n  bucket 34: 40%\n  bucket 35: 30%\n  Entering block accumulator loop for bucket 36:\n  bucket 34: 50%\n  bucket 35: 40%\n  bucket 36: 10%\n  bucket 34: 60%\n  bucket 35: 50%\n  bucket 36: 20%\n  bucket 35: 60%\n  bucket 36: 30%\n  bucket 34: 70%\n  bucket 35: 70%\n  bucket 36: 40%\n  bucket 34: 80%\n  bucket 35: 80%\n  bucket 36: 50%\n  bucket 34: 90%\n  bucket 35: 90%\n  bucket 36: 60%\n  bucket 34: 100%\n  bucket 35: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  bucket 37: 60%\n  bucket 37: 70%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 80%\n  bucket 38: 10%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 20%\n  bucket 38: 30%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  bucket 38: 40%\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 39:\nReturning block of 60 for bucket 37\n  bucket 38: 50%\n  bucket 39: 10%\n  bucket 38: 60%\n  bucket 39: 20%\n  bucket 38: 70%\n  bucket 39: 30%\n  bucket 38: 80%\n  bucket 39: 40%\n  bucket 38: 90%\n  bucket 39: 50%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 42\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 10%\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 42: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 42: 30%\n  bucket 43: 50%\n  bucket 42: 40%\n  bucket 43: 60%\n  bucket 42: 50%\n  bucket 43: 70%\n  bucket 42: 60%\n  bucket 43: 80%\n  bucket 42: 70%\n  bucket 43: 90%\n  bucket 43: 100%\n  bucket 42: 80%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 42: 90%\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Entering block accumulator loop for bucket 45:\n  Calculating Z arrays for bucket 44\n  bucket 45: 10%\n  bucket 45: 20%\n  Entering block accumulator loop for bucket 44:\n  bucket 45: 30%\n  bucket 44: 10%\n  bucket 45: 40%\n  bucket 44: 20%\n  bucket 45: 50%\n  bucket 44: 30%\n  bucket 45: 60%\n  bucket 44: 40%\n  bucket 45: 70%\n  bucket 44: 50%\n  bucket 45: 80%\n  bucket 44: 60%\n  bucket 45: 90%\n  bucket 44: 70%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  Sorting block time: 00:00:00\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 40%\nReturning block of 114 for bucket 48\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 49: 50%\n  Entering block accumulator loop for bucket 50:\nGetting block 52 of 60\n  bucket 50: 10%\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 49: 60%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 20%\n  bucket 49: 70%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 10%\n  bucket 50: 30%\n  bucket 49: 80%\n  bucket 52: 10%\n  bucket 51: 20%\n  bucket 50: 40%\n  bucket 49: 90%\n  bucket 52: 20%\n  bucket 50: 50%\n  bucket 51: 30%\n  bucket 52: 30%\n  bucket 50: 60%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 52: 40%\n  bucket 51: 40%\n  bucket 52: 50%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 50: 80%\n  bucket 52: 60%\n  bucket 51: 60%\n  bucket 50: 90%\n  bucket 52: 70%\n  bucket 51: 70%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 52: 80%\n  bucket 51: 80%\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  bucket 52: 90%\n  bucket 52: 100%\n  bucket 51: 90%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Entering block accumulator loop for bucket 53:\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  bucket 53: 10%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 20%\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 53: 30%\n  bucket 54: 40%\n  bucket 53: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 53: 50%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 53: 60%\n  bucket 54: 90%\n  bucket 53: 70%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  bucket 55: 40%\n  Calculating Z arrays for bucket 56\n  bucket 55: 50%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 60%\n  bucket 56: 10%\n  bucket 55: 70%\n  bucket 56: 20%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 56: 30%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 40%\nGetting block 57 of 60\n  bucket 56: 50%\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 60%\n  bucket 56: 70%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 80%\n  bucket 57: 10%\n  bucket 56: 90%\n  Sorting block time: 00:00:00\n  bucket 57: 20%\nReturning block of 80 for bucket 55\n  bucket 56: 100%\n  bucket 57: 30%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  bucket 58: 30%\n  bucket 58: 40%\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 59: 10%\n  bucket 58: 70%\n  bucket 59: 20%\n  bucket 58: 80%\n  bucket 59: 30%\n  bucket 58: 90%\n  bucket 59: 40%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    71 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    71 pairs aligned 0 times concordantly or discordantly; of these:\n      142 mates make up the pairs; of these:\n        74 (52.11%) aligned 0 times\n        68 (47.89%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n92.60% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    71 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    71 pairs aligned 0 times concordantly or discordantly; of these:\n      142 mates make up the pairs; of these:\n        74 (52.11%) aligned 0 times\n        68 (47.89%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n92.60% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 3 of 60\n  Calculating Z arrays for bucket 1\nGetting block 4 of 60\nGetting block 5 of 60\nGetting block 6 of 60\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 6\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Reserving size (126) for bucket 4\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 5:\nGetting block 8 of 60\n  Calculating Z arrays for bucket 4\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 20%\n  Reserving size (126) for bucket 8\n  bucket 4: 10%\n  Calculating Z arrays for bucket 8\n  bucket 4: 20%\n  bucket 1: 30%\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 1: 40%\nGetting block 7 of 60\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 2\n  bucket 6: 20%\n  bucket 1: 50%\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 2:\n  bucket 6: 30%\n  Reserving size (126) for bucket 7\n  bucket 3: 10%\n  bucket 1: 60%\n  bucket 2: 10%\n  bucket 8: 10%\n  bucket 6: 40%\n  bucket 4: 50%\n  Calculating Z arrays for bucket 7\n  bucket 1: 70%\n  bucket 3: 20%\n  bucket 5: 10%\n  bucket 4: 60%\n  bucket 8: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 50%\n  bucket 2: 20%\n  bucket 6: 60%\n  bucket 1: 80%\n  bucket 5: 20%\n  bucket 3: 30%\n  bucket 4: 70%\n  bucket 6: 70%\n  bucket 1: 90%\n  bucket 8: 30%\n  bucket 2: 30%\n  bucket 1: 100%\n  bucket 5: 30%\n  bucket 7: 10%\n  bucket 3: 40%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 8: 40%\n  bucket 4: 80%\n  bucket 6: 80%\n  bucket 5: 40%\n  bucket 7: 20%\n  bucket 4: 90%\n  bucket 3: 50%\n  bucket 6: 90%\n  bucket 2: 40%\n  bucket 5: 50%\n  bucket 4: 100%\n  bucket 7: 30%\n  bucket 8: 50%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 2: 50%\n  bucket 3: 60%\n  bucket 5: 60%\n  bucket 8: 60%\n  bucket 6: 100%\n  bucket 2: 60%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 7: 40%\n  bucket 3: 70%\n  bucket 5: 70%\n  bucket 8: 80%\n  bucket 2: 70%\n  bucket 7: 50%\n  bucket 8: 90%\n  bucket 5: 80%\n  bucket 2: 80%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 3: 80%\n  bucket 5: 90%\n  bucket 2: 90%\n  bucket 7: 60%\n  bucket 3: 90%\n  bucket 5: 100%\n  bucket 2: 100%\n  Sorting block of length 63 for bucket 5\n  Sorting block time: 00:00:00\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 7: 70%\nReturning block of 43 for bucket 1\n  bucket 3: 100%\n  bucket 7: 80%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  (Using difference cover)\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 10: 10%\n  bucket 9: 30%\n  bucket 10: 20%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  bucket 10: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 11:\n  bucket 12: 10%\n  bucket 11: 10%\n  bucket 12: 20%\n  bucket 11: 20%\n  bucket 12: 30%\n  bucket 11: 30%\n  bucket 12: 40%\n  bucket 11: 40%\n  bucket 12: 50%\n  bucket 11: 50%\n  bucket 12: 60%\n  bucket 11: 60%\n  bucket 12: 70%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 11: 80%\n  bucket 12: 90%\n  bucket 11: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 10%\n  bucket 13: 50%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 14: 60%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 16: 50%\n  bucket 15: 50%\n  bucket 16: 60%\n  bucket 15: 60%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 16: 90%\n  bucket 15: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Entering block accumulator loop for bucket 18:\nGetting block 19 of 60\n  bucket 18: 10%\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 30%\n  bucket 19: 10%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 18: 60%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 18: 70%\n  bucket 19: 60%\n  bucket 18: 80%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 18: 90%\n  bucket 19: 90%\n  bucket 18: 100%\n  bucket 19: 100%\n  Sorting block of length 122 for bucket 18\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 10%\n  bucket 20: 20%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 20: 50%\n  bucket 21: 30%\n  bucket 20: 60%\n  bucket 21: 40%\n  bucket 20: 70%\n  bucket 21: 50%\n  bucket 20: 80%\n  bucket 21: 60%\n  bucket 20: 90%\n  bucket 21: 70%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 20%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 30%\n  bucket 23: 10%\n  bucket 22: 40%\n  bucket 23: 20%\n  bucket 22: 50%\n  bucket 23: 30%\n  bucket 22: 60%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  bucket 23: 40%\n  Calculating Z arrays for bucket 24\n  bucket 22: 70%\n  bucket 23: 50%\n  bucket 22: 80%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 60%\n  bucket 22: 90%\n  bucket 23: 70%\n  bucket 24: 10%\n  bucket 22: 100%\n  bucket 23: 80%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 24: 20%\n  bucket 23: 90%\n  bucket 24: 30%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 26: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\nGetting block 33 of 60\n  Entering block accumulator loop for bucket 32:\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 10%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 20%\n  bucket 33: 10%\n  bucket 32: 30%\n  bucket 33: 20%\n  bucket 32: 40%\n  bucket 33: 30%\n  bucket 32: 50%\n  bucket 33: 40%\n  bucket 32: 60%\n  bucket 33: 50%\n  bucket 32: 70%\n  bucket 33: 60%\n  bucket 32: 80%\n  bucket 33: 70%\n  bucket 32: 90%\n  bucket 33: 80%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 20%\n  bucket 35: 10%\n  bucket 34: 30%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 20%\n  bucket 34: 40%\n  bucket 35: 30%\n  Entering block accumulator loop for bucket 36:\n  bucket 34: 50%\n  bucket 35: 40%\n  bucket 36: 10%\n  bucket 34: 60%\n  bucket 35: 50%\n  bucket 36: 20%\n  bucket 35: 60%\n  bucket 36: 30%\n  bucket 34: 70%\n  bucket 35: 70%\n  bucket 36: 40%\n  bucket 34: 80%\n  bucket 35: 80%\n  bucket 36: 50%\n  bucket 34: 90%\n  bucket 35: 90%\n  bucket 36: 60%\n  bucket 34: 100%\n  bucket 35: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  bucket 37: 60%\n  bucket 37: 70%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 80%\n  bucket 38: 10%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 20%\n  bucket 38: 30%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  bucket 38: 40%\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 39:\nReturning block of 60 for bucket 37\n  bucket 38: 50%\n  bucket 39: 10%\n  bucket 38: 60%\n  bucket 39: 20%\n  bucket 38: 70%\n  bucket 39: 30%\n  bucket 38: 80%\n  bucket 39: 40%\n  bucket 38: 90%\n  bucket 39: 50%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 42\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 10%\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 42: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 42: 30%\n  bucket 43: 50%\n  bucket 42: 40%\n  bucket 43: 60%\n  bucket 42: 50%\n  bucket 43: 70%\n  bucket 42: 60%\n  bucket 43: 80%\n  bucket 42: 70%\n  bucket 43: 90%\n  bucket 43: 100%\n  bucket 42: 80%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 42: 90%\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Entering block accumulator loop for bucket 45:\n  Calculating Z arrays for bucket 44\n  bucket 45: 10%\n  bucket 45: 20%\n  Entering block accumulator loop for bucket 44:\n  bucket 45: 30%\n  bucket 44: 10%\n  bucket 45: 40%\n  bucket 44: 20%\n  bucket 45: 50%\n  bucket 44: 30%\n  bucket 45: 60%\n  bucket 44: 40%\n  bucket 45: 70%\n  bucket 44: 50%\n  bucket 45: 80%\n  bucket 44: 60%\n  bucket 45: 90%\n  bucket 44: 70%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  Sorting block time: 00:00:00\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 40%\nReturning block of 114 for bucket 48\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 49: 50%\n  Entering block accumulator loop for bucket 50:\nGetting block 52 of 60\n  bucket 50: 10%\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 49: 60%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 20%\n  bucket 49: 70%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 10%\n  bucket 50: 30%\n  bucket 49: 80%\n  bucket 52: 10%\n  bucket 51: 20%\n  bucket 50: 40%\n  bucket 49: 90%\n  bucket 52: 20%\n  bucket 50: 50%\n  bucket 51: 30%\n  bucket 52: 30%\n  bucket 50: 60%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 52: 40%\n  bucket 51: 40%\n  bucket 52: 50%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 50: 80%\n  bucket 52: 60%\n  bucket 51: 60%\n  bucket 50: 90%\n  bucket 52: 70%\n  bucket 51: 70%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 52: 80%\n  bucket 51: 80%\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  bucket 52: 90%\n  bucket 52: 100%\n  bucket 51: 90%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Entering block accumulator loop for bucket 53:\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  bucket 53: 10%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 20%\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 53: 30%\n  bucket 54: 40%\n  bucket 53: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 53: 50%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 53: 60%\n  bucket 54: 90%\n  bucket 53: 70%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  bucket 55: 40%\n  Calculating Z arrays for bucket 56\n  bucket 55: 50%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 60%\n  bucket 56: 10%\n  bucket 55: 70%\n  bucket 56: 20%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 56: 30%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 40%\nGetting block 57 of 60\n  bucket 56: 50%\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 60%\n  bucket 56: 70%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 80%\n  bucket 57: 10%\n  bucket 56: 90%\n  Sorting block time: 00:00:00\n  bucket 57: 20%\nReturning block of 80 for bucket 55\n  bucket 56: 100%\n  bucket 57: 30%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  bucket 58: 30%\n  bucket 58: 40%\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 59: 10%\n  bucket 58: 70%\n  bucket 59: 20%\n  bucket 58: 80%\n  bucket 59: 30%\n  bucket 58: 90%\n  bucket 59: 40%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:59:19", "plugin": "core", "name": "end_epoch", "raw_value": "1708671559.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:59:18", "plugin": "core", "name": "start_epoch", "raw_value": "1708671558.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-4", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 4, "time_seconds": 27.867300271987915, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "39580deb2baa2087"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "b8011ccad181ca2a"}, "library|input_2": {"src": "hda", "id": "2419ceaebc661b63"}, "library|paired_options|no_mixed": true, "library|paired_options|no_discordant": true, "library|paired_options|paired_options_selector": "advanced", "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "da72e20b67f4caf1", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:52:54.918045", "create_time": "2024-02-23T06:52:44.914482", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-8vmlg", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/0/0/5/dataset_005b3ded-70f3-49eb-af92-f2653365e10b.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/8/e/8/dataset_8e8100b1-bb9d-474d-bb56-8b18dcd31e58.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/9/6/9/dataset_969d7710-0943-46da-b53c-e967d8c43849.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'  --fr --no-mixed --no-discordant        --trim5 '15' --trim3 '15' --phred33                          | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/0/4/4/dataset_044dab21-6d9d-49c8-a506-f966b0129f7c.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 147, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 148, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"fr_rf_ff\": \"--fr\", \"no_discordant\": true, \"no_mixed\": true, \"paired_options_selector\": \"advanced\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 146, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "39580deb2baa2087", "src": "hda", "uuid": "005b3ded-70f3-49eb-af92-f2653365e10b"}, "library|input_1": {"id": "b8011ccad181ca2a", "src": "hda", "uuid": "8e8100b1-bb9d-474d-bb56-8b18dcd31e58"}, "library|input_2": {"id": "2419ceaebc661b63", "src": "hda", "uuid": "969d7710-0943-46da-b53c-e967d8c43849"}}, "outputs": {"output_alignments": {"id": "776012fb6e055d02", "src": "hda", "uuid": "044dab21-6d9d-49c8-a506-f966b0129f7c"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 1\nGetting block 3 of 60\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 1\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Calculating Z arrays for bucket 2\n  Reserving size (126) for bucket 3\nGetting block 6 of 60\nGetting block 8 of 60\n  Calculating Z arrays for bucket 4\n  Reserving size (126) for bucket 6\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 5\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 3:\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 20%\n  bucket 2: 10%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 10%\n  bucket 4: 30%\n  bucket 7: 10%\n  bucket 2: 20%\n  bucket 1: 20%\n  bucket 5: 10%\n  Calculating Z arrays for bucket 8\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 4: 40%\n  bucket 3: 20%\n  bucket 2: 40%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 2: 50%\n  bucket 5: 30%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 3: 30%\n  bucket 7: 30%\n  bucket 4: 60%\n  bucket 3: 40%\n  bucket 2: 70%\n  bucket 7: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 1: 40%\n  bucket 4: 70%\n  bucket 6: 30%\n  bucket 3: 50%\n  bucket 4: 80%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 5: 40%\n  bucket 3: 60%\n  bucket 1: 50%\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 5: 50%\n  bucket 1: 60%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 4: 100%\n  bucket 3: 70%\n  Sorting block of length 68 for bucket 4\n  bucket 6: 40%\n  bucket 5: 60%\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 8: 30%\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 5: 70%\n  bucket 8: 40%\n  bucket 3: 90%\n  bucket 5: 80%\n  bucket 1: 70%\n  bucket 2: 100%\n  bucket 6: 50%\n  Sorting block of length 84 for bucket 2\n  bucket 5: 90%\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 8: 50%\n  bucket 1: 80%\n  bucket 3: 100%\n  bucket 6: 70%\n  bucket 5: 100%\n  bucket 1: 90%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 6: 80%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 6: 90%\n  bucket 7: 90%\n  bucket 1: 100%\n  bucket 6: 100%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 8: 70%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 7: 100%\n  bucket 8: 80%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 60\n  bucket 9: 20%\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 10%\n  bucket 9: 60%\n  bucket 11: 10%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 9: 80%\n  bucket 11: 40%\n  bucket 9: 90%\n  bucket 11: 50%\n  bucket 10: 30%\n  bucket 11: 60%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 10: 40%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 80%\n  bucket 10: 50%\n  bucket 11: 90%\n  Entering block accumulator loop for bucket 12:\n  Sorting block time: 00:00:00\n  bucket 10: 60%\nReturning block of 125 for bucket 9\n  bucket 11: 100%\n  bucket 12: 10%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 12: 20%\n  bucket 10: 80%\n  bucket 12: 30%\n  bucket 10: 90%\n  bucket 12: 40%\n  bucket 10: 100%\n  bucket 12: 50%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\nGetting block 14 of 60\n  bucket 13: 30%\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 40%\n  bucket 13: 50%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 60%\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 70%\n  bucket 14: 30%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 14: 60%\n  bucket 13: 100%\n  bucket 14: 70%\n  Sorting block of length 85 for bucket 13\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  (Using difference cover)\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  bucket 19: 10%\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 19: 90%\n  bucket 20: 70%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  bucket 21: 20%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 21: 100%\n  bucket 22: 100%\n  Sorting block of length 54 for bucket 21\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  Sorting block time: 00:00:00\n  bucket 24: 60%\nReturning block of 65 for bucket 23\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 26: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  Sorting block time: 00:00:00\n  bucket 27: 20%\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Calculating Z arrays for bucket 30\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 28: 30%\n  bucket 30: 10%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 29: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  Sorting block time: 00:00:00\n  bucket 30: 80%\nReturning block of 52 for bucket 29\n  bucket 30: 90%\n  Sorting block time: 00:00:00\n  bucket 30: 100%\nReturning block of 107 for bucket 28\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 31\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 32: 10%\n  bucket 31: 30%\n  bucket 32: 20%\n  bucket 31: 40%\n  bucket 32: 30%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 32: 40%\n  bucket 31: 70%\n  bucket 32: 50%\n  bucket 31: 80%\n  bucket 32: 60%\n  bucket 31: 90%\n  bucket 31: 100%\n  bucket 32: 70%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 30%\n  bucket 33: 40%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 34: 10%\n  bucket 33: 70%\n  bucket 34: 20%\n  bucket 33: 80%\n  bucket 34: 30%\n  bucket 33: 90%\n  bucket 34: 40%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 50%\n  bucket 34: 60%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 10%\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Entering block accumulator loop for bucket 36:\n  Calculating Z arrays for bucket 37\n  bucket 36: 10%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  bucket 36: 20%\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 30%\n  bucket 37: 10%\n  Entering block accumulator loop for bucket 38:\n  bucket 36: 40%\n  bucket 37: 20%\n  bucket 36: 50%\n  bucket 38: 10%\n  bucket 37: 30%\n  bucket 36: 60%\n  bucket 37: 40%\n  bucket 36: 70%\n  bucket 37: 50%\n  bucket 38: 20%\n  bucket 36: 80%\n  bucket 37: 60%\n  bucket 38: 30%\n  bucket 37: 70%\n  bucket 38: 40%\n  bucket 36: 90%\n  bucket 37: 80%\n  bucket 38: 50%\n  bucket 36: 100%\n  bucket 37: 90%\n  bucket 38: 60%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Entering block accumulator loop for bucket 40:\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 10%\n  bucket 40: 20%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 30%\n  bucket 41: 10%\n  bucket 40: 40%\n  bucket 41: 20%\n  bucket 40: 50%\n  bucket 41: 30%\n  bucket 40: 60%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  bucket 40: 70%\n  bucket 41: 40%\n  Calculating Z arrays for bucket 42\n  bucket 41: 50%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 60%\n  bucket 42: 10%\n  bucket 41: 70%\n  bucket 42: 20%\n  bucket 40: 80%\n  bucket 42: 30%\n  bucket 41: 80%\n  bucket 40: 90%\n  bucket 42: 40%\n  bucket 41: 90%\n  bucket 40: 100%\n  bucket 42: 50%\n  bucket 41: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\nGetting block 44 of 60\n  Entering block accumulator loop for bucket 43:\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 10%\n  bucket 43: 20%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 30%\n  bucket 44: 10%\n  bucket 43: 40%\n  bucket 44: 20%\n  bucket 43: 50%\n  bucket 44: 30%\n  bucket 43: 60%\n  bucket 44: 40%\n  bucket 43: 70%\n  bucket 44: 50%\n  bucket 43: 80%\n  bucket 44: 60%\n  bucket 43: 90%\n  bucket 44: 70%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  bucket 48: 10%\n  bucket 47: 20%\n  bucket 48: 20%\n  bucket 47: 30%\n  bucket 48: 30%\n  bucket 47: 40%\n  bucket 48: 40%\n  bucket 47: 50%\n  bucket 48: 50%\n  bucket 47: 60%\n  bucket 48: 60%\n  bucket 47: 70%\n  bucket 48: 70%\n  bucket 47: 80%\n  bucket 48: 80%\n  bucket 47: 90%\n  bucket 48: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  bucket 50: 30%\n  bucket 50: 40%\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 50%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 60%\n  bucket 51: 10%\n  bucket 50: 70%\n  bucket 51: 20%\n  bucket 50: 80%\n  bucket 51: 30%\n  bucket 50: 90%\n  bucket 51: 40%\n  bucket 50: 100%\n  bucket 51: 50%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 54:\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 10%\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 54: 20%\n  bucket 55: 30%\n  bucket 54: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 54: 40%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 54: 50%\n  bucket 55: 80%\n  bucket 54: 60%\n  bucket 55: 90%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 40%\n  bucket 56: 50%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 60%\n  bucket 57: 10%\n  bucket 56: 70%\n  bucket 57: 20%\n  bucket 56: 80%\n  bucket 57: 30%\n  bucket 56: 90%\n  bucket 57: 40%\n  bucket 56: 100%\n  bucket 57: 50%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 1\nGetting block 3 of 60\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 1\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Calculating Z arrays for bucket 2\n  Reserving size (126) for bucket 3\nGetting block 6 of 60\nGetting block 8 of 60\n  Calculating Z arrays for bucket 4\n  Reserving size (126) for bucket 6\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 5\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 3:\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 20%\n  bucket 2: 10%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 10%\n  bucket 4: 30%\n  bucket 7: 10%\n  bucket 2: 20%\n  bucket 1: 20%\n  bucket 5: 10%\n  Calculating Z arrays for bucket 8\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 6: 10%\n  bucket 5: 20%\n  bucket 4: 40%\n  bucket 3: 20%\n  bucket 2: 40%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 2: 50%\n  bucket 5: 30%\n  bucket 4: 50%\n  bucket 2: 60%\n  bucket 3: 30%\n  bucket 7: 30%\n  bucket 4: 60%\n  bucket 3: 40%\n  bucket 2: 70%\n  bucket 7: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 1: 40%\n  bucket 4: 70%\n  bucket 6: 30%\n  bucket 3: 50%\n  bucket 4: 80%\n  bucket 8: 10%\n  bucket 7: 50%\n  bucket 5: 40%\n  bucket 3: 60%\n  bucket 1: 50%\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 5: 50%\n  bucket 1: 60%\n  bucket 8: 20%\n  bucket 7: 60%\n  bucket 4: 100%\n  bucket 3: 70%\n  Sorting block of length 68 for bucket 4\n  bucket 6: 40%\n  bucket 5: 60%\n  (Using difference cover)\n  bucket 7: 70%\n  bucket 8: 30%\n  bucket 3: 80%\n  bucket 2: 90%\n  bucket 5: 70%\n  bucket 8: 40%\n  bucket 3: 90%\n  bucket 5: 80%\n  bucket 1: 70%\n  bucket 2: 100%\n  bucket 6: 50%\n  Sorting block of length 84 for bucket 2\n  bucket 5: 90%\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 8: 50%\n  bucket 1: 80%\n  bucket 3: 100%\n  bucket 6: 70%\n  bucket 5: 100%\n  bucket 1: 90%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 6: 80%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 6: 90%\n  bucket 7: 90%\n  bucket 1: 100%\n  bucket 6: 100%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 8: 70%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 7: 100%\n  bucket 8: 80%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 60\n  bucket 9: 20%\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 10%\n  bucket 9: 60%\n  bucket 11: 10%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 9: 80%\n  bucket 11: 40%\n  bucket 9: 90%\n  bucket 11: 50%\n  bucket 10: 30%\n  bucket 11: 60%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 10: 40%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 80%\n  bucket 10: 50%\n  bucket 11: 90%\n  Entering block accumulator loop for bucket 12:\n  Sorting block time: 00:00:00\n  bucket 10: 60%\nReturning block of 125 for bucket 9\n  bucket 11: 100%\n  bucket 12: 10%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 12: 20%\n  bucket 10: 80%\n  bucket 12: 30%\n  bucket 10: 90%\n  bucket 12: 40%\n  bucket 10: 100%\n  bucket 12: 50%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\nGetting block 14 of 60\n  bucket 13: 30%\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 40%\n  bucket 13: 50%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 60%\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 13: 70%\n  bucket 14: 30%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 14: 60%\n  bucket 13: 100%\n  bucket 14: 70%\n  Sorting block of length 85 for bucket 13\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  (Using difference cover)\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  bucket 19: 10%\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 19: 90%\n  bucket 20: 70%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  bucket 21: 20%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 21: 100%\n  bucket 22: 100%\n  Sorting block of length 54 for bucket 21\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  Sorting block time: 00:00:00\n  bucket 24: 60%\nReturning block of 65 for bucket 23\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 10%\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 26: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 26: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  Sorting block time: 00:00:00\n  bucket 27: 20%\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Entering block accumulator loop for bucket 28:\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Entering block accumulator loop for bucket 29:\n  Calculating Z arrays for bucket 30\n  bucket 28: 10%\n  bucket 29: 10%\n  bucket 28: 20%\n  bucket 29: 20%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 28: 30%\n  bucket 30: 10%\n  bucket 28: 40%\n  bucket 29: 40%\n  bucket 28: 50%\n  bucket 29: 50%\n  bucket 28: 60%\n  bucket 29: 60%\n  bucket 28: 70%\n  bucket 29: 70%\n  bucket 28: 80%\n  bucket 29: 80%\n  bucket 28: 90%\n  bucket 29: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  Sorting block time: 00:00:00\n  bucket 30: 80%\nReturning block of 52 for bucket 29\n  bucket 30: 90%\n  Sorting block time: 00:00:00\n  bucket 30: 100%\nReturning block of 107 for bucket 28\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 31\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 32: 10%\n  bucket 31: 30%\n  bucket 32: 20%\n  bucket 31: 40%\n  bucket 32: 30%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 32: 40%\n  bucket 31: 70%\n  bucket 32: 50%\n  bucket 31: 80%\n  bucket 32: 60%\n  bucket 31: 90%\n  bucket 31: 100%\n  bucket 32: 70%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 30%\n  bucket 33: 40%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 34: 10%\n  bucket 33: 70%\n  bucket 34: 20%\n  bucket 33: 80%\n  bucket 34: 30%\n  bucket 33: 90%\n  bucket 34: 40%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 50%\n  bucket 34: 60%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 10%\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Entering block accumulator loop for bucket 36:\n  Calculating Z arrays for bucket 37\n  bucket 36: 10%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  bucket 36: 20%\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 30%\n  bucket 37: 10%\n  Entering block accumulator loop for bucket 38:\n  bucket 36: 40%\n  bucket 37: 20%\n  bucket 36: 50%\n  bucket 38: 10%\n  bucket 37: 30%\n  bucket 36: 60%\n  bucket 37: 40%\n  bucket 36: 70%\n  bucket 37: 50%\n  bucket 38: 20%\n  bucket 36: 80%\n  bucket 37: 60%\n  bucket 38: 30%\n  bucket 37: 70%\n  bucket 38: 40%\n  bucket 36: 90%\n  bucket 37: 80%\n  bucket 38: 50%\n  bucket 36: 100%\n  bucket 37: 90%\n  bucket 38: 60%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Entering block accumulator loop for bucket 40:\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 10%\n  bucket 40: 20%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 30%\n  bucket 41: 10%\n  bucket 40: 40%\n  bucket 41: 20%\n  bucket 40: 50%\n  bucket 41: 30%\n  bucket 40: 60%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  bucket 40: 70%\n  bucket 41: 40%\n  Calculating Z arrays for bucket 42\n  bucket 41: 50%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 60%\n  bucket 42: 10%\n  bucket 41: 70%\n  bucket 42: 20%\n  bucket 40: 80%\n  bucket 42: 30%\n  bucket 41: 80%\n  bucket 40: 90%\n  bucket 42: 40%\n  bucket 41: 90%\n  bucket 40: 100%\n  bucket 42: 50%\n  bucket 41: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\nGetting block 44 of 60\n  Entering block accumulator loop for bucket 43:\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 10%\n  bucket 43: 20%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 30%\n  bucket 44: 10%\n  bucket 43: 40%\n  bucket 44: 20%\n  bucket 43: 50%\n  bucket 44: 30%\n  bucket 43: 60%\n  bucket 44: 40%\n  bucket 43: 70%\n  bucket 44: 50%\n  bucket 43: 80%\n  bucket 44: 60%\n  bucket 43: 90%\n  bucket 44: 70%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  bucket 48: 10%\n  bucket 47: 20%\n  bucket 48: 20%\n  bucket 47: 30%\n  bucket 48: 30%\n  bucket 47: 40%\n  bucket 48: 40%\n  bucket 47: 50%\n  bucket 48: 50%\n  bucket 47: 60%\n  bucket 48: 60%\n  bucket 47: 70%\n  bucket 48: 70%\n  bucket 47: 80%\n  bucket 48: 80%\n  bucket 47: 90%\n  bucket 48: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  bucket 50: 30%\n  bucket 50: 40%\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 50%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 60%\n  bucket 51: 10%\n  bucket 50: 70%\n  bucket 51: 20%\n  bucket 50: 80%\n  bucket 51: 30%\n  bucket 50: 90%\n  bucket 51: 40%\n  bucket 50: 100%\n  bucket 51: 50%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 54:\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 10%\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 54: 20%\n  bucket 55: 30%\n  bucket 54: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 54: 40%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 54: 50%\n  bucket 55: 80%\n  bucket 54: 60%\n  bucket 55: 90%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 40%\n  bucket 56: 50%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 60%\n  bucket 57: 10%\n  bucket 56: 70%\n  bucket 57: 20%\n  bucket 56: 80%\n  bucket 57: 30%\n  bucket 56: 90%\n  bucket 57: 40%\n  bucket 56: 100%\n  bucket 57: 50%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:52:46", "plugin": "core", "name": "end_epoch", "raw_value": "1708671166.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:52:46", "plugin": "core", "name": "start_epoch", "raw_value": "1708671166.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-4", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 4, "time_seconds": 29.106813192367554, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "0668f0a725333d39"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "6124ec236c9aa9f1"}, "library|input_2": {"src": "hda", "id": "cf41094d27360831"}, "library|paired_options|no_mixed": true, "library|paired_options|no_discordant": true, "library|paired_options|paired_options_selector": "advanced", "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "88361a08a226e8b2", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:59:56.424054", "create_time": "2024-02-23T06:59:45.890466", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-ns7v4", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/b/9/7/dataset_b97d0222-1cce-4f7c-ac47-bd7554939772.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/4/b/a/dataset_4ba290d9-ac2c-4f01-898b-69aedd3b7bf6.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/9/8/a/dataset_98a852db-102b-4f4e-9cfc-36c0ff2fe2dc.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'  --fr --no-mixed --no-discordant        --trim5 '15' --trim3 '15' --phred33                          | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/c/e/a/dataset_cea4dbf0-d5be-4c3a-876c-06e210ce17c2.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 210, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 211, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"fr_rf_ff\": \"--fr\", \"no_discordant\": true, \"no_mixed\": true, \"paired_options_selector\": \"advanced\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 209, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "0668f0a725333d39", "src": "hda", "uuid": "b97d0222-1cce-4f7c-ac47-bd7554939772"}, "library|input_1": {"id": "6124ec236c9aa9f1", "src": "hda", "uuid": "4ba290d9-ac2c-4f01-898b-69aedd3b7bf6"}, "library|input_2": {"id": "cf41094d27360831", "src": "hda", "uuid": "98a852db-102b-4f4e-9cfc-36c0ff2fe2dc"}}, "outputs": {"output_alignments": {"id": "4915470708f63689", "src": "hda", "uuid": "cea4dbf0-d5be-4c3a-876c-06e210ce17c2"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\nGetting block 4 of 60\n  Reserving size (126) for bucket 1\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\nGetting block 5 of 60\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 6\n  Reserving size (126) for bucket 5\n  Calculating Z arrays for bucket 7\nGetting block 3 of 60\n  Entering block accumulator loop for bucket 1:\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 8\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 3\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 8:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 10%\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 2: 20%\n  bucket 7: 20%\n  bucket 2: 30%\n  bucket 7: 30%\n  bucket 2: 40%\n  bucket 6: 30%\n  bucket 7: 40%\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 50%\n  bucket 7: 50%\n  bucket 6: 40%\n  bucket 2: 60%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 7: 60%\n  bucket 2: 70%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 1: 20%\n  bucket 2: 80%\n  bucket 7: 70%\n  bucket 6: 50%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 2: 90%\n  bucket 7: 80%\n  bucket 8: 10%\n  bucket 5: 10%\n  bucket 4: 40%\n  bucket 1: 30%\n  bucket 5: 20%\n  bucket 8: 20%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 5: 30%\n  bucket 8: 30%\n  bucket 2: 100%\n  bucket 7: 90%\n  bucket 8: 40%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 8: 50%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 5: 40%\n  bucket 8: 60%\n  bucket 5: 50%\n  bucket 7: 100%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 5: 60%\n  bucket 6: 60%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 8: 70%\n  bucket 6: 70%\n  Sorting block time: 00:00:00\n  bucket 1: 40%\n  bucket 3: 70%\n  bucket 5: 70%\n  bucket 8: 80%\nReturning block of 85 for bucket 2\n  bucket 5: 80%\n  bucket 8: 90%\n  bucket 1: 50%\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 6: 80%\n  bucket 8: 100%\n  bucket 5: 90%\n  Sorting block of length 94 for bucket 8\n  bucket 4: 100%\n  (Using difference cover)\n  bucket 1: 60%\n  bucket 5: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 1: 70%\n  bucket 6: 100%\n  bucket 1: 80%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\nReturning block of 76 for bucket 7\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 9: 60%\n  bucket 10: 30%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 70%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 80%\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 11: 90%\n  bucket 12: 30%\n  bucket 11: 100%\n  bucket 12: 40%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 13: 100%\n  bucket 14: 70%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 16\n  Calculating Z arrays for bucket 17\n  bucket 15: 10%\n  bucket 15: 20%\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 30%\n  bucket 16: 10%\n  bucket 15: 40%\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 15: 50%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 15: 60%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 15: 70%\n  bucket 16: 50%\n  bucket 17: 40%\n  bucket 15: 80%\n  bucket 16: 60%\n  bucket 17: 50%\n  bucket 15: 90%\n  bucket 17: 60%\n  bucket 15: 100%\n  bucket 17: 70%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 17: 80%\n  bucket 16: 70%\n  bucket 17: 90%\n  bucket 16: 80%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  bucket 20: 20%\n  Calculating Z arrays for bucket 21\n  bucket 20: 30%\n  bucket 20: 40%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 21: 10%\n  bucket 20: 70%\n  bucket 21: 20%\n  bucket 20: 80%\n  bucket 21: 30%\n  bucket 20: 90%\n  bucket 21: 40%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Calculating Z arrays for bucket 26\n  bucket 25: 10%\n  bucket 25: 20%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 25: 50%\n  bucket 26: 20%\n  bucket 25: 60%\n  bucket 26: 30%\n  bucket 25: 70%\n  bucket 26: 40%\n  bucket 25: 80%\n  bucket 26: 50%\n  bucket 25: 90%\n  bucket 26: 60%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\nGetting block 31 of 60\n  bucket 30: 10%\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 20%\n  bucket 30: 30%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 40%\n  bucket 31: 10%\n  bucket 30: 50%\n  bucket 31: 20%\n  bucket 30: 60%\n  bucket 31: 30%\n  bucket 30: 70%\n  bucket 31: 40%\n  bucket 30: 80%\n  bucket 31: 50%\n  bucket 30: 90%\n  bucket 31: 60%\n  bucket 30: 100%\n  bucket 31: 70%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  bucket 32: 40%\n  Calculating Z arrays for bucket 33\n  bucket 32: 50%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 60%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 10%\n  bucket 32: 70%\n  bucket 33: 20%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 30%\n  bucket 32: 80%\n  bucket 34: 10%\n  bucket 33: 40%\n  bucket 32: 90%\n  bucket 34: 20%\n  bucket 33: 50%\n  bucket 32: 100%\n  bucket 34: 30%\n  bucket 33: 60%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 34: 40%\n  bucket 33: 70%\n  bucket 34: 50%\n  bucket 33: 80%\n  bucket 34: 60%\n  bucket 33: 90%\n  bucket 34: 70%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 20%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  bucket 36: 30%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 40%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 10%\n  bucket 38: 10%\n  bucket 36: 50%\n  bucket 37: 20%\n  bucket 38: 20%\n  bucket 36: 60%\n  bucket 38: 30%\n  bucket 36: 70%\n  bucket 38: 40%\n  bucket 37: 30%\n  bucket 38: 50%\n  bucket 36: 80%\n  bucket 37: 40%\n  bucket 38: 60%\n  bucket 36: 90%\n  bucket 37: 50%\n  bucket 38: 70%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 60%\n  bucket 38: 80%\n  bucket 37: 70%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  bucket 39: 50%\n  Calculating Z arrays for bucket 40\n  bucket 39: 60%\n  bucket 39: 70%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 80%\n  bucket 40: 10%\n  bucket 39: 90%\n  bucket 40: 20%\n  bucket 39: 100%\n  bucket 40: 30%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  bucket 41: 20%\n  bucket 41: 30%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 42: 10%\n  bucket 41: 60%\n  bucket 42: 20%\n  bucket 41: 70%\n  bucket 42: 30%\n  bucket 41: 80%\n  bucket 42: 40%\n  bucket 41: 90%\n  bucket 42: 50%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 80%\n  bucket 46: 10%\n  bucket 45: 90%\n  bucket 46: 20%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Entering block accumulator loop for bucket 47:\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 10%\n  bucket 47: 20%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 30%\nGetting block 49 of 60\n  bucket 47: 40%\n  Reserving size (126) for bucket 49\n  bucket 47: 50%\n  bucket 48: 10%\n  Calculating Z arrays for bucket 49\n  bucket 47: 60%\n  bucket 48: 20%\n  bucket 47: 70%\n  bucket 48: 30%\n  bucket 47: 80%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 40%\n  bucket 47: 90%\n  bucket 48: 50%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 49: 10%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 49: 20%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 49: 30%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 40%\n  bucket 49: 50%\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 10%\n  bucket 50: 20%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 30%\n  bucket 51: 10%\n  bucket 50: 40%\n  bucket 51: 20%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 50: 50%\n  bucket 51: 30%\n  bucket 50: 60%\n  bucket 51: 40%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 50: 80%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 60%\n  bucket 50: 90%\n  bucket 52: 10%\n  bucket 51: 70%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 52: 20%\n  bucket 51: 80%\n  bucket 52: 30%\n  bucket 51: 90%\n  bucket 52: 40%\n  bucket 51: 100%\n  bucket 52: 50%\n  Sorting block of length 91 for bucket 51\n  bucket 52: 60%\n  (Using difference cover)\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  bucket 53: 20%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 30%\n  bucket 54: 10%\n  bucket 53: 40%\n  bucket 54: 20%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 54: 30%\n  bucket 53: 70%\n  bucket 54: 40%\n  bucket 53: 80%\n  bucket 54: 50%\n  bucket 53: 90%\n  bucket 54: 60%\n  bucket 53: 100%\n  bucket 54: 70%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 56:\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 10%\n  bucket 57: 10%\n  bucket 56: 20%\n  bucket 57: 20%\nGetting block 58 of 60\n  bucket 57: 30%\n  bucket 56: 30%\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 40%\n  bucket 56: 40%\n  bucket 57: 50%\n  bucket 56: 50%\n  bucket 57: 60%\n  bucket 56: 60%\n  bucket 57: 70%\n  bucket 56: 70%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 80%\n  bucket 56: 80%\n  bucket 58: 10%\n  bucket 56: 90%\n  bucket 57: 90%\n  bucket 56: 100%\n  bucket 58: 20%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  bucket 59: 40%\n  Calculating Z arrays for bucket 60\n  bucket 59: 50%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 60%\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 59: 70%\n  bucket 60: 30%\n  bucket 59: 80%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 59: 90%\n  bucket 60: 60%\n  bucket 59: 100%\n  bucket 60: 70%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:01\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:01\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\nGetting block 4 of 60\n  Reserving size (126) for bucket 1\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\nGetting block 5 of 60\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 6\n  Reserving size (126) for bucket 5\n  Calculating Z arrays for bucket 7\nGetting block 3 of 60\n  Entering block accumulator loop for bucket 1:\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 8\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 3\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 8:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 10%\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 2: 20%\n  bucket 7: 20%\n  bucket 2: 30%\n  bucket 7: 30%\n  bucket 2: 40%\n  bucket 6: 30%\n  bucket 7: 40%\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 50%\n  bucket 7: 50%\n  bucket 6: 40%\n  bucket 2: 60%\n  bucket 3: 10%\n  bucket 4: 10%\n  bucket 7: 60%\n  bucket 2: 70%\n  bucket 3: 20%\n  bucket 4: 20%\n  bucket 1: 20%\n  bucket 2: 80%\n  bucket 7: 70%\n  bucket 6: 50%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 2: 90%\n  bucket 7: 80%\n  bucket 8: 10%\n  bucket 5: 10%\n  bucket 4: 40%\n  bucket 1: 30%\n  bucket 5: 20%\n  bucket 8: 20%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 5: 30%\n  bucket 8: 30%\n  bucket 2: 100%\n  bucket 7: 90%\n  bucket 8: 40%\n  bucket 3: 50%\n  bucket 4: 60%\n  bucket 8: 50%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 5: 40%\n  bucket 8: 60%\n  bucket 5: 50%\n  bucket 7: 100%\n  bucket 3: 60%\n  bucket 4: 70%\n  bucket 5: 60%\n  bucket 6: 60%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 8: 70%\n  bucket 6: 70%\n  Sorting block time: 00:00:00\n  bucket 1: 40%\n  bucket 3: 70%\n  bucket 5: 70%\n  bucket 8: 80%\nReturning block of 85 for bucket 2\n  bucket 5: 80%\n  bucket 8: 90%\n  bucket 1: 50%\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 6: 80%\n  bucket 8: 100%\n  bucket 5: 90%\n  Sorting block of length 94 for bucket 8\n  bucket 4: 100%\n  (Using difference cover)\n  bucket 1: 60%\n  bucket 5: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 1: 70%\n  bucket 6: 100%\n  bucket 1: 80%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 1: 90%\n  bucket 1: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\nReturning block of 76 for bucket 7\n  bucket 3: 90%\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 9: 50%\n  bucket 10: 20%\n  bucket 9: 60%\n  bucket 10: 30%\n  bucket 9: 70%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 70%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 80%\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 11: 90%\n  bucket 12: 30%\n  bucket 11: 100%\n  bucket 12: 40%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 10%\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 14: 10%\n  bucket 13: 40%\n  bucket 14: 20%\n  bucket 13: 50%\n  bucket 14: 30%\n  bucket 13: 60%\n  bucket 14: 40%\n  bucket 13: 70%\n  bucket 14: 50%\n  bucket 13: 80%\n  bucket 14: 60%\n  bucket 13: 90%\n  bucket 13: 100%\n  bucket 14: 70%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 16\n  Calculating Z arrays for bucket 17\n  bucket 15: 10%\n  bucket 15: 20%\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 30%\n  bucket 16: 10%\n  bucket 15: 40%\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 15: 50%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 15: 60%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 15: 70%\n  bucket 16: 50%\n  bucket 17: 40%\n  bucket 15: 80%\n  bucket 16: 60%\n  bucket 17: 50%\n  bucket 15: 90%\n  bucket 17: 60%\n  bucket 15: 100%\n  bucket 17: 70%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 17: 80%\n  bucket 16: 70%\n  bucket 17: 90%\n  bucket 16: 80%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  bucket 20: 20%\n  Calculating Z arrays for bucket 21\n  bucket 20: 30%\n  bucket 20: 40%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 21: 10%\n  bucket 20: 70%\n  bucket 21: 20%\n  bucket 20: 80%\n  bucket 21: 30%\n  bucket 20: 90%\n  bucket 21: 40%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Calculating Z arrays for bucket 26\n  bucket 25: 10%\n  bucket 25: 20%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 25: 50%\n  bucket 26: 20%\n  bucket 25: 60%\n  bucket 26: 30%\n  bucket 25: 70%\n  bucket 26: 40%\n  bucket 25: 80%\n  bucket 26: 50%\n  bucket 25: 90%\n  bucket 26: 60%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\nGetting block 31 of 60\n  bucket 30: 10%\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 20%\n  bucket 30: 30%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 40%\n  bucket 31: 10%\n  bucket 30: 50%\n  bucket 31: 20%\n  bucket 30: 60%\n  bucket 31: 30%\n  bucket 30: 70%\n  bucket 31: 40%\n  bucket 30: 80%\n  bucket 31: 50%\n  bucket 30: 90%\n  bucket 31: 60%\n  bucket 30: 100%\n  bucket 31: 70%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  bucket 32: 40%\n  Calculating Z arrays for bucket 33\n  bucket 32: 50%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 60%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 10%\n  bucket 32: 70%\n  bucket 33: 20%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 30%\n  bucket 32: 80%\n  bucket 34: 10%\n  bucket 33: 40%\n  bucket 32: 90%\n  bucket 34: 20%\n  bucket 33: 50%\n  bucket 32: 100%\n  bucket 34: 30%\n  bucket 33: 60%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 34: 40%\n  bucket 33: 70%\n  bucket 34: 50%\n  bucket 33: 80%\n  bucket 34: 60%\n  bucket 33: 90%\n  bucket 34: 70%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 20%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  bucket 36: 30%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 40%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 10%\n  bucket 38: 10%\n  bucket 36: 50%\n  bucket 37: 20%\n  bucket 38: 20%\n  bucket 36: 60%\n  bucket 38: 30%\n  bucket 36: 70%\n  bucket 38: 40%\n  bucket 37: 30%\n  bucket 38: 50%\n  bucket 36: 80%\n  bucket 37: 40%\n  bucket 38: 60%\n  bucket 36: 90%\n  bucket 37: 50%\n  bucket 38: 70%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 60%\n  bucket 38: 80%\n  bucket 37: 70%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  bucket 39: 50%\n  Calculating Z arrays for bucket 40\n  bucket 39: 60%\n  bucket 39: 70%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 80%\n  bucket 40: 10%\n  bucket 39: 90%\n  bucket 40: 20%\n  bucket 39: 100%\n  bucket 40: 30%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  bucket 41: 20%\n  bucket 41: 30%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 42: 10%\n  bucket 41: 60%\n  bucket 42: 20%\n  bucket 41: 70%\n  bucket 42: 30%\n  bucket 41: 80%\n  bucket 42: 40%\n  bucket 41: 90%\n  bucket 42: 50%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 80%\n  bucket 46: 10%\n  bucket 45: 90%\n  bucket 46: 20%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Entering block accumulator loop for bucket 47:\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 10%\n  bucket 47: 20%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 30%\nGetting block 49 of 60\n  bucket 47: 40%\n  Reserving size (126) for bucket 49\n  bucket 47: 50%\n  bucket 48: 10%\n  Calculating Z arrays for bucket 49\n  bucket 47: 60%\n  bucket 48: 20%\n  bucket 47: 70%\n  bucket 48: 30%\n  bucket 47: 80%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 40%\n  bucket 47: 90%\n  bucket 48: 50%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 49: 10%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 49: 20%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 49: 30%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 40%\n  bucket 49: 50%\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 10%\n  bucket 50: 20%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 30%\n  bucket 51: 10%\n  bucket 50: 40%\n  bucket 51: 20%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 50: 50%\n  bucket 51: 30%\n  bucket 50: 60%\n  bucket 51: 40%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 50: 80%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 60%\n  bucket 50: 90%\n  bucket 52: 10%\n  bucket 51: 70%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 52: 20%\n  bucket 51: 80%\n  bucket 52: 30%\n  bucket 51: 90%\n  bucket 52: 40%\n  bucket 51: 100%\n  bucket 52: 50%\n  Sorting block of length 91 for bucket 51\n  bucket 52: 60%\n  (Using difference cover)\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  bucket 53: 20%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 30%\n  bucket 54: 10%\n  bucket 53: 40%\n  bucket 54: 20%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 54: 30%\n  bucket 53: 70%\n  bucket 54: 40%\n  bucket 53: 80%\n  bucket 54: 50%\n  bucket 53: 90%\n  bucket 54: 60%\n  bucket 53: 100%\n  bucket 54: 70%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 56:\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 10%\n  bucket 57: 10%\n  bucket 56: 20%\n  bucket 57: 20%\nGetting block 58 of 60\n  bucket 57: 30%\n  bucket 56: 30%\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 40%\n  bucket 56: 40%\n  bucket 57: 50%\n  bucket 56: 50%\n  bucket 57: 60%\n  bucket 56: 60%\n  bucket 57: 70%\n  bucket 56: 70%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 80%\n  bucket 56: 80%\n  bucket 58: 10%\n  bucket 56: 90%\n  bucket 57: 90%\n  bucket 56: 100%\n  bucket 58: 20%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  bucket 59: 40%\n  Calculating Z arrays for bucket 60\n  bucket 59: 50%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 60%\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 59: 70%\n  bucket 60: 30%\n  bucket 59: 80%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 59: 90%\n  bucket 60: 60%\n  bucket 59: 100%\n  bucket 60: 70%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:59:48", "plugin": "core", "name": "end_epoch", "raw_value": "1708671588.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:59:47", "plugin": "core", "name": "start_epoch", "raw_value": "1708671587.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-5", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 5, "time_seconds": 24.422746419906616, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "45fa857252ec1701"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "d4df75928b958a9f"}, "library|type": "single", "adv|output_options|unaligned_file": true, "adv|output_options|output_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "de81500736dbfccb", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:53:19.447670", "create_time": "2024-02-23T06:53:09.888683", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-wgcsm", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/b/9/4/dataset_b9454c07-b1c1-4556-86cf-a7e65841df01.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/4/3/1/dataset_431ef65f-964d-448d-a6c9-ce97f61c4191.dat' input_f.fasta &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f    -U 'input_f.fasta'  --un '/galaxy/server/database/objects/7/9/7/dataset_7979f545-6f0a-470f-be7a-53857809d4ed.dat'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/e/4/e/dataset_e4eef59c-d7e0-4511-a811-8ea7d3c98157.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 1, \"aligned_file\": false, \"output_options_selector\": \"advanced\", \"unaligned_file\": true}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 151, \"src\": \"hda\"}]}, \"rna_strandness\": \"\", \"type\": \"single\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 150, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "45fa857252ec1701", "src": "hda", "uuid": "b9454c07-b1c1-4556-86cf-a7e65841df01"}, "library|input_1": {"id": "d4df75928b958a9f", "src": "hda", "uuid": "431ef65f-964d-448d-a6c9-ce97f61c4191"}}, "outputs": {"output_alignments": {"id": "30ec74c3dbfd8593", "src": "hda", "uuid": "e4eef59c-d7e0-4511-a811-8ea7d3c98157"}, "output_unaligned_reads_l": {"id": "8117845243a9560c", "src": "hda", "uuid": "7979f545-6f0a-470f-be7a-53857809d4ed"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\nGetting block 4 of 60\n  Calculating Z arrays for bucket 3\nGetting block 5 of 60\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 5\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\nGetting block 7 of 60\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 4:\n  Reserving size (126) for bucket 7\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 6: 10%\n  bucket 2: 10%\n  Calculating Z arrays for bucket 7\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 2: 20%\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 20%\n  bucket 3: 40%\n  Calculating Z arrays for bucket 8\n  bucket 5: 30%\n  bucket 7: 10%\n  bucket 1: 20%\n  bucket 5: 40%\n  bucket 1: 30%\n  bucket 4: 30%\n  bucket 3: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 1: 40%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 8: 10%\n  bucket 1: 50%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 4: 40%\n  bucket 7: 40%\n  bucket 1: 60%\n  bucket 8: 20%\n  bucket 5: 80%\n  bucket 7: 50%\n  bucket 4: 50%\n  bucket 2: 30%\n  bucket 5: 90%\n  bucket 6: 50%\n  bucket 3: 60%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 5: 100%\n  bucket 1: 70%\n  bucket 6: 60%\n  bucket 7: 70%\n  bucket 1: 80%\n  Sorting block of length 63 for bucket 5\n  bucket 6: 70%\n  (Using difference cover)\n  bucket 1: 90%\n  bucket 8: 40%\n  bucket 6: 80%\n  bucket 2: 40%\n  bucket 4: 60%\n  bucket 2: 50%\n  bucket 7: 80%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 6: 90%\n  bucket 1: 100%\n  bucket 8: 50%\n  bucket 4: 80%\n  bucket 2: 60%\n  bucket 7: 90%\n  bucket 3: 80%\n  bucket 6: 100%\n  bucket 2: 70%\n  Sorting block of length 42 for bucket 1\n  bucket 7: 100%\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 2: 90%\n  bucket 3: 90%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 2: 100%\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\nReturning block of 64 for bucket 5\n  bucket 8: 60%\n  bucket 4: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  Sorting block time: 00:00:00\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  Sorting block time: 00:00:00\n  bucket 12: 90%\nReturning block of 90 for bucket 10\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 20%\n  bucket 15: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 15: 60%\n  bucket 17: 10%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 17: 20%\n  bucket 16: 70%\n  bucket 15: 80%\n  bucket 17: 30%\n  bucket 16: 80%\n  bucket 15: 90%\n  bucket 17: 40%\n  bucket 16: 90%\n  bucket 15: 100%\n  bucket 17: 50%\n  Sorting block of length 68 for bucket 15\n  bucket 16: 100%\n  (Using difference cover)\n  bucket 17: 60%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 18: 30%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 18: 40%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 18: 50%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 18: 60%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 18: 70%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 18: 80%\n  bucket 19: 90%\n  bucket 20: 70%\n  bucket 18: 90%\n  bucket 19: 100%\n  bucket 20: 80%\n  bucket 18: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 21: 70%\n  bucket 22: 70%\n  bucket 21: 80%\n  bucket 22: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\nGetting block 24 of 60\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  Sorting block time: 00:00:00\n  bucket 24: 20%\nReturning block of 65 for bucket 23\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  bucket 27: 20%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 28: 20%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 28: 30%\n  bucket 27: 90%\n  bucket 27: 100%\n  bucket 28: 40%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Entering block accumulator loop for bucket 29:\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  bucket 29: 20%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 30: 10%\n  bucket 29: 50%\n  bucket 30: 20%\n  bucket 29: 60%\n  bucket 30: 30%\n  bucket 29: 70%\n  bucket 30: 40%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 20%\n  bucket 32: 10%\n  bucket 31: 30%\n  bucket 32: 20%\n  bucket 31: 40%\n  bucket 32: 30%\n  bucket 31: 50%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 31: 60%\n  bucket 32: 60%\n  bucket 31: 70%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 31: 80%\n  bucket 32: 90%\n  bucket 31: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Entering block accumulator loop for bucket 33:\n  Calculating Z arrays for bucket 34\n  bucket 33: 10%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 20%\n  bucket 34: 10%\n  bucket 33: 30%\n  bucket 34: 20%\n  bucket 33: 40%\n  bucket 34: 30%\n  bucket 33: 50%\n  bucket 34: 40%\n  bucket 33: 60%\n  bucket 34: 50%\n  bucket 33: 70%\n  bucket 34: 60%\n  bucket 33: 80%\n  bucket 34: 70%\n  bucket 33: 90%\n  bucket 34: 80%\n  bucket 33: 100%\n  bucket 34: 90%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 35:\n  bucket 36: 10%\n  bucket 35: 10%\n  bucket 36: 20%\n  bucket 35: 20%\n  bucket 36: 30%\n  bucket 35: 30%\n  bucket 36: 40%\n  bucket 35: 40%\n  bucket 36: 50%\n  bucket 35: 50%\n  bucket 36: 60%\n  bucket 35: 60%\n  bucket 36: 70%\n  bucket 35: 70%\n  bucket 36: 80%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 36: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\nReturning block of 60 for bucket 37\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  bucket 39: 50%\n  Calculating Z arrays for bucket 40\n  bucket 39: 60%\n  bucket 39: 70%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 80%\n  bucket 40: 10%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  bucket 41: 60%\n  bucket 41: 70%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 42: 10%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 42: 60%\n  bucket 42: 70%\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 43:\nReturning block of 89 for bucket 41\n  bucket 42: 80%\n  bucket 43: 10%\n  bucket 42: 90%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  Sorting block time: 00:00:00\nGetting block 47 of 60\nReturning block of 80 for bucket 45\n  bucket 46: 30%\n  Reserving size (126) for bucket 47\n  bucket 46: 40%\n  Calculating Z arrays for bucket 47\n  bucket 46: 50%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 10%\n  Entering block accumulator loop for bucket 48:\n  bucket 46: 90%\n  bucket 47: 20%\n  bucket 46: 100%\n  bucket 48: 10%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 30%\n  bucket 48: 20%\n  bucket 47: 40%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 47: 50%\n  bucket 48: 50%\n  bucket 47: 60%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 20%\n  bucket 50: 10%\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  bucket 50: 20%\n  Calculating Z arrays for bucket 51\n  bucket 49: 30%\n  bucket 50: 30%\n  bucket 49: 40%\n  bucket 50: 40%\n  Entering block accumulator loop for bucket 51:\n  bucket 49: 50%\n  bucket 50: 50%\n  bucket 49: 60%\n  bucket 51: 10%\n  bucket 50: 60%\n  bucket 49: 70%\n  bucket 50: 70%\n  bucket 51: 20%\n  bucket 49: 80%\n  bucket 50: 80%\n  bucket 49: 90%\n  bucket 51: 30%\n  bucket 50: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 100%\n  bucket 51: 40%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  bucket 52: 10%\n  Calculating Z arrays for bucket 53\n  bucket 52: 20%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 30%\n  bucket 53: 10%\n  bucket 52: 40%\n  bucket 53: 20%\n  bucket 52: 50%\n  bucket 53: 30%\n  bucket 52: 60%\n  bucket 53: 40%\n  bucket 52: 70%\n  bucket 53: 50%\n  bucket 52: 80%\n  bucket 53: 60%\n  bucket 52: 90%\n  bucket 53: 70%\n  bucket 52: 100%\n  bucket 53: 80%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 80%\n  bucket 57: 10%\n  bucket 56: 90%\n  bucket 57: 20%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\nGetting block 60 of 60\n  bucket 59: 10%\n  Entering block accumulator loop for bucket 58:\n  bucket 59: 20%\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  bucket 58: 10%\n  bucket 59: 30%\n  bucket 58: 20%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 40%\n  bucket 58: 30%\n  bucket 59: 50%\n  bucket 60: 10%\n  bucket 58: 40%\n  bucket 60: 20%\n  bucket 59: 60%\n  bucket 58: 50%\n  bucket 60: 30%\n  bucket 59: 70%\n  bucket 58: 60%\n  bucket 60: 40%\n  bucket 59: 80%\n  bucket 58: 70%\n  bucket 60: 50%\n  bucket 59: 90%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 58: 80%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 58: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were unpaired; of these:\n    3 (100.00%) aligned 0 times\n    0 (0.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were unpaired; of these:\n    3 (100.00%) aligned 0 times\n    0 (0.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\nGetting block 4 of 60\n  Calculating Z arrays for bucket 3\nGetting block 5 of 60\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 5\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\nGetting block 7 of 60\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 4:\n  Reserving size (126) for bucket 7\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  bucket 6: 10%\n  bucket 2: 10%\n  Calculating Z arrays for bucket 7\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 2: 20%\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 20%\n  bucket 3: 40%\n  Calculating Z arrays for bucket 8\n  bucket 5: 30%\n  bucket 7: 10%\n  bucket 1: 20%\n  bucket 5: 40%\n  bucket 1: 30%\n  bucket 4: 30%\n  bucket 3: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 1: 40%\n  bucket 6: 30%\n  bucket 5: 60%\n  bucket 8: 10%\n  bucket 1: 50%\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 5: 70%\n  bucket 4: 40%\n  bucket 7: 40%\n  bucket 1: 60%\n  bucket 8: 20%\n  bucket 5: 80%\n  bucket 7: 50%\n  bucket 4: 50%\n  bucket 2: 30%\n  bucket 5: 90%\n  bucket 6: 50%\n  bucket 3: 60%\n  bucket 7: 60%\n  bucket 8: 30%\n  bucket 5: 100%\n  bucket 1: 70%\n  bucket 6: 60%\n  bucket 7: 70%\n  bucket 1: 80%\n  Sorting block of length 63 for bucket 5\n  bucket 6: 70%\n  (Using difference cover)\n  bucket 1: 90%\n  bucket 8: 40%\n  bucket 6: 80%\n  bucket 2: 40%\n  bucket 4: 60%\n  bucket 2: 50%\n  bucket 7: 80%\n  bucket 3: 70%\n  bucket 4: 70%\n  bucket 6: 90%\n  bucket 1: 100%\n  bucket 8: 50%\n  bucket 4: 80%\n  bucket 2: 60%\n  bucket 7: 90%\n  bucket 3: 80%\n  bucket 6: 100%\n  bucket 2: 70%\n  Sorting block of length 42 for bucket 1\n  bucket 7: 100%\n  bucket 2: 80%\n  bucket 4: 90%\n  bucket 2: 90%\n  bucket 3: 90%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 2: 100%\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\nReturning block of 64 for bucket 5\n  bucket 8: 60%\n  bucket 4: 100%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 10: 60%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  Sorting block time: 00:00:00\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 11: 80%\n  bucket 12: 60%\n  bucket 11: 90%\n  bucket 12: 70%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 80%\n  Sorting block time: 00:00:00\n  bucket 12: 90%\nReturning block of 90 for bucket 10\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 10%\n  bucket 16: 10%\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 20%\n  bucket 15: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 15: 60%\n  bucket 17: 10%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 17: 20%\n  bucket 16: 70%\n  bucket 15: 80%\n  bucket 17: 30%\n  bucket 16: 80%\n  bucket 15: 90%\n  bucket 17: 40%\n  bucket 16: 90%\n  bucket 15: 100%\n  bucket 17: 50%\n  Sorting block of length 68 for bucket 15\n  bucket 16: 100%\n  (Using difference cover)\n  bucket 17: 60%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  bucket 18: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 18: 30%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 18: 40%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 20: 30%\n  bucket 19: 50%\n  bucket 18: 50%\n  bucket 19: 60%\n  bucket 20: 40%\n  bucket 18: 60%\n  bucket 19: 70%\n  bucket 20: 50%\n  bucket 18: 70%\n  bucket 19: 80%\n  bucket 20: 60%\n  bucket 18: 80%\n  bucket 19: 90%\n  bucket 20: 70%\n  bucket 18: 90%\n  bucket 19: 100%\n  bucket 20: 80%\n  bucket 18: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 21: 70%\n  bucket 22: 70%\n  bucket 21: 80%\n  bucket 22: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\nGetting block 24 of 60\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  Sorting block time: 00:00:00\n  bucket 24: 20%\nReturning block of 65 for bucket 23\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  bucket 27: 20%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 28: 20%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 28: 30%\n  bucket 27: 90%\n  bucket 27: 100%\n  bucket 28: 40%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Entering block accumulator loop for bucket 29:\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  bucket 29: 20%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 30: 10%\n  bucket 29: 50%\n  bucket 30: 20%\n  bucket 29: 60%\n  bucket 30: 30%\n  bucket 29: 70%\n  bucket 30: 40%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 20%\n  bucket 32: 10%\n  bucket 31: 30%\n  bucket 32: 20%\n  bucket 31: 40%\n  bucket 32: 30%\n  bucket 31: 50%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 31: 60%\n  bucket 32: 60%\n  bucket 31: 70%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 31: 80%\n  bucket 32: 90%\n  bucket 31: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Entering block accumulator loop for bucket 33:\n  Calculating Z arrays for bucket 34\n  bucket 33: 10%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 20%\n  bucket 34: 10%\n  bucket 33: 30%\n  bucket 34: 20%\n  bucket 33: 40%\n  bucket 34: 30%\n  bucket 33: 50%\n  bucket 34: 40%\n  bucket 33: 60%\n  bucket 34: 50%\n  bucket 33: 70%\n  bucket 34: 60%\n  bucket 33: 80%\n  bucket 34: 70%\n  bucket 33: 90%\n  bucket 34: 80%\n  bucket 33: 100%\n  bucket 34: 90%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 35:\n  bucket 36: 10%\n  bucket 35: 10%\n  bucket 36: 20%\n  bucket 35: 20%\n  bucket 36: 30%\n  bucket 35: 30%\n  bucket 36: 40%\n  bucket 35: 40%\n  bucket 36: 50%\n  bucket 35: 50%\n  bucket 36: 60%\n  bucket 35: 60%\n  bucket 36: 70%\n  bucket 35: 70%\n  bucket 36: 80%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 36: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\nReturning block of 60 for bucket 37\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  bucket 39: 50%\n  Calculating Z arrays for bucket 40\n  bucket 39: 60%\n  bucket 39: 70%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 80%\n  bucket 40: 10%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  bucket 41: 60%\n  bucket 41: 70%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 42: 10%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 42: 60%\n  bucket 42: 70%\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 43:\nReturning block of 89 for bucket 41\n  bucket 42: 80%\n  bucket 43: 10%\n  bucket 42: 90%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  Sorting block time: 00:00:00\nGetting block 47 of 60\nReturning block of 80 for bucket 45\n  bucket 46: 30%\n  Reserving size (126) for bucket 47\n  bucket 46: 40%\n  Calculating Z arrays for bucket 47\n  bucket 46: 50%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  bucket 47: 10%\n  Entering block accumulator loop for bucket 48:\n  bucket 46: 90%\n  bucket 47: 20%\n  bucket 46: 100%\n  bucket 48: 10%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 30%\n  bucket 48: 20%\n  bucket 47: 40%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 47: 50%\n  bucket 48: 50%\n  bucket 47: 60%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 20%\n  bucket 50: 10%\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  bucket 50: 20%\n  Calculating Z arrays for bucket 51\n  bucket 49: 30%\n  bucket 50: 30%\n  bucket 49: 40%\n  bucket 50: 40%\n  Entering block accumulator loop for bucket 51:\n  bucket 49: 50%\n  bucket 50: 50%\n  bucket 49: 60%\n  bucket 51: 10%\n  bucket 50: 60%\n  bucket 49: 70%\n  bucket 50: 70%\n  bucket 51: 20%\n  bucket 49: 80%\n  bucket 50: 80%\n  bucket 49: 90%\n  bucket 51: 30%\n  bucket 50: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 100%\n  bucket 51: 40%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  bucket 52: 10%\n  Calculating Z arrays for bucket 53\n  bucket 52: 20%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 30%\n  bucket 53: 10%\n  bucket 52: 40%\n  bucket 53: 20%\n  bucket 52: 50%\n  bucket 53: 30%\n  bucket 52: 60%\n  bucket 53: 40%\n  bucket 52: 70%\n  bucket 53: 50%\n  bucket 52: 80%\n  bucket 53: 60%\n  bucket 52: 90%\n  bucket 53: 70%\n  bucket 52: 100%\n  bucket 53: 80%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 80%\n  bucket 57: 10%\n  bucket 56: 90%\n  bucket 57: 20%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\nGetting block 60 of 60\n  bucket 59: 10%\n  Entering block accumulator loop for bucket 58:\n  bucket 59: 20%\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  bucket 58: 10%\n  bucket 59: 30%\n  bucket 58: 20%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 40%\n  bucket 58: 30%\n  bucket 59: 50%\n  bucket 60: 10%\n  bucket 58: 40%\n  bucket 60: 20%\n  bucket 59: 60%\n  bucket 58: 50%\n  bucket 60: 30%\n  bucket 59: 70%\n  bucket 58: 60%\n  bucket 60: 40%\n  bucket 59: 80%\n  bucket 58: 70%\n  bucket 60: 50%\n  bucket 59: 90%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 58: 80%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 58: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:53:11", "plugin": "core", "name": "end_epoch", "raw_value": "1708671191.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:53:11", "plugin": "core", "name": "start_epoch", "raw_value": "1708671191.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-5", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 5, "time_seconds": 27.343777179718018, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "90f5ec43df8b4b9f"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "260a04425857cfd9"}, "library|type": "single", "adv|output_options|unaligned_file": true, "adv|output_options|output_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "94bb4b0d65f0a8cb", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:00:24.006974", "create_time": "2024-02-23T07:00:12.421018", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-r2fhz", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/f/e/d/dataset_fedefb25-5fc0-4de5-bc3d-8f20f2e9c12c.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/4/a/0/dataset_4a0340e8-66c2-4ad6-b7a0-f141846d1c7c.dat' input_f.fasta &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f    -U 'input_f.fasta'  --un '/galaxy/server/database/objects/a/0/6/dataset_a06b1587-1aed-4a2a-822c-23ed2d7c6373.dat'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/1/6/e/dataset_16e22708-4ea4-4a6c-8034-546e4f304cec.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 1, \"aligned_file\": false, \"output_options_selector\": \"advanced\", \"unaligned_file\": true}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 214, \"src\": \"hda\"}]}, \"rna_strandness\": \"\", \"type\": \"single\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 213, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "90f5ec43df8b4b9f", "src": "hda", "uuid": "fedefb25-5fc0-4de5-bc3d-8f20f2e9c12c"}, "library|input_1": {"id": "260a04425857cfd9", "src": "hda", "uuid": "4a0340e8-66c2-4ad6-b7a0-f141846d1c7c"}}, "outputs": {"output_alignments": {"id": "023d00ed6736dec8", "src": "hda", "uuid": "16e22708-4ea4-4a6c-8034-546e4f304cec"}, "output_unaligned_reads_l": {"id": "10a81398b701cf0b", "src": "hda", "uuid": "a06b1587-1aed-4a2a-822c-23ed2d7c6373"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 5 of 60\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 2\nGetting block 7 of 60\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 7\nGetting block 4 of 60\nGetting block 8 of 60\nGetting block 6 of 60\n  Calculating Z arrays for bucket 3\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 6\n  bucket 2: 10%\n  Calculating Z arrays for bucket 7\n  bucket 2: 20%\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 5\n  bucket 6: 10%\n  bucket 1: 10%\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 30%\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 4\n  bucket 6: 20%\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 30%\n  bucket 2: 40%\n  bucket 7: 10%\n  bucket 6: 40%\n  bucket 5: 10%\n  bucket 2: 50%\n  bucket 7: 20%\n  bucket 6: 50%\n  bucket 3: 10%\n  bucket 5: 20%\n  bucket 2: 60%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 6: 60%\n  bucket 7: 30%\n  bucket 2: 70%\n  bucket 3: 30%\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 40%\n  bucket 6: 70%\n  bucket 5: 40%\n  bucket 4: 10%\n  bucket 2: 80%\n  bucket 6: 80%\n  bucket 1: 50%\n  bucket 4: 20%\n  bucket 5: 50%\n  bucket 1: 60%\n  bucket 6: 90%\n  bucket 2: 90%\n  bucket 7: 40%\n  bucket 1: 70%\n  bucket 5: 60%\n  bucket 1: 80%\n  bucket 3: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 4: 30%\n  bucket 1: 90%\n  bucket 5: 70%\n  bucket 3: 50%\n  bucket 2: 100%\n  bucket 7: 50%\n  Sorting block of length 84 for bucket 2\n  bucket 5: 80%\n  bucket 6: 100%\n  (Using difference cover)\n  bucket 7: 60%\n  bucket 1: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 4: 40%\n  bucket 8: 10%\n  bucket 5: 100%\n  bucket 7: 70%\n  bucket 4: 50%\n  bucket 3: 60%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 8: 20%\n  bucket 7: 80%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 8: 30%\n  bucket 4: 80%\n  bucket 7: 90%\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 8: 40%\n  bucket 7: 100%\n  bucket 3: 90%\n  Sorting block of length 75 for bucket 7\n  bucket 8: 50%\n  bucket 3: 100%\n  bucket 8: 60%\n  Sorting block of length 106 for bucket 3\n  bucket 4: 100%\n  (Using difference cover)\n  (Using difference cover)\n  bucket 8: 70%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 9\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 11: 10%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 11: 20%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 11: 30%\n  bucket 9: 90%\n  bucket 11: 40%\n  bucket 10: 70%\n  bucket 11: 50%\n  bucket 10: 80%\n  bucket 11: 60%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 30%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 12: 40%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 50%\n  bucket 13: 10%\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 10%\n  bucket 13: 50%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 12: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 13: 90%\n  bucket 12: 70%\n  bucket 14: 50%\n  bucket 12: 80%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 12: 90%\n  bucket 14: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  bucket 15: 40%\n  Calculating Z arrays for bucket 16\n  bucket 15: 50%\n  bucket 15: 60%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 70%\n  bucket 16: 10%\n  bucket 15: 80%\n  bucket 16: 20%\n  bucket 15: 90%\n  bucket 16: 30%\n  bucket 15: 100%\n  bucket 16: 40%\n  Sorting block of length 68 for bucket 15\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 18: 20%\nGetting block 19 of 60\n  bucket 17: 40%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Reserving size (126) for bucket 19\n  bucket 17: 50%\n  Calculating Z arrays for bucket 19\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  Entering block accumulator loop for bucket 19:\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 19: 10%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 19: 20%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 19: 30%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 40%\n  bucket 20: 10%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 19: 60%\n  bucket 20: 20%\n  bucket 19: 70%\n  bucket 18: 90%\n  bucket 19: 80%\n  bucket 20: 30%\n  bucket 19: 90%\n  bucket 20: 40%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 20: 50%\nReturning block of 40 for bucket 17\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 21\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 21: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 21: 40%\n  bucket 22: 70%\n  bucket 21: 50%\n  bucket 22: 80%\n  bucket 21: 60%\n  bucket 22: 90%\n  bucket 21: 70%\n  bucket 22: 100%\n  bucket 21: 80%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Entering block accumulator loop for bucket 23:\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 30%\n  bucket 24: 10%\n  bucket 23: 40%\n  bucket 24: 20%\n  bucket 23: 50%\n  bucket 24: 30%\n  bucket 23: 60%\n  bucket 24: 40%\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 23: 90%\n  bucket 24: 70%\n  bucket 23: 100%\n  bucket 24: 80%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 30%\n  bucket 26: 80%\n  bucket 27: 40%\n  bucket 26: 90%\n  bucket 27: 50%\n  bucket 26: 100%\n  bucket 27: 60%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 50%\n  bucket 28: 60%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 70%\n  bucket 29: 10%\n  bucket 28: 80%\n  bucket 29: 20%\n  bucket 28: 90%\n  bucket 29: 30%\n  bucket 28: 100%\n  bucket 29: 40%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 80%\n  bucket 29: 90%\n  Entering block accumulator loop for bucket 30:\n  Sorting block time: 00:00:00\n  bucket 29: 100%\nReturning block of 107 for bucket 28\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 10%\n  bucket 31: 20%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 30%\n  bucket 32: 10%\n  bucket 31: 40%\n  bucket 32: 20%\n  bucket 31: 50%\n  bucket 32: 30%\n  bucket 31: 60%\n  bucket 32: 40%\n  bucket 31: 70%\n  bucket 32: 50%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  bucket 32: 60%\n  bucket 31: 80%\n  Calculating Z arrays for bucket 33\n  bucket 32: 70%\n  bucket 31: 90%\n  bucket 32: 80%\n  bucket 31: 100%\n  Entering block accumulator loop for bucket 33:\n  Sorting block of length 110 for bucket 31\n  bucket 32: 90%\n  (Using difference cover)\n  bucket 33: 10%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  bucket 34: 30%\n  Calculating Z arrays for bucket 35\n  bucket 34: 40%\n  bucket 34: 50%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 35: 10%\n  bucket 34: 80%\n  bucket 35: 20%\n  bucket 34: 90%\n  bucket 35: 30%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 37:\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Entering block accumulator loop for bucket 36:\n  bucket 37: 10%\n  Calculating Z arrays for bucket 38\n  bucket 37: 20%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 38: 10%\n  bucket 37: 50%\n  bucket 38: 20%\n  bucket 37: 60%\n  bucket 38: 30%\n  bucket 37: 70%\n  bucket 36: 10%\n  bucket 37: 80%\n  bucket 38: 40%\n  bucket 37: 90%\n  bucket 36: 20%\n  bucket 38: 50%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 60%\n  bucket 36: 30%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 36: 40%\n  bucket 38: 90%\n  bucket 38: 100%\n  bucket 36: 50%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 30%\n  bucket 40: 40%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 50%\n  bucket 41: 10%\n  bucket 40: 60%\n  bucket 41: 20%\n  bucket 40: 70%\n  bucket 41: 30%\n  bucket 40: 80%\n  bucket 41: 40%\n  bucket 40: 90%\n  bucket 41: 50%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 10%\n  bucket 43: 10%\n  bucket 42: 20%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 42: 30%\n  bucket 43: 40%\n  bucket 42: 40%\n  bucket 43: 50%\n  bucket 42: 50%\n  bucket 43: 60%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 43: 70%\n  bucket 42: 80%\n  bucket 43: 80%\n  bucket 42: 90%\n  bucket 43: 90%\n  bucket 42: 100%\n  bucket 43: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 30%\n  bucket 45: 40%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 46: 10%\n  bucket 45: 70%\n  bucket 46: 20%\n  bucket 45: 80%\n  bucket 46: 30%\n  bucket 45: 90%\n  bucket 46: 40%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 50%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Calculating Z arrays for bucket 49\n  bucket 48: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 20%\n  bucket 49: 10%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 49: 20%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 49: 30%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 49: 40%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 10%\n  bucket 50: 20%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 30%\n  bucket 51: 10%\n  bucket 50: 40%\n  bucket 51: 20%\n  bucket 50: 50%\n  bucket 51: 30%\n  bucket 50: 60%\n  bucket 51: 40%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 50: 80%\n  bucket 51: 60%\n  bucket 50: 90%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 10%\n  bucket 53: 10%\n  bucket 52: 20%\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  bucket 53: 20%\n  bucket 52: 30%\n  bucket 53: 30%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 40%\n  bucket 52: 40%\n  bucket 54: 10%\n  bucket 53: 50%\n  bucket 54: 20%\n  bucket 53: 60%\n  bucket 52: 50%\n  bucket 54: 30%\n  bucket 53: 70%\n  bucket 54: 40%\n  bucket 53: 80%\n  bucket 52: 60%\n  bucket 54: 50%\n  bucket 53: 90%\n  bucket 52: 70%\n  bucket 53: 100%\n  bucket 54: 60%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 70%\n  bucket 52: 80%\n  bucket 54: 80%\n  bucket 52: 90%\n  bucket 54: 90%\n  bucket 52: 100%\n  bucket 54: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Calculating Z arrays for bucket 56\n  bucket 55: 10%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 20%\n  bucket 56: 10%\n  bucket 55: 30%\n  bucket 56: 20%\n  bucket 55: 40%\n  bucket 56: 30%\n  bucket 55: 50%\n  bucket 56: 40%\n  bucket 55: 60%\n  bucket 56: 50%\n  bucket 55: 70%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  bucket 56: 60%\n  bucket 55: 80%\n  Calculating Z arrays for bucket 57\n  bucket 56: 70%\n  bucket 55: 90%\n  bucket 56: 80%\n  bucket 55: 100%\n  Entering block accumulator loop for bucket 57:\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 90%\n  bucket 57: 10%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 58:\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 10%\n  bucket 59: 10%\n  bucket 58: 20%\n  bucket 59: 20%\n  bucket 58: 30%\n  bucket 59: 30%\n  bucket 58: 40%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 58: 50%\n  bucket 59: 60%\n  bucket 58: 60%\n  bucket 59: 70%\n  bucket 58: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 58: 80%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were unpaired; of these:\n    3 (100.00%) aligned 0 times\n    0 (0.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were unpaired; of these:\n    3 (100.00%) aligned 0 times\n    0 (0.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 5 of 60\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 2\nGetting block 7 of 60\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 7\nGetting block 4 of 60\nGetting block 8 of 60\nGetting block 6 of 60\n  Calculating Z arrays for bucket 3\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 6\n  bucket 2: 10%\n  Calculating Z arrays for bucket 7\n  bucket 2: 20%\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 5\n  bucket 6: 10%\n  bucket 1: 10%\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 8\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 30%\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 4\n  bucket 6: 20%\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 30%\n  bucket 2: 40%\n  bucket 7: 10%\n  bucket 6: 40%\n  bucket 5: 10%\n  bucket 2: 50%\n  bucket 7: 20%\n  bucket 6: 50%\n  bucket 3: 10%\n  bucket 5: 20%\n  bucket 2: 60%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 6: 60%\n  bucket 7: 30%\n  bucket 2: 70%\n  bucket 3: 30%\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 40%\n  bucket 6: 70%\n  bucket 5: 40%\n  bucket 4: 10%\n  bucket 2: 80%\n  bucket 6: 80%\n  bucket 1: 50%\n  bucket 4: 20%\n  bucket 5: 50%\n  bucket 1: 60%\n  bucket 6: 90%\n  bucket 2: 90%\n  bucket 7: 40%\n  bucket 1: 70%\n  bucket 5: 60%\n  bucket 1: 80%\n  bucket 3: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 4: 30%\n  bucket 1: 90%\n  bucket 5: 70%\n  bucket 3: 50%\n  bucket 2: 100%\n  bucket 7: 50%\n  Sorting block of length 84 for bucket 2\n  bucket 5: 80%\n  bucket 6: 100%\n  (Using difference cover)\n  bucket 7: 60%\n  bucket 1: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 4: 40%\n  bucket 8: 10%\n  bucket 5: 100%\n  bucket 7: 70%\n  bucket 4: 50%\n  bucket 3: 60%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 8: 20%\n  bucket 7: 80%\n  bucket 4: 70%\n  bucket 3: 70%\n  bucket 8: 30%\n  bucket 4: 80%\n  bucket 7: 90%\n  bucket 3: 80%\n  bucket 4: 90%\n  bucket 8: 40%\n  bucket 7: 100%\n  bucket 3: 90%\n  Sorting block of length 75 for bucket 7\n  bucket 8: 50%\n  bucket 3: 100%\n  bucket 8: 60%\n  Sorting block of length 106 for bucket 3\n  bucket 4: 100%\n  (Using difference cover)\n  (Using difference cover)\n  bucket 8: 70%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 9\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 11: 10%\n  bucket 9: 40%\n  bucket 10: 30%\n  bucket 9: 50%\n  bucket 10: 40%\n  bucket 9: 60%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 11: 20%\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 11: 30%\n  bucket 9: 90%\n  bucket 11: 40%\n  bucket 10: 70%\n  bucket 11: 50%\n  bucket 10: 80%\n  bucket 11: 60%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 30%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 12: 40%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 50%\n  bucket 13: 10%\n  bucket 13: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 14: 10%\n  bucket 13: 50%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 12: 60%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 40%\n  bucket 13: 90%\n  bucket 12: 70%\n  bucket 14: 50%\n  bucket 12: 80%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 12: 90%\n  bucket 14: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  bucket 15: 40%\n  Calculating Z arrays for bucket 16\n  bucket 15: 50%\n  bucket 15: 60%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 70%\n  bucket 16: 10%\n  bucket 15: 80%\n  bucket 16: 20%\n  bucket 15: 90%\n  bucket 16: 30%\n  bucket 15: 100%\n  bucket 16: 40%\n  Sorting block of length 68 for bucket 15\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 18: 10%\n  bucket 17: 30%\n  bucket 18: 20%\nGetting block 19 of 60\n  bucket 17: 40%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Reserving size (126) for bucket 19\n  bucket 17: 50%\n  Calculating Z arrays for bucket 19\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  Entering block accumulator loop for bucket 19:\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 19: 10%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 19: 20%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 19: 30%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 40%\n  bucket 20: 10%\n  bucket 19: 50%\n  bucket 18: 80%\n  bucket 19: 60%\n  bucket 20: 20%\n  bucket 19: 70%\n  bucket 18: 90%\n  bucket 19: 80%\n  bucket 20: 30%\n  bucket 19: 90%\n  bucket 20: 40%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 20: 50%\nReturning block of 40 for bucket 17\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 21\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 21: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 21: 40%\n  bucket 22: 70%\n  bucket 21: 50%\n  bucket 22: 80%\n  bucket 21: 60%\n  bucket 22: 90%\n  bucket 21: 70%\n  bucket 22: 100%\n  bucket 21: 80%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Entering block accumulator loop for bucket 23:\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 30%\n  bucket 24: 10%\n  bucket 23: 40%\n  bucket 24: 20%\n  bucket 23: 50%\n  bucket 24: 30%\n  bucket 23: 60%\n  bucket 24: 40%\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 23: 90%\n  bucket 24: 70%\n  bucket 23: 100%\n  bucket 24: 80%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  bucket 26: 20%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 27: 30%\n  bucket 26: 80%\n  bucket 27: 40%\n  bucket 26: 90%\n  bucket 27: 50%\n  bucket 26: 100%\n  bucket 27: 60%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 50%\n  bucket 28: 60%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 70%\n  bucket 29: 10%\n  bucket 28: 80%\n  bucket 29: 20%\n  bucket 28: 90%\n  bucket 29: 30%\n  bucket 28: 100%\n  bucket 29: 40%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 80%\n  bucket 29: 90%\n  Entering block accumulator loop for bucket 30:\n  Sorting block time: 00:00:00\n  bucket 29: 100%\nReturning block of 107 for bucket 28\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 10%\n  bucket 31: 20%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 30%\n  bucket 32: 10%\n  bucket 31: 40%\n  bucket 32: 20%\n  bucket 31: 50%\n  bucket 32: 30%\n  bucket 31: 60%\n  bucket 32: 40%\n  bucket 31: 70%\n  bucket 32: 50%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  bucket 32: 60%\n  bucket 31: 80%\n  Calculating Z arrays for bucket 33\n  bucket 32: 70%\n  bucket 31: 90%\n  bucket 32: 80%\n  bucket 31: 100%\n  Entering block accumulator loop for bucket 33:\n  Sorting block of length 110 for bucket 31\n  bucket 32: 90%\n  (Using difference cover)\n  bucket 33: 10%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  bucket 34: 30%\n  Calculating Z arrays for bucket 35\n  bucket 34: 40%\n  bucket 34: 50%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 35: 10%\n  bucket 34: 80%\n  bucket 35: 20%\n  bucket 34: 90%\n  bucket 35: 30%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 37:\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Entering block accumulator loop for bucket 36:\n  bucket 37: 10%\n  Calculating Z arrays for bucket 38\n  bucket 37: 20%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 38: 10%\n  bucket 37: 50%\n  bucket 38: 20%\n  bucket 37: 60%\n  bucket 38: 30%\n  bucket 37: 70%\n  bucket 36: 10%\n  bucket 37: 80%\n  bucket 38: 40%\n  bucket 37: 90%\n  bucket 36: 20%\n  bucket 38: 50%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 60%\n  bucket 36: 30%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 36: 40%\n  bucket 38: 90%\n  bucket 38: 100%\n  bucket 36: 50%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 30%\n  bucket 40: 40%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 50%\n  bucket 41: 10%\n  bucket 40: 60%\n  bucket 41: 20%\n  bucket 40: 70%\n  bucket 41: 30%\n  bucket 40: 80%\n  bucket 41: 40%\n  bucket 40: 90%\n  bucket 41: 50%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 10%\n  bucket 43: 10%\n  bucket 42: 20%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 42: 30%\n  bucket 43: 40%\n  bucket 42: 40%\n  bucket 43: 50%\n  bucket 42: 50%\n  bucket 43: 60%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 43: 70%\n  bucket 42: 80%\n  bucket 43: 80%\n  bucket 42: 90%\n  bucket 43: 90%\n  bucket 42: 100%\n  bucket 43: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 30%\n  bucket 45: 40%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 46: 10%\n  bucket 45: 70%\n  bucket 46: 20%\n  bucket 45: 80%\n  bucket 46: 30%\n  bucket 45: 90%\n  bucket 46: 40%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 50%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Calculating Z arrays for bucket 49\n  bucket 48: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 20%\n  bucket 49: 10%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 49: 20%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 49: 30%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 49: 40%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 10%\n  bucket 50: 20%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 30%\n  bucket 51: 10%\n  bucket 50: 40%\n  bucket 51: 20%\n  bucket 50: 50%\n  bucket 51: 30%\n  bucket 50: 60%\n  bucket 51: 40%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 50: 80%\n  bucket 51: 60%\n  bucket 50: 90%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 10%\n  bucket 53: 10%\n  bucket 52: 20%\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  bucket 53: 20%\n  bucket 52: 30%\n  bucket 53: 30%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 40%\n  bucket 52: 40%\n  bucket 54: 10%\n  bucket 53: 50%\n  bucket 54: 20%\n  bucket 53: 60%\n  bucket 52: 50%\n  bucket 54: 30%\n  bucket 53: 70%\n  bucket 54: 40%\n  bucket 53: 80%\n  bucket 52: 60%\n  bucket 54: 50%\n  bucket 53: 90%\n  bucket 52: 70%\n  bucket 53: 100%\n  bucket 54: 60%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 70%\n  bucket 52: 80%\n  bucket 54: 80%\n  bucket 52: 90%\n  bucket 54: 90%\n  bucket 52: 100%\n  bucket 54: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Calculating Z arrays for bucket 56\n  bucket 55: 10%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 20%\n  bucket 56: 10%\n  bucket 55: 30%\n  bucket 56: 20%\n  bucket 55: 40%\n  bucket 56: 30%\n  bucket 55: 50%\n  bucket 56: 40%\n  bucket 55: 60%\n  bucket 56: 50%\n  bucket 55: 70%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  bucket 56: 60%\n  bucket 55: 80%\n  Calculating Z arrays for bucket 57\n  bucket 56: 70%\n  bucket 55: 90%\n  bucket 56: 80%\n  bucket 55: 100%\n  Entering block accumulator loop for bucket 57:\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 90%\n  bucket 57: 10%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 58:\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 10%\n  bucket 59: 10%\n  bucket 58: 20%\n  bucket 59: 20%\n  bucket 58: 30%\n  bucket 59: 30%\n  bucket 58: 40%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 58: 50%\n  bucket 59: 60%\n  bucket 58: 60%\n  bucket 59: 70%\n  bucket 58: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 58: 80%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:00:14", "plugin": "core", "name": "end_epoch", "raw_value": "1708671614.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:00:14", "plugin": "core", "name": "start_epoch", "raw_value": "1708671614.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-6", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 6, "time_seconds": 27.221312999725342, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "516a3a738488155d"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "79dd04dee1bf7378"}, "library|input_2": {"src": "hda", "id": "79dd04dee1bf7378"}, "library|type": "paired", "adv|output_options|unaligned_file": true, "adv|output_options|aligned_file": true, "adv|output_options|output_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "c82fb440ac0ce498", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:53:46.242828", "create_time": "2024-02-23T06:53:35.730672", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-6k8j4", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/7/7/b/dataset_77bac506-6d19-4be4-b604-ce652084365f.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/f/0/7/dataset_f075fcd9-b9d5-49f0-a59d-184e8c45186e.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/f/0/7/dataset_f075fcd9-b9d5-49f0-a59d-184e8c45186e.dat' input_r.fasta &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f   -1 'input_f.fasta' -2 'input_r.fasta' --un-conc '/galaxy/server/database/objects/8/3/1/dataset_83138635-db12-4ab9-9222-9e40c6112a11.dat'  --al-conc '/galaxy/server/database/objects/7/2/e/dataset_72e60153-aba0-4004-a965-aab63c45f30d.dat'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/a/9/7/dataset_a9782c1e-3019-443f-a627-c61705c2e025.dat'   && mv '/galaxy/server/database/objects/8/3/1/dataset_83138635-db12-4ab9-9222-9e40c6112a11.1.dat' '/galaxy/server/database/objects/8/3/1/dataset_83138635-db12-4ab9-9222-9e40c6112a11.dat' && mv '/galaxy/server/database/objects/8/3/1/dataset_83138635-db12-4ab9-9222-9e40c6112a11.2.dat' '/galaxy/server/database/objects/e/5/9/dataset_e592fe59-6d5e-4002-8860-cb510468533d.dat' && mv '/galaxy/server/database/objects/7/2/e/dataset_72e60153-aba0-4004-a965-aab63c45f30d.1.dat' '/galaxy/server/database/objects/7/2/e/dataset_72e60153-aba0-4004-a965-aab63c45f30d.dat' && mv '/galaxy/server/database/objects/7/2/e/dataset_72e60153-aba0-4004-a965-aab63c45f30d.2.dat' '/galaxy/server/database/objects/0/f/2/dataset_0f2ad7af-c214-4cd4-b3ec-aabefae6bafc.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 1, \"aligned_file\": true, \"output_options_selector\": \"advanced\", \"unaligned_file\": true}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 155, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 155, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 154, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "516a3a738488155d", "src": "hda", "uuid": "77bac506-6d19-4be4-b604-ce652084365f"}, "library|input_1": {"id": "79dd04dee1bf7378", "src": "hda", "uuid": "f075fcd9-b9d5-49f0-a59d-184e8c45186e"}, "library|input_2": {"id": "79dd04dee1bf7378", "src": "hda", "uuid": "f075fcd9-b9d5-49f0-a59d-184e8c45186e"}}, "outputs": {"output_alignments": {"id": "1182b0b2da36bf96", "src": "hda", "uuid": "a9782c1e-3019-443f-a627-c61705c2e025"}, "output_unaligned_reads_l": {"id": "c654671a5425687c", "src": "hda", "uuid": "83138635-db12-4ab9-9222-9e40c6112a11"}, "output_aligned_reads_l": {"id": "8c41d0964472153e", "src": "hda", "uuid": "72e60153-aba0-4004-a965-aab63c45f30d"}, "output_unaligned_reads_r": {"id": "ab24f06f4678f245", "src": "hda", "uuid": "e592fe59-6d5e-4002-8860-cb510468533d"}, "output_aligned_reads_r": {"id": "9d421e925f2d4d29", "src": "hda", "uuid": "0f2ad7af-c214-4cd4-b3ec-aabefae6bafc"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Reserving size (126) for bucket 3\nGetting block 4 of 60\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 4\n  bucket 1: 20%\nGetting block 6 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 3:\n  Reserving size (126) for bucket 6\n  bucket 1: 30%\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 6\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 10%\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 10%\n  bucket 1: 50%\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 7\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 1: 60%\n  bucket 2: 40%\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 3: 30%\n  bucket 5: 10%\n  bucket 1: 70%\n  bucket 4: 10%\n  bucket 5: 20%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 1: 80%\n  bucket 6: 10%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 8: 20%\n  bucket 5: 30%\n  bucket 1: 90%\n  bucket 7: 20%\n  bucket 5: 40%\n  bucket 3: 60%\n  bucket 6: 20%\n  bucket 4: 20%\n  bucket 7: 30%\n  bucket 5: 50%\n  bucket 8: 30%\n  bucket 2: 70%\n  bucket 1: 100%\n  bucket 4: 30%\n  bucket 7: 40%\n  bucket 5: 60%\n  bucket 8: 40%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 6: 30%\n  bucket 4: 40%\n  bucket 8: 50%\n  bucket 6: 40%\n  bucket 2: 90%\n  bucket 5: 70%\n  bucket 7: 50%\n  bucket 3: 80%\n  bucket 4: 50%\n  Sorting block of length 42 for bucket 1\n  bucket 8: 60%\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 5: 80%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 6: 50%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 5: 90%\n  bucket 4: 70%\n  bucket 7: 70%\n  bucket 6: 60%\n  bucket 8: 80%\n  bucket 5: 100%\n  bucket 3: 100%\n  bucket 4: 80%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 8: 90%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 6: 70%\n  bucket 8: 100%\n  bucket 7: 90%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 6: 80%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 7: 100%\n  bucket 6: 90%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 12:\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 9: 50%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 10: 20%\n  bucket 9: 60%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 10: 30%\n  bucket 9: 70%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 10: 60%\n  bucket 9: 100%\n  bucket 12: 60%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 12: 70%\n  bucket 10: 80%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 10: 90%\n  bucket 11: 80%\n  bucket 12: 90%\n  bucket 10: 100%\n  bucket 11: 90%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 14: 10%\n  bucket 13: 80%\n  bucket 14: 20%\n  bucket 13: 90%\n  bucket 14: 30%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 60\n  Entering block accumulator loop for bucket 15:\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 10%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 20%\n  bucket 16: 10%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 16: 20%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 15: 70%\n  bucket 16: 50%\n  bucket 15: 80%\n  bucket 16: 60%\n  bucket 15: 90%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  bucket 19: 30%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 40%\n  bucket 20: 10%\n  bucket 19: 50%\n  bucket 20: 20%\n  bucket 19: 60%\n  bucket 20: 30%\n  bucket 19: 70%\n  bucket 20: 40%\n  bucket 19: 80%\n  bucket 20: 50%\n  bucket 19: 90%\n  bucket 20: 60%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 21: 70%\n  bucket 22: 70%\n  bucket 21: 80%\n  bucket 22: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 22: 100%\n  bucket 21: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 60\n  Entering block accumulator loop for bucket 24:\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 30%\n  bucket 23: 30%\n  bucket 24: 40%\n  bucket 25: 10%\n  bucket 24: 50%\n  bucket 23: 40%\n  bucket 25: 20%\n  bucket 24: 60%\n  bucket 23: 50%\n  bucket 25: 30%\n  bucket 24: 70%\n  bucket 25: 40%\n  bucket 23: 60%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 23: 70%\n  bucket 25: 50%\n  bucket 24: 100%\n  bucket 23: 80%\n  Sorting block of length 68 for bucket 24\n  bucket 25: 60%\n  bucket 23: 90%\n  (Using difference cover)\n  bucket 25: 70%\n  bucket 23: 100%\n  bucket 25: 80%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 29: 10%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  Sorting block time: 00:00:00\n  bucket 29: 50%\nReturning block of 107 for bucket 28\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 10%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 20%\n  bucket 32: 10%\n  bucket 31: 30%\n  bucket 32: 20%\n  bucket 31: 40%\n  bucket 32: 30%\n  bucket 31: 50%\n  bucket 32: 40%\n  bucket 31: 60%\n  bucket 32: 50%\n  bucket 31: 70%\n  bucket 32: 60%\n  bucket 31: 80%\n  bucket 32: 70%\n  bucket 31: 90%\n  bucket 32: 80%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 30%\n  bucket 33: 40%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 34: 10%\n  bucket 33: 70%\n  bucket 34: 20%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 34: 30%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 40%\n  bucket 34: 50%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 60%\n  bucket 34: 70%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 80%\n  bucket 35: 10%\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  bucket 34: 90%\n  bucket 35: 20%\n  bucket 34: 100%\n  bucket 35: 30%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 10%\n  bucket 37: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 37: 20%\n  bucket 36: 50%\n  bucket 37: 30%\n  bucket 36: 60%\n  bucket 37: 40%\n  bucket 36: 70%\n  bucket 37: 50%\n  bucket 36: 80%\n  bucket 37: 60%\n  bucket 36: 90%\n  bucket 37: 70%\n  bucket 36: 100%\n  bucket 37: 80%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 10%\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 38: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 38: 30%\n  bucket 39: 50%\n  bucket 38: 40%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 38: 50%\n  bucket 39: 80%\n  bucket 38: 60%\n  bucket 39: 90%\n  bucket 38: 70%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 41: 10%\n  bucket 40: 70%\n  bucket 41: 20%\n  bucket 40: 80%\n  bucket 41: 30%\n  bucket 40: 90%\n  bucket 40: 100%\n  bucket 41: 40%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 42:\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  bucket 42: 10%\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 20%\n  bucket 43: 10%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 20%\n  bucket 42: 30%\n  bucket 44: 10%\n  bucket 43: 30%\n  bucket 44: 20%\n  bucket 42: 40%\n  bucket 43: 40%\n  bucket 44: 30%\n  bucket 43: 50%\n  bucket 42: 50%\n  bucket 43: 60%\n  bucket 44: 40%\n  bucket 43: 70%\n  bucket 44: 50%\n  bucket 42: 60%\n  bucket 43: 80%\n  bucket 44: 60%\n  bucket 43: 90%\n  bucket 44: 70%\n  bucket 42: 70%\n  bucket 44: 80%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  bucket 42: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 48\nReturning block of 84 for bucket 47\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Entering block accumulator loop for bucket 50:\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 40%\n  bucket 51: 10%\n  bucket 50: 50%\n  bucket 51: 20%\n  bucket 50: 60%\n  bucket 51: 30%\n  bucket 50: 70%\n  bucket 51: 40%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 51: 50%\n  bucket 50: 100%\n  bucket 51: 60%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  Sorting block time: 00:00:00\n  bucket 53: 10%\nReturning block of 107 for bucket 52\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 56:\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 56: 10%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 56: 20%\n  bucket 57: 80%\n  bucket 56: 30%\n  bucket 57: 90%\n  bucket 56: 40%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  bucket 58: 40%\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 50%\n  bucket 59: 10%\n  bucket 58: 60%\n  bucket 59: 20%\n  bucket 58: 70%\n  bucket 59: 30%\n  bucket 58: 80%\n  bucket 59: 40%\n  bucket 58: 90%\n  bucket 59: 50%\n  bucket 58: 100%\n  bucket 59: 60%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    3 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        6 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    3 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        6 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Calculating Z arrays for bucket 2\n  bucket 1: 10%\n  Reserving size (126) for bucket 3\nGetting block 4 of 60\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 4\n  bucket 1: 20%\nGetting block 6 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 3:\n  Reserving size (126) for bucket 6\n  bucket 1: 30%\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 6\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 10%\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 10%\n  bucket 1: 50%\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 7\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  bucket 1: 60%\n  bucket 2: 40%\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 8:\n  bucket 3: 30%\n  bucket 5: 10%\n  bucket 1: 70%\n  bucket 4: 10%\n  bucket 5: 20%\n  bucket 3: 40%\n  bucket 2: 50%\n  bucket 8: 10%\n  bucket 7: 10%\n  bucket 1: 80%\n  bucket 6: 10%\n  bucket 3: 50%\n  bucket 2: 60%\n  bucket 8: 20%\n  bucket 5: 30%\n  bucket 1: 90%\n  bucket 7: 20%\n  bucket 5: 40%\n  bucket 3: 60%\n  bucket 6: 20%\n  bucket 4: 20%\n  bucket 7: 30%\n  bucket 5: 50%\n  bucket 8: 30%\n  bucket 2: 70%\n  bucket 1: 100%\n  bucket 4: 30%\n  bucket 7: 40%\n  bucket 5: 60%\n  bucket 8: 40%\n  bucket 3: 70%\n  bucket 2: 80%\n  bucket 6: 30%\n  bucket 4: 40%\n  bucket 8: 50%\n  bucket 6: 40%\n  bucket 2: 90%\n  bucket 5: 70%\n  bucket 7: 50%\n  bucket 3: 80%\n  bucket 4: 50%\n  Sorting block of length 42 for bucket 1\n  bucket 8: 60%\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 5: 80%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 6: 50%\n  bucket 4: 60%\n  bucket 3: 90%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 5: 90%\n  bucket 4: 70%\n  bucket 7: 70%\n  bucket 6: 60%\n  bucket 8: 80%\n  bucket 5: 100%\n  bucket 3: 100%\n  bucket 4: 80%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 8: 90%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 6: 70%\n  bucket 8: 100%\n  bucket 7: 90%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 6: 80%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 7: 100%\n  bucket 6: 90%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 12:\n  bucket 10: 10%\n  bucket 11: 10%\n  bucket 9: 50%\n  bucket 12: 10%\n  bucket 11: 20%\n  bucket 10: 20%\n  bucket 9: 60%\n  bucket 12: 20%\n  bucket 11: 30%\n  bucket 10: 30%\n  bucket 9: 70%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 10: 40%\n  bucket 9: 80%\n  bucket 12: 40%\n  bucket 11: 50%\n  bucket 10: 50%\n  bucket 9: 90%\n  bucket 12: 50%\n  bucket 11: 60%\n  bucket 10: 60%\n  bucket 9: 100%\n  bucket 12: 60%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 70%\n  bucket 12: 70%\n  bucket 10: 80%\n  bucket 11: 70%\n  bucket 12: 80%\n  bucket 10: 90%\n  bucket 11: 80%\n  bucket 12: 90%\n  bucket 10: 100%\n  bucket 11: 90%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 14: 10%\n  bucket 13: 80%\n  bucket 14: 20%\n  bucket 13: 90%\n  bucket 14: 30%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 60\n  Entering block accumulator loop for bucket 15:\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  bucket 15: 10%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 20%\n  bucket 16: 10%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 16: 20%\n  bucket 15: 60%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 15: 70%\n  bucket 16: 50%\n  bucket 15: 80%\n  bucket 16: 60%\n  bucket 15: 90%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 20%\n  bucket 19: 30%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 40%\n  bucket 20: 10%\n  bucket 19: 50%\n  bucket 20: 20%\n  bucket 19: 60%\n  bucket 20: 30%\n  bucket 19: 70%\n  bucket 20: 40%\n  bucket 19: 80%\n  bucket 20: 50%\n  bucket 19: 90%\n  bucket 20: 60%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 22: 10%\n  bucket 21: 30%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 21: 70%\n  bucket 22: 70%\n  bucket 21: 80%\n  bucket 22: 80%\n  bucket 21: 90%\n  bucket 22: 90%\n  bucket 22: 100%\n  bucket 21: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 60\n  Entering block accumulator loop for bucket 24:\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 23: 10%\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 23: 20%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 30%\n  bucket 23: 30%\n  bucket 24: 40%\n  bucket 25: 10%\n  bucket 24: 50%\n  bucket 23: 40%\n  bucket 25: 20%\n  bucket 24: 60%\n  bucket 23: 50%\n  bucket 25: 30%\n  bucket 24: 70%\n  bucket 25: 40%\n  bucket 23: 60%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 23: 70%\n  bucket 25: 50%\n  bucket 24: 100%\n  bucket 23: 80%\n  Sorting block of length 68 for bucket 24\n  bucket 25: 60%\n  bucket 23: 90%\n  (Using difference cover)\n  bucket 25: 70%\n  bucket 23: 100%\n  bucket 25: 80%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 29: 10%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  Sorting block time: 00:00:00\n  bucket 29: 50%\nReturning block of 107 for bucket 28\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 10%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 20%\n  bucket 32: 10%\n  bucket 31: 30%\n  bucket 32: 20%\n  bucket 31: 40%\n  bucket 32: 30%\n  bucket 31: 50%\n  bucket 32: 40%\n  bucket 31: 60%\n  bucket 32: 50%\n  bucket 31: 70%\n  bucket 32: 60%\n  bucket 31: 80%\n  bucket 32: 70%\n  bucket 31: 90%\n  bucket 32: 80%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 30%\n  bucket 33: 40%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 34: 10%\n  bucket 33: 70%\n  bucket 34: 20%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 34: 30%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 40%\n  bucket 34: 50%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 60%\n  bucket 34: 70%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 80%\n  bucket 35: 10%\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  bucket 34: 90%\n  bucket 35: 20%\n  bucket 34: 100%\n  bucket 35: 30%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 10%\n  bucket 37: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 37: 20%\n  bucket 36: 50%\n  bucket 37: 30%\n  bucket 36: 60%\n  bucket 37: 40%\n  bucket 36: 70%\n  bucket 37: 50%\n  bucket 36: 80%\n  bucket 37: 60%\n  bucket 36: 90%\n  bucket 37: 70%\n  bucket 36: 100%\n  bucket 37: 80%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 10%\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 38: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 38: 30%\n  bucket 39: 50%\n  bucket 38: 40%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 38: 50%\n  bucket 39: 80%\n  bucket 38: 60%\n  bucket 39: 90%\n  bucket 38: 70%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 41: 10%\n  bucket 40: 70%\n  bucket 41: 20%\n  bucket 40: 80%\n  bucket 41: 30%\n  bucket 40: 90%\n  bucket 40: 100%\n  bucket 41: 40%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 42:\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  bucket 42: 10%\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 20%\n  bucket 43: 10%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 20%\n  bucket 42: 30%\n  bucket 44: 10%\n  bucket 43: 30%\n  bucket 44: 20%\n  bucket 42: 40%\n  bucket 43: 40%\n  bucket 44: 30%\n  bucket 43: 50%\n  bucket 42: 50%\n  bucket 43: 60%\n  bucket 44: 40%\n  bucket 43: 70%\n  bucket 44: 50%\n  bucket 42: 60%\n  bucket 43: 80%\n  bucket 44: 60%\n  bucket 43: 90%\n  bucket 44: 70%\n  bucket 42: 70%\n  bucket 44: 80%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  bucket 42: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 48\nReturning block of 84 for bucket 47\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Entering block accumulator loop for bucket 50:\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 40%\n  bucket 51: 10%\n  bucket 50: 50%\n  bucket 51: 20%\n  bucket 50: 60%\n  bucket 51: 30%\n  bucket 50: 70%\n  bucket 51: 40%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 51: 50%\n  bucket 50: 100%\n  bucket 51: 60%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  Sorting block time: 00:00:00\n  bucket 53: 10%\nReturning block of 107 for bucket 52\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 56:\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 56: 10%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 56: 20%\n  bucket 57: 80%\n  bucket 56: 30%\n  bucket 57: 90%\n  bucket 56: 40%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  bucket 58: 40%\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 50%\n  bucket 59: 10%\n  bucket 58: 60%\n  bucket 59: 20%\n  bucket 58: 70%\n  bucket 59: 30%\n  bucket 58: 80%\n  bucket 59: 40%\n  bucket 58: 90%\n  bucket 59: 50%\n  bucket 58: 100%\n  bucket 59: 60%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:53:37", "plugin": "core", "name": "end_epoch", "raw_value": "1708671217.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:53:37", "plugin": "core", "name": "start_epoch", "raw_value": "1708671217.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-6", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 6, "time_seconds": 25.911145210266113, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "8e234038bb0a2f0e"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "2cc9c006b00bfdb4"}, "library|input_2": {"src": "hda", "id": "2cc9c006b00bfdb4"}, "library|type": "paired", "adv|output_options|unaligned_file": true, "adv|output_options|aligned_file": true, "adv|output_options|output_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "a212a7ea4c6c7fcf", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:00:49.694809", "create_time": "2024-02-23T07:00:39.710528", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-dqvpx", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/4/8/e/dataset_48e7d6fc-3f85-4fb2-965b-8219c3c3a157.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/8/b/c/dataset_8bcb4343-7e36-4d7c-af9f-0938625b1d46.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/8/b/c/dataset_8bcb4343-7e36-4d7c-af9f-0938625b1d46.dat' input_r.fasta &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f   -1 'input_f.fasta' -2 'input_r.fasta' --un-conc '/galaxy/server/database/objects/3/4/1/dataset_341786db-a4b7-4452-a4cb-b149e8a1989b.dat'  --al-conc '/galaxy/server/database/objects/4/5/9/dataset_4598301f-a6f9-4ea0-8e12-b960e942ef20.dat'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/4/8/4/dataset_4849cad6-987f-4519-b713-9dbc99d32714.dat'   && mv '/galaxy/server/database/objects/3/4/1/dataset_341786db-a4b7-4452-a4cb-b149e8a1989b.1.dat' '/galaxy/server/database/objects/3/4/1/dataset_341786db-a4b7-4452-a4cb-b149e8a1989b.dat' && mv '/galaxy/server/database/objects/3/4/1/dataset_341786db-a4b7-4452-a4cb-b149e8a1989b.2.dat' '/galaxy/server/database/objects/d/7/5/dataset_d75eb59e-517e-446d-8e8d-c9fcd28abddf.dat' && mv '/galaxy/server/database/objects/4/5/9/dataset_4598301f-a6f9-4ea0-8e12-b960e942ef20.1.dat' '/galaxy/server/database/objects/4/5/9/dataset_4598301f-a6f9-4ea0-8e12-b960e942ef20.dat' && mv '/galaxy/server/database/objects/4/5/9/dataset_4598301f-a6f9-4ea0-8e12-b960e942ef20.2.dat' '/galaxy/server/database/objects/e/5/4/dataset_e54ac77e-87a2-4d6d-a460-e3c7c20d5b90.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 1, \"aligned_file\": true, \"output_options_selector\": \"advanced\", \"unaligned_file\": true}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 218, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 218, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 217, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "8e234038bb0a2f0e", "src": "hda", "uuid": "48e7d6fc-3f85-4fb2-965b-8219c3c3a157"}, "library|input_1": {"id": "2cc9c006b00bfdb4", "src": "hda", "uuid": "8bcb4343-7e36-4d7c-af9f-0938625b1d46"}, "library|input_2": {"id": "2cc9c006b00bfdb4", "src": "hda", "uuid": "8bcb4343-7e36-4d7c-af9f-0938625b1d46"}}, "outputs": {"output_alignments": {"id": "6dfbf69e7b7ce1ac", "src": "hda", "uuid": "4849cad6-987f-4519-b713-9dbc99d32714"}, "output_unaligned_reads_l": {"id": "b9d9c2742bea1800", "src": "hda", "uuid": "341786db-a4b7-4452-a4cb-b149e8a1989b"}, "output_aligned_reads_l": {"id": "75968ba06803a411", "src": "hda", "uuid": "4598301f-a6f9-4ea0-8e12-b960e942ef20"}, "output_unaligned_reads_r": {"id": "67d7f9e06b52c84e", "src": "hda", "uuid": "d75eb59e-517e-446d-8e8d-c9fcd28abddf"}, "output_aligned_reads_r": {"id": "8d0880239947a05f", "src": "hda", "uuid": "e54ac77e-87a2-4d6d-a460-e3c7c20d5b90"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\nGetting block 3 of 60\nGetting block 4 of 60\n  Reserving size (126) for bucket 3\nGetting block 6 of 60\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 3\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 2\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 6:\n  bucket 7: 10%\n  Reserving size (126) for bucket 4\nGetting block 5 of 60\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 8\n  bucket 2: 10%\n  bucket 3: 10%\n  Reserving size (126) for bucket 5\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 10%\n  bucket 3: 30%\n  bucket 7: 30%\n  bucket 2: 20%\n  bucket 6: 20%\n  bucket 3: 40%\n  bucket 7: 40%\n  Calculating Z arrays for bucket 5\n  bucket 2: 30%\n  bucket 1: 20%\n  bucket 8: 10%\n  bucket 4: 10%\n  bucket 2: 40%\n  bucket 1: 30%\n  bucket 8: 20%\n  bucket 2: 50%\n  bucket 6: 30%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 7: 50%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 8: 30%\n  bucket 4: 30%\n  bucket 2: 70%\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 2: 80%\n  Entering block accumulator loop for bucket 5:\n  bucket 7: 60%\n  bucket 1: 60%\n  bucket 2: 90%\n  bucket 4: 50%\n  bucket 5: 10%\n  bucket 1: 70%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 5: 20%\n  bucket 6: 40%\n  bucket 4: 70%\n  bucket 2: 100%\n  bucket 6: 50%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 4: 80%\n  Sorting block of length 84 for bucket 2\n  bucket 6: 60%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 4: 90%\n  bucket 8: 50%\n  bucket 6: 70%\n  (Using difference cover)\n  bucket 5: 30%\n  bucket 8: 60%\n  bucket 4: 100%\n  bucket 1: 90%\n  Sorting block of length 68 for bucket 4\n  bucket 8: 70%\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 5: 40%\n  bucket 6: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 3: 80%\n  bucket 6: 90%\n  bucket 1: 100%\n  bucket 5: 50%\n  bucket 3: 90%\n  bucket 8: 90%\n  bucket 6: 100%\n  Sorting block of length 42 for bucket 1\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 8: 100%\n  bucket 7: 100%\n  Sorting block of length 94 for bucket 8\n  bucket 3: 100%\n  bucket 5: 70%\n  (Using difference cover)\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 60\n  bucket 9: 20%\n  Reserving size (126) for bucket 11\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  Calculating Z arrays for bucket 11\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 11: 10%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 11: 20%\n  bucket 9: 70%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 11: 60%\n  bucket 9: 100%\n  bucket 10: 80%\n  Sorting block of length 124 for bucket 9\n  bucket 11: 70%\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 11: 80%\n  bucket 10: 100%\n  bucket 11: 90%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 12: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 12: 30%\n  bucket 13: 50%\n  bucket 12: 40%\n  bucket 13: 60%\n  bucket 12: 50%\n  bucket 13: 70%\n  bucket 12: 60%\n  bucket 13: 80%\n  bucket 12: 70%\n  bucket 13: 90%\n  bucket 12: 80%\n  bucket 13: 100%\n  bucket 12: 90%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  Sorting block time: 00:00:00\n  bucket 15: 50%\nReturning block of 83 for bucket 14\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 70%\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 16: 80%\n  bucket 17: 40%\n  bucket 16: 90%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 19: 60%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 19: 70%\n  bucket 20: 70%\n  bucket 21: 60%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 21: 70%\n  bucket 20: 90%\n  bucket 21: 80%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  bucket 21: 90%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Entering block accumulator loop for bucket 22:\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  bucket 22: 20%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 23: 10%\n  bucket 22: 50%\n  bucket 23: 20%\n  bucket 22: 60%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 50%\n  bucket 24: 60%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 70%\n  bucket 25: 10%\n  bucket 24: 80%\n  bucket 25: 20%\n  bucket 24: 90%\n  bucket 25: 30%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 26:\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 26: 10%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 26: 20%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 26: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 26: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 26: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 26: 60%\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  bucket 28: 80%\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 28: 90%\n  bucket 26: 80%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 10%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 20%\n  bucket 30: 60%\n  bucket 29: 30%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 29: 40%\n  bucket 30: 90%\n  bucket 29: 50%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 32:\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 10%\n  bucket 33: 10%\n  bucket 32: 20%\n  bucket 33: 20%\n  bucket 32: 30%\n  bucket 33: 30%\n  bucket 32: 40%\n  bucket 33: 40%\n  bucket 32: 50%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 32: 60%\n  bucket 33: 70%\n  bucket 32: 70%\n  bucket 33: 80%\n  bucket 32: 80%\n  bucket 33: 90%\n  bucket 32: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Reserving size (126) for bucket 37\n  Entering block accumulator loop for bucket 38:\n  Calculating Z arrays for bucket 37\n  bucket 38: 10%\n  Entering block accumulator loop for bucket 37:\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 37: 10%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 37: 20%\n  bucket 38: 70%\n  bucket 37: 30%\n  bucket 38: 80%\n  bucket 37: 40%\n  bucket 38: 90%\n  bucket 37: 50%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 44:\n  Entering block accumulator loop for bucket 43:\n  bucket 44: 10%\n  bucket 43: 10%\n  bucket 44: 20%\n  bucket 43: 20%\n  bucket 44: 30%\n  bucket 43: 30%\n  bucket 44: 40%\n  bucket 43: 40%\n  bucket 44: 50%\n  bucket 43: 50%\n  bucket 44: 60%\n  bucket 43: 60%\n  bucket 44: 70%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 44: 80%\n  bucket 43: 90%\n  bucket 44: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 30%\n  bucket 45: 40%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 50%\n  bucket 46: 10%\n  bucket 45: 60%\n  bucket 46: 20%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  Sorting block time: 00:00:00\n  bucket 46: 80%\nReturning block of 80 for bucket 45\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 20%\n  bucket 48: 10%\n  bucket 47: 30%\n  bucket 48: 20%\n  bucket 47: 40%\n  bucket 48: 30%\n  bucket 47: 50%\n  bucket 48: 40%\n  bucket 47: 60%\n  bucket 48: 50%\n  bucket 47: 70%\n  bucket 48: 60%\n  bucket 47: 80%\n  bucket 48: 70%\n  bucket 47: 90%\n  bucket 48: 80%\n  bucket 47: 100%\n  bucket 48: 90%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Entering block accumulator loop for bucket 50:\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 50: 10%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 20%\n  Entering block accumulator loop for bucket 52:\n  bucket 50: 30%\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  bucket 51: 10%\nGetting block 53 of 60\n  bucket 50: 40%\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Calculating Z arrays for bucket 54\n  bucket 52: 10%\n  bucket 50: 50%\n  bucket 51: 20%\n  bucket 52: 20%\n  bucket 50: 60%\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 52: 30%\n  bucket 51: 30%\n  bucket 50: 70%\n  bucket 52: 40%\n  bucket 53: 10%\n  bucket 50: 80%\n  bucket 52: 50%\n  bucket 54: 10%\n  bucket 51: 40%\n  bucket 50: 90%\n  bucket 53: 20%\n  bucket 52: 60%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 54: 20%\n  bucket 51: 50%\n  bucket 52: 70%\n  bucket 53: 30%\n  bucket 52: 80%\n  bucket 54: 30%\n  bucket 51: 60%\n  bucket 53: 40%\n  bucket 52: 90%\n  bucket 52: 100%\n  bucket 51: 70%\n  bucket 54: 40%\n  bucket 53: 50%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 51: 80%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 51: 90%\n  bucket 54: 60%\n  bucket 53: 70%\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  bucket 51: 100%\n  bucket 54: 70%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 53: 80%\n  bucket 54: 80%\n  bucket 53: 90%\n  bucket 54: 90%\n  bucket 53: 100%\n  bucket 54: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  Sorting block time: 00:00:00\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  bucket 55: 40%\nReturning block of 79 for bucket 53\n  bucket 55: 50%\n  Calculating Z arrays for bucket 56\n  bucket 55: 60%\n  bucket 55: 70%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 80%\n  bucket 56: 10%\n  bucket 55: 90%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  bucket 55: 100%\n  bucket 56: 20%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  Sorting block time: 00:00:00\n  bucket 56: 70%\nReturning block of 80 for bucket 55\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    3 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        6 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    3 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        6 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\nGetting block 3 of 60\nGetting block 4 of 60\n  Reserving size (126) for bucket 3\nGetting block 6 of 60\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 3\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 2\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 6:\n  bucket 7: 10%\n  Reserving size (126) for bucket 4\nGetting block 5 of 60\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 10%\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 8\n  bucket 2: 10%\n  bucket 3: 10%\n  Reserving size (126) for bucket 5\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 10%\n  bucket 3: 30%\n  bucket 7: 30%\n  bucket 2: 20%\n  bucket 6: 20%\n  bucket 3: 40%\n  bucket 7: 40%\n  Calculating Z arrays for bucket 5\n  bucket 2: 30%\n  bucket 1: 20%\n  bucket 8: 10%\n  bucket 4: 10%\n  bucket 2: 40%\n  bucket 1: 30%\n  bucket 8: 20%\n  bucket 2: 50%\n  bucket 6: 30%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 7: 50%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 8: 30%\n  bucket 4: 30%\n  bucket 2: 70%\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 2: 80%\n  Entering block accumulator loop for bucket 5:\n  bucket 7: 60%\n  bucket 1: 60%\n  bucket 2: 90%\n  bucket 4: 50%\n  bucket 5: 10%\n  bucket 1: 70%\n  bucket 4: 60%\n  bucket 3: 60%\n  bucket 5: 20%\n  bucket 6: 40%\n  bucket 4: 70%\n  bucket 2: 100%\n  bucket 6: 50%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 4: 80%\n  Sorting block of length 84 for bucket 2\n  bucket 6: 60%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 4: 90%\n  bucket 8: 50%\n  bucket 6: 70%\n  (Using difference cover)\n  bucket 5: 30%\n  bucket 8: 60%\n  bucket 4: 100%\n  bucket 1: 90%\n  Sorting block of length 68 for bucket 4\n  bucket 8: 70%\n  (Using difference cover)\n  bucket 7: 80%\n  bucket 5: 40%\n  bucket 6: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 3: 80%\n  bucket 6: 90%\n  bucket 1: 100%\n  bucket 5: 50%\n  bucket 3: 90%\n  bucket 8: 90%\n  bucket 6: 100%\n  Sorting block of length 42 for bucket 1\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 8: 100%\n  bucket 7: 100%\n  Sorting block of length 94 for bucket 8\n  bucket 3: 100%\n  bucket 5: 70%\n  (Using difference cover)\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 60\n  bucket 9: 20%\n  Reserving size (126) for bucket 11\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  Calculating Z arrays for bucket 11\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  Entering block accumulator loop for bucket 11:\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 11: 10%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 11: 20%\n  bucket 9: 70%\n  bucket 11: 30%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 11: 40%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 11: 50%\n  bucket 10: 70%\n  bucket 11: 60%\n  bucket 9: 100%\n  bucket 10: 80%\n  Sorting block of length 124 for bucket 9\n  bucket 11: 70%\n  (Using difference cover)\n  bucket 10: 90%\n  bucket 11: 80%\n  bucket 10: 100%\n  bucket 11: 90%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 12: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 12: 30%\n  bucket 13: 50%\n  bucket 12: 40%\n  bucket 13: 60%\n  bucket 12: 50%\n  bucket 13: 70%\n  bucket 12: 60%\n  bucket 13: 80%\n  bucket 12: 70%\n  bucket 13: 90%\n  bucket 12: 80%\n  bucket 13: 100%\n  bucket 12: 90%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  Sorting block time: 00:00:00\n  bucket 15: 50%\nReturning block of 83 for bucket 14\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 70%\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 16: 80%\n  bucket 17: 40%\n  bucket 16: 90%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 21: 10%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 19: 60%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 19: 70%\n  bucket 20: 70%\n  bucket 21: 60%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 21: 70%\n  bucket 20: 90%\n  bucket 21: 80%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  bucket 21: 90%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Entering block accumulator loop for bucket 22:\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  bucket 22: 20%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 23: 10%\n  bucket 22: 50%\n  bucket 23: 20%\n  bucket 22: 60%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 50%\n  bucket 24: 60%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 70%\n  bucket 25: 10%\n  bucket 24: 80%\n  bucket 25: 20%\n  bucket 24: 90%\n  bucket 25: 30%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 26:\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 28: 10%\n  bucket 27: 30%\n  bucket 26: 10%\n  bucket 28: 20%\n  bucket 27: 40%\n  bucket 26: 20%\n  bucket 28: 30%\n  bucket 27: 50%\n  bucket 26: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 26: 40%\n  bucket 27: 70%\n  bucket 28: 50%\n  bucket 26: 50%\n  bucket 27: 80%\n  bucket 28: 60%\n  bucket 27: 90%\n  bucket 26: 60%\n  bucket 28: 70%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  bucket 28: 80%\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 28: 90%\n  bucket 26: 80%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 10%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 29: 20%\n  bucket 30: 60%\n  bucket 29: 30%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 29: 40%\n  bucket 30: 90%\n  bucket 29: 50%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 32:\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 10%\n  bucket 33: 10%\n  bucket 32: 20%\n  bucket 33: 20%\n  bucket 32: 30%\n  bucket 33: 30%\n  bucket 32: 40%\n  bucket 33: 40%\n  bucket 32: 50%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 32: 60%\n  bucket 33: 70%\n  bucket 32: 70%\n  bucket 33: 80%\n  bucket 32: 80%\n  bucket 33: 90%\n  bucket 32: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Reserving size (126) for bucket 37\n  Entering block accumulator loop for bucket 38:\n  Calculating Z arrays for bucket 37\n  bucket 38: 10%\n  Entering block accumulator loop for bucket 37:\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 37: 10%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 37: 20%\n  bucket 38: 70%\n  bucket 37: 30%\n  bucket 38: 80%\n  bucket 37: 40%\n  bucket 38: 90%\n  bucket 37: 50%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 44:\n  Entering block accumulator loop for bucket 43:\n  bucket 44: 10%\n  bucket 43: 10%\n  bucket 44: 20%\n  bucket 43: 20%\n  bucket 44: 30%\n  bucket 43: 30%\n  bucket 44: 40%\n  bucket 43: 40%\n  bucket 44: 50%\n  bucket 43: 50%\n  bucket 44: 60%\n  bucket 43: 60%\n  bucket 44: 70%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 44: 80%\n  bucket 43: 90%\n  bucket 44: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 30%\n  bucket 45: 40%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 50%\n  bucket 46: 10%\n  bucket 45: 60%\n  bucket 46: 20%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  Sorting block time: 00:00:00\n  bucket 46: 80%\nReturning block of 80 for bucket 45\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 20%\n  bucket 48: 10%\n  bucket 47: 30%\n  bucket 48: 20%\n  bucket 47: 40%\n  bucket 48: 30%\n  bucket 47: 50%\n  bucket 48: 40%\n  bucket 47: 60%\n  bucket 48: 50%\n  bucket 47: 70%\n  bucket 48: 60%\n  bucket 47: 80%\n  bucket 48: 70%\n  bucket 47: 90%\n  bucket 48: 80%\n  bucket 47: 100%\n  bucket 48: 90%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Entering block accumulator loop for bucket 50:\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 50: 10%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 20%\n  Entering block accumulator loop for bucket 52:\n  bucket 50: 30%\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  bucket 51: 10%\nGetting block 53 of 60\n  bucket 50: 40%\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Calculating Z arrays for bucket 54\n  bucket 52: 10%\n  bucket 50: 50%\n  bucket 51: 20%\n  bucket 52: 20%\n  bucket 50: 60%\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 52: 30%\n  bucket 51: 30%\n  bucket 50: 70%\n  bucket 52: 40%\n  bucket 53: 10%\n  bucket 50: 80%\n  bucket 52: 50%\n  bucket 54: 10%\n  bucket 51: 40%\n  bucket 50: 90%\n  bucket 53: 20%\n  bucket 52: 60%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 54: 20%\n  bucket 51: 50%\n  bucket 52: 70%\n  bucket 53: 30%\n  bucket 52: 80%\n  bucket 54: 30%\n  bucket 51: 60%\n  bucket 53: 40%\n  bucket 52: 90%\n  bucket 52: 100%\n  bucket 51: 70%\n  bucket 54: 40%\n  bucket 53: 50%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 51: 80%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 51: 90%\n  bucket 54: 60%\n  bucket 53: 70%\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  bucket 51: 100%\n  bucket 54: 70%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 53: 80%\n  bucket 54: 80%\n  bucket 53: 90%\n  bucket 54: 90%\n  bucket 53: 100%\n  bucket 54: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  Sorting block time: 00:00:00\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  bucket 55: 40%\nReturning block of 79 for bucket 53\n  bucket 55: 50%\n  Calculating Z arrays for bucket 56\n  bucket 55: 60%\n  bucket 55: 70%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 80%\n  bucket 56: 10%\n  bucket 55: 90%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  bucket 55: 100%\n  bucket 56: 20%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  Sorting block time: 00:00:00\n  bucket 56: 70%\nReturning block of 80 for bucket 55\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:00:41", "plugin": "core", "name": "end_epoch", "raw_value": "1708671641.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:00:41", "plugin": "core", "name": "start_epoch", "raw_value": "1708671641.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-7", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 7, "time_seconds": 29.205761432647705, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "5a4e8b43009c6c7c"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "dcf434eacdaecb9e"}, "library|input_2": {"src": "hda", "id": "856171158e66a4bd"}, "library|paired_options|no_mixed": true, "library|paired_options|no_discordant": true, "library|paired_options|paired_options_selector": "advanced", "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "6659b04683d619d6", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:54:15.803614", "create_time": "2024-02-23T06:54:05.297039", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-gb99n", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/b/e/6/dataset_be65a0f8-a292-4a4e-9ed0-c9f53e3e1845.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/6/2/5/dataset_625b6918-ffe8-4b0d-a123-ce3ed66b7781.dat' input_f.fastq.gz &&  ln -f -s '/galaxy/server/database/objects/9/d/8/dataset_9d8ab282-4b87-404d-9794-d0dbecd0be0f.dat' input_r.fastq.gz &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq.gz' -2 'input_r.fastq.gz'  --fr --no-mixed --no-discordant        --trim5 '15' --trim3 '15' --phred33                          | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/a/d/a/dataset_ada7560a-3ce5-4985-83c4-5d980f39af91.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 162, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 163, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"fr_rf_ff\": \"--fr\", \"no_discordant\": true, \"no_mixed\": true, \"paired_options_selector\": \"advanced\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 161, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "5a4e8b43009c6c7c", "src": "hda", "uuid": "be65a0f8-a292-4a4e-9ed0-c9f53e3e1845"}, "library|input_1": {"id": "dcf434eacdaecb9e", "src": "hda", "uuid": "625b6918-ffe8-4b0d-a123-ce3ed66b7781"}, "library|input_2": {"id": "856171158e66a4bd", "src": "hda", "uuid": "9d8ab282-4b87-404d-9794-d0dbecd0be0f"}}, "outputs": {"output_alignments": {"id": "4184e35b0dc5a37c", "src": "hda", "uuid": "ada7560a-3ce5-4985-83c4-5d980f39af91"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 1\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\nGetting block 4 of 60\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\nGetting block 5 of 60\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  bucket 2: 10%\n  Reserving size (126) for bucket 5\n  bucket 4: 10%\n  Calculating Z arrays for bucket 5\nGetting block 6 of 60\n  bucket 3: 10%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 5:\n  Reserving size (126) for bucket 6\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 6\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 1: 40%\nGetting block 8 of 60\n  bucket 1: 50%\n  Reserving size (126) for bucket 8\n  bucket 4: 30%\n  Calculating Z arrays for bucket 8\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 40%\n  bucket 5: 10%\n  Calculating Z arrays for bucket 7\n  bucket 6: 10%\n  bucket 4: 50%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 6: 20%\n  bucket 4: 60%\n  bucket 2: 50%\n  bucket 6: 30%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 5: 20%\n  bucket 1: 70%\n  bucket 4: 70%\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 6: 40%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 5: 30%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 5: 40%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 5: 50%\n  bucket 4: 100%\n  Entering block accumulator loop for bucket 8:\n  bucket 1: 100%\n  bucket 5: 60%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 42 for bucket 1\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 8: 10%\n  bucket 6: 60%\n  bucket 2: 100%\n  (Using difference cover)\n  Entering block accumulator loop for bucket 7:\n  bucket 8: 20%\n  Sorting block of length 84 for bucket 2\n  bucket 5: 90%\n  bucket 3: 80%\n  bucket 7: 10%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  (Using difference cover)\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 3: 90%\n  bucket 6: 80%\n  bucket 7: 30%\n  bucket 3: 100%\n  bucket 8: 40%\n  bucket 6: 90%\n  bucket 7: 40%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 6: 100%\n  bucket 7: 50%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 7: 80%\n  bucket 8: 90%\n  bucket 7: 90%\n  Sorting block time: 00:00:00\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 11:\n  bucket 12: 20%\n  bucket 11: 10%\n  bucket 12: 30%\n  bucket 11: 20%\n  bucket 12: 40%\n  bucket 11: 30%\n  bucket 12: 50%\n  bucket 11: 40%\n  bucket 12: 60%\n  bucket 11: 50%\n  bucket 12: 70%\n  bucket 11: 60%\n  bucket 12: 80%\n  bucket 11: 70%\n  bucket 12: 90%\n  bucket 11: 80%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\nGetting block 15 of 60\n  bucket 14: 20%\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 30%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  bucket 14: 40%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 15: 10%\n  bucket 14: 70%\n  bucket 15: 20%\n  bucket 14: 80%\n  bucket 15: 30%\n  bucket 14: 90%\n  bucket 15: 40%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Entering block accumulator loop for bucket 16:\n  Calculating Z arrays for bucket 17\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  bucket 16: 30%\n  bucket 17: 30%\n  bucket 16: 40%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 40%\n  bucket 16: 50%\n  bucket 17: 50%\n  bucket 16: 60%\n  bucket 18: 10%\n  bucket 17: 60%\n  bucket 16: 70%\n  bucket 18: 20%\n  bucket 17: 70%\n  bucket 16: 80%\n  bucket 18: 30%\n  bucket 17: 80%\n  bucket 16: 90%\n  bucket 18: 40%\n  bucket 17: 90%\n  bucket 16: 100%\n  bucket 18: 50%\n  Sorting block of length 100 for bucket 16\n  bucket 17: 100%\n  (Using difference cover)\n  bucket 18: 60%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 21: 10%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 21: 30%\n  bucket 19: 80%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 19: 90%\n  bucket 20: 60%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 21: 90%\n  bucket 20: 100%\n  bucket 21: 100%\n  Sorting block of length 97 for bucket 20\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  bucket 22: 20%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 23: 10%\n  bucket 22: 50%\n  bucket 23: 20%\n  bucket 22: 60%\n  bucket 23: 30%\n  bucket 22: 70%\n  bucket 23: 40%\n  bucket 22: 80%\n  bucket 23: 50%\n  bucket 22: 90%\n  bucket 23: 60%\n  bucket 22: 100%\n  bucket 23: 70%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 28: 50%\n  bucket 27: 90%\n  bucket 28: 60%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  Sorting block time: 00:00:00\n  bucket 29: 10%\nReturning block of 107 for bucket 28\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\nGetting block 31 of 60\n  bucket 30: 90%\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\nGetting block 33 of 60\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 33:\n  bucket 34: 10%\n  bucket 33: 10%\n  bucket 34: 20%\n  bucket 33: 20%\n  bucket 34: 30%\n  bucket 33: 30%\n  bucket 34: 40%\n  bucket 33: 40%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 33: 50%\n  bucket 33: 60%\n  Entering block accumulator loop for bucket 35:\n  bucket 33: 70%\n  bucket 35: 10%\n  bucket 33: 80%\n  bucket 35: 20%\n  bucket 33: 90%\n  bucket 34: 50%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  bucket 34: 60%\n  (Using difference cover)\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 35: 30%\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\n  bucket 32: 20%\nReturning block of 45 for bucket 33\n  bucket 35: 40%\n  bucket 32: 30%\n  bucket 35: 50%\n  bucket 32: 40%\n  bucket 35: 60%\n  bucket 32: 50%\n  bucket 35: 70%\n  bucket 32: 60%\n  bucket 35: 80%\n  bucket 32: 70%\n  bucket 35: 90%\n  bucket 32: 80%\n  bucket 35: 100%\n  bucket 32: 90%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\nReturning block of 123 for bucket 34\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 40%\n  bucket 36: 50%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 60%\n  bucket 37: 10%\n  bucket 36: 70%\n  bucket 37: 20%\n  bucket 36: 80%\n  bucket 37: 30%\n  bucket 36: 90%\n  bucket 37: 40%\n  bucket 36: 100%\n  bucket 37: 50%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 39:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 39: 10%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 39: 20%\n  bucket 40: 50%\n  bucket 39: 30%\n  bucket 40: 60%\n  bucket 39: 40%\n  bucket 40: 70%\n  bucket 39: 50%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 39: 60%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 41: 10%\n  bucket 42: 20%\n  bucket 41: 20%\n  bucket 42: 30%\n  bucket 41: 30%\n  bucket 42: 40%\n  bucket 41: 40%\n  bucket 42: 50%\n  bucket 41: 50%\n  bucket 42: 60%\n  bucket 41: 60%\n  bucket 42: 70%\n  bucket 41: 70%\n  bucket 42: 80%\n  bucket 41: 80%\n  bucket 42: 90%\n  bucket 41: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Sorting block time: 00:00:00\n  bucket 44: 20%\nReturning block of 122 for bucket 43\n  bucket 44: 30%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 40%\n  bucket 45: 10%\n  bucket 44: 50%\n  bucket 45: 20%\n  bucket 44: 60%\n  bucket 45: 30%\n  bucket 44: 70%\n  bucket 45: 40%\n  bucket 44: 80%\n  bucket 45: 50%\n  bucket 44: 90%\n  bucket 45: 60%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 20%\n  bucket 47: 10%\n  bucket 46: 30%\n  bucket 47: 20%\n  bucket 46: 40%\n  bucket 47: 30%\n  bucket 46: 50%\n  bucket 47: 40%\n  bucket 46: 60%\n  bucket 47: 50%\n  bucket 46: 70%\n  bucket 47: 60%\n  bucket 46: 80%\n  bucket 47: 70%\n  bucket 46: 90%\n  bucket 47: 80%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 48:\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 50:\n  bucket 48: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 50: 10%\n  bucket 48: 20%\n  bucket 49: 10%\n  bucket 50: 20%\n  bucket 49: 20%\n  bucket 48: 30%\n  bucket 50: 30%\n  bucket 49: 30%\n  bucket 50: 40%\n  bucket 48: 40%\n  bucket 49: 40%\n  bucket 50: 50%\n  bucket 49: 50%\n  bucket 48: 50%\n  bucket 50: 60%\n  bucket 49: 60%\n  bucket 50: 70%\n  bucket 48: 60%\n  bucket 49: 70%\n  bucket 50: 80%\n  bucket 49: 80%\n  bucket 48: 70%\n  bucket 50: 90%\n  bucket 49: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 51:\n  bucket 52: 10%\n  bucket 51: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 51: 20%\n  bucket 52: 40%\n  bucket 51: 30%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 51: 40%\n  bucket 52: 70%\n  bucket 51: 50%\n  bucket 52: 80%\n  bucket 51: 60%\n  bucket 52: 90%\n  bucket 51: 70%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 20%\n  bucket 54: 30%\n  Calculating Z arrays for bucket 53\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  Entering block accumulator loop for bucket 53:\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 53: 80%\n  bucket 55: 50%\n  bucket 53: 90%\n  bucket 55: 60%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 58: 10%\n  Entering block accumulator loop for bucket 57:\n  bucket 58: 20%\n  bucket 57: 10%\n  bucket 58: 30%\n  bucket 57: 20%\n  bucket 58: 40%\n  bucket 57: 30%\n  bucket 58: 50%\n  bucket 57: 40%\n  bucket 58: 60%\n  bucket 57: 50%\n  bucket 58: 70%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 58: 80%\n  bucket 57: 80%\n  bucket 58: 90%\n  bucket 57: 90%\n  bucket 58: 100%\n  bucket 57: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 59:\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 10%\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 59: 20%\n  bucket 60: 30%\n  bucket 59: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 59: 40%\n  bucket 60: 60%\n  bucket 59: 50%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 59: 60%\n  bucket 60: 90%\n  bucket 59: 70%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 1\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\nGetting block 4 of 60\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\nGetting block 5 of 60\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 30%\n  bucket 2: 10%\n  Reserving size (126) for bucket 5\n  bucket 4: 10%\n  Calculating Z arrays for bucket 5\nGetting block 6 of 60\n  bucket 3: 10%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 5:\n  Reserving size (126) for bucket 6\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 6\n  bucket 4: 20%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 1: 40%\nGetting block 8 of 60\n  bucket 1: 50%\n  Reserving size (126) for bucket 8\n  bucket 4: 30%\n  Calculating Z arrays for bucket 8\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 40%\n  bucket 5: 10%\n  Calculating Z arrays for bucket 7\n  bucket 6: 10%\n  bucket 4: 50%\n  bucket 2: 40%\n  bucket 3: 30%\n  bucket 6: 20%\n  bucket 4: 60%\n  bucket 2: 50%\n  bucket 6: 30%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 5: 20%\n  bucket 1: 70%\n  bucket 4: 70%\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 6: 40%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 4: 80%\n  bucket 5: 30%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 5: 40%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 2: 90%\n  bucket 5: 50%\n  bucket 4: 100%\n  Entering block accumulator loop for bucket 8:\n  bucket 1: 100%\n  bucket 5: 60%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 42 for bucket 1\n  bucket 5: 70%\n  bucket 6: 50%\n  bucket 5: 80%\n  bucket 8: 10%\n  bucket 6: 60%\n  bucket 2: 100%\n  (Using difference cover)\n  Entering block accumulator loop for bucket 7:\n  bucket 8: 20%\n  Sorting block of length 84 for bucket 2\n  bucket 5: 90%\n  bucket 3: 80%\n  bucket 7: 10%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 6: 70%\n  (Using difference cover)\n  bucket 7: 20%\n  bucket 8: 30%\n  bucket 3: 90%\n  bucket 6: 80%\n  bucket 7: 30%\n  bucket 3: 100%\n  bucket 8: 40%\n  bucket 6: 90%\n  bucket 7: 40%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 8: 50%\n  bucket 6: 100%\n  bucket 7: 50%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 8: 80%\n  bucket 7: 80%\n  bucket 8: 90%\n  bucket 7: 90%\n  Sorting block time: 00:00:00\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Entering block accumulator loop for bucket 9:\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 11:\n  bucket 12: 20%\n  bucket 11: 10%\n  bucket 12: 30%\n  bucket 11: 20%\n  bucket 12: 40%\n  bucket 11: 30%\n  bucket 12: 50%\n  bucket 11: 40%\n  bucket 12: 60%\n  bucket 11: 50%\n  bucket 12: 70%\n  bucket 11: 60%\n  bucket 12: 80%\n  bucket 11: 70%\n  bucket 12: 90%\n  bucket 11: 80%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\nGetting block 15 of 60\n  bucket 14: 20%\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  bucket 14: 30%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  bucket 14: 40%\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 15: 10%\n  bucket 14: 70%\n  bucket 15: 20%\n  bucket 14: 80%\n  bucket 15: 30%\n  bucket 14: 90%\n  bucket 15: 40%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Entering block accumulator loop for bucket 16:\n  Calculating Z arrays for bucket 17\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 20%\n  bucket 17: 10%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 20%\n  bucket 16: 30%\n  bucket 17: 30%\n  bucket 16: 40%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 40%\n  bucket 16: 50%\n  bucket 17: 50%\n  bucket 16: 60%\n  bucket 18: 10%\n  bucket 17: 60%\n  bucket 16: 70%\n  bucket 18: 20%\n  bucket 17: 70%\n  bucket 16: 80%\n  bucket 18: 30%\n  bucket 17: 80%\n  bucket 16: 90%\n  bucket 18: 40%\n  bucket 17: 90%\n  bucket 16: 100%\n  bucket 18: 50%\n  Sorting block of length 100 for bucket 16\n  bucket 17: 100%\n  (Using difference cover)\n  bucket 18: 60%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 19: 40%\n  bucket 21: 10%\n  bucket 19: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 21: 20%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 21: 30%\n  bucket 19: 80%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 19: 90%\n  bucket 20: 60%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 20: 90%\n  bucket 21: 90%\n  bucket 20: 100%\n  bucket 21: 100%\n  Sorting block of length 97 for bucket 20\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  bucket 22: 20%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 23: 10%\n  bucket 22: 50%\n  bucket 23: 20%\n  bucket 22: 60%\n  bucket 23: 30%\n  bucket 22: 70%\n  bucket 23: 40%\n  bucket 22: 80%\n  bucket 23: 50%\n  bucket 22: 90%\n  bucket 23: 60%\n  bucket 22: 100%\n  bucket 23: 70%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Calculating Z arrays for bucket 28\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 28: 10%\n  bucket 27: 40%\n  bucket 28: 20%\n  bucket 27: 50%\n  bucket 28: 30%\n  bucket 27: 60%\n  bucket 28: 40%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 28: 50%\n  bucket 27: 90%\n  bucket 28: 60%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  Sorting block time: 00:00:00\n  bucket 29: 10%\nReturning block of 107 for bucket 28\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\nGetting block 31 of 60\n  bucket 30: 90%\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\nGetting block 33 of 60\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 33:\n  bucket 34: 10%\n  bucket 33: 10%\n  bucket 34: 20%\n  bucket 33: 20%\n  bucket 34: 30%\n  bucket 33: 30%\n  bucket 34: 40%\n  bucket 33: 40%\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 33: 50%\n  bucket 33: 60%\n  Entering block accumulator loop for bucket 35:\n  bucket 33: 70%\n  bucket 35: 10%\n  bucket 33: 80%\n  bucket 35: 20%\n  bucket 33: 90%\n  bucket 34: 50%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  bucket 34: 60%\n  (Using difference cover)\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 35: 30%\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\n  bucket 32: 20%\nReturning block of 45 for bucket 33\n  bucket 35: 40%\n  bucket 32: 30%\n  bucket 35: 50%\n  bucket 32: 40%\n  bucket 35: 60%\n  bucket 32: 50%\n  bucket 35: 70%\n  bucket 32: 60%\n  bucket 35: 80%\n  bucket 32: 70%\n  bucket 35: 90%\n  bucket 32: 80%\n  bucket 35: 100%\n  bucket 32: 90%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\nReturning block of 123 for bucket 34\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 40%\n  bucket 36: 50%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 60%\n  bucket 37: 10%\n  bucket 36: 70%\n  bucket 37: 20%\n  bucket 36: 80%\n  bucket 37: 30%\n  bucket 36: 90%\n  bucket 37: 40%\n  bucket 36: 100%\n  bucket 37: 50%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 39:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 39: 10%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 39: 20%\n  bucket 40: 50%\n  bucket 39: 30%\n  bucket 40: 60%\n  bucket 39: 40%\n  bucket 40: 70%\n  bucket 39: 50%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 39: 60%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 41: 10%\n  bucket 42: 20%\n  bucket 41: 20%\n  bucket 42: 30%\n  bucket 41: 30%\n  bucket 42: 40%\n  bucket 41: 40%\n  bucket 42: 50%\n  bucket 41: 50%\n  bucket 42: 60%\n  bucket 41: 60%\n  bucket 42: 70%\n  bucket 41: 70%\n  bucket 42: 80%\n  bucket 41: 80%\n  bucket 42: 90%\n  bucket 41: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Sorting block time: 00:00:00\n  bucket 44: 20%\nReturning block of 122 for bucket 43\n  bucket 44: 30%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 40%\n  bucket 45: 10%\n  bucket 44: 50%\n  bucket 45: 20%\n  bucket 44: 60%\n  bucket 45: 30%\n  bucket 44: 70%\n  bucket 45: 40%\n  bucket 44: 80%\n  bucket 45: 50%\n  bucket 44: 90%\n  bucket 45: 60%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 20%\n  bucket 47: 10%\n  bucket 46: 30%\n  bucket 47: 20%\n  bucket 46: 40%\n  bucket 47: 30%\n  bucket 46: 50%\n  bucket 47: 40%\n  bucket 46: 60%\n  bucket 47: 50%\n  bucket 46: 70%\n  bucket 47: 60%\n  bucket 46: 80%\n  bucket 47: 70%\n  bucket 46: 90%\n  bucket 47: 80%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 48:\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 50:\n  bucket 48: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 50: 10%\n  bucket 48: 20%\n  bucket 49: 10%\n  bucket 50: 20%\n  bucket 49: 20%\n  bucket 48: 30%\n  bucket 50: 30%\n  bucket 49: 30%\n  bucket 50: 40%\n  bucket 48: 40%\n  bucket 49: 40%\n  bucket 50: 50%\n  bucket 49: 50%\n  bucket 48: 50%\n  bucket 50: 60%\n  bucket 49: 60%\n  bucket 50: 70%\n  bucket 48: 60%\n  bucket 49: 70%\n  bucket 50: 80%\n  bucket 49: 80%\n  bucket 48: 70%\n  bucket 50: 90%\n  bucket 49: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 51:\n  bucket 52: 10%\n  bucket 51: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 51: 20%\n  bucket 52: 40%\n  bucket 51: 30%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 51: 40%\n  bucket 52: 70%\n  bucket 51: 50%\n  bucket 52: 80%\n  bucket 51: 60%\n  bucket 52: 90%\n  bucket 51: 70%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 20%\n  bucket 54: 30%\n  Calculating Z arrays for bucket 53\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  Entering block accumulator loop for bucket 53:\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 53: 80%\n  bucket 55: 50%\n  bucket 53: 90%\n  bucket 55: 60%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 58: 10%\n  Entering block accumulator loop for bucket 57:\n  bucket 58: 20%\n  bucket 57: 10%\n  bucket 58: 30%\n  bucket 57: 20%\n  bucket 58: 40%\n  bucket 57: 30%\n  bucket 58: 50%\n  bucket 57: 40%\n  bucket 58: 60%\n  bucket 57: 50%\n  bucket 58: 70%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 58: 80%\n  bucket 57: 80%\n  bucket 58: 90%\n  bucket 57: 90%\n  bucket 58: 100%\n  bucket 57: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 59:\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 10%\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 59: 20%\n  bucket 60: 30%\n  bucket 59: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 59: 40%\n  bucket 60: 60%\n  bucket 59: 50%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 59: 60%\n  bucket 60: 90%\n  bucket 59: 70%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:54:07", "plugin": "core", "name": "end_epoch", "raw_value": "1708671247.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:54:06", "plugin": "core", "name": "start_epoch", "raw_value": "1708671246.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-7", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 7, "time_seconds": 14.622164011001587, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "hisat2/2.2.1+galaxy1-8", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 8, "time_seconds": 7.767535448074341, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "hisat2/2.2.1+galaxy1-8", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 8, "time_seconds": 28.185436725616455, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "a8771b865dc0f9d0"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "6241e4786cbf342b"}, "library|input_2": {"src": "hda", "id": "6e3270887bad74aa"}, "library|paired_options|no_mixed": true, "library|paired_options|no_discordant": true, "library|paired_options|paired_options_selector": "advanced", "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "4a287d2f42e64ab7", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:01:32.916289", "create_time": "2024-02-23T07:01:23.300451", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-nwpgb", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/a/c/0/dataset_ac0a47ba-aa20-4019-a4f9-ad153c382fd6.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/a/8/d/dataset_a8d135a5-b42d-41ec-83c1-09cba9ac5650.dat' input_f.fastq.bz2 &&  ln -f -s '/galaxy/server/database/objects/d/c/d/dataset_dcd26a82-3ed8-412d-a3cd-d077ad4328a8.dat' input_r.fastq.bz2 &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq.bz2' -2 'input_r.fastq.bz2'  --fr --no-mixed --no-discordant        --trim5 '15' --trim3 '15' --phred33                          | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/9/d/f/dataset_9dfc0863-29e7-45d9-8fcc-f1fbfb2fb4a8.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 228, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 229, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"fr_rf_ff\": \"--fr\", \"no_discordant\": true, \"no_mixed\": true, \"paired_options_selector\": \"advanced\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 227, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "a8771b865dc0f9d0", "src": "hda", "uuid": "ac0a47ba-aa20-4019-a4f9-ad153c382fd6"}, "library|input_1": {"id": "6241e4786cbf342b", "src": "hda", "uuid": "a8d135a5-b42d-41ec-83c1-09cba9ac5650"}, "library|input_2": {"id": "6e3270887bad74aa", "src": "hda", "uuid": "dcd26a82-3ed8-412d-a3cd-d077ad4328a8"}}, "outputs": {"output_alignments": {"id": "01497e7c4252b4fe", "src": "hda", "uuid": "9dfc0863-29e7-45d9-8fcc-f1fbfb2fb4a8"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  bucket 2: 10%\n  bucket 1: 20%\n  Calculating Z arrays for bucket 3\nGetting block 4 of 60\n  bucket 2: 20%\n  bucket 1: 30%\n  Reserving size (126) for bucket 4\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  bucket 1: 40%\n  bucket 2: 40%\n  Calculating Z arrays for bucket 5\nGetting block 6 of 60\n  bucket 2: 50%\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 60%\n  bucket 1: 50%\n  bucket 3: 10%\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 1: 60%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 5: 10%\n  bucket 1: 70%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 3: 40%\n  bucket 4: 30%\n  Calculating Z arrays for bucket 7\n  bucket 5: 20%\n  bucket 2: 80%\n  bucket 4: 40%\n  bucket 1: 90%\n  bucket 3: 50%\n  bucket 2: 90%\n  Reserving size (126) for bucket 6\n  bucket 1: 100%\n  bucket 3: 60%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 5: 30%\n  bucket 3: 70%\n  bucket 2: 100%\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 50%\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 6\n  bucket 7: 10%\n  Calculating Z arrays for bucket 8\n  bucket 4: 60%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 5: 40%\n  bucket 3: 80%\n  bucket 4: 70%\n  Entering block accumulator loop for bucket 8:\n  bucket 3: 90%\n  bucket 4: 80%\n  Entering block accumulator loop for bucket 6:\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 3: 100%\n  bucket 8: 10%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 6: 10%\n  bucket 5: 60%\n  bucket 7: 30%\n  bucket 4: 100%\n  bucket 6: 20%\n  Sorting block of length 68 for bucket 4\n  bucket 7: 40%\n  (Using difference cover)\n  bucket 6: 30%\n  bucket 8: 20%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 5: 80%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 7: 70%\n  bucket 6: 60%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 5: 100%\n  bucket 6: 70%\n  Sorting block of length 63 for bucket 5\n  bucket 8: 60%\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 6: 90%\n  bucket 7: 100%\n  bucket 8: 80%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 8: 90%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 40%\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 60%\n  bucket 10: 10%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 10: 30%\n  bucket 9: 90%\n  bucket 10: 40%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 12:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 12: 10%\n  bucket 13: 30%\n  bucket 12: 20%\n  Sorting block time: 00:00:00\n  bucket 13: 40%\n  bucket 12: 30%\n  bucket 13: 50%\n  bucket 12: 40%\n  bucket 13: 60%\n  bucket 12: 50%\n  bucket 13: 70%\n  bucket 12: 60%\nReturning block of 96 for bucket 11\n  bucket 13: 80%\n  bucket 12: 70%\n  bucket 13: 90%\n  bucket 12: 80%\n  bucket 13: 100%\n  bucket 12: 90%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 19: 20%\n  bucket 18: 10%\n  bucket 19: 30%\n  bucket 18: 20%\n  bucket 19: 40%\n  bucket 18: 30%\n  bucket 19: 50%\n  bucket 18: 40%\n  bucket 19: 60%\n  bucket 18: 50%\n  bucket 19: 70%\n  bucket 18: 60%\n  bucket 19: 80%\n  bucket 18: 70%\n  bucket 19: 90%\n  bucket 18: 80%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  bucket 20: 50%\n  Calculating Z arrays for bucket 21\n  bucket 20: 60%\n  bucket 20: 70%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 80%\n  bucket 21: 10%\n  bucket 20: 90%\n  bucket 21: 20%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 23: 20%\n  bucket 22: 70%\n  bucket 23: 30%\n  bucket 22: 80%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 22: 90%\n  bucket 23: 60%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 60%\n  bucket 26: 10%\n  bucket 25: 70%\n  bucket 26: 20%\n  bucket 25: 80%\n  bucket 26: 30%\n  bucket 25: 90%\n  bucket 26: 40%\n  bucket 25: 100%\n  bucket 26: 50%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\nGetting block 27 of 60\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nReturning block of 67 for bucket 25\n  Entering block accumulator loop for bucket 27:\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 40%\n  bucket 30: 50%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 31: 10%\n  bucket 30: 80%\n  bucket 31: 20%\n  bucket 30: 90%\n  bucket 31: 30%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 35: 80%\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 36:\n  bucket 37: 10%\n  bucket 35: 90%\n  bucket 36: 10%\n  bucket 37: 20%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 37: 30%\n  bucket 36: 20%\n  bucket 37: 40%\n  bucket 36: 30%\n  bucket 37: 50%\n  bucket 36: 40%\n  bucket 37: 60%\n  bucket 36: 50%\n  bucket 37: 70%\n  bucket 36: 60%\n  bucket 37: 80%\n  bucket 36: 70%\n  bucket 37: 90%\n  bucket 36: 80%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 36: 90%\n  Sorting block time: 00:00:00\n  bucket 36: 100%\nReturning block of 113 for bucket 35\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 39:\n  bucket 40: 10%\n  bucket 39: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 39: 20%\n  bucket 40: 60%\n  bucket 39: 30%\n  bucket 40: 70%\n  bucket 39: 40%\n  bucket 40: 80%\n  bucket 39: 50%\n  bucket 40: 90%\n  bucket 39: 60%\n  bucket 40: 100%\n  bucket 39: 70%\n  Sorting block of length 41 for bucket 40\n  bucket 39: 80%\n  (Using difference cover)\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Reserving size (126) for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Calculating Z arrays for bucket 41\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 43:\n  bucket 41: 10%\n  bucket 43: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  Entering block accumulator loop for bucket 42:\n  bucket 43: 20%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 42: 10%\n  bucket 43: 30%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 42: 20%\n  bucket 43: 40%\n  bucket 41: 80%\n  bucket 42: 30%\n  bucket 41: 90%\n  bucket 43: 50%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 43: 60%\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 70%\n  bucket 42: 40%\n  bucket 43: 80%\n  bucket 42: 50%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 90%\n  bucket 42: 60%\n  bucket 44: 10%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 20%\n  bucket 42: 70%\n  bucket 44: 30%\n  bucket 42: 80%\n  bucket 44: 40%\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  bucket 42: 90%\n  bucket 44: 50%\n  bucket 42: 100%\n  bucket 44: 60%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 40%\n  bucket 45: 50%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 46: 10%\n  bucket 45: 80%\n  bucket 46: 20%\n  bucket 45: 90%\n  bucket 46: 30%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 20%\n  bucket 52: 10%\n  bucket 51: 30%\n  bucket 52: 20%\n  bucket 51: 40%\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  bucket 52: 30%\n  bucket 51: 50%\n  bucket 52: 40%\n  bucket 51: 60%\n  bucket 52: 50%\n  Calculating Z arrays for bucket 53\n  bucket 51: 70%\n  bucket 52: 60%\n  bucket 51: 80%\n  bucket 52: 70%\n  Entering block accumulator loop for bucket 53:\n  bucket 51: 90%\n  bucket 52: 80%\n  bucket 53: 10%\n  bucket 51: 100%\n  bucket 52: 90%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 54:\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 10%\n  bucket 55: 10%\n  bucket 54: 20%\n  bucket 55: 20%\n  bucket 54: 30%\n  bucket 55: 30%\n  bucket 54: 40%\n  bucket 55: 40%\n  bucket 54: 50%\n  bucket 55: 50%\n  bucket 54: 60%\n  bucket 55: 60%\n  bucket 54: 70%\n  bucket 55: 70%\n  bucket 54: 80%\n  bucket 55: 80%\n  bucket 54: 90%\n  bucket 55: 90%\n  bucket 54: 100%\n  bucket 55: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  Sorting block time: 00:00:00\n  bucket 57: 30%\nReturning block of 56 for bucket 56\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 58: 20%\n  bucket 59: 20%\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  bucket 59: 30%\n  bucket 58: 30%\n  Calculating Z arrays for bucket 60\n  bucket 59: 40%\n  bucket 58: 40%\n  bucket 59: 50%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 60%\n  bucket 60: 10%\n  bucket 59: 70%\n  bucket 60: 20%\n  bucket 59: 80%\n  bucket 60: 30%\n  bucket 59: 90%\n  bucket 60: 40%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 58: 50%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 58: 60%\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  bucket 2: 10%\n  bucket 1: 20%\n  Calculating Z arrays for bucket 3\nGetting block 4 of 60\n  bucket 2: 20%\n  bucket 1: 30%\n  Reserving size (126) for bucket 4\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  bucket 1: 40%\n  bucket 2: 40%\n  Calculating Z arrays for bucket 5\nGetting block 6 of 60\n  bucket 2: 50%\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 60%\n  bucket 1: 50%\n  bucket 3: 10%\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 1: 60%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 5: 10%\n  bucket 1: 70%\n  bucket 3: 30%\n  bucket 4: 20%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 3: 40%\n  bucket 4: 30%\n  Calculating Z arrays for bucket 7\n  bucket 5: 20%\n  bucket 2: 80%\n  bucket 4: 40%\n  bucket 1: 90%\n  bucket 3: 50%\n  bucket 2: 90%\n  Reserving size (126) for bucket 6\n  bucket 1: 100%\n  bucket 3: 60%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 5: 30%\n  bucket 3: 70%\n  bucket 2: 100%\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 50%\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 6\n  bucket 7: 10%\n  Calculating Z arrays for bucket 8\n  bucket 4: 60%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 5: 40%\n  bucket 3: 80%\n  bucket 4: 70%\n  Entering block accumulator loop for bucket 8:\n  bucket 3: 90%\n  bucket 4: 80%\n  Entering block accumulator loop for bucket 6:\n  bucket 7: 20%\n  bucket 5: 50%\n  bucket 3: 100%\n  bucket 8: 10%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 6: 10%\n  bucket 5: 60%\n  bucket 7: 30%\n  bucket 4: 100%\n  bucket 6: 20%\n  Sorting block of length 68 for bucket 4\n  bucket 7: 40%\n  (Using difference cover)\n  bucket 6: 30%\n  bucket 8: 20%\n  bucket 5: 70%\n  bucket 6: 40%\n  bucket 7: 50%\n  bucket 8: 30%\n  bucket 5: 80%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 6: 50%\n  bucket 5: 90%\n  bucket 7: 70%\n  bucket 6: 60%\n  bucket 8: 50%\n  bucket 7: 80%\n  bucket 5: 100%\n  bucket 6: 70%\n  Sorting block of length 63 for bucket 5\n  bucket 8: 60%\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 7: 90%\n  bucket 8: 70%\n  bucket 6: 90%\n  bucket 7: 100%\n  bucket 8: 80%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 8: 90%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 40%\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 60%\n  bucket 10: 10%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 10: 30%\n  bucket 9: 90%\n  bucket 10: 40%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 12:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 12: 10%\n  bucket 13: 30%\n  bucket 12: 20%\n  Sorting block time: 00:00:00\n  bucket 13: 40%\n  bucket 12: 30%\n  bucket 13: 50%\n  bucket 12: 40%\n  bucket 13: 60%\n  bucket 12: 50%\n  bucket 13: 70%\n  bucket 12: 60%\nReturning block of 96 for bucket 11\n  bucket 13: 80%\n  bucket 12: 70%\n  bucket 13: 90%\n  bucket 12: 80%\n  bucket 13: 100%\n  bucket 12: 90%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 19: 20%\n  bucket 18: 10%\n  bucket 19: 30%\n  bucket 18: 20%\n  bucket 19: 40%\n  bucket 18: 30%\n  bucket 19: 50%\n  bucket 18: 40%\n  bucket 19: 60%\n  bucket 18: 50%\n  bucket 19: 70%\n  bucket 18: 60%\n  bucket 19: 80%\n  bucket 18: 70%\n  bucket 19: 90%\n  bucket 18: 80%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  bucket 20: 50%\n  Calculating Z arrays for bucket 21\n  bucket 20: 60%\n  bucket 20: 70%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 80%\n  bucket 21: 10%\n  bucket 20: 90%\n  bucket 21: 20%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 23: 20%\n  bucket 22: 70%\n  bucket 23: 30%\n  bucket 22: 80%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 22: 90%\n  bucket 23: 60%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 60%\n  bucket 26: 10%\n  bucket 25: 70%\n  bucket 26: 20%\n  bucket 25: 80%\n  bucket 26: 30%\n  bucket 25: 90%\n  bucket 26: 40%\n  bucket 25: 100%\n  bucket 26: 50%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\nGetting block 27 of 60\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nReturning block of 67 for bucket 25\n  Entering block accumulator loop for bucket 27:\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 30: 40%\n  bucket 30: 50%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 31: 10%\n  bucket 30: 80%\n  bucket 31: 20%\n  bucket 30: 90%\n  bucket 31: 30%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 35: 80%\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 36:\n  bucket 37: 10%\n  bucket 35: 90%\n  bucket 36: 10%\n  bucket 37: 20%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 37: 30%\n  bucket 36: 20%\n  bucket 37: 40%\n  bucket 36: 30%\n  bucket 37: 50%\n  bucket 36: 40%\n  bucket 37: 60%\n  bucket 36: 50%\n  bucket 37: 70%\n  bucket 36: 60%\n  bucket 37: 80%\n  bucket 36: 70%\n  bucket 37: 90%\n  bucket 36: 80%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 36: 90%\n  Sorting block time: 00:00:00\n  bucket 36: 100%\nReturning block of 113 for bucket 35\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 39:\n  bucket 40: 10%\n  bucket 39: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 39: 20%\n  bucket 40: 60%\n  bucket 39: 30%\n  bucket 40: 70%\n  bucket 39: 40%\n  bucket 40: 80%\n  bucket 39: 50%\n  bucket 40: 90%\n  bucket 39: 60%\n  bucket 40: 100%\n  bucket 39: 70%\n  Sorting block of length 41 for bucket 40\n  bucket 39: 80%\n  (Using difference cover)\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Reserving size (126) for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Calculating Z arrays for bucket 41\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 43:\n  bucket 41: 10%\n  bucket 43: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  Entering block accumulator loop for bucket 42:\n  bucket 43: 20%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 42: 10%\n  bucket 43: 30%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 42: 20%\n  bucket 43: 40%\n  bucket 41: 80%\n  bucket 42: 30%\n  bucket 41: 90%\n  bucket 43: 50%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 43: 60%\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 70%\n  bucket 42: 40%\n  bucket 43: 80%\n  bucket 42: 50%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 90%\n  bucket 42: 60%\n  bucket 44: 10%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 20%\n  bucket 42: 70%\n  bucket 44: 30%\n  bucket 42: 80%\n  bucket 44: 40%\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  bucket 42: 90%\n  bucket 44: 50%\n  bucket 42: 100%\n  bucket 44: 60%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  bucket 45: 40%\n  bucket 45: 50%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 46: 10%\n  bucket 45: 80%\n  bucket 46: 20%\n  bucket 45: 90%\n  bucket 46: 30%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 20%\n  bucket 52: 10%\n  bucket 51: 30%\n  bucket 52: 20%\n  bucket 51: 40%\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  bucket 52: 30%\n  bucket 51: 50%\n  bucket 52: 40%\n  bucket 51: 60%\n  bucket 52: 50%\n  Calculating Z arrays for bucket 53\n  bucket 51: 70%\n  bucket 52: 60%\n  bucket 51: 80%\n  bucket 52: 70%\n  Entering block accumulator loop for bucket 53:\n  bucket 51: 90%\n  bucket 52: 80%\n  bucket 53: 10%\n  bucket 51: 100%\n  bucket 52: 90%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 54:\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 10%\n  bucket 55: 10%\n  bucket 54: 20%\n  bucket 55: 20%\n  bucket 54: 30%\n  bucket 55: 30%\n  bucket 54: 40%\n  bucket 55: 40%\n  bucket 54: 50%\n  bucket 55: 50%\n  bucket 54: 60%\n  bucket 55: 60%\n  bucket 54: 70%\n  bucket 55: 70%\n  bucket 54: 80%\n  bucket 55: 80%\n  bucket 54: 90%\n  bucket 55: 90%\n  bucket 54: 100%\n  bucket 55: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  Sorting block time: 00:00:00\n  bucket 57: 30%\nReturning block of 56 for bucket 56\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 58: 20%\n  bucket 59: 20%\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  bucket 59: 30%\n  bucket 58: 30%\n  Calculating Z arrays for bucket 60\n  bucket 59: 40%\n  bucket 58: 40%\n  bucket 59: 50%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 60%\n  bucket 60: 10%\n  bucket 59: 70%\n  bucket 60: 20%\n  bucket 59: 80%\n  bucket 60: 30%\n  bucket 59: 90%\n  bucket 60: 40%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 58: 50%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 58: 60%\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:01:25", "plugin": "core", "name": "end_epoch", "raw_value": "1708671685.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:01:24", "plugin": "core", "name": "start_epoch", "raw_value": "1708671684.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-9", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 9, "time_seconds": 29.307140350341797, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "d6cecda3c58419ac"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "5e1d835d506fd5b8"}, "library|input_2": {"src": "hda", "id": "856c3a8947b2c9f2"}, "library|rna_strandness": "FR", "library|type": "paired"}, "job": {"model_class": "Job", "id": "e6c19e36c5a2d19d", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:54:53.342504", "create_time": "2024-02-23T06:54:42.603046", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-8nkxm", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/4/5/5/dataset_4552429f-7fb7-4075-9664-1961dbd8271c.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/9/b/d/dataset_9bd1c849-4e5e-4aba-b41c-0433e1a0a2f8.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/f/c/7/dataset_fc78d02c-7693-4b3b-80a0-9912f0c6e44b.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'      --rna-strandness FR                           | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/2/c/c/dataset_2cc40833-30f0-4df2-9459-ecc2163fe303.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 169, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 170, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"FR\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 168, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "d6cecda3c58419ac", "src": "hda", "uuid": "4552429f-7fb7-4075-9664-1961dbd8271c"}, "library|input_1": {"id": "5e1d835d506fd5b8", "src": "hda", "uuid": "9bd1c849-4e5e-4aba-b41c-0433e1a0a2f8"}, "library|input_2": {"id": "856c3a8947b2c9f2", "src": "hda", "uuid": "fc78d02c-7693-4b3b-80a0-9912f0c6e44b"}}, "outputs": {"output_alignments": {"id": "3b6e340b9fef16e1", "src": "hda", "uuid": "2cc40833-30f0-4df2-9459-ecc2163fe303"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\nGetting block 3 of 60\nGetting block 4 of 60\n  Reserving size (126) for bucket 1\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 4\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 3\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\nGetting block 5 of 60\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 10%\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 5\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 2:\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  bucket 2: 10%\n  Calculating Z arrays for bucket 6\n  bucket 1: 10%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 5\n  bucket 1: 20%\n  bucket 4: 30%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 20%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 10%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 5: 10%\n  bucket 4: 50%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 4: 60%\n  bucket 1: 40%\n  bucket 5: 20%\n  bucket 8: 10%\n  bucket 2: 30%\n  bucket 3: 40%\n  bucket 7: 30%\n  bucket 4: 70%\n  bucket 6: 40%\n  bucket 2: 40%\n  bucket 4: 80%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 3: 50%\n  bucket 4: 90%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 8: 20%\n  bucket 3: 60%\n  bucket 5: 30%\n  bucket 4: 100%\n  bucket 1: 60%\n  bucket 6: 60%\n  bucket 5: 40%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 6: 70%\n  bucket 3: 70%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 3: 80%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 3: 90%\n  bucket 5: 50%\n  bucket 8: 30%\n  bucket 1: 80%\n  bucket 7: 70%\n  bucket 3: 100%\n  bucket 6: 90%\n  bucket 5: 60%\n  bucket 8: 40%\n  bucket 2: 70%\n  bucket 5: 70%\n  Sorting block of length 106 for bucket 3\n  bucket 6: 100%\n  (Using difference cover)\n  bucket 5: 80%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 5: 90%\n  bucket 8: 50%\n  bucket 1: 90%\n  bucket 5: 100%\n  bucket 2: 90%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 1: 100%\n  bucket 7: 80%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  bucket 7: 100%\n  bucket 8: 70%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  Sorting block time: 00:00:00\n  bucket 10: 20%\nReturning block of 125 for bucket 9\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\nGetting block 13 of 60\n  bucket 11: 20%\n  Reserving size (126) for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Calculating Z arrays for bucket 13\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  Entering block accumulator loop for bucket 13:\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 13: 10%\n  bucket 11: 60%\n  bucket 13: 20%\n  bucket 12: 40%\n  bucket 13: 30%\n  bucket 12: 50%\n  bucket 13: 40%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 13: 50%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 13: 60%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  bucket 13: 70%\n  bucket 12: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 14: 30%\n  bucket 15: 60%\n  bucket 14: 40%\n  bucket 15: 70%\n  bucket 14: 50%\n  bucket 15: 80%\n  bucket 14: 60%\n  bucket 15: 90%\n  bucket 14: 70%\n  bucket 15: 100%\n  bucket 14: 80%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Entering block accumulator loop for bucket 16:\n  Calculating Z arrays for bucket 17\n  bucket 16: 10%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 16: 20%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 30%\n  bucket 17: 10%\nGetting block 19 of 60\n  bucket 16: 40%\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 16: 50%\n  bucket 17: 30%\n  bucket 16: 60%\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 17: 50%\n  bucket 16: 70%\n  bucket 17: 60%\n  Reserving size (126) for bucket 19\n  bucket 16: 80%\n  bucket 18: 20%\n  bucket 17: 70%\n  bucket 16: 90%\n  bucket 17: 80%\n  bucket 18: 30%\n  bucket 16: 100%\n  bucket 17: 90%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 18: 40%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 50%\n  bucket 18: 60%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 18: 70%\n  bucket 18: 80%\n  Entering block accumulator loop for bucket 20:\n  bucket 18: 90%\n  bucket 20: 10%\n  Calculating Z arrays for bucket 19\n  bucket 20: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 20: 30%\n  bucket 18: 100%\n  bucket 20: 40%\n  Sorting block time: 00:00:00\n  bucket 19: 10%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  bucket 19: 20%\nReturning block of 101 for bucket 16\n  bucket 19: 30%\n  bucket 20: 50%\n  bucket 19: 40%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 19: 60%\n  bucket 20: 80%\n  bucket 19: 70%\n  bucket 20: 90%\n  bucket 19: 80%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 19: 90%\nReturning block of 123 for bucket 18\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  bucket 22: 20%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 30%\n  bucket 23: 10%\n  bucket 22: 40%\n  bucket 23: 20%\n  bucket 22: 50%\n  bucket 23: 30%\n  bucket 22: 60%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 22: 90%\n  bucket 23: 90%\n  bucket 22: 100%\n  bucket 23: 100%\n  Sorting block of length 80 for bucket 22\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 25:\n  bucket 26: 10%\n  bucket 25: 10%\n  bucket 26: 20%\n  bucket 25: 20%\n  bucket 26: 30%\n  bucket 25: 30%\n  bucket 26: 40%\n  bucket 25: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 25: 50%\n  bucket 26: 90%\n  bucket 25: 60%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  bucket 27: 50%\n  Entering block accumulator loop for bucket 29:\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 29: 20%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 29: 30%\n  Entering block accumulator loop for bucket 30:\n  bucket 27: 80%\n  bucket 29: 40%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 29: 50%\n  bucket 30: 10%\n  bucket 29: 60%\n  bucket 30: 20%\n  bucket 27: 100%\n  bucket 28: 80%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 30: 30%\n  bucket 28: 90%\n  bucket 30: 40%\n  bucket 29: 80%\n  bucket 30: 50%\n  bucket 28: 100%\n  bucket 29: 90%\n  Sorting block of length 106 for bucket 28\n  bucket 30: 60%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 70%\n  (Using difference cover)\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 32:\n  Entering block accumulator loop for bucket 31:\n  bucket 32: 10%\n  bucket 31: 10%\n  bucket 32: 20%\n  bucket 31: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 31: 30%\n  bucket 32: 50%\n  bucket 31: 40%\n  bucket 32: 60%\n  bucket 31: 50%\n  bucket 32: 70%\n  bucket 31: 60%\n  bucket 32: 80%\n  bucket 31: 70%\n  bucket 32: 90%\n  bucket 31: 80%\n  bucket 32: 100%\n  bucket 31: 90%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nReturning block of 113 for bucket 35\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 40%\n  bucket 36: 50%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 37: 10%\n  bucket 36: 90%\n  bucket 36: 100%\n  bucket 37: 20%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  Sorting block time: 00:00:00\n  bucket 37: 70%\nReturning block of 121 for bucket 36\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\nGetting block 41 of 60\n  bucket 40: 20%\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 30%\n  bucket 40: 40%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 41: 10%\n  bucket 40: 70%\n  bucket 41: 20%\n  bucket 40: 80%\n  bucket 41: 30%\n  bucket 40: 90%\n  bucket 41: 40%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 43:\n  Entering block accumulator loop for bucket 42:\n  bucket 43: 10%\n  bucket 42: 10%\n  bucket 43: 20%\n  bucket 42: 20%\n  bucket 43: 30%\n  bucket 42: 30%\n  bucket 43: 40%\n  bucket 42: 40%\n  bucket 43: 50%\n  bucket 42: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 42: 60%\n  bucket 43: 90%\n  bucket 42: 70%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\nGetting block 45 of 60\n  bucket 44: 30%\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 45: 10%\n  bucket 44: 90%\n  bucket 45: 20%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 10%\n  bucket 47: 10%\n  bucket 46: 20%\n  bucket 47: 20%\n  bucket 46: 30%\n  bucket 47: 30%\n  bucket 46: 40%\n  bucket 47: 40%\n  bucket 46: 50%\n  bucket 47: 50%\n  bucket 46: 60%\n  bucket 47: 60%\n  bucket 46: 70%\n  bucket 47: 70%\n  bucket 46: 80%\n  bucket 47: 80%\n  bucket 46: 90%\n  bucket 47: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 20%\n  bucket 50: 30%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 40%\n  bucket 51: 10%\n  bucket 50: 50%\n  bucket 51: 20%\n  bucket 50: 60%\n  bucket 51: 30%\n  bucket 50: 70%\n  bucket 51: 40%\n  bucket 50: 80%\n  bucket 51: 50%\n  bucket 50: 90%\n  bucket 51: 60%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 53 of 60\n  Entering block accumulator loop for bucket 52:\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  bucket 52: 10%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 20%\n  Entering block accumulator loop for bucket 54:\n  bucket 52: 30%\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 52: 40%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 52: 50%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 52: 60%\n  bucket 53: 40%\n  bucket 54: 40%\n  bucket 52: 70%\n  bucket 53: 50%\n  bucket 54: 50%\n  bucket 52: 80%\n  bucket 53: 60%\n  bucket 54: 60%\n  bucket 53: 70%\n  bucket 52: 90%\n  bucket 54: 70%\n  bucket 53: 80%\n  bucket 52: 100%\n  bucket 54: 80%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 90%\n  bucket 54: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 55 of 60\nGetting block 56 of 60\n  Reserving size (126) for bucket 55\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 56: 10%\n  bucket 55: 20%\n  bucket 56: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 56: 30%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 56: 40%\n  bucket 55: 70%\n  bucket 56: 50%\n  bucket 55: 80%\n  bucket 56: 60%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:01\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:01\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\nGetting block 3 of 60\nGetting block 4 of 60\n  Reserving size (126) for bucket 1\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 4\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 3\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\nGetting block 5 of 60\n  Entering block accumulator loop for bucket 3:\n  bucket 4: 10%\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 5\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 2:\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  bucket 2: 10%\n  Calculating Z arrays for bucket 6\n  bucket 1: 10%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 5\n  bucket 1: 20%\n  bucket 4: 30%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 20%\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 10%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 5: 10%\n  bucket 4: 50%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 4: 60%\n  bucket 1: 40%\n  bucket 5: 20%\n  bucket 8: 10%\n  bucket 2: 30%\n  bucket 3: 40%\n  bucket 7: 30%\n  bucket 4: 70%\n  bucket 6: 40%\n  bucket 2: 40%\n  bucket 4: 80%\n  bucket 7: 40%\n  bucket 6: 50%\n  bucket 3: 50%\n  bucket 4: 90%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 8: 20%\n  bucket 3: 60%\n  bucket 5: 30%\n  bucket 4: 100%\n  bucket 1: 60%\n  bucket 6: 60%\n  bucket 5: 40%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 6: 70%\n  bucket 3: 70%\n  bucket 1: 70%\n  bucket 2: 60%\n  bucket 3: 80%\n  bucket 6: 80%\n  bucket 7: 60%\n  bucket 3: 90%\n  bucket 5: 50%\n  bucket 8: 30%\n  bucket 1: 80%\n  bucket 7: 70%\n  bucket 3: 100%\n  bucket 6: 90%\n  bucket 5: 60%\n  bucket 8: 40%\n  bucket 2: 70%\n  bucket 5: 70%\n  Sorting block of length 106 for bucket 3\n  bucket 6: 100%\n  (Using difference cover)\n  bucket 5: 80%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 5: 90%\n  bucket 8: 50%\n  bucket 1: 90%\n  bucket 5: 100%\n  bucket 2: 90%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 1: 100%\n  bucket 7: 80%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  bucket 7: 100%\n  bucket 8: 70%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  Sorting block time: 00:00:00\n  bucket 10: 20%\nReturning block of 125 for bucket 9\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\nGetting block 13 of 60\n  bucket 11: 20%\n  Reserving size (126) for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Calculating Z arrays for bucket 13\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  Entering block accumulator loop for bucket 13:\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 13: 10%\n  bucket 11: 60%\n  bucket 13: 20%\n  bucket 12: 40%\n  bucket 13: 30%\n  bucket 12: 50%\n  bucket 13: 40%\n  bucket 12: 60%\n  bucket 11: 70%\n  bucket 13: 50%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 13: 60%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  bucket 13: 70%\n  bucket 12: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 15:\n  bucket 14: 10%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 14: 30%\n  bucket 15: 60%\n  bucket 14: 40%\n  bucket 15: 70%\n  bucket 14: 50%\n  bucket 15: 80%\n  bucket 14: 60%\n  bucket 15: 90%\n  bucket 14: 70%\n  bucket 15: 100%\n  bucket 14: 80%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Entering block accumulator loop for bucket 16:\n  Calculating Z arrays for bucket 17\n  bucket 16: 10%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 16: 20%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 30%\n  bucket 17: 10%\nGetting block 19 of 60\n  bucket 16: 40%\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 16: 50%\n  bucket 17: 30%\n  bucket 16: 60%\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 17: 50%\n  bucket 16: 70%\n  bucket 17: 60%\n  Reserving size (126) for bucket 19\n  bucket 16: 80%\n  bucket 18: 20%\n  bucket 17: 70%\n  bucket 16: 90%\n  bucket 17: 80%\n  bucket 18: 30%\n  bucket 16: 100%\n  bucket 17: 90%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 18: 40%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 50%\n  bucket 18: 60%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 18: 70%\n  bucket 18: 80%\n  Entering block accumulator loop for bucket 20:\n  bucket 18: 90%\n  bucket 20: 10%\n  Calculating Z arrays for bucket 19\n  bucket 20: 20%\n  Entering block accumulator loop for bucket 19:\n  bucket 20: 30%\n  bucket 18: 100%\n  bucket 20: 40%\n  Sorting block time: 00:00:00\n  bucket 19: 10%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  bucket 19: 20%\nReturning block of 101 for bucket 16\n  bucket 19: 30%\n  bucket 20: 50%\n  bucket 19: 40%\n  bucket 20: 60%\n  bucket 19: 50%\n  bucket 20: 70%\n  bucket 19: 60%\n  bucket 20: 80%\n  bucket 19: 70%\n  bucket 20: 90%\n  bucket 19: 80%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 19: 90%\nReturning block of 123 for bucket 18\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  bucket 22: 20%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 30%\n  bucket 23: 10%\n  bucket 22: 40%\n  bucket 23: 20%\n  bucket 22: 50%\n  bucket 23: 30%\n  bucket 22: 60%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 22: 90%\n  bucket 23: 90%\n  bucket 22: 100%\n  bucket 23: 100%\n  Sorting block of length 80 for bucket 22\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 25:\n  bucket 26: 10%\n  bucket 25: 10%\n  bucket 26: 20%\n  bucket 25: 20%\n  bucket 26: 30%\n  bucket 25: 30%\n  bucket 26: 40%\n  bucket 25: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 25: 50%\n  bucket 26: 90%\n  bucket 25: 60%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  bucket 27: 50%\n  Entering block accumulator loop for bucket 29:\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  bucket 27: 60%\n  bucket 28: 50%\n  bucket 29: 20%\n  bucket 27: 70%\n  bucket 28: 60%\n  bucket 29: 30%\n  Entering block accumulator loop for bucket 30:\n  bucket 27: 80%\n  bucket 29: 40%\n  bucket 28: 70%\n  bucket 27: 90%\n  bucket 29: 50%\n  bucket 30: 10%\n  bucket 29: 60%\n  bucket 30: 20%\n  bucket 27: 100%\n  bucket 28: 80%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 30: 30%\n  bucket 28: 90%\n  bucket 30: 40%\n  bucket 29: 80%\n  bucket 30: 50%\n  bucket 28: 100%\n  bucket 29: 90%\n  Sorting block of length 106 for bucket 28\n  bucket 30: 60%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 70%\n  (Using difference cover)\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 32:\n  Entering block accumulator loop for bucket 31:\n  bucket 32: 10%\n  bucket 31: 10%\n  bucket 32: 20%\n  bucket 31: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 31: 30%\n  bucket 32: 50%\n  bucket 31: 40%\n  bucket 32: 60%\n  bucket 31: 50%\n  bucket 32: 70%\n  bucket 31: 60%\n  bucket 32: 80%\n  bucket 31: 70%\n  bucket 32: 90%\n  bucket 31: 80%\n  bucket 32: 100%\n  bucket 31: 90%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nReturning block of 113 for bucket 35\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 40%\n  bucket 36: 50%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 37: 10%\n  bucket 36: 90%\n  bucket 36: 100%\n  bucket 37: 20%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  Sorting block time: 00:00:00\n  bucket 37: 70%\nReturning block of 121 for bucket 36\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\nGetting block 41 of 60\n  bucket 40: 20%\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 30%\n  bucket 40: 40%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 41: 10%\n  bucket 40: 70%\n  bucket 41: 20%\n  bucket 40: 80%\n  bucket 41: 30%\n  bucket 40: 90%\n  bucket 41: 40%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 43:\n  Entering block accumulator loop for bucket 42:\n  bucket 43: 10%\n  bucket 42: 10%\n  bucket 43: 20%\n  bucket 42: 20%\n  bucket 43: 30%\n  bucket 42: 30%\n  bucket 43: 40%\n  bucket 42: 40%\n  bucket 43: 50%\n  bucket 42: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 42: 60%\n  bucket 43: 90%\n  bucket 42: 70%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\nGetting block 45 of 60\n  bucket 44: 30%\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 45: 10%\n  bucket 44: 90%\n  bucket 45: 20%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 10%\n  bucket 47: 10%\n  bucket 46: 20%\n  bucket 47: 20%\n  bucket 46: 30%\n  bucket 47: 30%\n  bucket 46: 40%\n  bucket 47: 40%\n  bucket 46: 50%\n  bucket 47: 50%\n  bucket 46: 60%\n  bucket 47: 60%\n  bucket 46: 70%\n  bucket 47: 70%\n  bucket 46: 80%\n  bucket 47: 80%\n  bucket 46: 90%\n  bucket 47: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 20%\n  bucket 50: 30%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 40%\n  bucket 51: 10%\n  bucket 50: 50%\n  bucket 51: 20%\n  bucket 50: 60%\n  bucket 51: 30%\n  bucket 50: 70%\n  bucket 51: 40%\n  bucket 50: 80%\n  bucket 51: 50%\n  bucket 50: 90%\n  bucket 51: 60%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 53 of 60\n  Entering block accumulator loop for bucket 52:\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  bucket 52: 10%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 20%\n  Entering block accumulator loop for bucket 54:\n  bucket 52: 30%\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 52: 40%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 52: 50%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 52: 60%\n  bucket 53: 40%\n  bucket 54: 40%\n  bucket 52: 70%\n  bucket 53: 50%\n  bucket 54: 50%\n  bucket 52: 80%\n  bucket 53: 60%\n  bucket 54: 60%\n  bucket 53: 70%\n  bucket 52: 90%\n  bucket 54: 70%\n  bucket 53: 80%\n  bucket 52: 100%\n  bucket 54: 80%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 90%\n  bucket 54: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 55 of 60\nGetting block 56 of 60\n  Reserving size (126) for bucket 55\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 56: 10%\n  bucket 55: 20%\n  bucket 56: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 56: 30%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 56: 40%\n  bucket 55: 70%\n  bucket 56: 50%\n  bucket 55: 80%\n  bucket 56: 60%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:54:45", "plugin": "core", "name": "end_epoch", "raw_value": "1708671285.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:54:44", "plugin": "core", "name": "start_epoch", "raw_value": "1708671284.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "hisat2/2.2.1+galaxy1-9", "has_data": true, "data": {"tool_id": "hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 9, "time_seconds": 27.65343165397644, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "e681b379d959d7a0"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "67deefaf18c08b58"}, "library|input_2": {"src": "hda", "id": "4b77c40675d2e585"}, "library|rna_strandness": "FR", "library|type": "paired"}, "job": {"model_class": "Job", "id": "f8d26f9ba7bd2974", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:02:00.799192", "create_time": "2024-02-23T07:01:51.148776", "galaxy_version": "23.1", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-s4zvz", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/1/2/f/dataset_12ff3a12-497d-4c5f-a05a-f854c51103e5.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/6/8/c/dataset_68c7d102-91de-4a6e-a4b0-237a32cc8c9d.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/d/5/5/dataset_d555e62b-cd7f-47b5-b633-6ff6acc313ab.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'      --rna-strandness FR                           | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/f/3/7/dataset_f374d228-8090-4afd-8ab1-4337f647e24c.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 232, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 233, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"FR\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 231, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"reference_genome|history_item": {"id": "e681b379d959d7a0", "src": "hda", "uuid": "12ff3a12-497d-4c5f-a05a-f854c51103e5"}, "library|input_1": {"id": "67deefaf18c08b58", "src": "hda", "uuid": "68c7d102-91de-4a6e-a4b0-237a32cc8c9d"}, "library|input_2": {"id": "4b77c40675d2e585", "src": "hda", "uuid": "d555e62b-cd7f-47b5-b633-6ff6acc313ab"}}, "outputs": {"output_alignments": {"id": "8ec6a2077cdffee7", "src": "hda", "uuid": "f374d228-8090-4afd-8ab1-4337f647e24c"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\nGetting block 5 of 60\n  Entering block accumulator loop for bucket 1:\nGetting block 6 of 60\n  bucket 1: 10%\n  Reserving size (126) for bucket 6\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 5\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\nGetting block 7 of 60\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 5\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 20%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 10%\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 6: 10%\n  bucket 1: 30%\n  bucket 5: 20%\n  bucket 7: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 5: 30%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 7: 30%\n  bucket 1: 40%\n  bucket 5: 40%\n  bucket 3: 40%\n  bucket 7: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 50%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 2: 20%\n  bucket 3: 60%\n  bucket 7: 50%\n  bucket 4: 40%\n  bucket 1: 50%\n  bucket 6: 30%\n  bucket 4: 50%\n  bucket 5: 60%\n  bucket 7: 60%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 5: 70%\n  bucket 8: 10%\n  bucket 7: 70%\n  bucket 3: 80%\n  bucket 5: 80%\n  bucket 6: 40%\n  bucket 1: 60%\n  bucket 5: 90%\n  bucket 3: 90%\n  bucket 8: 20%\n  bucket 2: 30%\n  bucket 7: 80%\n  bucket 5: 100%\n  bucket 4: 70%\n  bucket 6: 50%\n  bucket 7: 90%\n  bucket 3: 100%\n  bucket 2: 40%\n  bucket 8: 30%\n  Sorting block of length 63 for bucket 5\n  bucket 7: 100%\n  bucket 4: 80%\n  bucket 1: 70%\n  Sorting block of length 75 for bucket 7\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 1: 80%\n  bucket 2: 50%\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 2: 60%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 106 for bucket 3\n  bucket 8: 40%\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 8: 50%\n  bucket 2: 80%\n  bucket 6: 70%\n  bucket 1: 100%\n  bucket 2: 90%\n  Sorting block of length 42 for bucket 1\n  bucket 8: 60%\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 6: 80%\n  bucket 8: 70%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 60\n  bucket 10: 10%\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 20%\n  bucket 10: 30%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 40%\n  bucket 11: 10%\n  bucket 10: 50%\n  bucket 11: 20%\n  bucket 10: 60%\n  bucket 11: 30%\n  bucket 10: 70%\n  bucket 11: 40%\n  bucket 10: 80%\n  bucket 11: 50%\n  bucket 10: 90%\n  bucket 11: 60%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  bucket 12: 30%\n  Calculating Z arrays for bucket 13\n  bucket 12: 40%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 50%\n  bucket 13: 10%\n  bucket 12: 60%\n  bucket 13: 20%\n  bucket 12: 70%\n  bucket 13: 30%\n  bucket 12: 80%\n  bucket 13: 40%\n  bucket 12: 90%\n  bucket 13: 50%\n  bucket 12: 100%\n  bucket 13: 60%\n  Sorting block of length 82 for bucket 12\n  bucket 13: 70%\n  (Using difference cover)\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 16: 20%\n  bucket 18: 20%\n  bucket 17: 20%\n  bucket 18: 30%\n  bucket 16: 30%\n  bucket 17: 30%\n  bucket 18: 40%\n  bucket 17: 40%\n  bucket 18: 50%\n  bucket 16: 40%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 16: 50%\n  bucket 17: 60%\n  bucket 18: 70%\n  bucket 17: 70%\n  bucket 16: 60%\n  bucket 18: 80%\n  bucket 17: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Entering block accumulator loop for bucket 20:\n  Calculating Z arrays for bucket 21\n  bucket 20: 10%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 20: 20%\n  bucket 20: 30%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 40%\n  Entering block accumulator loop for bucket 22:\n  bucket 20: 50%\n  bucket 21: 10%\n  bucket 20: 60%\n  bucket 21: 20%\n  bucket 20: 70%\n  bucket 21: 30%\n  bucket 20: 80%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 20: 90%\n  bucket 21: 60%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\nGetting block 26 of 60\n  Entering block accumulator loop for bucket 25:\n  Reserving size (126) for bucket 26\n  bucket 24: 10%\n  Calculating Z arrays for bucket 26\n  bucket 25: 10%\n  bucket 24: 20%\n  Entering block accumulator loop for bucket 26:\n  bucket 24: 30%\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 24: 40%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 24: 90%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 24: 100%\n  bucket 26: 80%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 29\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 28:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 28: 10%\n  bucket 29: 30%\n  bucket 28: 20%\n  bucket 29: 40%\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  bucket 28: 30%\n  Calculating Z arrays for bucket 30\n  bucket 29: 50%\n  bucket 28: 40%\n  bucket 29: 60%\n  Entering block accumulator loop for bucket 30:\n  bucket 28: 50%\n  bucket 30: 10%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 28: 60%\n  bucket 30: 20%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 30%\n  bucket 28: 70%\n  bucket 31: 10%\n  bucket 28: 80%\n  bucket 30: 40%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 30: 50%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  bucket 29: 80%\n  (Using difference cover)\n  bucket 30: 60%\n  bucket 29: 90%\n  bucket 30: 70%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 32:\n  bucket 33: 10%\n  bucket 32: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 32: 20%\n  bucket 33: 60%\n  bucket 32: 30%\n  bucket 33: 70%\n  bucket 32: 40%\n  bucket 33: 80%\n  bucket 32: 50%\n  bucket 33: 90%\n  bucket 32: 60%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 20%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 30%\n  bucket 36: 10%\nGetting block 37 of 60\n  bucket 35: 40%\n  bucket 36: 20%\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 30%\n  bucket 36: 40%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 50%\n  bucket 35: 50%\n  bucket 36: 60%\n  bucket 37: 10%\n  bucket 36: 70%\n  bucket 37: 20%\n  bucket 35: 60%\n  bucket 37: 30%\n  bucket 36: 80%\n  bucket 35: 70%\n  bucket 36: 90%\n  bucket 35: 80%\n  bucket 36: 100%\n  bucket 35: 90%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 37: 40%\n  bucket 37: 50%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  Sorting block time: 00:00:00\n  bucket 37: 60%\n  bucket 38: 10%\n  bucket 37: 70%\nReturning block of 121 for bucket 36\n  bucket 38: 20%\n  bucket 37: 80%\nReturning block of 113 for bucket 35\n  bucket 38: 30%\n  bucket 37: 90%\n  bucket 38: 40%\n  bucket 37: 100%\n  bucket 38: 50%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  bucket 41: 70%\n  bucket 41: 80%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 48: 10%\n  bucket 47: 40%\n  bucket 48: 20%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 48: 30%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 48: 40%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 49: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 49: 20%\n  bucket 50: 40%\n  bucket 49: 30%\n  bucket 50: 50%\n  bucket 49: 40%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 49: 50%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 52: 10%\n  bucket 51: 70%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 51: 80%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 54: 30%\n  bucket 53: 50%\n  bucket 54: 40%\n  bucket 53: 60%\n  bucket 54: 50%\n  bucket 53: 70%\n  bucket 54: 60%\n  bucket 53: 80%\n  bucket 54: 70%\n  bucket 53: 90%\n  bucket 54: 80%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 10%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 56: 10%\n  bucket 55: 50%\n  bucket 56: 20%\n  bucket 55: 60%\n  bucket 56: 30%\n  bucket 55: 70%\n  bucket 56: 40%\n  bucket 55: 80%\n  bucket 56: 50%\n  bucket 55: 90%\n  bucket 56: 60%\n  bucket 55: 100%\n  bucket 56: 70%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Entering block accumulator loop for bucket 57:\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  bucket 57: 10%\n  Calculating Z arrays for bucket 58\n  Calculating Z arrays for bucket 59\n  bucket 57: 20%\n  Entering block accumulator loop for bucket 58:\n  Entering block accumulator loop for bucket 59:\n  bucket 57: 30%\n  bucket 59: 10%\n  bucket 58: 10%\n  bucket 57: 40%\n  bucket 59: 20%\n  bucket 57: 50%\n  bucket 58: 20%\n  bucket 59: 30%\n  bucket 57: 60%\n  bucket 58: 30%\n  bucket 59: 40%\n  bucket 57: 70%\n  bucket 58: 40%\n  bucket 57: 80%\n  bucket 58: 50%\n  bucket 59: 50%\n  bucket 57: 90%\n  bucket 58: 60%\n  bucket 59: 60%\n  bucket 57: 100%\n  bucket 58: 70%\n  Sorting block of length 85 for bucket 57\n  bucket 59: 70%\n  (Using difference cover)\n  bucket 58: 80%\n  bucket 59: 80%\n  bucket 58: 90%\n  bucket 59: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\nGetting block 5 of 60\n  Entering block accumulator loop for bucket 1:\nGetting block 6 of 60\n  bucket 1: 10%\n  Reserving size (126) for bucket 6\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Reserving size (126) for bucket 5\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\nGetting block 7 of 60\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 5\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 20%\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 10%\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 6: 10%\n  bucket 1: 30%\n  bucket 5: 20%\n  bucket 7: 10%\n  bucket 4: 10%\n  bucket 3: 20%\n  bucket 5: 30%\n  bucket 7: 20%\n  bucket 6: 20%\n  bucket 4: 20%\n  bucket 3: 30%\n  bucket 7: 30%\n  bucket 1: 40%\n  bucket 5: 40%\n  bucket 3: 40%\n  bucket 7: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 50%\n  bucket 3: 50%\n  bucket 4: 30%\n  bucket 2: 20%\n  bucket 3: 60%\n  bucket 7: 50%\n  bucket 4: 40%\n  bucket 1: 50%\n  bucket 6: 30%\n  bucket 4: 50%\n  bucket 5: 60%\n  bucket 7: 60%\n  bucket 3: 70%\n  bucket 4: 60%\n  bucket 5: 70%\n  bucket 8: 10%\n  bucket 7: 70%\n  bucket 3: 80%\n  bucket 5: 80%\n  bucket 6: 40%\n  bucket 1: 60%\n  bucket 5: 90%\n  bucket 3: 90%\n  bucket 8: 20%\n  bucket 2: 30%\n  bucket 7: 80%\n  bucket 5: 100%\n  bucket 4: 70%\n  bucket 6: 50%\n  bucket 7: 90%\n  bucket 3: 100%\n  bucket 2: 40%\n  bucket 8: 30%\n  Sorting block of length 63 for bucket 5\n  bucket 7: 100%\n  bucket 4: 80%\n  bucket 1: 70%\n  Sorting block of length 75 for bucket 7\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 1: 80%\n  bucket 2: 50%\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 2: 60%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 106 for bucket 3\n  bucket 8: 40%\n  (Using difference cover)\n  bucket 2: 70%\n  bucket 1: 90%\n  bucket 8: 50%\n  bucket 2: 80%\n  bucket 6: 70%\n  bucket 1: 100%\n  bucket 2: 90%\n  Sorting block of length 42 for bucket 1\n  bucket 8: 60%\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 6: 80%\n  bucket 8: 70%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Entering block accumulator loop for bucket 10:\nGetting block 11 of 60\n  bucket 10: 10%\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 20%\n  bucket 10: 30%\n  Entering block accumulator loop for bucket 11:\n  bucket 10: 40%\n  bucket 11: 10%\n  bucket 10: 50%\n  bucket 11: 20%\n  bucket 10: 60%\n  bucket 11: 30%\n  bucket 10: 70%\n  bucket 11: 40%\n  bucket 10: 80%\n  bucket 11: 50%\n  bucket 10: 90%\n  bucket 11: 60%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  bucket 12: 30%\n  Calculating Z arrays for bucket 13\n  bucket 12: 40%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 50%\n  bucket 13: 10%\n  bucket 12: 60%\n  bucket 13: 20%\n  bucket 12: 70%\n  bucket 13: 30%\n  bucket 12: 80%\n  bucket 13: 40%\n  bucket 12: 90%\n  bucket 13: 50%\n  bucket 12: 100%\n  bucket 13: 60%\n  Sorting block of length 82 for bucket 12\n  bucket 13: 70%\n  (Using difference cover)\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 16: 20%\n  bucket 18: 20%\n  bucket 17: 20%\n  bucket 18: 30%\n  bucket 16: 30%\n  bucket 17: 30%\n  bucket 18: 40%\n  bucket 17: 40%\n  bucket 18: 50%\n  bucket 16: 40%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 16: 50%\n  bucket 17: 60%\n  bucket 18: 70%\n  bucket 17: 70%\n  bucket 16: 60%\n  bucket 18: 80%\n  bucket 17: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Entering block accumulator loop for bucket 20:\n  Calculating Z arrays for bucket 21\n  bucket 20: 10%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 20: 20%\n  bucket 20: 30%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 40%\n  Entering block accumulator loop for bucket 22:\n  bucket 20: 50%\n  bucket 21: 10%\n  bucket 20: 60%\n  bucket 21: 20%\n  bucket 20: 70%\n  bucket 21: 30%\n  bucket 20: 80%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 20: 90%\n  bucket 21: 60%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\nGetting block 26 of 60\n  Entering block accumulator loop for bucket 25:\n  Reserving size (126) for bucket 26\n  bucket 24: 10%\n  Calculating Z arrays for bucket 26\n  bucket 25: 10%\n  bucket 24: 20%\n  Entering block accumulator loop for bucket 26:\n  bucket 24: 30%\n  bucket 25: 20%\n  bucket 26: 10%\n  bucket 24: 40%\n  bucket 25: 30%\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 26: 40%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 26: 50%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 26: 60%\n  bucket 25: 80%\n  bucket 24: 90%\n  bucket 26: 70%\n  bucket 25: 90%\n  bucket 24: 100%\n  bucket 26: 80%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 29\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 29:\n  Entering block accumulator loop for bucket 28:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 28: 10%\n  bucket 29: 30%\n  bucket 28: 20%\n  bucket 29: 40%\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  bucket 28: 30%\n  Calculating Z arrays for bucket 30\n  bucket 29: 50%\n  bucket 28: 40%\n  bucket 29: 60%\n  Entering block accumulator loop for bucket 30:\n  bucket 28: 50%\n  bucket 30: 10%\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  bucket 28: 60%\n  bucket 30: 20%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 30%\n  bucket 28: 70%\n  bucket 31: 10%\n  bucket 28: 80%\n  bucket 30: 40%\n  bucket 28: 90%\n  bucket 29: 70%\n  bucket 30: 50%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  bucket 29: 80%\n  (Using difference cover)\n  bucket 30: 60%\n  bucket 29: 90%\n  bucket 30: 70%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 32:\n  bucket 33: 10%\n  bucket 32: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 32: 20%\n  bucket 33: 60%\n  bucket 32: 30%\n  bucket 33: 70%\n  bucket 32: 40%\n  bucket 33: 80%\n  bucket 32: 50%\n  bucket 33: 90%\n  bucket 32: 60%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 20%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 30%\n  bucket 36: 10%\nGetting block 37 of 60\n  bucket 35: 40%\n  bucket 36: 20%\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  bucket 36: 30%\n  bucket 36: 40%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 50%\n  bucket 35: 50%\n  bucket 36: 60%\n  bucket 37: 10%\n  bucket 36: 70%\n  bucket 37: 20%\n  bucket 35: 60%\n  bucket 37: 30%\n  bucket 36: 80%\n  bucket 35: 70%\n  bucket 36: 90%\n  bucket 35: 80%\n  bucket 36: 100%\n  bucket 35: 90%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 37: 40%\n  bucket 37: 50%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  Sorting block time: 00:00:00\n  bucket 37: 60%\n  bucket 38: 10%\n  bucket 37: 70%\nReturning block of 121 for bucket 36\n  bucket 38: 20%\n  bucket 37: 80%\nReturning block of 113 for bucket 35\n  bucket 38: 30%\n  bucket 37: 90%\n  bucket 38: 40%\n  bucket 37: 100%\n  bucket 38: 50%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  bucket 41: 70%\n  bucket 41: 80%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 48: 10%\n  bucket 47: 40%\n  bucket 48: 20%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 48: 30%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 48: 40%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 49: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 49: 20%\n  bucket 50: 40%\n  bucket 49: 30%\n  bucket 50: 50%\n  bucket 49: 40%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 49: 50%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 52: 10%\n  bucket 51: 70%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 51: 80%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 54: 30%\n  bucket 53: 50%\n  bucket 54: 40%\n  bucket 53: 60%\n  bucket 54: 50%\n  bucket 53: 70%\n  bucket 54: 60%\n  bucket 53: 80%\n  bucket 54: 70%\n  bucket 53: 90%\n  bucket 54: 80%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 10%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 56: 10%\n  bucket 55: 50%\n  bucket 56: 20%\n  bucket 55: 60%\n  bucket 56: 30%\n  bucket 55: 70%\n  bucket 56: 40%\n  bucket 55: 80%\n  bucket 56: 50%\n  bucket 55: 90%\n  bucket 56: 60%\n  bucket 55: 100%\n  bucket 56: 70%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Entering block accumulator loop for bucket 57:\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  bucket 57: 10%\n  Calculating Z arrays for bucket 58\n  Calculating Z arrays for bucket 59\n  bucket 57: 20%\n  Entering block accumulator loop for bucket 58:\n  Entering block accumulator loop for bucket 59:\n  bucket 57: 30%\n  bucket 59: 10%\n  bucket 58: 10%\n  bucket 57: 40%\n  bucket 59: 20%\n  bucket 57: 50%\n  bucket 58: 20%\n  bucket 59: 30%\n  bucket 57: 60%\n  bucket 58: 30%\n  bucket 59: 40%\n  bucket 57: 70%\n  bucket 58: 40%\n  bucket 57: 80%\n  bucket 58: 50%\n  bucket 59: 50%\n  bucket 57: 90%\n  bucket 58: 60%\n  bucket 59: 60%\n  bucket 57: 100%\n  bucket 58: 70%\n  Sorting block of length 85 for bucket 57\n  bucket 59: 70%\n  (Using difference cover)\n  bucket 58: 80%\n  bucket 59: 80%\n  bucket 58: 90%\n  bucket 59: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:01:53", "plugin": "core", "name": "end_epoch", "raw_value": "1708671713.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:01:53", "plugin": "core", "name": "start_epoch", "raw_value": "1708671713.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "ivar_consensus/1.2.2+galaxy0-0", "has_data": true, "data": {"tool_id": "ivar_consensus", "tool_version": "1.2.2+galaxy0", "test_index": 0, "time_seconds": 29.25040054321289, "inputs": {"input_bam": {"src": "hda", "id": "76deec31c10bfd38"}, "gap": true}, "job": {"model_class": "Job", "id": "bf1e741d7f5410b3", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:56:44.488701", "create_time": "2024-02-23T07:56:30.599665", "galaxy_version": "23.1", "command_version": "iVar version 1.2.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/ivar_consensus/ivar_consensus/1.2.2+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-q4fx7", "command_line": "ln -s '/galaxy/server/database/objects/9/6/e/dataset_96e4dfc9-b1c3-4e61-870d-226dd668461b.dat' sorted.bam && samtools mpileup -A -d 0 -Q 0 sorted.bam | ivar consensus -p consensus -q 20 -t 0.0 -m 10  -n N && sed -i \"s|consensus|PC00101P_sub_trimmed_sorted_bam|\" consensus.fa", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "gap": "true", "filter_depth": "false", "min_depth": "\"10\"", "min_freq": "\"0.0\"", "min_qual": "\"20\""}, "inputs": {"input_bam": {"id": "76deec31c10bfd38", "src": "hda", "uuid": "96e4dfc9-b1c3-4e61-870d-226dd668461b"}}, "outputs": {"consensus": {"id": "8b1da9fc75724823", "src": "hda", "uuid": "5629ecd0-5618-4f49-a9b5-bfbedc7702bc"}}, "output_collections": {}, "tool_stdout": "Minimum Quality: 20\nThreshold: 0\nMinimum depth: 10\nRegions with depth less than minimum depth covered by: N\nReference length: 29790\nPositions with 0 depth: 0\nPositions with depth below 10: 921\n", "tool_stderr": "[mpileup] 1 samples in 1 input files\n[mpileup] Max depth set to maximum value (2147483647)\n", "job_stdout": "", "job_stderr": "", "stderr": "[mpileup] 1 samples in 1 input files\n[mpileup] Max depth set to maximum value (2147483647)\n", "stdout": "Minimum Quality: 20\nThreshold: 0\nMinimum depth: 10\nRegions with depth less than minimum depth covered by: N\nReference length: 29790\nPositions with 0 depth: 0\nPositions with depth below 10: 921\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:56:36", "plugin": "core", "name": "end_epoch", "raw_value": "1708674996.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:56:34", "plugin": "core", "name": "start_epoch", "raw_value": "1708674994.0000000"}, {"title": "Memory Allocated (MB)", "value": "32641", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "32641.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "lofreq_viterbi/2.1.5+galaxy0-0", "has_data": true, "data": {"tool_id": "lofreq_viterbi", "tool_version": "2.1.5+galaxy0", "test_index": 0, "time_seconds": 34.90325570106506, "inputs": {"reads": {"src": "hda", "id": "e9d3192e5032c04b"}, "reference_source|ref": {"src": "hda", "id": "372ffd8af05d9e88"}, "reference_source|ref_selector": "history"}, "job": {"model_class": "Job", "id": "7085ecbb5e7f9740", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:52:08.354061", "create_time": "2024-02-23T07:51:49.853913", "galaxy_version": "23.1", "command_version": "2.1.5", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi/2.1.5+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-bbfbf", "command_line": "ln -s '/galaxy/server/database/objects/f/a/6/dataset_fa6ef092-4542-41c8-b5b1-8980e41233bb.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq viterbi --ref 'reference.fa'  --defqual 2 --out tmp.bam '/galaxy/server/database/objects/b/8/4/dataset_b842c0f7-72d7-4111-9bc8-6561c9b99889.dat' &&  samtools sort --no-PG -T \"${TMPDIR:-.}\" -@ ${GALAXY_SLOTS:-1} -O BAM -o '/galaxy/server/database/objects/d/c/c/dataset_dcca5ec1-a953-4c04-93a6-09d5858d25bf.dat' tmp.bam", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv_options": "{\"bq2_handling\": {\"__current_case__\": 0, \"defqual\": \"2\", \"replace_bq2\": \"keep\"}, \"keepflags\": false}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 556, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "e9d3192e5032c04b", "src": "hda", "uuid": "b842c0f7-72d7-4111-9bc8-6561c9b99889"}, "reference_source|ref": {"id": "372ffd8af05d9e88", "src": "hda", "uuid": "fa6ef092-4542-41c8-b5b1-8980e41233bb"}}, "outputs": {"realigned": {"id": "f9e4ac213de8fb49", "src": "hda", "uuid": "dcca5ec1-a953-4c04-93a6-09d5858d25bf"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "job_stdout": "", "job_stderr": "", "stderr": "[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:51:59", "plugin": "core", "name": "end_epoch", "raw_value": "1708674719.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:51:59", "plugin": "core", "name": "start_epoch", "raw_value": "1708674719.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "lofreq_viterbi/2.1.5+galaxy0-1", "has_data": true, "data": {"tool_id": "lofreq_viterbi", "tool_version": "2.1.5+galaxy0", "test_index": 1, "time_seconds": 26.33876061439514, "inputs": {"reads": {"src": "hda", "id": "b307ccfb5f43e83c"}, "reference_source|ref": {"src": "hda", "id": "22333cb911f24af5"}, "reference_source|ref_selector": "history", "adv_options|keepflags": true}, "job": {"model_class": "Job", "id": "867a88a602995916", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:52:34.896387", "create_time": "2024-02-23T07:52:24.764513", "galaxy_version": "23.1", "command_version": "2.1.5", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/lofreq_viterbi/lofreq_viterbi/2.1.5+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-wswg5", "command_line": "ln -s '/galaxy/server/database/objects/c/c/9/dataset_cc9d5763-4bf2-4902-8b6a-5eeabaed718e.dat' reference.fa && lofreq faidx reference.fa 2>&1 || echo \"Error running samtools faidx for indexing fasta reference for lofreq\" >&2 &&  lofreq viterbi --ref 'reference.fa' --keepflags --defqual 2 --out tmp.bam '/galaxy/server/database/objects/e/0/d/dataset_e0d7765f-2fcb-45cb-953f-19fb5a8e0e67.dat' &&  samtools sort --no-PG -T \"${TMPDIR:-.}\" -@ ${GALAXY_SLOTS:-1} -O BAM -o '/galaxy/server/database/objects/3/f/3/dataset_3f39679c-7428-4c4c-91e2-8bb317695d83.dat' tmp.bam", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv_options": "{\"bq2_handling\": {\"__current_case__\": 0, \"defqual\": \"2\", \"replace_bq2\": \"keep\"}, \"keepflags\": true}", "reference_source": "{\"__current_case__\": 1, \"ref\": {\"values\": [{\"id\": 559, \"src\": \"hda\"}]}, \"ref_selector\": \"history\"}"}, "inputs": {"reads": {"id": "b307ccfb5f43e83c", "src": "hda", "uuid": "e0d7765f-2fcb-45cb-953f-19fb5a8e0e67"}, "reference_source|ref": {"id": "22333cb911f24af5", "src": "hda", "uuid": "cc9d5763-4bf2-4902-8b6a-5eeabaed718e"}}, "outputs": {"realigned": {"id": "e01020de8d2d0d79", "src": "hda", "uuid": "3f39679c-7428-4c4c-91e2-8bb317695d83"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "job_stdout": "", "job_stderr": "", "stderr": "[bam_sort_core] merging from 0 files and 4 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:52:26", "plugin": "core", "name": "end_epoch", "raw_value": "1708674746.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:52:26", "plugin": "core", "name": "start_epoch", "raw_value": "1708674746.0000000"}, {"title": "Memory Allocated (MB)", "value": "16320", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "16320.0000000"}, {"title": "Cores Allocated", "value": "4", "plugin": "core", "name": "galaxy_slots", "raw_value": "4.0000000"}]}, "status": "success"}}, {"id": "minimap2/2.17+galaxy4-0", "has_data": true, "data": {"tool_id": "minimap2", "tool_version": "2.17+galaxy4", "test_index": 0, "time_seconds": 28.04903745651245, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "d015da23cfa89a4a"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "141974781e7d2ba8"}, "fastq_input|analysis_type_selector": "sr", "fastq_input|fastq_input_selector": "single"}, "job": {"model_class": "Job", "id": "76b34f704ecb670f", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:38:14.257637", "create_time": "2024-02-23T06:38:01.472093", "galaxy_version": "23.1", "command_version": "2.17-r941", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-9pbh8", "command_line": "ln -f -s '/galaxy/server/database/objects/1/c/7/dataset_1c7e8995-cd46-4b67-abb0-e17099b9e977.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/e/5/1/dataset_e515f91e-5bb8-4a59-9f25-b4b9ce75369f.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/d/0/4/dataset_d0407d19-411c-4311-bcb3-c81924879380.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": false, \"Q\": false, \"Y\": false, \"c\": false, \"cs\": null, \"eqx\": false, \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": true, \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": false, \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": false, \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 79, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 78, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"reference_source|ref_file": {"id": "d015da23cfa89a4a", "src": "hda", "uuid": "1c7e8995-cd46-4b67-abb0-e17099b9e977"}, "fastq_input|fastq_input1": {"id": "141974781e7d2ba8", "src": "hda", "uuid": "e515f91e-5bb8-4a59-9f25-b4b9ce75369f"}}, "outputs": {"alignment_output": {"id": "2de35061b22ea693", "src": "hda", "uuid": "d0407d19-411c-4311-bcb3-c81924879380"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[M::mm_idx_gen::0.004*0.68] collected minimizers\n[M::mm_idx_gen::0.005*1.88] sorted minimizers\n[M::main::0.005*1.88] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.88] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.84] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.009*1.75] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 8 -a reference.fa /galaxy/server/database/objects/e/5/1/dataset_e515f91e-5bb8-4a59-9f25-b4b9ce75369f.dat\n[M::main] Real time: 0.010 sec; CPU: 0.016 sec; Peak RSS: 0.004 GB\n", "job_stdout": "", "job_stderr": "", "stderr": "[M::mm_idx_gen::0.004*0.68] collected minimizers\n[M::mm_idx_gen::0.005*1.88] sorted minimizers\n[M::main::0.005*1.88] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.005*1.88] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*1.84] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.009*1.75] mapped 100 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 8 -a reference.fa /galaxy/server/database/objects/e/5/1/dataset_e515f91e-5bb8-4a59-9f25-b4b9ce75369f.dat\n[M::main] Real time: 0.010 sec; CPU: 0.016 sec; Peak RSS: 0.004 GB\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:38:05", "plugin": "core", "name": "end_epoch", "raw_value": "1708670285.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:38:05", "plugin": "core", "name": "start_epoch", "raw_value": "1708670285.0000000"}, {"title": "Memory Allocated (MB)", "value": "34359", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "34359.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_t16xur9t.sam v. /tmp/history_bam_converted_to_sam_b8tumvue.sam )\n--- local_file\n+++ history_data\n@@ -1,171 +1,171 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_19.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t*\t0\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\t*\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:18422:19051/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t*\t0\t0\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t*\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:123\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t*\t0\t0\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\t*\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:200\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:18842:24844/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\t*\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t*\t0\t0\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\t*\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:200\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5983:21093/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1102:7765:18353/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t*\t0\t0\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\t*\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:123\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t*\t0\t0\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\t*\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:142\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:14060:21273/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S156M15S\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTACTGTCTCTTATACAC\t*\tNM:i:1\tms:i:302\tAS:i:302\tnn:i:0\ttp:A:P\tcm:i:22\ts1:i:150\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:14528:12993/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t*\t0\t0\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGAT\t*\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:17657:20856/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t90S161M\t*\t0\t0\tAAAGCGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTAT\t*\tNM:i:1\tms:i:312\tAS:i:312\tnn:i:0\ttp:A:P\tcm:i:22\ts1:i:150\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16480,+,90M161S,60,2;\n-M01368:8:000000000-A3GHV:1:1103:25519:6301/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t18S184M49S\t*\t0\t0\tAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGCATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATTTCGT\t*\tNM:i:2\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:21\ts1:i:157\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1103:6074:6549/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t108S143M\t*\t0\t0\tTAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTG\t*\tNM:i:1\tms:i:276\tAS:i:276\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16462,+,108M143S,60,1;\n-M01368:8:000000000-A3GHV:1:1104:11572:8264/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t*\t0\t0\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\t*\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1104:12288:20635/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t*\t0\t0\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGCCGCAGCATCTGTCTTTGATTCCTGCCT\t*\tNM:i:3\tms:i:262\tAS:i:262\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:109\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1104:13832:4398/1\t0\tgi|251831106|ref|NC_012920.1|\t1\t60\t7S132M112S\t*\t0\t0\tCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCCTGTCTCTTATACACATCTCCGAGCCCACGAGACTAAGGCGAATCTCGTATGCCGTCTTCTGCTTGACAAAAAAAAACACACAACAACCAACACCCAGTAGACTAGTGCGTC\t*\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:123\ts2:i:0\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1110:15519:10008/1\t2064\tgi|251831106|ref|NC_012920.1|\t16503\t12\t67M184H\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:124\tAS:i:124\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0149\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,67S184M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1110:16700:6843/1\t2064\tgi|251831106|ref|NC_012920.1|\t16503\t12\t25H67M159H\t*\t0\t0\tGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:124\tAS:i:124\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0149\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,92S159M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:16531/1\t2064\tgi|251831106|ref|NC_012920.1|\t16503\t5\t59M192H\t*\t0\t0\tGGTTCCTACTTCAAGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACA\t*\tNM:i:2\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:31\ts2:i:0\tde:f:0.0339\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,67S184M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:8665:25542/1\t2048\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701/1\t2064\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t*\t0\t0\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:27103:7153/1\t2064\tgi|251831106|ref|NC_012920.1|\t16508\t12\t7H62M182H\t*\t0\t0\tCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:114\tAS:i:114\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0161\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,69S182M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233/1\t2048\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t*\t0\t0\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794/1\t2064\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t*\t0\t0\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:17564:15723/1\t2064\tgi|251831106|ref|NC_012920.1|\t16512\t12\t58M193H\t*\t0\t0\tTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:106\tAS:i:106\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0172\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,58S193M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748/1\t2064\tgi|251831106|ref|NC_012920.1|\t16513\t12\t57M194H\t*\t0\t0\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:18714:24788/1\t2064\tgi|251831106|ref|NC_012920.1|\t16513\t12\t57M194H\t*\t0\t0\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255/1\t2064\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t*\t0\t0\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490/1\t2048\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t*\t0\t0\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050/1\t2064\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t*\t0\t0\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:8763:7859/1\t2064\tgi|251831106|ref|NC_012920.1|\t16519\t19\t51M200H\t*\t0\t0\tGCATAAAGCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:100\tAS:i:100\tnn:i:0\ttp:A:P\tcm:i:4\ts1:i:38\ts2:i:0\tde:f:0.0196\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,51S200M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1113:5741:16959/1\t2064\tgi|251831106|ref|NC_012920.1|\t16519\t11\t51M200H\t*\t0\t0\tTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:92\tAS:i:92\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0196\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,51S200M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:13575:19255/1\t2064\tgi|251831106|ref|NC_012920.1|\t16520\t11\t50M201H\t*\t0\t0\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:16350:22621/1\t2064\tgi|251831106|ref|NC_012920.1|\t16520\t11\t50M201H\t*\t0\t0\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272/1\t2064\tgi|251831106|ref|NC_012920.1|\t16522\t11\t48M203H\t*\t0\t0\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145/1\t2048\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t*\t0\t0\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258/1\t2048\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010/1\t2064\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176/1\t2064\tgi|251831106|ref|NC_012920.1|\t16527\t11\t5H43M203H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048/1\t2064\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t*\t0\t0\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:19224:11655/1\t2048\tgi|251831106|ref|NC_012920.1|\t16530\t11\t40M211H\t*\t0\t0\tAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t*\tNM:i:0\tms:i:80\tAS:i:80\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,40S186M25S,60,2;\trl:i:0\n"], "status": "failure"}}, {"id": "minimap2/2.17+galaxy4-1", "has_data": true, "data": {"tool_id": "minimap2", "tool_version": "2.17+galaxy4", "test_index": 1, "time_seconds": 15.376768589019775, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "minimap2/2.17+galaxy4-2", "has_data": true, "data": {"tool_id": "minimap2", "tool_version": "2.17+galaxy4", "test_index": 2, "time_seconds": 27.236992120742798, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "fa9ca18994e98166"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "55bdb0bffa9a9733"}, "fastq_input|fastq_input2": {"src": "hda", "id": "5a84f5d8659f1dac"}, "fastq_input|fastq_input_selector": "paired"}, "job": {"model_class": "Job", "id": "55673e859ef69334", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:38:56.621174", "create_time": "2024-02-23T06:38:47.169594", "galaxy_version": "23.1", "command_version": "2.17-r941", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-lftsm", "command_line": "ln -f -s '/galaxy/server/database/objects/5/6/6/dataset_566fd2e4-ba93-48b4-ab30-b5f9de289c0d.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/7/c/c/dataset_7ccf7148-addc-4a58-86c5-8558545d202d.dat' '/galaxy/server/database/objects/1/4/7/dataset_1475b940-1f11-481d-85cb-91a13ca7ec1c.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/5/9/8/dataset_598224dc-fbe8-42a7-aa46-08ddf62e6fb0.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": false, \"Q\": false, \"Y\": false, \"c\": false, \"cs\": null, \"eqx\": false, \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": true, \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": false, \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": false, \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 1, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 84, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 85, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 83, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"reference_source|ref_file": {"id": "fa9ca18994e98166", "src": "hda", "uuid": "566fd2e4-ba93-48b4-ab30-b5f9de289c0d"}, "fastq_input|fastq_input1": {"id": "55bdb0bffa9a9733", "src": "hda", "uuid": "7ccf7148-addc-4a58-86c5-8558545d202d"}, "fastq_input|fastq_input2": {"id": "5a84f5d8659f1dac", "src": "hda", "uuid": "1475b940-1f11-481d-85cb-91a13ca7ec1c"}}, "outputs": {"alignment_output": {"id": "8ae27138ebba0b77", "src": "hda", "uuid": "598224dc-fbe8-42a7-aa46-08ddf62e6fb0"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[M::mm_idx_gen::0.004*0.76] collected minimizers\n[M::mm_idx_gen::0.006*1.52] sorted minimizers\n[M::main::0.006*1.52] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.52] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.50] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.014*1.73] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 8 -a reference.fa /galaxy/server/database/objects/7/c/c/dataset_7ccf7148-addc-4a58-86c5-8558545d202d.dat /galaxy/server/database/objects/1/4/7/dataset_1475b940-1f11-481d-85cb-91a13ca7ec1c.dat\n[M::main] Real time: 0.015 sec; CPU: 0.025 sec; Peak RSS: 0.005 GB\n", "job_stdout": "", "job_stderr": "", "stderr": "[M::mm_idx_gen::0.004*0.76] collected minimizers\n[M::mm_idx_gen::0.006*1.52] sorted minimizers\n[M::main::0.006*1.52] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.52] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.50] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.014*1.73] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 8 -a reference.fa /galaxy/server/database/objects/7/c/c/dataset_7ccf7148-addc-4a58-86c5-8558545d202d.dat /galaxy/server/database/objects/1/4/7/dataset_1475b940-1f11-481d-85cb-91a13ca7ec1c.dat\n[M::main] Real time: 0.015 sec; CPU: 0.025 sec; Peak RSS: 0.005 GB\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:38:48", "plugin": "core", "name": "end_epoch", "raw_value": "1708670328.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:38:48", "plugin": "core", "name": "start_epoch", "raw_value": "1708670328.0000000"}, {"title": "Memory Allocated (MB)", "value": "34359", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "34359.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_7fff6bq8.sam v. /tmp/history_bam_converted_to_sam_h611_kbs.sam )\n--- local_file\n+++ history_data\n@@ -1,303 +1,301 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_12.dat /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_13.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t73\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t=\t1\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\tBCCCCFFFFFFFGGGGGGGGGGGHHHHGHGHHHHHHHHHGGGGGGHHHHGHHHHHHHHHHGHHHHHHGGHGGHHHGHHHHFHHGHHHHHHHHHGHEHEFFGHHEGGCEFGGFHHHBGHHGHHHHGHFHHHGHGHGHGGCDFDDACGGGGGGGAAFFFFFFFFFBAFFFFFB;FFFFFFADDFFFFFFFFFFEFFFFFFFFFFBFFFFFFFFFFFFFFEFFFFFFFFBFEFFFFEFE;DFFFDFBFF/9BFB\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t133\tgi|251831106|ref|NC_012920.1|\t1\t0\t*\t=\t1\t0\tTCGCCTTACCGCTACTCACCCACGGCGGCCATCAGCCGATACTAAGTTTGGGGTATGGTGGGGGGGATAATGAATTAGGTTGTGGGGGAGGGTTTGTGGTTGAGAGAAACACAAAAAACAATCTTATATATGGGTAGTCGTTTTGTATTGGTTTTTTGTTTTGTTTGTGTTTTGAGTGTCGGTTTAGTTCGGTGTACTAGGGGGGGTGGATGGGGTCGGCTGGTGAGGGGGTCTTAGTGTATTGAGTGTGG\t1>11111@11111A111A100000000////011110//>>/12@1@22B/////1@>21/>>/-----9/;////9////--;-;-;-----;--------9/-/-///9-;-------9//////9/////-//-/9-;-;9--/////99-;--9-:-;----/---/-----////---9-/////--;A-//////---------9/-----;-----/-/-----;--;//////////9;///-\n-M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t10S241M\t=\t1\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tNM:i:1\tms:i:472\tAS:i:472\tnn:i:0\ttp:A:P\tcm:i:34\ts1:i:234\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1101:18422:19051\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1101:25545:21098\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t=\t1\t216\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tNM:i:3\tms:i:246\tAS:i:246\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:119\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1101:5446:12248\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t78S173M\t=\t1\t213\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCDDDCCCCFFFGGGGGGGGGGHHHHHGHHHHHHHHGHHHHHHGHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHGFGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGGGGGGFFFFFFFFFFFFFFAFFFFFFFFFFFFFBFC?.EAFFFFFFFFAFFFFFFFFFFFFFFFEFFFF0FFFFFFF0BFFFFFFFFF?.BDCFFEDA/\tNM:i:1\tms:i:336\tAS:i:336\tnn:i:0\ttp:A:P\tcm:i:25\ts1:i:167\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16492,+,78M173S,36,1;\n-M01368:8:000000000-A3GHV:1:1101:5861:6452\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t236\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,2;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t=\t1\t151\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t>A@AAAAD2ADDFFGGGGGFGGHA?EAEFBEAGHFABFGG5FDF5DB1EEGAFDFB53FF5FH@G5FFEHGHEFHFFHBE333GF43GCGGGGE@0?BFGGB0B?FHGFDGGHHHBFFDEGGHGFFFDFE@<1>@FFFGHHHHFHEFGDABFFGG/@DCE<CG1<GF0/DD000=<DHGBDFDCECE/:AC?-;-;9B/ABBB-AD9BFB99AB?BDFBAD-.9..@;=;;..9..9/9;BEF;A:9/BFF\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t=\t1\t213\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:13809:1733\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t50S179M22S\t=\t1\t179\tNATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATCTGTCTCTTATACACATCTGAC\t#>AABBFFCFFFGGGFGGGGGGGGHHHHHHHHHHHHHHHHHHGHHHGGEGGFFHHHHHHGHGHGHHHHHEHFHGHHHHEFHHGHGGGGGHHHHGHHHHHHHHHGFGHHHHHGHGHGHHGGGCCGGGGFGGGGGGDGGGGFGDGGGFFFFFFEFFFFFFFBAF:9AF//;BEF-DD/FFFFBFFFFFFFFFEBFF?FB;/;//BFFEFFE/::..9;-:B9:FBFFFFFFBFB/9/FFF/B///99/:B///\tNM:i:1\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16520,+,50M201S,11,2;\n-M01368:8:000000000-A3GHV:1:1102:17584:10050\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t52S138M61S\t=\t1\t138\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTTGGGGGGTGG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHGGHHHHHHHHHHHHHHGHHHGGHHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHHGGHHHHHHGHGHGGHGGFGGGGGGGGGGFGGFGGGGGGGGGFFFFFFFFFFEFFCFAAFEFEFFFFFFFCFDFFFFFFEFFFFFFFFFFBFFFFFFF/:BFFFFFFFFFFFFFFFFAFC=@-.;A///B././//////.-9----\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16518,+,52M199S,11,1;\n-M01368:8:000000000-A3GHV:1:1102:18842:24844\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t228\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\tBBBCBFF@CCBBGGGGGGGGGGHHGHGGHHHGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGGHHHHHHHHHHHHHHHHHHHHGGGHGGHHHHHHGHBFGHHHHHHHHBGHHHHHHGHGGGHFGCGGFHHFHFFHHBHHHHFFHFHHHHGGDHGGBC?;@DFBFFFFFFFFFBFFFFFFFFFFFFFF.B?FB.@;;DFFFFFFFFFFFEE-A./BBBFBFBFFF//BFB/BFF/\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t=\t1\t213\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5728:8777\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t179\tCACTTGGGAGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tBBBBBFFBBBBFGGGGGGGDGGHHHHHFHHHGGGGGHHGFHFHHFHHHGGHHHHHHHHHHHHHGHHHHHHFGHHHGGGGHHHHHHHHHGHHHGHHHHFHHHGGHGGHFFHHHHGFHHHHHHHHHHFHFHHHFHFHHHHHGGGGGHGHHHHHGHHHHHHH/FHHHHHGHGGGHHGGFBFFFFFFFFFF;DDFFFFFFF;;BA.=DDBFFFFF;-DFF.EDFFFFFFEF-AFFFFFB;FBFFFBFFFFB9B..\tNM:i:2\tms:i:280\tAS:i:280\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,2;\n-M01368:8:000000000-A3GHV:1:1102:5983:21093\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t177\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tAAABCFCABBCFGGGGGGGGGGHHHHHHGFHHHHHHHHGGHHHGHGHHHGGGGFHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHFHGGHHHHFHGHHEHHHHHHHGHHHHHD@FGGHHHHHFFFHHGGHGH?DHHHHHGHGHEGG/@?ADGFGGFFFFAFFFFFFFFFFFFFFFFFFFFFFFAAFFFFFFDFFFFFFFF;D9BFFFFFFFFFFFFFFFFFEFFFBBFFF0BFFFBBFF0EFFFFFFFA\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:170\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:7765:18353\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t=\t1\t236\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCBCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHGHHHGHHHHHHHHHHHGGGGGGHHHHHHHHHHHHHHHHHHHHGGHGGHHHGHHGHHGHHHHHHHHHCGGFHHHHGHHHHHGCFGGHHGHHHHHHGFHHHGHHHHHHHGHGHGFF/CC?ADAFGFFFFFFFFFFFFFFDFFFFFFFFAFFFFFFFFFFFEDFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFBBFBFBFFFFFFFFFFFFFFFFF?\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t=\t1\t173\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\tCCCCCFFFFFFFGGGGGGGGGGGGGGGHFHHHHHHHHHHHHHHHHGHHHHHHHHGHHHIHHHHHHHGGGGFHHHHHHHHHHHHHHHHHHHGHGGHGGHHHHHHHHHGHHHHHHHHHHHHHHHHHGHHHH/FGGGGHHHHHHHGGEHHHHHGHHHHHHGHGHEFEFGGFFFFFFFFFFFFFFFFFFFFFAFDFFFFFAFFFF;;@FFEFFFFFFFFFFE=?AFFFFFFFFFFFFFFFFFFBFBBBFFFFEFF\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:168\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1105:16787:9771\t2209\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t=\t1\t-16265\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCDCFFFFFFFGGGGGGGGGGGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGFG\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701\t2129\tgi|251831106|ref|NC_012920.1|\t16506\t21\t64M187H\t=\t1\t-16569\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/FB;///BF/.B/FFFFFFFFFFFFFFF9?DDEBFED.DDCFFGFFGGGFF;;0FFFGAGGGGF\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:77\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2209\tgi|251831106|ref|NC_012920.1|\t16508\t12\t62M189H\t=\t1\t-16370\tCTACCTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCCCFFFFFFFGGGGGGGGGGHHHHHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHGHGGHG\tNM:i:2\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0323\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,62S140M49S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2209\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16378\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABBBBFFFFFFFGGGGGGGGGGGGBFHHGG?EEHHGHHHHHHGFHFHHHHGHGHHGGHE\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S134M58S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t2145\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16309\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t3AABABFFBFFFGCFGGGGGGGHHHFGCFGGGFFGHHCGHHHGHGHGHBFFHHHEDGGF\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2129\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t=\t1\t-16569\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t;0/FFFBGFBBFCHHHHHHFHHFFGGEACCCDEGGGGFGD1GFHGFGFFEHHHHGGHHH\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t2193\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAACCCTAAAGAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/:/:;9////A?B.F//B;/./.A9.9;.;:..-?9B9/FB//;///:B/9AC;0FB\tNM:i:2\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:92\ts2:i:0\tde:f:0.0351\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t.9/.BFFBFBEFF;FFFFBF?BEDA:/.ADEFFFFFFEGGGGFCB;99/B;.GFFGF\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:77\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFGFFFGGFFBFBCBHGC.GC?DHHHGDAFFCHHEHGHHHHGFGGHHHGCGHHHH\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2145\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t=\t1\t-16377\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGA\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2193\tgi|251831106|ref|NC_012920.1|\t16516\t12\t57H54M140H\t=\t1\t-16569\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFB0000FAFB0GGFGBGGHGGFC::.EEA<@HFDG0HHGGHGBDFGFG<DDFGE\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,111S140M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2129\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t=\t1\t-16569\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFGGGGGGGGGGGHHHGHHGGGHHHHGGGGGHHHHHHFHHHHHHHHHHGGHHHH\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2209\tgi|251831106|ref|NC_012920.1|\t16518\t11\t52M199H\t=\t1\t-16381\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHG\tNM:i:1\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0192\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,52S138M61S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:6074:6549\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t20\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t///A/:/BFFFF9...FFE;.9:.;.CF//B/FBFBBFBFGF/:?DFC90\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:9655:13916\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t21\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t:FBEF;0FFFFFFFBFFFFFEADEFBFFFFFFGGGFGFFBBB/F.GGFC9\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:92\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t2129\tgi|251831106|ref|NC_012920.1|\t16522\t20\t48M203H\t=\t1\t-16569\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/.FFFFFBBFBFBFFFEFEEFFFDFFFFFFFB//BBEFFB/.AABBFF\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16406\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tAAABBFFFFFDFGGGGGGGGGGHHHHHHGHHHGFHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S120M86S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t2145\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16275\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16388\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S138M68S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258\t2145\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t=\t1\t-16287\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t11>>ABFFFFFFGGCGC1BBF1GHHHBHHHHGFHGH1A100AA\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:17657:20856\t2193\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFEFFF?FEFFFFEAA.;AAFFF:0FB0FFBFFFB:A9A90FF\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tHFHHHGAFA<.HFGHGGGGGHGGDDGHHHHFHFHGGFC?HGHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t28\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFFB.FEFAA:EFFE:.;AFBB;FFFFFFFGFF/FEDFGGG\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tGFHHHHHHGGGHGGHGGGGGGHHHFGGGGHHGFHHHF<GGHHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:14540:5315\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCCCACGTTCCCCTTAAATAAGACATCACGATG\t09BFBB:--A=-.A;FEBFFFFFFFFFFFFFFFC//?AA0EFF\tNM:i:1\tms:i:76\tAS:i:76\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:84\ts2:i:0\tde:f:0.0233\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n"], "status": "failure"}}, {"id": "minimap2/2.17+galaxy4-3", "has_data": true, "data": {"tool_id": "minimap2", "tool_version": "2.17+galaxy4", "test_index": 3, "time_seconds": 27.621561527252197, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "cf260ac6168f20d8"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "bf9d9387a5360d87"}, "fastq_input|fastq_input2": {"src": "hda", "id": "0cf3f371263cb42a"}, "fastq_input|fastq_input_selector": "paired"}, "job": {"model_class": "Job", "id": "83aba05c750e98bc", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:39:24.637278", "create_time": "2024-02-23T06:39:14.904522", "galaxy_version": "23.1", "command_version": "2.17-r941", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-rfc5l", "command_line": "ln -f -s '/galaxy/server/database/objects/6/9/c/dataset_69c0fbcf-c1c9-48f3-b3ea-3d83199286b2.dat' reference.fa && minimap2 -x sr           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/c/3/3/dataset_c331ba09-a0cb-438c-9d34-08283cdf116e.dat' '/galaxy/server/database/objects/b/4/0/dataset_b4051e3e-5ece-45ea-a9d8-bd252c0bc5b3.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/b/6/7/dataset_b67dd65d-10b7-4e7d-86d1-accdccc4f149.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": false, \"Q\": false, \"Y\": false, \"c\": false, \"cs\": null, \"eqx\": false, \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": true, \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": false, \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": false, \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 1, \"analysis_type_selector\": \"sr\", \"fastq_input1\": {\"values\": [{\"id\": 88, \"src\": \"hda\"}]}, \"fastq_input2\": {\"values\": [{\"id\": 89, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"paired\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 87, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"reference_source|ref_file": {"id": "cf260ac6168f20d8", "src": "hda", "uuid": "69c0fbcf-c1c9-48f3-b3ea-3d83199286b2"}, "fastq_input|fastq_input1": {"id": "bf9d9387a5360d87", "src": "hda", "uuid": "c331ba09-a0cb-438c-9d34-08283cdf116e"}, "fastq_input|fastq_input2": {"id": "0cf3f371263cb42a", "src": "hda", "uuid": "b4051e3e-5ece-45ea-a9d8-bd252c0bc5b3"}}, "outputs": {"alignment_output": {"id": "93ebee79e7c5a941", "src": "hda", "uuid": "b67dd65d-10b7-4e7d-86d1-accdccc4f149"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[M::mm_idx_gen::0.003*1.09] collected minimizers\n[M::mm_idx_gen::0.004*2.22] sorted minimizers\n[M::main::0.004*2.21] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*2.21] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*2.17] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.011*1.96] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 8 -a reference.fa /galaxy/server/database/objects/c/3/3/dataset_c331ba09-a0cb-438c-9d34-08283cdf116e.dat /galaxy/server/database/objects/b/4/0/dataset_b4051e3e-5ece-45ea-a9d8-bd252c0bc5b3.dat\n[M::main] Real time: 0.013 sec; CPU: 0.023 sec; Peak RSS: 0.004 GB\n", "job_stdout": "", "job_stderr": "", "stderr": "[M::mm_idx_gen::0.003*1.09] collected minimizers\n[M::mm_idx_gen::0.004*2.22] sorted minimizers\n[M::main::0.004*2.21] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.004*2.21] mid_occ = 1000\n[M::mm_idx_stat] kmer size: 21; skip: 11; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.005*2.17] distinct minimizers: 2777 (100.00% are singletons); average occurrences: 1.000; average spacing: 5.967\n[M::worker_pipeline::0.011*1.96] mapped 200 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x sr -t 8 -a reference.fa /galaxy/server/database/objects/c/3/3/dataset_c331ba09-a0cb-438c-9d34-08283cdf116e.dat /galaxy/server/database/objects/b/4/0/dataset_b4051e3e-5ece-45ea-a9d8-bd252c0bc5b3.dat\n[M::main] Real time: 0.013 sec; CPU: 0.023 sec; Peak RSS: 0.004 GB\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:39:16", "plugin": "core", "name": "end_epoch", "raw_value": "1708670356.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:39:16", "plugin": "core", "name": "start_epoch", "raw_value": "1708670356.0000000"}, {"title": "Memory Allocated (MB)", "value": "34359", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "34359.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output alignment_output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_9_x4p4iv.sam v. /tmp/history_bam_converted_to_sam_zn6da_es.sam )\n--- local_file\n+++ history_data\n@@ -1,303 +1,301 @@\n-@HD\tVN:1.3\tSO:coordinate\n+@HD\tVN:1.6\tSO:coordinate\n @SQ\tSN:gi|251831106|ref|NC_012920.1|\tLN:16569\n-@PG\tID:minimap2\tPN:minimap2\tVN:2.5-r572\tCL:minimap2 -a -x sr -t 1 reference.fa /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_12.dat /private/var/folders/df/6xqpqpcd7h73b6jpx9t6cwhw0000gn/T/tmpChsAAk/files/000/dataset_13.dat\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t73\tgi|251831106|ref|NC_012920.1|\t1\t60\t71S180M\t=\t1\t0\tATCTGGTTCCTACTTCAGGGCCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATT\tBCCCCFFFFFFFGGGGGGGGGGGHHHHGHGHHHHHHHHHGGGGGGHHHHGHHHHHHHHHHGHHHHHHGGHGGHHHGHHHHFHHGHHHHHHHHHGHEHEFFGHHEGGCEFGGFHHHBGHHGHHHHGHFHHHGHGHGHGGCDFDDACGGGGGGGAAFFFFFFFFFBAFFFFFB;FFFFFFADDFFFFFFFFFFEFFFFFFFFFFBFFFFFFFFFFFFFFEFFFFFFFFBFEFFFFEFE;DFFFDFBFF/9BFB\tNM:i:1\tms:i:350\tAS:i:350\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16499,+,71M180S,12,2;\n-M01368:8:000000000-A3GHV:1:1101:6911:8255\t133\tgi|251831106|ref|NC_012920.1|\t1\t0\t*\t=\t1\t0\tTCGCCTTACCGCTACTCACCCACGGCGGCCATCAGCCGATACTAAGTTTGGGGTATGGTGGGGGGGATAATGAATTAGGTTGTGGGGGAGGGTTTGTGGTTGAGAGAAACACAAAAAACAATCTTATATATGGGTAGTCGTTTTGTATTGGTTTTTTGTTTTGTTTGTGTTTTGAGTGTCGGTTTAGTTCGGTGTACTAGGGGGGGTGGATGGGGTCGGCTGGTGAGGGGGTCTTAGTGTATTGAGTGTGG\t1>11111@11111A111A100000000////011110//>>/12@1@22B/////1@>21/>>/-----9/;////9////--;-;-;-----;--------9/-/-///9-;-------9//////9/////-//-/9-;-;9--/////99-;--9-:-;----/---/-----////---9-/////--;A-//////---------9/-----;-----/-/-----;--;//////////9;///-\n-M01368:8:000000000-A3GHV:1:1101:14518:9998\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t10S241M\t=\t1\t242\tCATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTAATTAATGCTTGTAGGACATAATAATAA\tCCCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGFHHHHGGGGGHGFHHHHHHHHHHHHHHHHHHHGHGGEHGGGGCGGGHHGGCGGGGGHHGHHHGGGGGGGG.BFFFGAGADFGAFDGFGGCFFF;DDFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFBFFFFFFFFFFFFFFFFFFF09FFFE00;BE@;DABBFFFFFBBFB00;F:9;FFBFFF9BFFFFFFFFFFFFF90/::BFFFBF0\tNM:i:1\tms:i:472\tAS:i:472\tnn:i:0\ttp:A:P\tcm:i:34\ts1:i:234\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1101:18422:19051\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCCCCCFDDDDDFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGHHHHHHHHHGHHHHHHHHHHHHGGHGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHGCGGGHHHHHHHHHHHHHHHHHHHHHHGFDHGFHCFGGGGFGGFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;FFFFFFFFFFFFFFFFFFFFFFFFFFFFEFBFFFFFFFFFF:FFF.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1101:25545:21098\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t113S138M\t=\t1\t216\tGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTTCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCAACCTATGTCGCAGTATCTGTCTTTGAT\t3AAA34BFFFFFGCGGCGGGCGHHHGHHHHCGHFGHFHGFGGCDGGBD5FGFFFHFHGGGHAEBFGHHHEHGGFHBGGFHHHGGGEEFHHHFHFFHDHGHGHHHHFFHHGGFAEGFFFFFBGHHHFFHHHHHHHFHFHHFHGFHGHGA/<@EFHEHH1GGHFFFHG1>=FGHFHGF.GE//-<BB?9.9BFFFB==AA/FFFFFA-@BA.;;D?F9FAB;---./99BFFFBBAE-.9B/BFB9F/9BFBB\tNM:i:3\tms:i:246\tAS:i:246\tnn:i:0\ttp:A:P\tcm:i:14\ts1:i:119\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16457,+,113M138S,60,1;\n-M01368:8:000000000-A3GHV:1:1101:5446:12248\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t78S173M\t=\t1\t213\tATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTT\tCCDDDCCCCFFFGGGGGGGGGGHHHHHGHHHHHHHHGHHHHHHGHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGGGGHHHHHHHGFGHHHHHHHHHHHHHHHHHGHHHHHGGGGGHHHHHHHHHHHHHHHGHHHHHHGHGHGHHGGGGGGGGGGGFFFFFFFFFFFFFFAFFFFFFFFFFFFFBFC?.EAFFFFFFFFAFFFFFFFFFFFFFFFEFFFF0FFFFFFF0BFFFFFFFFF?.BDCFFEDA/\tNM:i:1\tms:i:336\tAS:i:336\tnn:i:0\ttp:A:P\tcm:i:25\ts1:i:167\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16492,+,78M173S,36,1;\n-M01368:8:000000000-A3GHV:1:1101:5861:6452\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t236\tTTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tBCCCCFBBCCCFGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHHHHHHHHHGGGGHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHHGHHHHHHHHHHHHHHHHHHHGGHHHHGGGGGGEHGHHHHHHHHHHHGHHHHHHGHGHGHGGGGCGGGGGFFFFFFFFFFFFFFFFFFFFFFFF?FFEAF:DAEF9DEFFFFFFF-A.BFFFFFEFFFFEFFFFFFFF0FFEB0FFFFBFFFFFFADEFCF0/.\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:160\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,2;\n-M01368:8:000000000-A3GHV:1:1102:10403:6021\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t121S130M\t=\t1\t151\tCGCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTG\t>A@AAAAD2ADDFFGGGGGFGGHA?EAEFBEAGHFABFGG5FDF5DB1EEGAFDFB53FF5FH@G5FFEHGHEFHFFHBE333GF43GCGGGGE@0?BFGGB0B?FHGFDGGHHHBFFDEGGHGFFFDFE@<1>@FFFGHHHHFHEFGDABFFGG/@DCE<CG1<GF0/DD000=<DHGBDFDCECE/:AC?-;-;9B/ABBB-AD9BFB99AB?BDFBAD-.9..@;=;;..9..9/9;BEF;A:9/BFF\tNM:i:1\tms:i:250\tAS:i:250\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16449,+,121M130S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:10677:23253\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t22S213M16S\t=\t1\t213\tCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTGTCTCTTATACACA\tABBBBFFFFFFFGGGGGGGCGGGHHHHHGHHHHHHHHHGHHHHHHHHHHHGHHHHHGGGGGHGHHHHHHHHHHHHHBGFHHHHGHGHGGHGGGCGGGHHHGGGGGGGHHHGHGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFEDBDFFFFFFFEFFFE0F0FBFFFF0FFFFFFFFFFFFFFFFF:\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:13809:1733\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t50S179M22S\t=\t1\t179\tNATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATCTGTCTCTTATACACATCTGAC\t#>AABBFFCFFFGGGFGGGGGGGGHHHHHHHHHHHHHHHHHHGHHHGGEGGFFHHHHHHGHGHGHHHHHEHFHGHHHHEFHHGHGGGGGHHHHGHHHHHHHHHGFGHHHHHGHGHGHHGGGCCGGGGFGGGGGGDGGGGFGDGGGFFFFFFEFFFFFFFBAF:9AF//;BEF-DD/FFFFBFFFFFFFFFEBFF?FB;/;//BFFEFFE/::..9;-:B9:FBFFFFFFBFB/9/FFF/B///99/:B///\tNM:i:1\tms:i:348\tAS:i:348\tnn:i:0\ttp:A:P\tcm:i:26\ts1:i:169\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16520,+,50M201S,11,2;\n-M01368:8:000000000-A3GHV:1:1102:17584:10050\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t52S138M61S\t=\t1\t138\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATCTGTCTCTTATACACATCTGACGCTGCCGACGAGCGATCTAGTGGAGATCTTGGGGGGTGG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHGGHHHHHHHHHHHHHHGHHHGGHHHHHHHGGHHHHGGGGGHHHHHHHHHHHHHHGGHHHHHHGHGHGGHGGFGGGGGGGGGGFGGFGGGGGGGGGFFFFFFFFFFEFFCFAAFEFEFFFFFFFCFDFFFFFFEFFFFFFFFFFBFFFFFFF/:BFFFFFFFFFFFFFFFFAFC=@-.;A///B././//////.-9----\tNM:i:1\tms:i:266\tAS:i:266\tnn:i:0\ttp:A:P\tcm:i:17\ts1:i:130\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16518,+,52M199S,11,1;\n-M01368:8:000000000-A3GHV:1:1102:18842:24844\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t228\tCACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCT\tBBBCBFF@CCBBGGGGGGGGGGHHGHGGHHHGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHGHHHHHHFHHHHGGGGGHHHHHHHHHHHHHHHHHHHHGGGHGGHHHHHHGHBFGHHHHHHHHBGHHHHHHGHGGGHFGCGGFHHFHFFHHBHHHHFFHFHHHHGGDHGGBC?;@DFBFFFFFFFFFBFFFFFFFFFFFFFF.B?FB.@;;DFFFFFFFFFFFEE-A./BBBFBFBFFF//BFB/BFF/\tNM:i:1\tms:i:282\tAS:i:282\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,1;\n-M01368:8:000000000-A3GHV:1:1102:21788:11027\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t35S213M3S\t=\t1\t213\tGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACGTTCAATATTACAGGCGAACATACTTACTAAAGTGTGTTAATTCTG\tABCCBCCBBFFFGGGGGGGGGGGHGHHHHHHGGHGGHHHHHHHHGHHHHHHHHHHHHHHHHHHGHHHHHFGGGGHHHHHHHHHHHHHHHHHHHHHHGHGHGGFCGGCGGGHHHGGGGGGGGGGGGGGGGGGGGGGGGGFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF9EFFFFFFFFFFFBFF0FFBBBBFBFBFFFF0\tNM:i:1\tms:i:416\tAS:i:416\tnn:i:0\ttp:A:P\tcm:i:32\ts1:i:201\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:5728:8777\t163\tgi|251831106|ref|NC_012920.1|\t1\t60\t105S146M\t=\t1\t179\tCACTTGGGAGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCC\tBBBBBFFBBBBFGGGGGGGDGGHHHHHFHHHGGGGGHHGFHFHHFHHHGGHHHHHHHHHHHHHGHHHHHHFGHHHGGGGHHHHHHHHHGHHHGHHHHFHHHGGHGGHFFHHHHGFHHHHHHHHHHFHFHHHFHFHHHHHGGGGGHGHHHHHGHHHHHHH/FHHHHHGHGGGHHGGFBFFFFFFFFFF;DDFFFFFFF;;BA.=DDBFFFFF;-DFF.EDFFFFFFEF-AFFFFFB;FBFFFBFFFFB9B..\tNM:i:2\tms:i:280\tAS:i:280\tnn:i:0\ttp:A:P\tcm:i:19\ts1:i:137\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16465,+,105M146S,60,2;\n-M01368:8:000000000-A3GHV:1:1102:5983:21093\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t177\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tAAABCFCABBCFGGGGGGGGGGHHHHHHGFHHHHHHHHGGHHHGHGHHHGGGGFHHHHHHHHGHHHHHHHHHHHHHGGHGGHHHHHHFHGGHHHHFHGHHEHHHHHHHGHHHHHD@FGGHHHHHFFFHHGGHGH?DHHHHHGHGHEGG/@?ADGFGGFFFFAFFFFFFFFFFFFFFFFFFFFFFFAAFFFFFFDFFFFFFFF;D9BFFFFFFFFFFFFFFFFFEFFFBBFFF0BFFFBBFF0EFFFFFFFA\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:170\ts2:i:0\n-M01368:8:000000000-A3GHV:1:1102:7765:18353\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t119S132M\t=\t1\t236\tCTCCGGGCCCATAACACTTGGGGGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTC\tCCDCCCCCCBCFGGGGGGGGGGGGGGGHHHHHHDHHHHHHHHHHHGGGGGHHGHGHHHGHHHHHHFHHHHGHHHHHHGHGHHHGHHHHHGGGGHHHHHHHHHHHHHHHHHHHHHHGGHGGHHHHHHHGFFHHHHHGHHHHHHHHHHHGHHHHHGCFGGHGHFHHGHGHGHHHHGGFHHHHGGGHGBFGCC=BFFFFFFFF-@DFFFFFFFFFFFFFFFFFFFFFFAFFAEF.::FBFBFFE-A9:BFFFF0\tNM:i:1\tms:i:254\tAS:i:254\tnn:i:0\ttp:A:P\tcm:i:16\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16451,+,119M132S,60,1;\n-M01368:8:000000000-A3GHV:1:1103:10405:17879\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t80S171M\t=\t1\t228\tGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATTATTTATCGCACCTACG\tCBCCCFCCCCCFGGGGGGGGGGHHHHHHHHHHHHGHHHGHHHHHHHHHHHGGGGGGHHHHHHHHHHHHHHHHHHHHGGHGGHHHGHHGHHGHHHHHHHHHCGGFHHHHGHHHHHGCFGGHHGHHHHHHGFHHHGHHHHHHHGHGHGFF/CC?ADAFGFFFFFFFFFFFFFFDFFFFFFFFAFFFFFFFFFFFEDFFFFFFFFFFAFFFFFFFFFFFFFFFFFFFFFFBBFBFBFFFFFFFFFFFFFFFFF?\tNM:i:1\tms:i:332\tAS:i:332\tnn:i:0\ttp:A:P\tcm:i:24\ts1:i:223\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16490,+,80M171S,50,1;\n-M01368:8:000000000-A3GHV:1:1103:13493:8205\t99\tgi|251831106|ref|NC_012920.1|\t1\t60\t96S155M\t=\t1\t173\tGTAGCTAAAGTGAACTGTATCCGACATCTGGTTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATGGATCACAGGTCTATCACCCTATTAACCACTCACGGGAGCTCTCCATGCATTTGGTATTTTCGTCTGGGGGGTGTGCACGCGATAGCATTGCGAGACGCTGGAGCCGGAGCACCCTATGTCGCAGTATCTGTCTTTGATTCCTGCCTCATCCTATT\tCCCCCFFFFFFFGGGGGGGGGGGGGGGHFHHHHHHHHHHHHHHHHGHHHHHHHHGHHHIHHHHHHHGGGGFHHHHHHHHHHHHHHHHHHHGHGGHGGHHHHHHHHHGHHHHHHHHHHHHHHHHHGHHHH/FGGGGHHHHHHHGGEHHHHHGHHHHHHGHGHEFEFGGFFFFFFFFFFFFFFFFFFFFFAFDFFFFFAFFFF;;@FFEFFFFFFFFFFE=?AFFFFFFFFFFFFFFFFFFBFBBBFFFFEFF\tNM:i:1\tms:i:300\tAS:i:300\tnn:i:0\ttp:A:P\tcm:i:20\ts1:i:168\ts2:i:0\tSA:Z:gi|251831106|ref|NC_012920.1|,16474,+,96M155S,60,1;\n********\n*SNIP *\n********\n+M01368:8:000000000-A3GHV:1:1105:16787:9771\t2209\tgi|251831106|ref|NC_012920.1|\t16506\t12\t64M187H\t=\t1\t-16265\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCDCFFFFFFFGGGGGGGGGGGHHHHHHHHHHHGGGGHHHHHHHHHHHHHHFHHHHHHHGGFG\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,64S187M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1112:9832:6701\t2129\tgi|251831106|ref|NC_012920.1|\t16506\t21\t64M187H\t=\t1\t-16569\tTCCTACTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/FB;///BF/.B/FFFFFFFFFFFFFFF9?DDEBFED.DDCFFGFFGGGFF;;0FFFGAGGGGF\tNM:i:1\tms:i:118\tAS:i:118\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:77\ts2:i:0\tde:f:0.0156\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,64S187M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2209\tgi|251831106|ref|NC_012920.1|\t16508\t12\t62M189H\t=\t1\t-16370\tCTACCTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCCCFFFFFFFGGGGGGGGGGHHHHHFHHHHGGGGHHHHHHHHHHHHHHHHHHHHGHGGHG\tNM:i:2\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0323\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,62S140M49S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2209\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16378\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABBBBFFFFFFFGGGGGGGGGGGGBFHHGG?EEHHGHHHHHHGFHFHHHHGHGHHGGHE\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S134M58S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:24817:14233\t2145\tgi|251831106|ref|NC_012920.1|\t16511\t12\t59M192H\t=\t1\t-16309\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t3AABABFFBFFFGCFGGGGGGGHHHFGCFGGGFFGHHCGHHHGHGHGHBFFHHHEDGGF\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,59S192M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:23099:3794\t2129\tgi|251831106|ref|NC_012920.1|\t16511\t12\t58H59M134H\t=\t1\t-16569\tCTTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t;0/FFFBGFBBFCHHHHHHFHHFFGGEACCCDEGGGGFGD1GFHGFGFFEHHHHGGHHH\tNM:i:1\tms:i:108\tAS:i:108\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0169\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,117S134M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:17389:18671\t2193\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAACCCTAAAGAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/:/:;9////A?B.F//B;/./.A9.9;.;:..-?9B9/FB//;///:B/9AC;0FB\tNM:i:2\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:92\ts2:i:0\tde:f:0.0351\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1107:14451:26748\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t10\t57M194H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t.9/.BFFBFBEFF;FFFFBF?BEDA:/.ADEFFFFFFEGGGGFCB;99/B;.GFFGF\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:77\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,57S194M,48,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:11270:12255\t2129\tgi|251831106|ref|NC_012920.1|\t16513\t12\t55H57M139H\t=\t1\t-16569\tTCAGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFGFFFGGFFBFBCBHGC.GC?DHHHGDAFFCHHEHGHHHHGFGGHHHGCGHHHH\tNM:i:1\tms:i:104\tAS:i:104\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0175\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,112S139M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2145\tgi|251831106|ref|NC_012920.1|\t16516\t12\t54M197H\t=\t1\t-16377\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t?A3AA?DFFFFFGGGGGGGFFGHFGCEGGFHHHHHHHHHGHCBGFEGGHHDEGA\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,54S143M54S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1109:21978:9490\t2193\tgi|251831106|ref|NC_012920.1|\t16516\t12\t57H54M140H\t=\t1\t-16569\tGGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFB0000FAFB0GGFGBGGHGGFC::.EEA<@HFDG0HHGGHGBDFGFG<DDFGE\tNM:i:1\tms:i:98\tAS:i:98\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0185\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,111S140M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2129\tgi|251831106|ref|NC_012920.1|\t16517\t12\t60H53M138H\t=\t1\t-16569\tGGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFGGGGGGGGGGGHHHGHHGGGHHHHGGGGGHHHHHHFHHHHHHHHHHGGHHHH\tNM:i:1\tms:i:96\tAS:i:96\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0189\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1102:17584:10050\t2209\tgi|251831106|ref|NC_012920.1|\t16518\t11\t52M199H\t=\t1\t-16381\tGTCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tABCCCFFFFFCFGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHGHHHFHGGHG\tNM:i:1\tms:i:94\tAS:i:94\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0192\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,52S138M61S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:6074:6549\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t20\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t///A/:/BFFFF9...FFE;.9:.;.CF//B/FBFBBFBFGF/:?DFC90\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1111:9655:13916\t2193\tgi|251831106|ref|NC_012920.1|\t16520\t21\t50M201H\t=\t1\t-16569\tCATAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t:FBEF;0FFFFFFFBFFFFFEADEFBFFFFFFGGGFGFFBBB/F.GGFC9\tNM:i:1\tms:i:90\tAS:i:90\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:92\ts2:i:0\tde:f:0.02\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,50S201M,60,3;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:21791:23272\t2129\tgi|251831106|ref|NC_012920.1|\t16522\t20\t48M203H\t=\t1\t-16569\tTAAAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t/.FFFFFBBFBFBFFFEFEEFFFDFFFFFFFB//BBEFFB/.AABBFF\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:2\ts1:i:84\ts2:i:0\tde:f:0.0208\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16406\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tAAABBFFFFFDFGGGGGGGGGGHHHHHHGHHHGFHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S120M86S,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1105:7169:17145\t2145\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16275\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tCCCCCFFFFFFFGGGGGGGGGGHHHHHHHHHHHBHHHHHHHGGHG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S206M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2209\tgi|251831106|ref|NC_012920.1|\t16525\t11\t45M206H\t=\t1\t-16388\tAACCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tBCCDDFFFFFFFGGGGGGGGGGHHHHHHHHHHHHHHHHHHHGGGG\tNM:i:1\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0.0222\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,45S138M68S,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:16639:15258\t2145\tgi|251831106|ref|NC_012920.1|\t16527\t11\t43M208H\t=\t1\t-16287\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\t11>>ABFFFFFFGGCGC1BBF1GHHHBHHHHGFHGH1A100AA\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,+,43S208M,60,4;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:17657:20856\t2193\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFEFFF?FEFFFFEAA.;AAFFF:0FB0FFBFFFB:A9A90FF\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1103:25465:20010\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t88H43M120H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tHFHHHGAFA<.HFGHGGGGGHGGDDGHHHHFHFHGGFC?HGHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,131S120M,60,2;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1106:15481:16176\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t28\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tFFFFFB.FEFAA:EFFE:.;AFBB;FFFFFFFGFF/FEDFGGG\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:69\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1108:7626:10048\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t11\t70H43M138H\t=\t1\t-16569\tCCTAAATAGCCCACACGTTCCCCTTAAATAAGACATCACGATG\tGFHHHHHHGGGHGGHGGGGGGHHHFGGGGHHGFHHHF<GGHHH\tNM:i:0\tms:i:86\tAS:i:86\tnn:i:0\ttp:A:P\tcm:i:3\ts1:i:34\ts2:i:0\tde:f:0\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,113S138M,60,1;\trl:i:0\n+M01368:8:000000000-A3GHV:1:1114:14540:5315\t2129\tgi|251831106|ref|NC_012920.1|\t16527\t9\t5H43M203H\t=\t1\t-16569\tCCTAAATAGCCCCCACGTTCCCCTTAAATAAGACATCACGATG\t09BFBB:--A=-.A;FEBFFFFFFFFFFFFFFFC//?AA0EFF\tNM:i:1\tms:i:76\tAS:i:76\tnn:i:0\ttp:A:P\tcm:i:1\ts1:i:84\ts2:i:0\tde:f:0.0233\tSA:Z:gi|251831106|ref|NC_012920.1|,1,-,48S203M,60,1;\trl:i:0\n"], "status": "failure"}}, {"id": "minimap2/2.17+galaxy4-4", "has_data": true, "data": {"tool_id": "minimap2", "tool_version": "2.17+galaxy4", "test_index": 4, "time_seconds": 9.65480923652649, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "minimap2/2.17+galaxy4-5", "has_data": true, "data": {"tool_id": "minimap2", "tool_version": "2.17+galaxy4", "test_index": 5, "status": "skip"}}, {"id": "minimap2/2.17+galaxy4-6", "has_data": true, "data": {"tool_id": "minimap2", "tool_version": "2.17+galaxy4", "test_index": 6, "status": "skip"}}, {"id": "minimap2/2.17+galaxy4-7", "has_data": true, "data": {"tool_id": "minimap2", "tool_version": "2.17+galaxy4", "test_index": 7, "time_seconds": 24.478626251220703, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "2c185d7a55034889"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "2c185d7a55034889"}, "fastq_input|analysis_type_selector": "ava-ont", "fastq_input|fastq_input_selector": "single", "io_options|output_format": "paf"}, "job": {"model_class": "Job", "id": "d015da23cfa89a4a", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:39:58.556430", "create_time": "2024-02-23T06:39:48.834304", "galaxy_version": "23.1", "command_version": "2.17-r941", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-wd4kz", "command_line": "ln -f -s '/galaxy/server/database/objects/3/0/6/dataset_30613d5d-1eef-4ab1-b40b-801ac743f955.dat' reference.fa && minimap2 -x ava-ont           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/3/0/6/dataset_30613d5d-1eef-4ab1-b40b-801ac743f955.dat' > '/galaxy/server/database/objects/7/9/2/dataset_792b3b9b-9315-4568-8d74-d33afff63f38.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": false, \"Q\": false, \"Y\": false, \"c\": false, \"cs\": null, \"eqx\": false, \"output_format\": \"paf\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": true, \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": false, \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": false, \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"ava-ont\", \"fastq_input1\": {\"values\": [{\"id\": 94, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 94, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"reference_source|ref_file": {"id": "2c185d7a55034889", "src": "hda", "uuid": "30613d5d-1eef-4ab1-b40b-801ac743f955"}, "fastq_input|fastq_input1": {"id": "2c185d7a55034889", "src": "hda", "uuid": "30613d5d-1eef-4ab1-b40b-801ac743f955"}}, "outputs": {"alignment_output": {"id": "e9d0e38b094b7c77", "src": "hda", "uuid": "792b3b9b-9315-4568-8d74-d33afff63f38"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[M::mm_idx_gen::0.013*0.93] collected minimizers\n[M::mm_idx_gen::0.024*2.77] sorted minimizers\n[M::main::0.024*2.77] loaded/built the index for 25 target sequence(s)\n[M::mm_mapopt_update::0.026*2.67] mid_occ = 3\n[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25\n[M::mm_idx_stat::0.027*2.60] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935\n[M::worker_pipeline::0.034*2.78] mapped 25 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x ava-ont -t 8 reference.fa /galaxy/server/database/objects/3/0/6/dataset_30613d5d-1eef-4ab1-b40b-801ac743f955.dat\n[M::main] Real time: 0.039 sec; CPU: 0.100 sec; Peak RSS: 0.013 GB\n", "job_stdout": "", "job_stderr": "", "stderr": "[M::mm_idx_gen::0.013*0.93] collected minimizers\n[M::mm_idx_gen::0.024*2.77] sorted minimizers\n[M::main::0.024*2.77] loaded/built the index for 25 target sequence(s)\n[M::mm_mapopt_update::0.026*2.67] mid_occ = 3\n[M::mm_idx_stat] kmer size: 15; skip: 5; is_hpc: 0; #seq: 25\n[M::mm_idx_stat::0.027*2.60] distinct minimizers: 80111 (99.87% are singletons); average occurrences: 1.002; average spacing: 2.935\n[M::worker_pipeline::0.034*2.78] mapped 25 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -x ava-ont -t 8 reference.fa /galaxy/server/database/objects/3/0/6/dataset_30613d5d-1eef-4ab1-b40b-801ac743f955.dat\n[M::main] Real time: 0.039 sec; CPU: 0.100 sec; Peak RSS: 0.013 GB\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:39:50", "plugin": "core", "name": "end_epoch", "raw_value": "1708670390.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:39:50", "plugin": "core", "name": "start_epoch", "raw_value": "1708670390.0000000"}, {"title": "Memory Allocated (MB)", "value": "34359", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "34359.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "minimap2/2.17+galaxy4-8", "has_data": true, "data": {"tool_id": "minimap2", "tool_version": "2.17+galaxy4", "test_index": 8, "time_seconds": 25.52488350868225, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "7dc89c83cdf49186"}, "reference_source|reference_source_selector": "history", "fastq_input|fastq_input1": {"src": "hda", "id": "7dc89c83cdf49186"}, "fastq_input|analysis_type_selector": "self-homology", "fastq_input|fastq_input_selector": "single"}, "job": {"model_class": "Job", "id": "2de35061b22ea693", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:40:24.410926", "create_time": "2024-02-23T06:40:14.336480", "galaxy_version": "23.1", "command_version": "2.17-r941", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/minimap2/minimap2/2.17+galaxy4", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-fvczg", "command_line": "ln -f -s '/galaxy/server/database/objects/1/3/a/dataset_13a7cbe3-0035-4003-91cc-17da1dcd91c8.dat' reference.fa && minimap2 -DP -k19 -w19 -m200           -t ${GALAXY_SLOTS:-4} reference.fa '/galaxy/server/database/objects/1/3/a/dataset_13a7cbe3-0035-4003-91cc-17da1dcd91c8.dat' -a | samtools sort -@${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" -O BAM -o '/galaxy/server/database/objects/d/0/2/dataset_d0219838-db4a-4ee3-9166-e5d02a41abfb.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "io_options": "{\"K\": \"\", \"L\": false, \"Q\": false, \"Y\": false, \"c\": false, \"cs\": null, \"eqx\": false, \"output_format\": \"BAM\"}", "alignment_options": "{\"A\": \"\", \"B\": \"\", \"E\": \"\", \"E2\": \"\", \"O\": \"\", \"O2\": \"\", \"no_end_flt\": true, \"s\": \"\", \"splicing\": {\"__current_case__\": 0, \"splice_mode\": \"preset\"}, \"z\": \"\", \"z2\": \"\"}", "mapping_options": "{\"F\": \"\", \"N\": \"\", \"X\": false, \"f\": \"\", \"g\": \"\", \"m\": \"\", \"max_chain_iter\": \"\", \"max_chain_skip\": \"\", \"min_occ_floor\": \"\", \"n\": \"\", \"p\": \"\", \"r\": \"\"}", "indexing_options": "{\"H\": false, \"I\": \"\", \"k\": \"\", \"w\": \"\"}", "fastq_input": "{\"__current_case__\": 0, \"analysis_type_selector\": \"self-homology\", \"fastq_input1\": {\"values\": [{\"id\": 96, \"src\": \"hda\"}]}, \"fastq_input_selector\": \"single\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 96, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"reference_source|ref_file": {"id": "7dc89c83cdf49186", "src": "hda", "uuid": "13a7cbe3-0035-4003-91cc-17da1dcd91c8"}, "fastq_input|fastq_input1": {"id": "7dc89c83cdf49186", "src": "hda", "uuid": "13a7cbe3-0035-4003-91cc-17da1dcd91c8"}}, "outputs": {"alignment_output": {"id": "90ca6741efc0dbee", "src": "hda", "uuid": "d0219838-db4a-4ee3-9166-e5d02a41abfb"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[M::mm_idx_gen::0.004*0.83] collected minimizers\n[M::mm_idx_gen::0.006*1.50] sorted minimizers\n[M::main::0.006*1.49] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.48] mid_occ = 9\n[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.46] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057\n[M::worker_pipeline::0.031*1.07] mapped 1 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -DP -k19 -w19 -m200 -t 8 -a reference.fa /galaxy/server/database/objects/1/3/a/dataset_13a7cbe3-0035-4003-91cc-17da1dcd91c8.dat\n[M::main] Real time: 0.032 sec; CPU: 0.034 sec; Peak RSS: 0.011 GB\n", "job_stdout": "", "job_stderr": "", "stderr": "[M::mm_idx_gen::0.004*0.83] collected minimizers\n[M::mm_idx_gen::0.006*1.50] sorted minimizers\n[M::main::0.006*1.49] loaded/built the index for 1 target sequence(s)\n[M::mm_mapopt_update::0.006*1.48] mid_occ = 9\n[M::mm_idx_stat] kmer size: 19; skip: 19; is_hpc: 0; #seq: 1\n[M::mm_idx_stat::0.006*1.46] distinct minimizers: 2920 (98.42% are singletons); average occurrences: 1.022; average spacing: 10.057\n[M::worker_pipeline::0.031*1.07] mapped 1 sequences\n[M::main] Version: 2.17-r941\n[M::main] CMD: minimap2 -DP -k19 -w19 -m200 -t 8 -a reference.fa /galaxy/server/database/objects/1/3/a/dataset_13a7cbe3-0035-4003-91cc-17da1dcd91c8.dat\n[M::main] Real time: 0.032 sec; CPU: 0.034 sec; Peak RSS: 0.011 GB\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:40:16", "plugin": "core", "name": "end_epoch", "raw_value": "1708670416.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:40:15", "plugin": "core", "name": "start_epoch", "raw_value": "1708670415.0000000"}, {"title": "Memory Allocated (MB)", "value": "34359", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "34359.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "poretools_tabular/0.6.1a1.0-0", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 0, "time_seconds": 50.05927586555481, "inputs": {"input": {"src": "hda", "id": "c82fb440ac0ce498"}}, "job": {"model_class": "Job", "id": "93ebee79e7c5a941", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:48:15.386112", "create_time": "2024-02-23T06:47:41.313231", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-lx6gl", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/3/1/d/dataset_31de702e-cd49-4936-8b49-ffe18c4deb1b.dat' > '/galaxy/server/database/objects/d/4/a/dataset_d4a532e1-cb5d-48bb-bcbf-d024da7b62a1.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "c82fb440ac0ce498", "src": "hda", "uuid": "31de702e-cd49-4936-8b49-ffe18c4deb1b"}}, "outputs": {"output": {"id": "45ea8add349a797f", "src": "hda", "uuid": "d4a532e1-cb5d-48bb-bcbf-d024da7b62a1"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:47:59", "plugin": "core", "name": "end_epoch", "raw_value": "1708670879.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:47:58", "plugin": "core", "name": "start_epoch", "raw_value": "1708670878.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_tabular/0.6.1a1.0-1", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 1, "time_seconds": 24.22533345222473, "inputs": {"input": {"src": "hda", "id": "7dd2015ac54126d6"}}, "job": {"model_class": "Job", "id": "3d9a7aa55fb5af2f", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:48:39.568607", "create_time": "2024-02-23T06:48:30.768807", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-cgblm", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/f/d/d/dataset_fdd1e828-32ba-4fb7-8319-692571044c67.dat' > '/galaxy/server/database/objects/b/2/3/dataset_b23c5605-f8d5-415b-a013-c2ca76384e83.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "7dd2015ac54126d6", "src": "hda", "uuid": "fdd1e828-32ba-4fb7-8319-692571044c67"}}, "outputs": {"output": {"id": "1aaae32844a993c8", "src": "hda", "uuid": "b23c5605-f8d5-415b-a013-c2ca76384e83"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:48:32", "plugin": "core", "name": "end_epoch", "raw_value": "1708670912.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:48:31", "plugin": "core", "name": "start_epoch", "raw_value": "1708670911.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_tabular/0.6.1a1.0-2", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 2, "time_seconds": 25.273221015930176, "inputs": {"input": {"src": "hda", "id": "6659b04683d619d6"}}, "job": {"model_class": "Job", "id": "2c185d7a55034889", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:49:05.071913", "create_time": "2024-02-23T06:48:55.354628", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-kr4sk", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/e/e/9/dataset_ee9dc5f8-6072-48ce-b696-78a30a7dca5e.dat' > '/galaxy/server/database/objects/9/a/4/dataset_9a4ac528-adfe-440b-b164-209085202241.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "6659b04683d619d6", "src": "hda", "uuid": "ee9dc5f8-6072-48ce-b696-78a30a7dca5e"}}, "outputs": {"output": {"id": "ba94ca5ccca19237", "src": "hda", "uuid": "9a4ac528-adfe-440b-b164-209085202241"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:48:57", "plugin": "core", "name": "end_epoch", "raw_value": "1708670937.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:48:56", "plugin": "core", "name": "start_epoch", "raw_value": "1708670936.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_tabular/0.6.1a1.0-3", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 3, "time_seconds": 25.268019437789917, "inputs": {"input": {"src": "hda", "id": "9e574c5feb4e800e"}}, "job": {"model_class": "Job", "id": "7dc89c83cdf49186", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:49:30.301542", "create_time": "2024-02-23T06:49:19.695987", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-nbnwp", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/7/8/b/dataset_78bab7c3-bc31-4383-bbcf-8c1f1dc85d43.dat' > '/galaxy/server/database/objects/2/1/9/dataset_219f91fd-cd44-451b-84f6-fea585ff4145.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "9e574c5feb4e800e", "src": "hda", "uuid": "78bab7c3-bc31-4383-bbcf-8c1f1dc85d43"}}, "outputs": {"output": {"id": "42a5c753a9a947c1", "src": "hda", "uuid": "219f91fd-cd44-451b-84f6-fea585ff4145"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:49:22", "plugin": "core", "name": "end_epoch", "raw_value": "1708670962.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:49:21", "plugin": "core", "name": "start_epoch", "raw_value": "1708670961.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "poretools_tabular/0.6.1a1.0-4", "has_data": true, "data": {"tool_id": "poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 4, "time_seconds": 26.379975080490112, "inputs": {"input": {"src": "hda", "id": "0f12ef9838e662df"}}, "job": {"model_class": "Job", "id": "9382e65d2d0e1351", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:49:56.681114", "create_time": "2024-02-23T06:49:46.101069", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-wvrp2", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/2/4/0/dataset_24043b26-9327-4ecf-b474-86dfc4344a16.dat' > '/galaxy/server/database/objects/a/7/b/dataset_a7b3636e-aed7-4f5c-832b-55c26f6ff5d7.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "0f12ef9838e662df", "src": "hda", "uuid": "24043b26-9327-4ecf-b474-86dfc4344a16"}}, "outputs": {"output": {"id": "b68880ce7968b231", "src": "hda", "uuid": "a7b3636e-aed7-4f5c-832b-55c26f6ff5d7"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:49:48", "plugin": "core", "name": "end_epoch", "raw_value": "1708670988.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:49:47", "plugin": "core", "name": "start_epoch", "raw_value": "1708670987.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_merge/1.9-0", "has_data": true, "data": {"tool_id": "samtools_merge", "tool_version": "1.9", "test_index": 0, "time_seconds": 30.812689542770386, "inputs": {"bamfiles": [{"src": "hda", "id": "97118ed12a1d9983"}, {"src": "hda", "id": "d756c072e7611f37"}, {"src": "hda", "id": "9c27cd99893a1dbd"}]}, "job": {"model_class": "Job", "id": "90f5ec43df8b4b9f", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:05:17.769874", "create_time": "2024-02-23T07:05:05.001087", "galaxy_version": "23.1", "command_version": "Version: 1.9 (using htslib 1.9)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_merge/samtools_merge/1.9", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-q45t7", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T sorttemp -O sam -o 0.sam '/galaxy/server/database/objects/d/b/e/dataset_dbe062aa-40a1-438c-8770-5925b82f130c.dat' &&  samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T sorttemp -O sam -o 1.sam '/galaxy/server/database/objects/2/e/3/dataset_2e3927dc-1f79-4599-9c88-eac4eefcc874.dat' &&  samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T sorttemp -O sam -o 2.sam '/galaxy/server/database/objects/c/0/b/dataset_c0bbfecf-e8e2-4d7c-95ef-b5eca0280177.dat' &&   samtools merge -@ $addthreads -s 1 -f   /galaxy/server/database/objects/1/8/3/dataset_18333676-f84f-4bad-bd48-46f5e9778ad4.dat 0.sam 1.sam 2.sam", "traceback": null, "params": {"__input_ext": "\"sam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "seed": "\"1\"", "idpg": "false", "idrg": "false", "headerbam": null, "region": null}, "inputs": {"bamfiles": {"id": "97118ed12a1d9983", "src": "hda", "uuid": "dbe062aa-40a1-438c-8770-5925b82f130c"}, "bamfiles1": {"id": "97118ed12a1d9983", "src": "hda", "uuid": "dbe062aa-40a1-438c-8770-5925b82f130c"}, "bamfiles2": {"id": "d756c072e7611f37", "src": "hda", "uuid": "2e3927dc-1f79-4599-9c88-eac4eefcc874"}, "bamfiles3": {"id": "9c27cd99893a1dbd", "src": "hda", "uuid": "c0bbfecf-e8e2-4d7c-95ef-b5eca0280177"}}, "outputs": {"output": {"id": "dd1327843392a8f7", "src": "hda", "uuid": "18333676-f84f-4bad-bd48-46f5e9778ad4"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:05:09", "plugin": "core", "name": "end_epoch", "raw_value": "1708671909.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:05:09", "plugin": "core", "name": "start_epoch", "raw_value": "1708671909.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_merge/1.9-0", "has_data": true, "data": {"tool_id": "samtools_merge", "tool_version": "1.9", "test_index": 0, "time_seconds": 27.717195510864258, "inputs": {"bamfiles": [{"src": "hda", "id": "f1342110715079b9"}, {"src": "hda", "id": "1618fe80d73eafc3"}, {"src": "hda", "id": "27e2337cb7ab4743"}]}, "job": {"model_class": "Job", "id": "6e3270887bad74aa", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:07:31.928985", "create_time": "2024-02-23T07:07:22.259922", "galaxy_version": "23.1", "command_version": "Version: 1.9 (using htslib 1.9)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_merge/samtools_merge/1.9", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-jmhn5", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T sorttemp -O sam -o 0.sam '/galaxy/server/database/objects/4/5/8/dataset_45840d38-432f-49af-91d2-f5fe7d74116e.dat' &&  samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T sorttemp -O sam -o 1.sam '/galaxy/server/database/objects/c/4/4/dataset_c44ce845-4b74-40dc-9518-1ed440014da6.dat' &&  samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T sorttemp -O sam -o 2.sam '/galaxy/server/database/objects/5/7/f/dataset_57f07b94-627d-4bfa-8406-200da927b863.dat' &&   samtools merge -@ $addthreads -s 1 -f   /galaxy/server/database/objects/a/9/c/dataset_a9c8f116-ab17-4aca-a812-cc01af293885.dat 0.sam 1.sam 2.sam", "traceback": null, "params": {"__input_ext": "\"sam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "seed": "\"1\"", "idpg": "false", "idrg": "false", "headerbam": null, "region": null}, "inputs": {"bamfiles": {"id": "f1342110715079b9", "src": "hda", "uuid": "45840d38-432f-49af-91d2-f5fe7d74116e"}, "bamfiles1": {"id": "f1342110715079b9", "src": "hda", "uuid": "45840d38-432f-49af-91d2-f5fe7d74116e"}, "bamfiles2": {"id": "1618fe80d73eafc3", "src": "hda", "uuid": "c44ce845-4b74-40dc-9518-1ed440014da6"}, "bamfiles3": {"id": "27e2337cb7ab4743", "src": "hda", "uuid": "57f07b94-627d-4bfa-8406-200da927b863"}}, "outputs": {"output": {"id": "e9d893d15ec92c09", "src": "hda", "uuid": "a9c8f116-ab17-4aca-a812-cc01af293885"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:07:23", "plugin": "core", "name": "end_epoch", "raw_value": "1708672043.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:07:23", "plugin": "core", "name": "start_epoch", "raw_value": "1708672043.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_merge/1.9-1", "has_data": true, "data": {"tool_id": "samtools_merge", "tool_version": "1.9", "test_index": 1, "time_seconds": 28.59863567352295, "inputs": {"bamfiles": [{"src": "hda", "id": "fbefead6cbfd4161"}, {"src": "hda", "id": "fccbc59c3f8e6659"}, {"src": "hda", "id": "9c754f27183fb56a"}]}, "job": {"model_class": "Job", "id": "8e234038bb0a2f0e", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:05:46.573550", "create_time": "2024-02-23T07:05:36.908310", "galaxy_version": "23.1", "command_version": "Version: 1.9 (using htslib 1.9)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_merge/samtools_merge/1.9", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-hzhz4", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/7/f/1/dataset_7f152d09-5c15-48bf-9d18-4eb95c2cc056.dat' 0.sam &&  ln -s '/galaxy/server/database/objects/b/4/1/dataset_b41f5b05-117d-43ee-9b58-f7dbf1ba3b2b.dat' 1.sam &&  ln -s '/galaxy/server/database/objects/a/f/3/dataset_af3d179b-cba3-4aa6-9c0b-b1aaff823366.dat' 2.sam &&   samtools merge -@ $addthreads -s 1 -f   /galaxy/server/database/objects/9/b/3/dataset_9b3de89b-45c3-407f-826f-1654798c264c.dat 0.sam 1.sam 2.sam", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "seed": "\"1\"", "idpg": "false", "idrg": "false", "headerbam": null, "region": null}, "inputs": {"bamfiles": {"id": "fbefead6cbfd4161", "src": "hda", "uuid": "7f152d09-5c15-48bf-9d18-4eb95c2cc056"}, "bamfiles1": {"id": "fbefead6cbfd4161", "src": "hda", "uuid": "7f152d09-5c15-48bf-9d18-4eb95c2cc056"}, "bamfiles2": {"id": "fccbc59c3f8e6659", "src": "hda", "uuid": "b41f5b05-117d-43ee-9b58-f7dbf1ba3b2b"}, "bamfiles3": {"id": "9c754f27183fb56a", "src": "hda", "uuid": "af3d179b-cba3-4aa6-9c0b-b1aaff823366"}}, "outputs": {"output": {"id": "80ba957c0e9e9ab8", "src": "hda", "uuid": "9b3de89b-45c3-407f-826f-1654798c264c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[bam_translate] PG tag \"colt\" on read \"r001\" encountered with no corresponding entry in header, tag lost. Unknown tags are only reported once per input file for each tag ID.\n", "job_stdout": "", "job_stderr": "", "stderr": "[bam_translate] PG tag \"colt\" on read \"r001\" encountered with no corresponding entry in header, tag lost. Unknown tags are only reported once per input file for each tag ID.\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:05:38", "plugin": "core", "name": "end_epoch", "raw_value": "1708671938.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:05:38", "plugin": "core", "name": "start_epoch", "raw_value": "1708671938.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_merge/1.9-1", "has_data": true, "data": {"tool_id": "samtools_merge", "tool_version": "1.9", "test_index": 1, "time_seconds": 14.728581666946411, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "samtools_merge/1.9-2", "has_data": true, "data": {"tool_id": "samtools_merge", "tool_version": "1.9", "test_index": 2, "time_seconds": 25.340014219284058, "inputs": {"bamfiles": {"src": "hda", "id": "4f1d377fb6535cba"}}, "job": {"model_class": "Job", "id": "6dfbf69e7b7ce1ac", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:06:11.699622", "create_time": "2024-02-23T07:06:01.931965", "galaxy_version": "23.1", "command_version": "Version: 1.9 (using htslib 1.9)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_merge/samtools_merge/1.9", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-qsf6v", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/f/8/4/dataset_f843a22b-7a51-40f2-b8b5-d8241d0cb691.dat' 0.sam &&   samtools merge -@ $addthreads -s 1 -f   /galaxy/server/database/objects/4/4/8/dataset_4486f8ec-e67e-435b-9be8-c6e784914c3b.dat 0.sam", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "seed": "\"1\"", "idpg": "false", "idrg": "false", "headerbam": null, "region": null}, "inputs": {"bamfiles": {"id": "4f1d377fb6535cba", "src": "hda", "uuid": "f843a22b-7a51-40f2-b8b5-d8241d0cb691"}, "bamfiles1": {"id": "4f1d377fb6535cba", "src": "hda", "uuid": "f843a22b-7a51-40f2-b8b5-d8241d0cb691"}}, "outputs": {"output": {"id": "24f256bbfb1d83f7", "src": "hda", "uuid": "4486f8ec-e67e-435b-9be8-c6e784914c3b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:06:03", "plugin": "core", "name": "end_epoch", "raw_value": "1708671963.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:06:03", "plugin": "core", "name": "start_epoch", "raw_value": "1708671963.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_merge/1.9-2", "has_data": true, "data": {"tool_id": "samtools_merge", "tool_version": "1.9", "test_index": 2, "time_seconds": 24.268584966659546, "inputs": {"bamfiles": {"src": "hda", "id": "ae7a4c38f7df755a"}}, "job": {"model_class": "Job", "id": "8ec6a2077cdffee7", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:08:11.187166", "create_time": "2024-02-23T07:08:01.444403", "galaxy_version": "23.1", "command_version": "Version: 1.9 (using htslib 1.9)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_merge/samtools_merge/1.9", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-mt9wk", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/d/a/d/dataset_dad0a02e-dc5e-45dc-800f-ee7b9c3cd322.dat' 0.sam &&   samtools merge -@ $addthreads -s 1 -f   /galaxy/server/database/objects/a/4/6/dataset_a4668f98-01ce-477c-bd75-119d42030d56.dat 0.sam", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "seed": "\"1\"", "idpg": "false", "idrg": "false", "headerbam": null, "region": null}, "inputs": {"bamfiles": {"id": "ae7a4c38f7df755a", "src": "hda", "uuid": "dad0a02e-dc5e-45dc-800f-ee7b9c3cd322"}, "bamfiles1": {"id": "ae7a4c38f7df755a", "src": "hda", "uuid": "dad0a02e-dc5e-45dc-800f-ee7b9c3cd322"}}, "outputs": {"output": {"id": "c0eefa7afc10b5aa", "src": "hda", "uuid": "a4668f98-01ce-477c-bd75-119d42030d56"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:08:02", "plugin": "core", "name": "end_epoch", "raw_value": "1708672082.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:08:02", "plugin": "core", "name": "start_epoch", "raw_value": "1708672082.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_merge/1.9-3", "has_data": true, "data": {"tool_id": "samtools_merge", "tool_version": "1.9", "test_index": 3, "time_seconds": 25.45490288734436, "inputs": {"bamfiles": [{"src": "hda", "id": "4298a4e558475d2f"}, {"src": "hda", "id": "056fe2b8a47f27a0"}], "idrg": true, "idpg": true}, "job": {"model_class": "Job", "id": "67d7f9e06b52c84e", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:06:37.383126", "create_time": "2024-02-23T07:06:27.758875", "galaxy_version": "23.1", "command_version": "Version: 1.9 (using htslib 1.9)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_merge/samtools_merge/1.9", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-vjtp7", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/b/1/9/dataset_b1908c99-7dc3-43a5-9385-56b24792db15.dat' 0.sam &&  ln -s '/galaxy/server/database/objects/2/7/c/dataset_27c8c033-aaef-4134-9eeb-c9fa2e0de732.dat' 1.sam &&   samtools merge -@ $addthreads -s 1 -f -c -p /galaxy/server/database/objects/8/2/0/dataset_8204342e-1a99-4879-8d33-be3cf2dead4f.dat 0.sam 1.sam", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "seed": "\"1\"", "idpg": "true", "idrg": "true", "headerbam": null, "region": null}, "inputs": {"bamfiles": {"id": "4298a4e558475d2f", "src": "hda", "uuid": "b1908c99-7dc3-43a5-9385-56b24792db15"}, "bamfiles1": {"id": "4298a4e558475d2f", "src": "hda", "uuid": "b1908c99-7dc3-43a5-9385-56b24792db15"}, "bamfiles2": {"id": "056fe2b8a47f27a0", "src": "hda", "uuid": "27c8c033-aaef-4134-9eeb-c9fa2e0de732"}}, "outputs": {"output": {"id": "2ed364ac3ec17c72", "src": "hda", "uuid": "8204342e-1a99-4879-8d33-be3cf2dead4f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[bam_translate] PG tag \"colt\" on read \"r001\" encountered with no corresponding entry in header, tag lost. Unknown tags are only reported once per input file for each tag ID.\n", "job_stdout": "", "job_stderr": "", "stderr": "[bam_translate] PG tag \"colt\" on read \"r001\" encountered with no corresponding entry in header, tag lost. Unknown tags are only reported once per input file for each tag ID.\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:06:29", "plugin": "core", "name": "end_epoch", "raw_value": "1708671989.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:06:29", "plugin": "core", "name": "start_epoch", "raw_value": "1708671989.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_merge/1.9-3", "has_data": true, "data": {"tool_id": "samtools_merge", "tool_version": "1.9", "test_index": 3, "time_seconds": 25.771833419799805, "inputs": {"bamfiles": [{"src": "hda", "id": "07a4ad6289fafea0"}, {"src": "hda", "id": "a6fa8abfb17de7b0"}], "idrg": true, "idpg": true}, "job": {"model_class": "Job", "id": "7258faf6b5207f43", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:08:37.050136", "create_time": "2024-02-23T07:08:27.606062", "galaxy_version": "23.1", "command_version": "Version: 1.9 (using htslib 1.9)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_merge/samtools_merge/1.9", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-wwlkz", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   ln -s '/galaxy/server/database/objects/d/3/b/dataset_d3b027e9-4cdc-4140-83da-816a974b5bd1.dat' 0.sam &&  ln -s '/galaxy/server/database/objects/6/f/7/dataset_6f7ee364-abd7-4a8e-a9f7-0f21cdc273b3.dat' 1.sam &&   samtools merge -@ $addthreads -s 1 -f -c -p /galaxy/server/database/objects/4/a/f/dataset_4afe2ca5-b298-4cdb-abc7-fd2afc049f01.dat 0.sam 1.sam", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "seed": "\"1\"", "idpg": "true", "idrg": "true", "headerbam": null, "region": null}, "inputs": {"bamfiles": {"id": "07a4ad6289fafea0", "src": "hda", "uuid": "d3b027e9-4cdc-4140-83da-816a974b5bd1"}, "bamfiles1": {"id": "07a4ad6289fafea0", "src": "hda", "uuid": "d3b027e9-4cdc-4140-83da-816a974b5bd1"}, "bamfiles2": {"id": "a6fa8abfb17de7b0", "src": "hda", "uuid": "6f7ee364-abd7-4a8e-a9f7-0f21cdc273b3"}}, "outputs": {"output": {"id": "fa23eb4050b136f4", "src": "hda", "uuid": "4afe2ca5-b298-4cdb-abc7-fd2afc049f01"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[bam_translate] PG tag \"colt\" on read \"r001\" encountered with no corresponding entry in header, tag lost. Unknown tags are only reported once per input file for each tag ID.\n", "job_stdout": "", "job_stderr": "", "stderr": "[bam_translate] PG tag \"colt\" on read \"r001\" encountered with no corresponding entry in header, tag lost. Unknown tags are only reported once per input file for each tag ID.\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:08:29", "plugin": "core", "name": "end_epoch", "raw_value": "1708672109.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:08:29", "plugin": "core", "name": "start_epoch", "raw_value": "1708672109.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_merge/1.9-4", "has_data": true, "data": {"tool_id": "samtools_merge", "tool_version": "1.9", "test_index": 4, "time_seconds": 25.763355016708374, "inputs": {"bamfiles": [{"src": "hda", "id": "921d792a1c6d95df"}, {"src": "hda", "id": "ba8157a2e73c076b"}]}, "job": {"model_class": "Job", "id": "35c07dc555728683", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:07:03.045381", "create_time": "2024-02-23T07:06:52.937651", "galaxy_version": "23.1", "command_version": "Version: 1.9 (using htslib 1.9)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_merge/samtools_merge/1.9", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-xxkcl", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T sorttemp -O sam -o 0.sam '/galaxy/server/database/objects/1/c/9/dataset_1c9d16a9-425e-4b35-b74d-46fac3598449.dat' &&  samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T sorttemp -O sam -o 1.sam '/galaxy/server/database/objects/e/1/5/dataset_e15e81e3-c428-4960-8db7-95e388c6ea43.dat' &&   samtools merge -@ $addthreads -s 1 -f   /galaxy/server/database/objects/1/6/1/dataset_161d56b2-fe90-40dc-b7ef-6a6c82b0c74e.dat 0.sam 1.sam", "traceback": null, "params": {"__input_ext": "\"sam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "seed": "\"1\"", "idpg": "false", "idrg": "false", "headerbam": null, "region": null}, "inputs": {"bamfiles": {"id": "921d792a1c6d95df", "src": "hda", "uuid": "1c9d16a9-425e-4b35-b74d-46fac3598449"}, "bamfiles1": {"id": "921d792a1c6d95df", "src": "hda", "uuid": "1c9d16a9-425e-4b35-b74d-46fac3598449"}, "bamfiles2": {"id": "ba8157a2e73c076b", "src": "hda", "uuid": "e15e81e3-c428-4960-8db7-95e388c6ea43"}}, "outputs": {"output": {"id": "3c08b462cf85d75f", "src": "hda", "uuid": "161d56b2-fe90-40dc-b7ef-6a6c82b0c74e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[bam_translate] PG tag \"colt\" on read \"r001\" encountered with no corresponding entry in header, tag lost. Unknown tags are only reported once per input file for each tag ID.\n", "job_stdout": "", "job_stderr": "", "stderr": "[bam_translate] PG tag \"colt\" on read \"r001\" encountered with no corresponding entry in header, tag lost. Unknown tags are only reported once per input file for each tag ID.\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:06:54", "plugin": "core", "name": "end_epoch", "raw_value": "1708672014.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:06:54", "plugin": "core", "name": "start_epoch", "raw_value": "1708672014.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "samtools_merge/1.9-4", "has_data": true, "data": {"tool_id": "samtools_merge", "tool_version": "1.9", "test_index": 4, "time_seconds": 27.868964433670044, "inputs": {"bamfiles": [{"src": "hda", "id": "ae8a011e0cb50432"}, {"src": "hda", "id": "fcb11fdfd31e1c17"}]}, "job": {"model_class": "Job", "id": "a7618a3f3b892b64", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:09:04.844619", "create_time": "2024-02-23T07:08:53.517754", "galaxy_version": "23.1", "command_version": "Version: 1.9 (using htslib 1.9)", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_merge/samtools_merge/1.9", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-xzr6j", "command_line": "addthreads=${GALAXY_SLOTS:-1} && (( addthreads-- )) &&   samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T sorttemp -O sam -o 0.sam '/galaxy/server/database/objects/b/9/a/dataset_b9a187a5-7e0c-4ede-86f1-c91c310cc6eb.dat' &&  samtools sort -@ $addthreads -m ${GALAXY_MEMORY_MB:-768}M -T sorttemp -O sam -o 1.sam '/galaxy/server/database/objects/4/c/2/dataset_4c260c8d-4474-450e-87cf-9ca74f6c41b5.dat' &&   samtools merge -@ $addthreads -s 1 -f   /galaxy/server/database/objects/b/a/c/dataset_bac0a098-9d78-4069-b91e-1dfe55cdf90b.dat 0.sam 1.sam", "traceback": null, "params": {"__input_ext": "\"sam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "seed": "\"1\"", "idpg": "false", "idrg": "false", "headerbam": null, "region": null}, "inputs": {"bamfiles": {"id": "ae8a011e0cb50432", "src": "hda", "uuid": "b9a187a5-7e0c-4ede-86f1-c91c310cc6eb"}, "bamfiles1": {"id": "ae8a011e0cb50432", "src": "hda", "uuid": "b9a187a5-7e0c-4ede-86f1-c91c310cc6eb"}, "bamfiles2": {"id": "fcb11fdfd31e1c17", "src": "hda", "uuid": "4c260c8d-4474-450e-87cf-9ca74f6c41b5"}}, "outputs": {"output": {"id": "7f82a5c2ef3260d9", "src": "hda", "uuid": "bac0a098-9d78-4069-b91e-1dfe55cdf90b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "[bam_translate] PG tag \"colt\" on read \"r001\" encountered with no corresponding entry in header, tag lost. Unknown tags are only reported once per input file for each tag ID.\n", "job_stdout": "", "job_stderr": "", "stderr": "[bam_translate] PG tag \"colt\" on read \"r001\" encountered with no corresponding entry in header, tag lost. Unknown tags are only reported once per input file for each tag ID.\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:08:55", "plugin": "core", "name": "end_epoch", "raw_value": "1708672135.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:08:55", "plugin": "core", "name": "start_epoch", "raw_value": "1708672135.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-0", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 0, "time_seconds": 13.385597705841064, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-0", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 0, "time_seconds": 14.155066728591919, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-1", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 1, "time_seconds": 13.137158155441284, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-1", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 1, "time_seconds": 13.97309923171997, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-10", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 10, "time_seconds": 26.714470863342285, "inputs": {"adata": {"src": "hda", "id": "f85ccb6436017490"}, "format": "png", "method|var_names|var_names": "Fog1,EKLF,SCL", "method|var_names|type": "custom", "method|groupby": "cell_type", "method|num_categories": "7", "method|gene_symbols": "symbol", "method|log": false, "method|use_raw": false, "method|dendrogram": true, "method|figsize|width": "10", "method|figsize|height": "3", "method|figsize|test": "yes", "method|swap_axes": false, "method|method": "pl.matrixplot", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "a2c72478aae4206b", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:18:24.356911", "create_time": "2024-02-23T07:18:11.506089", "galaxy_version": "23.1", "command_version": "scanpy version: 1.7.1", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-pv792", "command_line": "cp '/galaxy/server/database/objects/d/c/f/dataset_dcf5382b-610d-4c50-bd4a-5ebaf38e11d3.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/288/configs/tmprs3un0ju' > '/galaxy/server/database/objects/9/1/2/dataset_912c11d2-d17a-4feb-82d4-a6bdd82dddfd.dat' && python '/galaxy/server/database/jobs_directory/000/288/configs/tmprs3un0ju' >> '/galaxy/server/database/objects/9/1/2/dataset_912c11d2-d17a-4feb-82d4-a6bdd82dddfd.dat' && ls . >> '/galaxy/server/database/objects/9/1/2/dataset_912c11d2-d17a-4feb-82d4-a6bdd82dddfd.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 5, \"dendrogram\": true, \"figsize\": {\"__current_case__\": 0, \"height\": \"3\", \"test\": \"yes\", \"width\": \"10\"}, \"gene_symbols\": \"symbol\", \"groupby\": \"cell_type\", \"layer\": \"\", \"log\": false, \"matplotlib_pyplot_pcolor\": {\"alpha\": \"\", \"cmap\": \"Accent\", \"edgecolors\": \"face\", \"snap\": false, \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.matrixplot\", \"num_categories\": \"7\", \"swap_axes\": false, \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\", \"var_names\": {\"__current_case__\": 1, \"type\": \"custom\", \"var_names\": \"Fog1,EKLF,SCL\"}}", "format": "\"png\""}, "inputs": {"adata": {"id": "f85ccb6436017490", "src": "hda", "uuid": "dcf5382b-610d-4c50-bd4a-5ebaf38e11d3"}}, "outputs": {"hidden_output": {"id": "422fee617f770f16", "src": "hda", "uuid": "912c11d2-d17a-4feb-82d4-a6bdd82dddfd"}, "out_png": {"id": "609ef4fd1ee45281", "src": "hda", "uuid": "38d6ae7e-7be3-4d9a-8ecd-2f42d208ae8e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file matrixplot_.png\n", "job_stdout": "", "job_stderr": "", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file matrixplot_.png\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:18:16", "plugin": "core", "name": "end_epoch", "raw_value": "1708672696.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:18:13", "plugin": "core", "name": "start_epoch", "raw_value": "1708672693.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-10", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 10, "time_seconds": 91.63767910003662, "inputs": {"adata": {"src": "hda", "id": "e325ae8f67c77f75"}, "format": "png", "method|var_names|var_names": "Fog1,EKLF,SCL", "method|var_names|type": "custom", "method|groupby": "cell_type", "method|num_categories": "7", "method|gene_symbols": "symbol", "method|log": false, "method|use_raw": false, "method|dendrogram": true, "method|figsize|width": "10", "method|figsize|height": "3", "method|figsize|test": "yes", "method|swap_axes": false, "method|method": "pl.matrixplot", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "730fd87be7064621", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:28:24.711466", "create_time": "2024-02-23T07:27:07.438863", "galaxy_version": "23.1", "command_version": "scanpy version: 1.7.1", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-2lh6g", "command_line": "cp '/galaxy/server/database/objects/2/e/4/dataset_2e41bf71-d4a5-42e9-8953-9cf9cf3549c5.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/326/configs/tmpyzq0kpwt' > '/galaxy/server/database/objects/3/6/b/dataset_36b3df72-9821-47d3-8814-37b10adaff37.dat' && python '/galaxy/server/database/jobs_directory/000/326/configs/tmpyzq0kpwt' >> '/galaxy/server/database/objects/3/6/b/dataset_36b3df72-9821-47d3-8814-37b10adaff37.dat' && ls . >> '/galaxy/server/database/objects/3/6/b/dataset_36b3df72-9821-47d3-8814-37b10adaff37.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 5, \"dendrogram\": true, \"figsize\": {\"__current_case__\": 0, \"height\": \"3\", \"test\": \"yes\", \"width\": \"10\"}, \"gene_symbols\": \"symbol\", \"groupby\": \"cell_type\", \"layer\": \"\", \"log\": false, \"matplotlib_pyplot_pcolor\": {\"alpha\": \"\", \"cmap\": \"Accent\", \"edgecolors\": \"face\", \"snap\": false, \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.matrixplot\", \"num_categories\": \"7\", \"swap_axes\": false, \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\", \"var_names\": {\"__current_case__\": 1, \"type\": \"custom\", \"var_names\": \"Fog1,EKLF,SCL\"}}", "format": "\"png\""}, "inputs": {"adata": {"id": "e325ae8f67c77f75", "src": "hda", "uuid": "2e41bf71-d4a5-42e9-8953-9cf9cf3549c5"}}, "outputs": {"hidden_output": {"id": "0b3418bdb318cc86", "src": "hda", "uuid": "36b3df72-9821-47d3-8814-37b10adaff37"}, "out_png": {"id": "867a88a602995916", "src": "hda", "uuid": "81e10bb6-d734-4e9c-9629-d189ec74d345"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file matrixplot_.png\n", "job_stdout": "", "job_stderr": "", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file matrixplot_.png\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:28:16", "plugin": "core", "name": "end_epoch", "raw_value": "1708673296.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:28:12", "plugin": "core", "name": "start_epoch", "raw_value": "1708673292.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-11", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 11, "time_seconds": 14.717050313949585, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-11", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 11, "time_seconds": 13.704861640930176, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-12", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 12, "time_seconds": 28.35861349105835, "inputs": {"adata": {"src": "hda", "id": "b72c5fc60f9dc3f6"}, "format": "png", "method|n_top": "30", "method|gene_symbols": "means", "method|setseaborn_boxplot|color": "blue", "method|setseaborn_boxplot|saturation": "0.5", "method|method": "pl.highest_expr_genes", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "8100f32b0c83d981", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:19:06.938759", "create_time": "2024-02-23T07:18:54.144078", "galaxy_version": "23.1", "command_version": "scanpy version: 1.7.1", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-cwjmg", "command_line": "cp '/galaxy/server/database/objects/b/9/7/dataset_b9709a22-d32c-49f9-8f45-f95c2291f972.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/291/configs/tmpxrkkwaz4' > '/galaxy/server/database/objects/a/7/6/dataset_a76866ed-bd4d-48b9-ad76-daeb4f9efad4.dat' && python '/galaxy/server/database/jobs_directory/000/291/configs/tmpxrkkwaz4' >> '/galaxy/server/database/objects/a/7/6/dataset_a76866ed-bd4d-48b9-ad76-daeb4f9efad4.dat' && ls . >> '/galaxy/server/database/objects/a/7/6/dataset_a76866ed-bd4d-48b9-ad76-daeb4f9efad4.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 8, \"gene_symbols\": \"means\", \"method\": \"pl.highest_expr_genes\", \"n_top\": \"30\", \"setseaborn_boxplot\": {\"color\": \"blue\", \"palette\": null, \"saturation\": \"0.5\"}}", "format": "\"png\""}, "inputs": {"adata": {"id": "b72c5fc60f9dc3f6", "src": "hda", "uuid": "b9709a22-d32c-49f9-8f45-f95c2291f972"}}, "outputs": {"hidden_output": {"id": "7567511dd7865bd9", "src": "hda", "uuid": "a76866ed-bd4d-48b9-ad76-daeb4f9efad4"}, "out_png": {"id": "47fe3efc23d63871", "src": "hda", "uuid": "6d76fd5a-37ad-4cc2-8e5b-c495a50b65f8"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: saving figure to file highest_expr_genes.png\n", "job_stdout": "", "job_stderr": "", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: saving figure to file highest_expr_genes.png\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:18:59", "plugin": "core", "name": "end_epoch", "raw_value": "1708672739.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:18:55", "plugin": "core", "name": "start_epoch", "raw_value": "1708672735.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-12", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 12, "time_seconds": 28.336025953292847, "inputs": {"adata": {"src": "hda", "id": "f1634c7183aebc3b"}, "format": "png", "method|n_top": "30", "method|gene_symbols": "means", "method|setseaborn_boxplot|color": "blue", "method|setseaborn_boxplot|saturation": "0.5", "method|method": "pl.highest_expr_genes", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "4646c5deff3fb20a", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:29:06.314438", "create_time": "2024-02-23T07:28:53.743235", "galaxy_version": "23.1", "command_version": "scanpy version: 1.7.1", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-2fx7s", "command_line": "cp '/galaxy/server/database/objects/1/c/f/dataset_1cf07a9c-8909-464f-a0b7-f002ea2807bd.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/329/configs/tmpsk2ac9i8' > '/galaxy/server/database/objects/8/3/a/dataset_83a93419-513c-475a-b2af-00f3163396d6.dat' && python '/galaxy/server/database/jobs_directory/000/329/configs/tmpsk2ac9i8' >> '/galaxy/server/database/objects/8/3/a/dataset_83a93419-513c-475a-b2af-00f3163396d6.dat' && ls . >> '/galaxy/server/database/objects/8/3/a/dataset_83a93419-513c-475a-b2af-00f3163396d6.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 8, \"gene_symbols\": \"means\", \"method\": \"pl.highest_expr_genes\", \"n_top\": \"30\", \"setseaborn_boxplot\": {\"color\": \"blue\", \"palette\": null, \"saturation\": \"0.5\"}}", "format": "\"png\""}, "inputs": {"adata": {"id": "f1634c7183aebc3b", "src": "hda", "uuid": "1cf07a9c-8909-464f-a0b7-f002ea2807bd"}}, "outputs": {"hidden_output": {"id": "a50fbbe46803a0d2", "src": "hda", "uuid": "83a93419-513c-475a-b2af-00f3163396d6"}, "out_png": {"id": "a17bb6a1dc2aeec4", "src": "hda", "uuid": "52855220-49b3-49e4-a892-ac2ce79dc0c0"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: saving figure to file highest_expr_genes.png\n", "job_stdout": "", "job_stderr": "", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: saving figure to file highest_expr_genes.png\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:28:58", "plugin": "core", "name": "end_epoch", "raw_value": "1708673338.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:28:54", "plugin": "core", "name": "start_epoch", "raw_value": "1708673334.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-13", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 13, "time_seconds": 28.737006425857544, "inputs": {"adata": {"src": "hda", "id": "f839f1498eb1f7eb"}, "format": "png", "method|log": false, "method|highly_variable_genes": true, "method|method": "pl.highly_variable_genes", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "658e44c9a0bb9ccc", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:19:35.554018", "create_time": "2024-02-23T07:19:22.616182", "galaxy_version": "23.1", "command_version": "scanpy version: 1.7.1", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-2zsxs", "command_line": "cp '/galaxy/server/database/objects/1/b/7/dataset_1b70459a-3b21-4b6f-997b-acb5810fb0bb.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/293/configs/tmpbnxc45bw' > '/galaxy/server/database/objects/8/2/4/dataset_8243cf1c-f20b-48a3-8d89-496a4c605fe9.dat' && python '/galaxy/server/database/jobs_directory/000/293/configs/tmpbnxc45bw' >> '/galaxy/server/database/objects/8/2/4/dataset_8243cf1c-f20b-48a3-8d89-496a4c605fe9.dat' && ls . >> '/galaxy/server/database/objects/8/2/4/dataset_8243cf1c-f20b-48a3-8d89-496a4c605fe9.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 7, \"highly_variable_genes\": true, \"log\": false, \"method\": \"pl.highly_variable_genes\"}", "format": "\"png\""}, "inputs": {"adata": {"id": "f839f1498eb1f7eb", "src": "hda", "uuid": "1b70459a-3b21-4b6f-997b-acb5810fb0bb"}}, "outputs": {"hidden_output": {"id": "c1e9eaaa1377b8e0", "src": "hda", "uuid": "8243cf1c-f20b-48a3-8d89-496a4c605fe9"}, "out_png": {"id": "58e2056a3bf81f60", "src": "hda", "uuid": "93033f7e-6850-4986-9bf8-b9217a0f8f37"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "WARNING: saving figure to file filter_genes_dispersion.png\n", "job_stdout": "", "job_stderr": "", "stderr": "WARNING: saving figure to file filter_genes_dispersion.png\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:19:27", "plugin": "core", "name": "end_epoch", "raw_value": "1708672767.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:19:24", "plugin": "core", "name": "start_epoch", "raw_value": "1708672764.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-13", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 13, "time_seconds": 27.264671325683594, "inputs": {"adata": {"src": "hda", "id": "c02dd1c2bdb70330"}, "format": "png", "method|log": false, "method|highly_variable_genes": true, "method|method": "pl.highly_variable_genes", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "d13e0b85c2041f81", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:29:33.758214", "create_time": "2024-02-23T07:29:20.713946", "galaxy_version": "23.1", "command_version": "scanpy version: 1.7.1", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-scz5l", "command_line": "cp '/galaxy/server/database/objects/4/e/e/dataset_4ee4f572-ee9c-44d9-8c9c-01500bd39218.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/331/configs/tmppd8jal0v' > '/galaxy/server/database/objects/c/7/b/dataset_c7b1da0b-6612-4d41-9ecd-dca4dd3ab9ec.dat' && python '/galaxy/server/database/jobs_directory/000/331/configs/tmppd8jal0v' >> '/galaxy/server/database/objects/c/7/b/dataset_c7b1da0b-6612-4d41-9ecd-dca4dd3ab9ec.dat' && ls . >> '/galaxy/server/database/objects/c/7/b/dataset_c7b1da0b-6612-4d41-9ecd-dca4dd3ab9ec.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 7, \"highly_variable_genes\": true, \"log\": false, \"method\": \"pl.highly_variable_genes\"}", "format": "\"png\""}, "inputs": {"adata": {"id": "c02dd1c2bdb70330", "src": "hda", "uuid": "4ee4f572-ee9c-44d9-8c9c-01500bd39218"}}, "outputs": {"hidden_output": {"id": "4dd596affce68ef0", "src": "hda", "uuid": "c7b1da0b-6612-4d41-9ecd-dca4dd3ab9ec"}, "out_png": {"id": "e01288939c37cb6f", "src": "hda", "uuid": "733f99bc-e54b-48e4-b330-6c250ca01d67"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "WARNING: saving figure to file filter_genes_dispersion.png\n", "job_stdout": "", "job_stderr": "", "stderr": "WARNING: saving figure to file filter_genes_dispersion.png\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:29:26", "plugin": "core", "name": "end_epoch", "raw_value": "1708673366.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:29:22", "plugin": "core", "name": "start_epoch", "raw_value": "1708673362.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-14", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 14, "time_seconds": 14.716265201568604, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-14", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 14, "time_seconds": 19.20394778251648, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-15", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 15, "time_seconds": 14.137144565582275, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-15", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 15, "time_seconds": 15.183611869812012, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-16", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 16, "time_seconds": 14.430460453033447, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-16", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 16, "time_seconds": 9.317632913589478, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-17", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 17, "time_seconds": 14.19009518623352, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-17", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 17, "time_seconds": 14.142287492752075, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-18", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 18, "time_seconds": 13.746272563934326, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-18", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 18, "time_seconds": 12.9661283493042, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-19", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 19, "time_seconds": 13.187458753585815, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-19", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 19, "time_seconds": 14.229775667190552, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-2", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 2, "time_seconds": 14.138461589813232, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-2", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 2, "time_seconds": 14.36750602722168, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-20", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 20, "time_seconds": 14.305662870407104, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-20", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 20, "time_seconds": 13.90312385559082, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-21", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 21, "time_seconds": 13.897285461425781, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-21", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 21, "time_seconds": 14.231529951095581, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-22", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 22, "time_seconds": 14.569536447525024, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-22", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 22, "time_seconds": 14.276667833328247, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-23", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 23, "time_seconds": 8.286383628845215, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-23", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 23, "time_seconds": 29.096415996551514, "inputs": {"adata": {"src": "hda", "id": "7db2fa425c3f6c22"}, "format": "png", "method|n_genes": "10", "method|fontsize": "8", "method|ncols": "4", "method|sharey": true, "method|method": "pl.rank_genes_groups", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "6eed7a8beb96cb5e", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:32:10.907661", "create_time": "2024-02-23T07:31:56.979558", "galaxy_version": "23.1", "command_version": "scanpy version: 1.7.1", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-cj7fc", "command_line": "cp '/galaxy/server/database/objects/0/0/c/dataset_00c6f78c-f853-4d75-8d84-c8e6150d423c.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/342/configs/tmp2mavhfes' > '/galaxy/server/database/objects/8/1/b/dataset_81bb2c3b-a3ac-42af-a833-c4cbc022ebe2.dat' && python '/galaxy/server/database/jobs_directory/000/342/configs/tmp2mavhfes' >> '/galaxy/server/database/objects/8/1/b/dataset_81bb2c3b-a3ac-42af-a833-c4cbc022ebe2.dat' && ls . >> '/galaxy/server/database/objects/8/1/b/dataset_81bb2c3b-a3ac-42af-a833-c4cbc022ebe2.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 22, \"fontsize\": \"8\", \"gene_symbols\": \"\", \"groups\": \"\", \"method\": \"pl.rank_genes_groups\", \"n_genes\": \"10\", \"ncols\": \"4\", \"sharey\": true}", "format": "\"png\""}, "inputs": {"adata": {"id": "7db2fa425c3f6c22", "src": "hda", "uuid": "00c6f78c-f853-4d75-8d84-c8e6150d423c"}}, "outputs": {"hidden_output": {"id": "cd0546d428ffb11a", "src": "hda", "uuid": "81bb2c3b-a3ac-42af-a833-c4cbc022ebe2"}, "out_png": {"id": "f42ff235dc1849aa", "src": "hda", "uuid": "cdfdb058-b01d-415f-94a9-47e42b741b52"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: saving figure to file rank_genes_groups_cell_type.png\n", "job_stdout": "", "job_stderr": "", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: saving figure to file rank_genes_groups_cell_type.png\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:32:02", "plugin": "core", "name": "end_epoch", "raw_value": "1708673522.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:31:58", "plugin": "core", "name": "start_epoch", "raw_value": "1708673518.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-24", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 24, "time_seconds": 27.869056463241577, "inputs": {"adata": {"src": "hda", "id": "3f3301e6d4ae054f"}, "format": "png", "method|n_genes": "10", "method|log": false, "method|use_raw": false, "method|dendrogram": false, "method|color_map": "viridis", "method|matplotlib_pyplot_scatter|linewidths": "0", "method|matplotlib_pyplot_scatter|edgecolors": "face", "method|method": "pl.rank_genes_groups_dotplot", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "309374670c0ec001", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:22:19.936993", "create_time": "2024-02-23T07:22:07.054035", "galaxy_version": "23.1", "command_version": "scanpy version: 1.7.1", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-m7v5c", "command_line": "cp '/galaxy/server/database/objects/c/b/e/dataset_cbeeaa56-6f24-49db-b9e1-e8c3145d0150.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/305/configs/tmpettn4nev' > '/galaxy/server/database/objects/f/8/6/dataset_f86a8bc6-2d47-43e8-9678-802332cbb9b5.dat' && python '/galaxy/server/database/jobs_directory/000/305/configs/tmpettn4nev' >> '/galaxy/server/database/objects/f/8/6/dataset_f86a8bc6-2d47-43e8-9678-802332cbb9b5.dat' && ls . >> '/galaxy/server/database/objects/f/8/6/dataset_f86a8bc6-2d47-43e8-9678-802332cbb9b5.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 24, \"color_map\": \"viridis\", \"dendrogram\": false, \"dot_max\": \"\", \"dot_min\": \"\", \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"groups\": \"\", \"key\": \"\", \"layer\": \"\", \"log\": false, \"matplotlib_pyplot_scatter\": {\"alpha\": \"\", \"edgecolors\": \"face\", \"linewidths\": \"0.0\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.rank_genes_groups_dotplot\", \"n_genes\": \"10\", \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\"}", "format": "\"png\""}, "inputs": {"adata": {"id": "3f3301e6d4ae054f", "src": "hda", "uuid": "cbeeaa56-6f24-49db-b9e1-e8c3145d0150"}}, "outputs": {"hidden_output": {"id": "876fdb221a1c2db3", "src": "hda", "uuid": "f86a8bc6-2d47-43e8-9678-802332cbb9b5"}, "out_png": {"id": "52734b0e8117dc6a", "src": "hda", "uuid": "47b1d6bf-9e5c-400a-a605-1f84971ff183"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: saving figure to file dotplot_.png\n", "job_stdout": "", "job_stderr": "", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: saving figure to file dotplot_.png\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:22:12", "plugin": "core", "name": "end_epoch", "raw_value": "1708672932.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:22:08", "plugin": "core", "name": "start_epoch", "raw_value": "1708672928.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-24", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 24, "time_seconds": 29.480798959732056, "inputs": {"adata": {"src": "hda", "id": "c2e1cae3b6e1c47d"}, "format": "png", "method|n_genes": "10", "method|log": false, "method|use_raw": false, "method|dendrogram": false, "method|color_map": "viridis", "method|matplotlib_pyplot_scatter|linewidths": "0", "method|matplotlib_pyplot_scatter|edgecolors": "face", "method|method": "pl.rank_genes_groups_dotplot", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "48e58fe64c23944a", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:32:40.343972", "create_time": "2024-02-23T07:32:26.769266", "galaxy_version": "23.1", "command_version": "scanpy version: 1.7.1", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-jdl84", "command_line": "cp '/galaxy/server/database/objects/d/f/5/dataset_df536a50-66e8-463a-8f2a-22e22c5ed068.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/344/configs/tmp6leffoo0' > '/galaxy/server/database/objects/5/e/b/dataset_5eb66758-bddf-45d1-863d-93e6d7fd4fa9.dat' && python '/galaxy/server/database/jobs_directory/000/344/configs/tmp6leffoo0' >> '/galaxy/server/database/objects/5/e/b/dataset_5eb66758-bddf-45d1-863d-93e6d7fd4fa9.dat' && ls . >> '/galaxy/server/database/objects/5/e/b/dataset_5eb66758-bddf-45d1-863d-93e6d7fd4fa9.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 24, \"color_map\": \"viridis\", \"dendrogram\": false, \"dot_max\": \"\", \"dot_min\": \"\", \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"groups\": \"\", \"key\": \"\", \"layer\": \"\", \"log\": false, \"matplotlib_pyplot_scatter\": {\"alpha\": \"\", \"edgecolors\": \"face\", \"linewidths\": \"0.0\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.rank_genes_groups_dotplot\", \"n_genes\": \"10\", \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\"}", "format": "\"png\""}, "inputs": {"adata": {"id": "c2e1cae3b6e1c47d", "src": "hda", "uuid": "df536a50-66e8-463a-8f2a-22e22c5ed068"}}, "outputs": {"hidden_output": {"id": "f5f74c21cb117815", "src": "hda", "uuid": "5eb66758-bddf-45d1-863d-93e6d7fd4fa9"}, "out_png": {"id": "582f251934db09b9", "src": "hda", "uuid": "f6acf31d-6ae5-469b-b7bd-9a68d1eb5fa4"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: saving figure to file dotplot_.png\n", "job_stdout": "", "job_stderr": "", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: saving figure to file dotplot_.png\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:32:32", "plugin": "core", "name": "end_epoch", "raw_value": "1708673552.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:32:28", "plugin": "core", "name": "start_epoch", "raw_value": "1708673548.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-25", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 25, "time_seconds": 27.395301342010498, "inputs": {"adata": {"src": "hda", "id": "cb51c6dc0d3f3b7e"}, "format": "png", "method|n_genes": "10", "method|log": false, "method|use_raw": false, "method|dendrogram": false, "method|swap_axes": false, "method|show_gene_labels": false, "method|matplotlib_pyplot_imshow|cmap": "viridis", "method|matplotlib_pyplot_imshow|interpolation": "None", "method|matplotlib_pyplot_imshow|origin": "upper", "method|method": "pl.rank_genes_groups_heatmap", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "46ef6c0702fd5dee", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:22:47.343270", "create_time": "2024-02-23T07:22:34.595771", "galaxy_version": "23.1", "command_version": "scanpy version: 1.7.1", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-96ws6", "command_line": "cp '/galaxy/server/database/objects/e/b/7/dataset_eb76cfc5-6c62-4bf8-9ff3-f316ddffba98.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/307/configs/tmpt850ip7x' > '/galaxy/server/database/objects/0/8/e/dataset_08ea5112-52c7-4650-af0d-e3bf5445a817.dat' && python '/galaxy/server/database/jobs_directory/000/307/configs/tmpt850ip7x' >> '/galaxy/server/database/objects/0/8/e/dataset_08ea5112-52c7-4650-af0d-e3bf5445a817.dat' && ls . >> '/galaxy/server/database/objects/0/8/e/dataset_08ea5112-52c7-4650-af0d-e3bf5445a817.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 25, \"dendrogram\": false, \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"groups\": \"\", \"key\": \"\", \"layer\": \"\", \"log\": false, \"matplotlib_pyplot_imshow\": {\"alpha\": \"\", \"cmap\": \"viridis\", \"interpolation\": \"None\", \"origin\": \"upper\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.rank_genes_groups_heatmap\", \"n_genes\": \"10\", \"show_gene_labels\": false, \"swap_axes\": false, \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\"}", "format": "\"png\""}, "inputs": {"adata": {"id": "cb51c6dc0d3f3b7e", "src": "hda", "uuid": "eb76cfc5-6c62-4bf8-9ff3-f316ddffba98"}}, "outputs": {"hidden_output": {"id": "3b38fe3a6ccafa37", "src": "hda", "uuid": "08ea5112-52c7-4650-af0d-e3bf5445a817"}, "out_png": {"id": "20fc1499ebd88270", "src": "hda", "uuid": "627054fc-d214-40ea-b768-fbd8fbf1ff65"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: saving figure to file heatmap.png\n", "job_stdout": "", "job_stderr": "", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: saving figure to file heatmap.png\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:22:39", "plugin": "core", "name": "end_epoch", "raw_value": "1708672959.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:22:36", "plugin": "core", "name": "start_epoch", "raw_value": "1708672956.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-25", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 25, "time_seconds": 30.565252780914307, "inputs": {"adata": {"src": "hda", "id": "14848105d6443198"}, "format": "png", "method|n_genes": "10", "method|log": false, "method|use_raw": false, "method|dendrogram": false, "method|swap_axes": false, "method|show_gene_labels": false, "method|matplotlib_pyplot_imshow|cmap": "viridis", "method|matplotlib_pyplot_imshow|interpolation": "None", "method|matplotlib_pyplot_imshow|origin": "upper", "method|method": "pl.rank_genes_groups_heatmap", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "47f43b5f4dc6a8e0", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:33:11.132624", "create_time": "2024-02-23T07:32:57.091659", "galaxy_version": "23.1", "command_version": "scanpy version: 1.7.1", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-sgff5", "command_line": "cp '/galaxy/server/database/objects/d/d/f/dataset_ddf5e051-88f8-437c-b787-3f27fc500ca3.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/346/configs/tmpzpegcj2k' > '/galaxy/server/database/objects/f/1/d/dataset_f1da7e6e-3a3e-44f9-9cd7-16ebb73ff812.dat' && python '/galaxy/server/database/jobs_directory/000/346/configs/tmpzpegcj2k' >> '/galaxy/server/database/objects/f/1/d/dataset_f1da7e6e-3a3e-44f9-9cd7-16ebb73ff812.dat' && ls . >> '/galaxy/server/database/objects/f/1/d/dataset_f1da7e6e-3a3e-44f9-9cd7-16ebb73ff812.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 25, \"dendrogram\": false, \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"groups\": \"\", \"key\": \"\", \"layer\": \"\", \"log\": false, \"matplotlib_pyplot_imshow\": {\"alpha\": \"\", \"cmap\": \"viridis\", \"interpolation\": \"None\", \"origin\": \"upper\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.rank_genes_groups_heatmap\", \"n_genes\": \"10\", \"show_gene_labels\": false, \"swap_axes\": false, \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\"}", "format": "\"png\""}, "inputs": {"adata": {"id": "14848105d6443198", "src": "hda", "uuid": "ddf5e051-88f8-437c-b787-3f27fc500ca3"}}, "outputs": {"hidden_output": {"id": "bf1e741d7f5410b3", "src": "hda", "uuid": "f1da7e6e-3a3e-44f9-9cd7-16ebb73ff812"}, "out_png": {"id": "6d0437e6b54531ee", "src": "hda", "uuid": "6a0dd9e5-f864-4004-942e-235195b71eda"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: saving figure to file heatmap.png\n", "job_stdout": "", "job_stderr": "", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: saving figure to file heatmap.png\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:33:02", "plugin": "core", "name": "end_epoch", "raw_value": "1708673582.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:32:58", "plugin": "core", "name": "start_epoch", "raw_value": "1708673578.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-26", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 26, "time_seconds": 29.38124394416809, "inputs": {"adata": {"src": "hda", "id": "b7195d1ff8b9327f"}, "format": "png", "method|n_genes": "10", "method|log": false, "method|use_raw": false, "method|dendrogram": false, "method|swap_axes": false, "method|matplotlib_pyplot_pcolor|cmap": "viridis", "method|matplotlib_pyplot_pcolor|edgecolors": "face", "method|matplotlib_pyplot_pcolor|snap": false, "method|method": "pl.rank_genes_groups_matrixplot", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "01885f0886444bad", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:23:16.830178", "create_time": "2024-02-23T07:23:03.124246", "galaxy_version": "23.1", "command_version": "scanpy version: 1.7.1", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-5876g", "command_line": "cp '/galaxy/server/database/objects/5/3/1/dataset_531a6cef-a5a2-45b7-8c7b-a95588d09ecf.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/309/configs/tmppdpid97m' > '/galaxy/server/database/objects/7/b/3/dataset_7b37fa50-e37c-41f7-8444-5fae7c075bfa.dat' && python '/galaxy/server/database/jobs_directory/000/309/configs/tmppdpid97m' >> '/galaxy/server/database/objects/7/b/3/dataset_7b37fa50-e37c-41f7-8444-5fae7c075bfa.dat' && ls . >> '/galaxy/server/database/objects/7/b/3/dataset_7b37fa50-e37c-41f7-8444-5fae7c075bfa.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 26, \"dendrogram\": false, \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"groups\": \"\", \"key\": \"\", \"layer\": \"\", \"log\": false, \"matplotlib_pyplot_pcolor\": {\"alpha\": \"\", \"cmap\": \"viridis\", \"edgecolors\": \"face\", \"snap\": false, \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.rank_genes_groups_matrixplot\", \"n_genes\": \"10\", \"swap_axes\": false, \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\"}", "format": "\"png\""}, "inputs": {"adata": {"id": "b7195d1ff8b9327f", "src": "hda", "uuid": "531a6cef-a5a2-45b7-8c7b-a95588d09ecf"}}, "outputs": {"hidden_output": {"id": "b0baa5eded6a1380", "src": "hda", "uuid": "7b37fa50-e37c-41f7-8444-5fae7c075bfa"}, "out_png": {"id": "872c1ea051ac1241", "src": "hda", "uuid": "71444e58-62c0-472d-b8e3-8758b5ebdeed"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: saving figure to file matrixplot_.png\n", "job_stdout": "", "job_stderr": "", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: saving figure to file matrixplot_.png\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:23:08", "plugin": "core", "name": "end_epoch", "raw_value": "1708672988.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:23:04", "plugin": "core", "name": "start_epoch", "raw_value": "1708672984.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-26", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 26, "time_seconds": 28.784804105758667, "inputs": {"adata": {"src": "hda", "id": "eec2cb84bb43f5b5"}, "format": "png", "method|n_genes": "10", "method|log": false, "method|use_raw": false, "method|dendrogram": false, "method|swap_axes": false, "method|matplotlib_pyplot_pcolor|cmap": "viridis", "method|matplotlib_pyplot_pcolor|edgecolors": "face", "method|matplotlib_pyplot_pcolor|snap": false, "method|method": "pl.rank_genes_groups_matrixplot", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "0427c77fa3233533", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:33:40.183263", "create_time": "2024-02-23T07:33:26.377684", "galaxy_version": "23.1", "command_version": "scanpy version: 1.7.1", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-fjjvw", "command_line": "cp '/galaxy/server/database/objects/2/3/5/dataset_2352070d-6818-4b30-bd08-5546a0af8ea8.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/348/configs/tmpdh0si815' > '/galaxy/server/database/objects/7/c/e/dataset_7ce5fb70-2548-42a3-b9da-7ae2a62a1439.dat' && python '/galaxy/server/database/jobs_directory/000/348/configs/tmpdh0si815' >> '/galaxy/server/database/objects/7/c/e/dataset_7ce5fb70-2548-42a3-b9da-7ae2a62a1439.dat' && ls . >> '/galaxy/server/database/objects/7/c/e/dataset_7ce5fb70-2548-42a3-b9da-7ae2a62a1439.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 26, \"dendrogram\": false, \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"groups\": \"\", \"key\": \"\", \"layer\": \"\", \"log\": false, \"matplotlib_pyplot_pcolor\": {\"alpha\": \"\", \"cmap\": \"viridis\", \"edgecolors\": \"face\", \"snap\": false, \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.rank_genes_groups_matrixplot\", \"n_genes\": \"10\", \"swap_axes\": false, \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\"}", "format": "\"png\""}, "inputs": {"adata": {"id": "eec2cb84bb43f5b5", "src": "hda", "uuid": "2352070d-6818-4b30-bd08-5546a0af8ea8"}}, "outputs": {"hidden_output": {"id": "5e265af1d27b514b", "src": "hda", "uuid": "7ce5fb70-2548-42a3-b9da-7ae2a62a1439"}, "out_png": {"id": "4207b39b7536a3ac", "src": "hda", "uuid": "de8f8fdc-cdf9-434a-84f9-01f04d9049aa"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: saving figure to file matrixplot_.png\n", "job_stdout": "", "job_stderr": "", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: saving figure to file matrixplot_.png\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:33:32", "plugin": "core", "name": "end_epoch", "raw_value": "1708673612.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:33:28", "plugin": "core", "name": "start_epoch", "raw_value": "1708673608.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-27", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 27, "time_seconds": 32.664608001708984, "inputs": {"adata": {"src": "hda", "id": "8ad72fd2891bd0a3"}, "format": "png", "method|n_genes": "10", "method|log": false, "method|use_raw": false, "method|dendrogram": true, "method|swap_axes": true, "method|violin_plot|stripplot|stripplot": "True", "method|violin_plot|scale": "width", "method|row_palette": "muted", "method|standard_scale": "None", "method|seaborn_violinplot|bw": "scott", "method|seaborn_violinplot|linewidth": "0", "method|seaborn_violinplot|color": "AliceBlue", "method|seaborn_violinplot|saturation": "0.75", "method|method": "pl.rank_genes_groups_stacked_violin", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "a85f3164e578a377", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:23:49.446645", "create_time": "2024-02-23T07:23:32.606031", "galaxy_version": "23.1", "command_version": "scanpy version: 1.7.1", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-vncqt", "command_line": "cp '/galaxy/server/database/objects/6/3/5/dataset_635baf07-f19b-42c7-8bf4-223453d244e4.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/311/configs/tmpho141t9v' > '/galaxy/server/database/objects/3/5/b/dataset_35b14741-6a45-43f0-af2f-26e953343b85.dat' && python '/galaxy/server/database/jobs_directory/000/311/configs/tmpho141t9v' >> '/galaxy/server/database/objects/3/5/b/dataset_35b14741-6a45-43f0-af2f-26e953343b85.dat' && ls . >> '/galaxy/server/database/objects/3/5/b/dataset_35b14741-6a45-43f0-af2f-26e953343b85.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 27, \"dendrogram\": true, \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"groups\": \"\", \"key\": \"\", \"layer\": \"\", \"log\": false, \"method\": \"pl.rank_genes_groups_stacked_violin\", \"n_genes\": \"10\", \"row_palette\": \"muted\", \"seaborn_violinplot\": {\"bw\": \"scott\", \"color\": \"AliceBlue\", \"linewidth\": \"0.0\", \"orient\": null, \"saturation\": \"0.75\"}, \"standard_scale\": \"None\", \"swap_axes\": true, \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\", \"violin_plot\": {\"scale\": \"width\", \"stripplot\": {\"__current_case__\": 0, \"jitter\": {\"__current_case__\": 0, \"jitter\": \"True\", \"size\": \"1.0\"}, \"stripplot\": \"True\"}}}", "format": "\"png\""}, "inputs": {"adata": {"id": "8ad72fd2891bd0a3", "src": "hda", "uuid": "635baf07-f19b-42c7-8bf4-223453d244e4"}}, "outputs": {"hidden_output": {"id": "b10069a9c07d967c", "src": "hda", "uuid": "35b14741-6a45-43f0-af2f-26e953343b85"}, "out_png": {"id": "4b8eb56d105aa0c5", "src": "hda", "uuid": "77401c91-391c-40c4-8270-202b6e7286b5"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file stacked_violin_.png\n", "job_stdout": "", "job_stderr": "", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file stacked_violin_.png\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "8 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "8.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:23:41", "plugin": "core", "name": "end_epoch", "raw_value": "1708673021.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:23:33", "plugin": "core", "name": "start_epoch", "raw_value": "1708673013.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-27", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 27, "time_seconds": 32.96878623962402, "inputs": {"adata": {"src": "hda", "id": "1ff873e5676079f6"}, "format": "png", "method|n_genes": "10", "method|log": false, "method|use_raw": false, "method|dendrogram": true, "method|swap_axes": true, "method|violin_plot|stripplot|stripplot": "True", "method|violin_plot|scale": "width", "method|row_palette": "muted", "method|standard_scale": "None", "method|seaborn_violinplot|bw": "scott", "method|seaborn_violinplot|linewidth": "0", "method|seaborn_violinplot|color": "AliceBlue", "method|seaborn_violinplot|saturation": "0.75", "method|method": "pl.rank_genes_groups_stacked_violin", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "f4cf9bad2eb578fa", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:34:13.122856", "create_time": "2024-02-23T07:33:55.881178", "galaxy_version": "23.1", "command_version": "scanpy version: 1.7.1", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-dhftn", "command_line": "cp '/galaxy/server/database/objects/f/d/0/dataset_fd03242e-8c97-467a-b370-5c82461996a0.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/350/configs/tmpf5stkdfv' > '/galaxy/server/database/objects/f/d/d/dataset_fdd48fe7-02ef-4f5e-b50d-93e67301bcdd.dat' && python '/galaxy/server/database/jobs_directory/000/350/configs/tmpf5stkdfv' >> '/galaxy/server/database/objects/f/d/d/dataset_fdd48fe7-02ef-4f5e-b50d-93e67301bcdd.dat' && ls . >> '/galaxy/server/database/objects/f/d/d/dataset_fdd48fe7-02ef-4f5e-b50d-93e67301bcdd.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 27, \"dendrogram\": true, \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"groups\": \"\", \"key\": \"\", \"layer\": \"\", \"log\": false, \"method\": \"pl.rank_genes_groups_stacked_violin\", \"n_genes\": \"10\", \"row_palette\": \"muted\", \"seaborn_violinplot\": {\"bw\": \"scott\", \"color\": \"AliceBlue\", \"linewidth\": \"0.0\", \"orient\": null, \"saturation\": \"0.75\"}, \"standard_scale\": \"None\", \"swap_axes\": true, \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\", \"violin_plot\": {\"scale\": \"width\", \"stripplot\": {\"__current_case__\": 0, \"jitter\": {\"__current_case__\": 0, \"jitter\": \"True\", \"size\": \"1.0\"}, \"stripplot\": \"True\"}}}", "format": "\"png\""}, "inputs": {"adata": {"id": "1ff873e5676079f6", "src": "hda", "uuid": "fd03242e-8c97-467a-b370-5c82461996a0"}}, "outputs": {"hidden_output": {"id": "47ad05141b68355f", "src": "hda", "uuid": "fdd48fe7-02ef-4f5e-b50d-93e67301bcdd"}, "out_png": {"id": "2eeb744ae655801a", "src": "hda", "uuid": "e73e108b-7edc-4387-84ac-d0f31f048695"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file stacked_violin_.png\n", "job_stdout": "", "job_stderr": "", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file stacked_violin_.png\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "7 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "7.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:34:04", "plugin": "core", "name": "end_epoch", "raw_value": "1708673644.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:33:57", "plugin": "core", "name": "start_epoch", "raw_value": "1708673637.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-3", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 3, "time_seconds": 41.31547021865845, "inputs": {"adata": {"src": "hda", "id": "2737009cd7d71ce2"}, "format": "png", "method|var_names|var_names": "Fog1,EKLF,SCL", "method|var_names|type": "custom", "method|groupby": "cell_type", "method|num_categories": "7", "method|gene_symbols": "symbol", "method|log": false, "method|use_raw": false, "method|dendrogram": true, "method|figsize|width": "10", "method|figsize|height": "3", "method|figsize|test": "yes", "method|swap_axes": true, "method|show_gene_labels": true, "method|matplotlib_pyplot_imshow|cmap": "YlGnBu", "method|matplotlib_pyplot_imshow|interpolation": "None", "method|matplotlib_pyplot_imshow|origin": "upper", "method|method": "pl.heatmap", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "058f10840d2254f9", "state": "error", "exit_code": null, "update_time": "2024-02-23T07:16:24.717998", "create_time": "2024-02-23T07:15:58.131328", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-gjbn2", "command_line": "cp '/galaxy/server/database/objects/0/5/b/dataset_05bca481-5e3a-4fbf-9613-6ae672299b72.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/279/configs/tmpzhb3ir1v' > '/galaxy/server/database/objects/6/d/9/dataset_6d993fb6-e8d8-4c10-a730-3489b73a035a.dat' && python '/galaxy/server/database/jobs_directory/000/279/configs/tmpzhb3ir1v' >> '/galaxy/server/database/objects/6/d/9/dataset_6d993fb6-e8d8-4c10-a730-3489b73a035a.dat' && ls . >> '/galaxy/server/database/objects/6/d/9/dataset_6d993fb6-e8d8-4c10-a730-3489b73a035a.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 1, \"dendrogram\": true, \"figsize\": {\"__current_case__\": 0, \"height\": \"3\", \"test\": \"yes\", \"width\": \"10\"}, \"gene_symbols\": \"symbol\", \"groupby\": \"cell_type\", \"layer\": \"\", \"log\": false, \"matplotlib_pyplot_imshow\": {\"alpha\": \"\", \"cmap\": \"YlGnBu\", \"interpolation\": \"None\", \"origin\": \"upper\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.heatmap\", \"num_categories\": \"7\", \"show_gene_labels\": true, \"swap_axes\": true, \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\", \"var_names\": {\"__current_case__\": 1, \"type\": \"custom\", \"var_names\": \"Fog1,EKLF,SCL\"}}", "format": "\"png\""}, "inputs": {"adata": {"id": "2737009cd7d71ce2", "src": "hda", "uuid": "05bca481-5e3a-4fbf-9613-6ae672299b72"}}, "outputs": {"hidden_output": {"id": "7026eb790062f953", "src": "hda", "uuid": "6d993fb6-e8d8-4c10-a730-3489b73a035a"}, "out_png": {"id": "aad93ff9f161d40e", "src": "hda", "uuid": "ccde4158-24d4-4333-91a0-bb97434b9391"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": null, "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "scanpy_plot/1.7.1+galaxy1-3", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 3, "time_seconds": 27.496203184127808, "inputs": {"adata": {"src": "hda", "id": "68b773618a80bf45"}, "format": "png", "method|var_names|var_names": "Fog1,EKLF,SCL", "method|var_names|type": "custom", "method|groupby": "cell_type", "method|num_categories": "7", "method|gene_symbols": "symbol", "method|log": false, "method|use_raw": false, "method|dendrogram": true, "method|figsize|width": "10", "method|figsize|height": "3", "method|figsize|test": "yes", "method|swap_axes": true, "method|show_gene_labels": true, "method|matplotlib_pyplot_imshow|cmap": "YlGnBu", "method|matplotlib_pyplot_imshow|interpolation": "None", "method|matplotlib_pyplot_imshow|origin": "upper", "method|method": "pl.heatmap", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "6c3758d943b68969", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:25:01.482828", "create_time": "2024-02-23T07:24:48.664097", "galaxy_version": "23.1", "command_version": "scanpy version: 1.7.1", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-6txjs", "command_line": "cp '/galaxy/server/database/objects/b/c/3/dataset_bc3d00ac-1d4d-492d-a42c-2314744dddd0.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/316/configs/tmpypc2sh19' > '/galaxy/server/database/objects/0/8/5/dataset_085617f1-c8b4-4b37-9f32-2fdfd845e264.dat' && python '/galaxy/server/database/jobs_directory/000/316/configs/tmpypc2sh19' >> '/galaxy/server/database/objects/0/8/5/dataset_085617f1-c8b4-4b37-9f32-2fdfd845e264.dat' && ls . >> '/galaxy/server/database/objects/0/8/5/dataset_085617f1-c8b4-4b37-9f32-2fdfd845e264.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 1, \"dendrogram\": true, \"figsize\": {\"__current_case__\": 0, \"height\": \"3\", \"test\": \"yes\", \"width\": \"10\"}, \"gene_symbols\": \"symbol\", \"groupby\": \"cell_type\", \"layer\": \"\", \"log\": false, \"matplotlib_pyplot_imshow\": {\"alpha\": \"\", \"cmap\": \"YlGnBu\", \"interpolation\": \"None\", \"origin\": \"upper\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.heatmap\", \"num_categories\": \"7\", \"show_gene_labels\": true, \"swap_axes\": true, \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\", \"var_names\": {\"__current_case__\": 1, \"type\": \"custom\", \"var_names\": \"Fog1,EKLF,SCL\"}}", "format": "\"png\""}, "inputs": {"adata": {"id": "68b773618a80bf45", "src": "hda", "uuid": "bc3d00ac-1d4d-492d-a42c-2314744dddd0"}}, "outputs": {"hidden_output": {"id": "bfc7adb3dfc3abb0", "src": "hda", "uuid": "085617f1-c8b4-4b37-9f32-2fdfd845e264"}, "out_png": {"id": "ef0ad4d266cde80c", "src": "hda", "uuid": "a7095b01-9fba-460d-92f9-2044e613beb3"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file heatmap.png\n", "job_stdout": "", "job_stderr": "", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file heatmap.png\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:24:53", "plugin": "core", "name": "end_epoch", "raw_value": "1708673093.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:24:50", "plugin": "core", "name": "start_epoch", "raw_value": "1708673090.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-4", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 4, "time_seconds": 14.40893292427063, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-4", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 4, "time_seconds": 13.740735292434692, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-5", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 5, "time_seconds": 27.052663326263428, "inputs": {"adata": {"src": "hda", "id": "045a253f26e4bc2e"}, "format": "png", "method|var_names|var_names": "Fog1,EKLF,SCL", "method|var_names|type": "custom", "method|groupby": "cell_type", "method|num_categories": "7", "method|gene_symbols": "symbol", "method|log": false, "method|use_raw": false, "method|dendrogram": true, "method|method": "pl.dotplot", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "07a4ad6289fafea0", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:17:06.137483", "create_time": "2024-02-23T07:16:53.213628", "galaxy_version": "23.1", "command_version": "scanpy version: 1.7.1", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-8kcfr", "command_line": "cp '/galaxy/server/database/objects/7/f/1/dataset_7f149757-7364-422c-8b28-cc34889284df.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/282/configs/tmpv7j5ry_e' > '/galaxy/server/database/objects/e/c/c/dataset_ecc47c7a-b53a-44fd-aa9a-de59a256468e.dat' && python '/galaxy/server/database/jobs_directory/000/282/configs/tmpv7j5ry_e' >> '/galaxy/server/database/objects/e/c/c/dataset_ecc47c7a-b53a-44fd-aa9a-de59a256468e.dat' && ls . >> '/galaxy/server/database/objects/e/c/c/dataset_ecc47c7a-b53a-44fd-aa9a-de59a256468e.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 2, \"color_map\": \"viridis\", \"dendrogram\": true, \"dot_max\": \"\", \"dot_min\": \"\", \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"gene_symbols\": \"symbol\", \"groupby\": \"cell_type\", \"layer\": \"\", \"log\": false, \"matplotlib_pyplot_scatter\": {\"alpha\": \"\", \"edgecolors\": \"face\", \"linewidths\": \"0.0\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.dotplot\", \"num_categories\": \"7\", \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\", \"var_names\": {\"__current_case__\": 1, \"type\": \"custom\", \"var_names\": \"Fog1,EKLF,SCL\"}}", "format": "\"png\""}, "inputs": {"adata": {"id": "045a253f26e4bc2e", "src": "hda", "uuid": "7f149757-7364-422c-8b28-cc34889284df"}}, "outputs": {"hidden_output": {"id": "9bd02ee18173d301", "src": "hda", "uuid": "ecc47c7a-b53a-44fd-aa9a-de59a256468e"}, "out_png": {"id": "8bfc60624eaf2c8d", "src": "hda", "uuid": "990ae904-384e-4cc0-8d73-dfa606bc57ac"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file dotplot_.png\n", "job_stdout": "", "job_stderr": "", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file dotplot_.png\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:16:58", "plugin": "core", "name": "end_epoch", "raw_value": "1708672618.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:16:54", "plugin": "core", "name": "start_epoch", "raw_value": "1708672614.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-5", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 5, "time_seconds": 27.83114194869995, "inputs": {"adata": {"src": "hda", "id": "12cb07180fa7f209"}, "format": "png", "method|var_names|var_names": "Fog1,EKLF,SCL", "method|var_names|type": "custom", "method|groupby": "cell_type", "method|num_categories": "7", "method|gene_symbols": "symbol", "method|log": false, "method|use_raw": false, "method|dendrogram": true, "method|method": "pl.dotplot", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "c2f18a86bb840bee", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:25:43.280903", "create_time": "2024-02-23T07:25:29.362545", "galaxy_version": "23.1", "command_version": "scanpy version: 1.7.1", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-stq85", "command_line": "cp '/galaxy/server/database/objects/9/1/8/dataset_918f8842-e027-40bb-ae57-d14ac5e52e37.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/319/configs/tmpswvs3rby' > '/galaxy/server/database/objects/d/a/6/dataset_da6d0c7a-3eac-473d-8a55-e15f3fbdd184.dat' && python '/galaxy/server/database/jobs_directory/000/319/configs/tmpswvs3rby' >> '/galaxy/server/database/objects/d/a/6/dataset_da6d0c7a-3eac-473d-8a55-e15f3fbdd184.dat' && ls . >> '/galaxy/server/database/objects/d/a/6/dataset_da6d0c7a-3eac-473d-8a55-e15f3fbdd184.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 2, \"color_map\": \"viridis\", \"dendrogram\": true, \"dot_max\": \"\", \"dot_min\": \"\", \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"gene_symbols\": \"symbol\", \"groupby\": \"cell_type\", \"layer\": \"\", \"log\": false, \"matplotlib_pyplot_scatter\": {\"alpha\": \"\", \"edgecolors\": \"face\", \"linewidths\": \"0.0\", \"vmax\": \"\", \"vmin\": \"\"}, \"method\": \"pl.dotplot\", \"num_categories\": \"7\", \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\", \"var_names\": {\"__current_case__\": 1, \"type\": \"custom\", \"var_names\": \"Fog1,EKLF,SCL\"}}", "format": "\"png\""}, "inputs": {"adata": {"id": "12cb07180fa7f209", "src": "hda", "uuid": "918f8842-e027-40bb-ae57-d14ac5e52e37"}}, "outputs": {"hidden_output": {"id": "448051cb6b777d19", "src": "hda", "uuid": "da6d0c7a-3eac-473d-8a55-e15f3fbdd184"}, "out_png": {"id": "23bb9787c2304dfa", "src": "hda", "uuid": "23826a85-b165-47c0-8fd4-dbcf305e8b38"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file dotplot_.png\n", "job_stdout": "", "job_stderr": "", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file dotplot_.png\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:25:34", "plugin": "core", "name": "end_epoch", "raw_value": "1708673134.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:25:31", "plugin": "core", "name": "start_epoch", "raw_value": "1708673131.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-6", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 6, "time_seconds": 14.361307144165039, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-6", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 6, "time_seconds": 14.673095226287842, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-7", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 7, "time_seconds": 14.008951425552368, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-7", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 7, "time_seconds": 12.974658727645874, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-8", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 8, "time_seconds": 8.823787689208984, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-8", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 8, "time_seconds": 27.896804332733154, "inputs": {"adata": {"src": "hda", "id": "5abab7345077e6a5"}, "format": "png", "method|var_names|var_names": "Fog1,EKLF,SCL", "method|var_names|type": "custom", "method|groupby": "cell_type", "method|num_categories": "7", "method|gene_symbols": "symbol", "method|log": false, "method|use_raw": false, "method|dendrogram": true, "method|swap_axes": true, "method|method": "pl.stacked_violin", "advanced_common|show_log": true}, "job": {"model_class": "Job", "id": "53b3c281eeae8594", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:26:39.000757", "create_time": "2024-02-23T07:26:26.141667", "galaxy_version": "23.1", "command_version": "scanpy version: 1.7.1", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/scanpy_plot/scanpy_plot/1.7.1+galaxy1", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-86vq2", "command_line": "cp '/galaxy/server/database/objects/a/8/f/dataset_a8fd8900-1583-4296-96d2-b6c2b5c7c712.dat' 'anndata.h5ad' && cat '/galaxy/server/database/jobs_directory/000/323/configs/tmppg8l8ysp' > '/galaxy/server/database/objects/6/6/8/dataset_6683971f-28ab-4b2c-bd58-ded7715fcbde.dat' && python '/galaxy/server/database/jobs_directory/000/323/configs/tmppg8l8ysp' >> '/galaxy/server/database/objects/6/6/8/dataset_6683971f-28ab-4b2c-bd58-ded7715fcbde.dat' && ls . >> '/galaxy/server/database/objects/6/6/8/dataset_6683971f-28ab-4b2c-bd58-ded7715fcbde.dat' && touch 'anndata_info.txt' && cat 'anndata_info.txt'  | sed -r '1 s|AnnData object with (.+) = (.*)\\s*|\\1: \\2|g' | sed \"s|'||g\"  | sed -r 's|^\\s*(.*):\\s(.*)|[\\1]\\n-    \\2|g' | sed 's|, |\\n-    |g'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "advanced_common": "{\"show_log\": true}", "method": "{\"__current_case__\": 4, \"dendrogram\": true, \"figsize\": {\"__current_case__\": 1, \"test\": \"no\"}, \"gene_symbols\": \"symbol\", \"groupby\": \"cell_type\", \"layer\": \"\", \"log\": false, \"method\": \"pl.stacked_violin\", \"num_categories\": \"7\", \"row_palette\": \"muted\", \"seaborn_violinplot\": {\"bw\": \"scott\", \"color\": \"AliceBlue\", \"linewidth\": \"0.0\", \"orient\": null, \"saturation\": \"0.75\"}, \"standard_scale\": \"None\", \"swap_axes\": true, \"use_raw\": false, \"var_group_positions\": [], \"var_group_rotation\": \"\", \"var_names\": {\"__current_case__\": 1, \"type\": \"custom\", \"var_names\": \"Fog1,EKLF,SCL\"}, \"violin_plot\": {\"scale\": \"width\", \"stripplot\": {\"__current_case__\": 0, \"jitter\": {\"__current_case__\": 0, \"jitter\": \"True\", \"size\": \"1.0\"}, \"stripplot\": \"True\"}}}", "format": "\"png\""}, "inputs": {"adata": {"id": "5abab7345077e6a5", "src": "hda", "uuid": "a8fd8900-1583-4296-96d2-b6c2b5c7c712"}}, "outputs": {"hidden_output": {"id": "7085ecbb5e7f9740", "src": "hda", "uuid": "6683971f-28ab-4b2c-bd58-ded7715fcbde"}, "out_png": {"id": "c9f8146141acb46b", "src": "hda", "uuid": "38814124-0acc-4101-9b1e-6b455e5c168d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file stacked_violin_.png\n", "job_stdout": "", "job_stderr": "", "stderr": "Observation names are not unique. To make them unique, call `.obs_names_make_unique`.\nWARNING: dendrogram data not found (using key=dendrogram_cell_type). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.\nWARNING: saving figure to file stacked_violin_.png\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:26:30", "plugin": "core", "name": "end_epoch", "raw_value": "1708673190.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:26:27", "plugin": "core", "name": "start_epoch", "raw_value": "1708673187.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "scanpy_plot/1.7.1+galaxy1-9", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 9, "time_seconds": 13.649764060974121, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_plot/1.7.1+galaxy1-9", "has_data": true, "data": {"tool_id": "scanpy_plot", "tool_version": "1.7.1+galaxy1", "test_index": 9, "time_seconds": 14.045861005783081, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "scanpy_run_pca/1.8.1+3+galaxy0-0", "has_data": true, "data": {"tool_id": "scanpy_run_pca", "tool_version": "1.8.1+3+galaxy0", "test_index": 0, "time_seconds": 0.20860505104064941, "execution_problem": "Input staging problem: Test input file (scale_data.h5) cannot be found.", "status": "error"}}, {"id": "scanpy_run_pca/1.8.1+3+galaxy0-0", "has_data": true, "data": {"tool_id": "scanpy_run_pca", "tool_version": "1.8.1+3+galaxy0", "test_index": 0, "time_seconds": 0.21234488487243652, "execution_problem": "Input staging problem: Test input file (scale_data.h5) cannot be found.", "status": "error"}}, {"id": "table_compute/1.2.4+galaxy0-0", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 0, "time_seconds": 33.36551856994629, "inputs": {"singtabop|input": {"src": "hda", "id": "2e822fab8935dc3d"}, "singtabop|user|select_cols_wanted": "2:4,2,2", "singtabop|user|select_rows_wanted": "2:5,3,3", "singtabop|user|select_keepdupe": "select_cols_keepdupe", "singtabop|user|mode": "select", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "789c28cbc601ec9e", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:34:50.220941", "create_time": "2024-02-23T07:34:32.543822", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-jzbr7", "command_line": "cp '/galaxy/server/database/jobs_directory/000/352/configs/tmps86if1ir' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 472, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 1, \"mode\": \"select\", \"select_cols_wanted\": \"2:4,2,2\", \"select_keepdupe\": \"select_cols_keepdupe\", \"select_rows_wanted\": \"2:5,3,3\"}}"}, "inputs": {"singtabop|input": {"id": "2e822fab8935dc3d", "src": "hda", "uuid": "78ec9b22-64b6-42f6-9e00-a8af084101bf"}}, "outputs": {"table": {"id": "b93eacf1728930dc", "src": "hda", "uuid": "c200eca7-c559-4691-add2-ba70d843f5a4"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:34:40", "plugin": "core", "name": "end_epoch", "raw_value": "1708673680.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:34:39", "plugin": "core", "name": "start_epoch", "raw_value": "1708673679.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-1", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 1, "time_seconds": 25.39449954032898, "inputs": {"singtabop|input": {"src": "hda", "id": "492c937739c039f8"}, "singtabop|user|select_cols_wanted": "2:4,2,2", "singtabop|user|select_keepdupe": ["select_cols_keepdupe", "select_rows_keepdupe"], "singtabop|user|mode": "select", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "9eb6ca773bc36258", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:35:15.807135", "create_time": "2024-02-23T07:35:04.863227", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-rbhzm", "command_line": "cp '/galaxy/server/database/jobs_directory/000/354/configs/tmplxq2bimw' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 474, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 1, \"mode\": \"select\", \"select_cols_wanted\": \"2:4,2,2\", \"select_keepdupe\": [\"select_cols_keepdupe\", \"select_rows_keepdupe\"], \"select_rows_wanted\": null}}"}, "inputs": {"singtabop|input": {"id": "492c937739c039f8", "src": "hda", "uuid": "26a97c1a-efdf-438f-8c22-7072f0ae7a55"}}, "outputs": {"table": {"id": "2676fcd63c923ac1", "src": "hda", "uuid": "a20f938e-1a5d-4816-83b2-eed166812b8a"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:35:08", "plugin": "core", "name": "end_epoch", "raw_value": "1708673708.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:35:07", "plugin": "core", "name": "start_epoch", "raw_value": "1708673707.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-10", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 10, "time_seconds": 9.151795864105225, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "table_compute/1.2.4+galaxy0-11", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 11, "time_seconds": 25.290176153182983, "inputs": {"singtabop|input": {"src": "hda", "id": "2bdc4e6208af9301"}, "singtabop|user|matrixapply_func|custom_func": "vec.sum()+vec.median()", "singtabop|user|matrixapply_func|vector_op": "custom", "singtabop|user|dimension": "0", "singtabop|user|mode": "matrixapply", "singtabop|use_type": "single", "out_opts": ["ignore_nas", "output_headers_row"], "precision": "2"}, "job": {"model_class": "Job", "id": "0324e13d865e24ce", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:39:09.455561", "create_time": "2024-02-23T07:38:58.554688", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-wm7kw", "command_line": "cp '/galaxy/server/database/jobs_directory/000/373/configs/tmpczhhya5e' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 493, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 3, \"dimension\": \"0\", \"matrixapply_func\": {\"__current_case__\": 0, \"custom_func\": \"vec.sum()+vec.median()\", \"vector_op\": \"custom\"}, \"mode\": \"matrixapply\"}}"}, "inputs": {"singtabop|input": {"id": "2bdc4e6208af9301", "src": "hda", "uuid": "01b2f3e7-4c05-4182-bcdb-c7904c5de0bc"}}, "outputs": {"table": {"id": "f1ac7c8b17dbee66", "src": "hda", "uuid": "4d481f75-e56d-4f0c-959a-e273cd9cb916"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:39:01", "plugin": "core", "name": "end_epoch", "raw_value": "1708673941.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:39:00", "plugin": "core", "name": "start_epoch", "raw_value": "1708673940.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-12", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 12, "time_seconds": 25.408858060836792, "inputs": {"singtabop|input": {"src": "hda", "id": "fbc11e27e9206ef9"}, "singtabop|user|element|custom_expr": "(math.log10(elem)+elem)/elem if (elem < math.inf) else 1.0", "singtabop|user|element|mode": "custom", "singtabop|user|elem_val|element_value": "0", "singtabop|user|elem_val|element_op": "gt", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "1eca9baa117ea95b", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:39:34.859620", "create_time": "2024-02-23T07:39:23.981241", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-t8qpr", "command_line": "cp '/galaxy/server/database/jobs_directory/000/375/configs/tmpo93m3npw' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 495, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 3, \"element_op\": \"gt\", \"element_value\": \"0\"}, \"element\": {\"__current_case__\": 3, \"custom_expr\": \"(math.log10(elem)+elem)/elem if (elem < math.inf) else 1.0\", \"mode\": \"custom\"}, \"mode\": \"element\"}}"}, "inputs": {"singtabop|input": {"id": "fbc11e27e9206ef9", "src": "hda", "uuid": "0bbed2ca-591f-454d-ad2e-4fdb04d1680f"}}, "outputs": {"table": {"id": "f6e0d3ca80650570", "src": "hda", "uuid": "dd7864f2-5a9c-4f2a-b5ae-725e0e3d5aed"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:39:27", "plugin": "core", "name": "end_epoch", "raw_value": "1708673967.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:39:26", "plugin": "core", "name": "start_epoch", "raw_value": "1708673966.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-13", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 13, "time_seconds": 24.945016145706177, "inputs": {"singtabop|input": {"src": "hda", "id": "007819849b6cd9e2"}, "singtabop|user|element|custom_expr": "-math.log(1 - elem/4096) * 4096 if elem != 4096 else elem - 0.5", "singtabop|user|element|mode": "custom", "singtabop|user|elem_val|element_op": "None", "singtabop|user|mode": "element"}, "job": {"model_class": "Job", "id": "96effc39dad454c9", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:40:00.160549", "create_time": "2024-02-23T07:39:49.433276", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-slvdn", "command_line": "cp '/galaxy/server/database/jobs_directory/000/377/configs/tmp6g642kod' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 497, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 0, \"element_op\": \"None\"}, \"element\": {\"__current_case__\": 3, \"custom_expr\": \"-math.log(1 - elem/4096) * 4096 if elem != 4096 else elem - 0.5\", \"mode\": \"custom\"}, \"mode\": \"element\"}}"}, "inputs": {"singtabop|input": {"id": "007819849b6cd9e2", "src": "hda", "uuid": "11ac8c12-5863-47ad-bf94-379c0082b88f"}}, "outputs": {"table": {"id": "a87162134ad90dbc", "src": "hda", "uuid": "88f22f58-a2f2-43a6-a898-c570f3b25ab2"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:39:51", "plugin": "core", "name": "end_epoch", "raw_value": "1708673991.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:39:50", "plugin": "core", "name": "start_epoch", "raw_value": "1708673990.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-14", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 14, "time_seconds": 26.42557692527771, "inputs": {"singtabop|input": {"src": "hda", "id": "5e3701b563e220e0"}, "singtabop|user|element|custom_expr": "-math.log(1 - elem/4096) * 4096 if elem != 4096 else elem - 0.5", "singtabop|user|element|mode": "custom", "singtabop|user|elem_val|element_op": "None", "singtabop|user|mode": "element"}, "job": {"model_class": "Job", "id": "2737009cd7d71ce2", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:40:26.560167", "create_time": "2024-02-23T07:40:14.833576", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-n99gk", "command_line": "cp '/galaxy/server/database/jobs_directory/000/379/configs/tmp60wmp3hj' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 499, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 0, \"element_op\": \"None\"}, \"element\": {\"__current_case__\": 3, \"custom_expr\": \"-math.log(1 - elem/4096) * 4096 if elem != 4096 else elem - 0.5\", \"mode\": \"custom\"}, \"mode\": \"element\"}}"}, "inputs": {"singtabop|input": {"id": "5e3701b563e220e0", "src": "hda", "uuid": "1889ad9a-4dc5-429a-9618-a8bb95c22f52"}}, "outputs": {"table": {"id": "6bb34bbd88b4145a", "src": "hda", "uuid": "92f8af40-4a51-4ec3-89ad-038a48d5d39c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:40:17", "plugin": "core", "name": "end_epoch", "raw_value": "1708674017.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:40:16", "plugin": "core", "name": "start_epoch", "raw_value": "1708674016.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-15", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 15, "time_seconds": 25.324448347091675, "inputs": {"singtabop|input": {"src": "hda", "id": "1d715c1c1fd8723c"}, "singtabop|user|general|fulltable_custom_expr": "table - table.mean(0) / table.std(0)", "singtabop|user|general|use": "custom", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "7026eb790062f953", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:40:52.087664", "create_time": "2024-02-23T07:40:41.333079", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-t5m2b", "command_line": "cp '/galaxy/server/database/jobs_directory/000/381/configs/tmpm3jm1ck_' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 501, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 3, \"fulltable_custom_expr\": \"table - table.mean(0) / table.std(0)\", \"use\": \"custom\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "1d715c1c1fd8723c", "src": "hda", "uuid": "1a9d37a7-4f2c-492c-b03f-2aeac95ce8ac"}}, "outputs": {"table": {"id": "4d000c6fd519ddaa", "src": "hda", "uuid": "9ce5048a-e832-46be-9097-c6330cb265a2"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:40:44", "plugin": "core", "name": "end_epoch", "raw_value": "1708674044.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:40:43", "plugin": "core", "name": "start_epoch", "raw_value": "1708674043.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-16", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 16, "time_seconds": 26.464334726333618, "inputs": {"singtabop|tables_0|input": {"src": "hda", "id": "770ee47ecebf8369"}, "singtabop|tables_1|input": {"src": "hda", "id": "770ee47ecebf8369"}, "singtabop|tables_2|input": {"src": "hda", "id": "770ee47ecebf8369"}, "singtabop|fulltable_custom_expr": "(3 * table1) + np.log(table3 + 20) - table2", "singtabop|use_type": "multiple"}, "job": {"model_class": "Job", "id": "045a253f26e4bc2e", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:41:18.508089", "create_time": "2024-02-23T07:41:06.798270", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-9p6f9", "command_line": "cp '/galaxy/server/database/jobs_directory/000/383/configs/tmpwws2jbg2' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 1, \"fulltable_custom_expr\": \"(3 * table1) + np.log(table3 + 20) - table2\", \"tables\": [{\"__index__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 503, \"src\": \"hda\"}]}}, {\"__index__\": 1, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 503, \"src\": \"hda\"}]}}, {\"__index__\": 2, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 503, \"src\": \"hda\"}]}}], \"use_type\": \"multiple\"}"}, "inputs": {"singtabop|tables_0|input": {"id": "770ee47ecebf8369", "src": "hda", "uuid": "0b4f6259-26e9-4f3e-860b-de7d5f9a26ec"}, "singtabop|tables_1|input": {"id": "770ee47ecebf8369", "src": "hda", "uuid": "0b4f6259-26e9-4f3e-860b-de7d5f9a26ec"}, "singtabop|tables_2|input": {"id": "770ee47ecebf8369", "src": "hda", "uuid": "0b4f6259-26e9-4f3e-860b-de7d5f9a26ec"}}, "outputs": {"table": {"id": "88f6b4ad7d74cba4", "src": "hda", "uuid": "bdaaf675-5513-44e4-8737-59799bdfbce5"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:41:09", "plugin": "core", "name": "end_epoch", "raw_value": "1708674069.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:41:08", "plugin": "core", "name": "start_epoch", "raw_value": "1708674068.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-17", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 17, "time_seconds": 27.331822395324707, "inputs": {"singtabop|input": {"src": "hda", "id": "c21af95bf3368199"}, "singtabop|user|general|fulltable_custom_expr": "table * 2", "singtabop|user|general|use": "custom", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "9bd02ee18173d301", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:41:45.823327", "create_time": "2024-02-23T07:41:33.955089", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-kv99m", "command_line": "cp '/galaxy/server/database/jobs_directory/000/385/configs/tmpl3m8lc8c' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 505, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 3, \"fulltable_custom_expr\": \"table * 2\", \"use\": \"custom\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "c21af95bf3368199", "src": "hda", "uuid": "e01119c8-f44a-43d3-b23c-7087fab82aae"}}, "outputs": {"table": {"id": "df66a8cc11f6f6b5", "src": "hda", "uuid": "9428829e-8e8c-4868-bbe4-918841097bf4"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:41:36", "plugin": "core", "name": "end_epoch", "raw_value": "1708674096.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:41:35", "plugin": "core", "name": "start_epoch", "raw_value": "1708674095.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-18", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 18, "time_seconds": 25.19180178642273, "inputs": {"singtabop|input": {"src": "hda", "id": "d75b7c075a43dc5a"}, "singtabop|user|general|fulltable_custom_expr": "table == 5", "singtabop|user|general|use": "custom", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "321767a840b4ab23", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:42:11.143460", "create_time": "2024-02-23T07:42:00.280170", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-d64m5", "command_line": "cp '/galaxy/server/database/jobs_directory/000/387/configs/tmpf9888onk' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 507, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 3, \"fulltable_custom_expr\": \"table == 5\", \"use\": \"custom\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "d75b7c075a43dc5a", "src": "hda", "uuid": "36dca821-faed-48e7-9dfe-18549968f97f"}}, "outputs": {"table": {"id": "7f3fa7e91ba569d7", "src": "hda", "uuid": "12326a31-fb9c-43aa-94a4-903512a71eb1"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:42:03", "plugin": "core", "name": "end_epoch", "raw_value": "1708674123.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:42:02", "plugin": "core", "name": "start_epoch", "raw_value": "1708674122.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-19", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 19, "time_seconds": 13.688610792160034, "inputs": {"singtabop|input": {"src": "hda", "id": "b52c4e77f3a0eaf7"}, "singtabop|user|general|fulltable_custom_expr": "for n in table: n = n + 1", "singtabop|user|general|use": "custom", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "execution_problem": "An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.<>()", "dynamic_param_error": false, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-2", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 2, "time_seconds": 24.86514115333557, "inputs": {"singtabop|input": {"src": "hda", "id": "58284daeadd56bc2"}, "singtabop|user|select_rows_wanted": "2:5,3,3", "singtabop|user|select_keepdupe": "select_cols_keepdupe", "singtabop|user|mode": "select", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "a58acbf78befe6d7", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:35:40.940510", "create_time": "2024-02-23T07:35:30.286105", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-6vg7t", "command_line": "cp '/galaxy/server/database/jobs_directory/000/356/configs/tmpw34b5r9c' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 476, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 1, \"mode\": \"select\", \"select_cols_wanted\": null, \"select_keepdupe\": \"select_cols_keepdupe\", \"select_rows_wanted\": \"2:5,3,3\"}}"}, "inputs": {"singtabop|input": {"id": "58284daeadd56bc2", "src": "hda", "uuid": "2987e3d0-5fd6-4f32-8b41-8b908f9d0c7e"}}, "outputs": {"table": {"id": "eee8863eba56972d", "src": "hda", "uuid": "a54226b2-65d2-4cbb-a6bc-90d70fa7863a"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:35:32", "plugin": "core", "name": "end_epoch", "raw_value": "1708673732.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:35:31", "plugin": "core", "name": "start_epoch", "raw_value": "1708673731.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-20", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 20, "time_seconds": 14.285433530807495, "inputs": {"singtabop|input": {"src": "hda", "id": "b6723a159437549c"}, "singtabop|user|general|fulltable_custom_expr": "table + table[0,0]", "singtabop|user|general|use": "custom", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "execution_problem": "An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.<>()", "dynamic_param_error": false, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-21", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 21, "time_seconds": 25.64871382713318, "inputs": {"singtabop|input": {"src": "hda", "id": "cb5f86edbd4f251b"}, "singtabop|user|general|use": "transpose", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single", "out_opts": ["ignore_nas", "output_headers_col"]}, "job": {"model_class": "Job", "id": "609ef4fd1ee45281", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:43:05.090536", "create_time": "2024-02-23T07:42:54.094653", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-5gsch", "command_line": "cp '/galaxy/server/database/jobs_directory/000/391/configs/tmp7un3upa1' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 511, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 0, \"use\": \"transpose\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "cb5f86edbd4f251b", "src": "hda", "uuid": "e6e45e18-c3d5-4871-bbbf-f0951bf53bb2"}}, "outputs": {"table": {"id": "79ac4c61cff3162e", "src": "hda", "uuid": "344cfde4-8a7e-46e4-8227-1f2ebb3307a5"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:42:56", "plugin": "core", "name": "end_epoch", "raw_value": "1708674176.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:42:55", "plugin": "core", "name": "start_epoch", "raw_value": "1708674175.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-22", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 22, "time_seconds": 25.248597621917725, "inputs": {"singtabop|input": {"src": "hda", "id": "13c69a503d3d3d42"}, "singtabop|user|general|id_vars": "cell1,cell3", "singtabop|user|general|value_vars": "cell5,cell6", "singtabop|user|general|use": "melt", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single", "out_opts": ["ignore_nas", "output_headers_col"]}, "job": {"model_class": "Job", "id": "b4460d70a74e83cd", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:43:30.492741", "create_time": "2024-02-23T07:43:19.750971", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-5t6z6", "command_line": "cp '/galaxy/server/database/jobs_directory/000/393/configs/tmpu2g8bo0c' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 513, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 1, \"id_vars\": \"cell1,cell3\", \"use\": \"melt\", \"value_vars\": \"cell5,cell6\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "13c69a503d3d3d42", "src": "hda", "uuid": "b6d48ded-6f63-4500-9632-e20b708a6da5"}}, "outputs": {"table": {"id": "347d6b98306713bd", "src": "hda", "uuid": "0949b585-a6d4-4ca3-a975-df328d6446ca"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:43:22", "plugin": "core", "name": "end_epoch", "raw_value": "1708674202.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:43:21", "plugin": "core", "name": "start_epoch", "raw_value": "1708674201.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-23", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 23, "time_seconds": 25.58866286277771, "inputs": {"singtabop|input": {"src": "hda", "id": "20e5bfd458ba6aa4"}, "singtabop|user|general|index": "cell1", "singtabop|user|general|column": "cell2", "singtabop|user|general|values": "cell3,cell7,cell9", "singtabop|user|general|use": "pivot", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "47fe3efc23d63871", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:43:55.944216", "create_time": "2024-02-23T07:43:45.126692", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-k65k4", "command_line": "cp '/galaxy/server/database/jobs_directory/000/395/configs/tmpaepqg9qw' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 515, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 2, \"aggfunc\": null, \"colfun_map\": [], \"column\": \"cell2\", \"index\": \"cell1\", \"use\": \"pivot\", \"values\": \"cell3,cell7,cell9\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "20e5bfd458ba6aa4", "src": "hda", "uuid": "e6a981d3-3cd3-406f-9aff-f16e251a75fe"}}, "outputs": {"table": {"id": "094c81d969a2fcab", "src": "hda", "uuid": "f688f53d-611e-4f79-8683-0891a7e6b39e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:43:48", "plugin": "core", "name": "end_epoch", "raw_value": "1708674228.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:43:46", "plugin": "core", "name": "start_epoch", "raw_value": "1708674226.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-24", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 24, "time_seconds": 26.23794412612915, "inputs": {"singtabop|input": {"src": "hda", "id": "bb1ee04157bffad8"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|select_cols_wanted": "1,1,3", "singtabop|user|select_rows_wanted": "1:3,2", "singtabop|user|select_keepdupe": ["select_cols_keepdupe", "select_rows_keepdupe"], "singtabop|user|mode": "select", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "f839f1498eb1f7eb", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:44:22.459845", "create_time": "2024-02-23T07:44:11.426133", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-lbxfb", "command_line": "cp '/galaxy/server/database/jobs_directory/000/397/configs/tmpi49gujjf' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 517, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 1, \"mode\": \"select\", \"select_cols_wanted\": \"1,1,3\", \"select_keepdupe\": [\"select_cols_keepdupe\", \"select_rows_keepdupe\"], \"select_rows_wanted\": \"1:3,2\"}}"}, "inputs": {"singtabop|input": {"id": "bb1ee04157bffad8", "src": "hda", "uuid": "05d64843-422d-4684-97a6-f1bf881588dc"}}, "outputs": {"table": {"id": "2f7e9a6cc8e85653", "src": "hda", "uuid": "df850867-264c-42d7-9969-6f8c6700fc33"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:44:14", "plugin": "core", "name": "end_epoch", "raw_value": "1708674254.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:44:13", "plugin": "core", "name": "start_epoch", "raw_value": "1708674253.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-25", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 25, "time_seconds": 25.226444959640503, "inputs": {"singtabop|input": {"src": "hda", "id": "ea8fd3952b0432c2"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|axis": "1", "singtabop|user|filtersumval_mode|operation": "sum", "singtabop|user|filtersumval_mode|compare_op": "lt", "singtabop|user|filtersumval_mode|against": "50", "singtabop|user|filtersumval_mode|use": "operation", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "c1e9eaaa1377b8e0", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:44:47.572598", "create_time": "2024-02-23T07:44:37.031961", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-7d448", "command_line": "cp '/galaxy/server/database/jobs_directory/000/399/configs/tmphz9r84ba' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 519, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"1\", \"filtersumval_mode\": {\"__current_case__\": 0, \"against\": \"50.0\", \"compare_op\": \"lt\", \"operation\": \"sum\", \"use\": \"operation\"}, \"mode\": \"filtersumval\"}}"}, "inputs": {"singtabop|input": {"id": "ea8fd3952b0432c2", "src": "hda", "uuid": "b2abb5ce-2a36-4eae-8f13-cd72f7f9f4ba"}}, "outputs": {"table": {"id": "f883859fc58fdf41", "src": "hda", "uuid": "6e4bd000-5c0b-45b3-84d2-0e4b31579e3d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:44:39", "plugin": "core", "name": "end_epoch", "raw_value": "1708674279.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:44:38", "plugin": "core", "name": "start_epoch", "raw_value": "1708674278.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-26", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 26, "time_seconds": 24.285692930221558, "inputs": {"singtabop|input": {"src": "hda", "id": "a6a305ab7139436a"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|element|custom_expr": "elem < 10", "singtabop|user|element|mode": "custom", "singtabop|user|elem_val|element_op": "None", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "668f9732a8798dcd", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:45:12.125844", "create_time": "2024-02-23T07:45:02.063638", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-wzgm9", "command_line": "cp '/galaxy/server/database/jobs_directory/000/401/configs/tmpdh1jee83' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 521, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 0, \"element_op\": \"None\"}, \"element\": {\"__current_case__\": 3, \"custom_expr\": \"elem < 10\", \"mode\": \"custom\"}, \"mode\": \"element\"}}"}, "inputs": {"singtabop|input": {"id": "a6a305ab7139436a", "src": "hda", "uuid": "df27e341-15bc-4dfd-8308-efd9189d73e5"}}, "outputs": {"table": {"id": "0808c5c31efc33d2", "src": "hda", "uuid": "71a98cb0-667c-48ee-b32f-76072268a437"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:45:04", "plugin": "core", "name": "end_epoch", "raw_value": "1708674304.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:45:03", "plugin": "core", "name": "start_epoch", "raw_value": "1708674303.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-27", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 27, "time_seconds": 25.97672128677368, "inputs": {"singtabop|input": {"src": "hda", "id": "7c8edc8c0d9681d4"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|matrixapply_func|vector_op": "sum", "singtabop|user|dimension": "1", "singtabop|user|mode": "matrixapply", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "4116f4382b61230e", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:45:38.267494", "create_time": "2024-02-23T07:45:27.488657", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-dkvkx", "command_line": "cp '/galaxy/server/database/jobs_directory/000/403/configs/tmp7cguippv' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 523, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 3, \"dimension\": \"1\", \"matrixapply_func\": {\"__current_case__\": 3, \"vector_op\": \"sum\"}, \"mode\": \"matrixapply\"}}"}, "inputs": {"singtabop|input": {"id": "7c8edc8c0d9681d4", "src": "hda", "uuid": "29bdc6bd-39ed-4ca7-a271-2762f73c1a84"}}, "outputs": {"table": {"id": "769adcbfdf72deb3", "src": "hda", "uuid": "40c68959-ebee-4dfa-948c-3cc000c0607b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:45:30", "plugin": "core", "name": "end_epoch", "raw_value": "1708674330.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:45:28", "plugin": "core", "name": "start_epoch", "raw_value": "1708674328.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-28", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 28, "time_seconds": 24.891714572906494, "inputs": {"singtabop|input": {"src": "hda", "id": "3a782d88b7ab8286"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|element|custom_expr": "(math.log(elem) / elem) if (elem > 5) else 1", "singtabop|user|element|mode": "custom", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "d589f77c01f86e2b", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:46:03.041287", "create_time": "2024-02-23T07:45:52.124069", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-6v2pr", "command_line": "cp '/galaxy/server/database/jobs_directory/000/405/configs/tmp92er_fii' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 525, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 0, \"element_op\": \"None\"}, \"element\": {\"__current_case__\": 3, \"custom_expr\": \"(math.log(elem) / elem) if (elem > 5) else 1\", \"mode\": \"custom\"}, \"mode\": \"element\"}}"}, "inputs": {"singtabop|input": {"id": "3a782d88b7ab8286", "src": "hda", "uuid": "71559208-0db1-4caa-8367-bfbec12c2f45"}}, "outputs": {"table": {"id": "8903ccc039a63fe0", "src": "hda", "uuid": "2677bec4-20d4-477e-8944-2281b2b37b60"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:45:54", "plugin": "core", "name": "end_epoch", "raw_value": "1708674354.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:45:53", "plugin": "core", "name": "start_epoch", "raw_value": "1708674353.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-29", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 29, "time_seconds": 25.056156873703003, "inputs": {"singtabop|input": {"src": "hda", "id": "8db44792bfd84f07"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|general|fulltable_custom_expr": "table - table.mean(0)/table.std(0)", "singtabop|user|general|use": "custom", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "02e2d1cda7360818", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:46:28.330905", "create_time": "2024-02-23T07:46:17.551366", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-8255l", "command_line": "cp '/galaxy/server/database/jobs_directory/000/407/configs/tmpt4kdpp7i' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 527, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 3, \"fulltable_custom_expr\": \"table - table.mean(0)/table.std(0)\", \"use\": \"custom\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "8db44792bfd84f07", "src": "hda", "uuid": "b759c5a9-08e1-4bc0-a618-5a3c6e8f2511"}}, "outputs": {"table": {"id": "f58642f72339830b", "src": "hda", "uuid": "c3cb5c76-53ea-4bdb-82c9-b836f6edadea"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:46:19", "plugin": "core", "name": "end_epoch", "raw_value": "1708674379.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:46:18", "plugin": "core", "name": "start_epoch", "raw_value": "1708674378.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-3", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 3, "time_seconds": 26.3465473651886, "inputs": {"singtabop|input": {"src": "hda", "id": "b5f785eb73741b95"}, "singtabop|user|axis": "1", "singtabop|user|filtersumval_mode|operation": "sum", "singtabop|user|filtersumval_mode|compare_op": "gt", "singtabop|user|filtersumval_mode|against": "50", "singtabop|user|filtersumval_mode|use": "operation", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "11ca3f51da5d0012", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:36:07.417532", "create_time": "2024-02-23T07:35:56.642780", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-79tzr", "command_line": "cp '/galaxy/server/database/jobs_directory/000/358/configs/tmpm1_hfv6l' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 478, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"1\", \"filtersumval_mode\": {\"__current_case__\": 0, \"against\": \"50.0\", \"compare_op\": \"gt\", \"operation\": \"sum\", \"use\": \"operation\"}, \"mode\": \"filtersumval\"}}"}, "inputs": {"singtabop|input": {"id": "b5f785eb73741b95", "src": "hda", "uuid": "4f3d7e45-db87-48a0-8612-3df315f32748"}}, "outputs": {"table": {"id": "7ed643c7bca24892", "src": "hda", "uuid": "7c3ff823-8e07-4427-a5bc-92a8ebe88157"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:35:59", "plugin": "core", "name": "end_epoch", "raw_value": "1708673759.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:35:58", "plugin": "core", "name": "start_epoch", "raw_value": "1708673758.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-30", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 30, "time_seconds": 28.901585578918457, "inputs": {"singtabop|tables_0|input": {"src": "hda", "id": "8b8a45fbf81211df"}, "singtabop|tables_0|col_row_names": ["has_col_names", "has_row_names"], "singtabop|tables_1|input": {"src": "hda", "id": "de7de013514d01db"}, "singtabop|tables_1|col_row_names": ["has_col_names", "has_row_names"], "singtabop|tables_2|input": {"src": "hda", "id": "e03169c0270e801f"}, "singtabop|tables_2|col_row_names": ["has_col_names", "has_row_names"], "singtabop|fulltable_custom_expr": "table1 / min(np.max(np.max(table2)), np.max(np.max(table3)))", "singtabop|use_type": "multiple"}, "job": {"model_class": "Job", "id": "52734b0e8117dc6a", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:46:57.121501", "create_time": "2024-02-23T07:46:46.239210", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-k2c7k", "command_line": "cp '/galaxy/server/database/jobs_directory/000/411/configs/tmp5czbfjka' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 1, \"fulltable_custom_expr\": \"table1 / min(np.max(np.max(table2)), np.max(np.max(table3)))\", \"tables\": [{\"__index__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 529, \"src\": \"hda\"}]}}, {\"__index__\": 1, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 530, \"src\": \"hda\"}]}}, {\"__index__\": 2, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 531, \"src\": \"hda\"}]}}], \"use_type\": \"multiple\"}"}, "inputs": {"singtabop|tables_0|input": {"id": "8b8a45fbf81211df", "src": "hda", "uuid": "85a9e294-8d15-432b-9188-c045c6f42d8b"}, "singtabop|tables_1|input": {"id": "de7de013514d01db", "src": "hda", "uuid": "cabe6031-f8af-4233-8405-81687635ca64"}, "singtabop|tables_2|input": {"id": "e03169c0270e801f", "src": "hda", "uuid": "724eb179-d707-4f47-96c0-7bf566dd987e"}}, "outputs": {"table": {"id": "159a4cf24a4fd9ce", "src": "hda", "uuid": "6abae32b-7cca-4b27-baef-2649e896c2b7"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:46:48", "plugin": "core", "name": "end_epoch", "raw_value": "1708674408.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:46:47", "plugin": "core", "name": "start_epoch", "raw_value": "1708674407.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-31", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 31, "time_seconds": 25.346333026885986, "inputs": {"singtabop|input": {"src": "hda", "id": "5c649b7b3f99df63"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|general|id_vars": "A", "singtabop|user|general|value_vars": "B,C", "singtabop|user|general|use": "melt", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "cb51c6dc0d3f3b7e", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:47:22.666229", "create_time": "2024-02-23T07:47:11.606675", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-t6vp5", "command_line": "cp '/galaxy/server/database/jobs_directory/000/413/configs/tmpmq6gzm7i' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 533, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 1, \"id_vars\": \"A\", \"use\": \"melt\", \"value_vars\": \"B,C\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "5c649b7b3f99df63", "src": "hda", "uuid": "82ca69ed-0096-418f-9cd9-1a39fbb2a97d"}}, "outputs": {"table": {"id": "de47795dbf7223fd", "src": "hda", "uuid": "e21be9c2-7902-40d4-85e2-6a42af1ab39f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:47:14", "plugin": "core", "name": "end_epoch", "raw_value": "1708674434.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:47:13", "plugin": "core", "name": "start_epoch", "raw_value": "1708674433.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-32", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 32, "time_seconds": 25.285418272018433, "inputs": {"singtabop|input": {"src": "hda", "id": "54268fbedadf26c6"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|general|index": "foo", "singtabop|user|general|column": "bar", "singtabop|user|general|values": "baz", "singtabop|user|general|use": "pivot", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "3b38fe3a6ccafa37", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:47:47.934679", "create_time": "2024-02-23T07:47:37.007027", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-xgtrt", "command_line": "cp '/galaxy/server/database/jobs_directory/000/415/configs/tmp91dhns_a' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 535, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 2, \"aggfunc\": null, \"colfun_map\": [], \"column\": \"bar\", \"index\": \"foo\", \"use\": \"pivot\", \"values\": \"baz\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "54268fbedadf26c6", "src": "hda", "uuid": "ca9b6aed-ff7b-4106-b228-6f86a60140ff"}}, "outputs": {"table": {"id": "a42255443e65bd9e", "src": "hda", "uuid": "90b99e09-bddc-406c-b1d7-4438a11e1a56"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:47:39", "plugin": "core", "name": "end_epoch", "raw_value": "1708674459.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:47:38", "plugin": "core", "name": "start_epoch", "raw_value": "1708674458.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-33", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 33, "time_seconds": 24.22518491744995, "inputs": {"singtabop|input": {"src": "hda", "id": "82d577760fb87835"}, "singtabop|user|select_cols_wanted": "-2:2,1,-1", "singtabop|user|select_rows_wanted": "1,3:-3,1", "singtabop|user|mode": "select", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "872c1ea051ac1241", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:48:12.300255", "create_time": "2024-02-23T07:48:02.361670", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-7mf7l", "command_line": "cp '/galaxy/server/database/jobs_directory/000/417/configs/tmp02pybjl0' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 537, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 1, \"mode\": \"select\", \"select_cols_wanted\": \"-2:2,1,-1\", \"select_keepdupe\": [\"select_cols_keepdupe\", \"select_rows_keepdupe\"], \"select_rows_wanted\": \"1,3:-3,1\"}}"}, "inputs": {"singtabop|input": {"id": "82d577760fb87835", "src": "hda", "uuid": "0deb7caa-9277-45fe-bffe-4d8b0910a987"}}, "outputs": {"table": {"id": "18ca7fa432f38fda", "src": "hda", "uuid": "de7c2e1c-6ae0-4700-aca5-ceca1205e86d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:48:04", "plugin": "core", "name": "end_epoch", "raw_value": "1708674484.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:48:03", "plugin": "core", "name": "start_epoch", "raw_value": "1708674483.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-34", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 34, "time_seconds": 25.193981647491455, "inputs": {"singtabop|input": {"src": "hda", "id": "8b13396cfe32244a"}, "singtabop|user|select_cols_wanted": "-1,-3,3:-3,2", "singtabop|user|select_rows_wanted": "3:-1", "singtabop|user|select_keepdupe": "", "singtabop|user|mode": "select", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "8ad72fd2891bd0a3", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:48:37.685510", "create_time": "2024-02-23T07:48:26.942381", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-789h6", "command_line": "cp '/galaxy/server/database/jobs_directory/000/419/configs/tmpz3yg9tft' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 539, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 1, \"mode\": \"select\", \"select_cols_wanted\": \"-1,-3,3:-3,2\", \"select_keepdupe\": [], \"select_rows_wanted\": \"3:-1\"}}"}, "inputs": {"singtabop|input": {"id": "8b13396cfe32244a", "src": "hda", "uuid": "4421340d-fe8e-4725-9f3b-32284a6c7cd8"}}, "outputs": {"table": {"id": "77301bb5f3147f27", "src": "hda", "uuid": "7803b2c7-ae0d-4ea4-8db9-42c20e708dce"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:48:29", "plugin": "core", "name": "end_epoch", "raw_value": "1708674509.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:48:28", "plugin": "core", "name": "start_epoch", "raw_value": "1708674508.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-35", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 35, "time_seconds": 25.597164392471313, "inputs": {"singtabop|input": {"src": "hda", "id": "ae0b28eea039c641"}, "singtabop|adv|header": "2", "singtabop|adv|nrows": "4", "singtabop|adv|skip_blank_lines": true, "singtabop|user|mode": "precision", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "b10069a9c07d967c", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:49:03.123813", "create_time": "2024-02-23T07:48:52.299615", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-mwg5b", "command_line": "cp '/galaxy/server/database/jobs_directory/000/421/configs/tmp80utux0e' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"2\", \"nrows\": \"4\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 541, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 0, \"mode\": \"precision\"}}"}, "inputs": {"singtabop|input": {"id": "ae0b28eea039c641", "src": "hda", "uuid": "adb74395-a935-4ded-abb3-ab8282a0239f"}}, "outputs": {"table": {"id": "1b3fc293185aee31", "src": "hda", "uuid": "33a73622-2a9c-4758-90dc-7c02c24722ce"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:48:54", "plugin": "core", "name": "end_epoch", "raw_value": "1708674534.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:48:53", "plugin": "core", "name": "start_epoch", "raw_value": "1708674533.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-36", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 36, "time_seconds": 8.084925889968872, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "table_compute/1.2.4+galaxy0-37", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 37, "time_seconds": 25.216198921203613, "inputs": {"singtabop|input": {"src": "hda", "id": "3b19c04c27efb072"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|element|replace_value": "chr{elem:.0f}", "singtabop|user|element|mode": "replace", "singtabop|user|elem_val|select_cols_wanted": "2", "singtabop|user|elem_val|select_rows_wanted": "2,4", "singtabop|user|elem_val|inclusive_selection": true, "singtabop|user|elem_val|element_op": "rowcol", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "929a026f88dad14d", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:49:36.645348", "create_time": "2024-02-23T07:49:26.074756", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-6b66c", "command_line": "cp '/galaxy/server/database/jobs_directory/000/424/configs/tmp_itbnspk' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 544, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 7, \"element_op\": \"rowcol\", \"inclusive_selection\": true, \"select_cols_wanted\": \"2\", \"select_rows_wanted\": \"2,4\"}, \"element\": {\"__current_case__\": 0, \"mode\": \"replace\", \"replace_value\": \"chr{elem:.0f}\"}, \"mode\": \"element\"}}"}, "inputs": {"singtabop|input": {"id": "3b19c04c27efb072", "src": "hda", "uuid": "5cbdca38-8498-4332-9235-dc000abcc1db"}}, "outputs": {"table": {"id": "85ae44c455a830c7", "src": "hda", "uuid": "ca1c6eea-befb-477d-b4a8-d80aa634ee9e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:49:28", "plugin": "core", "name": "end_epoch", "raw_value": "1708674568.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:49:27", "plugin": "core", "name": "start_epoch", "raw_value": "1708674567.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-38", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 38, "time_seconds": 25.478819847106934, "inputs": {"singtabop|input": {"src": "hda", "id": "f3d3d639e66a06fa"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|element|replace_value": "chr{elem:.0f}", "singtabop|user|element|mode": "replace", "singtabop|user|elem_val|select_cols_wanted": "2", "singtabop|user|elem_val|select_rows_wanted": "2,4", "singtabop|user|elem_val|inclusive_selection": false, "singtabop|user|elem_val|element_op": "rowcol", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "ef0ad4d266cde80c", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:50:02.239855", "create_time": "2024-02-23T07:49:51.316670", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-45jwg", "command_line": "cp '/galaxy/server/database/jobs_directory/000/426/configs/tmpq645ss46' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 546, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 7, \"element_op\": \"rowcol\", \"inclusive_selection\": false, \"select_cols_wanted\": \"2\", \"select_rows_wanted\": \"2,4\"}, \"element\": {\"__current_case__\": 0, \"mode\": \"replace\", \"replace_value\": \"chr{elem:.0f}\"}, \"mode\": \"element\"}}"}, "inputs": {"singtabop|input": {"id": "f3d3d639e66a06fa", "src": "hda", "uuid": "bf2cebfa-4baf-4284-a136-c11958de133f"}}, "outputs": {"table": {"id": "17c2a0c50632ff75", "src": "hda", "uuid": "97b5198f-b9a1-43ad-bd71-989092f0ee25"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:49:54", "plugin": "core", "name": "end_epoch", "raw_value": "1708674594.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:49:53", "plugin": "core", "name": "start_epoch", "raw_value": "1708674593.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-39", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 39, "time_seconds": 26.317803859710693, "inputs": {"singtabop|input": {"src": "hda", "id": "b2e7f4315070a11f"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|element|replace_value": "a'+'b", "singtabop|user|element|mode": "replace", "singtabop|user|elem_val|element_op": "None", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "f7087775b93cf1a8", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:50:28.583699", "create_time": "2024-02-23T07:50:17.634739", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-tlzc5", "command_line": "cp '/galaxy/server/database/jobs_directory/000/428/configs/tmpnqopurfn' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 548, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 5, \"elem_val\": {\"__current_case__\": 0, \"element_op\": \"None\"}, \"element\": {\"__current_case__\": 0, \"mode\": \"replace\", \"replace_value\": \"a'+'b\"}, \"mode\": \"element\"}}"}, "inputs": {"singtabop|input": {"id": "b2e7f4315070a11f", "src": "hda", "uuid": "1883641a-d336-44c9-a8f8-e84d50612fc6"}}, "outputs": {"table": {"id": "837d9fad6a2c5790", "src": "hda", "uuid": "d1082b1b-b0d7-4bd6-a337-9233bd8fbcf5"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:50:20", "plugin": "core", "name": "end_epoch", "raw_value": "1708674620.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:50:18", "plugin": "core", "name": "start_epoch", "raw_value": "1708674618.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-4", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 4, "time_seconds": 19.67921471595764, "inputs": {"singtabop|input": {"src": "hda", "id": "cbe9834b44e7ecfe"}, "singtabop|user|axis": "0", "singtabop|user|filtersumval_mode|operation": "sum", "singtabop|user|filtersumval_mode|compare_op": "ne", "singtabop|user|filtersumval_mode|against": "0", "singtabop|user|filtersumval_mode|use": "operation", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "e21573af37f15d73", "state": "error", "exit_code": null, "update_time": "2024-02-23T07:36:27.068908", "create_time": "2024-02-23T07:36:20.996200", "galaxy_version": "23.1", "command_version": null, "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-llz6f", "command_line": "cp '/galaxy/server/database/jobs_directory/000/360/configs/tmpebe5pnb1' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 480, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"0\", \"filtersumval_mode\": {\"__current_case__\": 0, \"against\": \"0.0\", \"compare_op\": \"ne\", \"operation\": \"sum\", \"use\": \"operation\"}, \"mode\": \"filtersumval\"}}"}, "inputs": {"singtabop|input": {"id": "cbe9834b44e7ecfe", "src": "hda", "uuid": "1ca736ec-5732-48f2-82ad-98a413f7972a"}}, "outputs": {"table": {"id": "c71199044348b484", "src": "hda", "uuid": "0d75ecdb-4828-4e46-9c1a-8bbd17d5205f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": null, "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "table_compute/1.2.4+galaxy0-40", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 40, "time_seconds": 13.675636053085327, "inputs": {"singtabop|input": {"src": "hda", "id": "688d4ec2cee398b9"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|element|custom_expr": "el'+'em", "singtabop|user|element|mode": "custom", "singtabop|user|mode": "element", "singtabop|use_type": "single"}, "execution_problem": "An expression is required and is allowed to contain only letters, numbers and the characters _ !-+=/*%.<>()", "dynamic_param_error": false, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-41", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 41, "time_seconds": 24.967625379562378, "inputs": {"singtabop|input": {"src": "hda", "id": "9fc78ace8c202321"}, "singtabop|col_row_names": ["has_col_names", "has_row_names"], "singtabop|user|general|index": "Position", "singtabop|user|general|colfun_map_0|column": "Age", "singtabop|user|general|colfun_map_0|functions_0|aggfunc": "mean", "singtabop|user|general|colfun_map_1|column": "Random", "singtabop|user|general|colfun_map_1|functions_0|aggfunc": "mean", "singtabop|user|general|colfun_map_1|functions_1|aggfunc": "std", "singtabop|user|general|use": "pivot", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "448051cb6b777d19", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:51:07.280062", "create_time": "2024-02-23T07:50:57.111514", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-gm29b", "command_line": "cp '/galaxy/server/database/jobs_directory/000/431/configs/tmp6mzj16p8' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 551, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 2, \"aggfunc\": null, \"colfun_map\": [{\"__index__\": 0, \"column\": \"Age\", \"functions\": [{\"__index__\": 0, \"aggfunc\": \"mean\"}]}, {\"__index__\": 1, \"column\": \"Random\", \"functions\": [{\"__index__\": 0, \"aggfunc\": \"mean\"}, {\"__index__\": 1, \"aggfunc\": \"std\"}]}], \"column\": \"\", \"index\": \"Position\", \"use\": \"pivot\", \"values\": \"\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "9fc78ace8c202321", "src": "hda", "uuid": "0bb90b55-f0a9-4615-affc-04bb0701c2e8"}}, "outputs": {"table": {"id": "44d0c1d2151843d0", "src": "hda", "uuid": "695548c5-a00b-49bf-a84d-10cbd5aae52b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:50:59", "plugin": "core", "name": "end_epoch", "raw_value": "1708674659.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:50:58", "plugin": "core", "name": "start_epoch", "raw_value": "1708674658.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-42", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 42, "time_seconds": 25.352121829986572, "inputs": {"singtabop|input": {"src": "hda", "id": "58dabc3efb929a54"}, "singtabop|col_row_names": "has_col_names", "singtabop|user|general|index": "A", "singtabop|user|general|column": "C", "singtabop|user|general|values": "D", "singtabop|user|general|aggfunc": "max", "singtabop|user|general|use": "pivot", "singtabop|user|mode": "fulltable", "singtabop|use_type": "single"}, "job": {"model_class": "Job", "id": "cdf6f992cac954db", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:51:32.812408", "create_time": "2024-02-23T07:51:21.878066", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-j2986", "command_line": "cp '/galaxy/server/database/jobs_directory/000/433/configs/tmpeo1xq5qi' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"6\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": \"has_col_names\", \"input\": {\"values\": [{\"id\": 553, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 4, \"general\": {\"__current_case__\": 2, \"aggfunc\": \"max\", \"colfun_map\": [], \"column\": \"C\", \"index\": \"A\", \"use\": \"pivot\", \"values\": \"D\"}, \"mode\": \"fulltable\"}}"}, "inputs": {"singtabop|input": {"id": "58dabc3efb929a54", "src": "hda", "uuid": "ea7bc036-2670-4cbe-b132-0348166a8e9f"}}, "outputs": {"table": {"id": "7a61d970f0055918", "src": "hda", "uuid": "4d629e35-8230-4970-9236-21e7f221ba27"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:51:24", "plugin": "core", "name": "end_epoch", "raw_value": "1708674684.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:51:23", "plugin": "core", "name": "start_epoch", "raw_value": "1708674683.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-5", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 5, "time_seconds": 24.00638747215271, "inputs": {"singtabop|input": {"src": "hda", "id": "1f179872b038b7cb"}, "singtabop|user|axis": "0", "singtabop|user|filtersumval_mode|operation": "sum", "singtabop|user|filtersumval_mode|compare_op": "gt", "singtabop|user|filtersumval_mode|against": "10", "singtabop|user|filtersumval_mode|use": "operation", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single", "precision": "2"}, "job": {"model_class": "Job", "id": "f1a610d76ed75ae7", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:36:51.105454", "create_time": "2024-02-23T07:36:41.457690", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-jp8lz", "command_line": "cp '/galaxy/server/database/jobs_directory/000/362/configs/tmp5om56d8b' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"2\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 482, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"0\", \"filtersumval_mode\": {\"__current_case__\": 0, \"against\": \"10.0\", \"compare_op\": \"gt\", \"operation\": \"sum\", \"use\": \"operation\"}, \"mode\": \"filtersumval\"}}"}, "inputs": {"singtabop|input": {"id": "1f179872b038b7cb", "src": "hda", "uuid": "a2b75f7b-52d9-48ec-a349-059caf606fde"}}, "outputs": {"table": {"id": "429bde49830b0531", "src": "hda", "uuid": "130554ae-ce67-4031-be2d-5f6fda25e297"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:36:43", "plugin": "core", "name": "end_epoch", "raw_value": "1708673803.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:36:42", "plugin": "core", "name": "start_epoch", "raw_value": "1708673802.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-6", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 6, "time_seconds": 26.46097469329834, "inputs": {"singtabop|input": {"src": "hda", "id": "e00ca8dd6ec92423"}, "singtabop|user|axis": "0", "singtabop|user|filtersumval_mode|operation": "median", "singtabop|user|filtersumval_mode|compare_op": "ge", "singtabop|user|filtersumval_mode|against": "2", "singtabop|user|filtersumval_mode|use": "operation", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single", "precision": "5"}, "job": {"model_class": "Job", "id": "411c69de6ad2cc33", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:37:17.600772", "create_time": "2024-02-23T07:37:06.950054", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-smclg", "command_line": "cp '/galaxy/server/database/jobs_directory/000/364/configs/tmpdwl6motd' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"5\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 484, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"0\", \"filtersumval_mode\": {\"__current_case__\": 0, \"against\": \"2.0\", \"compare_op\": \"ge\", \"operation\": \"median\", \"use\": \"operation\"}, \"mode\": \"filtersumval\"}}"}, "inputs": {"singtabop|input": {"id": "e00ca8dd6ec92423", "src": "hda", "uuid": "91dc5cc7-f4c1-47bf-acb7-1e5fe5dae128"}}, "outputs": {"table": {"id": "f1432d4c008ddfed", "src": "hda", "uuid": "adeb4294-f2a8-4857-a0a8-01c1a56bc863"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:37:09", "plugin": "core", "name": "end_epoch", "raw_value": "1708673829.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:37:08", "plugin": "core", "name": "start_epoch", "raw_value": "1708673828.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-7", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 7, "time_seconds": 25.333792686462402, "inputs": {"singtabop|input": {"src": "hda", "id": "fd235d4fa38a7779"}, "singtabop|user|axis": "1", "singtabop|user|filtersumval_mode|minmatch": "2", "singtabop|user|filtersumval_mode|operation": "gt", "singtabop|user|filtersumval_mode|against": "2", "singtabop|user|filtersumval_mode|use": "element", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single", "precision": "5"}, "job": {"model_class": "Job", "id": "67ffe8ea156a1ece", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:37:43.066187", "create_time": "2024-02-23T07:37:32.397536", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-wknbs", "command_line": "cp '/galaxy/server/database/jobs_directory/000/366/configs/tmper1y0po2' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"5\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 486, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"1\", \"filtersumval_mode\": {\"__current_case__\": 1, \"against\": \"2\", \"minmatch\": \"2\", \"operation\": \"gt\", \"use\": \"element\"}, \"mode\": \"filtersumval\"}}"}, "inputs": {"singtabop|input": {"id": "fd235d4fa38a7779", "src": "hda", "uuid": "0acba7f0-297d-45ef-906d-f6801bf917aa"}}, "outputs": {"table": {"id": "2216e8030fad7a9d", "src": "hda", "uuid": "cc55297d-64a5-4b53-8b2c-74dff5e25347"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:37:34", "plugin": "core", "name": "end_epoch", "raw_value": "1708673854.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:37:33", "plugin": "core", "name": "start_epoch", "raw_value": "1708673853.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-8", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 8, "time_seconds": 25.33272933959961, "inputs": {"singtabop|input": {"src": "hda", "id": "762ef1e53fcfc795"}, "singtabop|user|axis": "0", "singtabop|user|filtersumval_mode|minmatch": "4", "singtabop|user|filtersumval_mode|operation": "str_ne", "singtabop|user|filtersumval_mode|against": "0", "singtabop|user|filtersumval_mode|use": "element", "singtabop|user|mode": "filtersumval", "singtabop|use_type": "single", "precision": "3"}, "job": {"model_class": "Job", "id": "d4f2043ae7553822", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:38:08.442520", "create_time": "2024-02-23T07:37:57.826364", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-2tj7l", "command_line": "cp '/galaxy/server/database/jobs_directory/000/368/configs/tmpax5744sl' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"3\"", "out_opts": "[\"ignore_nas\", \"output_headers_col\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 488, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 2, \"axis\": \"0\", \"filtersumval_mode\": {\"__current_case__\": 1, \"against\": \"0\", \"minmatch\": \"4\", \"operation\": \"str_ne\", \"use\": \"element\"}, \"mode\": \"filtersumval\"}}"}, "inputs": {"singtabop|input": {"id": "762ef1e53fcfc795", "src": "hda", "uuid": "3d760b73-9e21-4720-9fc7-58db5c8cd7a3"}}, "outputs": {"table": {"id": "95242870c0045608", "src": "hda", "uuid": "a354657f-4112-40df-9915-447edc49313f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:38:00", "plugin": "core", "name": "end_epoch", "raw_value": "1708673880.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:37:59", "plugin": "core", "name": "start_epoch", "raw_value": "1708673879.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "table_compute/1.2.4+galaxy0-9", "has_data": true, "data": {"tool_id": "table_compute", "tool_version": "1.2.4+galaxy0", "test_index": 9, "time_seconds": 26.399302005767822, "inputs": {"singtabop|input": {"src": "hda", "id": "e40efa8e76cbabdc"}, "singtabop|user|matrixapply_func|vector_op": "max", "singtabop|user|dimension": "1", "singtabop|user|mode": "matrixapply", "singtabop|use_type": "single", "out_opts": ["ignore_nas", "output_headers_row"], "precision": "0"}, "job": {"model_class": "Job", "id": "da0014c9b91249e2", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:38:34.821736", "create_time": "2024-02-23T07:38:23.256196", "galaxy_version": "23.1", "command_version": "0.9.2", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/table_compute/table_compute/1.2.4+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-58vvk", "command_line": "cp '/galaxy/server/database/jobs_directory/000/370/configs/tmpgf_emkiq' ./userconfig.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/safety.py' ./safety.py && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/table_compute/3bf5661c0280/table_compute/scripts/table_compute.py' ./table_compute.py && python ./table_compute.py", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "precision": "\"0\"", "out_opts": "[\"ignore_nas\", \"output_headers_row\"]", "singtabop": "{\"__current_case__\": 0, \"adv\": {\"header\": \"\", \"nrows\": \"\", \"skip_blank_lines\": true, \"skipfooter\": \"\"}, \"col_row_names\": [\"has_col_names\", \"has_row_names\"], \"input\": {\"values\": [{\"id\": 490, \"src\": \"hda\"}]}, \"use_type\": \"single\", \"user\": {\"__current_case__\": 3, \"dimension\": \"1\", \"matrixapply_func\": {\"__current_case__\": 2, \"vector_op\": \"max\"}, \"mode\": \"matrixapply\"}}"}, "inputs": {"singtabop|input": {"id": "e40efa8e76cbabdc", "src": "hda", "uuid": "d7e18eb3-3e8b-4180-ab40-b855c07ea582"}}, "outputs": {"table": {"id": "9427fc1959bedff8", "src": "hda", "uuid": "3bc11696-622e-49f2-a994-7e8499b8b038"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 07:38:26", "plugin": "core", "name": "end_epoch", "raw_value": "1708673906.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:38:25", "plugin": "core", "name": "start_epoch", "raw_value": "1708673905.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "trim_galore/0.6.3-0", "has_data": true, "data": {"tool_id": "trim_galore", "tool_version": "0.6.3", "test_index": 0, "time_seconds": 59.78664255142212, "inputs": {"singlePaired|input_singles": {"src": "hda", "id": "edd95fc110727eee"}, "singlePaired|sPaired": "single", "params|report": true, "params|settingsType": "custom"}, "job": {"model_class": "Job", "id": "0a27f868415013c9", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:33:50.144494", "create_time": "2024-02-23T06:33:06.035685", "galaxy_version": "23.1", "command_version": "Quality-/Adapter-/RRBS-/Speciality-Trimming\n                                [powered by Cutadapt]\n                                  version 0.6.3\n\n                               Last update: 21 03 2019", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/trim_galore/trim_galore/0.6.3", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-nxbvp", "command_line": "ln -s '/galaxy/server/database/objects/0/d/9/dataset_0d9a223d-43ef-44f1-ae4b-0a9c8a79ee19.dat' input_1.fastq &&  trim_galore  --phred33   --quality 20  --stringency 1  -e 0.1  --length 20       --output_dir ./      input_1.fastq  --dont_gzip  && if [ -f input_1_trimmed.fq.gz ] ; then mv input_1_trimmed.fq.gz input_1_trimmed.fq ; fi && if [ -f input_1_val_1.fq.gz ] ; then mv input_1_val_1.fq.gz input_1_val_1.fq ; fi && if [ -f input_2_val_2.fq.gz ] ; then mv input_2_val_2.fq.gz input_2_val_2.fq ; fi && if [ -f input_1_unpaired_1.fq.gz ] ; then mv input_1_unpaired_1.fq.gz input_1_unpaired_1.fq ; fi && if [ -f input_2_unpaired_2.fq.gz ] ; then mv input_2_unpaired_2.fq.gz input_2_unpaired_2.fq ; fi  && cat ./*_trimming_report.txt > '/galaxy/server/database/objects/a/2/9/dataset_a29ec2c3-f83c-4498-977c-e652d89c276a.dat'", "traceback": null, "params": {"singlePaired": "{\"__current_case__\": 0, \"input_singles\": {\"values\": [{\"id\": 40, \"src\": \"hda\"}]}, \"sPaired\": \"single\", \"three_prime_clip_R1\": \"\", \"trimming\": {\"__current_case__\": 0, \"trimming_select\": \"\"}}", "params": "{\"__current_case__\": 1, \"clip_R1\": \"\", \"clip_R2\": \"\", \"error_rate\": \"0.1\", \"min_length\": \"20\", \"quality\": \"20\", \"report\": true, \"retain_unpaired\": {\"__current_case__\": 0, \"retain_unpaired_select\": \"no_output\"}, \"settingsType\": \"custom\", \"stringency\": \"1\"}", "rrbs": "{\"__current_case__\": 0, \"settingsType\": \"default\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"singlePaired|input_singles": {"id": "edd95fc110727eee", "src": "hda", "uuid": "0d9a223d-43ef-44f1-ae4b-0a9c8a79ee19"}}, "outputs": {"trimmed_reads_single": {"id": "ea2652ae658be0ab", "src": "hda", "uuid": "5f5056c8-8da1-45e6-b8ff-cc93e8d192f2"}, "report_file": {"id": "c4874f911eb5982b", "src": "hda", "uuid": "a29ec2c3-f83c-4498-977c-e652d89c276a"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/38/working/\n\n\nAUTO-DETECTING ADAPTER TYPE\n===========================\nAttempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq <<)\n\nFound perfect matches for the following adapter sequences:\nAdapter type\tCount\tSequence\tSequences analysed\tPercentage\nNextera\t0\tCTGTCTCTTATA\t2\t0.00\nIllumina\t0\tAGATCGGAAGAGC\t2\t0.00\nsmallRNA\t0\tTGGAATTCTCGG\t2\t0.00\nUnable to auto-detect most prominent adapter from the first specified file (count Nextera: 0, count Illumina: 0)\nDefaulting to Illumina universal adapter ( AGATCGGAAGAGC ). Specify -a SEQUENCE to avoid this behavior).\n\nWriting report to '/galaxy/server/database/jobs_directory/000/38/working/input_1.fastq_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq\nTrimming mode: single-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; default (inconclusive auto-detection))\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length before a sequence gets removed: 20 bp\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file input_1.fastq <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC input_1.fastq\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.00 s (1653 us/read; 0.04 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       2\nReads with adapters:                         1 (50.0%)\nReads written (passing filters):             2 (100.0%)\n\nTotal basepairs processed:           188 bp\nQuality-trimmed:                      20 bp (10.6%)\nTotal written (filtered):            167 bp (88.8%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 100.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t1\t0.5\t0\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq\n=============================================\n2 sequences processed in total\nSequences removed because they became shorter than the length cutoff of 20 bp:\t0 (0.0%)\n\n", "job_stdout": "", "job_stderr": "", "stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/38/working/\n\n\nAUTO-DETECTING ADAPTER TYPE\n===========================\nAttempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq <<)\n\nFound perfect matches for the following adapter sequences:\nAdapter type\tCount\tSequence\tSequences analysed\tPercentage\nNextera\t0\tCTGTCTCTTATA\t2\t0.00\nIllumina\t0\tAGATCGGAAGAGC\t2\t0.00\nsmallRNA\t0\tTGGAATTCTCGG\t2\t0.00\nUnable to auto-detect most prominent adapter from the first specified file (count Nextera: 0, count Illumina: 0)\nDefaulting to Illumina universal adapter ( AGATCGGAAGAGC ). Specify -a SEQUENCE to avoid this behavior).\n\nWriting report to '/galaxy/server/database/jobs_directory/000/38/working/input_1.fastq_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq\nTrimming mode: single-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; default (inconclusive auto-detection))\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length before a sequence gets removed: 20 bp\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file input_1.fastq <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC input_1.fastq\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.00 s (1653 us/read; 0.04 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       2\nReads with adapters:                         1 (50.0%)\nReads written (passing filters):             2 (100.0%)\n\nTotal basepairs processed:           188 bp\nQuality-trimmed:                      20 bp (10.6%)\nTotal written (filtered):            167 bp (88.8%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 100.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t1\t0.5\t0\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq\n=============================================\n2 sequences processed in total\nSequences removed because they became shorter than the length cutoff of 20 bp:\t0 (0.0%)\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:33:38", "plugin": "core", "name": "end_epoch", "raw_value": "1708670018.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:33:38", "plugin": "core", "name": "start_epoch", "raw_value": "1708670018.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "5", "plugin": "core", "name": "galaxy_slots", "raw_value": "5.0000000"}]}, "status": "success"}}, {"id": "trim_galore/0.6.3-1", "has_data": true, "data": {"tool_id": "trim_galore", "tool_version": "0.6.3", "test_index": 1, "time_seconds": 26.509068727493286, "inputs": {"singlePaired|input_singles": {"src": "hda", "id": "c6f523627e92c16a"}, "singlePaired|sPaired": "single", "params|report": true, "params|settingsType": "custom"}, "job": {"model_class": "Job", "id": "edd95fc110727eee", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:34:16.572504", "create_time": "2024-02-23T06:34:05.759919", "galaxy_version": "23.1", "command_version": "Quality-/Adapter-/RRBS-/Speciality-Trimming\n                                [powered by Cutadapt]\n                                  version 0.6.3\n\n                               Last update: 21 03 2019", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/trim_galore/trim_galore/0.6.3", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-zf5ds", "command_line": "ln -s '/galaxy/server/database/objects/e/0/0/dataset_e004e886-d32d-40fb-9674-2d1b44d7b94b.dat' input_1.fastq.gz &&  trim_galore  --phred33   --quality 20  --stringency 1  -e 0.1  --length 20       --output_dir ./      input_1.fastq.gz   && if [ -f input_1_trimmed.fq.gz ] ; then mv input_1_trimmed.fq.gz input_1_trimmed.fq ; fi && if [ -f input_1_val_1.fq.gz ] ; then mv input_1_val_1.fq.gz input_1_val_1.fq ; fi && if [ -f input_2_val_2.fq.gz ] ; then mv input_2_val_2.fq.gz input_2_val_2.fq ; fi && if [ -f input_1_unpaired_1.fq.gz ] ; then mv input_1_unpaired_1.fq.gz input_1_unpaired_1.fq ; fi && if [ -f input_2_unpaired_2.fq.gz ] ; then mv input_2_unpaired_2.fq.gz input_2_unpaired_2.fq ; fi  && cat ./*_trimming_report.txt > '/galaxy/server/database/objects/6/7/8/dataset_678ed4d5-b91e-4f5c-9e56-10b564e329e0.dat'", "traceback": null, "params": {"singlePaired": "{\"__current_case__\": 0, \"input_singles\": {\"values\": [{\"id\": 43, \"src\": \"hda\"}]}, \"sPaired\": \"single\", \"three_prime_clip_R1\": \"\", \"trimming\": {\"__current_case__\": 0, \"trimming_select\": \"\"}}", "params": "{\"__current_case__\": 1, \"clip_R1\": \"\", \"clip_R2\": \"\", \"error_rate\": \"0.1\", \"min_length\": \"20\", \"quality\": \"20\", \"report\": true, \"retain_unpaired\": {\"__current_case__\": 0, \"retain_unpaired_select\": \"no_output\"}, \"settingsType\": \"custom\", \"stringency\": \"1\"}", "rrbs": "{\"__current_case__\": 0, \"settingsType\": \"default\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"singlePaired|input_singles": {"id": "c6f523627e92c16a", "src": "hda", "uuid": "e004e886-d32d-40fb-9674-2d1b44d7b94b"}}, "outputs": {"trimmed_reads_single": {"id": "21f18b4eee249f80", "src": "hda", "uuid": "d5beae78-a373-41f7-9175-7764b602cc88"}, "report_file": {"id": "dabe782facbca62c", "src": "hda", "uuid": "678ed4d5-b91e-4f5c-9e56-10b564e329e0"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/40/working/\n\n\nAUTO-DETECTING ADAPTER TYPE\n===========================\nAttempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq.gz <<)\n\nFound perfect matches for the following adapter sequences:\nAdapter type\tCount\tSequence\tSequences analysed\tPercentage\nNextera\t0\tCTGTCTCTTATA\t2\t0.00\nsmallRNA\t0\tTGGAATTCTCGG\t2\t0.00\nIllumina\t0\tAGATCGGAAGAGC\t2\t0.00\nUnable to auto-detect most prominent adapter from the first specified file (count Nextera: 0, count smallRNA: 0)\nDefaulting to Illumina universal adapter ( AGATCGGAAGAGC ). Specify -a SEQUENCE to avoid this behavior).\n\nWriting report to '/galaxy/server/database/jobs_directory/000/40/working/input_1.fastq.gz_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq.gz\nTrimming mode: single-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; default (inconclusive auto-detection))\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length before a sequence gets removed: 20 bp\nOutput file(s) will be GZIP compressed\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq.gz\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file input_1.fastq.gz <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC input_1.fastq.gz\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.01 s (7403 us/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       2\nReads with adapters:                         1 (50.0%)\nReads written (passing filters):             2 (100.0%)\n\nTotal basepairs processed:           188 bp\nQuality-trimmed:                      20 bp (10.6%)\nTotal written (filtered):            167 bp (88.8%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 100.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t1\t0.5\t0\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq.gz\n=============================================\n2 sequences processed in total\nSequences removed because they became shorter than the length cutoff of 20 bp:\t0 (0.0%)\n\n", "job_stdout": "", "job_stderr": "", "stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/40/working/\n\n\nAUTO-DETECTING ADAPTER TYPE\n===========================\nAttempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq.gz <<)\n\nFound perfect matches for the following adapter sequences:\nAdapter type\tCount\tSequence\tSequences analysed\tPercentage\nNextera\t0\tCTGTCTCTTATA\t2\t0.00\nsmallRNA\t0\tTGGAATTCTCGG\t2\t0.00\nIllumina\t0\tAGATCGGAAGAGC\t2\t0.00\nUnable to auto-detect most prominent adapter from the first specified file (count Nextera: 0, count smallRNA: 0)\nDefaulting to Illumina universal adapter ( AGATCGGAAGAGC ). Specify -a SEQUENCE to avoid this behavior).\n\nWriting report to '/galaxy/server/database/jobs_directory/000/40/working/input_1.fastq.gz_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq.gz\nTrimming mode: single-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; default (inconclusive auto-detection))\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length before a sequence gets removed: 20 bp\nOutput file(s) will be GZIP compressed\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq.gz\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file input_1.fastq.gz <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC input_1.fastq.gz\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.01 s (7403 us/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       2\nReads with adapters:                         1 (50.0%)\nReads written (passing filters):             2 (100.0%)\n\nTotal basepairs processed:           188 bp\nQuality-trimmed:                      20 bp (10.6%)\nTotal written (filtered):            167 bp (88.8%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 100.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t1\t0.5\t0\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq.gz\n=============================================\n2 sequences processed in total\nSequences removed because they became shorter than the length cutoff of 20 bp:\t0 (0.0%)\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:34:08", "plugin": "core", "name": "end_epoch", "raw_value": "1708670048.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:34:08", "plugin": "core", "name": "start_epoch", "raw_value": "1708670048.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "5", "plugin": "core", "name": "galaxy_slots", "raw_value": "5.0000000"}]}, "status": "success"}}, {"id": "trim_galore/0.6.3-2", "has_data": true, "data": {"tool_id": "trim_galore", "tool_version": "0.6.3", "test_index": 2, "time_seconds": 24.73734211921692, "inputs": {"singlePaired|input_singles": {"src": "hda", "id": "29466a62f8d6282b"}, "singlePaired|trimming|trimming_select": "--illumina", "singlePaired|sPaired": "single"}, "job": {"model_class": "Job", "id": "c4874f911eb5982b", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:34:41.851991", "create_time": "2024-02-23T06:34:32.014577", "galaxy_version": "23.1", "command_version": "Quality-/Adapter-/RRBS-/Speciality-Trimming\n                                [powered by Cutadapt]\n                                  version 0.6.3\n\n                               Last update: 21 03 2019", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/trim_galore/trim_galore/0.6.3", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-m2x7b", "command_line": "ln -s '/galaxy/server/database/objects/4/0/1/dataset_401ca64f-2b87-411a-baec-e944e4c501cf.dat' input_1.fastq &&  trim_galore  --phred33    --output_dir ./   --illumina   input_1.fastq  --dont_gzip  && if [ -f input_1_trimmed.fq.gz ] ; then mv input_1_trimmed.fq.gz input_1_trimmed.fq ; fi && if [ -f input_1_val_1.fq.gz ] ; then mv input_1_val_1.fq.gz input_1_val_1.fq ; fi && if [ -f input_2_val_2.fq.gz ] ; then mv input_2_val_2.fq.gz input_2_val_2.fq ; fi && if [ -f input_1_unpaired_1.fq.gz ] ; then mv input_1_unpaired_1.fq.gz input_1_unpaired_1.fq ; fi && if [ -f input_2_unpaired_2.fq.gz ] ; then mv input_2_unpaired_2.fq.gz input_2_unpaired_2.fq ; fi", "traceback": null, "params": {"singlePaired": "{\"__current_case__\": 0, \"input_singles\": {\"values\": [{\"id\": 46, \"src\": \"hda\"}]}, \"sPaired\": \"single\", \"three_prime_clip_R1\": \"\", \"trimming\": {\"__current_case__\": 1, \"trimming_select\": \"--illumina\"}}", "params": "{\"__current_case__\": 0, \"settingsType\": \"default\"}", "rrbs": "{\"__current_case__\": 0, \"settingsType\": \"default\"}", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"input\""}, "inputs": {"singlePaired|input_singles": {"id": "29466a62f8d6282b", "src": "hda", "uuid": "401ca64f-2b87-411a-baec-e944e4c501cf"}}, "outputs": {"trimmed_reads_single": {"id": "8cb6b8776f3a0f03", "src": "hda", "uuid": "02c63dad-cb4e-461f-89bf-e8d45e28d89e"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/42/working/\nWriting report to '/galaxy/server/database/jobs_directory/000/42/working/input_1.fastq_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq\nTrimming mode: single-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; user defined)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length before a sequence gets removed: 20 bp\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file input_1.fastq <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC input_1.fastq\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.00 s (1765 us/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       2\nReads with adapters:                         1 (50.0%)\nReads written (passing filters):             2 (100.0%)\n\nTotal basepairs processed:           188 bp\nQuality-trimmed:                      20 bp (10.6%)\nTotal written (filtered):            167 bp (88.8%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 100.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t1\t0.5\t0\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq\n=============================================\n2 sequences processed in total\nSequences removed because they became shorter than the length cutoff of 20 bp:\t0 (0.0%)\n\n", "job_stdout": "", "job_stderr": "", "stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/42/working/\nWriting report to '/galaxy/server/database/jobs_directory/000/42/working/input_1.fastq_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq\nTrimming mode: single-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; user defined)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length before a sequence gets removed: 20 bp\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file input_1.fastq <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC input_1.fastq\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.00 s (1765 us/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       2\nReads with adapters:                         1 (50.0%)\nReads written (passing filters):             2 (100.0%)\n\nTotal basepairs processed:           188 bp\nQuality-trimmed:                      20 bp (10.6%)\nTotal written (filtered):            167 bp (88.8%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 100.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t1\t0.5\t0\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq\n=============================================\n2 sequences processed in total\nSequences removed because they became shorter than the length cutoff of 20 bp:\t0 (0.0%)\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:34:33", "plugin": "core", "name": "end_epoch", "raw_value": "1708670073.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:34:33", "plugin": "core", "name": "start_epoch", "raw_value": "1708670073.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "5", "plugin": "core", "name": "galaxy_slots", "raw_value": "5.0000000"}]}, "status": "success"}}, {"id": "trim_galore/0.6.3-3", "has_data": true, "data": {"tool_id": "trim_galore", "tool_version": "0.6.3", "test_index": 3, "time_seconds": 23.94962978363037, "inputs": {"singlePaired|input_singles": {"src": "hda", "id": "875df19ffd9570b1"}, "singlePaired|trimming|trimming_select": "--illumina", "singlePaired|sPaired": "single"}, "job": {"model_class": "Job", "id": "21f18b4eee249f80", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:35:06.081474", "create_time": "2024-02-23T06:34:56.469317", "galaxy_version": "23.1", "command_version": "Quality-/Adapter-/RRBS-/Speciality-Trimming\n                                [powered by Cutadapt]\n                                  version 0.6.3\n\n                               Last update: 21 03 2019", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/trim_galore/trim_galore/0.6.3", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-c7wlz", "command_line": "ln -s '/galaxy/server/database/objects/e/b/6/dataset_eb6f26b4-85b1-450b-a209-411448726405.dat' input_1.fastq.gz &&  trim_galore  --phred33    --output_dir ./   --illumina   input_1.fastq.gz   && if [ -f input_1_trimmed.fq.gz ] ; then mv input_1_trimmed.fq.gz input_1_trimmed.fq ; fi && if [ -f input_1_val_1.fq.gz ] ; then mv input_1_val_1.fq.gz input_1_val_1.fq ; fi && if [ -f input_2_val_2.fq.gz ] ; then mv input_2_val_2.fq.gz input_2_val_2.fq ; fi && if [ -f input_1_unpaired_1.fq.gz ] ; then mv input_1_unpaired_1.fq.gz input_1_unpaired_1.fq ; fi && if [ -f input_2_unpaired_2.fq.gz ] ; then mv input_2_unpaired_2.fq.gz input_2_unpaired_2.fq ; fi", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rrbs": "{\"__current_case__\": 0, \"settingsType\": \"default\"}", "params": "{\"__current_case__\": 0, \"settingsType\": \"default\"}", "singlePaired": "{\"__current_case__\": 0, \"input_singles\": {\"values\": [{\"id\": 48, \"src\": \"hda\"}]}, \"sPaired\": \"single\", \"three_prime_clip_R1\": \"\", \"trimming\": {\"__current_case__\": 1, \"trimming_select\": \"--illumina\"}}"}, "inputs": {"singlePaired|input_singles": {"id": "875df19ffd9570b1", "src": "hda", "uuid": "eb6f26b4-85b1-450b-a209-411448726405"}}, "outputs": {"trimmed_reads_single": {"id": "4c578dee554cc2a4", "src": "hda", "uuid": "08f6e539-d4c2-4b0e-aa73-11be30c636fa"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/44/working/\nWriting report to '/galaxy/server/database/jobs_directory/000/44/working/input_1.fastq.gz_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq.gz\nTrimming mode: single-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; user defined)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length before a sequence gets removed: 20 bp\nOutput file(s) will be GZIP compressed\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq.gz\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file input_1.fastq.gz <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC input_1.fastq.gz\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.01 s (7202 us/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       2\nReads with adapters:                         1 (50.0%)\nReads written (passing filters):             2 (100.0%)\n\nTotal basepairs processed:           188 bp\nQuality-trimmed:                      20 bp (10.6%)\nTotal written (filtered):            167 bp (88.8%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 100.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t1\t0.5\t0\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq.gz\n=============================================\n2 sequences processed in total\nSequences removed because they became shorter than the length cutoff of 20 bp:\t0 (0.0%)\n\n", "job_stdout": "", "job_stderr": "", "stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/44/working/\nWriting report to '/galaxy/server/database/jobs_directory/000/44/working/input_1.fastq.gz_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq.gz\nTrimming mode: single-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; user defined)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length before a sequence gets removed: 20 bp\nOutput file(s) will be GZIP compressed\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq.gz\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file input_1.fastq.gz <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC input_1.fastq.gz\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.01 s (7202 us/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       2\nReads with adapters:                         1 (50.0%)\nReads written (passing filters):             2 (100.0%)\n\nTotal basepairs processed:           188 bp\nQuality-trimmed:                      20 bp (10.6%)\nTotal written (filtered):            167 bp (88.8%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 100.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t1\t0.5\t0\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq.gz\n=============================================\n2 sequences processed in total\nSequences removed because they became shorter than the length cutoff of 20 bp:\t0 (0.0%)\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:34:58", "plugin": "core", "name": "end_epoch", "raw_value": "1708670098.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:34:58", "plugin": "core", "name": "start_epoch", "raw_value": "1708670098.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "5", "plugin": "core", "name": "galaxy_slots", "raw_value": "5.0000000"}]}, "status": "success"}}, {"id": "trim_galore/0.6.3-4", "has_data": true, "data": {"tool_id": "trim_galore", "tool_version": "0.6.3", "test_index": 4, "time_seconds": 25.391105890274048, "inputs": {"singlePaired|input_singles": {"src": "hda", "id": "791e2978654bf7ab"}, "singlePaired|sPaired": "single"}, "job": {"model_class": "Job", "id": "29466a62f8d6282b", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:35:31.475792", "create_time": "2024-02-23T06:35:20.826612", "galaxy_version": "23.1", "command_version": "Quality-/Adapter-/RRBS-/Speciality-Trimming\n                                [powered by Cutadapt]\n                                  version 0.6.3\n\n                               Last update: 21 03 2019", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/trim_galore/trim_galore/0.6.3", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-bfzpp", "command_line": "ln -s '/galaxy/server/database/objects/d/b/0/dataset_db0b60b5-6491-4145-9e44-cf25176c10ef.dat' input_1.fastq &&  trim_galore  --phred33    --output_dir ./      input_1.fastq  --dont_gzip  && if [ -f input_1_trimmed.fq.gz ] ; then mv input_1_trimmed.fq.gz input_1_trimmed.fq ; fi && if [ -f input_1_val_1.fq.gz ] ; then mv input_1_val_1.fq.gz input_1_val_1.fq ; fi && if [ -f input_2_val_2.fq.gz ] ; then mv input_2_val_2.fq.gz input_2_val_2.fq ; fi && if [ -f input_1_unpaired_1.fq.gz ] ; then mv input_1_unpaired_1.fq.gz input_1_unpaired_1.fq ; fi && if [ -f input_2_unpaired_2.fq.gz ] ; then mv input_2_unpaired_2.fq.gz input_2_unpaired_2.fq ; fi", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rrbs": "{\"__current_case__\": 0, \"settingsType\": \"default\"}", "params": "{\"__current_case__\": 0, \"settingsType\": \"default\"}", "singlePaired": "{\"__current_case__\": 0, \"input_singles\": {\"values\": [{\"id\": 50, \"src\": \"hda\"}]}, \"sPaired\": \"single\", \"three_prime_clip_R1\": \"\", \"trimming\": {\"__current_case__\": 0, \"trimming_select\": \"\"}}"}, "inputs": {"singlePaired|input_singles": {"id": "791e2978654bf7ab", "src": "hda", "uuid": "db0b60b5-6491-4145-9e44-cf25176c10ef"}}, "outputs": {"trimmed_reads_single": {"id": "62f5368230d043a9", "src": "hda", "uuid": "1df95075-edb6-4dd0-951c-83fe2f67824f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/46/working/\n\n\nAUTO-DETECTING ADAPTER TYPE\n===========================\nAttempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq <<)\n\nFound perfect matches for the following adapter sequences:\nAdapter type\tCount\tSequence\tSequences analysed\tPercentage\nsmallRNA\t0\tTGGAATTCTCGG\t2\t0.00\nNextera\t0\tCTGTCTCTTATA\t2\t0.00\nIllumina\t0\tAGATCGGAAGAGC\t2\t0.00\nUnable to auto-detect most prominent adapter from the first specified file (count smallRNA: 0, count Nextera: 0)\nDefaulting to Illumina universal adapter ( AGATCGGAAGAGC ). Specify -a SEQUENCE to avoid this behavior).\n\nWriting report to '/galaxy/server/database/jobs_directory/000/46/working/input_1.fastq_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq\nTrimming mode: single-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; default (inconclusive auto-detection))\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length before a sequence gets removed: 20 bp\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file input_1.fastq <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC input_1.fastq\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.00 s (1825 us/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       2\nReads with adapters:                         1 (50.0%)\nReads written (passing filters):             2 (100.0%)\n\nTotal basepairs processed:           188 bp\nQuality-trimmed:                      20 bp (10.6%)\nTotal written (filtered):            167 bp (88.8%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 100.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t1\t0.5\t0\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq\n=============================================\n2 sequences processed in total\nSequences removed because they became shorter than the length cutoff of 20 bp:\t0 (0.0%)\n\n", "job_stdout": "", "job_stderr": "", "stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/46/working/\n\n\nAUTO-DETECTING ADAPTER TYPE\n===========================\nAttempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq <<)\n\nFound perfect matches for the following adapter sequences:\nAdapter type\tCount\tSequence\tSequences analysed\tPercentage\nsmallRNA\t0\tTGGAATTCTCGG\t2\t0.00\nNextera\t0\tCTGTCTCTTATA\t2\t0.00\nIllumina\t0\tAGATCGGAAGAGC\t2\t0.00\nUnable to auto-detect most prominent adapter from the first specified file (count smallRNA: 0, count Nextera: 0)\nDefaulting to Illumina universal adapter ( AGATCGGAAGAGC ). Specify -a SEQUENCE to avoid this behavior).\n\nWriting report to '/galaxy/server/database/jobs_directory/000/46/working/input_1.fastq_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq\nTrimming mode: single-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; default (inconclusive auto-detection))\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length before a sequence gets removed: 20 bp\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file input_1.fastq <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC input_1.fastq\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.00 s (1825 us/read; 0.03 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       2\nReads with adapters:                         1 (50.0%)\nReads written (passing filters):             2 (100.0%)\n\nTotal basepairs processed:           188 bp\nQuality-trimmed:                      20 bp (10.6%)\nTotal written (filtered):            167 bp (88.8%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 100.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t1\t0.5\t0\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq\n=============================================\n2 sequences processed in total\nSequences removed because they became shorter than the length cutoff of 20 bp:\t0 (0.0%)\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2024-02-23 06:35:23", "plugin": "core", "name": "end_epoch", "raw_value": "1708670123.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:35:22", "plugin": "core", "name": "start_epoch", "raw_value": "1708670122.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "5", "plugin": "core", "name": "galaxy_slots", "raw_value": "5.0000000"}]}, "status": "success"}}, {"id": "trim_galore/0.6.3-5", "has_data": true, "data": {"tool_id": "trim_galore", "tool_version": "0.6.3", "test_index": 5, "time_seconds": 24.373575687408447, "inputs": {"singlePaired|input_singles": {"src": "hda", "id": "12f2ee8b994c193c"}, "singlePaired|sPaired": "single"}, "job": {"model_class": "Job", "id": "875df19ffd9570b1", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:35:56.035339", "create_time": "2024-02-23T06:35:46.326454", "galaxy_version": "23.1", "command_version": "Quality-/Adapter-/RRBS-/Speciality-Trimming\n                                [powered by Cutadapt]\n                                  version 0.6.3\n\n                               Last update: 21 03 2019", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/trim_galore/trim_galore/0.6.3", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-kgh4m", "command_line": "ln -s '/galaxy/server/database/objects/7/d/2/dataset_7d20503e-2531-44f3-8446-3303cdc0503e.dat' input_1.fastq.gz &&  trim_galore  --phred33    --output_dir ./      input_1.fastq.gz   && if [ -f input_1_trimmed.fq.gz ] ; then mv input_1_trimmed.fq.gz input_1_trimmed.fq ; fi && if [ -f input_1_val_1.fq.gz ] ; then mv input_1_val_1.fq.gz input_1_val_1.fq ; fi && if [ -f input_2_val_2.fq.gz ] ; then mv input_2_val_2.fq.gz input_2_val_2.fq ; fi && if [ -f input_1_unpaired_1.fq.gz ] ; then mv input_1_unpaired_1.fq.gz input_1_unpaired_1.fq ; fi && if [ -f input_2_unpaired_2.fq.gz ] ; then mv input_2_unpaired_2.fq.gz input_2_unpaired_2.fq ; fi", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rrbs": "{\"__current_case__\": 0, \"settingsType\": \"default\"}", "params": "{\"__current_case__\": 0, \"settingsType\": \"default\"}", "singlePaired": "{\"__current_case__\": 0, \"input_singles\": {\"values\": [{\"id\": 52, \"src\": \"hda\"}]}, \"sPaired\": \"single\", \"three_prime_clip_R1\": \"\", \"trimming\": {\"__current_case__\": 0, \"trimming_select\": \"\"}}"}, "inputs": {"singlePaired|input_singles": {"id": "12f2ee8b994c193c", "src": "hda", "uuid": "7d20503e-2531-44f3-8446-3303cdc0503e"}}, "outputs": {"trimmed_reads_single": {"id": "421213a1fd2a717b", "src": "hda", "uuid": "a0978a25-3c86-4430-9117-eec3b1742d28"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/48/working/\n\n\nAUTO-DETECTING ADAPTER TYPE\n===========================\nAttempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq.gz <<)\n\nFound perfect matches for the following adapter sequences:\nAdapter type\tCount\tSequence\tSequences analysed\tPercentage\nNextera\t0\tCTGTCTCTTATA\t2\t0.00\nIllumina\t0\tAGATCGGAAGAGC\t2\t0.00\nsmallRNA\t0\tTGGAATTCTCGG\t2\t0.00\nUnable to auto-detect most prominent adapter from the first specified file (count Nextera: 0, count Illumina: 0)\nDefaulting to Illumina universal adapter ( AGATCGGAAGAGC ). Specify -a SEQUENCE to avoid this behavior).\n\nWriting report to '/galaxy/server/database/jobs_directory/000/48/working/input_1.fastq.gz_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq.gz\nTrimming mode: single-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; default (inconclusive auto-detection))\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length before a sequence gets removed: 20 bp\nOutput file(s) will be GZIP compressed\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq.gz\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file input_1.fastq.gz <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC input_1.fastq.gz\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.02 s (7512 us/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       2\nReads with adapters:                         1 (50.0%)\nReads written (passing filters):             2 (100.0%)\n\nTotal basepairs processed:           188 bp\nQuality-trimmed:                      20 bp (10.6%)\nTotal written (filtered):            167 bp (88.8%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 100.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t1\t0.5\t0\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq.gz\n=============================================\n2 sequences processed in total\nSequences removed because they became shorter than the length cutoff of 20 bp:\t0 (0.0%)\n\n", "job_stdout": "", "job_stderr": "", "stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/48/working/\n\n\nAUTO-DETECTING ADAPTER TYPE\n===========================\nAttempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq.gz <<)\n\nFound perfect matches for the following adapter sequences:\nAdapter type\tCount\tSequence\tSequences analysed\tPercentage\nNextera\t0\tCTGTCTCTTATA\t2\t0.00\nIllumina\t0\tAGATCGGAAGAGC\t2\t0.00\nsmallRNA\t0\tTGGAATTCTCGG\t2\t0.00\nUnable to auto-detect most prominent adapter from the first specified file (count Nextera: 0, count Illumina: 0)\nDefaulting to Illumina universal adapter ( AGATCGGAAGAGC ). Specify -a SEQUENCE to avoid this behavior).\n\nWriting report to '/galaxy/server/database/jobs_directory/000/48/working/input_1.fastq.gz_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq.gz\nTrimming mode: single-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'AGATCGGAAGAGC' (Illumina TruSeq, Sanger iPCR; default (inconclusive auto-detection))\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length before a sequence gets removed: 20 bp\nOutput file(s) will be GZIP compressed\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq.gz\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'AGATCGGAAGAGC' from file input_1.fastq.gz <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a AGATCGGAAGAGC input_1.fastq.gz\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.02 s (7512 us/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       2\nReads with adapters:                         1 (50.0%)\nReads written (passing filters):             2 (100.0%)\n\nTotal basepairs processed:           188 bp\nQuality-trimmed:                      20 bp (10.6%)\nTotal written (filtered):            167 bp (88.8%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-13 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 100.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t1\t0.5\t0\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq.gz\n=============================================\n2 sequences processed in total\nSequences removed because they became shorter than the length cutoff of 20 bp:\t0 (0.0%)\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:35:47", "plugin": "core", "name": "end_epoch", "raw_value": "1708670147.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:35:47", "plugin": "core", "name": "start_epoch", "raw_value": "1708670147.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "5", "plugin": "core", "name": "galaxy_slots", "raw_value": "5.0000000"}]}, "status": "success"}}, {"id": "trim_galore/0.6.3-6", "has_data": true, "data": {"tool_id": "trim_galore", "tool_version": "0.6.3", "test_index": 6, "time_seconds": 25.44188952445984, "inputs": {"singlePaired|input_mate1": {"src": "hda", "id": "62911fcfcd33c4dd"}, "singlePaired|input_mate2": {"src": "hda", "id": "24800dc952613def"}, "singlePaired|sPaired": "paired", "params|report": true, "params|settingsType": "custom"}, "job": {"model_class": "Job", "id": "62f5368230d043a9", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:36:20.534178", "create_time": "2024-02-23T06:36:11.038500", "galaxy_version": "23.1", "command_version": "Quality-/Adapter-/RRBS-/Speciality-Trimming\n                                [powered by Cutadapt]\n                                  version 0.6.3\n\n                               Last update: 21 03 2019", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/trim_galore/trim_galore/0.6.3", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-5dts4", "command_line": "ln -s '/galaxy/server/database/objects/4/4/0/dataset_440595a9-8d47-48db-9c78-13a422feaffb.dat' input_1.fastq &&  ln -s '/galaxy/server/database/objects/b/8/e/dataset_b8e69649-f4e9-4006-beaf-25bb6ceb0c3b.dat' input_2.fastq &&  trim_galore  --phred33   --quality 20  --stringency 1  -e 0.1  --length 20       --output_dir ./      --paired      input_1.fastq input_2.fastq  --dont_gzip  && if [ -f input_1_trimmed.fq.gz ] ; then mv input_1_trimmed.fq.gz input_1_trimmed.fq ; fi && if [ -f input_1_val_1.fq.gz ] ; then mv input_1_val_1.fq.gz input_1_val_1.fq ; fi && if [ -f input_2_val_2.fq.gz ] ; then mv input_2_val_2.fq.gz input_2_val_2.fq ; fi && if [ -f input_1_unpaired_1.fq.gz ] ; then mv input_1_unpaired_1.fq.gz input_1_unpaired_1.fq ; fi && if [ -f input_2_unpaired_2.fq.gz ] ; then mv input_2_unpaired_2.fq.gz input_2_unpaired_2.fq ; fi  && cat ./*_trimming_report.txt > '/galaxy/server/database/objects/2/0/5/dataset_2056eccd-3822-463c-9fec-e0a57e6d4a92.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rrbs": "{\"__current_case__\": 0, \"settingsType\": \"default\"}", "params": "{\"__current_case__\": 1, \"clip_R1\": \"\", \"clip_R2\": \"\", \"error_rate\": \"0.1\", \"min_length\": \"20\", \"quality\": \"20\", \"report\": true, \"retain_unpaired\": {\"__current_case__\": 0, \"retain_unpaired_select\": \"no_output\"}, \"settingsType\": \"custom\", \"stringency\": \"1\"}", "singlePaired": "{\"__current_case__\": 1, \"input_mate1\": {\"values\": [{\"id\": 54, \"src\": \"hda\"}]}, \"input_mate2\": {\"values\": [{\"id\": 55, \"src\": \"hda\"}]}, \"sPaired\": \"paired\", \"three_prime_clip_R1\": \"\", \"three_prime_clip_R2\": \"\", \"trim1\": false, \"trimming\": {\"__current_case__\": 0, \"trimming_select\": \"\"}}"}, "inputs": {"singlePaired|input_mate1": {"id": "62911fcfcd33c4dd", "src": "hda", "uuid": "440595a9-8d47-48db-9c78-13a422feaffb"}, "singlePaired|input_mate2": {"id": "24800dc952613def", "src": "hda", "uuid": "b8e69649-f4e9-4006-beaf-25bb6ceb0c3b"}}, "outputs": {"trimmed_reads_pair2": {"id": "94d2a017f0397c90", "src": "hda", "uuid": "eb0c3930-9c25-4bb3-ab6a-905f8f7ddd64"}, "report_file": {"id": "ff5779eaf81fac68", "src": "hda", "uuid": "2056eccd-3822-463c-9fec-e0a57e6d4a92"}, "trimmed_reads_pair1": {"id": "2276a866d709d133", "src": "hda", "uuid": "0b1d2f1d-9b20-426b-8ddd-8fd861630ee1"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/51/working/\n\n\nAUTO-DETECTING ADAPTER TYPE\n===========================\nAttempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq <<)\n\nFound perfect matches for the following adapter sequences:\nAdapter type\tCount\tSequence\tSequences analysed\tPercentage\nNextera\t29\tCTGTCTCTTATA\t99\t29.29\nsmallRNA\t0\tTGGAATTCTCGG\t99\t0.00\nIllumina\t0\tAGATCGGAAGAGC\t99\t0.00\nUsing Nextera adapter for trimming (count: 29). Second best hit was smallRNA (count: 0)\n\nWriting report to '/galaxy/server/database/jobs_directory/000/51/working/input_1.fastq_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq\nTrimming mode: paired-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length for both reads before a sequence pair gets removed: 20 bp\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_1.fastq <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_1.fastq\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.00 s (47 us/read; 1.28 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                        52 (52.5%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     205 bp (0.8%)\nTotal written (filtered):         23,339 bp (93.9%)\n\n=== Adapter 1 ===\n\nSequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 52 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 9.6%\n  C: 38.5%\n  G: 23.1%\n  T: 28.8%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t11\t24.8\t0\t11\n2\t5\t6.2\t0\t5\n3\t3\t1.5\t0\t3\n4\t3\t0.4\t0\t3\n12\t1\t0.0\t1\t1\n13\t2\t0.0\t1\t2\n14\t1\t0.0\t1\t1\n16\t1\t0.0\t1\t1\n17\t1\t0.0\t1\t0 1\n20\t2\t0.0\t1\t2\n21\t1\t0.0\t1\t1\n24\t1\t0.0\t1\t1\n26\t2\t0.0\t1\t2\n31\t1\t0.0\t1\t1\n33\t1\t0.0\t1\t1\n41\t2\t0.0\t1\t2\n49\t1\t0.0\t1\t1\n50\t1\t0.0\t1\t1\n54\t1\t0.0\t1\t1\n56\t1\t0.0\t1\t1\n58\t2\t0.0\t1\t2\n60\t1\t0.0\t1\t1\n67\t2\t0.0\t1\t2\n68\t1\t0.0\t1\t1\n69\t1\t0.0\t1\t1\n73\t1\t0.0\t1\t1\n80\t1\t0.0\t1\t1\n86\t1\t0.0\t1\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq\n=============================================\n99 sequences processed in total\nThe length threshold of paired-end sequences gets evaluated later on (in the validation step)\n\nWriting report to '/galaxy/server/database/jobs_directory/000/51/working/input_2.fastq_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_2.fastq\nTrimming mode: paired-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length for both reads before a sequence pair gets removed: 20 bp\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j -j 1\nWriting final adapter and quality trimmed output to input_2_trimmed.fq\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_2.fastq <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_2.fastq\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.01 s (63 us/read; 0.95 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                        58 (58.6%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     745 bp (3.0%)\nTotal written (filtered):         23,035 bp (92.7%)\n\n=== Adapter 1 ===\n\nSequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 58 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 12.1%\n  C: 37.9%\n  G: 8.6%\n  T: 41.4%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t16\t24.8\t0\t16\n2\t7\t6.2\t0\t7\n3\t1\t1.5\t0\t1\n4\t2\t0.4\t0\t2\n6\t2\t0.0\t0\t2\n9\t1\t0.0\t0\t1\n10\t1\t0.0\t1\t1\n13\t1\t0.0\t1\t1\n14\t2\t0.0\t1\t2\n15\t1\t0.0\t1\t1\n16\t1\t0.0\t1\t1\n17\t1\t0.0\t1\t1\n19\t2\t0.0\t1\t2\n21\t1\t0.0\t1\t1\n25\t1\t0.0\t1\t1\n30\t1\t0.0\t1\t1\n32\t2\t0.0\t1\t2\n34\t1\t0.0\t1\t1\n36\t2\t0.0\t1\t2\n38\t1\t0.0\t1\t1\n40\t1\t0.0\t1\t1\n41\t1\t0.0\t1\t1\n42\t1\t0.0\t1\t1\n43\t1\t0.0\t1\t1\n49\t1\t0.0\t1\t1\n51\t1\t0.0\t1\t1\n56\t1\t0.0\t1\t1\n57\t1\t0.0\t1\t1\n60\t1\t0.0\t1\t1\n67\t1\t0.0\t1\t1\n80\t1\t0.0\t1\t1\n\nRUN STATISTICS FOR INPUT FILE: input_2.fastq\n=============================================\n99 sequences processed in total\nThe length threshold of paired-end sequences gets evaluated later on (in the validation step)\n\nValidate paired-end files input_1_trimmed.fq and input_2_trimmed.fq\nfile_1: input_1_trimmed.fq, file_2: input_2_trimmed.fq\n\n\n>>>>> Now validing the length of the 2 paired-end infiles: input_1_trimmed.fq and input_2_trimmed.fq <<<<<\nWriting validated paired-end read 1 reads to input_1_val_1.fq\nWriting validated paired-end read 2 reads to input_2_val_2.fq\n\nTotal number of sequences analysed: 99\n\nNumber of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 1 (1.01%)\n\nDeleting both intermediate output files input_1_trimmed.fq and input_2_trimmed.fq\n\n====================================================================================================\n\n", "job_stdout": "", "job_stderr": "", "stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/51/working/\n\n\nAUTO-DETECTING ADAPTER TYPE\n===========================\nAttempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq <<)\n\nFound perfect matches for the following adapter sequences:\nAdapter type\tCount\tSequence\tSequences analysed\tPercentage\nNextera\t29\tCTGTCTCTTATA\t99\t29.29\nsmallRNA\t0\tTGGAATTCTCGG\t99\t0.00\nIllumina\t0\tAGATCGGAAGAGC\t99\t0.00\nUsing Nextera adapter for trimming (count: 29). Second best hit was smallRNA (count: 0)\n\nWriting report to '/galaxy/server/database/jobs_directory/000/51/working/input_1.fastq_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq\nTrimming mode: paired-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length for both reads before a sequence pair gets removed: 20 bp\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_1.fastq <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_1.fastq\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.00 s (47 us/read; 1.28 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                        52 (52.5%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     205 bp (0.8%)\nTotal written (filtered):         23,339 bp (93.9%)\n\n=== Adapter 1 ===\n\nSequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 52 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 9.6%\n  C: 38.5%\n  G: 23.1%\n  T: 28.8%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t11\t24.8\t0\t11\n2\t5\t6.2\t0\t5\n3\t3\t1.5\t0\t3\n4\t3\t0.4\t0\t3\n12\t1\t0.0\t1\t1\n13\t2\t0.0\t1\t2\n14\t1\t0.0\t1\t1\n16\t1\t0.0\t1\t1\n17\t1\t0.0\t1\t0 1\n20\t2\t0.0\t1\t2\n21\t1\t0.0\t1\t1\n24\t1\t0.0\t1\t1\n26\t2\t0.0\t1\t2\n31\t1\t0.0\t1\t1\n33\t1\t0.0\t1\t1\n41\t2\t0.0\t1\t2\n49\t1\t0.0\t1\t1\n50\t1\t0.0\t1\t1\n54\t1\t0.0\t1\t1\n56\t1\t0.0\t1\t1\n58\t2\t0.0\t1\t2\n60\t1\t0.0\t1\t1\n67\t2\t0.0\t1\t2\n68\t1\t0.0\t1\t1\n69\t1\t0.0\t1\t1\n73\t1\t0.0\t1\t1\n80\t1\t0.0\t1\t1\n86\t1\t0.0\t1\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq\n=============================================\n99 sequences processed in total\nThe length threshold of paired-end sequences gets evaluated later on (in the validation step)\n\nWriting report to '/galaxy/server/database/jobs_directory/000/51/working/input_2.fastq_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_2.fastq\nTrimming mode: paired-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length for both reads before a sequence pair gets removed: 20 bp\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j -j 1\nWriting final adapter and quality trimmed output to input_2_trimmed.fq\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_2.fastq <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_2.fastq\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.01 s (63 us/read; 0.95 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                        58 (58.6%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     745 bp (3.0%)\nTotal written (filtered):         23,035 bp (92.7%)\n\n=== Adapter 1 ===\n\nSequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 58 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 12.1%\n  C: 37.9%\n  G: 8.6%\n  T: 41.4%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t16\t24.8\t0\t16\n2\t7\t6.2\t0\t7\n3\t1\t1.5\t0\t1\n4\t2\t0.4\t0\t2\n6\t2\t0.0\t0\t2\n9\t1\t0.0\t0\t1\n10\t1\t0.0\t1\t1\n13\t1\t0.0\t1\t1\n14\t2\t0.0\t1\t2\n15\t1\t0.0\t1\t1\n16\t1\t0.0\t1\t1\n17\t1\t0.0\t1\t1\n19\t2\t0.0\t1\t2\n21\t1\t0.0\t1\t1\n25\t1\t0.0\t1\t1\n30\t1\t0.0\t1\t1\n32\t2\t0.0\t1\t2\n34\t1\t0.0\t1\t1\n36\t2\t0.0\t1\t2\n38\t1\t0.0\t1\t1\n40\t1\t0.0\t1\t1\n41\t1\t0.0\t1\t1\n42\t1\t0.0\t1\t1\n43\t1\t0.0\t1\t1\n49\t1\t0.0\t1\t1\n51\t1\t0.0\t1\t1\n56\t1\t0.0\t1\t1\n57\t1\t0.0\t1\t1\n60\t1\t0.0\t1\t1\n67\t1\t0.0\t1\t1\n80\t1\t0.0\t1\t1\n\nRUN STATISTICS FOR INPUT FILE: input_2.fastq\n=============================================\n99 sequences processed in total\nThe length threshold of paired-end sequences gets evaluated later on (in the validation step)\n\nValidate paired-end files input_1_trimmed.fq and input_2_trimmed.fq\nfile_1: input_1_trimmed.fq, file_2: input_2_trimmed.fq\n\n\n>>>>> Now validing the length of the 2 paired-end infiles: input_1_trimmed.fq and input_2_trimmed.fq <<<<<\nWriting validated paired-end read 1 reads to input_1_val_1.fq\nWriting validated paired-end read 2 reads to input_2_val_2.fq\n\nTotal number of sequences analysed: 99\n\nNumber of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 1 (1.01%)\n\nDeleting both intermediate output files input_1_trimmed.fq and input_2_trimmed.fq\n\n====================================================================================================\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:36:12", "plugin": "core", "name": "end_epoch", "raw_value": "1708670172.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:36:12", "plugin": "core", "name": "start_epoch", "raw_value": "1708670172.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "5", "plugin": "core", "name": "galaxy_slots", "raw_value": "5.0000000"}]}, "status": "success"}}, {"id": "trim_galore/0.6.3-7", "has_data": true, "data": {"tool_id": "trim_galore", "tool_version": "0.6.3", "test_index": 7, "time_seconds": 27.60060143470764, "inputs": {"singlePaired|input_mate1": {"src": "hda", "id": "e1845cd64b652a35"}, "singlePaired|input_mate2": {"src": "hda", "id": "be8061d5fe915f36"}, "singlePaired|sPaired": "paired", "params|report": true, "params|settingsType": "custom"}, "job": {"model_class": "Job", "id": "62911fcfcd33c4dd", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:36:47.919132", "create_time": "2024-02-23T06:36:37.475485", "galaxy_version": "23.1", "command_version": "Quality-/Adapter-/RRBS-/Speciality-Trimming\n                                [powered by Cutadapt]\n                                  version 0.6.3\n\n                               Last update: 21 03 2019", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/trim_galore/trim_galore/0.6.3", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-lv9cm", "command_line": "ln -s '/galaxy/server/database/objects/7/f/4/dataset_7f452c0a-0c98-410a-a093-d45cb08fc26f.dat' input_1.fastq.gz &&  ln -s '/galaxy/server/database/objects/6/7/7/dataset_6776b03f-ff56-4ad2-806f-404bdc4dbfa7.dat' input_2.fastq.gz &&  trim_galore  --phred33   --quality 20  --stringency 1  -e 0.1  --length 20       --output_dir ./      --paired      input_1.fastq.gz input_2.fastq.gz   && if [ -f input_1_trimmed.fq.gz ] ; then mv input_1_trimmed.fq.gz input_1_trimmed.fq ; fi && if [ -f input_1_val_1.fq.gz ] ; then mv input_1_val_1.fq.gz input_1_val_1.fq ; fi && if [ -f input_2_val_2.fq.gz ] ; then mv input_2_val_2.fq.gz input_2_val_2.fq ; fi && if [ -f input_1_unpaired_1.fq.gz ] ; then mv input_1_unpaired_1.fq.gz input_1_unpaired_1.fq ; fi && if [ -f input_2_unpaired_2.fq.gz ] ; then mv input_2_unpaired_2.fq.gz input_2_unpaired_2.fq ; fi  && cat ./*_trimming_report.txt > '/galaxy/server/database/objects/7/c/1/dataset_7c154d3c-897f-4553-8c8a-4a87c30c92a7.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rrbs": "{\"__current_case__\": 0, \"settingsType\": \"default\"}", "params": "{\"__current_case__\": 1, \"clip_R1\": \"\", \"clip_R2\": \"\", \"error_rate\": \"0.1\", \"min_length\": \"20\", \"quality\": \"20\", \"report\": true, \"retain_unpaired\": {\"__current_case__\": 0, \"retain_unpaired_select\": \"no_output\"}, \"settingsType\": \"custom\", \"stringency\": \"1\"}", "singlePaired": "{\"__current_case__\": 1, \"input_mate1\": {\"values\": [{\"id\": 59, \"src\": \"hda\"}]}, \"input_mate2\": {\"values\": [{\"id\": 60, \"src\": \"hda\"}]}, \"sPaired\": \"paired\", \"three_prime_clip_R1\": \"\", \"three_prime_clip_R2\": \"\", \"trim1\": false, \"trimming\": {\"__current_case__\": 0, \"trimming_select\": \"\"}}"}, "inputs": {"singlePaired|input_mate1": {"id": "e1845cd64b652a35", "src": "hda", "uuid": "7f452c0a-0c98-410a-a093-d45cb08fc26f"}, "singlePaired|input_mate2": {"id": "be8061d5fe915f36", "src": "hda", "uuid": "6776b03f-ff56-4ad2-806f-404bdc4dbfa7"}}, "outputs": {"trimmed_reads_pair1": {"id": "44865016ea4ef694", "src": "hda", "uuid": "90379765-8867-47c0-a805-04453c0a9dd8"}, "trimmed_reads_pair2": {"id": "e402b12e9f73d138", "src": "hda", "uuid": "4f18fa1a-dc30-491b-9bf2-ad63ff2f23b8"}, "report_file": {"id": "76b34f704ecb670f", "src": "hda", "uuid": "7c154d3c-897f-4553-8c8a-4a87c30c92a7"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/54/working/\n\n\nAUTO-DETECTING ADAPTER TYPE\n===========================\nAttempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq.gz <<)\n\nFound perfect matches for the following adapter sequences:\nAdapter type\tCount\tSequence\tSequences analysed\tPercentage\nNextera\t29\tCTGTCTCTTATA\t99\t29.29\nsmallRNA\t0\tTGGAATTCTCGG\t99\t0.00\nIllumina\t0\tAGATCGGAAGAGC\t99\t0.00\nUsing Nextera adapter for trimming (count: 29). Second best hit was smallRNA (count: 0)\n\nWriting report to '/galaxy/server/database/jobs_directory/000/54/working/input_1.fastq.gz_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq.gz\nTrimming mode: paired-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length for both reads before a sequence pair gets removed: 20 bp\nOutput file(s) will be GZIP compressed\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq.gz\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_1.fastq.gz <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_1.fastq.gz\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.02 s (161 us/read; 0.37 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                        52 (52.5%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     205 bp (0.8%)\nTotal written (filtered):         23,339 bp (93.9%)\n\n=== Adapter 1 ===\n\nSequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 52 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 9.6%\n  C: 38.5%\n  G: 23.1%\n  T: 28.8%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t11\t24.8\t0\t11\n2\t5\t6.2\t0\t5\n3\t3\t1.5\t0\t3\n4\t3\t0.4\t0\t3\n12\t1\t0.0\t1\t1\n13\t2\t0.0\t1\t2\n14\t1\t0.0\t1\t1\n16\t1\t0.0\t1\t1\n17\t1\t0.0\t1\t0 1\n20\t2\t0.0\t1\t2\n21\t1\t0.0\t1\t1\n24\t1\t0.0\t1\t1\n26\t2\t0.0\t1\t2\n31\t1\t0.0\t1\t1\n33\t1\t0.0\t1\t1\n41\t2\t0.0\t1\t2\n49\t1\t0.0\t1\t1\n50\t1\t0.0\t1\t1\n54\t1\t0.0\t1\t1\n56\t1\t0.0\t1\t1\n58\t2\t0.0\t1\t2\n60\t1\t0.0\t1\t1\n67\t2\t0.0\t1\t2\n68\t1\t0.0\t1\t1\n69\t1\t0.0\t1\t1\n73\t1\t0.0\t1\t1\n80\t1\t0.0\t1\t1\n86\t1\t0.0\t1\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq.gz\n=============================================\n99 sequences processed in total\nThe length threshold of paired-end sequences gets evaluated later on (in the validation step)\n\nWriting report to '/galaxy/server/database/jobs_directory/000/54/working/input_2.fastq.gz_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_2.fastq.gz\nTrimming mode: paired-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length for both reads before a sequence pair gets removed: 20 bp\nOutput file(s) will be GZIP compressed\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j -j 1\nWriting final adapter and quality trimmed output to input_2_trimmed.fq.gz\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_2.fastq.gz <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_2.fastq.gz\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.02 s (163 us/read; 0.37 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                        58 (58.6%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     745 bp (3.0%)\nTotal written (filtered):         23,035 bp (92.7%)\n\n=== Adapter 1 ===\n\nSequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 58 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 12.1%\n  C: 37.9%\n  G: 8.6%\n  T: 41.4%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t16\t24.8\t0\t16\n2\t7\t6.2\t0\t7\n3\t1\t1.5\t0\t1\n4\t2\t0.4\t0\t2\n6\t2\t0.0\t0\t2\n9\t1\t0.0\t0\t1\n10\t1\t0.0\t1\t1\n13\t1\t0.0\t1\t1\n14\t2\t0.0\t1\t2\n15\t1\t0.0\t1\t1\n16\t1\t0.0\t1\t1\n17\t1\t0.0\t1\t1\n19\t2\t0.0\t1\t2\n21\t1\t0.0\t1\t1\n25\t1\t0.0\t1\t1\n30\t1\t0.0\t1\t1\n32\t2\t0.0\t1\t2\n34\t1\t0.0\t1\t1\n36\t2\t0.0\t1\t2\n38\t1\t0.0\t1\t1\n40\t1\t0.0\t1\t1\n41\t1\t0.0\t1\t1\n42\t1\t0.0\t1\t1\n43\t1\t0.0\t1\t1\n49\t1\t0.0\t1\t1\n51\t1\t0.0\t1\t1\n56\t1\t0.0\t1\t1\n57\t1\t0.0\t1\t1\n60\t1\t0.0\t1\t1\n67\t1\t0.0\t1\t1\n80\t1\t0.0\t1\t1\n\nRUN STATISTICS FOR INPUT FILE: input_2.fastq.gz\n=============================================\n99 sequences processed in total\nThe length threshold of paired-end sequences gets evaluated later on (in the validation step)\n\nValidate paired-end files input_1_trimmed.fq.gz and input_2_trimmed.fq.gz\nfile_1: input_1_trimmed.fq.gz, file_2: input_2_trimmed.fq.gz\n\n\n>>>>> Now validing the length of the 2 paired-end infiles: input_1_trimmed.fq.gz and input_2_trimmed.fq.gz <<<<<\nWriting validated paired-end read 1 reads to input_1_val_1.fq.gz\nWriting validated paired-end read 2 reads to input_2_val_2.fq.gz\n\nTotal number of sequences analysed: 99\n\nNumber of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 1 (1.01%)\n\nDeleting both intermediate output files input_1_trimmed.fq.gz and input_2_trimmed.fq.gz\n\n====================================================================================================\n\n", "job_stdout": "", "job_stderr": "", "stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/54/working/\n\n\nAUTO-DETECTING ADAPTER TYPE\n===========================\nAttempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq.gz <<)\n\nFound perfect matches for the following adapter sequences:\nAdapter type\tCount\tSequence\tSequences analysed\tPercentage\nNextera\t29\tCTGTCTCTTATA\t99\t29.29\nsmallRNA\t0\tTGGAATTCTCGG\t99\t0.00\nIllumina\t0\tAGATCGGAAGAGC\t99\t0.00\nUsing Nextera adapter for trimming (count: 29). Second best hit was smallRNA (count: 0)\n\nWriting report to '/galaxy/server/database/jobs_directory/000/54/working/input_1.fastq.gz_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq.gz\nTrimming mode: paired-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length for both reads before a sequence pair gets removed: 20 bp\nOutput file(s) will be GZIP compressed\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq.gz\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_1.fastq.gz <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_1.fastq.gz\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.02 s (161 us/read; 0.37 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                        52 (52.5%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     205 bp (0.8%)\nTotal written (filtered):         23,339 bp (93.9%)\n\n=== Adapter 1 ===\n\nSequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 52 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 9.6%\n  C: 38.5%\n  G: 23.1%\n  T: 28.8%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t11\t24.8\t0\t11\n2\t5\t6.2\t0\t5\n3\t3\t1.5\t0\t3\n4\t3\t0.4\t0\t3\n12\t1\t0.0\t1\t1\n13\t2\t0.0\t1\t2\n14\t1\t0.0\t1\t1\n16\t1\t0.0\t1\t1\n17\t1\t0.0\t1\t0 1\n20\t2\t0.0\t1\t2\n21\t1\t0.0\t1\t1\n24\t1\t0.0\t1\t1\n26\t2\t0.0\t1\t2\n31\t1\t0.0\t1\t1\n33\t1\t0.0\t1\t1\n41\t2\t0.0\t1\t2\n49\t1\t0.0\t1\t1\n50\t1\t0.0\t1\t1\n54\t1\t0.0\t1\t1\n56\t1\t0.0\t1\t1\n58\t2\t0.0\t1\t2\n60\t1\t0.0\t1\t1\n67\t2\t0.0\t1\t2\n68\t1\t0.0\t1\t1\n69\t1\t0.0\t1\t1\n73\t1\t0.0\t1\t1\n80\t1\t0.0\t1\t1\n86\t1\t0.0\t1\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq.gz\n=============================================\n99 sequences processed in total\nThe length threshold of paired-end sequences gets evaluated later on (in the validation step)\n\nWriting report to '/galaxy/server/database/jobs_directory/000/54/working/input_2.fastq.gz_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_2.fastq.gz\nTrimming mode: paired-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length for both reads before a sequence pair gets removed: 20 bp\nOutput file(s) will be GZIP compressed\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j -j 1\nWriting final adapter and quality trimmed output to input_2_trimmed.fq.gz\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_2.fastq.gz <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_2.fastq.gz\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.02 s (163 us/read; 0.37 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                        58 (58.6%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     745 bp (3.0%)\nTotal written (filtered):         23,035 bp (92.7%)\n\n=== Adapter 1 ===\n\nSequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 58 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 12.1%\n  C: 37.9%\n  G: 8.6%\n  T: 41.4%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t16\t24.8\t0\t16\n2\t7\t6.2\t0\t7\n3\t1\t1.5\t0\t1\n4\t2\t0.4\t0\t2\n6\t2\t0.0\t0\t2\n9\t1\t0.0\t0\t1\n10\t1\t0.0\t1\t1\n13\t1\t0.0\t1\t1\n14\t2\t0.0\t1\t2\n15\t1\t0.0\t1\t1\n16\t1\t0.0\t1\t1\n17\t1\t0.0\t1\t1\n19\t2\t0.0\t1\t2\n21\t1\t0.0\t1\t1\n25\t1\t0.0\t1\t1\n30\t1\t0.0\t1\t1\n32\t2\t0.0\t1\t2\n34\t1\t0.0\t1\t1\n36\t2\t0.0\t1\t2\n38\t1\t0.0\t1\t1\n40\t1\t0.0\t1\t1\n41\t1\t0.0\t1\t1\n42\t1\t0.0\t1\t1\n43\t1\t0.0\t1\t1\n49\t1\t0.0\t1\t1\n51\t1\t0.0\t1\t1\n56\t1\t0.0\t1\t1\n57\t1\t0.0\t1\t1\n60\t1\t0.0\t1\t1\n67\t1\t0.0\t1\t1\n80\t1\t0.0\t1\t1\n\nRUN STATISTICS FOR INPUT FILE: input_2.fastq.gz\n=============================================\n99 sequences processed in total\nThe length threshold of paired-end sequences gets evaluated later on (in the validation step)\n\nValidate paired-end files input_1_trimmed.fq.gz and input_2_trimmed.fq.gz\nfile_1: input_1_trimmed.fq.gz, file_2: input_2_trimmed.fq.gz\n\n\n>>>>> Now validing the length of the 2 paired-end infiles: input_1_trimmed.fq.gz and input_2_trimmed.fq.gz <<<<<\nWriting validated paired-end read 1 reads to input_1_val_1.fq.gz\nWriting validated paired-end read 2 reads to input_2_val_2.fq.gz\n\nTotal number of sequences analysed: 99\n\nNumber of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 1 (1.01%)\n\nDeleting both intermediate output files input_1_trimmed.fq.gz and input_2_trimmed.fq.gz\n\n====================================================================================================\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:36:39", "plugin": "core", "name": "end_epoch", "raw_value": "1708670199.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:36:39", "plugin": "core", "name": "start_epoch", "raw_value": "1708670199.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "5", "plugin": "core", "name": "galaxy_slots", "raw_value": "5.0000000"}]}, "status": "success"}}, {"id": "trim_galore/0.6.3-8", "has_data": true, "data": {"tool_id": "trim_galore", "tool_version": "0.6.3", "test_index": 8, "time_seconds": 27.452757358551025, "inputs": {"singlePaired|input_mate_pairs": {"src": "hdca", "id": "9f8c5b59a2218bae"}, "singlePaired|sPaired": "paired_collection", "params|report": true, "params|retain_unpaired|retain_unpaired_select": "retain_unpaired_output", "params|settingsType": "custom"}, "job": {"model_class": "Job", "id": "94d2a017f0397c90", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:37:15.169697", "create_time": "2024-02-23T06:37:04.303436", "galaxy_version": "23.1", "command_version": "Quality-/Adapter-/RRBS-/Speciality-Trimming\n                                [powered by Cutadapt]\n                                  version 0.6.3\n\n                               Last update: 21 03 2019", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/trim_galore/trim_galore/0.6.3", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-29xtw", "command_line": "ln -s '/galaxy/server/database/objects/8/e/9/dataset_8e910a38-dd6c-4b71-8f0a-f148c1987655.dat' input_1.fastq &&  ln -s '/galaxy/server/database/objects/0/3/4/dataset_034bb363-b90b-4cfb-b4c1-b332819a28f9.dat' input_2.fastq &&  trim_galore  --phred33   --quality 20  --stringency 1  -e 0.1  --length 20    --retain_unpaired --length_1 35 --length_2 35    --output_dir ./      --paired      input_1.fastq input_2.fastq  --dont_gzip  && if [ -f input_1_trimmed.fq.gz ] ; then mv input_1_trimmed.fq.gz input_1_trimmed.fq ; fi && if [ -f input_1_val_1.fq.gz ] ; then mv input_1_val_1.fq.gz input_1_val_1.fq ; fi && if [ -f input_2_val_2.fq.gz ] ; then mv input_2_val_2.fq.gz input_2_val_2.fq ; fi && if [ -f input_1_unpaired_1.fq.gz ] ; then mv input_1_unpaired_1.fq.gz input_1_unpaired_1.fq ; fi && if [ -f input_2_unpaired_2.fq.gz ] ; then mv input_2_unpaired_2.fq.gz input_2_unpaired_2.fq ; fi  && cat ./*_trimming_report.txt > '/galaxy/server/database/objects/c/2/2/dataset_c22e9ebd-d619-4568-9050-8b9b6136cda4.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rrbs": "{\"__current_case__\": 0, \"settingsType\": \"default\"}", "params": "{\"__current_case__\": 1, \"clip_R1\": \"\", \"clip_R2\": \"\", \"error_rate\": \"0.1\", \"min_length\": \"20\", \"quality\": \"20\", \"report\": true, \"retain_unpaired\": {\"__current_case__\": 1, \"length_1\": \"35\", \"length_2\": \"35\", \"retain_unpaired_select\": \"retain_unpaired_output\"}, \"settingsType\": \"custom\", \"stringency\": \"1\"}", "singlePaired": "{\"__current_case__\": 2, \"input_mate_pairs\": {\"values\": [{\"id\": 1, \"src\": \"hdca\"}]}, \"sPaired\": \"paired_collection\", \"three_prime_clip_R1\": \"\", \"three_prime_clip_R2\": \"\", \"trim1\": false, \"trimming\": {\"__current_case__\": 0, \"trimming_select\": \"\"}}"}, "inputs": {"singlePaired|input_mate_pairs1": {"id": "6ccb1786ec824722", "src": "hda", "uuid": "8e910a38-dd6c-4b71-8f0a-f148c1987655"}, "singlePaired|input_mate_pairs2": {"id": "26335b44d5bebe50", "src": "hda", "uuid": "034bb363-b90b-4cfb-b4c1-b332819a28f9"}}, "outputs": {"trimmed_reads_paired_collection|__part__|forward": {"id": "60f1167dc4e77c2c", "src": "hda", "uuid": "30550dd1-7648-4e1d-8bca-eedae04ac441"}, "trimmed_reads_paired_collection|__part__|reverse": {"id": "e0827fd561fd089e", "src": "hda", "uuid": "623addcc-ffc0-4cd9-bb78-197a04a5a548"}, "trimmed_reads_unpaired_collection|__part__|forward": {"id": "4807695e63da28f4", "src": "hda", "uuid": "3a8c1acc-a629-46ea-8aad-90d7b5db09bd"}, "trimmed_reads_unpaired_collection|__part__|reverse": {"id": "55673e859ef69334", "src": "hda", "uuid": "1fc0c420-fb3d-4bfd-9ea1-e2510b108f43"}, "report_file": {"id": "7ec27ac3c1c4cd86", "src": "hda", "uuid": "c22e9ebd-d619-4568-9050-8b9b6136cda4"}}, "output_collections": {"trimmed_reads_unpaired_collection": {"id": "3b0b6ffdfb0372c2", "src": "hdca"}, "trimmed_reads_paired_collection": {"id": "68a5971abc40bb97", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/57/working/\n\n\nAUTO-DETECTING ADAPTER TYPE\n===========================\nAttempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq <<)\n\nFound perfect matches for the following adapter sequences:\nAdapter type\tCount\tSequence\tSequences analysed\tPercentage\nNextera\t29\tCTGTCTCTTATA\t99\t29.29\nsmallRNA\t0\tTGGAATTCTCGG\t99\t0.00\nIllumina\t0\tAGATCGGAAGAGC\t99\t0.00\nUsing Nextera adapter for trimming (count: 29). Second best hit was smallRNA (count: 0)\n\nWriting report to '/galaxy/server/database/jobs_directory/000/57/working/input_1.fastq_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq\nTrimming mode: paired-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length for both reads before a sequence pair gets removed: 20 bp\nLength cut-off for read 1: 35 bp (default)\nLength cut-off for read 2: 35 bb (default)\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_1.fastq <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_1.fastq\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.00 s (41 us/read; 1.48 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                        52 (52.5%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     205 bp (0.8%)\nTotal written (filtered):         23,339 bp (93.9%)\n\n=== Adapter 1 ===\n\nSequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 52 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 9.6%\n  C: 38.5%\n  G: 23.1%\n  T: 28.8%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t11\t24.8\t0\t11\n2\t5\t6.2\t0\t5\n3\t3\t1.5\t0\t3\n4\t3\t0.4\t0\t3\n12\t1\t0.0\t1\t1\n13\t2\t0.0\t1\t2\n14\t1\t0.0\t1\t1\n16\t1\t0.0\t1\t1\n17\t1\t0.0\t1\t0 1\n20\t2\t0.0\t1\t2\n21\t1\t0.0\t1\t1\n24\t1\t0.0\t1\t1\n26\t2\t0.0\t1\t2\n31\t1\t0.0\t1\t1\n33\t1\t0.0\t1\t1\n41\t2\t0.0\t1\t2\n49\t1\t0.0\t1\t1\n50\t1\t0.0\t1\t1\n54\t1\t0.0\t1\t1\n56\t1\t0.0\t1\t1\n58\t2\t0.0\t1\t2\n60\t1\t0.0\t1\t1\n67\t2\t0.0\t1\t2\n68\t1\t0.0\t1\t1\n69\t1\t0.0\t1\t1\n73\t1\t0.0\t1\t1\n80\t1\t0.0\t1\t1\n86\t1\t0.0\t1\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq\n=============================================\n99 sequences processed in total\nThe length threshold of paired-end sequences gets evaluated later on (in the validation step)\n\nWriting report to '/galaxy/server/database/jobs_directory/000/57/working/input_2.fastq_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_2.fastq\nTrimming mode: paired-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length for both reads before a sequence pair gets removed: 20 bp\nLength cut-off for read 1: 35 bp (default)\nLength cut-off for read 2: 35 bb (default)\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j -j 1\nWriting final adapter and quality trimmed output to input_2_trimmed.fq\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_2.fastq <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_2.fastq\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.01 s (56 us/read; 1.07 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                        58 (58.6%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     745 bp (3.0%)\nTotal written (filtered):         23,035 bp (92.7%)\n\n=== Adapter 1 ===\n\nSequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 58 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 12.1%\n  C: 37.9%\n  G: 8.6%\n  T: 41.4%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t16\t24.8\t0\t16\n2\t7\t6.2\t0\t7\n3\t1\t1.5\t0\t1\n4\t2\t0.4\t0\t2\n6\t2\t0.0\t0\t2\n9\t1\t0.0\t0\t1\n10\t1\t0.0\t1\t1\n13\t1\t0.0\t1\t1\n14\t2\t0.0\t1\t2\n15\t1\t0.0\t1\t1\n16\t1\t0.0\t1\t1\n17\t1\t0.0\t1\t1\n19\t2\t0.0\t1\t2\n21\t1\t0.0\t1\t1\n25\t1\t0.0\t1\t1\n30\t1\t0.0\t1\t1\n32\t2\t0.0\t1\t2\n34\t1\t0.0\t1\t1\n36\t2\t0.0\t1\t2\n38\t1\t0.0\t1\t1\n40\t1\t0.0\t1\t1\n41\t1\t0.0\t1\t1\n42\t1\t0.0\t1\t1\n43\t1\t0.0\t1\t1\n49\t1\t0.0\t1\t1\n51\t1\t0.0\t1\t1\n56\t1\t0.0\t1\t1\n57\t1\t0.0\t1\t1\n60\t1\t0.0\t1\t1\n67\t1\t0.0\t1\t1\n80\t1\t0.0\t1\t1\n\nRUN STATISTICS FOR INPUT FILE: input_2.fastq\n=============================================\n99 sequences processed in total\nThe length threshold of paired-end sequences gets evaluated later on (in the validation step)\n\nValidate paired-end files input_1_trimmed.fq and input_2_trimmed.fq\nfile_1: input_1_trimmed.fq, file_2: input_2_trimmed.fq\n\n\n>>>>> Now validing the length of the 2 paired-end infiles: input_1_trimmed.fq and input_2_trimmed.fq <<<<<\nWriting validated paired-end read 1 reads to input_1_val_1.fq\nWriting validated paired-end read 2 reads to input_2_val_2.fq\n\nWriting unpaired read 1 reads to input_1_unpaired_1.fq\nWriting unpaired read 2 reads to input_2_unpaired_2.fq\n\nTotal number of sequences analysed: 99\n\nNumber of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 1 (1.01%)\n\nDeleting both intermediate output files input_1_trimmed.fq and input_2_trimmed.fq\n\n====================================================================================================\n\n", "job_stdout": "", "job_stderr": "", "stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/57/working/\n\n\nAUTO-DETECTING ADAPTER TYPE\n===========================\nAttempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq <<)\n\nFound perfect matches for the following adapter sequences:\nAdapter type\tCount\tSequence\tSequences analysed\tPercentage\nNextera\t29\tCTGTCTCTTATA\t99\t29.29\nsmallRNA\t0\tTGGAATTCTCGG\t99\t0.00\nIllumina\t0\tAGATCGGAAGAGC\t99\t0.00\nUsing Nextera adapter for trimming (count: 29). Second best hit was smallRNA (count: 0)\n\nWriting report to '/galaxy/server/database/jobs_directory/000/57/working/input_1.fastq_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq\nTrimming mode: paired-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length for both reads before a sequence pair gets removed: 20 bp\nLength cut-off for read 1: 35 bp (default)\nLength cut-off for read 2: 35 bb (default)\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_1.fastq <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_1.fastq\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.00 s (41 us/read; 1.48 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                        52 (52.5%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     205 bp (0.8%)\nTotal written (filtered):         23,339 bp (93.9%)\n\n=== Adapter 1 ===\n\nSequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 52 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 9.6%\n  C: 38.5%\n  G: 23.1%\n  T: 28.8%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t11\t24.8\t0\t11\n2\t5\t6.2\t0\t5\n3\t3\t1.5\t0\t3\n4\t3\t0.4\t0\t3\n12\t1\t0.0\t1\t1\n13\t2\t0.0\t1\t2\n14\t1\t0.0\t1\t1\n16\t1\t0.0\t1\t1\n17\t1\t0.0\t1\t0 1\n20\t2\t0.0\t1\t2\n21\t1\t0.0\t1\t1\n24\t1\t0.0\t1\t1\n26\t2\t0.0\t1\t2\n31\t1\t0.0\t1\t1\n33\t1\t0.0\t1\t1\n41\t2\t0.0\t1\t2\n49\t1\t0.0\t1\t1\n50\t1\t0.0\t1\t1\n54\t1\t0.0\t1\t1\n56\t1\t0.0\t1\t1\n58\t2\t0.0\t1\t2\n60\t1\t0.0\t1\t1\n67\t2\t0.0\t1\t2\n68\t1\t0.0\t1\t1\n69\t1\t0.0\t1\t1\n73\t1\t0.0\t1\t1\n80\t1\t0.0\t1\t1\n86\t1\t0.0\t1\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq\n=============================================\n99 sequences processed in total\nThe length threshold of paired-end sequences gets evaluated later on (in the validation step)\n\nWriting report to '/galaxy/server/database/jobs_directory/000/57/working/input_2.fastq_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_2.fastq\nTrimming mode: paired-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length for both reads before a sequence pair gets removed: 20 bp\nLength cut-off for read 1: 35 bp (default)\nLength cut-off for read 2: 35 bb (default)\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j -j 1\nWriting final adapter and quality trimmed output to input_2_trimmed.fq\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_2.fastq <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_2.fastq\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.01 s (56 us/read; 1.07 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                        58 (58.6%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     745 bp (3.0%)\nTotal written (filtered):         23,035 bp (92.7%)\n\n=== Adapter 1 ===\n\nSequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 58 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 12.1%\n  C: 37.9%\n  G: 8.6%\n  T: 41.4%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t16\t24.8\t0\t16\n2\t7\t6.2\t0\t7\n3\t1\t1.5\t0\t1\n4\t2\t0.4\t0\t2\n6\t2\t0.0\t0\t2\n9\t1\t0.0\t0\t1\n10\t1\t0.0\t1\t1\n13\t1\t0.0\t1\t1\n14\t2\t0.0\t1\t2\n15\t1\t0.0\t1\t1\n16\t1\t0.0\t1\t1\n17\t1\t0.0\t1\t1\n19\t2\t0.0\t1\t2\n21\t1\t0.0\t1\t1\n25\t1\t0.0\t1\t1\n30\t1\t0.0\t1\t1\n32\t2\t0.0\t1\t2\n34\t1\t0.0\t1\t1\n36\t2\t0.0\t1\t2\n38\t1\t0.0\t1\t1\n40\t1\t0.0\t1\t1\n41\t1\t0.0\t1\t1\n42\t1\t0.0\t1\t1\n43\t1\t0.0\t1\t1\n49\t1\t0.0\t1\t1\n51\t1\t0.0\t1\t1\n56\t1\t0.0\t1\t1\n57\t1\t0.0\t1\t1\n60\t1\t0.0\t1\t1\n67\t1\t0.0\t1\t1\n80\t1\t0.0\t1\t1\n\nRUN STATISTICS FOR INPUT FILE: input_2.fastq\n=============================================\n99 sequences processed in total\nThe length threshold of paired-end sequences gets evaluated later on (in the validation step)\n\nValidate paired-end files input_1_trimmed.fq and input_2_trimmed.fq\nfile_1: input_1_trimmed.fq, file_2: input_2_trimmed.fq\n\n\n>>>>> Now validing the length of the 2 paired-end infiles: input_1_trimmed.fq and input_2_trimmed.fq <<<<<\nWriting validated paired-end read 1 reads to input_1_val_1.fq\nWriting validated paired-end read 2 reads to input_2_val_2.fq\n\nWriting unpaired read 1 reads to input_1_unpaired_1.fq\nWriting unpaired read 2 reads to input_2_unpaired_2.fq\n\nTotal number of sequences analysed: 99\n\nNumber of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 1 (1.01%)\n\nDeleting both intermediate output files input_1_trimmed.fq and input_2_trimmed.fq\n\n====================================================================================================\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:37:06", "plugin": "core", "name": "end_epoch", "raw_value": "1708670226.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:37:06", "plugin": "core", "name": "start_epoch", "raw_value": "1708670226.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "5", "plugin": "core", "name": "galaxy_slots", "raw_value": "5.0000000"}]}, "status": "success"}}, {"id": "trim_galore/0.6.3-9", "has_data": true, "data": {"tool_id": "trim_galore", "tool_version": "0.6.3", "test_index": 9, "time_seconds": 28.06533169746399, "inputs": {"singlePaired|input_mate_pairs": {"src": "hdca", "id": "9715618a89b78b45"}, "singlePaired|sPaired": "paired_collection", "params|report": true, "params|retain_unpaired|retain_unpaired_select": "retain_unpaired_output", "params|settingsType": "custom"}, "job": {"model_class": "Job", "id": "be8061d5fe915f36", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T06:37:43.683443", "create_time": "2024-02-23T06:37:32.859122", "galaxy_version": "23.1", "command_version": "Quality-/Adapter-/RRBS-/Speciality-Trimming\n                                [powered by Cutadapt]\n                                  version 0.6.3\n\n                               Last update: 21 03 2019", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/trim_galore/trim_galore/0.6.3", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-tg52g", "command_line": "ln -s '/galaxy/server/database/objects/9/e/0/dataset_9e0676d2-973c-4ee2-97e9-deb7600dbd87.dat' input_1.fastq.gz &&  ln -s '/galaxy/server/database/objects/3/1/8/dataset_318db6cd-f98b-4a50-9fc8-0c6518b9edbd.dat' input_2.fastq.gz &&  trim_galore  --phred33   --quality 20  --stringency 1  -e 0.1  --length 20    --retain_unpaired --length_1 35 --length_2 35    --output_dir ./      --paired      input_1.fastq.gz input_2.fastq.gz   && if [ -f input_1_trimmed.fq.gz ] ; then mv input_1_trimmed.fq.gz input_1_trimmed.fq ; fi && if [ -f input_1_val_1.fq.gz ] ; then mv input_1_val_1.fq.gz input_1_val_1.fq ; fi && if [ -f input_2_val_2.fq.gz ] ; then mv input_2_val_2.fq.gz input_2_val_2.fq ; fi && if [ -f input_1_unpaired_1.fq.gz ] ; then mv input_1_unpaired_1.fq.gz input_1_unpaired_1.fq ; fi && if [ -f input_2_unpaired_2.fq.gz ] ; then mv input_2_unpaired_2.fq.gz input_2_unpaired_2.fq ; fi  && cat ./*_trimming_report.txt > '/galaxy/server/database/objects/0/2/9/dataset_0294d306-b8af-4ec1-a080-928d8f53c545.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "rrbs": "{\"__current_case__\": 0, \"settingsType\": \"default\"}", "params": "{\"__current_case__\": 1, \"clip_R1\": \"\", \"clip_R2\": \"\", \"error_rate\": \"0.1\", \"min_length\": \"20\", \"quality\": \"20\", \"report\": true, \"retain_unpaired\": {\"__current_case__\": 1, \"length_1\": \"35\", \"length_2\": \"35\", \"retain_unpaired_select\": \"retain_unpaired_output\"}, \"settingsType\": \"custom\", \"stringency\": \"1\"}", "singlePaired": "{\"__current_case__\": 2, \"input_mate_pairs\": {\"values\": [{\"id\": 4, \"src\": \"hdca\"}]}, \"sPaired\": \"paired_collection\", \"three_prime_clip_R1\": \"\", \"three_prime_clip_R2\": \"\", \"trim1\": false, \"trimming\": {\"__current_case__\": 0, \"trimming_select\": \"\"}}"}, "inputs": {"singlePaired|input_mate_pairs1": {"id": "445b55222ceeb429", "src": "hda", "uuid": "9e0676d2-973c-4ee2-97e9-deb7600dbd87"}, "singlePaired|input_mate_pairs2": {"id": "aa8a99e05e17c8af", "src": "hda", "uuid": "318db6cd-f98b-4a50-9fc8-0c6518b9edbd"}}, "outputs": {"trimmed_reads_paired_collection|__part__|forward": {"id": "83aba05c750e98bc", "src": "hda", "uuid": "ce38c759-5674-4e39-94cc-14b3d9796a5d"}, "trimmed_reads_paired_collection|__part__|reverse": {"id": "5333d54e9f5c5789", "src": "hda", "uuid": "0c0e86a0-4e63-4bab-82dd-8781891f4105"}, "trimmed_reads_unpaired_collection|__part__|forward": {"id": "1dc584cdcbd7a73e", "src": "hda", "uuid": "c200d74e-e005-4010-88a6-901d166b0391"}, "trimmed_reads_unpaired_collection|__part__|reverse": {"id": "1683840fecfff777", "src": "hda", "uuid": "560d3853-4a39-4391-8d42-6f6c76151e98"}, "report_file": {"id": "841a2a4d0fc422e1", "src": "hda", "uuid": "0294d306-b8af-4ec1-a080-928d8f53c545"}}, "output_collections": {"trimmed_reads_unpaired_collection": {"id": "c8cd61dfdd5f6c13", "src": "hdca"}, "trimmed_reads_paired_collection": {"id": "d99bc8ca5795c185", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/60/working/\n\n\nAUTO-DETECTING ADAPTER TYPE\n===========================\nAttempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq.gz <<)\n\nFound perfect matches for the following adapter sequences:\nAdapter type\tCount\tSequence\tSequences analysed\tPercentage\nNextera\t29\tCTGTCTCTTATA\t99\t29.29\nIllumina\t0\tAGATCGGAAGAGC\t99\t0.00\nsmallRNA\t0\tTGGAATTCTCGG\t99\t0.00\nUsing Nextera adapter for trimming (count: 29). Second best hit was Illumina (count: 0)\n\nWriting report to '/galaxy/server/database/jobs_directory/000/60/working/input_1.fastq.gz_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq.gz\nTrimming mode: paired-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length for both reads before a sequence pair gets removed: 20 bp\nLength cut-off for read 1: 35 bp (default)\nLength cut-off for read 2: 35 bb (default)\nOutput file(s) will be GZIP compressed\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq.gz\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_1.fastq.gz <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_1.fastq.gz\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.02 s (156 us/read; 0.39 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                        52 (52.5%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     205 bp (0.8%)\nTotal written (filtered):         23,339 bp (93.9%)\n\n=== Adapter 1 ===\n\nSequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 52 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 9.6%\n  C: 38.5%\n  G: 23.1%\n  T: 28.8%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t11\t24.8\t0\t11\n2\t5\t6.2\t0\t5\n3\t3\t1.5\t0\t3\n4\t3\t0.4\t0\t3\n12\t1\t0.0\t1\t1\n13\t2\t0.0\t1\t2\n14\t1\t0.0\t1\t1\n16\t1\t0.0\t1\t1\n17\t1\t0.0\t1\t0 1\n20\t2\t0.0\t1\t2\n21\t1\t0.0\t1\t1\n24\t1\t0.0\t1\t1\n26\t2\t0.0\t1\t2\n31\t1\t0.0\t1\t1\n33\t1\t0.0\t1\t1\n41\t2\t0.0\t1\t2\n49\t1\t0.0\t1\t1\n50\t1\t0.0\t1\t1\n54\t1\t0.0\t1\t1\n56\t1\t0.0\t1\t1\n58\t2\t0.0\t1\t2\n60\t1\t0.0\t1\t1\n67\t2\t0.0\t1\t2\n68\t1\t0.0\t1\t1\n69\t1\t0.0\t1\t1\n73\t1\t0.0\t1\t1\n80\t1\t0.0\t1\t1\n86\t1\t0.0\t1\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq.gz\n=============================================\n99 sequences processed in total\nThe length threshold of paired-end sequences gets evaluated later on (in the validation step)\n\nWriting report to '/galaxy/server/database/jobs_directory/000/60/working/input_2.fastq.gz_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_2.fastq.gz\nTrimming mode: paired-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length for both reads before a sequence pair gets removed: 20 bp\nLength cut-off for read 1: 35 bp (default)\nLength cut-off for read 2: 35 bb (default)\nOutput file(s) will be GZIP compressed\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j -j 1\nWriting final adapter and quality trimmed output to input_2_trimmed.fq.gz\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_2.fastq.gz <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_2.fastq.gz\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.02 s (161 us/read; 0.37 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                        58 (58.6%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     745 bp (3.0%)\nTotal written (filtered):         23,035 bp (92.7%)\n\n=== Adapter 1 ===\n\nSequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 58 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 12.1%\n  C: 37.9%\n  G: 8.6%\n  T: 41.4%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t16\t24.8\t0\t16\n2\t7\t6.2\t0\t7\n3\t1\t1.5\t0\t1\n4\t2\t0.4\t0\t2\n6\t2\t0.0\t0\t2\n9\t1\t0.0\t0\t1\n10\t1\t0.0\t1\t1\n13\t1\t0.0\t1\t1\n14\t2\t0.0\t1\t2\n15\t1\t0.0\t1\t1\n16\t1\t0.0\t1\t1\n17\t1\t0.0\t1\t1\n19\t2\t0.0\t1\t2\n21\t1\t0.0\t1\t1\n25\t1\t0.0\t1\t1\n30\t1\t0.0\t1\t1\n32\t2\t0.0\t1\t2\n34\t1\t0.0\t1\t1\n36\t2\t0.0\t1\t2\n38\t1\t0.0\t1\t1\n40\t1\t0.0\t1\t1\n41\t1\t0.0\t1\t1\n42\t1\t0.0\t1\t1\n43\t1\t0.0\t1\t1\n49\t1\t0.0\t1\t1\n51\t1\t0.0\t1\t1\n56\t1\t0.0\t1\t1\n57\t1\t0.0\t1\t1\n60\t1\t0.0\t1\t1\n67\t1\t0.0\t1\t1\n80\t1\t0.0\t1\t1\n\nRUN STATISTICS FOR INPUT FILE: input_2.fastq.gz\n=============================================\n99 sequences processed in total\nThe length threshold of paired-end sequences gets evaluated later on (in the validation step)\n\nValidate paired-end files input_1_trimmed.fq.gz and input_2_trimmed.fq.gz\nfile_1: input_1_trimmed.fq.gz, file_2: input_2_trimmed.fq.gz\n\n\n>>>>> Now validing the length of the 2 paired-end infiles: input_1_trimmed.fq.gz and input_2_trimmed.fq.gz <<<<<\nWriting validated paired-end read 1 reads to input_1_val_1.fq.gz\nWriting validated paired-end read 2 reads to input_2_val_2.fq.gz\n\nWriting unpaired read 1 reads to input_1_unpaired_1.fq.gz\nWriting unpaired read 2 reads to input_2_unpaired_2.fq.gz\n\nTotal number of sequences analysed: 99\n\nNumber of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 1 (1.01%)\n\nDeleting both intermediate output files input_1_trimmed.fq.gz and input_2_trimmed.fq.gz\n\n====================================================================================================\n\n", "job_stdout": "", "job_stderr": "", "stderr": "Multicore support not enabled. Proceeding with single-core trimming.\nPath to Cutadapt set as: 'cutadapt' (default)\nCutadapt seems to be working fine (tested command 'cutadapt --version')\nCutadapt version: 2.3\nsingle-core operation.\nOutput will be written into the directory: /galaxy/server/database/jobs_directory/000/60/working/\n\n\nAUTO-DETECTING ADAPTER TYPE\n===========================\nAttempting to auto-detect adapter type from the first 1 million sequences of the first file (>> input_1.fastq.gz <<)\n\nFound perfect matches for the following adapter sequences:\nAdapter type\tCount\tSequence\tSequences analysed\tPercentage\nNextera\t29\tCTGTCTCTTATA\t99\t29.29\nIllumina\t0\tAGATCGGAAGAGC\t99\t0.00\nsmallRNA\t0\tTGGAATTCTCGG\t99\t0.00\nUsing Nextera adapter for trimming (count: 29). Second best hit was Illumina (count: 0)\n\nWriting report to '/galaxy/server/database/jobs_directory/000/60/working/input_1.fastq.gz_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_1.fastq.gz\nTrimming mode: paired-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length for both reads before a sequence pair gets removed: 20 bp\nLength cut-off for read 1: 35 bp (default)\nLength cut-off for read 2: 35 bb (default)\nOutput file(s) will be GZIP compressed\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j 1\nWriting final adapter and quality trimmed output to input_1_trimmed.fq.gz\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_1.fastq.gz <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_1.fastq.gz\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.02 s (156 us/read; 0.39 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                        52 (52.5%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     205 bp (0.8%)\nTotal written (filtered):         23,339 bp (93.9%)\n\n=== Adapter 1 ===\n\nSequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 52 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 9.6%\n  C: 38.5%\n  G: 23.1%\n  T: 28.8%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t11\t24.8\t0\t11\n2\t5\t6.2\t0\t5\n3\t3\t1.5\t0\t3\n4\t3\t0.4\t0\t3\n12\t1\t0.0\t1\t1\n13\t2\t0.0\t1\t2\n14\t1\t0.0\t1\t1\n16\t1\t0.0\t1\t1\n17\t1\t0.0\t1\t0 1\n20\t2\t0.0\t1\t2\n21\t1\t0.0\t1\t1\n24\t1\t0.0\t1\t1\n26\t2\t0.0\t1\t2\n31\t1\t0.0\t1\t1\n33\t1\t0.0\t1\t1\n41\t2\t0.0\t1\t2\n49\t1\t0.0\t1\t1\n50\t1\t0.0\t1\t1\n54\t1\t0.0\t1\t1\n56\t1\t0.0\t1\t1\n58\t2\t0.0\t1\t2\n60\t1\t0.0\t1\t1\n67\t2\t0.0\t1\t2\n68\t1\t0.0\t1\t1\n69\t1\t0.0\t1\t1\n73\t1\t0.0\t1\t1\n80\t1\t0.0\t1\t1\n86\t1\t0.0\t1\t1\n\nRUN STATISTICS FOR INPUT FILE: input_1.fastq.gz\n=============================================\n99 sequences processed in total\nThe length threshold of paired-end sequences gets evaluated later on (in the validation step)\n\nWriting report to '/galaxy/server/database/jobs_directory/000/60/working/input_2.fastq.gz_trimming_report.txt'\n\nSUMMARISING RUN PARAMETERS\n==========================\nInput filename: input_2.fastq.gz\nTrimming mode: paired-end\nTrim Galore version: 0.6.3\nCutadapt version: 2.3\nNumber of cores used for trimming: 1\nQuality Phred score cutoff: 20\nQuality encoding type selected: ASCII+33\nAdapter sequence: 'CTGTCTCTTATA' (Nextera Transposase sequence; auto-detected)\nMaximum trimming error rate: 0.1 (default)\nMinimum required adapter overlap (stringency): 1 bp\nMinimum required sequence length for both reads before a sequence pair gets removed: 20 bp\nLength cut-off for read 1: 35 bp (default)\nLength cut-off for read 2: 35 bb (default)\nOutput file(s) will be GZIP compressed\n\nCutadapt seems to be fairly up-to-date (version 2.3). Setting -j -j 1\nWriting final adapter and quality trimmed output to input_2_trimmed.fq.gz\n\n\n  >>> Now performing quality (cutoff '-q 20') and adapter trimming in a single pass for the adapter sequence: 'CTGTCTCTTATA' from file input_2.fastq.gz <<< \nThis is cutadapt 2.3 with Python 3.7.3\nCommand line parameters: -j 1 -e 0.1 -q 20 -O 1 -a CTGTCTCTTATA input_2.fastq.gz\nProcessing reads on 1 core in single-end mode ...\nFinished in 0.02 s (161 us/read; 0.37 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                      99\nReads with adapters:                        58 (58.6%)\nReads written (passing filters):            99 (100.0%)\n\nTotal basepairs processed:        24,849 bp\nQuality-trimmed:                     745 bp (3.0%)\nTotal written (filtered):         23,035 bp (92.7%)\n\n=== Adapter 1 ===\n\nSequence: CTGTCTCTTATA; Type: regular 3'; Length: 12; Trimmed: 58 times.\n\nNo. of allowed errors:\n0-9 bp: 0; 10-12 bp: 1\n\nBases preceding removed adapters:\n  A: 12.1%\n  C: 37.9%\n  G: 8.6%\n  T: 41.4%\n  none/other: 0.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n1\t16\t24.8\t0\t16\n2\t7\t6.2\t0\t7\n3\t1\t1.5\t0\t1\n4\t2\t0.4\t0\t2\n6\t2\t0.0\t0\t2\n9\t1\t0.0\t0\t1\n10\t1\t0.0\t1\t1\n13\t1\t0.0\t1\t1\n14\t2\t0.0\t1\t2\n15\t1\t0.0\t1\t1\n16\t1\t0.0\t1\t1\n17\t1\t0.0\t1\t1\n19\t2\t0.0\t1\t2\n21\t1\t0.0\t1\t1\n25\t1\t0.0\t1\t1\n30\t1\t0.0\t1\t1\n32\t2\t0.0\t1\t2\n34\t1\t0.0\t1\t1\n36\t2\t0.0\t1\t2\n38\t1\t0.0\t1\t1\n40\t1\t0.0\t1\t1\n41\t1\t0.0\t1\t1\n42\t1\t0.0\t1\t1\n43\t1\t0.0\t1\t1\n49\t1\t0.0\t1\t1\n51\t1\t0.0\t1\t1\n56\t1\t0.0\t1\t1\n57\t1\t0.0\t1\t1\n60\t1\t0.0\t1\t1\n67\t1\t0.0\t1\t1\n80\t1\t0.0\t1\t1\n\nRUN STATISTICS FOR INPUT FILE: input_2.fastq.gz\n=============================================\n99 sequences processed in total\nThe length threshold of paired-end sequences gets evaluated later on (in the validation step)\n\nValidate paired-end files input_1_trimmed.fq.gz and input_2_trimmed.fq.gz\nfile_1: input_1_trimmed.fq.gz, file_2: input_2_trimmed.fq.gz\n\n\n>>>>> Now validing the length of the 2 paired-end infiles: input_1_trimmed.fq.gz and input_2_trimmed.fq.gz <<<<<\nWriting validated paired-end read 1 reads to input_1_val_1.fq.gz\nWriting validated paired-end read 2 reads to input_2_val_2.fq.gz\n\nWriting unpaired read 1 reads to input_1_unpaired_1.fq.gz\nWriting unpaired read 2 reads to input_2_unpaired_2.fq.gz\n\nTotal number of sequences analysed: 99\n\nNumber of sequence pairs removed because at least one read was shorter than the length cutoff (20 bp): 1 (1.01%)\n\nDeleting both intermediate output files input_1_trimmed.fq.gz and input_2_trimmed.fq.gz\n\n====================================================================================================\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 06:37:34", "plugin": "core", "name": "end_epoch", "raw_value": "1708670254.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 06:37:34", "plugin": "core", "name": "start_epoch", "raw_value": "1708670254.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "5", "plugin": "core", "name": "galaxy_slots", "raw_value": "5.0000000"}]}, "status": "success"}}, {"id": "vcfaddinfo/1.0.0_rc3+galaxy0-0", "has_data": true, "data": {"tool_id": "vcfaddinfo", "tool_version": "1.0.0_rc3+galaxy0", "test_index": 0, "time_seconds": 30.33483576774597, "inputs": {"input1": {"src": "hda", "id": "e702ef6e0931c0ae"}, "input2": {"src": "hda", "id": "511a6f58c83d8174"}}, "job": {"model_class": "Job", "id": "c2e1cae3b6e1c47d", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:55:46.323083", "create_time": "2024-02-23T07:55:30.578628", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/vcfaddinfo/vcfaddinfo/1.0.0_rc3+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-t2f2w", "command_line": "vcfaddinfo '/galaxy/server/database/objects/2/8/8/dataset_288c231c-bae6-4965-9071-90aafdc1fa0a.dat' '/galaxy/server/database/objects/e/8/d/dataset_e8d0e60f-3f9b-42c9-a4a4-9a391c4f4223.dat' > '/galaxy/server/database/objects/4/d/5/dataset_4d5a4599-e798-4138-bc94-021094af68c2.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input2": {"id": "511a6f58c83d8174", "src": "hda", "uuid": "e8d0e60f-3f9b-42c9-a4a4-9a391c4f4223"}, "input1": {"id": "e702ef6e0931c0ae", "src": "hda", "uuid": "288c231c-bae6-4965-9071-90aafdc1fa0a"}}, "outputs": {"out_file1": {"id": "ae9a6edce4746fe7", "src": "hda", "uuid": "4d5a4599-e798-4138-bc94-021094af68c2"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:55:36", "plugin": "core", "name": "end_epoch", "raw_value": "1708674936.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:55:36", "plugin": "core", "name": "start_epoch", "raw_value": "1708674936.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "vcfleftalign/1.0.0_rc3+galaxy0-0", "has_data": true, "data": {"tool_id": "vcfleftalign", "tool_version": "1.0.0_rc3+galaxy0", "test_index": 0, "time_seconds": 26.9236958026886, "inputs": {"input_vcf": {"src": "hda", "id": "40fa7d5960f2a0bd"}, "reference_source|ref_file": {"src": "hda", "id": "d50cb3d0f141621b"}, "reference_source|reference_source_selector": "history", "window_size": "150"}, "job": {"model_class": "Job", "id": "14848105d6443198", "state": "ok", "exit_code": 0, "update_time": "2024-02-23T07:56:14.101396", "create_time": "2024-02-23T07:56:03.271497", "galaxy_version": "23.1", "command_version": "", "copied_from_job_id": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/vcfleftalign/vcfleftalign/1.0.0_rc3+galaxy0", "history_id": "9f8c5b59a2218bae", "external_id": "gxy-r7kpx", "command_line": "ln -s '/galaxy/server/database/objects/3/4/d/dataset_34deab27-dc72-4f93-a71c-a4678bb3d546.dat' 'localref.fa' && vcfleftalign -r 'localref.fa' -w \"150\" '/galaxy/server/database/objects/7/0/f/dataset_70f1a6f1-220d-4217-a083-3f0f6297a065.dat' > '/galaxy/server/database/objects/d/6/2/dataset_d62ca2f4-5193-41cc-b344-27cc82626ce1.dat'", "traceback": null, "params": {"__input_ext": "\"vcf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "window_size": "\"150\"", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 583, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"reference_source|ref_file": {"id": "d50cb3d0f141621b", "src": "hda", "uuid": "34deab27-dc72-4f93-a71c-a4678bb3d546"}, "input_vcf": {"id": "40fa7d5960f2a0bd", "src": "hda", "uuid": "70f1a6f1-220d-4217-a083-3f0f6297a065"}}, "outputs": {"out_file1": {"id": "39ee36be18be0d2d", "src": "hda", "uuid": "d62ca2f4-5193-41cc-b344-27cc82626ce1"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "index file localref.fa.fai not found, generating...\n", "job_stdout": "", "job_stderr": "", "stderr": "index file localref.fa.fai not found, generating...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2024-02-23 07:56:05", "plugin": "core", "name": "end_epoch", "raw_value": "1708674965.0000000"}, {"title": "Job Start Time", "value": "2024-02-23 07:56:05", "plugin": "core", "name": "start_epoch", "raw_value": "1708674965.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}], "galaxy_url": "http://34.74.27.4:8000/galaxy/"}