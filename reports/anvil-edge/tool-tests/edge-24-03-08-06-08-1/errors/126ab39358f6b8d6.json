{
    "model_class": "Job",
    "id": "126ab39358f6b8d6",
    "state": "error",
    "exit_code": null,
    "update_time": "2024-03-08T07:12:53.872417",
    "create_time": "2024-03-08T07:12:25.424691",
    "galaxy_version": "23.1",
    "command_version": "",
    "copied_from_job_id": null,
    "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0",
    "history_id": "24e1917688593696",
    "external_id": "gxy-gqpp2",
    "command_line": "mkdir ./index && mkdir ./output && salmon index -i ./index --kmerLen '31' --gencode --transcripts '/galaxy/server/database/objects/3/0/d/dataset_30d49551-cd30-4fdc-8a13-1f04f9c15a03.dat' && cp '/galaxy/server/database/objects/5/e/3/dataset_5e3607d0-d59f-41db-a4a7-99cf6b0a5bb0.dat' ./mate1.fastq.gz && gunzip ./mate1.fastq.gz && cp '/galaxy/server/database/objects/3/8/d/dataset_38d98260-7dd2-45ee-aa30-70290c42e9e4.dat' ./mate2.fastq.gz && gunzip ./mate2.fastq.gz  && ln -s '/galaxy/server/database/objects/5/e/6/dataset_5e62459f-4223-417a-aed9-9b16e19cd0c1.dat' ./alevinmap.tsv && salmon alevin -l A -i ./index -1 ./mate1.fastq -2 ./mate2.fastq -o ./output -p \"${GALAXY_SLOTS:-4}\" --chromium --tgMap ./alevinmap.tsv --keepCBFraction '1.0'   --dumpFeatures  --dumpMtx --freqThreshold '5'  && gunzip output/alevin/quants_mat.mtx.gz  && gunzip output/alevin/quants_tier_mat.gz  && gunzip output/aux_info/fld.gz && gunzip output/aux_info/observed_bias.gz && gunzip output/aux_info/observed_bias_3p.gz",
    "traceback": "Traceback (most recent call last):\n  File \"/galaxy/server/lib/galaxy/jobs/runners/__init__.py\", line 649, in _finish_or_resubmit_job\n    job_wrapper.finish(\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1961, in finish\n    self._finish_dataset(output_name, dataset, job, context, final_job_state, remote_metadata_directory)\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1778, in _finish_dataset\n    dataset.datatype.set_meta(dataset, overwrite=False)\n  File \"/galaxy/server/lib/galaxy/datatypes/tabular.py\", line 1689, in set_meta\n    for line in dataset_fh:\n  File \"/usr/local/lib/python3.10/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 64: invalid start byte\n",
    "params": {
        "__input_ext": "\"input\"",
        "dbkey": "\"?\"",
        "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",
        "optional": "{\"dumpBfh\": false, \"dumpFeatures\": true, \"dumpMtx\": true, \"dumpUmiGraph\": false, \"expectCells\": \"\", \"forceCells\": \"\", \"freqThreshold\": \"5\", \"keepCBFraction\": \"1.0\", \"lowRegionMinNumBarcodes\": \"\", \"maxNumBarcodes\": \"\", \"minScoreFraction\": \"\", \"mrna\": null, \"noDedup\": false, \"numCellBootstraps\": \"\", \"rrna\": null, \"whitelist\": null}",
        "allout": "false",
        "protocol": "\"--chromium\"",
        "pairstraight": "{\"__current_case__\": 0, \"file1\": {\"values\": [{\"id\": 310, \"src\": \"hda\"}]}, \"file2\": {\"values\": [{\"id\": 311, \"src\": \"hda\"}]}, \"libtype\": {\"__current_case__\": 0, \"strandedness\": \"A\"}, \"readselect\": \"paired\"}",
        "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 309, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}"
    },
    "inputs": {
        "tgmap": {
            "id": "a00044fd073f5b7e",
            "src": "hda",
            "uuid": "5e62459f-4223-417a-aed9-9b16e19cd0c1"
        },
        "pairstraight|file2": {
            "id": "1e52f333ae34a829",
            "src": "hda",
            "uuid": "38d98260-7dd2-45ee-aa30-70290c42e9e4"
        },
        "pairstraight|file1": {
            "id": "798c8a4e9d80ab82",
            "src": "hda",
            "uuid": "5e3607d0-d59f-41db-a4a7-99cf6b0a5bb0"
        },
        "refTranscriptSource|s_index|fasta": {
            "id": "6e34c1e1c72ef8fc",
            "src": "hda",
            "uuid": "30d49551-cd30-4fdc-8a13-1f04f9c15a03"
        }
    },
    "outputs": {
        "expected_bias": {
            "id": "a79d61b774ca6905",
            "src": "hda",
            "uuid": "1a4f149e-bd65-42d3-9d86-0ea0089ea4fa"
        },
        "whitelist_txt": {
            "id": "6813fb79ca83d621",
            "src": "hda",
            "uuid": "9ab716e9-fd20-40eb-a0cb-062d26d2c238"
        },
        "flenDist_txt": {
            "id": "07b497cb8de49d0c",
            "src": "hda",
            "uuid": "dd0da43f-7998-4fba-b778-e99721608b21"
        },
        "quants_tier_mat": {
            "id": "0657d51f5e393214",
            "src": "hda",
            "uuid": "c04e54e5-2a52-4808-ac94-f88fce840103"
        },
        "quants_mat_rows_txt": {
            "id": "cb46a1231a1845e4",
            "src": "hda",
            "uuid": "53e6d99e-0be4-4877-b120-0c6315235565"
        },
        "quants_mat_cols_txt": {
            "id": "1801bdeb977e56f8",
            "src": "hda",
            "uuid": "90883965-26f1-4665-8a6a-3f9e95ce26af"
        },
        "quants_mat_mtx": {
            "id": "c9ed91c98e569a6f",
            "src": "hda",
            "uuid": "044108c2-05fe-4deb-a464-4f10d512b13c"
        },
        "observed_bias_3p": {
            "id": "3a3ade3a8ac2a5bc",
            "src": "hda",
            "uuid": "7cced835-3899-4d01-b31b-b7a156d3e476"
        },
        "observed_bias": {
            "id": "fd7b9668f5e608f7",
            "src": "hda",
            "uuid": "d775304f-834f-4f3e-92b2-8f45318ab624"
        },
        "featureDump_txt": {
            "id": "b3d42fd14c7a5fe2",
            "src": "hda",
            "uuid": "d1c106ff-93d2-4497-978a-773e2ada89e9"
        },
        "raw_cb_frequency_txt": {
            "id": "ba3195af5439d7a5",
            "src": "hda",
            "uuid": "7c2b2f44-c28d-4509-aa58-a0853ef0ba73"
        }
    },
    "output_collections": {},
    "tool_stdout": "",
    "tool_stderr": "",
    "job_stdout": null,
    "job_stderr": null,
    "stderr": "",
    "stdout": "",
    "job_messages": [],
    "dependencies": [],
    "user_email": "tests@fake.org",
    "job_metrics": []
}
