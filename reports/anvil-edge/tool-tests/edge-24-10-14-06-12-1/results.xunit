<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="Results (powered by Planemo)"
           tests="213"
           errors="51"
           failures="34"
           skip="0">
    
    <testcase classname="anndata_ops (Test #1)" name="0" time="0.3492758274078369">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 0, "time_seconds": 0.3492758274078369, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #1)" name="0" time="0.3471205234527588">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 0, "time_seconds": 0.3471205234527588, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #2)" name="1" time="0.2367560863494873">
        
            <error type="error" message="Input staging problem: Test input file (mnn.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (mnn.h5) cannot be found.", "status": "error", "test_index": 1, "time_seconds": 0.2367560863494873, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #2)" name="1" time="0.23687100410461426">
        
            <error type="error" message="Input staging problem: Test input file (mnn.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (mnn.h5) cannot be found.", "status": "error", "test_index": 1, "time_seconds": 0.23687100410461426, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #3)" name="2" time="0.2352766990661621">
        
            <error type="error" message="Input staging problem: Test input file (anndata_ops.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (anndata_ops.h5) cannot be found.", "status": "error", "test_index": 2, "time_seconds": 0.2352766990661621, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #3)" name="2" time="0.23641109466552734">
        
            <error type="error" message="Input staging problem: Test input file (anndata_ops.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (anndata_ops.h5) cannot be found.", "status": "error", "test_index": 2, "time_seconds": 0.23641109466552734, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #4)" name="3" time="0.23698019981384277">
        
            <error type="error" message="Input staging problem: Test input file (anndata_ops.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (anndata_ops.h5) cannot be found.", "status": "error", "test_index": 3, "time_seconds": 0.23698019981384277, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #4)" name="3" time="0.23621296882629395">
        
            <error type="error" message="Input staging problem: Test input file (anndata_ops.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (anndata_ops.h5) cannot be found.", "status": "error", "test_index": 3, "time_seconds": 0.23621296882629395, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #5)" name="4" time="0.23516345024108887">
        
            <error type="error" message="Input staging problem: Test input file (anndata_ops.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (anndata_ops.h5) cannot be found.", "status": "error", "test_index": 4, "time_seconds": 0.23516345024108887, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #5)" name="4" time="0.23689746856689453">
        
            <error type="error" message="Input staging problem: Test input file (anndata_ops.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (anndata_ops.h5) cannot be found.", "status": "error", "test_index": 4, "time_seconds": 0.23689746856689453, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #6)" name="5" time="0.2379307746887207">
        
            <error type="error" message="Input staging problem: Test input file (anndata_ops.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (anndata_ops.h5) cannot be found.", "status": "error", "test_index": 5, "time_seconds": 0.2379307746887207, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #6)" name="5" time="0.23688006401062012">
        
            <error type="error" message="Input staging problem: Test input file (anndata_ops.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (anndata_ops.h5) cannot be found.", "status": "error", "test_index": 5, "time_seconds": 0.23688006401062012, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #7)" name="6" time="0.23816704750061035">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 6, "time_seconds": 0.23816704750061035, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #7)" name="6" time="0.23896145820617676">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 6, "time_seconds": 0.23896145820617676, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #8)" name="7" time="0.23682761192321777">
        
            <error type="error" message="Input staging problem: Test input file (normalise_data.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (normalise_data.h5) cannot be found.", "status": "error", "test_index": 7, "time_seconds": 0.23682761192321777, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #8)" name="7" time="0.23786687850952148">
        
            <error type="error" message="Input staging problem: Test input file (normalise_data.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (normalise_data.h5) cannot be found.", "status": "error", "test_index": 7, "time_seconds": 0.23786687850952148, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #9)" name="8" time="0.23736000061035156">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 8, "time_seconds": 0.23736000061035156, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #9)" name="8" time="0.23844337463378906">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 8, "time_seconds": 0.23844337463378906, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #10)" name="9" time="0.23874735832214355">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 9, "time_seconds": 0.23874735832214355, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="anndata_ops (Test #10)" name="9" time="0.2384500503540039">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 9, "time_seconds": 0.2384500503540039, "tool_id": "anndata_ops", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="bcftools_plugin_counts (Test #1)" name="0" time="40.370413303375244">
        
            
            <system-out><![CDATA[
            Number of samples: 3Number of SNPs:    11Number of INDELs:  3Number of MNPs:    0Number of others:  0Number of sites:   15
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #1)" name="0" time="36.60226130485535">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #2)" name="1" time="23.065733432769775">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "input_file": {   "id": "268efb038ea61557",   "src": "hda"  },  "output_type": "v",  "sec_filter|max_ac": "1",  "sec_filter|min_ac": "1",  "sec_filter|types": "snps",  "sec_subset|samples": "NA00002" }, "job": {  "command_line": "export BCFTOOLS_PLUGINS=`which bcftools | sed \u0027s,bin/bcftools,libexec/bcftools,\u0027`;     ln -s \u0027/galaxy/server/database/objects/f/a/7/dataset_fa784e42-aa73-4d03-aea7-921b50ffa682.dat\u0027 input.bcf \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/8/d/3/metadata_8d3fd28f-1b74-4505-a1ba-9dd03404acf7.dat\u0027 input.bcf.csi \u0026\u0026            bcftools view     --samples \u0027NA00002\u0027     --min-ac 1 --max-ac 1 --types \"snps\"                     --output-type \u0027v\u0027   --threads ${GALAXY_SLOTS:-4}    input.bcf  \u003e \u0027/galaxy/server/database/objects/8/6/b/dataset_86bfd882-c935-4b1c-83f1-98db428e458a.dat\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-10-14T09:04:46.404139",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-dqzk6",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "1720dd0b2c193bb0",  "inputs": {   "input_file": {    "id": "268efb038ea61557",    "src": "hda",    "uuid": "fa784e42-aa73-4d03-aea7-921b50ffa682"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_file": {    "id": "cf76e6f9914000be",    "src": "hda",    "uuid": "86bfd882-c935-4b1c-83f1-98db428e458a"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "output_type": "\"v\"",   "sec_filter": "{\"exclude_types\": null, \"known_or_novel\": null, \"max_ac\": \"1\", \"max_af\": \"\", \"max_alleles\": \"\", \"min_ac\": \"1\", \"min_af\": \"\", \"min_alleles\": \"\", \"phased\": null, \"private\": null, \"select_genotype\": null, \"types\": \"snps\", \"uncalled\": null}",   "sec_output": "{\"compression_level\": \"\", \"drop_genotypes\": false, \"header\": null, \"invert_targets_file\": false}",   "sec_restrict": "{\"apply_filters\": \"\", \"exclude\": null, \"include\": null, \"regions\": {\"__current_case__\": 0, \"regions_src\": \"__none__\"}, \"regions_overlap\": null, \"targets\": {\"__current_case__\": 0, \"targets_src\": \"__none__\"}, \"targets_overlap\": null}",   "sec_subset": "{\"force_samples\": false, \"invert_samples\": false, \"invert_samples_file\": false, \"no_update\": false, \"samples\": \"NA00002\", \"samples_file\": null, \"trim_alt_alleles\": false}"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/bcftools_view/bcftools_view/1.15.1+galaxy4",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T09:04:50.907438",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/bcftools_view/bcftools_view/1.15.1+galaxy4, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/bcftools_view/bcftools_view/1.15.1+galaxy4, exit_code: None, stderr: ." ], "status": "failure", "test_index": 1, "time_seconds": 23.065733432769775, "tool_id": "bcftools_view", "tool_version": "1.15.1+galaxy4"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #11)" name="10" time="10.574542045593262">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 10, "time_seconds": 10.574542045593262, "tool_id": "bcftools_view", "tool_version": "1.15.1+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #12)" name="11" time="30.70713710784912">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #13)" name="12" time="31.15007996559143">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #3)" name="2" time="31.227174043655396">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #4)" name="3" time="34.19683051109314">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #5)" name="4" time="31.20521831512451">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #6)" name="5" time="10.59225606918335">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 5, "time_seconds": 10.59225606918335, "tool_id": "bcftools_view", "tool_version": "1.15.1+galaxy4"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #7)" name="6" time="32.620009660720825">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #8)" name="7" time="31.166772603988647">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #9)" name="8" time="31.122177839279175">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="bcftools_view (Test #10)" name="9" time="32.35675573348999">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #1)" name="0" time="38.26858925819397">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.031 s (10378.202 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #1)" name="0" time="24.652881622314453">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "library|input_1": {   "id": "f6701fb611f9069b",   "src": "hda"  },  "library|r1|adapters_0|adapter_source|adapter": "AGATCGGAAGAGC",  "library|r1|adapters_0|adapter_source|adapter_source_list": "user",  "library|type": "single" }, "job": {  "command_line": "ln -f -s \u0027/galaxy/server/database/objects/5/6/5/dataset_56553465-9ad6-424d-84f2-1c1a68f34813.dat\u0027 \u0027cutadapt_small_fastq.fq\u0027 \u0026\u0026  cutadapt  -j=${GALAXY_SLOTS:-4}   -a \u0027AGATCGGAAGAGC\u0027    --error-rate=0.1 --times=1 --overlap=3    --action=trim         --minimum-length=1      -o \u0027out1.fq\u0027  \u0027cutadapt_small_fastq.fq\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-10-14T07:11:06.021710",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-2wwqg",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "29cc7028ff4632f4",  "inputs": {   "library|input_1": {    "id": "f6701fb611f9069b",    "src": "hda",    "uuid": "56553465-9ad6-424d-84f2-1c1a68f34813"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "out1": {    "id": "1dddfef25edc90ce",    "src": "hda",    "uuid": "99b131e4-b654-4fba-b2fc-850285fdfbfc"   }  },  "params": {   "__input_ext": "\"input\"",   "adapter_options": "{\"action\": \"trim\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}",   "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 189, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"AGATCGGAAGAGC\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}",   "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}",   "output_selector": null,   "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}"  },  "state": "error",  "stderr": "",  "stdout": "This is cutadapt 4.9 with Python 3.12.7\nCommand line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 5 cores ...\nFinished in 0.033 s (10848.284 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3\u0027; Length: 13; Trimmed: 0 times\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1",  "tool_stderr": "",  "tool_stdout": "This is cutadapt 4.9 with Python 3.12.7\nCommand line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 5 cores ...\nFinished in 0.033 s (10848.284 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         0 (0.0%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: AGATCGGAAGAGC; Type: regular 3\u0027; Length: 13; Trimmed: 0 times\n",  "update_time": "2024-10-14T07:11:12.088618",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 0, "time_seconds": 24.652881622314453, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.033 s (10848.284 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #2)" name="1" time="32.09993767738342">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 5 cores ...Finished in 0.086 s (869.515 µs/read; 0.07 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         2 (2.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):            99 (100.0%)Total basepairs processed:        24,849 bpTotal written (filtered):         24,843 bp (100.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #2)" name="1" time="31.28785729408264">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 5 cores ...Finished in 0.085 s (861.011 µs/read; 0.07 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         2 (2.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):            99 (100.0%)Total basepairs processed:        24,849 bpTotal written (filtered):         24,843 bp (100.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #11)" name="10" time="32.239848375320435">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -g A1=^GTCGGTAA -g A2=^AGGTCACT --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o split/{name}.fastq cutadapt_in_split_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.049 s (4430.923 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                      11Reads with adapters:                        10 (90.9%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads discarded as untrimmed:                0 (0.0%)Reads written (passing filters):            11 (100.0%)Total basepairs processed:         1,210 bpTotal written (filtered):          1,130 bp (93.4%)=== Adapter A1 ===Sequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005=== Adapter A2 ===Sequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #11)" name="10" time="32.251346588134766">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -g A1=^GTCGGTAA -g A2=^AGGTCACT --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o split/{name}.fastq cutadapt_in_split_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.053 s (4774.570 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                      11Reads with adapters:                        10 (90.9%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads discarded as untrimmed:                0 (0.0%)Reads written (passing filters):            11 (100.0%)Total basepairs processed:         1,210 bpTotal written (filtered):          1,130 bp (93.4%)=== Adapter A1 ===Sequence: GTCGGTAA; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005=== Adapter A2 ===Sequence: AGGTCACT; Type: anchored 5'; Length: 8; Trimmed: 5 timesNo. of allowed errors: 0Overview of removed sequenceslengthcountexpectmax.errerror counts850.005
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #12)" name="11" time="19.084796905517578">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 11, "time_seconds": 19.084796905517578, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #12)" name="11" time="11.412254333496094">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 11, "time_seconds": 11.412254333496094, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #13)" name="12" time="30.56485104560852">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AAAT --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --untrimmed-output=untrimmed_output.fq -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.038 s (12833.277 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             1 (33.3%)Total basepairs processed:           102 bpTotal written (filtered):             30 bp (29.4%)=== Adapter 1 ===Sequence: AAAT; Type: regular 3'; Length: 4; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-4 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 100.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts410.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #13)" name="12" time="31.361584901809692">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AAAT --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --untrimmed-output=untrimmed_output.fq -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.037 s (12209.813 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             1 (33.3%)Total basepairs processed:           102 bpTotal written (filtered):             30 bp (29.4%)=== Adapter 1 ===Sequence: AAAT; Type: regular 3'; Length: 4; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-4 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 100.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts410.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #14)" name="13" time="32.48226308822632">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --untrimmed-output=untrimmed_output.fq.gz -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 5 cores ...Finished in 0.148 s (1494.083 µs/read; 0.04 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         2 (2.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             2 (2.0%)Total basepairs processed:        24,849 bpTotal written (filtered):            496 bp (2.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #14)" name="13" time="33.29490923881531">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --untrimmed-output=untrimmed_output.fq.gz -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 5 cores ...Finished in 0.144 s (1456.723 µs/read; 0.04 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         2 (2.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             2 (2.0%)Total basepairs processed:        24,849 bpTotal written (filtered):            496 bp (2.0%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #15)" name="14" time="33.94451546669006">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-untrimmed --minimum-length=1 --maximum-length=1000 --max-n=0.0 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.145 s (1467.893 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                    0 (0.0%)Pairs with too many N:                       0 (0.0%)Pairs written (passing filters):             2 (2.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):            998 bp (2.0%)  Read 1:           496 bp  Read 2:           502 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #15)" name="14" time="33.13681888580322">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-untrimmed --minimum-length=1 --maximum-length=1000 --max-n=0.0 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.146 s (1471.994 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                    0 (0.0%)Pairs with too many N:                       0 (0.0%)Pairs written (passing filters):             2 (2.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):            998 bp (2.0%)  Read 1:           496 bp  Read 2:           502 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #16)" name="15" time="31.776079416275024">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --cut=5 --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.032 s (10612.806 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             87 bp (85.3%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #16)" name="15" time="10.909388542175293">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 15, "time_seconds": 10.909388542175293, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #17)" name="16" time="31.36886429786682">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --cut=5 --minimum-length=1 --rename={id} barcode={cut_prefix} -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.032 s (10623.614 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             87 bp (85.3%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #17)" name="16" time="31.37362051010132">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --cut=5 --minimum-length=1 --rename={id} barcode={cut_prefix} -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.032 s (10631.720 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             87 bp (85.3%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #18)" name="17" time="32.14602875709534">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=retain --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.034 s (11223.555 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             80 bp (78.4%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #18)" name="17" time="32.90845251083374">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=retain --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.033 s (11100.133 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             80 bp (78.4%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #19)" name="18" time="33.23897337913513">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=mask --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.035 s (11567.354 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #19)" name="18" time="32.146602153778076">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=mask --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.037 s (12294.769 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #20)" name="19" time="24.126416444778442">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "adapter_options|action": "lowercase",  "library|input_1": {   "id": "06065c916c252062",   "src": "hda"  },  "library|r1|adapters_0|adapter_source|adapter": "CGTCCGAANTAG",  "library|r1|adapters_0|adapter_source|adapter_source_list": "user",  "library|type": "single" }, "job": {  "command_line": "ln -f -s \u0027/galaxy/server/database/objects/5/f/b/dataset_5fb1a65a-a9d3-47f7-89a2-bdb208976226.dat\u0027 \u0027cutadapt_small_fastq.fq\u0027 \u0026\u0026  cutadapt  -j=${GALAXY_SLOTS:-4}   -a \u0027CGTCCGAANTAG\u0027    --error-rate=0.1 --times=1 --overlap=3    --action=lowercase         --minimum-length=1      -o \u0027out1.fq\u0027  \u0027cutadapt_small_fastq.fq\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-10-14T06:57:35.430260",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-cmlfm",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "aea399ac6ee72b81",  "inputs": {   "library|input_1": {    "id": "06065c916c252062",    "src": "hda",    "uuid": "5fb1a65a-a9d3-47f7-89a2-bdb208976226"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "out1": {    "id": "28283965eade59ac",    "src": "hda",    "uuid": "734ec05e-3ed2-4157-878b-0a5a68d7a8ee"   }  },  "params": {   "__input_ext": "\"input\"",   "adapter_options": "{\"action\": \"lowercase\", \"error_rate\": \"0.1\", \"match_read_wildcards\": false, \"no_indels\": false, \"no_match_adapter_wildcards\": true, \"overlap\": \"3\", \"revcomp\": false, \"times\": \"1\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "filter_options": "{\"discard_casava\": false, \"discard_trimmed\": false, \"discard_untrimmed\": false, \"max_average_error_rate\": \"\", \"max_expected_errors\": \"\", \"max_n\": \"\", \"maximum_length\": \"\", \"maximum_length2\": \"\", \"minimum_length\": \"1\", \"minimum_length2\": \"\", \"pair_filter\": \"any\"}",   "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 118, \"src\": \"hda\"}]}, \"r1\": {\"adapters\": [{\"__index__\": 0, \"adapter_source\": {\"__current_case__\": 0, \"adapter\": \"CGTCCGAANTAG\", \"adapter_name\": \"\", \"adapter_source_list\": \"user\"}, \"single_noindels\": false}], \"anywhere_adapters\": [], \"front_adapters\": []}, \"type\": \"single\"}",   "other_trimming_options": "{\"cut\": \"0\", \"cut2\": \"0\", \"nextseq_trim\": \"0\", \"poly_a\": false, \"quality_cutoff\": \"0\", \"quality_cutoff2\": \"\", \"shorten_options\": {\"__current_case__\": 1, \"shorten_values\": \"False\"}, \"shorten_options_r2\": {\"__current_case__\": 1, \"shorten_values_r2\": \"False\"}, \"trim_n\": false}",   "output_selector": null,   "read_mod_options": "{\"length_tag\": null, \"rename\": null, \"strip_suffix\": null, \"zero_cap\": false}"  },  "state": "error",  "stderr": "",  "stdout": "This is cutadapt 4.9 with Python 3.12.7\nCommand line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=lowercase --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 5 cores ...\nFinished in 0.032 s (10681.073 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3\u0027; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1",  "tool_stderr": "",  "tool_stdout": "This is cutadapt 4.9 with Python 3.12.7\nCommand line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=lowercase --minimum-length=1 -o out1.fq cutadapt_small_fastq.fq\nProcessing single-end reads on 5 cores ...\nFinished in 0.032 s (10681.073 \u00b5s/read; 0.01 M reads/minute).\n\n=== Summary ===\n\nTotal reads processed:                       3\nReads with adapters:                         1 (33.3%)\n\n== Read fate breakdown ==\nReads that were too short:                   0 (0.0%)\nReads written (passing filters):             3 (100.0%)\n\nTotal basepairs processed:           102 bp\nTotal written (filtered):            102 bp (100.0%)\n\n=== Adapter 1 ===\n\nSequence: CGTCCGAANTAG; Type: regular 3\u0027; Length: 12; Trimmed: 1 times\n\nMinimum overlap: 3\nNo. of allowed errors:\n1-9 bp: 0; 10-11 bp: 1\n\nBases preceding removed adapters:\n  A: 0.0%\n  C: 0.0%\n  G: 0.0%\n  T: 0.0%\n  none/other: 100.0%\n\nOverview of removed sequences\nlength\tcount\texpect\tmax.err\terror counts\n34\t1\t0.0\t1\t1\n",  "update_time": "2024-10-14T06:57:40.515480",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/lparsons/cutadapt/cutadapt/4.9+galaxy1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 19, "time_seconds": 24.126416444778442, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=lowercase --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.032 s (10681.073 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #20)" name="19" time="10.553949356079102">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 19, "time_seconds": 10.553949356079102, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #3)" name="2" time="32.32849860191345">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.159 s (1610.486 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,677 bp (100.0%)  Read 1:        24,843 bp  Read 2:        24,834 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #3)" name="2" time="34.58710861206055">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.159 s (1602.385 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,677 bp (100.0%)  Read 1:        24,843 bp  Read 2:        24,834 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #21)" name="20" time="31.301433563232422">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=crop --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.030 s (10116.100 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             80 bp (78.4%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #21)" name="20" time="31.00340962409973">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=crop --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.031 s (10476.589 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             80 bp (78.4%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #22)" name="21" time="30.95724606513977">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=none --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.033 s (11145.353 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #22)" name="21" time="31.717918395996094">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a CGTCCGAANTAG --error-rate=0.1 --times=1 --overlap=3 --action=none --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.030 s (10163.148 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: CGTCCGAANTAG; Type: regular 3'; Length: 12; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-11 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #23)" name="22" time="31.259948253631592">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a TAAACAGATTAGT --error-rate=0.1 --times=1 --overlap=3 --action=trim --rc --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.032 s (10509.411 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reverse-complemented:                        0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             97 bp (95.1%)=== Adapter 1 ===Sequence: TAAACAGATTAGT; Type: regular 3'; Length: 13; Trimmed: 1 times; Reverse-complemented: 0 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 100.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts510.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #23)" name="22" time="12.060151815414429">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 22, "time_seconds": 12.060151815414429, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #24)" name="23" time="33.43864369392395">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a ATCTGGTTCC -A CTACAAG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=30:10 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.170 s (1720.272 µs/read; 0.03 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                      32 (32.3%)  Read 2 with adapter:                      15 (15.2%)== Read fate breakdown ==Pairs that were too short:                   3 (3.0%)Pairs written (passing filters):            96 (97.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):         38,492 bp (79.7%)  Read 1:        17,741 bp  Read 2:        20,751 bp=== First read: Adapter 1 ===Sequence: ATCTGGTTCC; Type: regular 3'; Length: 10; Trimmed: 32 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 90.6%  G: 3.1%  T: 0.0%  none/other: 6.2%WARNING:    The adapter is preceded by 'C' extremely often.    The provided adapter sequence could be incomplete at its 5' end.    Ignore this warning when trimming primers.Overview of removed sequenceslengthcountexpectmax.errerror counts321.5021310.0111410.01120110.01120310.01120820.01220910.01121110.01121420.01221720.01221810.01122210.01122610.01122720.01222810.01122910.01123220.01223810.01124270.01725110.010 1=== Second read: Adapter 2 ===Sequence: CTACAAG; Type: regular 3'; Length: 7; Trimmed: 15 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 73.3%  G: 0.0%  T: 0.0%  none/other: 26.7%Overview of removed sequenceslengthcountexpectmax.errerror counts810.00122820.00222910.00123830.00324110.00124310.00124610.00124810.00125010.00125130.003WARNING:    One or more of your adapter sequences may be incomplete.    Please see the detailed output above.
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #24)" name="23" time="32.667760133743286">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a ATCTGGTTCC -A CTACAAG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=30:10 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.158 s (1599.668 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                      32 (32.3%)  Read 2 with adapter:                      15 (15.2%)== Read fate breakdown ==Pairs that were too short:                   3 (3.0%)Pairs written (passing filters):            96 (97.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):         38,492 bp (79.7%)  Read 1:        17,741 bp  Read 2:        20,751 bp=== First read: Adapter 1 ===Sequence: ATCTGGTTCC; Type: regular 3'; Length: 10; Trimmed: 32 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 90.6%  G: 3.1%  T: 0.0%  none/other: 6.2%WARNING:    The adapter is preceded by 'C' extremely often.    The provided adapter sequence could be incomplete at its 5' end.    Ignore this warning when trimming primers.Overview of removed sequenceslengthcountexpectmax.errerror counts321.5021310.0111410.01120110.01120310.01120820.01220910.01121110.01121420.01221720.01221810.01122210.01122610.01122720.01222810.01122910.01123220.01223810.01124270.01725110.010 1=== Second read: Adapter 2 ===Sequence: CTACAAG; Type: regular 3'; Length: 7; Trimmed: 15 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 73.3%  G: 0.0%  T: 0.0%  none/other: 26.7%Overview of removed sequenceslengthcountexpectmax.errerror counts810.00122820.00222910.00123830.00324110.00124310.00124610.00124810.00125010.00125130.003WARNING:    One or more of your adapter sequences may be incomplete.    Please see the detailed output above.
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #25)" name="24" time="34.558382511138916">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --maximum-length=50:30 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.162 s (1631.337 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                   96 (97.0%)Pairs written (passing filters):             3 (3.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):             99 bp (0.2%)  Read 1:            51 bp  Read 2:            48 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #25)" name="24" time="11.47575306892395">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 24, "time_seconds": 11.47575306892395, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #26)" name="25" time="33.468937397003174">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10 --maximum-length=50:30 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.148 s (1492.337 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                   96 (97.0%)Pairs written (passing filters):             3 (3.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):             99 bp (0.2%)  Read 1:            51 bp  Read 2:            48 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #26)" name="25" time="35.060535192489624">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10 --maximum-length=50:30 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.146 s (1473.285 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                   96 (97.0%)Pairs written (passing filters):             3 (3.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):             99 bp (0.2%)  Read 1:            51 bp  Read 2:            48 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #27)" name="26" time="34.553701639175415">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=10:10 --maximum-length=50 --pair-filter=both -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.146 s (1472.536 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs that were too long:                   96 (97.0%)Pairs written (passing filters):             3 (3.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):             99 bp (0.2%)  Read 1:            51 bp  Read 2:            48 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #27)" name="26" time="18.760287761688232">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 26, "time_seconds": 18.760287761688232, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #28)" name="27" time="30.18004560470581">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=10 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.031 s (10462.523 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             20 bp (19.6%)=== Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #28)" name="27" time="33.030232191085815">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=10 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.035 s (11681.239 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             20 bp (19.6%)=== Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #29)" name="28" time="31.09792995452881">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=-10 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.033 s (11090.279 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             20 bp (19.6%)=== Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #29)" name="28" time="32.90953874588013">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=-10 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.031 s (10236.422 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         1 (33.3%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):             20 bp (19.6%)=== Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #30)" name="29" time="33.37470889091492">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGCCGCTANGACG -A AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=10 -L -10 -o out1.fq -p out2.fq cutadapt_small_fastq_1.fq cutadapt_small_fastq_2.fqProcessing paired-end reads on 5 cores ...Finished in 0.051 s (16842.047 µs/read; 0.00 M reads/minute).=== Summary ===Total read pairs processed:                  3  Read 1 with adapter:                       1 (33.3%)  Read 2 with adapter:                       1 (33.3%)Pairs written (passing filters):             3 (100.0%)Total basepairs processed:           204 bp  Read 1:           102 bp  Read 2:           102 bpTotal written (filtered):             40 bp (19.6%)  Read 1:            20 bp  Read 2:            20 bp=== First read: Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011=== Second read: Adapter 2 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #30)" name="29" time="34.54724049568176">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGCCGCTANGACG -A AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --length=10 -L -10 -o out1.fq -p out2.fq cutadapt_small_fastq_1.fq cutadapt_small_fastq_2.fqProcessing paired-end reads on 5 cores ...Finished in 0.050 s (16737.700 µs/read; 0.00 M reads/minute).=== Summary ===Total read pairs processed:                  3  Read 1 with adapter:                       1 (33.3%)  Read 2 with adapter:                       1 (33.3%)Pairs written (passing filters):             3 (100.0%)Total basepairs processed:           204 bp  Read 1:           102 bp  Read 2:           102 bpTotal written (filtered):             40 bp (19.6%)  Read 1:            20 bp  Read 2:            20 bp=== First read: Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011=== Second read: Adapter 2 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #4)" name="3" time="17.60059881210327">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 3, "time_seconds": 17.60059881210327, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #4)" name="3" time="33.85815906524658">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.158 s (1600.326 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,677 bp (100.0%)  Read 1:        24,843 bp  Read 2:        24,834 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #31)" name="30" time="33.154714584350586">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -A AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim -L 10 -o out1.fq -p out2.fq cutadapt_small_fastq_1.fq cutadapt_small_fastq_2.fqProcessing paired-end reads on 5 cores ...Finished in 0.038 s (12631.655 µs/read; 0.00 M reads/minute).=== Summary ===Total read pairs processed:                  3  Read 2 with adapter:                       1 (33.3%)Pairs written (passing filters):             3 (100.0%)Total basepairs processed:           204 bp  Read 1:           102 bp  Read 2:           102 bpTotal written (filtered):            122 bp (59.8%)  Read 1:           102 bp  Read 2:            20 bp=== Second read: Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #31)" name="30" time="33.319782972335815">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -A AGCCGCTANGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim -L 10 -o out1.fq -p out2.fq cutadapt_small_fastq_1.fq cutadapt_small_fastq_2.fqProcessing paired-end reads on 5 cores ...Finished in 0.041 s (13529.221 µs/read; 0.00 M reads/minute).=== Summary ===Total read pairs processed:                  3  Read 2 with adapter:                       1 (33.3%)Pairs written (passing filters):             3 (100.0%)Total basepairs processed:           204 bp  Read 1:           102 bp  Read 2:           102 bpTotal written (filtered):            122 bp (59.8%)  Read 1:           102 bp  Read 2:            20 bp=== Second read: Adapter 1 ===Sequence: AGCCGCTANGACG; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-12 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 0.0%  none/other: 100.0%Overview of removed sequenceslengthcountexpectmax.errerror counts3410.011
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #32)" name="31" time="32.05774188041687">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGCGGCTTAGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --max-ee=10.0 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.032 s (10789.712 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads with too many exp. errors:             0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: AGCGGCTTAGACG; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #32)" name="31" time="32.26950812339783">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGCGGCTTAGACG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --max-ee=10.0 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.032 s (10688.941 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads with too many exp. errors:             0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: AGCGGCTTAGACG; Type: regular 3'; Length: 13; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #33)" name="32" time="31.306524753570557">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a GAANTAGCTACCACX --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.031 s (10326.703 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         0 (0.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:           102 bpTotal written (filtered):            102 bp (100.0%)=== Adapter 1 ===Sequence: GAANTAGCTACCAC; Type: non-internal 3'; Length: 14; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #33)" name="32" time="11.746834754943848">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 32, "time_seconds": 11.746834754943848, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #34)" name="33" time="11.790679216384888">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 33, "time_seconds": 11.790679216384888, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #34)" name="33" time="34.7408812046051">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGCX -A AGATCGGAAGAGCX --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_assimetric_fq_gz.fq.gz bwa-mem-fastq2_assimetric_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.161 s (1631.183 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        48,291 bp  Read 1:        24,147 bp  Read 2:        24,144 bpTotal written (filtered):         48,270 bp (100.0%)  Read 1:        24,141 bp  Read 2:        24,129 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: non-internal 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #35)" name="34" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 34, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #35)" name="34" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 34, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #36)" name="35" time="11.052685737609863">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 35, "time_seconds": 11.052685737609863, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #36)" name="35" time="33.21852993965149">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC;noindels -A AGATCGGAAGAGC;noindels --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.157 s (1587.733 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       4 (4.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,677 bp (100.0%)  Read 1:        24,843 bp  Read 2:        24,834 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 50.0%  T: 50.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502410.401510.101
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #37)" name="36" time="33.85696744918823">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=5 -Q 15,20 --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.157 s (1583.521 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpQuality-trimmed:                     747 bp (1.5%)  Read 1:             0 bp  Read 2:           747 bpTotal written (filtered):         48,938 bp (98.5%)  Read 1:        24,843 bp  Read 2:        24,095 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 100.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts311.501410.401
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #37)" name="36" time="32.35186767578125">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=5 -Q 15,20 --minimum-length=1 -o out1.fq.gz -p out2.fq.gz Unnamed Collection_1.fq.gz Unnamed Collection_2.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.158 s (1597.412 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       2 (2.0%)  Read 2 with adapter:                       2 (2.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpQuality-trimmed:                     747 bp (1.5%)  Read 1:             0 bp  Read 2:           747 bpTotal written (filtered):         48,938 bp (98.5%)  Read 1:        24,843 bp  Read 2:        24,095 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 50.0%  G: 50.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts321.502=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 100.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts311.501410.401
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #38)" name="37" time="10.633684396743774">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 37, "time_seconds": 10.633684396743774, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #38)" name="37" time="11.395458221435547">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 37, "time_seconds": 11.395458221435547, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #39)" name="38" time="32.62715935707092">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA --error-rate=0.1 --times=1 --overlap=10 --action=trim --minimum-length=1 -o out1.fa polya_1_fasta.faProcessing single-end reads on 5 cores ...Finished in 0.034 s (8569.658 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       4Reads with adapters:                         3 (75.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             4 (100.0%)Total basepairs processed:           194 bpTotal written (filtered):             96 bp (49.5%)=== Adapter 1 ===Sequence: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; Type: regular 3'; Length: 35; Trimmed: 3 timesMinimum overlap: 10No. of allowed errors:1-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2; 30-35 bp: 3Bases preceding removed adapters:  A: 0.0%  C: 33.3%  G: 66.7%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts2610.020 0 13010.030 0 0 14210.030 1
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #39)" name="38" time="31.050393104553223">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA --error-rate=0.1 --times=1 --overlap=10 --action=trim --minimum-length=1 -o out1.fa polya_1_fasta.faProcessing single-end reads on 5 cores ...Finished in 0.032 s (8123.040 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       4Reads with adapters:                         3 (75.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             4 (100.0%)Total basepairs processed:           194 bpTotal written (filtered):             96 bp (49.5%)=== Adapter 1 ===Sequence: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; Type: regular 3'; Length: 35; Trimmed: 3 timesMinimum overlap: 10No. of allowed errors:1-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2; 30-35 bp: 3Bases preceding removed adapters:  A: 0.0%  C: 33.3%  G: 66.7%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts2610.020 0 13010.030 0 0 14210.030 1
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #40)" name="39" time="30.957321643829346">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a A{35} --error-rate=0.1 --times=1 --overlap=10 --action=trim --minimum-length=1 -o out1.fa polya_1_fasta.faProcessing single-end reads on 5 cores ...Finished in 0.032 s (8075.356 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       4Reads with adapters:                         3 (75.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             4 (100.0%)Total basepairs processed:           194 bpTotal written (filtered):             96 bp (49.5%)=== Adapter 1 ===Sequence: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; Type: regular 3'; Length: 35; Trimmed: 3 timesMinimum overlap: 10No. of allowed errors:1-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2; 30-35 bp: 3Bases preceding removed adapters:  A: 0.0%  C: 33.3%  G: 66.7%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts2610.020 0 13010.030 0 0 14210.030 1
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #40)" name="39" time="32.09533095359802">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a A{35} --error-rate=0.1 --times=1 --overlap=10 --action=trim --minimum-length=1 -o out1.fa polya_1_fasta.faProcessing single-end reads on 5 cores ...Finished in 0.033 s (8160.710 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       4Reads with adapters:                         3 (75.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             4 (100.0%)Total basepairs processed:           194 bpTotal written (filtered):             96 bp (49.5%)=== Adapter 1 ===Sequence: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; Type: regular 3'; Length: 35; Trimmed: 3 timesMinimum overlap: 10No. of allowed errors:1-9 bp: 0; 10-19 bp: 1; 20-29 bp: 2; 30-35 bp: 3Bases preceding removed adapters:  A: 0.0%  C: 33.3%  G: 66.7%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts2610.020 0 13010.030 0 0 14210.030 1
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #5)" name="4" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 4, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #5)" name="4" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 4, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #41)" name="40" time="10.57149052619934">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 40, "time_seconds": 10.57149052619934, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #41)" name="40" time="30.988029718399048">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 --error-rate=0.1 --times=1 --overlap=3 --action=trim --poly-a --minimum-length=1 -o out1.fa polya_1_fasta.faProcessing single-end reads on 5 cores ...Finished in 0.023 s (5703.568 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       4== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             4 (100.0%)Total basepairs processed:           194 bpPoly-A-trimmed:                       84 bp (43.3%)Total written (filtered):            110 bp (56.7%)=== Poly-A trimmed ===lengthcount01212421
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #42)" name="41" time="30.965556383132935">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fa.gz simple_fasta_gz.fa.gzProcessing single-end reads on 5 cores ...Finished in 0.077 s (38626.909 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       2== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             2 (100.0%)Total basepairs processed:            18 bpTotal written (filtered):             18 bp (100.0%)
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #42)" name="41" time="51.5880560874939">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fa.gz simple_fasta_gz.fa.gzProcessing single-end reads on 5 cores ...Finished in 0.083 s (41355.133 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       2== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             2 (100.0%)Total basepairs processed:            18 bpTotal written (filtered):             18 bp (100.0%)
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #43)" name="42" time="31.2956063747406">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a XXXXXX --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=10 --quality-base=64 -o out1.fq illumina64_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.035 s (1742.029 µs/read; 0.03 M reads/minute).=== Summary ===Total reads processed:                      20Reads with adapters:                         0 (0.0%)Reads written (passing filters):            20 (100.0%)Total basepairs processed:         1,900 bpQuality-trimmed:                   1,021 bp (53.7%)Total written (filtered):            879 bp (46.3%)=== Adapter 1 ===Sequence: XXXXXX; Type: regular 3'; Length: 6; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #43)" name="42" time="31.343115091323853">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a XXXXXX --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=10 --quality-base=64 -o out1.fq illumina64_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.031 s (1564.348 µs/read; 0.04 M reads/minute).=== Summary ===Total reads processed:                      20Reads with adapters:                         0 (0.0%)Reads written (passing filters):            20 (100.0%)Total basepairs processed:         1,900 bpQuality-trimmed:                   1,021 bp (53.7%)Total written (filtered):            879 bp (46.3%)=== Adapter 1 ===Sequence: XXXXXX; Type: regular 3'; Length: 6; Trimmed: 0 times
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #44)" name="43" time="32.0526442527771">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=10 --quality-base=64 -o out1.fq illumina64_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.023 s (1129.282 µs/read; 0.05 M reads/minute).=== Summary ===Total reads processed:                      20Reads written (passing filters):            20 (100.0%)Total basepairs processed:         1,900 bpQuality-trimmed:                   1,021 bp (53.7%)Total written (filtered):            879 bp (46.3%)
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #44)" name="43" time="31.72477078437805">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 --error-rate=0.1 --times=1 --overlap=3 --action=trim --quality-cutoff=10 --quality-base=64 -o out1.fq illumina64_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.024 s (1203.597 µs/read; 0.05 M reads/minute).=== Summary ===Total reads processed:                      20Reads written (passing filters):            20 (100.0%)Total basepairs processed:         1,900 bpQuality-trimmed:                   1,021 bp (53.7%)Total written (filtered):            879 bp (46.3%)
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #45)" name="44" time="33.120361328125">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #45)" name="44" time="33.94583296775818">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #46)" name="45" time="28.682566165924072">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -b ACGTACGT --error-rate=0.1 --times=1 --overlap=3 --match-read-wildcards --action=trim --minimum-length=1 -o out1.fa wildcard_fa.faProcessing single-end reads on 5 cores ...Finished in 0.032 s (16004.920 µs/read; 0.00 M reads/minute).=== Summary ===Total reads processed:                       2Reads with adapters:                         2 (100.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             2 (100.0%)Total basepairs processed:            32 bpTotal written (filtered):             16 bp (50.0%)=== Adapter 1 ===Sequence: ACGTACGT; Type: variable 5'/3'; Length: 8; Trimmed: 2 times2 times, it overlapped the 5' end of a read0 times, it overlapped the 3' end or was within the readMinimum overlap: 3No. of allowed errors:1-8 bp: 0Overview of removed sequences (5')lengthcountexpectmax.errerror counts820.002Overview of removed sequences (3' or within)lengthcountexpectmax.errerror counts
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #46)" name="45" time="11.73223352432251">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 45, "time_seconds": 11.73223352432251, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #47)" name="46" time="32.086615562438965">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a GGGGGGG --error-rate=0.0 --times=1 --overlap=3 --match-read-wildcards --action=trim --minimum-length=1 -o out1.fa wildcardN_fa.faProcessing single-end reads on 5 cores ...Finished in 0.031 s (10484.695 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         2 (66.7%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:            30 bpTotal written (filtered):             16 bp (53.3%)=== Adapter 1 ===Sequence: GGGGGGG; Type: regular 3'; Length: 7; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 100.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts720.002
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #47)" name="46" time="30.618248462677002">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a GGGGGGG --error-rate=0.0 --times=1 --overlap=3 --match-read-wildcards --action=trim --minimum-length=1 -o out1.fa wildcardN_fa.faProcessing single-end reads on 5 cores ...Finished in 0.032 s (10589.282 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         2 (66.7%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             3 (100.0%)Total basepairs processed:            30 bpTotal written (filtered):             16 bp (53.3%)=== Adapter 1 ===Sequence: GGGGGGG; Type: regular 3'; Length: 7; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 100.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts720.002
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #48)" name="47" time="31.694127082824707">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq_mispaired2_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...
            ]]></system-out>
            <system-err><![CDATA[
            Error in sequence file at unknown line: Reads are improperly paired. Read name 'M01368:8:000000000-A3GHV:1:1101:6911:8255/1' in file 1 does not match 'M01368:8:000000000-A3GHV:1:1101:14518:9998/2' in file 2.
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #48)" name="47" time="11.792673587799072">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 47, "time_seconds": 11.792673587799072, "tool_id": "cutadapt", "tool_version": "4.9+galaxy1"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #6)" name="5" time="32.13527464866638">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a TTAGACATATCTCCGTCG --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-trimmed --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.031 s (10216.872 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         2 (66.7%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             1 (33.3%)Total basepairs processed:           102 bpTotal written (filtered):             34 bp (33.3%)=== Adapter 1 ===Sequence: TTAGACATATCTCCGTCG; Type: regular 3'; Length: 18; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-18 bp: 1Bases preceding removed adapters:  A: 50.0%  C: 50.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts1010.010 11210.010 1
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #6)" name="5" time="32.55170297622681">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a TTAGACATATCTCCGTCG --error-rate=0.1 --times=1 --overlap=3 --action=trim --discard-trimmed --minimum-length=1 -o out1.fq cutadapt_small_fastq.fqProcessing single-end reads on 5 cores ...Finished in 0.035 s (11593.819 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       3Reads with adapters:                         2 (66.7%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             1 (33.3%)Total basepairs processed:           102 bpTotal written (filtered):             34 bp (33.3%)=== Adapter 1 ===Sequence: TTAGACATATCTCCGTCG; Type: regular 3'; Length: 18; Trimmed: 2 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-18 bp: 1Bases preceding removed adapters:  A: 50.0%  C: 50.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts1010.010 11210.010 1
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #7)" name="6" time="34.26144576072693">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --pair-adapters --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.159 s (1609.694 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       1 (1.0%)  Read 2 with adapter:                       1 (1.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,692 bp (100.0%)  Read 1:        24,846 bp  Read 2:        24,846 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 100.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts311.501=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 100.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts311.501
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #7)" name="6" time="33.147242069244385">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC -A AGATCGGAAGAGC --pair-adapters --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 -o out1.fq.gz -p out2.fq.gz bwa-mem-fastq1_fq_gz.fq.gz bwa-mem-fastq2_fq_gz.fq.gzProcessing paired-end reads on 5 cores ...Finished in 0.156 s (1579.834 µs/read; 0.04 M reads/minute).=== Summary ===Total read pairs processed:                 99  Read 1 with adapter:                       1 (1.0%)  Read 2 with adapter:                       1 (1.0%)== Read fate breakdown ==Pairs that were too short:                   0 (0.0%)Pairs written (passing filters):            99 (100.0%)Total basepairs processed:        49,698 bp  Read 1:        24,849 bp  Read 2:        24,849 bpTotal written (filtered):         49,692 bp (100.0%)  Read 1:        24,846 bp  Read 2:        24,846 bp=== First read: Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 100.0%  G: 0.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts311.501=== Second read: Adapter 2 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 1 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 0.0%  T: 100.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts311.501
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #8)" name="7" time="33.83477449417114">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AAAGATG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --json=stats.json -r=rest_output.fa -o out1.fa cutadapt_rest_fa.faProcessing single-end reads on 5 cores ...Finished in 0.037 s (7324.171 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       5Reads with adapters:                         5 (100.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             5 (100.0%)Total basepairs processed:            97 bpTotal written (filtered):             35 bp (36.1%)=== Adapter 1 ===Sequence: AAAGATG; Type: regular 3'; Length: 7; Trimmed: 5 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 100.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts710.0011210.0011420.0021510.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #8)" name="7" time="32.37337946891785">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AAAGATG --error-rate=0.1 --times=1 --overlap=3 --action=trim --minimum-length=1 --json=stats.json -r=rest_output.fa -o out1.fa cutadapt_rest_fa.faProcessing single-end reads on 5 cores ...Finished in 0.037 s (7381.248 µs/read; 0.01 M reads/minute).=== Summary ===Total reads processed:                       5Reads with adapters:                         5 (100.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):             5 (100.0%)Total basepairs processed:            97 bpTotal written (filtered):             35 bp (36.1%)=== Adapter 1 ===Sequence: AAAGATG; Type: regular 3'; Length: 7; Trimmed: 5 timesMinimum overlap: 3No. of allowed errors:1-7 bp: 0Bases preceding removed adapters:  A: 0.0%  C: 0.0%  G: 100.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts710.0011210.0011420.0021510.001
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #9)" name="8" time="30.92281174659729">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --nextseq-trim=20 --minimum-length=1 -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 5 cores ...Finished in 0.086 s (872.937 µs/read; 0.07 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         4 (4.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):            99 (100.0%)Total basepairs processed:        24,849 bpQuality-trimmed:                     286 bp (1.2%)Total written (filtered):         24,550 bp (98.8%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 75.0%  G: 25.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts331.503410.401
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #9)" name="8" time="30.201915979385376">
        
            
            <system-out><![CDATA[
            This is cutadapt 4.9 with Python 3.12.7Command line parameters: -j=5 -a AGATCGGAAGAGC --error-rate=0.1 --times=1 --overlap=3 --action=trim --nextseq-trim=20 --minimum-length=1 -o out1.fq.gz bwa-mem-fastq1_fq_gz.fq.gzProcessing single-end reads on 5 cores ...Finished in 0.086 s (872.395 µs/read; 0.07 M reads/minute).=== Summary ===Total reads processed:                      99Reads with adapters:                         4 (4.0%)== Read fate breakdown ==Reads that were too short:                   0 (0.0%)Reads written (passing filters):            99 (100.0%)Total basepairs processed:        24,849 bpQuality-trimmed:                     286 bp (1.2%)Total written (filtered):         24,550 bp (98.8%)=== Adapter 1 ===Sequence: AGATCGGAAGAGC; Type: regular 3'; Length: 13; Trimmed: 4 timesMinimum overlap: 3No. of allowed errors:1-9 bp: 0; 10-13 bp: 1Bases preceding removed adapters:  A: 0.0%  C: 75.0%  G: 25.0%  T: 0.0%  none/other: 0.0%Overview of removed sequenceslengthcountexpectmax.errerror counts331.503410.401
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #10)" name="9" time="32.566115856170654">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="cutadapt (Test #10)" name="9" time="33.43705415725708">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deeptools_bam_compare (Test #1)" name="0" time="45.62154483795166">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            bamFilesList: ['one.bam', 'two.bam']binLength: 5numberOfSamples: 0blackListFileName: NoneskipZeroOverZero: Falsebed_and_bin: FalsegenomeChunkSize: NonedefaultFragmentLength: read lengthnumberOfProcessors: 8verbose: Falseregion: NonebedFile: NoneminMappingQuality: NoneignoreDuplicates: FalsechrsToSkip: []stepSize: 5center_read: FalsesamFlag_include: NonesamFlag_exclude: NoneminFragmentLength: 0maxFragmentLength: 0zerosToNans: FalsesmoothLength: Nonesave_data: Falseout_file_for_raw_data: NonemaxPairedFragmentLength: 1000
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="deeptools_bam_compare (Test #2)" name="1" time="32.5205135345459">
        
            
            <system-out><![CDATA[
            Due to filtering, 83.33333333333334% of the aforementioned alignments will be used 39.16666666666667Due to filtering, 83.33333333333334% of the aforementioned alignments will be used 39.16666666666667
            ]]></system-out>
            <system-err><![CDATA[
            bamFilesList: ['one.bam', 'two.bam']binLength: 10numberOfSamples: 0blackListFileName: NoneskipZeroOverZero: Falsebed_and_bin: FalsegenomeChunkSize: NonedefaultFragmentLength: read lengthnumberOfProcessors: 8verbose: Falseregion: NonebedFile: NoneminMappingQuality: 1ignoreDuplicates: FalsechrsToSkip: []stepSize: 10center_read: FalsesamFlag_include: NonesamFlag_exclude: NoneminFragmentLength: 0maxFragmentLength: 0zerosToNans: FalsesmoothLength: Nonesave_data: Falseout_file_for_raw_data: NonemaxPairedFragmentLength: 1000
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="dropletutils_read_10x (Test #1)" name="0" time="0.34673285484313965">
        
            <error type="error" message="Input staging problem: Test input file (matrix.mtx) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (matrix.mtx) cannot be found.", "status": "error", "test_index": 0, "time_seconds": 0.34673285484313965, "tool_id": "dropletutils_read_10x", "tool_version": "1.0.4+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="fastqc (Test #1)" name="0" time="47.16456413269043">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #1)" name="0" time="35.75890588760376">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #2)" name="1" time="35.852657318115234">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #2)" name="1" time="37.02119207382202">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #3)" name="2" time="35.58115530014038">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #3)" name="2" time="28.370067596435547">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "adapters": {   "id": "f8fbef6920c50f5a",   "src": "hda"  },  "input_file": {   "id": "0bd44857bd80712b",   "src": "hda"  } }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/7/7/3/dataset_773091f9-cac6-4ee4-ac18-23b8c120f3c6.dat\u0027 \u00271000trimmed_fastq\u0027 \u0026\u0026 mkdir -p \u0027/galaxy/server/database/objects/2/a/6/dataset_2a62a46c-6e61-465a-9dce-6910dc58cc69_files\u0027 \u0026\u0026 fastqc --outdir \u0027/galaxy/server/database/objects/2/a/6/dataset_2a62a46c-6e61-465a-9dce-6910dc58cc69_files\u0027  --adapters \u0027/galaxy/server/database/objects/8/9/8/dataset_898ac824-26ae-4248-97b4-d530ac85ca53.dat\u0027  --threads ${GALAXY_SLOTS:-2} --dir ${TEMP:-$_GALAXY_JOB_TMP_DIR} --quiet --extract  --kmers 7 -f \u0027fastq\u0027 \u00271000trimmed_fastq\u0027  \u0026\u0026 cp \u0027/galaxy/server/database/objects/2/a/6/dataset_2a62a46c-6e61-465a-9dce-6910dc58cc69_files\u0027/*/fastqc_data.txt output.txt \u0026\u0026 cp \u0027/galaxy/server/database/objects/2/a/6/dataset_2a62a46c-6e61-465a-9dce-6910dc58cc69_files\u0027/*\\.html output.html",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-10-14T07:39:03.369300",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-mgjdc",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "0550727044abdcc8",  "inputs": {   "adapters": {    "id": "f8fbef6920c50f5a",    "src": "hda",    "uuid": "898ac824-26ae-4248-97b4-d530ac85ca53"   },   "input_file": {    "id": "0bd44857bd80712b",    "src": "hda",    "uuid": "773091f9-cac6-4ee4-ac18-23b8c120f3c6"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "html_file": {    "id": "0681486328dcebd7",    "src": "hda",    "uuid": "2a62a46c-6e61-465a-9dce-6910dc58cc69"   },   "text_file": {    "id": "75ef6958b28e82c1",    "src": "hda",    "uuid": "bbd0a75e-156b-4a08-b131-b4f784ef013b"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "contaminants": null,   "dbkey": "\"?\"",   "kmers": "\"7\"",   "limits": null,   "min_length": "\"\"",   "nogroup": "false"  },  "state": "error",  "stderr": "",  "stdout": "null\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.74+galaxy1",  "tool_stderr": "",  "tool_stdout": "null\n",  "update_time": "2024-10-14T07:39:11.170960",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.74+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.74+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.74+galaxy1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 2, "time_seconds": 28.370067596435547, "tool_id": "fastqc", "tool_version": "0.74+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #4)" name="3" time="35.959919452667236">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #4)" name="3" time="36.63780117034912">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #5)" name="4" time="36.777180910110474">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #5)" name="4" time="35.62781500816345">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #6)" name="5" time="34.99003791809082">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #6)" name="5" time="35.267459869384766">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #7)" name="6" time="26.5212504863739">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "input_file": {   "id": "add5c60eb8f86ea2",   "src": "hda"  },  "nogroup": true }, "job": {  "command_line": "ln -s \u0027/galaxy/server/database/objects/6/3/1/dataset_631ecbfa-4314-4fd4-9ce7-3c6e3a6a87f9.dat\u0027 \u00271000trimmed_fastq\u0027 \u0026\u0026 mkdir -p \u0027/galaxy/server/database/objects/b/8/1/dataset_b810d0a4-1c0b-40c0-a7dd-9adc4937a669_files\u0027 \u0026\u0026 fastqc --outdir \u0027/galaxy/server/database/objects/b/8/1/dataset_b810d0a4-1c0b-40c0-a7dd-9adc4937a669_files\u0027   --threads ${GALAXY_SLOTS:-2} --dir ${TEMP:-$_GALAXY_JOB_TMP_DIR} --quiet --extract --nogroup --kmers 7 -f \u0027fastq\u0027 \u00271000trimmed_fastq\u0027  \u0026\u0026 cp \u0027/galaxy/server/database/objects/b/8/1/dataset_b810d0a4-1c0b-40c0-a7dd-9adc4937a669_files\u0027/*/fastqc_data.txt output.txt \u0026\u0026 cp \u0027/galaxy/server/database/objects/b/8/1/dataset_b810d0a4-1c0b-40c0-a7dd-9adc4937a669_files\u0027/*\\.html output.html",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-10-14T07:36:45.097616",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-lzkfq",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "de570e00a2bfc90c",  "inputs": {   "input_file": {    "id": "add5c60eb8f86ea2",    "src": "hda",    "uuid": "631ecbfa-4314-4fd4-9ce7-3c6e3a6a87f9"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "html_file": {    "id": "92c478d08058ca39",    "src": "hda",    "uuid": "b810d0a4-1c0b-40c0-a7dd-9adc4937a669"   },   "text_file": {    "id": "b17d33e3165965c3",    "src": "hda",    "uuid": "64b3e5eb-70bc-4d14-a325-44d96b88abfa"   }  },  "params": {   "__input_ext": "\"input\"",   "adapters": null,   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "contaminants": null,   "dbkey": "\"?\"",   "kmers": "\"7\"",   "limits": null,   "min_length": "\"\"",   "nogroup": "true"  },  "state": "error",  "stderr": "",  "stdout": "null\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.74+galaxy1",  "tool_stderr": "",  "tool_stdout": "null\n",  "update_time": "2024-10-14T07:36:52.079440",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.74+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.74+galaxy1, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.74+galaxy1, exit_code: None, stderr: ." ], "status": "failure", "test_index": 6, "time_seconds": 26.5212504863739, "tool_id": "fastqc", "tool_version": "0.74+galaxy1"}
                ]]></error>
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #7)" name="6" time="36.152276039123535">
        
            
            <system-out><![CDATA[
            null
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #8)" name="7" time="36.360719203948975">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="fastqc (Test #8)" name="7" time="36.33395743370056">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="jq (Test #1)" name="0" time="10.321885108947754">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 0, "time_seconds": 10.321885108947754, "tool_id": "jq", "tool_version": "1.0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="jq (Test #2)" name="1" time="32.63521862030029">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_hist (Test #1)" name="0" time="114.28604578971863">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_hist (Test #2)" name="1" time="33.24595022201538">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="poretools_hist (Test #3)" name="2" time="34.705085039138794">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #1)" name="0" time="83.67433214187622">
        
            
            <system-out><![CDATA[
            Oct 14 07:43:05 ..... started STAR runOct 14 07:43:05 ... starting to generate Genome filesOct 14 07:43:05 ..... processing annotations GTFOct 14 07:43:05 ... starting to sort Suffix Array. This may take a long time...Oct 14 07:43:05 ... sorting Suffix Array chunks and saving them to disk...Oct 14 07:43:05 ... loading chunks from disk, packing SA...Oct 14 07:43:05 ... finished generating suffix arrayOct 14 07:43:05 ... generating Suffix Array indexOct 14 07:43:05 ... completed Suffix Array indexOct 14 07:43:05 ..... inserting junctions into the genome indicesOct 14 07:43:05 ... writing Genome to disk ...Oct 14 07:43:05 ... writing Suffix Array to disk ...Oct 14 07:43:05 ... writing SAindex to diskOct 14 07:43:05 ..... finished successfullyOct 14 07:43:05 ..... started STAR runOct 14 07:43:06 ..... loading genomeOct 14 07:43:06 ..... started mappingOct 14 07:43:23 ..... finished mappingOct 14 07:43:23 ..... started Solo countingOct 14 07:43:23 ..... finished Solo countingOct 14 07:43:23 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #1)" name="0" time="28.018532752990723">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 0, "time_seconds": 28.018532752990723, "tool_id": "rna_starsolo", "tool_version": "2.7.8a"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #2)" name="1" time="78.57065629959106">
        
            
            <system-out><![CDATA[
            Oct 14 07:44:25 ..... started STAR runOct 14 07:44:25 ... starting to generate Genome filesOct 14 07:44:25 ..... processing annotations GTFOct 14 07:44:25 ... starting to sort Suffix Array. This may take a long time...Oct 14 07:44:25 ... sorting Suffix Array chunks and saving them to disk...Oct 14 07:44:25 ... loading chunks from disk, packing SA...Oct 14 07:44:25 ... finished generating suffix arrayOct 14 07:44:25 ... generating Suffix Array indexOct 14 07:44:25 ... completed Suffix Array indexOct 14 07:44:25 ..... inserting junctions into the genome indicesOct 14 07:44:25 ... writing Genome to disk ...Oct 14 07:44:25 ... writing Suffix Array to disk ...Oct 14 07:44:25 ... writing SAindex to diskOct 14 07:44:25 ..... finished successfullyOct 14 07:44:25 ..... started STAR runOct 14 07:44:25 ..... loading genomeOct 14 07:44:25 ..... started mappingOct 14 07:44:43 ..... finished mappingOct 14 07:44:43 ..... started Solo countingOct 14 07:44:43 ..... finished Solo countingOct 14 07:44:43 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #2)" name="1" time="24.981083631515503">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 1, "time_seconds": 24.981083631515503, "tool_id": "rna_starsolo", "tool_version": "2.7.8a"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #3)" name="2" time="27.897279977798462">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 2, "time_seconds": 27.897279977798462, "tool_id": "rna_starsolo", "tool_version": "2.7.8a"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #3)" name="2" time="111.53795289993286">
        
            
            <system-out><![CDATA[
            Oct 14 07:53:19 ..... started STAR runOct 14 07:53:19 ... starting to generate Genome filesOct 14 07:53:19 ..... processing annotations GTFOct 14 07:53:19 ... starting to sort Suffix Array. This may take a long time...Oct 14 07:53:19 ... sorting Suffix Array chunks and saving them to disk...Oct 14 07:53:19 ... loading chunks from disk, packing SA...Oct 14 07:53:19 ... finished generating suffix arrayOct 14 07:53:19 ... generating Suffix Array indexOct 14 07:53:19 ... completed Suffix Array indexOct 14 07:53:19 ..... inserting junctions into the genome indicesOct 14 07:53:19 ... writing Genome to disk ...Oct 14 07:53:19 ... writing Suffix Array to disk ...Oct 14 07:53:20 ... writing SAindex to diskOct 14 07:53:20 ..... finished successfullyOct 14 07:53:20 ..... started STAR runOct 14 07:53:20 ..... loading genomeOct 14 07:53:20 ..... started mappingOct 14 07:54:11 ..... finished mappingOct 14 07:54:11 ..... started Solo countingOct 14 07:54:11 ..... finished Solo countingOct 14 07:54:11 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #4)" name="3" time="71.35832643508911">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "refGenomeSource|geneSource": "history",  "refGenomeSource|genomeFastaFiles": {   "id": "dc37211127d10442",   "src": "hda"  },  "refGenomeSource|genomeSAindexNbases": "4",  "refGenomeSource|sjdbGTFfile": {   "id": "044f00a07863e781",   "src": "hda"  },  "refGenomeSource|sjdbOverhang": "100",  "sc|input_types|input_collection": {   "id": "11d25db356339d2a",   "src": "hdca"  },  "sc|input_types|use": "list_paired",  "sc|params|chemistry": "CR3",  "sc|soloCBwhitelist": {   "id": "6aed083ee907b278",   "src": "hda"  },  "sc|soloUMIdedup": "1MM_All",  "sc|solo_type": "CB_UMI_Simple",  "solo|soloFeatures": "Gene",  "solo|soloStrand": "Forward" }, "job": {  "command_line": "mkdir -p tempstargenomedir \u0026\u0026 STAR --runMode genomeGenerate --genomeDir \u0027tempstargenomedir\u0027 --genomeFastaFiles \u0027/galaxy/server/database/objects/1/2/2/dataset_122a0ea5-36b8-4993-887c-f4c9b49dd68f.dat\u0027 --sjdbOverhang \u0027100\u0027 --sjdbGTFfile \u0027/galaxy/server/database/objects/5/a/2/dataset_5a2f0990-2920-4e8e-b1cb-bab86e26989b.dat\u0027 --genomeSAindexNbases 4 --runThreadN ${GALAXY_SLOTS:-4} \u0026\u0026  STAR  --runThreadN ${GALAXY_SLOTS:-4} --genomeLoad NoSharedMemory --genomeDir tempstargenomedir   --soloType CB_UMI_Simple   --readFilesIn /galaxy/server/database/objects/b/6/c/dataset_b6c649f0-f34e-4da8-88fe-70cd6b91f0b7.dat /galaxy/server/database/objects/c/5/8/dataset_c589862a-90c8-4a6a-929e-172ce3d458d5.dat --soloCBmatchWLtype 1MM_multi  --readFilesCommand zcat   --soloCBwhitelist \u0027/galaxy/server/database/objects/c/8/1/dataset_c81865ee-860a-4431-8ef7-68ec91fb2f26.dat\u0027 --soloBarcodeReadLength 1 --soloCBstart 1 --soloCBlen 16 --soloUMIstart 17 --soloUMIlen 12   --soloUMIfiltering - --soloStrand Forward --soloFeatures Gene --soloUMIdedup 1MM_All --quantMode TranscriptomeSAM --outSAMtype BAM Unsorted  --soloCellFilter CellRanger2.2 3000 0.99 10.0  --soloOutFormatFeaturesGeneField3 \u0027Gene Expression\u0027 \u0026\u0026 mv Solo.out/Gene Solo.out/soloFeatures \u0026\u0026 cat \u003c(echo \"Barcodes:\") Solo.out/Barcodes.stats \u003c(echo \"Genes:\") Solo.out/soloFeatures/Features.stats \u003e \u0027/galaxy/server/database/objects/5/9/2/dataset_5927c7a4-da4a-4c2a-a66c-04cec91d8cd2.dat\u0027   \u0026\u0026 addthreads=${GALAXY_SLOTS:-2} \u0026\u0026 (( addthreads-- )) \u0026\u0026 addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o \u0027/galaxy/server/database/objects/3/4/b/dataset_34ba7fc8-5109-496a-847c-6ed4913a3dc8.dat\u0027 Aligned.out.bam",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-10-14T07:45:58.416381",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-577gv",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "77dd7235ceb6ad54",  "inputs": {   "refGenomeSource|genomeFastaFiles": {    "id": "5518a7670388a1ac",    "src": "hda",    "uuid": "122a0ea5-36b8-4993-887c-f4c9b49dd68f"   },   "refGenomeSource|sjdbGTFfile": {    "id": "044f00a07863e781",    "src": "hda",    "uuid": "5a2f0990-2920-4e8e-b1cb-bab86e26989b"   },   "sc|input_types|input_collection1": {    "id": "168f25ea07cc607c",    "src": "hda",    "uuid": "c589862a-90c8-4a6a-929e-172ce3d458d5"   },   "sc|input_types|input_collection2": {    "id": "b08c120d6ffe561d",    "src": "hda",    "uuid": "b6c649f0-f34e-4da8-88fe-70cd6b91f0b7"   },   "sc|soloCBwhitelist": {    "id": "6aed083ee907b278",    "src": "hda",    "uuid": "c81865ee-860a-4431-8ef7-68ec91fb2f26"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_BAM": {    "id": "3529723692e7f0c6",    "src": "hda",    "uuid": "34ba7fc8-5109-496a-847c-6ed4913a3dc8"   },   "output_barcodes_filtered": {    "id": "8ec5c0ea41a0984c",    "src": "hda",    "uuid": "c3083fe3-d69d-4546-9e8f-4c7281d311df"   },   "output_genes_filtered": {    "id": "6add437f6bde9c32",    "src": "hda",    "uuid": "7d124e3a-5d97-4382-a6a8-0014515ac303"   },   "output_log": {    "id": "818bd27b40b5ecd2",    "src": "hda",    "uuid": "b2afde54-5092-4264-a97c-93e2432965c4"   },   "output_matrix_filtered": {    "id": "580c7815ae7e0a5c",    "src": "hda",    "uuid": "0dee17c9-9dbe-4c13-9bbe-6939617ab9d4"   },   "output_stats": {    "id": "31f937cf3847fdec",    "src": "hda",    "uuid": "5927c7a4-da4a-4c2a-a66c-04cec91d8cd2"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "refGenomeSource": "{\"__current_case__\": 1, \"geneSource\": \"history\", \"genomeFastaFiles\": {\"values\": [{\"id\": 396, \"src\": \"hda\"}]}, \"genomeSAindexNbases\": \"4\", \"sjdbGTFfile\": {\"values\": [{\"id\": 392, \"src\": \"hda\"}]}, \"sjdbOverhang\": \"100\"}",   "sc": "{\"__current_case__\": 0, \"input_types\": {\"__current_case__\": 1, \"input_collection\": {\"values\": [{\"id\": 14, \"src\": \"hdca\"}]}, \"use\": \"list_paired\"}, \"params\": {\"__current_case__\": 1, \"chemistry\": \"CR3\"}, \"soloBarcodeReadLength\": true, \"soloCBmatchWLtype\": \"1MM_multi\", \"soloCBwhitelist\": {\"values\": [{\"id\": 395, \"src\": \"hda\"}]}, \"soloUMIdedup\": \"1MM_All\", \"solo_type\": \"CB_UMI_Simple\"}",   "solo": "{\"filter\": {\"__current_case__\": 0, \"filter_type\": \"cellranger2\", \"max_min_ratio\": \"10.0\", \"max_perc\": \"0.99\", \"n_expected\": \"3000\"}, \"soloFeatures\": \"Gene\", \"soloOutFormatFeaturesGeneField3\": \"Gene Expression\", \"soloStrand\": \"Forward\", \"soloUMIfiltering\": \"-\"}"  },  "state": "error",  "stderr": "[bam_sort_core] merging from 0 files and 3 in-memory blocks...\n",  "stdout": "Oct 14 07:46:12 ..... started STAR run\nOct 14 07:46:12 ... starting to generate Genome files\nOct 14 07:46:12 ..... processing annotations GTF\nOct 14 07:46:12 ... starting to sort Suffix Array. This may take a long time...\nOct 14 07:46:12 ... sorting Suffix Array chunks and saving them to disk...\nOct 14 07:46:12 ... loading chunks from disk, packing SA...\nOct 14 07:46:12 ... finished generating suffix array\nOct 14 07:46:12 ... generating Suffix Array index\nOct 14 07:46:12 ... completed Suffix Array index\nOct 14 07:46:12 ..... inserting junctions into the genome indices\nOct 14 07:46:12 ... writing Genome to disk ...\nOct 14 07:46:12 ... writing Suffix Array to disk ...\nOct 14 07:46:12 ... writing SAindex to disk\nOct 14 07:46:12 ..... finished successfully\nOct 14 07:46:12 ..... started STAR run\nOct 14 07:46:12 ..... loading genome\nOct 14 07:46:12 ..... started mapping\nOct 14 07:46:29 ..... finished mapping\nOct 14 07:46:30 ..... started Solo counting\nOct 14 07:46:30 ..... finished Solo counting\nOct 14 07:46:30 ..... finished successfully\n",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/rna_starsolo/rna_starsolo/2.7.8a",  "tool_stderr": "[bam_sort_core] merging from 0 files and 3 in-memory blocks...\n",  "tool_stdout": "Oct 14 07:46:12 ..... started STAR run\nOct 14 07:46:12 ... starting to generate Genome files\nOct 14 07:46:12 ..... processing annotations GTF\nOct 14 07:46:12 ... starting to sort Suffix Array. This may take a long time...\nOct 14 07:46:12 ... sorting Suffix Array chunks and saving them to disk...\nOct 14 07:46:12 ... loading chunks from disk, packing SA...\nOct 14 07:46:12 ... finished generating suffix array\nOct 14 07:46:12 ... generating Suffix Array index\nOct 14 07:46:12 ... completed Suffix Array index\nOct 14 07:46:12 ..... inserting junctions into the genome indices\nOct 14 07:46:12 ... writing Genome to disk ...\nOct 14 07:46:12 ... writing Suffix Array to disk ...\nOct 14 07:46:12 ... writing SAindex to disk\nOct 14 07:46:12 ..... finished successfully\nOct 14 07:46:12 ..... started STAR run\nOct 14 07:46:12 ..... loading genome\nOct 14 07:46:12 ..... started mapping\nOct 14 07:46:29 ..... finished mapping\nOct 14 07:46:30 ..... started Solo counting\nOct 14 07:46:30 ..... finished Solo counting\nOct 14 07:46:30 ..... finished successfully\n",  "update_time": "2024-10-14T07:46:35.139982",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/rna_starsolo/rna_starsolo/2.7.8a, exit_code: None, stderr: [bam_sort_core] merging from 0 files and 3 in-memory blocks...\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/rna_starsolo/rna_starsolo/2.7.8a, exit_code: None, stderr: [bam_sort_core] merging from 0 files and 3 in-memory blocks...\n.",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/rna_starsolo/rna_starsolo/2.7.8a, exit_code: None, stderr: [bam_sort_core] merging from 0 files and 3 in-memory blocks...\n." ], "status": "failure", "test_index": 3, "time_seconds": 71.35832643508911, "tool_id": "rna_starsolo", "tool_version": "2.7.8a"}
                ]]></error>
            
            <system-out><![CDATA[
            Oct 14 07:46:12 ..... started STAR runOct 14 07:46:12 ... starting to generate Genome filesOct 14 07:46:12 ..... processing annotations GTFOct 14 07:46:12 ... starting to sort Suffix Array. This may take a long time...Oct 14 07:46:12 ... sorting Suffix Array chunks and saving them to disk...Oct 14 07:46:12 ... loading chunks from disk, packing SA...Oct 14 07:46:12 ... finished generating suffix arrayOct 14 07:46:12 ... generating Suffix Array indexOct 14 07:46:12 ... completed Suffix Array indexOct 14 07:46:12 ..... inserting junctions into the genome indicesOct 14 07:46:12 ... writing Genome to disk ...Oct 14 07:46:12 ... writing Suffix Array to disk ...Oct 14 07:46:12 ... writing SAindex to diskOct 14 07:46:12 ..... finished successfullyOct 14 07:46:12 ..... started STAR runOct 14 07:46:12 ..... loading genomeOct 14 07:46:12 ..... started mappingOct 14 07:46:29 ..... finished mappingOct 14 07:46:30 ..... started Solo countingOct 14 07:46:30 ..... finished Solo countingOct 14 07:46:30 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #4)" name="3" time="2775.8078372478485">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "refGenomeSource|geneSource": "history",  "refGenomeSource|genomeFastaFiles": {   "id": "97f451b77a9a3376",   "src": "hda"  },  "refGenomeSource|genomeSAindexNbases": "4",  "refGenomeSource|sjdbGTFfile": {   "id": "84d3f7f0267c5efc",   "src": "hda"  },  "refGenomeSource|sjdbOverhang": "100",  "sc|input_types|input_collection": {   "id": "9ae595e7ab9876e7",   "src": "hdca"  },  "sc|input_types|use": "list_paired",  "sc|params|chemistry": "CR3",  "sc|soloCBwhitelist": {   "id": "fefae15301dacd97",   "src": "hda"  },  "sc|soloUMIdedup": "1MM_All",  "sc|solo_type": "CB_UMI_Simple",  "solo|soloFeatures": "Gene",  "solo|soloStrand": "Forward" }, "job": {  "command_line": null,  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-10-14T07:54:57.737362",  "dependencies": [],  "exit_code": null,  "external_id": null,  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "e4d5678b628025bb",  "inputs": {   "refGenomeSource|genomeFastaFiles": {    "id": "19b83611714e0704",    "src": "hda",    "uuid": "d4b80093-bc3a-461b-bd07-6a59646402db"   },   "refGenomeSource|sjdbGTFfile": {    "id": "84d3f7f0267c5efc",    "src": "hda",    "uuid": "2137cf65-ba24-4271-bd39-bcbc742e001b"   },   "sc|input_types|input_collection1": {    "id": "334f312fb2e4009e",    "src": "hda",    "uuid": "d224c837-c95b-4627-add8-2bd0be4f2be1"   },   "sc|input_types|input_collection2": {    "id": "9b8def15ef42533d",    "src": "hda",    "uuid": "f2a149e7-71ec-4bea-b5f6-3c54c63b3d3d"   },   "sc|soloCBwhitelist": {    "id": "fefae15301dacd97",    "src": "hda",    "uuid": "6611d93e-12f2-47d3-b756-a94c27f0c442"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "output_BAM": {    "id": "435bb5a49d8b293e",    "src": "hda",    "uuid": "a40de903-09ef-4639-a866-eeca9f0224cb"   },   "output_barcodes_filtered": {    "id": "187473fe9e1ec71e",    "src": "hda",    "uuid": "94aff9c6-1ce5-4f46-b57a-90a9be1a2fb7"   },   "output_genes_filtered": {    "id": "d57584bfb4db2f3c",    "src": "hda",    "uuid": "27650365-e8eb-427e-9f0e-fe5ef0f5754a"   },   "output_log": {    "id": "6a2291478f6a57ec",    "src": "hda",    "uuid": "59c3a545-073d-4aff-b78b-6cb88adcbdf2"   },   "output_matrix_filtered": {    "id": "1e2a87ed23127a52",    "src": "hda",    "uuid": "ae4918f8-46ba-4246-8607-d91cd418f5b7"   },   "output_stats": {    "id": "7c6edfdb48ed5f4c",    "src": "hda",    "uuid": "23dcb6f7-86a5-41c2-81d0-9371fb26ea32"   }  },  "params": {   "__input_ext": "\"input\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "refGenomeSource": "{\"__current_case__\": 1, \"geneSource\": \"history\", \"genomeFastaFiles\": {\"values\": [{\"id\": 488, \"src\": \"hda\"}]}, \"genomeSAindexNbases\": \"4\", \"sjdbGTFfile\": {\"values\": [{\"id\": 484, \"src\": \"hda\"}]}, \"sjdbOverhang\": \"100\"}",   "sc": "{\"__current_case__\": 0, \"input_types\": {\"__current_case__\": 1, \"input_collection\": {\"values\": [{\"id\": 16, \"src\": \"hdca\"}]}, \"use\": \"list_paired\"}, \"params\": {\"__current_case__\": 1, \"chemistry\": \"CR3\"}, \"soloBarcodeReadLength\": true, \"soloCBmatchWLtype\": \"1MM_multi\", \"soloCBwhitelist\": {\"values\": [{\"id\": 487, \"src\": \"hda\"}]}, \"soloUMIdedup\": \"1MM_All\", \"solo_type\": \"CB_UMI_Simple\"}",   "solo": "{\"filter\": {\"__current_case__\": 0, \"filter_type\": \"cellranger2\", \"max_min_ratio\": \"10.0\", \"max_perc\": \"0.99\", \"n_expected\": \"3000\"}, \"soloFeatures\": \"Gene\", \"soloOutFormatFeaturesGeneField3\": \"Gene Expression\", \"soloStrand\": \"Forward\", \"soloUMIfiltering\": \"-\"}"  },  "state": "paused",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/rna_starsolo/rna_starsolo/2.7.8a",  "tool_stderr": null,  "tool_stdout": null,  "update_time": "2024-10-14T07:55:02.814799",  "user_email": "tests@fake.org" }, "output_problems": [  "Timed out after 600.25 seconds waiting on tool test run.",  "Timed out after 600.25 seconds waiting on tool test run.",  "Timed out after 600.25 seconds waiting on tool test run." ], "status": "failure", "test_index": 3, "time_seconds": 2775.8078372478485, "tool_id": "rna_starsolo", "tool_version": "2.7.8a"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #5)" name="4" time="26.23273205757141">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 4, "time_seconds": 26.23273205757141, "tool_id": "rna_starsolo", "tool_version": "2.7.8a"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #5)" name="4" time="16.692323446273804">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 4, "time_seconds": 16.692323446273804, "tool_id": "rna_starsolo", "tool_version": "2.7.8a"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #6)" name="5" time="80.92062783241272">
        
            
            <system-out><![CDATA[
            Oct 14 07:47:50 ..... started STAR runOct 14 07:47:50 ... starting to generate Genome filesOct 14 07:47:50 ..... processing annotations GTFOct 14 07:47:50 ... starting to sort Suffix Array. This may take a long time...Oct 14 07:47:50 ... sorting Suffix Array chunks and saving them to disk...Oct 14 07:47:51 ... loading chunks from disk, packing SA...Oct 14 07:47:51 ... finished generating suffix arrayOct 14 07:47:51 ... generating Suffix Array indexOct 14 07:47:51 ... completed Suffix Array indexOct 14 07:47:51 ..... inserting junctions into the genome indicesOct 14 07:47:51 ... writing Genome to disk ...Oct 14 07:47:51 ... writing Suffix Array to disk ...Oct 14 07:47:51 ... writing SAindex to diskOct 14 07:47:51 ..... finished successfullyOct 14 07:47:51 ..... started STAR runOct 14 07:47:51 ..... loading genomeOct 14 07:47:51 ..... started mappingOct 14 07:48:08 ..... finished mappingOct 14 07:48:08 ..... started Solo countingOct 14 07:48:08 ..... finished Solo countingOct 14 07:48:08 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #6)" name="5" time="114.41281485557556">
        
            
            <system-out><![CDATA[
            Oct 14 08:42:19 ..... started STAR runOct 14 08:42:19 ... starting to generate Genome filesOct 14 08:42:19 ..... processing annotations GTFOct 14 08:42:19 ... starting to sort Suffix Array. This may take a long time...Oct 14 08:42:19 ... sorting Suffix Array chunks and saving them to disk...Oct 14 08:42:19 ... loading chunks from disk, packing SA...Oct 14 08:42:19 ... finished generating suffix arrayOct 14 08:42:19 ... generating Suffix Array indexOct 14 08:42:19 ... completed Suffix Array indexOct 14 08:42:19 ..... inserting junctions into the genome indicesOct 14 08:42:19 ... writing Genome to disk ...Oct 14 08:42:19 ... writing Suffix Array to disk ...Oct 14 08:42:19 ... writing SAindex to diskOct 14 08:42:19 ..... finished successfullyOct 14 08:42:19 ..... started STAR runOct 14 08:42:19 ..... loading genomeOct 14 08:42:20 ..... started mappingOct 14 08:42:37 ..... finished mappingOct 14 08:42:37 ..... started Solo countingOct 14 08:42:37 ..... finished Solo countingOct 14 08:42:37 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #7)" name="6" time="65.28795742988586">
        
            
            <system-out><![CDATA[
            Oct 14 07:49:14 ..... started STAR runOct 14 07:49:14 ... starting to generate Genome filesOct 14 07:49:14 ..... processing annotations GTFOct 14 07:49:14 ... starting to sort Suffix Array. This may take a long time...Oct 14 07:49:14 ... sorting Suffix Array chunks and saving them to disk...Oct 14 07:49:14 ... loading chunks from disk, packing SA...Oct 14 07:49:14 ... finished generating suffix arrayOct 14 07:49:14 ... generating Suffix Array indexOct 14 07:49:14 ... completed Suffix Array indexOct 14 07:49:14 ..... inserting junctions into the genome indicesOct 14 07:49:14 ... writing Genome to disk ...Oct 14 07:49:14 ... writing Suffix Array to disk ...Oct 14 07:49:14 ... writing SAindex to diskOct 14 07:49:14 ..... finished successfullyOct 14 07:49:14 ..... started STAR runOct 14 07:49:14 ..... loading genomeOct 14 07:49:14 ..... started mappingOct 14 07:49:15 ..... finished mappingOct 14 07:49:15 ..... started Solo countingOct 14 07:49:15 ..... finished Solo countingOct 14 07:49:15 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #7)" name="6" time="25.69569754600525">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 6, "time_seconds": 25.69569754600525, "tool_id": "rna_starsolo", "tool_version": "2.7.8a"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #8)" name="7" time="128.5107662677765">
        
            
            <system-out><![CDATA[
            Oct 14 07:51:19 ..... started STAR runOct 14 07:51:19 ... starting to generate Genome filesOct 14 07:51:19 ..... processing annotations GTFOct 14 07:51:19 ... starting to sort Suffix Array. This may take a long time...Oct 14 07:51:19 ... sorting Suffix Array chunks and saving them to disk...Oct 14 07:51:19 ... loading chunks from disk, packing SA...Oct 14 07:51:19 ... finished generating suffix arrayOct 14 07:51:19 ... generating Suffix Array indexOct 14 07:51:19 ... completed Suffix Array indexOct 14 07:51:20 ..... inserting junctions into the genome indicesOct 14 07:51:20 ... writing Genome to disk ...Oct 14 07:51:20 ... writing Suffix Array to disk ...Oct 14 07:51:20 ... writing SAindex to diskOct 14 07:51:20 ..... finished successfullyOct 14 07:51:20 ..... started STAR runOct 14 07:51:20 ..... loading genomeOct 14 07:51:20 ..... started mappingOct 14 07:51:24 ..... finished mappingOct 14 07:51:24 ..... started Solo countingOct 14 07:51:24 ..... finished Solo countingOct 14 07:51:24 ..... finished successfully
            ]]></system-out>
            <system-err><![CDATA[
            [bam_sort_core] merging from 0 files and 3 in-memory blocks...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="rna_starsolo (Test #8)" name="7" time="12.608465194702148">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 7, "time_seconds": 12.608465194702148, "tool_id": "rna_starsolo", "tool_version": "2.7.8a"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="samtools_split (Test #1)" name="0" time="35.53648138046265">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input_bam": {   "id": "9f2c9d5ae89d310b",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026  samtools split -f \u0027Read_Group_%!.bam\u0027 -u \u0027/galaxy/server/database/objects/8/6/6/dataset_866a000f-a5d3-41ca-b767-e69dfd13081b.dat\u0027 -@ $addthreads \u0027/galaxy/server/database/objects/a/5/b/dataset_a5b99d6e-b549-4e44-a9cf-968df64e9a8f.dat\u0027",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-10-14T09:00:46.278810",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-hws86",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "2e2f207361ae5d74",  "inputs": {   "input_bam": {    "id": "9f2c9d5ae89d310b",    "src": "hda",    "uuid": "a5b99d6e-b549-4e44-a9cf-968df64e9a8f"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728896450.0000000",    "title": "Job End Time",    "value": "2024-10-14 09:00:50"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728896450.0000000",    "title": "Job Start Time",    "value": "2024-10-14 09:00:50"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "__new_primary_file_output|Elephant__": {    "id": "4867570217b11cbe",    "src": "hda",    "uuid": "227e4e05-a9b9-463d-9fcf-26a57d707b3b"   },   "__new_primary_file_output|Human__": {    "id": "6e08f52b9446a853",    "src": "hda",    "uuid": "34c22482-2583-47fc-b38a-876fd1514108"   },   "__new_primary_file_output|Mouse__": {    "id": "9fb8d8ea7d842130",    "src": "hda",    "uuid": "dae35120-e696-49e1-938c-2d286aa15ebc"   },   "output": {    "id": "e145647bf267f7f4",    "src": "hda",    "uuid": "866a000f-a5d3-41ca-b767-e69dfd13081b"   }  },  "params": {   "__input_ext": "\"bam\"",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "header": null  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/samtools_split/samtools_split/1.9",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T09:01:02.025546",  "user_email": "tests@fake.org" }, "output_problems": [  "Primary output output:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_g6v0y5af.sam v. /tmp/history_bam_converted_to_sam_9j73gn1o.sam )\n--- local_file\n+++ history_data\n@@ -6,11 +6,11 @@\n @PG\tID:bowtie2-D76CD0\tPN:bowtie2\tVN:2.1.0\n @PG\tID:bowtie2-58C6F748\tPN:bowtie2\tVN:2.1.0\n @PG\tID:bowtie2-D76CD0-8B37AF2\tPN:bowtie2\tVN:2.1.0\n-@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /tmp/tmpZSM0ep/files/000/dataset_2.dat /tmp/tmpZSM0ep/files/000/dataset_1.dat\n-@PG\tID:samtools.1\tPN:samtools\tPP:bowtie2-31DAC016\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /tmp/tmpZSM0ep/files/000/dataset_2.dat /tmp/tmpZSM0ep/files/000/dataset_1.dat\n-@PG\tID:samtools.2\tPN:samtools\tPP:bowtie2-D76CD0\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /tmp/tmpZSM0ep/files/000/dataset_2.dat /tmp/tmpZSM0ep/files/000/dataset_1.dat\n-@PG\tID:samtools.3\tPN:samtools\tPP:bowtie2-58C6F748\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /tmp/tmpZSM0ep/files/000/dataset_2.dat /tmp/tmpZSM0ep/files/000/dataset_1.dat\n-@PG\tID:samtools.4\tPN:samtools\tPP:bowtie2-D76CD0-8B37AF2\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /tmp/tmpZSM0ep/files/000/dataset_2.dat /tmp/tmpZSM0ep/files/000/dataset_1.dat\n+@PG\tID:samtools\tPN:samtools\tPP:bowtie2\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /galaxy/server/database/objects/8/6/6/dataset_866a000f-a5d3-41ca-b767-e69dfd13081b.dat -@ 0 /galaxy/server/database/objects/a/5/b/dataset_a5b99d6e-b549-4e44-a9cf-968df64e9a8f.dat\n+@PG\tID:samtools.1\tPN:samtools\tPP:bowtie2-31DAC016\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /galaxy/server/database/objects/8/6/6/dataset_866a000f-a5d3-41ca-b767-e69dfd13081b.dat -@ 0 /galaxy/server/database/objects/a/5/b/dataset_a5b99d6e-b549-4e44-a9cf-968df64e9a8f.dat\n+@PG\tID:samtools.2\tPN:samtools\tPP:bowtie2-D76CD0\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /galaxy/server/database/objects/8/6/6/dataset_866a000f-a5d3-41ca-b767-e69dfd13081b.dat -@ 0 /galaxy/server/database/objects/a/5/b/dataset_a5b99d6e-b549-4e44-a9cf-968df64e9a8f.dat\n+@PG\tID:samtools.3\tPN:samtools\tPP:bowtie2-58C6F748\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /galaxy/server/database/objects/8/6/6/dataset_866a000f-a5d3-41ca-b767-e69dfd13081b.dat -@ 0 /galaxy/server/database/objects/a/5/b/dataset_a5b99d6e-b549-4e44-a9cf-968df64e9a8f.dat\n+@PG\tID:samtools.4\tPN:samtools\tPP:bowtie2-D76CD0-8B37AF2\tVN:1.9\tCL:samtools split -f Read_Group_%!.bam -u /galaxy/server/database/objects/8/6/6/dataset_866a000f-a5d3-41ca-b767-e69dfd13081b.dat -@ 0 /galaxy/server/database/objects/a/5/b/dataset_a5b99d6e-b549-4e44-a9cf-968df64e9a8f.dat\n phiX174_9_527_1:0:0_0:0:0_54/1\t0\tphiX174\t9\t42\t70M\t*\t0\t0\tTCGCTTCCATGACGCAGAAGTTAACACTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATCAAGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:65A4\tYT:Z:UU\tRG:Z:Mouse\n phiX174_71_657_0:0:0_1:0:0_72/1\t0\tphiX174\t71\t42\t70M\t*\t0\t0\tGATAAAGCAGGAATTACTACTGCTTGTTTACGAATTAAATCGAAGTGGACTGCTGGCGGAAAATGAGAAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYT:Z:UU\tRG:Z:Mouse\n phiX174_99_617_1:0:0_2:1:0_a2/1\t0\tphiX174\t99\t42\t70M\t*\t0\t0\tTACGAATTAAATCGAAGTGGACTGCTTGCGGAAAATGAGAAAATTCGACCTATCCTTGCGCAGCTCGAGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:26G43\tYT:Z:UU\tRG:Z:Mouse\n" ], "status": "failure", "test_index": 0, "time_seconds": 35.53648138046265, "tool_id": "samtools_split", "tool_version": "1.9"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #1)" name="0" time="28.088255405426025">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "input": {   "id": "4608fcda51dfbf07",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/d/f/c/dataset_dfce881e-25c7-415a-956d-c94edb73a03d.dat\u0027 infile \u0026\u0026        samtools view -@ $addthreads -b      -o outfile      infile    \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-10-14T08:46:53.548026",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-9wwmp",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "bb3847c3e908778f",  "inputs": {   "input": {    "id": "4608fcda51dfbf07",    "src": "hda",    "uuid": "dfce881e-25c7-415a-956d-c94edb73a03d"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "556a48d40139ed72",    "src": "hda",    "uuid": "1bcb0f91-bdc6-4c79-aaad-4804612623b0"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:47:02.396202",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3, exit_code: None, stderr: ." ], "status": "failure", "test_index": 0, "time_seconds": 28.088255405426025, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #2)" name="1" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 1, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #11)" name="10" time="30.540751457214355">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "a217711664b7c7ea",   "src": "hda"  },  "mode|output_options|output_format|oformat": "sam",  "mode|output_options|output_format|with_header": true }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/1/b/d/dataset_1bd2e74e-265f-4cd6-a0e7-e73b13169046.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/a/b/d/metadata_abd3eb5b-db36-4e74-bb08-5c88921f35b7.dat\u0027 infile.bai \u0026\u0026        samtools view -@ $addthreads      -h  -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:51:24.491232",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-wgwhp",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "40d86503ad40141f",  "inputs": {   "input": {    "id": "a217711664b7c7ea",    "src": "hda",    "uuid": "1bd2e74e-265f-4cd6-a0e7-e73b13169046"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728895885.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:51:25"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728895885.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:51:25"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "09855060c2bb8ed6",    "src": "hda",    "uuid": "5c2d76fe-3cd7-41e1-9656-3d380928ef1f"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 1, \"oformat\": \"sam\", \"with_header\": true}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:51:36.425667",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (bam_to_sam_out1.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 10, "time_seconds": 30.540751457214355, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #12)" name="11" time="29.90768337249756">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "26e2976c026910ab",   "src": "hda"  },  "mode|output_options|output_format|oformat": "sam",  "mode|outtype": "header" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/4/0/8/dataset_4084032e-3142-4525-8157-7d41bc91abef.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/3/3/f/metadata_33f171b7-a8ff-4817-b178-3cb44120e048.dat\u0027 infile.bai \u0026\u0026    samtools view -H  -o outfile   infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:51:54.848376",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-s6frm",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "56014522f2b58d4a",  "inputs": {   "input": {    "id": "26e2976c026910ab",    "src": "hda",    "uuid": "4084032e-3142-4525-8157-7d41bc91abef"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728895916.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:51:56"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728895916.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:51:56"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "cc3aee04593656f9",    "src": "hda",    "uuid": "b1e73c1d-a24d-4396-9945-d404b7d4a4e5"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 2, \"output_options\": {\"__current_case__\": 0, \"output_format\": {\"__current_case__\": 1, \"oformat\": \"sam\"}, \"reads_report_type\": \"\"}, \"outtype\": \"header\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:52:06.552539",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (bam_to_sam_out2.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 11, "time_seconds": 29.90768337249756, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #13)" name="12" time="32.53942346572876">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "556f9df698a79966",   "src": "hda"  },  "mode|output_options|output_format|oformat": "sam",  "mode|output_options|output_format|with_header": false }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/3/6/f/dataset_36f9154b-e8b9-4bdf-ac67-24bf1788e93b.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/a/d/0/metadata_ad0e0946-b1f8-478d-814a-3788e0a81141.dat\u0027 infile.bai \u0026\u0026        samtools view -@ $addthreads        -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:52:26.361140",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-m4wjp",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "bafa88a454126bb7",  "inputs": {   "input": {    "id": "556f9df698a79966",    "src": "hda",    "uuid": "36f9154b-e8b9-4bdf-ac67-24bf1788e93b"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728895948.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:52:28"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728895948.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:52:28"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "66f124aa4cc7b451",    "src": "hda",    "uuid": "d5842504-6059-412e-9c7b-c9cbc85f240b"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 1, \"oformat\": \"sam\", \"with_header\": false}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:52:39.197265",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (bam_to_sam_out3.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 12, "time_seconds": 32.53942346572876, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #14)" name="13" time="32.52125930786133">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "163cf76134fee34b",   "src": "hda"  },  "mode|output_options|reads_report_type": "count",  "mode|outtype": "all_reads" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/9/3/3/dataset_93345078-fa11-4960-b575-d673c907412b.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/2/d/c/metadata_2dcd815d-66aa-4b62-9315-24577144556f.dat\u0027 infile.bai \u0026\u0026        samtools view -@ $addthreads -c     -o outfile     infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:52:59.438706",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-kdfr2",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "cd97f84c86a5ac74",  "inputs": {   "input": {    "id": "163cf76134fee34b",    "src": "hda",    "uuid": "93345078-fa11-4960-b575-d673c907412b"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728895981.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:53:01"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728895981.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:53:01"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputcnt": {    "id": "1ac389226455ae33",    "src": "hda",    "uuid": "2fd64783-c0ac-4e8d-b885-58179263cbf2"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 1, \"reads_report_type\": \"count\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:53:12.071265",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputcnt: Test output file (test_counts.tab) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 13, "time_seconds": 32.52125930786133, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #15)" name="14" time="31.627524852752686">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "b36922971b537f02",   "src": "hda"  },  "input": {   "id": "33095c2ead9d6914",   "src": "hda"  },  "mode|filter_config|cond_region|select_region": "no",  "mode|output_options|output_format|oformat": "cram",  "mode|outtype": "selected_reads" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/d/e/1/dataset_de157517-e982-4b5e-a0eb-23f2c64235a9.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/8/4/9/dataset_849bf829-9151-4e1f-a7b2-2baea2eb3cd4.dat\u0027 infile \u0026\u0026         samtools view -@ $addthreads -C      -o outfile  --output-fmt-option no_ref   -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:53:31.533718",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-5tmxd",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "c4045bf3db8f6c3c",  "inputs": {   "addref_cond|ref": {    "id": "b36922971b537f02",    "src": "hda",    "uuid": "de157517-e982-4b5e-a0eb-23f2c64235a9"   },   "input": {    "id": "33095c2ead9d6914",    "src": "hda",    "uuid": "849bf829-9151-4e1f-a7b2-2baea2eb3cd4"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728896013.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:53:33"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728896013.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:53:33"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "509913ef3a4157a6",    "src": "hda",    "uuid": "d7bce564-88d9-43e2-a8a4-4cbac6a34239"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 574, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 3, \"oformat\": \"cram\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"1.0\", \"seed\": \"\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:53:43.735592",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test.cram) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 14, "time_seconds": 31.627524852752686, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #16)" name="15" time="32.44298315048218">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "b2ca807ee17c0f02",   "src": "hda"  },  "input": {   "id": "b8294ed0b1bbc3a8",   "src": "hda"  },  "mode|filter_config|cond_region|select_region": "no",  "mode|output_options|output_format|oformat": "cram",  "mode|outtype": "selected_reads" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/6/e/e/dataset_6eedc873-033c-49b2-a304-efd0037c4b84.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/f/2/d/dataset_f2dd32f6-78b3-45f3-a563-711b416ad296.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/3/2/d/metadata_32d1d356-6f11-4402-b102-9013c7e35699.dat\u0027 infile.bai \u0026\u0026         samtools view -@ $addthreads -C      -o outfile  --output-fmt-option no_ref   -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:54:04.059985",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-m5rv6",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "6d19fcf876fc6fd0",  "inputs": {   "addref_cond|ref": {    "id": "b2ca807ee17c0f02",    "src": "hda",    "uuid": "6eedc873-033c-49b2-a304-efd0037c4b84"   },   "input": {    "id": "b8294ed0b1bbc3a8",    "src": "hda",    "uuid": "f2dd32f6-78b3-45f3-a563-711b416ad296"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728896046.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:54:06"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728896046.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:54:06"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "a6a1e4771d703488",    "src": "hda",    "uuid": "7e9be123-b6a6-40e6-9713-608af26672ba"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 577, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 3, \"oformat\": \"cram\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"1.0\", \"seed\": \"\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:54:16.298497",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test.cram) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 15, "time_seconds": 32.44298315048218, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #17)" name="16" time="">
        
            <error type="error" message=""><![CDATA[
                { "status": "skip", "test_index": 16, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #18)" name="17" time="32.770201206207275">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "c92c32040c3115e8",   "src": "hda"  },  "input": {   "id": "e1144f9e8768c5e5",   "src": "hda"  },  "mode|filter_config|cond_region|regions": "CHROMOSOME_I",  "mode|filter_config|cond_region|select_region": "text",  "mode|output_options|output_format|oformat": "cram",  "mode|outtype": "selected_reads" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/1/1/e/dataset_11e56dfd-d9f1-4eb3-bdb2-051d5dba1e3b.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/2/4/2/dataset_242aaa63-746f-4087-9492-6d5322ed745b.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/9/3/7/metadata_93707ff1-ec22-4ac7-a464-77196a369035.dat\u0027 infile.bai \u0026\u0026         samtools view -@ $addthreads -C      -o outfile  --output-fmt-option no_ref   -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile  \u0027CHROMOSOME_I\u0027",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:54:36.713585",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-6gwcc",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "5d07b9df2dcd3f0b",  "inputs": {   "addref_cond|ref": {    "id": "c92c32040c3115e8",    "src": "hda",    "uuid": "11e56dfd-d9f1-4eb3-bdb2-051d5dba1e3b"   },   "input": {    "id": "e1144f9e8768c5e5",    "src": "hda",    "uuid": "242aaa63-746f-4087-9492-6d5322ed745b"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728896078.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:54:38"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728896078.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:54:38"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "a1334f2d8a5b0de8",    "src": "hda",    "uuid": "96fc3fc6-b2aa-4239-b8e0-4475bfb253d0"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 580, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 1, \"regions\": \"CHROMOSOME_I\", \"select_region\": \"text\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 3, \"oformat\": \"cram\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"1.0\", \"seed\": \"\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:54:49.083743",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test.cram) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 17, "time_seconds": 32.770201206207275, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #19)" name="18" time="32.3450186252594">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "1722f42b56725fe5",   "src": "hda"  },  "input": {   "id": "a3753622b2f2fe53",   "src": "hda"  },  "mode|filter_config|cond_region|regions": "CHROMOSOME_I",  "mode|filter_config|cond_region|select_region": "text",  "mode|output_options|output_format|oformat": "bam",  "mode|outtype": "selected_reads" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/a/c/2/dataset_ac296e13-b465-4d7c-b243-7259aa5a1829.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/7/c/8/dataset_7c87fc77-a923-4eea-a9e2-2c5b03cef738.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/a/8/e/metadata_a8eb5794-8f4b-4035-a50f-e7d028686b74.dat\u0027 infile.crai \u0026\u0026         samtools view -@ $addthreads -b      -o outfile    -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile  \u0027CHROMOSOME_I\u0027  \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:55:09.195463",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-c6n4v",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "e38d4126c0b35dd9",  "inputs": {   "addref_cond|ref": {    "id": "1722f42b56725fe5",    "src": "hda",    "uuid": "ac296e13-b465-4d7c-b243-7259aa5a1829"   },   "input": {    "id": "a3753622b2f2fe53",    "src": "hda",    "uuid": "7c87fc77-a923-4eea-a9e2-2c5b03cef738"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728896111.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:55:11"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728896111.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:55:11"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "29728754d9b0d837",    "src": "hda",    "uuid": "66b5fbf2-5e19-4e81-b0ec-881b28fcea18"   }  },  "params": {   "__input_ext": "\"cram\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 583, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 1, \"regions\": \"CHROMOSOME_I\", \"select_region\": \"text\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"1.0\", \"seed\": \"\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:55:21.619209",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 18, "time_seconds": 32.3450186252594, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #20)" name="19" time="35.708575963974">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "405706f869efc733",   "src": "hda"  },  "input": {   "id": "9e6780ac41928990",   "src": "hda"  },  "mode|filter_config|cond_region|bedfile": {   "id": "2ffc2e815ed950f8",   "src": "hda"  },  "mode|filter_config|cond_region|select_region": "bed",  "mode|output_options|output_format|oformat": "bam",  "mode|outtype": "selected_reads" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/8/b/f/dataset_8bfd345a-c804-41f9-8188-fd5d181e7bc9.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/5/1/1/dataset_511205d7-6a6d-43e6-815e-dfa406ac23a1.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/5/9/8/metadata_598652fe-b99e-478e-9a0b-0e472a0e0cea.dat\u0027 infile.crai \u0026\u0026         samtools view -@ $addthreads -b  -L \u0027/galaxy/server/database/objects/a/3/a/dataset_a3a295df-a94c-4da6-9ded-e4781b8fc87a.dat\u0027    -o outfile    -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile    \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:55:45.796086",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-5mt4n",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "76e0cf658a4fb744",  "inputs": {   "addref_cond|ref": {    "id": "405706f869efc733",    "src": "hda",    "uuid": "8bfd345a-c804-41f9-8188-fd5d181e7bc9"   },   "input": {    "id": "9e6780ac41928990",    "src": "hda",    "uuid": "511205d7-6a6d-43e6-815e-dfa406ac23a1"   },   "mode|filter_config|cond_region|bedfile": {    "id": "2ffc2e815ed950f8",    "src": "hda",    "uuid": "a3a295df-a94c-4da6-9ded-e4781b8fc87a"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728896147.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:55:47"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728896147.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:55:47"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "601666a470815de5",    "src": "hda",    "uuid": "7cdeb59e-59e8-4c3a-a56a-1c4e45a0fc1d"   }  },  "params": {   "__input_ext": "\"cram\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 587, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 2, \"bedfile\": {\"values\": [{\"id\": 586, \"src\": \"hda\"}]}, \"select_region\": \"bed\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"1.0\", \"seed\": \"\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:55:57.407789",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 19, "time_seconds": 35.708575963974, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #3)" name="2" time="33.642733335494995">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "d19a16afb78e6eb6",   "src": "hda"  },  "input": {   "id": "bbe81de4b644c7d3",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/f/0/0/dataset_f0024fec-c633-4304-a51a-59d6787a54c2.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/c/c/3/dataset_cc392519-cd17-4af2-847d-7729481cad94.dat\u0027 infile \u0026\u0026        samtools view -@ $addthreads -b      -o outfile    -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile    \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:47:22.534336",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-pfbd9",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "632dec021ee2a227",  "inputs": {   "addref_cond|ref": {    "id": "d19a16afb78e6eb6",    "src": "hda",    "uuid": "f0024fec-c633-4304-a51a-59d6787a54c2"   },   "input": {    "id": "bbe81de4b644c7d3",    "src": "hda",    "uuid": "cc392519-cd17-4af2-847d-7729481cad94"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728895645.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:47:25"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728895645.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:47:25"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "f08d0a52fee95e46",    "src": "hda",    "uuid": "6fa3482c-2deb-4935-9757-ca7e3e48b5e3"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 548, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/equCab2.len\"",   "dbkey": "\"equCab2\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:47:35.968346",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (sam_to_bam_out3.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 2, "time_seconds": 33.642733335494995, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #21)" name="20" time="33.25483989715576">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "046ad2f3b50544c2",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|select_subsample": "target",  "mode|subsample_config|subsampling_mode|target": "2" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/3/8/3/dataset_383508d2-1b99-4bfc-bdc4-adc6a23fc887.dat\u0027 infile \u0026\u0026         sample_fragment=`samtools view -c  infile  | awk \u0027{s=$1} END {frac=s/2; print(frac \u003e 1 ? 17159+1/frac : \".0\")}\u0027` \u0026\u0026  samtools view -@ $addthreads -h    -s ${sample_fragment}   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:56:17.320649",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-flj5c",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "593976fd39394172",  "inputs": {   "input": {    "id": "046ad2f3b50544c2",    "src": "hda",    "uuid": "383508d2-1b99-4bfc-bdc4-adc6a23fc887"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728896179.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:56:19"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728896179.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:56:19"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "0b28ca88904ce480",    "src": "hda",    "uuid": "df89697f-df90-4fa2-9ff9-57bdea2d5fa7"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 1, \"seed\": \"\", \"select_subsample\": \"target\", \"target\": \"2\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:56:30.861699",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test_ds.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 20, "time_seconds": 33.25483989715576, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #22)" name="21" time="32.13392996788025">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "dd8c673aee2aad76",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|select_subsample": "target",  "mode|subsample_config|subsampling_mode|target": "20" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/4/a/c/dataset_4ac9d4e1-eabd-4217-8cc8-bc33138e509e.dat\u0027 infile \u0026\u0026         sample_fragment=`samtools view -c  infile  | awk \u0027{s=$1} END {frac=s/20; print(frac \u003e 1 ? 1872+1/frac : \".0\")}\u0027` \u0026\u0026  samtools view -@ $addthreads -h    -s ${sample_fragment}   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:56:50.686670",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-gxtw9",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "5d12c124dae51d7d",  "inputs": {   "input": {    "id": "dd8c673aee2aad76",    "src": "hda",    "uuid": "4ac9d4e1-eabd-4217-8cc8-bc33138e509e"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728896212.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:56:52"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728896212.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:56:52"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "33f4a6669ebb83a8",    "src": "hda",    "uuid": "93eeb583-5ffb-4d4c-a2ad-8a59b5f127d2"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 1, \"seed\": \"\", \"select_subsample\": \"target\", \"target\": \"20\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:57:03.254860",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 21, "time_seconds": 32.13392996788025, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #23)" name="22" time="30.27116560935974">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "5a4a75ed166b151c",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|select_subsample": "target",  "mode|subsample_config|subsampling_mode|target": "20" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/9/8/1/dataset_981aaa8c-824a-400c-8f4f-32e498e43aca.dat\u0027 infile \u0026\u0026         sample_fragment=`samtools view -c  infile  | awk \u0027{s=$1} END {frac=s/20; print(frac \u003e 1 ? 8031+1/frac : \".0\")}\u0027` \u0026\u0026  samtools view -@ $addthreads -h    -s ${sample_fragment}   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:57:21.810766",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-klcfx",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "cadd3efe4488c4a2",  "inputs": {   "input": {    "id": "5a4a75ed166b151c",    "src": "hda",    "uuid": "981aaa8c-824a-400c-8f4f-32e498e43aca"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728896243.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:57:23"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728896243.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:57:23"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "6572011f42671904",    "src": "hda",    "uuid": "48b506d6-3bc3-41d2-9cdb-d9f12294ffc8"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 1, \"seed\": \"\", \"select_subsample\": \"target\", \"target\": \"20\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:57:33.439266",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (no_reads.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 22, "time_seconds": 30.27116560935974, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #24)" name="23" time="32.18847179412842">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "ef4a335c1e858aa1",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|select_subsample": "target",  "mode|subsample_config|subsampling_mode|target": "20" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/8/2/7/dataset_82763dc7-7220-4886-bae3-7adc117ae3f9.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/6/c/8/metadata_6c89d97b-c3e0-4d27-b107-46f63fac5baf.dat\u0027 infile.bai \u0026\u0026         sample_fragment=`samtools idxstats infile | awk \u0027{s+=$4+$3} END {frac=s/20; print(frac \u003e 1 ? 28080+1/frac : \".0\")}\u0027` \u0026\u0026  samtools view -@ $addthreads -b    -s ${sample_fragment}   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:57:52.960075",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-nc24l",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "ad9c19c0bccec021",  "inputs": {   "input": {    "id": "ef4a335c1e858aa1",    "src": "hda",    "uuid": "82763dc7-7220-4886-bae3-7adc117ae3f9"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728896275.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:57:55"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728896275.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:57:55"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "b422b476ad2e6a18",    "src": "hda",    "uuid": "a4d607b5-d925-46bd-bcc0-7be4e4f01c70"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 1, \"seed\": \"\", \"select_subsample\": \"target\", \"target\": \"20\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:58:05.997444",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (no_reads.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 23, "time_seconds": 32.18847179412842, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #25)" name="24" time="32.55360722541809">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "689e4a566bfa6c3c",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|seed": "7",  "mode|subsample_config|subsampling_mode|select_subsample": "target",  "mode|subsample_config|subsampling_mode|target": "2" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/9/a/1/dataset_9a1453cd-1bb6-485b-ac12-f815f95cc859.dat\u0027 infile \u0026\u0026         sample_fragment=`samtools view -c  infile  | awk \u0027{s=$1} END {frac=s/2; print(frac \u003e 1 ? 7+1/frac : \".0\")}\u0027` \u0026\u0026  samtools view -@ $addthreads -h    -s ${sample_fragment}   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:58:25.671504",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-8g9b6",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "565475939013d26a",  "inputs": {   "input": {    "id": "689e4a566bfa6c3c",    "src": "hda",    "uuid": "9a1453cd-1bb6-485b-ac12-f815f95cc859"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728896307.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:58:27"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728896307.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:58:27"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "002a71516db1f7f6",    "src": "hda",    "uuid": "b32da38c-e1df-4d40-b72a-ba3c184ede33"   }  },  "params": {   "__input_ext": "\"sam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 1, \"seed\": \"7\", \"select_subsample\": \"target\", \"target\": \"2\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:58:38.368328",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test_ds.sam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 24, "time_seconds": 32.55360722541809, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #26)" name="25" time="11.716219902038574">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 25, "time_seconds": 11.716219902038574, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #27)" name="26" time="31.441619157791138">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "29e5445e0b097ee0",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|seed": "7",  "mode|subsample_config|subsampling_mode|select_subsample": "target",  "mode|subsample_config|subsampling_mode|target": "20" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/5/f/4/dataset_5f4a98a5-39c4-4ac8-b642-c83cc4dff894.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/5/f/5/metadata_5f512021-909f-4eb9-bd6e-417240e4833a.dat\u0027 infile.bai \u0026\u0026         sample_fragment=`samtools idxstats infile | awk \u0027{s+=$4+$3} END {frac=s/20; print(frac \u003e 1 ? 7+1/frac : \".0\")}\u0027` \u0026\u0026  samtools view -@ $addthreads -b    -s ${sample_fragment}   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:59:09.438458",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-6bznm",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "4868ad341a8df528",  "inputs": {   "input": {    "id": "29e5445e0b097ee0",    "src": "hda",    "uuid": "5f4a98a5-39c4-4ac8-b642-c83cc4dff894"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728896351.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:59:11"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728896351.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:59:11"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "e55fe5e69ba8d3c2",    "src": "hda",    "uuid": "1151f6c5-3ccc-4011-a92d-f6f4674198ee"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 1, \"seed\": \"7\", \"select_subsample\": \"target\", \"target\": \"20\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:59:21.922722",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 26, "time_seconds": 31.441619157791138, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #28)" name="27" time="31.064964056015015">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "449546b90b839f77",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|factor": "5",  "mode|subsample_config|subsampling_mode|seed": "7",  "mode|subsample_config|subsampling_mode|select_subsample": "fraction" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/5/a/1/dataset_5a1a1a9b-7461-4239-b7ae-b4c230cb1c24.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/5/b/9/metadata_5b99fcdb-88ad-45b7-b208-90fe4b5125cc.dat\u0027 infile.bai \u0026\u0026          samtools view -@ $addthreads -b    -s 7.2   -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:59:41.763096",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-xvm4h",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "6e71a22bfe5d371a",  "inputs": {   "input": {    "id": "449546b90b839f77",    "src": "hda",    "uuid": "5a1a1a9b-7461-4239-b7ae-b4c230cb1c24"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728896383.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:59:43"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728896383.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:59:43"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "d75ecec2e1bdb737",    "src": "hda",    "uuid": "9f385db5-5e35-4748-a8d1-71090e41d973"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"5.0\", \"seed\": \"7\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:59:53.278348",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test_ds.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 27, "time_seconds": 31.064964056015015, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #29)" name="28" time="32.57358431816101">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "b24d00ae4c57ee5f",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input",  "mode|output_options|reads_report_type": "dropped",  "mode|outtype": "selected_reads",  "mode|subsample_config|subsampling_mode|factor": "1.25",  "mode|subsample_config|subsampling_mode|seed": "7",  "mode|subsample_config|subsampling_mode|select_subsample": "fraction" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/8/3/d/dataset_83d73a4b-09f9-4108-8169-fff2da2a3b7d.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/c/8/2/metadata_c8237c71-b66a-45b7-a6dc-3ef39b11e535.dat\u0027 infile.bai \u0026\u0026          samtools view -@ $addthreads -b    -s 7.8   -U outfile -o /dev/null      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T09:00:12.946922",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-ngq66",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "6155260d143bb1ee",  "inputs": {   "input": {    "id": "b24d00ae4c57ee5f",    "src": "hda",    "uuid": "83d73a4b-09f9-4108-8169-fff2da2a3b7d"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728896414.0000000",    "title": "Job End Time",    "value": "2024-10-14 09:00:14"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728896414.0000000",    "title": "Job Start Time",    "value": "2024-10-14 09:00:14"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "995ce9753f7b0364",    "src": "hda",    "uuid": "e7aa4692-1d5e-4c29-a059-dd5784d450f1"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 1, \"filter_config\": {\"cigarcons\": \"\", \"cond_region\": {\"__current_case__\": 0, \"select_region\": \"no\"}, \"cond_rg\": {\"__current_case__\": 0, \"select_rg\": \"no\"}, \"exclusive_filter\": null, \"exclusive_filter_all\": null, \"inclusive_filter\": null, \"library\": null, \"quality\": \"\"}, \"output_options\": {\"__current_case__\": 1, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"complementary_output\": false, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"dropped\"}, \"outtype\": \"selected_reads\", \"subsample_config\": {\"subsampling_mode\": {\"__current_case__\": 0, \"factor\": \"1.25\", \"seed\": \"7\", \"select_subsample\": \"fraction\"}}}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T09:00:25.666267",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (test_ds.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 28, "time_seconds": 32.57358431816101, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #4)" name="3" time="24.355663061141968">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "addref_cond|addref_select": "history",  "addref_cond|ref": {   "id": "c212c62a87db4fd2",   "src": "hda"  },  "input": {   "id": "df79cbad3483054b",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/9/9/f/dataset_99f7749e-7d3a-4ad9-9782-03fd5a28339b.dat\u0027 reference.fa \u0026\u0026 samtools faidx reference.fa \u0026\u0026   ln -s \u0027/galaxy/server/database/objects/b/3/0/dataset_b3035da2-5f92-4c49-afea-1e4429e7a3a2.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/6/b/e/metadata_6be071b4-5ec6-4586-b440-89fc0a73c2d4.dat\u0027 infile.crai \u0026\u0026        samtools view -@ $addthreads -b      -o outfile    -T \u0027reference.fa\u0027 -t \u0027reference.fa.fai\u0027   infile    \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-10-14T08:47:56.104820",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-n2797",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "d9bcdeab1294863f",  "inputs": {   "addref_cond|ref": {    "id": "c212c62a87db4fd2",    "src": "hda",    "uuid": "99f7749e-7d3a-4ad9-9782-03fd5a28339b"   },   "input": {    "id": "df79cbad3483054b",    "src": "hda",    "uuid": "b3035da2-5f92-4c49-afea-1e4429e7a3a2"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "282506f0b3bd29a4",    "src": "hda",    "uuid": "ee16bfe6-66cb-411d-a967-10b0cfe73dba"   }  },  "params": {   "__input_ext": "\"cram\"",   "addref_cond": "{\"__current_case__\": 1, \"addref_select\": \"history\", \"ref\": {\"values\": [{\"id\": 551, \"src\": \"hda\"}]}}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:48:00.780633",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3, exit_code: None, stderr: ." ], "status": "failure", "test_index": 3, "time_seconds": 24.355663061141968, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #5)" name="4" time="36.39955234527588">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "21e0274e60518656",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/7/e/a/dataset_7ea01c76-5b67-4f5b-8c4a-d619b284bbcc.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/c/5/b/metadata_c5b77c66-76cc-4a8a-bdde-96dd9d593037.dat\u0027 infile.bai \u0026\u0026        samtools view -@ $addthreads -b      -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:48:25.433160",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-nrt2c",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "4bc0fda0db243856",  "inputs": {   "input": {    "id": "21e0274e60518656",    "src": "hda",    "uuid": "7ea01c76-5b67-4f5b-8c4a-d619b284bbcc"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728895707.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:48:27"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728895707.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:48:27"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "604c64c2ac5a8887",    "src": "hda",    "uuid": "90ccc368-1725-459c-b8a3-aa93b8ea25d2"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:48:37.172158",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (1_sort.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 4, "time_seconds": 36.39955234527588, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #6)" name="5" time="32.054383993148804">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "67fbf2717abaa27a",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/3/9/f/dataset_39f16902-5689-47b2-b3f1-c7cb78823590.dat\u0027 infile \u0026\u0026 ln -s \u0027/galaxy/server/database/objects/_metadata_files/9/e/1/metadata_9e1637b4-5abb-4b25-ba1e-68135b503d4f.dat\u0027 infile.bai \u0026\u0026        samtools view -@ $addthreads -b      -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:48:56.875077",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-mpz77",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "ce39520f41faab0c",  "inputs": {   "input": {    "id": "67fbf2717abaa27a",    "src": "hda",    "uuid": "39f16902-5689-47b2-b3f1-c7cb78823590"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Job Runtime (Wall Clock)",    "value": "1 second"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728895739.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:48:59"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728895738.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:48:58"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "164a646ad6fcbcfa",    "src": "hda",    "uuid": "9b4863e9-8db9-4962-9186-46e5dcff5f36"   }  },  "params": {   "__input_ext": "\"bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:49:09.470342",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (1_sort.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 5, "time_seconds": 32.054383993148804, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #7)" name="6" time="30.254416704177856">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "2cfb2cc11b9ca00f",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/0/8/0/dataset_080b10c0-6498-4891-abd9-447f64a2c778.dat\u0027 infile \u0026\u0026        samtools view -@ $addthreads -b      -o outfile      infile    \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:49:27.918578",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-jjf59",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "637977b1ac987b88",  "inputs": {   "input": {    "id": "2cfb2cc11b9ca00f",    "src": "hda",    "uuid": "080b10c0-6498-4891-abd9-447f64a2c778"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728895769.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:49:29"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728895769.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:49:29"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "4b9138938079cb63",    "src": "hda",    "uuid": "39af2d72-f5ef-4c8b-9b57-8dda3dfcc903"   }  },  "params": {   "__input_ext": "\"qname_sorted.bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:49:39.811694",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (1_sort.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 6, "time_seconds": 30.254416704177856, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #8)" name="7" time="23.81677556037903">
        
            
                <error type="error" message="Tool exit code: None"><![CDATA[
                    { "inputs": {  "input": {   "id": "7fb830647834c03e",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/2/a/c/dataset_2ac321e8-89a5-4f93-82cd-51cd7914e3ac.dat\u0027 infile \u0026\u0026        samtools view -@ $addthreads -h      -o outfile      infile",  "command_version": null,  "copied_from_job_id": null,  "create_time": "2024-10-14T08:49:58.345951",  "dependencies": [],  "exit_code": null,  "external_id": "gxy-rwl7j",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "b30306ca47c34d28",  "inputs": {   "input": {    "id": "7fb830647834c03e",    "src": "hda",    "uuid": "2ac321e8-89a5-4f93-82cd-51cd7914e3ac"   }  },  "job_messages": null,  "job_metrics": [],  "job_runner_name": null,  "job_stderr": null,  "job_stdout": null,  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "c16420b381223c97",    "src": "hda",    "uuid": "b08dc396-5085-4b27-84e8-731f90feee7f"   }  },  "params": {   "__input_ext": "\"qname_sorted.bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "error",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:50:03.453458",  "user_email": "tests@fake.org" }, "output_problems": [  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3, exit_code: None, stderr: .",  "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3, exit_code: None, stderr: ." ], "status": "failure", "test_index": 7, "time_seconds": 23.81677556037903, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #9)" name="8" time="29.85860013961792">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "7c19539145ea57f5",   "src": "hda"  } }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/b/0/e/dataset_b0e8db69-01b8-40e9-90c1-4c3e03141a66.dat\u0027 infile \u0026\u0026        samtools view -@ $addthreads -b      -o outfile      infile    \u0026\u0026 samtools sort -@ $addthreads -m $addmemory\"M\" -T \"${TMPDIR:-.}\" -O bam -o tmpsam outfile \u0026\u0026 mv tmpsam outfile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:50:21.883084",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-vjx4t",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "363eb8024485fbff",  "inputs": {   "input": {    "id": "7c19539145ea57f5",    "src": "hda",    "uuid": "b0e8db69-01b8-40e9-90c1-4c3e03141a66"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728895823.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:50:23"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728895823.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:50:23"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "f3b9dcda2b45662b",    "src": "hda",    "uuid": "56ce2bdf-ea7c-4b4d-9ab3-a948b86027f4"   }  },  "params": {   "__input_ext": "\"unsorted.bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 2, \"oformat\": \"bam\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:50:33.461116",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (1_sort.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 8, "time_seconds": 29.85860013961792, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="samtools_view (Test #10)" name="9" time="32.165042877197266">
        
            
                <error type="error" message="Tool exit code: 0"><![CDATA[
                    { "inputs": {  "input": {   "id": "bc3666395531b2d3",   "src": "hda"  },  "mode|output_options|output_format|oformat": "input" }, "job": {  "command_line": "addthreads=${GALAXY_SLOTS:-1} \u0026\u0026 (( addthreads-- )) \u0026\u0026   addmemory=${GALAXY_MEMORY_MB_PER_SLOT:-768} \u0026\u0026 ((addmemory=addmemory*75/100)) \u0026\u0026     ln -s \u0027/galaxy/server/database/objects/2/d/c/dataset_2dc7d45e-d100-48a8-8a37-821fe55ae26e.dat\u0027 infile \u0026\u0026        samtools view -@ $addthreads -h      -o outfile      infile",  "command_version": "Version: 1.9 (using htslib 1.9)",  "copied_from_job_id": null,  "create_time": "2024-10-14T08:50:53.044952",  "dependencies": [],  "exit_code": 0,  "external_id": "gxy-74vlr",  "galaxy_version": "24.1",  "handler": null,  "history_id": "0ef228bbda99821b",  "id": "a0bdda77a3293958",  "inputs": {   "input": {    "id": "bc3666395531b2d3",    "src": "hda",    "uuid": "2dc7d45e-d100-48a8-8a37-821fe55ae26e"   }  },  "job_messages": [],  "job_metrics": [   {    "name": "runtime_seconds",    "plugin": "core",    "raw_value": "0E-7",    "title": "Job Runtime (Wall Clock)",    "value": "0 seconds"   },   {    "name": "end_epoch",    "plugin": "core",    "raw_value": "1728895855.0000000",    "title": "Job End Time",    "value": "2024-10-14 08:50:55"   },   {    "name": "start_epoch",    "plugin": "core",    "raw_value": "1728895855.0000000",    "title": "Job Start Time",    "value": "2024-10-14 08:50:55"   },   {    "name": "galaxy_memory_mb",    "plugin": "core",    "raw_value": "4080.0000000",    "title": "Memory Allocated (MB)",    "value": "4080"   },   {    "name": "galaxy_slots",    "plugin": "core",    "raw_value": "1.0000000",    "title": "Cores Allocated",    "value": "1"   }  ],  "job_runner_name": null,  "job_stderr": "",  "job_stdout": "",  "model_class": "Job",  "output_collections": {},  "outputs": {   "outputsam": {    "id": "794d9cd149b3d581",    "src": "hda",    "uuid": "4ca98510-093d-4327-8668-7f9b72c5229e"   }  },  "params": {   "__input_ext": "\"unsorted.bam\"",   "addref_cond": "{\"__current_case__\": 0, \"addref_select\": \"no\"}",   "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",   "dbkey": "\"?\"",   "mode": "{\"__current_case__\": 0, \"output_options\": {\"__current_case__\": 0, \"adv_output\": {\"collapsecigar\": false, \"readtags\": []}, \"output_format\": {\"__current_case__\": 0, \"oformat\": \"input\"}, \"reads_report_type\": \"retained\"}, \"outtype\": \"all_reads\"}"  },  "state": "ok",  "stderr": "",  "stdout": "",  "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/samtools_view/samtools_view/1.9+galaxy3",  "tool_stderr": "",  "tool_stdout": "",  "update_time": "2024-10-14T08:51:06.030600",  "user_email": "tests@fake.org" }, "output_problems": [  "Output outputsam: Test output file (1_sort_read_names.bam) is missing. If you are using planemo, try adding --update_test_data to generate it." ], "status": "failure", "test_index": 9, "time_seconds": 32.165042877197266, "tool_id": "samtools_view", "tool_version": "1.9+galaxy3"}
                ]]></error>
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="scanpy_plot_embed (Test #1)" name="0" time="0.34963202476501465">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 0, "time_seconds": 0.34963202476501465, "tool_id": "scanpy_plot_embed", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="scanpy_plot_embed (Test #1)" name="0" time="0.347942590713501">
        
            <error type="error" message="Input staging problem: Test input file (find_cluster.h5) cannot be found."><![CDATA[
                { "execution_problem": "Input staging problem: Test input file (find_cluster.h5) cannot be found.", "status": "error", "test_index": 0, "time_seconds": 0.347942590713501, "tool_id": "scanpy_plot_embed", "tool_version": "1.9.3+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="scater_normalize (Test #1)" name="0" time="64.53780484199524">
        
            
            <system-out><![CDATA[
            [1] "Normalising...."[1] "Finished normalising"[1] TRUE
            ]]></system-out>
            <system-err><![CDATA[
            Loading required package: S4VectorsLoading required package: stats4Loading required package: BiocGenericsLoading required package: parallelAttaching package: 'BiocGenerics'The following objects are masked from 'package:parallel':    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,    clusterExport, clusterMap, parApply, parCapply, parLapply,    parLapplyLB, parRapply, parSapply, parSapplyLBThe following objects are masked from 'package:stats':    IQR, mad, sd, var, xtabsThe following objects are masked from 'package:base':    Filter, Find, Map, Position, Reduce, anyDuplicated, append,    as.data.frame, basename, cbind, colnames, dirname, do.call,    duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted,    lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin,    pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table,    tapply, union, unique, unsplit, which, which.max, which.minAttaching package: 'S4Vectors'The following object is masked from 'package:base':    expand.gridLoading required package: SingleCellExperimentLoading required package: SummarizedExperimentLoading required package: GenomicRangesLoading required package: IRangesLoading required package: GenomeInfoDbLoading required package: BiobaseWelcome to Bioconductor    Vignettes contain introductory material; view with    'browseVignettes()'. To cite Bioconductor, see    'citation("Biobase")', and for packages 'citation("pkgname")'.Loading required package: DelayedArrayLoading required package: matrixStatsAttaching package: 'matrixStats'The following objects are masked from 'package:Biobase':    anyMissing, rowMediansLoading required package: BiocParallelAttaching package: 'DelayedArray'The following objects are masked from 'package:matrixStats':    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRangesThe following objects are masked from 'package:base':    aperm, apply, rowsumLoading required package: rhdf5Loading required package: rtracklayerLoading required package: ggplot2Attaching package: 'scater'The following object is masked from 'package:S4Vectors':    renameThe following object is masked from 'package:stats':    filterWarning message:In .local(object, ...) : using library sizes as size factors
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #1)" name="0" time="208.5733208656311">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-10-14 06:29:31)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only short reads, Unicycler will essentially function as a SPAdes-optimiser. It will try many k-mer sizes, choose the best based on contig lengthand graph connectivity, and scaffold the graph using SPAdes repeat resolution.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/3/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status     Path                        spades.py     4.0.0     good       /usr/local/bin/spades.py    racon                   not used                               makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb  tblastn       2.16.0+   good       /usr/local/bin/tblastn    Choosing k-mer range for assembly (2024-10-14 06:29:31)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2024-10-14 06:29:32)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/3/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/3/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/3/working/fq2.fastq -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/3/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/3/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/3/working/fq2.fastq -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.1.100+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/3/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/3/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/3/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/3/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/3/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/3/working/spades_assembly/dataset.info") with K=27  0:00:00.001     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.001     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.006     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.006     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.074    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.077    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.089    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.090    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.096    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.132     1M / 41M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.145     1M / 41M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.145     1M / 41M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.145     1M / 41M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.145     1M / 41M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.146     1M / 41M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.146     1M / 41M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.146     1M / 41M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:00.895     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:00.898     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.103     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:01.103     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:01.137     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:01.137     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:01.138     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:01.138     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:01.138     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.843  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:01.843  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:01.843     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:02.064     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:02.064     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.109     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:02.109     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:02.263     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:02.273     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:02.290     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:02.294     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:02.296     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:02.298     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:02.301     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:02.301     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:02.301     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:02.301     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:02.301     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:02.303     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:02.303     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:02.303     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:02.303     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:02.303     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:02.303     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:02.305     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:02.305     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.334     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:02.335     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:02.401     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:02.403     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:02.467     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:02.467     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:02.467     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:02.467     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:02.467     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:02.565     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:02.859     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:03.373     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:03.849     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:04.672     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:04.672     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.673     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:04.673     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:04.673     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:04.673     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:04.673     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:04.673     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:04.673     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:04.673     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Gap Closer (id: early_gap..        : 292)   SPAdes finished  0:00:04.377     1M / 160M  INFO    General                 (main.cpp                  : 131)   Assembling time: 0 hours 0 minutes 4 seconds===== K127 finished.===== Copy files started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/contigs.paths===== Copy files finished.===== Assembling finished.===== Breaking scaffolds started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/misc --threshold_for_breaking_scaffolds 3===== Breaking scaffolds finished.===== Terminate started.===== Terminate finished. * Assembled contigs are in /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/spades.logThank you for using SPAdes! If you use it in your research, please cite:  Prjibelski, A., Antipov, D., Meleshko, D., Lapidus, A. and Korobeynikov, A., 2020. Using SPAdes de novo assembler. Current protocols in bioinformatics, 70(1), p.e102.  doi.org/10.1002/cpbi.102Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k27 graphRepair multi way junctions  (2024-10-14 06:31:35)Filter by read depth        (2024-10-14 06:31:35)Filter homopolymer loops    (2024-10-14 06:31:35)Merge all possible          (2024-10-14 06:31:35)Normalise read depths       (2024-10-14 06:31:35)Remove zero length segments (2024-10-14 06:31:35)Sort link order             (2024-10-14 06:31:35)Graph cleaning finished     (2024-10-14 06:31:35)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k027_assembly_graph.gfaCleaning k47 graphRepair multi way junctions  (2024-10-14 06:31:35)Filter by read depth        (2024-10-14 06:31:35)Filter homopolymer loops    (2024-10-14 06:31:35)Merge all possible          (2024-10-14 06:31:35)Normalise read depths       (2024-10-14 06:31:35)Remove zero length segments (2024-10-14 06:31:35)Sort link order             (2024-10-14 06:31:35)Graph cleaning finished     (2024-10-14 06:31:35)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k047_assembly_graph.gfaCleaning k63 graphRepair multi way junctions  (2024-10-14 06:31:35)Filter by read depth        (2024-10-14 06:31:35)Filter homopolymer loops    (2024-10-14 06:31:35)Merge all possible          (2024-10-14 06:31:35)Normalise read depths       (2024-10-14 06:31:35)Remove zero length segments (2024-10-14 06:31:35)Sort link order             (2024-10-14 06:31:35)Graph cleaning finished     (2024-10-14 06:31:35)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k063_assembly_graph.gfaCleaning k77 graphRepair multi way junctions  (2024-10-14 06:31:35)Filter by read depth        (2024-10-14 06:31:35)Filter homopolymer loops    (2024-10-14 06:31:35)Merge all possible          (2024-10-14 06:31:35)Normalise read depths       (2024-10-14 06:31:35)Remove zero length segments (2024-10-14 06:31:35)Sort link order             (2024-10-14 06:31:35)Graph cleaning finished     (2024-10-14 06:31:35)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2024-10-14 06:31:35)Filter by read depth        (2024-10-14 06:31:35)Filter homopolymer loops    (2024-10-14 06:31:35)Merge all possible          (2024-10-14 06:31:35)Normalise read depths       (2024-10-14 06:31:35)Remove zero length segments (2024-10-14 06:31:35)Sort link order             (2024-10-14 06:31:35)Graph cleaning finished     (2024-10-14 06:31:35)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2024-10-14 06:31:35)Filter by read depth        (2024-10-14 06:31:35)Filter homopolymer loops    (2024-10-14 06:31:35)Merge all possible          (2024-10-14 06:31:35)Normalise read depths       (2024-10-14 06:31:35)Remove zero length segments (2024-10-14 06:31:35)Sort link order             (2024-10-14 06:31:35)Graph cleaning finished     (2024-10-14 06:31:35)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2024-10-14 06:31:35)Filter by read depth        (2024-10-14 06:31:35)Filter homopolymer loops    (2024-10-14 06:31:35)Merge all possible          (2024-10-14 06:31:35)Normalise read depths       (2024-10-14 06:31:35)Remove zero length segments (2024-10-14 06:31:35)Sort link order             (2024-10-14 06:31:35)Graph cleaning finished     (2024-10-14 06:31:35)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2024-10-14 06:31:35)Filter by read depth        (2024-10-14 06:31:35)Filter homopolymer loops    (2024-10-14 06:31:35)Merge all possible          (2024-10-14 06:31:35)Normalise read depths       (2024-10-14 06:31:35)Remove zero length segments (2024-10-14 06:31:35)Sort link order             (2024-10-14 06:31:35)Graph cleaning finished     (2024-10-14 06:31:35)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2024-10-14 06:31:35)Filter by read depth        (2024-10-14 06:31:35)Filter homopolymer loops    (2024-10-14 06:31:35)Merge all possible          (2024-10-14 06:31:35)Normalise read depths       (2024-10-14 06:31:35)Remove zero length segments (2024-10-14 06:31:35)Sort link order             (2024-10-14 06:31:35)Graph cleaning finished     (2024-10-14 06:31:35)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2024-10-14 06:31:35)Filter by read depth        (2024-10-14 06:31:35)Filter homopolymer loops    (2024-10-14 06:31:35)Merge all possible          (2024-10-14 06:31:35)Normalise read depths       (2024-10-14 06:31:35)Remove zero length segments (2024-10-14 06:31:35)Sort link order             (2024-10-14 06:31:35)Graph cleaning finished     (2024-10-14 06:31:35)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2024-10-14 06:31:35)Filter by read depth        (2024-10-14 06:31:35)Filter homopolymer loops    (2024-10-14 06:31:35)Merge all possible          (2024-10-14 06:31:35)Normalise read depths       (2024-10-14 06:31:35)Remove zero length segments (2024-10-14 06:31:35)Sort link order             (2024-10-14 06:31:35)Graph cleaning finished     (2024-10-14 06:31:35)Saving /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2024-10-14 06:31:35)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k027.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k047.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k063.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k077.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k089.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k099.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k107.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k115.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k121.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/001_spades_graph_k127.gfaDeleting /galaxy/server/database/jobs_directory/000/3/working/spades_assembly/Determining graph multiplicity (2024-10-14 06:31:35)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Cleaning graph (2024-10-14 06:31:35)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removed    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2024-10-14 06:31:35)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2024-10-14 06:31:35)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundApplying bridges (2024-10-14 06:31:35)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultCleaning up leftover segments (2024-10-14 06:31:35)Segments eligible for deletion:Bridged assembly graph (2024-10-14 06:31:35)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Component   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2024-10-14 06:31:35)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2024-10-14 06:31:44)Saving /galaxy/server/database/jobs_directory/000/3/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/3/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #2)" name="1" time="174.07043361663818">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-10-14 06:32:27)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided both short and long reads, Unicycler will perform a hybrid assembly.It will first use SPAdes to make a short-read assembly graph, and then it willuse various methods to scaffold that graph with the long reads.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq.gz -2 fq2.fastq.gz -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/7/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status   Path                        spades.py     4.0.0     good     /usr/local/bin/spades.py    racon         1.5.0     good     /usr/local/bin/racon        makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb  tblastn       2.16.0+   good     /usr/local/bin/tblastn    Choosing k-mer range for assembly (2024-10-14 06:32:28)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2024-10-14 06:32:28)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/7/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/7/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/7/working/fq2.fastq.gz -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/7/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/7/working/fq1.fastq.gz -2 /galaxy/server/database/jobs_directory/000/7/working/fq2.fastq.gz -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.1.100+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/7/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/7/working/fq1.fastq.gz']      right reads: ['/galaxy/server/database/jobs_directory/000/7/working/fq2.fastq.gz']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/7/working/fq1.fastq.gz: max reads length: 251/galaxy/server/database/jobs_directory/000/7/working/fq2.fastq.gz: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/7/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/7/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/7/working/spades_assembly/dataset.info") with K=27  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.000     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.007     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.007     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.072    82M / 82M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.075    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.088    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.089    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.097    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.135     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.149     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.149     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.149     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.149     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.150     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.150     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.150     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:00.882     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:00.884     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.089     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:01.089     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:01.121     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:01.121     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:01.122     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:01.123     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:01.123     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.833  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:01.833  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:01.834     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:02.035     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:02.035     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.072     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:02.073     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:02.221     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:02.232     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:02.246     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:02.249     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:02.251     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:02.253     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:02.256     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:02.256     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:02.257     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:02.257     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:02.257     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:02.258     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:02.258     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:02.258     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:02.258     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:02.258     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:02.258     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:02.260     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:02.260     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.288     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:02.289     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:02.353     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:02.354     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:02.402     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:02.403     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:02.403     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:02.403     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:02.403     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:02.499     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:02.791     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:03.311     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:03.775     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:04.561     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:04.561     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.563     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:04.563     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:04.563     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:04.563     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:04.563     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:04.563     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:04.563     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:04.563     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Gap Clo..34:30)Remove zero length segments (2024-10-14 06:34:30)Sort link order             (2024-10-14 06:34:30)Graph cleaning finished     (2024-10-14 06:34:30)Saving /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2024-10-14 06:34:30)Filter by read depth        (2024-10-14 06:34:30)Filter homopolymer loops    (2024-10-14 06:34:30)Merge all possible          (2024-10-14 06:34:30)Normalise read depths       (2024-10-14 06:34:30)Remove zero length segments (2024-10-14 06:34:30)Sort link order             (2024-10-14 06:34:30)Graph cleaning finished     (2024-10-14 06:34:30)Saving /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2024-10-14 06:34:30)Filter by read depth        (2024-10-14 06:34:30)Filter homopolymer loops    (2024-10-14 06:34:30)Merge all possible          (2024-10-14 06:34:30)Normalise read depths       (2024-10-14 06:34:30)Remove zero length segments (2024-10-14 06:34:30)Sort link order             (2024-10-14 06:34:30)Graph cleaning finished     (2024-10-14 06:34:30)Saving /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2024-10-14 06:34:30)Filter by read depth        (2024-10-14 06:34:30)Filter homopolymer loops    (2024-10-14 06:34:30)Merge all possible          (2024-10-14 06:34:30)Normalise read depths       (2024-10-14 06:34:30)Remove zero length segments (2024-10-14 06:34:30)Sort link order             (2024-10-14 06:34:30)Graph cleaning finished     (2024-10-14 06:34:30)Saving /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2024-10-14 06:34:30)Filter by read depth        (2024-10-14 06:34:30)Filter homopolymer loops    (2024-10-14 06:34:30)Merge all possible          (2024-10-14 06:34:30)Normalise read depths       (2024-10-14 06:34:30)Remove zero length segments (2024-10-14 06:34:30)Sort link order             (2024-10-14 06:34:30)Graph cleaning finished     (2024-10-14 06:34:30)Saving /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2024-10-14 06:34:30)Filter by read depth        (2024-10-14 06:34:30)Filter homopolymer loops    (2024-10-14 06:34:30)Merge all possible          (2024-10-14 06:34:30)Normalise read depths       (2024-10-14 06:34:30)Remove zero length segments (2024-10-14 06:34:30)Sort link order             (2024-10-14 06:34:30)Graph cleaning finished     (2024-10-14 06:34:30)Saving /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2024-10-14 06:34:30)Filter by read depth        (2024-10-14 06:34:30)Filter homopolymer loops    (2024-10-14 06:34:30)Merge all possible          (2024-10-14 06:34:30)Normalise read depths       (2024-10-14 06:34:30)Remove zero length segments (2024-10-14 06:34:30)Sort link order             (2024-10-14 06:34:30)Graph cleaning finished     (2024-10-14 06:34:30)Saving /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2024-10-14 06:34:30)Filter by read depth        (2024-10-14 06:34:30)Filter homopolymer loops    (2024-10-14 06:34:30)Merge all possible          (2024-10-14 06:34:30)Normalise read depths       (2024-10-14 06:34:30)Remove zero length segments (2024-10-14 06:34:30)Sort link order             (2024-10-14 06:34:30)Graph cleaning finished     (2024-10-14 06:34:30)Saving /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2024-10-14 06:34:30)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k027.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k047.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k063.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k077.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k089.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k099.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k107.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k115.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k121.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/001_spades_graph_k127.gfaDeleting /galaxy/server/database/jobs_directory/000/7/working/spades_assembly/Determining graph multiplicity (2024-10-14 06:34:30)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Cleaning graph (2024-10-14 06:34:30)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removed    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2024-10-14 06:34:30)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2024-10-14 06:34:30)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundLoading reads (2024-10-14 06:34:30)0 / 1 (0.0%)1 / 1 (100.0%) - 5,386 bp1 / 1 (100.0%) - 5,386 bpAssembling contigs and long reads with miniasm (2024-10-14 06:34:30)    Unicycler uses miniasm to construct a string graph assembly using both theshort read contigs and the long reads. It will then use the resulting stringgraph to produce bridges between contigs. This method requires decent coverageof long reads and therefore may not be fruitful if long reads are sparse.However, it does not rely on the short read assembly graph having goodconnectivity and is able to bridge an assembly graph even when it contains manydead ends.    Unicycler uses two types of "reads" as assembly input: anchor contigs fromthe short-read assembly and actual long reads which overlap two or more ofthese contigs. It then assembles them with miniasm.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/7/working/miniasm_assembly/all_segments.fasta1538635158+15386227538251555155255cm:i:11491538651635383+153861221220220255cm:i:47Number of minimap alignments: 1Saving to /galaxy/server/database/jobs_directory/000/7/working/miniasm_assembly/01_assembly_reads.fastq:  0 short-read contigs  1 long readsFinding overlaps with minimap... failedAssembling reads with miniasm... empty resultCreating simple long read bridges (2024-10-14 06:34:30)    Unicycler uses long read alignments (from minimap) to resolve simple repeatstructures in the graph. This takes care of some "low-hanging fruit" of thegraph simplification.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/7/working/simple_bridging/all_segments.fasta1538635158+15386227538251555155255cm:i:11491538651635383+153861221220220255cm:i:47Number of minimap alignments: 1    Two-way junctions are defined as cases where two graph contigs (A and B)join together (C) and then split apart again (D and E). This usually representsa simple 2-copy repeat, and there are two possible options for its resolution:(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such ajunction gets to "vote" for option 1, option 2 or neither. Unicycler creates abridge at each junction for the most voted for option.No suitable two-way junctions present    Simple loops are parts of the graph where two contigs (A and B) areconnected via a repeat (C) which loops back to itself (via D). It is possibleto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is thecorrect number of times through. In this step, such reads are found and each isaligned against alternative loop counts. A reads casts its "vote" for the loopcount it agrees best with, and Unicycler creates a bridge using the most votedfor count.No suitable simple loops presentDetermining low score threshold (2024-10-14 06:34:30)    Before conducting semi-global alignment of the long reads to the assemblygraph, Unicycler must determine a minimum alignment score threshold such thatnonsense alignments are excluded. To choose a threshold automatically, itexamines alignments between random sequences and selects a score a few standarddeviations above the mean.Automatically choosing a threshold using random alignment scores.Random alignment mean score: 61.66         standard deviation:  1.31        Low score threshold: 61.66 + (7 x 1.31) = 70.86Aligning reads with minimap (2024-10-14 06:34:30)1538655161+15386229538551565156255cm:i:9591538651685384+153866222216216255cm:i:39Done! 1 out of 1 reads alignedAligning reads (2024-10-14 06:34:30)1/1: 1 (5386 bp)minimap alignments:    5,5161,+,1,229,5385    5168,5384,+,1,6,222Reference ranges:    1+: 0 - 5386Range: 1: 0 - 5386    common 10-mers: 5464    line 1: 215 points, score=213.009259 (good)    line 2: 5153 points, score=5151.000388 (good)All Seqan alignments (time to align = 0.056 s):  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1          0      224        5162      5386       +        672        100.00   100.00%         1        224     5386           0      5162       +      15486        100.00   100.00%Final alignments:  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1        224     5386           0      5162       +      15486        100.00   100.00%         1          0      224        5162      5386       +        672        100.00   100.00%Read alignment summary (2024-10-14 06:34:30)Total read count:            1Fully aligned reads:         1Partially aligned reads:     0Unaligned reads:             0Total bases aligned:     5,386 bpMean alignment identity:   100.0%Deleting /galaxy/server/database/jobs_directory/000/7/working/read_alignment/Setting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00Building long read bridges (2024-10-14 06:34:30)    Unicycler uses the long read alignments to produce bridges between anchorsegments. These bridges can be formed using as few as one long read, givingUnicycler the ability to bridge the graph even when long-read depth is low.Median depth of 10 longest contigs: 1.00                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path                Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  QualityApplying bridges (2024-10-14 06:34:30)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultCleaning up leftover segments (2024-10-14 06:34:30)Segments eligible for deletion:Bridged assembly graph (2024-10-14 06:34:30)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Component   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2024-10-14 06:34:30)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2024-10-14 06:34:39)Saving /galaxy/server/database/jobs_directory/000/7/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/7/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #3)" name="2" time="159.58067536354065">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-10-14 06:35:13)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only short reads, Unicycler will essentially function as a SPAdes-optimiser. It will try many k-mer sizes, choose the best based on contig lengthand graph connectivity, and scaffold the graph using SPAdes repeat resolution.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/10/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status     Path                        spades.py     4.0.0     good       /usr/local/bin/spades.py    racon                   not used                               makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb  tblastn       2.16.0+   good       /usr/local/bin/tblastn    Choosing k-mer range for assembly (2024-10-14 06:35:13)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2024-10-14 06:35:13)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/10/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/10/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/10/working/fq2.fastq -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/10/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/10/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/10/working/fq2.fastq -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.1.100+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/10/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/10/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/10/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/10/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/10/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/10/working/spades_assembly/dataset.info") with K=27  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.001     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.006     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.006     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.065    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.067    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.081    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.082    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.088    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.118     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.130     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.131     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.131     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.131     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.132     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.132     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.132     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:00.796     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:00.799     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:00.967     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:00.967     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:01.000     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:01.000     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:01.001     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:01.001     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:01.001     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.623  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:01.623  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:01.623     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.817     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:01.817     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.855     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:01.855     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:01.974     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:01.985     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:02.000     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:02.002     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:02.005     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:02.007     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:02.010     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:02.011     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:02.011     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:02.011     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:02.011     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:02.012     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:02.013     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:02.013     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:02.013     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:02.013     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:02.013     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:02.014     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:02.014     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.040     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:02.041     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:02.106     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:02.107     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:02.151     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:02.151     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:02.151     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:02.151     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:02.151     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:02.249     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:02.543     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:03.062     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:03.523     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:04.311     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:04.311     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.312     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:04.312     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:04.312     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:04.312     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:04.312     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:04.313     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:04.313     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:04.313     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Gap Cl.. / 159M  INFO    General                 (main.cpp                  : 131)   Assembling time: 0 hours 0 minutes 4 seconds===== K127 finished.===== Copy files started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/contigs.paths===== Copy files finished.===== Assembling finished.===== Breaking scaffolds started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/misc --threshold_for_breaking_scaffolds 3===== Breaking scaffolds finished.===== Terminate started.===== Terminate finished. * Assembled contigs are in /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/spades.logThank you for using SPAdes! If you use it in your research, please cite:  Prjibelski, A., Antipov, D., Meleshko, D., Lapidus, A. and Korobeynikov, A., 2020. Using SPAdes de novo assembler. Current protocols in bioinformatics, 70(1), p.e102.  doi.org/10.1002/cpbi.102Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k27 graphRepair multi way junctions  (2024-10-14 06:37:11)Filter by read depth        (2024-10-14 06:37:11)Filter homopolymer loops    (2024-10-14 06:37:11)Merge all possible          (2024-10-14 06:37:11)Normalise read depths       (2024-10-14 06:37:11)Remove zero length segments (2024-10-14 06:37:11)Sort link order             (2024-10-14 06:37:11)Graph cleaning finished     (2024-10-14 06:37:11)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k027_assembly_graph.gfaCleaning k47 graphRepair multi way junctions  (2024-10-14 06:37:11)Filter by read depth        (2024-10-14 06:37:11)Filter homopolymer loops    (2024-10-14 06:37:11)Merge all possible          (2024-10-14 06:37:11)Normalise read depths       (2024-10-14 06:37:11)Remove zero length segments (2024-10-14 06:37:11)Sort link order             (2024-10-14 06:37:11)Graph cleaning finished     (2024-10-14 06:37:11)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k047_assembly_graph.gfaCleaning k63 graphRepair multi way junctions  (2024-10-14 06:37:11)Filter by read depth        (2024-10-14 06:37:11)Filter homopolymer loops    (2024-10-14 06:37:11)Merge all possible          (2024-10-14 06:37:11)Normalise read depths       (2024-10-14 06:37:11)Remove zero length segments (2024-10-14 06:37:11)Sort link order             (2024-10-14 06:37:11)Graph cleaning finished     (2024-10-14 06:37:11)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k063_assembly_graph.gfaCleaning k77 graphRepair multi way junctions  (2024-10-14 06:37:11)Filter by read depth        (2024-10-14 06:37:11)Filter homopolymer loops    (2024-10-14 06:37:11)Merge all possible          (2024-10-14 06:37:11)Normalise read depths       (2024-10-14 06:37:11)Remove zero length segments (2024-10-14 06:37:11)Sort link order             (2024-10-14 06:37:11)Graph cleaning finished     (2024-10-14 06:37:11)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2024-10-14 06:37:11)Filter by read depth        (2024-10-14 06:37:11)Filter homopolymer loops    (2024-10-14 06:37:11)Merge all possible          (2024-10-14 06:37:11)Normalise read depths       (2024-10-14 06:37:11)Remove zero length segments (2024-10-14 06:37:11)Sort link order             (2024-10-14 06:37:11)Graph cleaning finished     (2024-10-14 06:37:11)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2024-10-14 06:37:11)Filter by read depth        (2024-10-14 06:37:11)Filter homopolymer loops    (2024-10-14 06:37:11)Merge all possible          (2024-10-14 06:37:11)Normalise read depths       (2024-10-14 06:37:11)Remove zero length segments (2024-10-14 06:37:11)Sort link order             (2024-10-14 06:37:11)Graph cleaning finished     (2024-10-14 06:37:11)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2024-10-14 06:37:11)Filter by read depth        (2024-10-14 06:37:11)Filter homopolymer loops    (2024-10-14 06:37:11)Merge all possible          (2024-10-14 06:37:11)Normalise read depths       (2024-10-14 06:37:11)Remove zero length segments (2024-10-14 06:37:11)Sort link order             (2024-10-14 06:37:11)Graph cleaning finished     (2024-10-14 06:37:11)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2024-10-14 06:37:11)Filter by read depth        (2024-10-14 06:37:11)Filter homopolymer loops    (2024-10-14 06:37:11)Merge all possible          (2024-10-14 06:37:11)Normalise read depths       (2024-10-14 06:37:11)Remove zero length segments (2024-10-14 06:37:11)Sort link order             (2024-10-14 06:37:11)Graph cleaning finished     (2024-10-14 06:37:11)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2024-10-14 06:37:11)Filter by read depth        (2024-10-14 06:37:11)Filter homopolymer loops    (2024-10-14 06:37:11)Merge all possible          (2024-10-14 06:37:11)Normalise read depths       (2024-10-14 06:37:11)Remove zero length segments (2024-10-14 06:37:11)Sort link order             (2024-10-14 06:37:11)Graph cleaning finished     (2024-10-14 06:37:11)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2024-10-14 06:37:11)Filter by read depth        (2024-10-14 06:37:11)Filter homopolymer loops    (2024-10-14 06:37:11)Merge all possible          (2024-10-14 06:37:11)Normalise read depths       (2024-10-14 06:37:11)Remove zero length segments (2024-10-14 06:37:11)Sort link order             (2024-10-14 06:37:11)Graph cleaning finished     (2024-10-14 06:37:11)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2024-10-14 06:37:11)Filter by read depth        (2024-10-14 06:37:11)Filter homopolymer loops    (2024-10-14 06:37:11)Merge all possible          (2024-10-14 06:37:11)Normalise read depths       (2024-10-14 06:37:11)Remove zero length segments (2024-10-14 06:37:11)Sort link order             (2024-10-14 06:37:11)Graph cleaning finished     (2024-10-14 06:37:11)Saving /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2024-10-14 06:37:11)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k027.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k047.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k063.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k077.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k089.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k099.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k107.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k115.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k121.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/001_spades_graph_k127.gfaDeleting /galaxy/server/database/jobs_directory/000/10/working/spades_assembly/Determining graph multiplicity (2024-10-14 06:37:11)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Cleaning graph (2024-10-14 06:37:11)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removed    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2024-10-14 06:37:11)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2024-10-14 06:37:11)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundApplying bridges (2024-10-14 06:37:11)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultCleaning up leftover segments (2024-10-14 06:37:11)Segments eligible for deletion:Bridged assembly graph (2024-10-14 06:37:11)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Component   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2024-10-14 06:37:11)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2024-10-14 06:37:19)Saving /galaxy/server/database/jobs_directory/000/10/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/10/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #4)" name="3" time="33.233829498291016">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-10-14 06:37:50)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only long reads, Unicycler will assemble the reads with miniasm andthen run repeated polishing rounds using Racon.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_anchor_seg_len 10 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmers 21,23 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/12/workingDependencies:  Program       Version   Status     Path                        spades.py               not used                               racon         1.5.0     good       /usr/local/bin/racon        makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb  tblastn       2.16.0+   good       /usr/local/bin/tblastn    Loading reads (2024-10-14 06:37:51)0 / 40 (0.0%)1 / 40 (2.5%) - 412 bp2 / 40 (5.0%) - 4,847 bp3 / 40 (7.5%) - 8,974 bp4 / 40 (10.0%) - 13,249 bp5 / 40 (12.5%) - 14,258 bp6 / 40 (15.0%) - 14,806 bp7 / 40 (17.5%) - 19,262 bp8 / 40 (20.0%) - 19,737 bp9 / 40 (22.5%) - 20,395 bp10 / 40 (25.0%) - 32,024 bp11 / 40 (27.5%) - 32,698 bp12 / 40 (30.0%) - 34,509 bp13 / 40 (32.5%) - 39,018 bp14 / 40 (35.0%) - 43,351 bp15 / 40 (37.5%) - 44,224 bp16 / 40 (40.0%) - 45,978 bp17 / 40 (42.5%) - 46,402 bp18 / 40 (45.0%) - 61,596 bp19 / 40 (47.5%) - 62,279 bp20 / 40 (50.0%) - 63,700 bp21 / 40 (52.5%) - 66,412 bp22 / 40 (55.0%) - 66,845 bp23 / 40 (57.5%) - 67,316 bp24 / 40 (60.0%) - 69,428 bp25 / 40 (62.5%) - 73,964 bp26 / 40 (65.0%) - 75,608 bp27 / 40 (67.5%) - 80,223 bp28 / 40 (70.0%) - 84,810 bp29 / 40 (72.5%) - 92,076 bp30 / 40 (75.0%) - 92,832 bp31 / 40 (77.5%) - 92,939 bp32 / 40 (80.0%) - 93,532 bp33 / 40 (82.5%) - 96,370 bp34 / 40 (85.0%) - 100,656 bp35 / 40 (87.5%) - 119,222 bp36 / 40 (90.0%) - 123,827 bp37 / 40 (92.5%) - 155,106 bp38 / 40 (95.0%) - 156,254 bp39 / 40 (97.5%) - 157,993 bp40 / 40 (100.0%) - 162,406 bp40 / 40 (100.0%) - 162,406 bpAssembling contigs and long reads with miniasm (2024-10-14 06:37:51)Saving to /galaxy/server/database/jobs_directory/000/12/working/miniasm_assembly/01_assembly_reads.fastq:  40 long readsFinding overlaps with minimap... success  120 overlapsAssembling reads with miniasm... success  7 segments, 6 links    Unicycler removes any links from the string graph which create branches.I.e. if any segment has two or more links connected to one end, those links areremoved. This will result in a graph with only simple linear paths that issuitable for creating unambiguous bridges.No links needed removalSaving /galaxy/server/database/jobs_directory/000/12/working/miniasm_assembly/11_branching_paths_removed.gfaMerging segments into unitigs:Linear unitig: 3708:125-4288- -> f49b:293-4469+ -> 9e6d:143-4411- -> 9780:142-4271- -> a53e:333-4400+ -> b949:140-4359- -> 054c:932-4389-  1 linear unitig  total size = 5,836 bpSaving /galaxy/server/database/jobs_directory/000/12/working/miniasm_assembly/12_unitig_graph.gfaPolishing miniasm assembly with Racon (2024-10-14 06:37:51)    Unicycler now uses Racon to polish the miniasm assembly. It does multiplerounds of polishing to get the best consensus. Circular unitigs are rotatedbetween rounds such that all parts (including the ends) are polished well.Saving to /galaxy/server/database/jobs_directory/000/12/working/miniasm_assembly/racon_polish/polishing_reads.fastq:  40 long readsPolish       Assembly          Mappinground            size          quality0237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42862104010+158361061460311473800255cm:i:2000237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1583652215833179612255cm:i:27054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-158362376583334573457255cm:i:1153054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262525-158363023147872399255cm:i:1443708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46052804284-158364393614814004255cm:i:2463708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194286-15836421558335461618255cm:i:884850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271704027+158361680583310324153255cm:i:1744850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934082+15836416022201598255cm:i:30598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713344566-158362699578612813232255cm:i:243598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-158365026637722680255cm:i:129771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-158362657583314693386255cm:i:268771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template4615972786-158363026369052689255cm:i:1579780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331434271-15836338425418344128255cm:i:4709780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330924330-15836450357984301295255cm:i:779e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45365444408-1583669392712083864255cm:i:2379e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630084472-15836421557483511533255cm:i:53a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1583629093222131313255cm:i:22a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template44563354397+158361321525713514062255cm:i:280a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374349+1583623961238938255cm:i:40a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445686537+1583653345798154464255cm:i:26b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351114359-158361673579820624248255cm:i:487b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351091619-158363015254721510255cm:i:68bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template4275934048+158361733583313034100255cm:i:230bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+15836416903111712255cm:i:43f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894205+1583623393910393916255cm:i:166f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092961782+15836424257983671556255cm:i:63begin           5,836             5.330237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162901009505424314045255cm:i:5290237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1629056706287297617255cm:i:630237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162904404122400255cm:i:19054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162902540628722493747255cm:i:527054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1629051247412762423255cm:i:2453708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162904431623224312255cm:i:4863708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16290435462879431933255cm:i:1944850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271164027+162901774628721454513255cm:i:4264850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16290417414211737255cm:i:61598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162902854622622573372255cm:i:501598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1629051283114592780255cm:i:289771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162902825628722683462255cm:i:513771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template4615972745-1629074280515012731255cm:i:2899780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16290354469920224345255cm:i:3779780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694304-16290498462716141287255cm:i:1179e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1629072453419214462255cm:i:3379e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16290459762065801609255cm:i:103a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1629030833386169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162901126570823684582255cm:i:487a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374392+162902310393621016255cm:i:59a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445686539+1629057856254217469255cm:i:45b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162901806625827774452255cm:i:600b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162907416037611529255cm:i:150bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122795+1629052095912149703255cm:i:24bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421149847+162905851307155722255cm:i:17bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template4275934048+162901886628720704401255cm:i:456bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16290418386561834255cm:i:109c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1629020602358156298255cm:i:35f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1629023443621064413255cm:i:421f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16290448862737441785255cm:i:1311               6,290             7.820237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162421016500924603993255cm:i:5300237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1624256266239283613255cm:i:610237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162424408117404255cm:i:18054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162422535623922343704255cm:i:514054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1624251246913872418255cm:i:2713708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162424427623804272255cm:i:4943708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16242431462399551925255cm:i:1964850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271084027+162421759623921944480255cm:i:4404850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16242417354501731255cm:i:67598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162422848617822843330255cm:i:509598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1624251282515042774255cm:i:295771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162422819623922353420255cm:i:510771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template46151092745-1624274278715172713255cm:i:3049780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16242358465920514301255cm:i:3919780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694304-16242493962236181284255cm:i:1149e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1624272449319414421255cm:i:3459e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16242455661585791602255cm:i:105a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1624230773380169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162421133566424054531255cm:i:507a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374397+162422310513531028255cm:i:59a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456107539+1624257596206204447255cm:i:40b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162421799621027494411255cm:i:591b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162427416017951527255cm:i:165bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122847+1624251665916224750255cm:i:35bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421160847+162426021310144708255cm:i:16bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template42751244048+162421908623920614331255cm:i:454bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16242418316671827255cm:i:111c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1624220532352157299255cm:i:37f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1624223439521304372255cm:i:425f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16242444762257621778255cm:i:1382               6,242             8.020237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template42861294010+162651028502524363997255cm:i:5270237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template4286129722+1626556426262281620255cm:i:590237bf86-5cb0-4480-a66f-3eefdb9ef759_Basecall_1D_template428636324010+162654408105404255cm:i:17054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44139344391-162652544626222283718255cm:i:507054cd546-5f45-4edd-a9a4-b53d513cbc8c_Basecall_1D_template44131262508-1626551247813532427255cm:i:2603708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template46051104284-162654429323774289255cm:i:4923708cda9-3400-4482-b378-0644f4868ccc_Basecall_1D_template460527194590-16265433162629671931255cm:i:1944850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template41271084027+162651772626221904490255cm:i:4364850ae22-4e87-4dbf-83ee-c13cc2c33f9e_Basecall_1D_template412728934124+16265417484481744255cm:i:62598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template458713454580-162652857620122703344255cm:i:503598f0c09-1917-4ee2-ac23-f021e152cfbf_Basecall_1D_template4587982778-1626551283414632783255cm:i:284771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template461512254611-162652828626222513434255cm:i:515771b73f3-1234-4c52-bb54-14c89e6e5e17_Basecall_1D_template46151022745-1626574280415112730255cm:i:3059780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template43331404284-16265358467620634318255cm:i:3929780e420-c7e3-4229-b406-d3d4b590ab2d_Basecall_1D_template433330694328-16265493062466231316255cm:i:1139e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template45361384408-1626572451019874438255cm:i:3509e6d95e5-24f9-43ca-b3a0-4989848e3005_Basecall_1D_template453630024533-16265457361815691608255cm:i:102a152496f-c70a-4869-b7f7-2342f431585f_Basecall_1D_template433106396+1626530893392169303255cm:i:32a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456864397+162651145568024234535255cm:i:509a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template445634374397+162652310633371040255cm:i:56a53eb8ee-85b3-4015-aeaa-00c7d69a359e_Basecall_1D_template4456107539+1626557796229223450255cm:i:45b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351054374-162651812623327694421255cm:i:601b9497173-8976-48fa-a822-93edea3f0baf_Basecall_1D_template44351051578-162657416157641541255cm:i:156bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421122847+1626551825936236754255cm:i:36bca7e454-f5a3-4320-b2bf-d50cd6cbfa2a_Basecall_1D_template1421149847+162655891322155733255cm:i:17bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template42751244048+162651921626220624341255cm:i:449bd2c355e-c70e-42c7-a02f-810dd87fab35_Basecall_1D_template427525324244+16265418446601840255cm:i:111c2f682b3-3774-41a5-8663-32d081b558ee_Basecall_1D_template114897391+1626520632361157298255cm:i:37f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45092894485+1626523441221824389255cm:i:436f49ba5d3-abc3-4fc1-8efc-380b3238b0de_Basecall_1D_template45091111803+16265446462487871784255cm:i:1413               6,265             8.04Best polish: /galaxy/server/database/jobs_directory/000/12/working/miniasm_assembly/racon_polish/016_rotated.fastaSaving /galaxy/server/database/jobs_directory/000/12/working/miniasm_assembly/13_racon_polished.gfaAssembly complete (2024-10-14 06:37:51)Saving /galaxy/server/database/jobs_directory/000/12/working/assembly.gfa
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #5)" name="4" time="19.460062742233276">
        
            <error type="error" message="Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: ."><![CDATA[
                { "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error", "test_index": 4, "time_seconds": 19.460062742233276, "tool_id": "unicycler", "tool_version": "0.5.1+galaxy0"}
            ]]></error>
        
    </testcase>
    
    <testcase classname="unicycler (Test #6)" name="5" time="159.30267882347107">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-10-14 06:38:46)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided only short reads, Unicycler will essentially function as a SPAdes-optimiser. It will try many k-mer sizes, choose the best based on contig lengthand graph connectivity, and scaffold the graph using SPAdes repeat resolution.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 1Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/19/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status     Path                        spades.py     4.0.0     good       /usr/local/bin/spades.py    racon                   not used                               makeblastdb   2.16.0+   good       /usr/local/bin/makeblastdb  tblastn       2.16.0+   good       /usr/local/bin/tblastn    Choosing k-mer range for assembly (2024-10-14 06:38:46)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2024-10-14 06:38:46)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/19/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/19/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/19/working/fq2.fastq -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/19/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/19/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/19/working/fq2.fastq -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.1.100+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/19/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/19/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/19/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/19/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/19/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/19/working/spades_assembly/dataset.info") with K=27  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.000     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.001     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.006     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.006     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.065    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.068    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.081    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.081    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.088    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.117     1M / 41M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.129     1M / 41M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.129     1M / 41M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.129     1M / 41M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.129     1M / 41M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.130     1M / 41M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.130     1M / 41M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.130     1M / 41M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:00.778     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:00.780     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:00.958     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:00.958     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:00.992     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:00.992     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.993     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.993     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.993     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.619  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:01.619  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:01.620     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.797     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:01.797     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.836     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:01.836     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:01.954     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:01.965     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:01.979     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:01.982     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:01.984     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:01.986     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:01.989     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:01.990     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:01.990     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:01.990     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:01.990     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:01.991     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:01.992     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:01.992     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:01.992     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:01.992     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:01.992     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:01.994     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:01.994     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.021     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:02.021     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:02.081     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:02.083     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:02.127     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:02.127     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:02.127     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:02.127     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:02.127     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:02.225     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:02.518     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:03.035     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:03.502     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:04.290     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:04.290     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.292     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:04.292     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:04.292     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:04.292     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:04.292     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:04.292     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:04.292     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:04.292     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Gap Cl..tabase/jobs_directory/000/19/working/spades_assembly/K127/scaffolds.fasta  0:00:04.277     3M / 159M  INFO    General                 (contig_output_stage.cpp   : 107)   Outputting FastG paths to /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/scaffolds.paths  0:00:04.281     3M / 159M  INFO    General                 (contig_output_stage.cpp   : 114)   Populating GFA with scaffold paths  0:00:04.289     3M / 159M  INFO    General                 (pipeline.cpp              : 292)   SPAdes finished  0:00:04.291     1M / 159M  INFO    General                 (main.cpp                  : 131)   Assembling time: 0 hours 0 minutes 4 seconds===== K127 finished.===== Copy files started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/copy_files.py /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/before_rr.fasta /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/before_rr.fasta /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/assembly_graph_after_simplification.gfa /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/final_contigs.fasta /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/contigs.fasta /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/first_pe_contigs.fasta /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/strain_graph.gfa /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/strain_graph.gfa /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/scaffolds.fasta /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/scaffolds.fasta /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/scaffolds.paths /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/scaffolds.paths /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/assembly_graph_with_scaffolds.gfa /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/assembly_graph.fastg /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/K127/final_contigs.paths /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/contigs.paths===== Copy files finished.===== Assembling finished.===== Breaking scaffolds started.== Running: /usr/local/bin/python3 /usr/local/share/spades/spades_pipeline/scripts/breaking_scaffolds_script.py --result_scaffolds_filename /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/scaffolds.fasta --misc_dir /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/misc --threshold_for_breaking_scaffolds 3===== Breaking scaffolds finished.===== Terminate started.===== Terminate finished. * Assembled contigs are in /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/contigs.fasta * Assembled scaffolds are in /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/scaffolds.fasta * Paths in the assembly graph corresponding to the contigs are in /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/contigs.paths * Paths in the assembly graph corresponding to the scaffolds are in /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/scaffolds.paths * Assembly graph is in /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/assembly_graph.fastg * Assembly graph in GFA format is in /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/assembly_graph_with_scaffolds.gfa======= SPAdes pipeline finished.SPAdes log can be found here: /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/spades.logThank you for using SPAdes! If you use it in your research, please cite:  Prjibelski, A., Antipov, D., Meleshko, D., Lapidus, A. and Korobeynikov, A., 2020. Using SPAdes de novo assembler. Current protocols in bioinformatics, 70(1), p.e102.  doi.org/10.1002/cpbi.102Insert size mean: 367.3 bpInsert size stdev: 37.3 bpCleaning k27 graphRepair multi way junctions  (2024-10-14 06:40:43)Filter by read depth        (2024-10-14 06:40:43)Filter homopolymer loops    (2024-10-14 06:40:43)Merge all possible          (2024-10-14 06:40:43)Normalise read depths       (2024-10-14 06:40:43)Remove zero length segments (2024-10-14 06:40:43)Sort link order             (2024-10-14 06:40:43)Graph cleaning finished     (2024-10-14 06:40:43)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k027_assembly_graph.gfaCleaning k47 graphRepair multi way junctions  (2024-10-14 06:40:43)Filter by read depth        (2024-10-14 06:40:43)Filter homopolymer loops    (2024-10-14 06:40:43)Merge all possible          (2024-10-14 06:40:43)Normalise read depths       (2024-10-14 06:40:43)Remove zero length segments (2024-10-14 06:40:43)Sort link order             (2024-10-14 06:40:43)Graph cleaning finished     (2024-10-14 06:40:43)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k047_assembly_graph.gfaCleaning k63 graphRepair multi way junctions  (2024-10-14 06:40:43)Filter by read depth        (2024-10-14 06:40:43)Filter homopolymer loops    (2024-10-14 06:40:43)Merge all possible          (2024-10-14 06:40:43)Normalise read depths       (2024-10-14 06:40:43)Remove zero length segments (2024-10-14 06:40:43)Sort link order             (2024-10-14 06:40:43)Graph cleaning finished     (2024-10-14 06:40:43)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k063_assembly_graph.gfaCleaning k77 graphRepair multi way junctions  (2024-10-14 06:40:43)Filter by read depth        (2024-10-14 06:40:43)Filter homopolymer loops    (2024-10-14 06:40:43)Merge all possible          (2024-10-14 06:40:43)Normalise read depths       (2024-10-14 06:40:43)Remove zero length segments (2024-10-14 06:40:43)Sort link order             (2024-10-14 06:40:43)Graph cleaning finished     (2024-10-14 06:40:43)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2024-10-14 06:40:43)Filter by read depth        (2024-10-14 06:40:43)Filter homopolymer loops    (2024-10-14 06:40:43)Merge all possible          (2024-10-14 06:40:43)Normalise read depths       (2024-10-14 06:40:43)Remove zero length segments (2024-10-14 06:40:43)Sort link order             (2024-10-14 06:40:43)Graph cleaning finished     (2024-10-14 06:40:43)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2024-10-14 06:40:43)Filter by read depth        (2024-10-14 06:40:43)Filter homopolymer loops    (2024-10-14 06:40:43)Merge all possible          (2024-10-14 06:40:43)Normalise read depths       (2024-10-14 06:40:43)Remove zero length segments (2024-10-14 06:40:43)Sort link order             (2024-10-14 06:40:43)Graph cleaning finished     (2024-10-14 06:40:43)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2024-10-14 06:40:43)Filter by read depth        (2024-10-14 06:40:43)Filter homopolymer loops    (2024-10-14 06:40:43)Merge all possible          (2024-10-14 06:40:43)Normalise read depths       (2024-10-14 06:40:43)Remove zero length segments (2024-10-14 06:40:43)Sort link order             (2024-10-14 06:40:43)Graph cleaning finished     (2024-10-14 06:40:43)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2024-10-14 06:40:43)Filter by read depth        (2024-10-14 06:40:43)Filter homopolymer loops    (2024-10-14 06:40:43)Merge all possible          (2024-10-14 06:40:43)Normalise read depths       (2024-10-14 06:40:43)Remove zero length segments (2024-10-14 06:40:43)Sort link order             (2024-10-14 06:40:43)Graph cleaning finished     (2024-10-14 06:40:43)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2024-10-14 06:40:43)Filter by read depth        (2024-10-14 06:40:43)Filter homopolymer loops    (2024-10-14 06:40:43)Merge all possible          (2024-10-14 06:40:43)Normalise read depths       (2024-10-14 06:40:43)Remove zero length segments (2024-10-14 06:40:43)Sort link order             (2024-10-14 06:40:43)Graph cleaning finished     (2024-10-14 06:40:43)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2024-10-14 06:40:43)Filter by read depth        (2024-10-14 06:40:43)Filter homopolymer loops    (2024-10-14 06:40:43)Merge all possible          (2024-10-14 06:40:43)Normalise read depths       (2024-10-14 06:40:43)Remove zero length segments (2024-10-14 06:40:43)Sort link order             (2024-10-14 06:40:43)Graph cleaning finished     (2024-10-14 06:40:43)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2024-10-14 06:40:43)Filter by read depth        (2024-10-14 06:40:43)Filter homopolymer loops    (2024-10-14 06:40:43)Merge all possible          (2024-10-14 06:40:43)Normalise read depths       (2024-10-14 06:40:43)Remove zero length segments (2024-10-14 06:40:43)Sort link order             (2024-10-14 06:40:43)Graph cleaning finished     (2024-10-14 06:40:43)Saving /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2024-10-14 06:40:43)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/19/working/spades_assembly/Determining graph multiplicity (2024-10-14 06:40:43)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Saving /galaxy/server/database/jobs_directory/000/19/working/002_depth_filter.gfaCleaning graph (2024-10-14 06:40:43)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removedSaving /galaxy/server/database/jobs_directory/000/19/working/003_overlaps_removed.gfa    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2024-10-14 06:40:43)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2024-10-14 06:40:43)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundApplying bridges (2024-10-14 06:40:43)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultSaving /galaxy/server/database/jobs_directory/000/19/working/004_bridges_applied.gfaCleaning up leftover segments (2024-10-14 06:40:43)Segments eligible for deletion:Bridged assembly graph (2024-10-14 06:40:43)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Saving /galaxy/server/database/jobs_directory/000/19/working/005_final_clean.gfaComponent   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2024-10-14 06:40:43)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2024-10-14 06:40:51)Saving /galaxy/server/database/jobs_directory/000/19/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/19/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #7)" name="6" time="167.5909960269928">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-10-14 06:41:29)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided both short and long reads, Unicycler will perform a hybrid assembly.It will first use SPAdes to make a short-read assembly graph, and then it willuse various methods to scaffold that graph with the long reads.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --keep 2Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/23/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status   Path                        spades.py     4.0.0     good     /usr/local/bin/spades.py    racon         1.5.0     good     /usr/local/bin/racon        makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb  tblastn       2.16.0+   good     /usr/local/bin/tblastn    Choosing k-mer range for assembly (2024-10-14 06:41:30)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2024-10-14 06:41:30)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/23/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/23/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/23/working/fq2.fastq -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/23/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/23/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/23/working/fq2.fastq -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.1.100+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/23/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/23/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/23/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/23/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/23/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/23/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/23/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 20M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/23/working/spades_assembly/dataset.info") with K=27  0:00:00.000     1M / 20M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.000     1M / 20M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.001     1M / 20M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.001     1M / 20M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.001     1M / 20M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.001     1M / 20M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.007     1M / 20M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.008     1M / 20M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.066    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.069    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.082    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.083    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.090    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.119     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.130     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.130     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.130     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.130     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.132     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.132     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.132     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:00.820     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:00.823     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.002     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:01.002     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:01.034     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:01.034     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:01.035     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:01.035     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:01.035     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.708  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:01.708  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:01.708     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.900     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:01.900     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.940     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:01.940     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:02.089     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:02.099     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:02.117     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:02.120     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:02.122     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:02.124     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:02.127     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:02.127     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:02.127     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:02.127     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:02.127     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:02.129     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:02.129     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:02.129     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:02.129     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:02.129     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:02.129     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:02.131     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:02.131     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.156     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:02.157     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:02.222     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:02.223     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:02.268     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:02.268     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:02.268     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:02.268     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:02.268     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:02.366     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:02.660     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:03.176     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:03.643     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:04.432     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:04.432     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.433     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:04.433     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:04.433     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:04.433     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:04.433     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:04.434     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:04.434     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:04.434     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Gap Closer (id: ea..all possible          (2024-10-14 06:43:27)Normalise read depths       (2024-10-14 06:43:27)Remove zero length segments (2024-10-14 06:43:27)Sort link order             (2024-10-14 06:43:27)Graph cleaning finished     (2024-10-14 06:43:27)Saving /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/k063_assembly_graph.gfaCleaning k77 graphRepair multi way junctions  (2024-10-14 06:43:27)Filter by read depth        (2024-10-14 06:43:27)Filter homopolymer loops    (2024-10-14 06:43:27)Merge all possible          (2024-10-14 06:43:27)Normalise read depths       (2024-10-14 06:43:27)Remove zero length segments (2024-10-14 06:43:27)Sort link order             (2024-10-14 06:43:27)Graph cleaning finished     (2024-10-14 06:43:27)Saving /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2024-10-14 06:43:27)Filter by read depth        (2024-10-14 06:43:27)Filter homopolymer loops    (2024-10-14 06:43:27)Merge all possible          (2024-10-14 06:43:27)Normalise read depths       (2024-10-14 06:43:27)Remove zero length segments (2024-10-14 06:43:27)Sort link order             (2024-10-14 06:43:27)Graph cleaning finished     (2024-10-14 06:43:27)Saving /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2024-10-14 06:43:27)Filter by read depth        (2024-10-14 06:43:27)Filter homopolymer loops    (2024-10-14 06:43:27)Merge all possible          (2024-10-14 06:43:27)Normalise read depths       (2024-10-14 06:43:27)Remove zero length segments (2024-10-14 06:43:27)Sort link order             (2024-10-14 06:43:27)Graph cleaning finished     (2024-10-14 06:43:27)Saving /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2024-10-14 06:43:27)Filter by read depth        (2024-10-14 06:43:27)Filter homopolymer loops    (2024-10-14 06:43:27)Merge all possible          (2024-10-14 06:43:27)Normalise read depths       (2024-10-14 06:43:27)Remove zero length segments (2024-10-14 06:43:27)Sort link order             (2024-10-14 06:43:27)Graph cleaning finished     (2024-10-14 06:43:27)Saving /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2024-10-14 06:43:27)Filter by read depth        (2024-10-14 06:43:27)Filter homopolymer loops    (2024-10-14 06:43:27)Merge all possible          (2024-10-14 06:43:27)Normalise read depths       (2024-10-14 06:43:27)Remove zero length segments (2024-10-14 06:43:27)Sort link order             (2024-10-14 06:43:27)Graph cleaning finished     (2024-10-14 06:43:27)Saving /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2024-10-14 06:43:27)Filter by read depth        (2024-10-14 06:43:27)Filter homopolymer loops    (2024-10-14 06:43:27)Merge all possible          (2024-10-14 06:43:27)Normalise read depths       (2024-10-14 06:43:27)Remove zero length segments (2024-10-14 06:43:27)Sort link order             (2024-10-14 06:43:27)Graph cleaning finished     (2024-10-14 06:43:27)Saving /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2024-10-14 06:43:27)Filter by read depth        (2024-10-14 06:43:27)Filter homopolymer loops    (2024-10-14 06:43:27)Merge all possible          (2024-10-14 06:43:27)Normalise read depths       (2024-10-14 06:43:27)Remove zero length segments (2024-10-14 06:43:27)Sort link order             (2024-10-14 06:43:27)Graph cleaning finished     (2024-10-14 06:43:27)Saving /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2024-10-14 06:43:27)Filter by read depth        (2024-10-14 06:43:27)Filter homopolymer loops    (2024-10-14 06:43:27)Merge all possible          (2024-10-14 06:43:27)Normalise read depths       (2024-10-14 06:43:27)Remove zero length segments (2024-10-14 06:43:27)Sort link order             (2024-10-14 06:43:27)Graph cleaning finished     (2024-10-14 06:43:27)Saving /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2024-10-14 06:43:27)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/23/working/spades_assembly/Determining graph multiplicity (2024-10-14 06:43:27)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Saving /galaxy/server/database/jobs_directory/000/23/working/002_depth_filter.gfaCleaning graph (2024-10-14 06:43:27)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removedSaving /galaxy/server/database/jobs_directory/000/23/working/003_overlaps_removed.gfa    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2024-10-14 06:43:27)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2024-10-14 06:43:27)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundLoading reads (2024-10-14 06:43:27)0 / 1 (0.0%)1 / 1 (100.0%) - 5,386 bp1 / 1 (100.0%) - 5,386 bpAssembling contigs and long reads with miniasm (2024-10-14 06:43:27)    Unicycler uses miniasm to construct a string graph assembly using both theshort read contigs and the long reads. It will then use the resulting stringgraph to produce bridges between contigs. This method requires decent coverageof long reads and therefore may not be fruitful if long reads are sparse.However, it does not rely on the short read assembly graph having goodconnectivity and is able to bridge an assembly graph even when it contains manydead ends.    Unicycler uses two types of "reads" as assembly input: anchor contigs fromthe short-read assembly and actual long reads which overlap two or more ofthese contigs. It then assembles them with miniasm.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/23/working/miniasm_assembly/all_segments.fasta1538635158+15386227538251555155255cm:i:11491538651635383+153861221220220255cm:i:47Number of minimap alignments: 1Saving to /galaxy/server/database/jobs_directory/000/23/working/miniasm_assembly/01_assembly_reads.fastq:  0 short-read contigs  1 long readsFinding overlaps with minimap... failedAssembling reads with miniasm... empty resultCreating simple long read bridges (2024-10-14 06:43:27)    Unicycler uses long read alignments (from minimap) to resolve simple repeatstructures in the graph. This takes care of some "low-hanging fruit" of thegraph simplification.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/23/working/simple_bridging/all_segments.fasta1538635158+15386227538251555155255cm:i:11491538651635383+153861221220220255cm:i:47Number of minimap alignments: 1    Two-way junctions are defined as cases where two graph contigs (A and B)join together (C) and then split apart again (D and E). This usually representsa simple 2-copy repeat, and there are two possible options for its resolution:(A->C->D and B->C->E) or (A->C->E and B->C->D). Each read which spans such ajunction gets to "vote" for option 1, option 2 or neither. Unicycler creates abridge at each junction for the most voted for option.No suitable two-way junctions present    Simple loops are parts of the graph where two contigs (A and B) areconnected via a repeat (C) which loops back to itself (via D). It is possibleto traverse the loop zero times (A->C->B), one time (A->C->D->C->B), two times(A->C->D->C->D->C->B), etc. Long reads which span the loop inform which is thecorrect number of times through. In this step, such reads are found and each isaligned against alternative loop counts. A reads casts its "vote" for the loopcount it agrees best with, and Unicycler creates a bridge using the most votedfor count.No suitable simple loops presentDetermining low score threshold (2024-10-14 06:43:27)    Before conducting semi-global alignment of the long reads to the assemblygraph, Unicycler must determine a minimum alignment score threshold such thatnonsense alignments are excluded. To choose a threshold automatically, itexamines alignments between random sequences and selects a score a few standarddeviations above the mean.Automatically choosing a threshold using random alignment scores.Random alignment mean score: 61.66         standard deviation:  1.31        Low score threshold: 61.66 + (7 x 1.31) = 70.86Aligning reads with minimap (2024-10-14 06:43:27)1538655161+15386229538551565156255cm:i:9591538651685384+153866222216216255cm:i:39Done! 1 out of 1 reads alignedAligning reads (2024-10-14 06:43:27)1/1: 1 (5386 bp)minimap alignments:    5,5161,+,1,229,5385    5168,5384,+,1,6,222Reference ranges:    1+: 0 - 5386Range: 1: 0 - 5386    common 10-mers: 5464    line 1: 215 points, score=213.009259 (good)    line 2: 5153 points, score=5151.000388 (good)All Seqan alignments (time to align = 0.054 s):  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1          0      224        5162      5386       +        672        100.00   100.00%         1        224     5386           0      5162       +      15486        100.00   100.00%Final alignments:  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1        224     5386           0      5162       +      15486        100.00   100.00%         1          0      224        5162      5386       +        672        100.00   100.00%Read alignment summary (2024-10-14 06:43:27)Total read count:            1Fully aligned reads:         1Partially aligned reads:     0Unaligned reads:             0Total bases aligned:     5,386 bpMean alignment identity:   100.0%Setting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00Building long read bridges (2024-10-14 06:43:27)    Unicycler uses the long read alignments to produce bridges between anchorsegments. These bridges can be formed using as few as one long read, givingUnicycler the ability to bridge the graph even when long-read depth is low.Median depth of 10 longest contigs: 1.00                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path                Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  QualityApplying bridges (2024-10-14 06:43:27)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultSaving /galaxy/server/database/jobs_directory/000/23/working/004_bridges_applied.gfaCleaning up leftover segments (2024-10-14 06:43:27)Segments eligible for deletion:Bridged assembly graph (2024-10-14 06:43:27)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Saving /galaxy/server/database/jobs_directory/000/23/working/005_final_clean.gfaComponent   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2024-10-14 06:43:27)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2024-10-14 06:43:36)Saving /galaxy/server/database/jobs_directory/000/23/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/23/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="unicycler (Test #8)" name="7" time="162.361900806427">
        
            
            <system-out><![CDATA[
            Starting Unicycler (2024-10-14 06:44:16)    Welcome to Unicycler, an assembly pipeline for bacterial genomes. Since youprovided both short and long reads, Unicycler will perform a hybrid assembly.It will first use SPAdes to make a short-read assembly graph, and then it willuse various methods to scaffold that graph with the long reads.    For more information, please see https://github.com/rrwick/UnicyclerCommand: /usr/local/bin/unicycler -t 8 -o ./ --verbosity 3 -1 fq1.fastq -2 fq2.fastq -l lr.fasta --mode normal --min_fasta_length 100 --linear_seqs 0 --min_kmer_frac 0.2 --max_kmer_frac 0.95 --kmer_count 10 --depth_filter 0.25 --start_gene_id 90.0 --start_gene_cov 95.0 --min_component_size 1000 --min_dead_end_size 1000 --scores 3,-6,-5,-2 --no_simple_bridges --keep 0Unicycler version: v0.5.1Using 8 threadsThe output directory already exists and files may be reused or overwritten:  /galaxy/server/database/jobs_directory/000/27/workingBridging mode: normal  using default normal bridge quality cutoff: 10.00Dependencies:  Program       Version   Status   Path                        spades.py     4.0.0     good     /usr/local/bin/spades.py    racon         1.5.0     good     /usr/local/bin/racon        makeblastdb   2.16.0+   good     /usr/local/bin/makeblastdb  tblastn       2.16.0+   good     /usr/local/bin/tblastn    Choosing k-mer range for assembly (2024-10-14 06:44:17)    Unicycler chooses a k-mer range for SPAdes based on the length of the inputreads. It uses a wide range of many k-mer sizes to maximise the chance offinding an ideal assembly.SPAdes maximum k-mer: 127Median read length: 251K-mer range: 27, 47, 63, 77, 89, 99, 107, 115, 121, 127SPAdes assemblies (2024-10-14 06:44:17)    Unicycler now uses SPAdes to assemble the short reads. It scores theassembly graph for each k-mer using the number of contigs (fewer is better) andthe number of dead ends (fewer is better). The score function is 1/(c*(d+2)),where c is the contig count and d is the dead end count.spades.py -o /galaxy/server/database/jobs_directory/000/27/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/27/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/27/working/fq2.fastq -m 1024== Warning ==  output dir is not empty! Please, clean output directory before run.Command: /usr/local/bin/spades.py -o /galaxy/server/database/jobs_directory/000/27/working/spades_assembly -k 27 --threads 8 --gfa11 --isolate -1 /galaxy/server/database/jobs_directory/000/27/working/fq1.fastq -2 /galaxy/server/database/jobs_directory/000/27/working/fq2.fastq -m 1024System information:  SPAdes version: 4.0.0  Python version: 3.12.4  OS: Linux-6.1.100+-x86_64-with-glibc2.36Output dir: /galaxy/server/database/jobs_directory/000/27/working/spades_assemblyMode: ONLY assembling (without read error correction)Debug mode is turned OFFDataset parameters:  Isolate mode  Reads:    Library number: 1, library type: paired-end      orientation: fr      left reads: ['/galaxy/server/database/jobs_directory/000/27/working/fq1.fastq']      right reads: ['/galaxy/server/database/jobs_directory/000/27/working/fq2.fastq']      interlaced reads: not specified      single reads: not specified      merged reads: not specifiedAssembly parameters:  k: [27]  Repeat resolution is enabled  Mismatch careful mode is turned OFF  MismatchCorrector will be SKIPPED  Coverage cutoff is turned OFF  Assembly graph output will use GFA v1.1 formatOther parameters:  Dir for temp files: /galaxy/server/database/jobs_directory/000/27/working/spades_assembly/tmp  Threads: 8  Memory limit (in Gb): 1024======= SPAdes pipeline started. Log can be found here: /galaxy/server/database/jobs_directory/000/27/working/spades_assembly/spades.log/galaxy/server/database/jobs_directory/000/27/working/fq1.fastq: max reads length: 251/galaxy/server/database/jobs_directory/000/27/working/fq2.fastq: max reads length: 251Reads length: 251===== Before start started.===== Assembling started.===== K27 started.== Running: /usr/local/bin/spades-core /galaxy/server/database/jobs_directory/000/27/working/spades_assembly/K27/configs/config.info /galaxy/server/database/jobs_directory/000/27/working/spades_assembly/K27/configs/isolate_mode.info  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/27/working/spades_assembly/K27/configs/config.info"  0:00:00.000     1M / 21M   INFO    General                 (main.cpp                  :  94)   Loaded config from "/galaxy/server/database/jobs_directory/000/27/working/spades_assembly/K27/configs/isolate_mode.info"  0:00:00.000     1M / 21M   INFO    General                 (memory_limit.cpp          :  55)   Memory limit set to 1024 Gb  0:00:00.001     1M / 21M   INFO    General                 (main.cpp                  : 102)   Starting SPAdes, built from N/A, git revision N/A  0:00:00.001     1M / 21M   INFO    General                 (main.cpp                  : 103)   Maximum k-mer length: 128  0:00:00.001     1M / 21M   INFO    General                 (main.cpp                  : 104)   Assembling dataset ("/galaxy/server/database/jobs_directory/000/27/working/spades_assembly/dataset.info") with K=27  0:00:00.001     1M / 21M   INFO    General                 (main.cpp                  : 105)   Maximum # of threads to use (adjusted due to OMP capabilities): 8  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 212)   SPAdes started  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 225)   Starting from stage: read_conversion  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 234)   Two-step repeat resolution disabled  0:00:00.001     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 689)   Graph created, vertex min_id: 3, edge min_id: 3  0:00:00.001     1M / 21M   INFO   GraphCore                (graph_core.hpp            : 690)   Vertex size: 48, edge size: 40  0:00:00.001     1M / 21M   INFO    General                 (edge_index.hpp            : 132)   Size of edge index entries: 12/8  0:00:00.001     1M / 21M   INFO    General                 (pipeline.cpp              : 245)   Will need read mapping, kmer mapper will be attached  0:00:00.001     1M / 21M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == Binary Read Conversion (id: read_conversion)  0:00:00.007     1M / 21M   INFO    General                 (read_converter.cpp        :  78)   Converting reads to binary format for library #0 (takes a while)  0:00:00.007     1M / 21M   INFO    General                 (read_converter.cpp        :  99)   Converting paired reads  0:00:00.070    81M / 81M   INFO    General                 (binary_converter.cpp      : 143)   7925 reads written  0:00:00.072    50M / 50M   INFO    General                 (read_converter.cpp        : 113)   Converting single reads  0:00:00.084    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.085    50M / 50M   INFO    General                 (read_converter.cpp        : 119)   Converting merged reads  0:00:00.091    63M / 63M   INFO    General                 (binary_converter.cpp      : 143)   0 reads written  0:00:00.120     1M / 42M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == de Bruijn graph construction (id: construction)  0:00:00.133     1M / 42M   INFO    General                 (construction.cpp          : 150)   Max read length 251  0:00:00.133     1M / 42M   INFO    General                 (construction.cpp          : 156)   Average read length 250.525  0:00:00.133     1M / 42M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == k+1-mer counting (id: construction:kpomer_counting)  0:00:00.133     1M / 42M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:00.134     1M / 42M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:00.134     1M / 42M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:00.134     1M / 42M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:00.824     1M / 55M   INFO    General                 (kmer_splitters.hpp        : 134)   Used 31700 reads  0:00:00.827     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.014     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 35249 kmers in total.  0:00:01.015     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Extension index construction (id: construction:extension_index_construction)  0:00:01.052     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 453)   Building kmer index  0:00:01.053     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 258)   Splitting kmer instances into 80 files using 8 threads. This might take a while.  0:00:01.054     1M / 55M   INFO    General                 (file_limit.hpp            :  43)   Open file limit set to 1048576  0:00:01.054     1M / 55M   INFO    General                 (kmer_splitter.hpp         :  94)   Memory available for splitting buffers: 42.6666 Gb  0:00:01.054     1M / 55M   INFO    General                 (kmer_splitter.hpp         : 102)   Using cell size of 838860  0:00:01.650  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 197)   Processed 35249 kmers  0:00:01.651  4641M / 4641M INFO    General                 (kmer_splitters.hpp        : 202)   Used 35249 kmers.  0:00:01.652     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 264)   Starting k-mer counting.  0:00:01.840     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 275)   K-mer counting done. There are 34510 kmers in total.  0:00:01.840     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:01.884     1M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 34510 kmers, 86928 bytes occupied (20.1514 bits per kmer).  0:00:01.884     1M / 55M   INFO    General                 (kmer_index_builder.hpp    : 168)   Merging final buckets.  0:00:02.024     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 101)   Building k-mer extensions from k+1-mers  0:00:02.035     1M / 55M   INFO   DeBruijnExtensionIndexBu (kmer_extension_index_build: 106)   Building k-mer extensions from k+1-mers finished.  0:00:02.052     1M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Condensing graph (id: construction:graph_condensing)  0:00:02.054     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 381)   Extracting unbranching paths  0:00:02.057     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 400)   Extracting unbranching paths finished. 2775 sequences extracted  0:00:02.059     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 336)   Collecting perfect loops  0:00:02.062     1M / 55M   INFO   UnbranchingPathExtractor (debruijn_graph_constructor: 369)   Collecting perfect loops finished. 0 loops collected  0:00:02.063     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 586)   Sorting edges...  0:00:02.063     1M / 55M   INFO   DeBruijnGraphConstructor (debruijn_graph_constructor: 588)   Edges sorted  0:00:02.063     1M / 55M   INFO    General                 (debruijn_graph_constructor: 516)   Total 5550 edges to create  0:00:02.063     2M / 55M   INFO    General                 (debruijn_graph_constructor: 519)   Collecting link records  0:00:02.065     2M / 55M   INFO    General                 (debruijn_graph_constructor: 521)   Ordering link records  0:00:02.065     2M / 55M   INFO    General                 (debruijn_graph_constructor: 524)   Sorting done  0:00:02.065     2M / 55M   INFO    General                 (debruijn_graph_constructor: 537)   Sorting LinkRecords...  0:00:02.065     2M / 55M   INFO    General                 (debruijn_graph_constructor: 540)   LinkRecords sorted  0:00:02.065     2M / 55M   INFO    General                 (debruijn_graph_constructor: 542)   Total 2036 vertices to create  0:00:02.065     2M / 55M   INFO    General                 (debruijn_graph_constructor: 545)   Connecting the graph  0:00:02.067     2M / 55M   INFO    General                 (stage.cpp                 : 121)   PROCEDURE == Filling coverage indices (PHM) (id: construction:coverage_filling_phm)  0:00:02.067     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 410)   Building perfect hash indices  0:00:02.099     2M / 55M   INFO   K-mer Index Building     (kmer_index_builder.hpp    : 446)   Index built. Total 35249 kmers, 87400 bytes occupied (19.836 bits per kmer).  0:00:02.100     2M / 55M   INFO    General                 (coverage_hash_map_builder.:  49)   Collecting k-mer coverage information from reads, this takes a while.  0:00:02.163     2M / 55M   INFO    General                 (construction.cpp          : 427)   Filling coverage and flanking coverage from PHM  0:00:02.164     2M / 55M   INFO    General                 (coverage_filling.hpp      :  83)   Processed 5550 edges  0:00:02.202     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE == EC Threshold Finding (id: ec_threshold_finder)  0:00:02.203     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 182)   Kmer coverage valley at: 7  0:00:02.203     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 202)   K-mer histogram maximum: 695  0:00:02.203     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 238)   Estimated median coverage: 695. Coverage mad: 91.9212  0:00:02.203     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 260)   Fitting coverage model  0:00:02.299     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 2  0:00:02.590     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 4  0:00:03.107     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 8  0:00:03.577     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 16  0:00:04.375     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 296)   ... iteration 32  0:00:04.376     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 310)   Fitted mean coverage: 671.577. Fitted coverage std. dev: 114.418  0:00:04.377     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 335)   Probability of erroneous kmer at valley: 1  0:00:04.377     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 359)   Preliminary threshold calculated as: 275  0:00:04.377     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 363)   Threshold adjusted to: 275  0:00:04.377     1M / 55M   INFO    General                 (kmer_coverage_model.cpp   : 376)   Estimated genome size (ignoring repeats): 5132  0:00:04.377     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  56)   Mean coverage was calculated as 671.577  0:00:04.377     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  71)   EC coverage threshold value was calculated as 275  0:00:04.377     1M / 55M   INFO    General                 (genomic_info_filler.cpp   :  72)   Trusted kmer low bound: 0  0:00:04.377     1M / 55M   INFO   StageManager             (stage.cpp                 : 189)   STAGE =..-14 06:46:12)Remove zero length segments (2024-10-14 06:46:12)Sort link order             (2024-10-14 06:46:12)Graph cleaning finished     (2024-10-14 06:46:12)Saving /galaxy/server/database/jobs_directory/000/27/working/spades_assembly/k027_assembly_graph.gfaCleaning k47 graphRepair multi way junctions  (2024-10-14 06:46:12)Filter by read depth        (2024-10-14 06:46:12)Filter homopolymer loops    (2024-10-14 06:46:12)Merge all possible          (2024-10-14 06:46:12)Normalise read depths       (2024-10-14 06:46:12)Remove zero length segments (2024-10-14 06:46:12)Sort link order             (2024-10-14 06:46:12)Graph cleaning finished     (2024-10-14 06:46:12)Saving /galaxy/server/database/jobs_directory/000/27/working/spades_assembly/k047_assembly_graph.gfaCleaning k63 graphRepair multi way junctions  (2024-10-14 06:46:12)Filter by read depth        (2024-10-14 06:46:12)Filter homopolymer loops    (2024-10-14 06:46:12)Merge all possible          (2024-10-14 06:46:12)Normalise read depths       (2024-10-14 06:46:12)Remove zero length segments (2024-10-14 06:46:12)Sort link order             (2024-10-14 06:46:12)Graph cleaning finished     (2024-10-14 06:46:12)Saving /galaxy/server/database/jobs_directory/000/27/working/spades_assembly/k063_assembly_graph.gfaCleaning k77 graphRepair multi way junctions  (2024-10-14 06:46:12)Filter by read depth        (2024-10-14 06:46:12)Filter homopolymer loops    (2024-10-14 06:46:12)Merge all possible          (2024-10-14 06:46:12)Normalise read depths       (2024-10-14 06:46:12)Remove zero length segments (2024-10-14 06:46:12)Sort link order             (2024-10-14 06:46:12)Graph cleaning finished     (2024-10-14 06:46:12)Saving /galaxy/server/database/jobs_directory/000/27/working/spades_assembly/k077_assembly_graph.gfaCleaning k89 graphRepair multi way junctions  (2024-10-14 06:46:12)Filter by read depth        (2024-10-14 06:46:12)Filter homopolymer loops    (2024-10-14 06:46:12)Merge all possible          (2024-10-14 06:46:12)Normalise read depths       (2024-10-14 06:46:12)Remove zero length segments (2024-10-14 06:46:12)Sort link order             (2024-10-14 06:46:12)Graph cleaning finished     (2024-10-14 06:46:12)Saving /galaxy/server/database/jobs_directory/000/27/working/spades_assembly/k089_assembly_graph.gfaCleaning k99 graphRepair multi way junctions  (2024-10-14 06:46:12)Filter by read depth        (2024-10-14 06:46:12)Filter homopolymer loops    (2024-10-14 06:46:12)Merge all possible          (2024-10-14 06:46:12)Normalise read depths       (2024-10-14 06:46:12)Remove zero length segments (2024-10-14 06:46:12)Sort link order             (2024-10-14 06:46:12)Graph cleaning finished     (2024-10-14 06:46:12)Saving /galaxy/server/database/jobs_directory/000/27/working/spades_assembly/k099_assembly_graph.gfaCleaning k107 graphRepair multi way junctions  (2024-10-14 06:46:12)Filter by read depth        (2024-10-14 06:46:12)Filter homopolymer loops    (2024-10-14 06:46:12)Merge all possible          (2024-10-14 06:46:12)Normalise read depths       (2024-10-14 06:46:12)Remove zero length segments (2024-10-14 06:46:12)Sort link order             (2024-10-14 06:46:12)Graph cleaning finished     (2024-10-14 06:46:12)Saving /galaxy/server/database/jobs_directory/000/27/working/spades_assembly/k107_assembly_graph.gfaCleaning k115 graphRepair multi way junctions  (2024-10-14 06:46:12)Filter by read depth        (2024-10-14 06:46:12)Filter homopolymer loops    (2024-10-14 06:46:12)Merge all possible          (2024-10-14 06:46:12)Normalise read depths       (2024-10-14 06:46:12)Remove zero length segments (2024-10-14 06:46:12)Sort link order             (2024-10-14 06:46:12)Graph cleaning finished     (2024-10-14 06:46:12)Saving /galaxy/server/database/jobs_directory/000/27/working/spades_assembly/k115_assembly_graph.gfaCleaning k121 graphRepair multi way junctions  (2024-10-14 06:46:12)Filter by read depth        (2024-10-14 06:46:12)Filter homopolymer loops    (2024-10-14 06:46:12)Merge all possible          (2024-10-14 06:46:12)Normalise read depths       (2024-10-14 06:46:12)Remove zero length segments (2024-10-14 06:46:12)Sort link order             (2024-10-14 06:46:12)Graph cleaning finished     (2024-10-14 06:46:12)Saving /galaxy/server/database/jobs_directory/000/27/working/spades_assembly/k121_assembly_graph.gfaCleaning k127 graphRepair multi way junctions  (2024-10-14 06:46:12)Filter by read depth        (2024-10-14 06:46:12)Filter homopolymer loops    (2024-10-14 06:46:12)Merge all possible          (2024-10-14 06:46:12)Normalise read depths       (2024-10-14 06:46:12)Remove zero length segments (2024-10-14 06:46:12)Sort link order             (2024-10-14 06:46:12)Graph cleaning finished     (2024-10-14 06:46:12)Saving /galaxy/server/database/jobs_directory/000/27/working/spades_assembly/k127_assembly_graph.gfaRepair multi way junctions  (2024-10-14 06:46:12)Filter by read depth        (2024-10-14 06:46:12)Filter homopolymer loops    (2024-10-14 06:46:12)Merge all possible          (2024-10-14 06:46:12)Normalise read depths       (2024-10-14 06:46:12)Remove zero length segments (2024-10-14 06:46:12)Sort link order             (2024-10-14 06:46:12)Graph cleaning finished     (2024-10-14 06:46:12)Saving /galaxy/server/database/jobs_directory/000/27/working/spades_assembly/k27_assembly_graph.gfaSPAdes assembly graph summary (2024-10-14 06:46:12)K-mer   Contigs   Links   Total length   N50     Longest contig   Dead ends   Score      27         1       1          5,413   5,413            5,413           0   5.00e-01 <-best   47         1       1          5,433   5,433            5,433           0   5.00e-01   63         1       1          5,449   5,449            5,449           0   5.00e-01   77         1       1          5,463   5,463            5,463           0   5.00e-01   89         1       1          5,475   5,475            5,475           0   5.00e-01   99         1       1          5,485   5,485            5,485           0   5.00e-01  107         1       1          5,493   5,493            5,493           0   5.00e-01  115         1       1          5,501   5,501            5,501           0   5.00e-01  121         1       1          5,507   5,507            5,507           0   5.00e-01  127         1       1          5,513   5,513            5,513           0   5.00e-01Read depth filter: removed 0 contigs totalling 0 bpDeleting /galaxy/server/database/jobs_directory/000/27/working/001_spades_graph_k027.gfaDeleting /galaxy/server/database/jobs_directory/000/27/working/001_spades_graph_k047.gfaDeleting /galaxy/server/database/jobs_directory/000/27/working/001_spades_graph_k063.gfaDeleting /galaxy/server/database/jobs_directory/000/27/working/001_spades_graph_k077.gfaDeleting /galaxy/server/database/jobs_directory/000/27/working/001_spades_graph_k089.gfaDeleting /galaxy/server/database/jobs_directory/000/27/working/001_spades_graph_k099.gfaDeleting /galaxy/server/database/jobs_directory/000/27/working/001_spades_graph_k107.gfaDeleting /galaxy/server/database/jobs_directory/000/27/working/001_spades_graph_k115.gfaDeleting /galaxy/server/database/jobs_directory/000/27/working/001_spades_graph_k121.gfaDeleting /galaxy/server/database/jobs_directory/000/27/working/001_spades_graph_k127.gfaDeleting /galaxy/server/database/jobs_directory/000/27/working/spades_assembly/Determining graph multiplicity (2024-10-14 06:46:13)    Multiplicity is the number of times a sequence occurs in the underlyingsequence. Single-copy contigs (those with a multiplicity of one, occurring onlyonce in the underlying sequence) are particularly useful.    Multiplicity determination begins by identifying contigs which are clearlysingle-copy because they are of low depth and do not have more than one linkper side.Median depth of 10 longest contigs: 1.00Initial single copy segments:    1    Unicycler now uses a greedy algorithm to propagate multiplicity through thegraph. For example, if two single-copy contigs merge together, the resultingcontig will get a multiplicity of two. When no more propagation is possible,additional single-copy contigs are added and the process is repeated. Thisallows for multiplicity to be correctly assigned to the chromosome (at themedian depth) but also for plasmids (which may be higher or lower in depth).          MERGING MULTIPLICITY                SPLITTING MULTIPLICITY               FINDING NEW SINGLE-COPY                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        REMOVING PROPAGATION TOLERANCE                  MERGING MULTIPLICITY                SPLITTING MULTIPLICITY        Cleaning graph (2024-10-14 06:46:13)    Unicycler now performs various cleaning procedures on the graph to removeoverlaps and simplify the graph structure. The end result is a graph ready forbridging.Grouping graph edges based on overlap removal0 / 2 (0.0%)1 / 2 (50.0%)2 / 2 (100.0%)Removing graph overlaps             Bases     Bases           trimmed   trimmed Segment      from      from  number     start       end       1        13        14Graph overlaps removed    Unicycler now selects a set of anchor contigs from the single-copy contigs.These are the contigs which will be connected via bridges to form the finalassembly.1 anchor segments (5,386 bp) out of 1 total segments (5,386 bp)Anchor segments:    1Creating SPAdes contig bridges (2024-10-14 06:46:13)    SPAdes uses paired-end information to perform repeat resolution (RR) andproduce contigs from the assembly graph. SPAdes saves the graph pathscorresponding to these contigs in the contigs.paths file. When one of thesepaths contains two or more anchor contigs, Unicycler can create a bridge fromthe path.No SPAdes contig bridgesCreating loop unrolling bridges (2024-10-14 06:46:13)    When a SPAdes contig path connects an anchor contig with the middle contigof a simple loop, Unicycler concludes that the sequences are contiguous (i.e.the loop is not a separate piece of DNA). It then uses the read depth of themiddle and repeat contigs to guess the number of times to traverse the loop andmakes a bridge.No loop unrolling bridges madenone foundLoading reads (2024-10-14 06:46:13)0 / 1 (0.0%)1 / 1 (100.0%) - 5,386 bp1 / 1 (100.0%) - 5,386 bpAssembling contigs and long reads with miniasm (2024-10-14 06:46:13)    Unicycler uses miniasm to construct a string graph assembly using both theshort read contigs and the long reads. It will then use the resulting stringgraph to produce bridges between contigs. This method requires decent coverageof long reads and therefore may not be fruitful if long reads are sparse.However, it does not rely on the short read assembly graph having goodconnectivity and is able to bridge an assembly graph even when it contains manydead ends.    Unicycler uses two types of "reads" as assembly input: anchor contigs fromthe short-read assembly and actual long reads which overlap two or more ofthese contigs. It then assembles them with miniasm.Aligning long reads to graph using minimapSaving /galaxy/server/database/jobs_directory/000/27/working/miniasm_assembly/all_segments.fasta1538635158+15386227538251555155255cm:i:11491538651635383+153861221220220255cm:i:47Number of minimap alignments: 1Saving to /galaxy/server/database/jobs_directory/000/27/working/miniasm_assembly/01_assembly_reads.fastq:  0 short-read contigs  1 long readsFinding overlaps with minimap... failedAssembling reads with miniasm... empty resultDetermining low score threshold (2024-10-14 06:46:13)    Before conducting semi-global alignment of the long reads to the assemblygraph, Unicycler must determine a minimum alignment score threshold such thatnonsense alignments are excluded. To choose a threshold automatically, itexamines alignments between random sequences and selects a score a few standarddeviations above the mean.Automatically choosing a threshold using random alignment scores.Random alignment mean score: 61.66         standard deviation:  1.31        Low score threshold: 61.66 + (7 x 1.31) = 70.86Aligning reads with minimap (2024-10-14 06:46:13)1538655161+15386229538551565156255cm:i:9591538651685384+153866222216216255cm:i:39Done! 1 out of 1 reads alignedAligning reads (2024-10-14 06:46:13)1/1: 1 (5386 bp)minimap alignments:    5,5161,+,1,229,5385    5168,5384,+,1,6,222Reference ranges:    1+: 0 - 5386Range: 1: 0 - 5386    common 10-mers: 5464    line 1: 215 points, score=213.009259 (good)    line 2: 5153 points, score=5151.000388 (good)All Seqan alignments (time to align = 0.055 s):  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1          0      224        5162      5386       +        672        100.00   100.00%         1        224     5386           0      5162       +      15486        100.00   100.00%Final alignments:  Ref name  Ref start  Ref end  Read start  Read end  Strand  Raw score  Scaled score  Identity         1        224     5386           0      5162       +      15486        100.00   100.00%         1          0      224        5162      5386       +        672        100.00   100.00%Read alignment summary (2024-10-14 06:46:13)Total read count:            1Fully aligned reads:         1Partially aligned reads:     0Unaligned reads:             0Total bases aligned:     5,386 bpMean alignment identity:   100.0%Deleting /galaxy/server/database/jobs_directory/000/27/working/read_alignment/Setting the minimum scaled score to the 5.0th percentile of full read alignments: 0.00Building long read bridges (2024-10-14 06:46:13)    Unicycler uses the long read alignments to produce bridges between anchorsegments. These bridges can be formed using as few as one long read, givingUnicycler the ability to bridge the graph even when long-read depth is low.Median depth of 10 longest contigs: 1.00                          Consensus  Consensus  Target                 Search    Path                                             Best path  Best path  Best path     Best path                Start -> end  Reads  len (bp)   time (s)   len (bp)  Search type  time (s)  count  Best path                                 len (bp)   raw score  scaled score  length disc  QualityApplying bridges (2024-10-14 06:46:13)    Unicycler now applies to the graph in decreasing order of quality. Thisensures that when multiple, contradictory bridges exist, the most supportedoption is used.Bridge type   Start -> end   Path   Quality   ResultCleaning up leftover segments (2024-10-14 06:46:13)Segments eligible for deletion:Bridged assembly graph (2024-10-14 06:46:13)    The assembly is now mostly finished and no more structural changes will bemade. Ideally the assembly graph should now have one contig per replicon and noerroneous contigs (i.e. a complete assembly). If there are more contigs, thenthe assembly is not complete.Component   Segments   Links   Length   N50     Longest segment   Status          1          1       1    5,386   5,386             5,386   completeRotating completed replicons (2024-10-14 06:46:13)    Any completed circular contigs (i.e. single contigs which have one linkconnecting end to start) can have their start position changed without alteringthe sequence. For consistency, Unicycler now searches for a starting gene (dnaAor repA) in each such contig, and if one is found, the contig is rotated tostart with that gene on the forward strand.Segment 1:  makeblastdb -dbtype nucl -in replicon.fasta  tblastn -db replicon.fasta -query /usr/local/lib/python3.12/site-packages/unicycler/gene_data/start_genes.fasta -outfmt 6 qseqid sstart send pident qlen qseq qstart bitscore -num_threads 1Segment   Length   Depth   Starting gene   Position   Strand   Identity   Coverage      1    5,386   1.00x   none found                                             Assembly complete (2024-10-14 06:46:21)Saving /galaxy/server/database/jobs_directory/000/27/working/assembly.gfaSaving /galaxy/server/database/jobs_directory/000/27/working/assembly.fasta
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="vcfcheck (Test #1)" name="0" time="39.28851318359375">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            index file localref.fa.fai not found, generating...
            ]]></system-err>
        
    </testcase>
    
    <testcase classname="vcfdistance (Test #1)" name="0" time="32.113852739334106">
        
            
            <system-out><![CDATA[
            
            ]]></system-out>
            <system-err><![CDATA[
            
            ]]></system-err>
        
    </testcase>
    
</testsuite>