{
    "model_class": "Job",
    "id": "44e7b02beaad60f2",
    "state": "error",
    "exit_code": null,
    "update_time": "2023-11-24T07:19:17.116817",
    "create_time": "2023-11-24T07:18:40.031283",
    "galaxy_version": "23.1",
    "command_version": "",
    "copied_from_job_id": null,
    "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/alevin/alevin/1.5.1+galaxy0",
    "history_id": "8a479034ee2f92a6",
    "external_id": "gxy-xbgc5",
    "command_line": "mkdir ./index && mkdir ./output && salmon index -i ./index --kmerLen '31' --gencode --transcripts '/galaxy/server/database/objects/1/9/b/dataset_19ba37a7-3c70-48e4-a9b2-5d327dad3a7e.dat' && cp '/galaxy/server/database/objects/7/e/1/dataset_7e1bf636-e2c9-4c8e-a77c-e71a9259d373.dat' ./mate1.fastq.gz && gunzip ./mate1.fastq.gz && cp '/galaxy/server/database/objects/2/9/0/dataset_290c8613-b05b-4f64-bcfa-7a5db74ac066.dat' ./mate2.fastq.gz && gunzip ./mate2.fastq.gz  && ln -s '/galaxy/server/database/objects/2/8/a/dataset_28a47c5b-c026-442d-bd59-1059db3ef9fc.dat' ./alevinmap.tsv && salmon alevin -l A -i ./index -1 ./mate1.fastq -2 ./mate2.fastq -o ./output -p \"${GALAXY_SLOTS:-4}\" --chromium --tgMap ./alevinmap.tsv --keepCBFraction '1.0'   --dumpFeatures  --dumpMtx --freqThreshold '5'  && gunzip output/alevin/quants_mat.mtx.gz  && gunzip output/alevin/quants_tier_mat.gz  && gunzip output/aux_info/fld.gz && gunzip output/aux_info/observed_bias.gz && gunzip output/aux_info/observed_bias_3p.gz",
    "traceback": "Traceback (most recent call last):\n  File \"/galaxy/server/lib/galaxy/jobs/runners/__init__.py\", line 649, in _finish_or_resubmit_job\n    job_wrapper.finish(\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1961, in finish\n    self._finish_dataset(output_name, dataset, job, context, final_job_state, remote_metadata_directory)\n  File \"/galaxy/server/lib/galaxy/jobs/__init__.py\", line 1778, in _finish_dataset\n    dataset.datatype.set_meta(dataset, overwrite=False)\n  File \"/galaxy/server/lib/galaxy/datatypes/tabular.py\", line 1689, in set_meta\n    for line in dataset_fh:\n  File \"/usr/local/lib/python3.10/codecs.py\", line 322, in decode\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0x80 in position 37: invalid start byte\n",
    "params": {
        "__input_ext": "\"input\"",
        "dbkey": "\"?\"",
        "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"",
        "optional": "{\"dumpBfh\": false, \"dumpFeatures\": true, \"dumpMtx\": true, \"dumpUmiGraph\": false, \"expectCells\": \"\", \"forceCells\": \"\", \"freqThreshold\": \"5\", \"keepCBFraction\": \"1.0\", \"lowRegionMinNumBarcodes\": \"\", \"maxNumBarcodes\": \"\", \"minScoreFraction\": \"\", \"mrna\": null, \"noDedup\": false, \"numCellBootstraps\": \"\", \"rrna\": null, \"whitelist\": null}",
        "allout": "false",
        "protocol": "\"--chromium\"",
        "pairstraight": "{\"__current_case__\": 0, \"file1\": {\"values\": [{\"id\": 310, \"src\": \"hda\"}]}, \"file2\": {\"values\": [{\"id\": 311, \"src\": \"hda\"}]}, \"libtype\": {\"__current_case__\": 0, \"strandedness\": \"A\"}, \"readselect\": \"paired\"}",
        "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 309, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}"
    },
    "inputs": {
        "tgmap": {
            "id": "fe26f19db634d69c",
            "src": "hda",
            "uuid": "28a47c5b-c026-442d-bd59-1059db3ef9fc"
        },
        "pairstraight|file2": {
            "id": "a5234e6dc069059e",
            "src": "hda",
            "uuid": "290c8613-b05b-4f64-bcfa-7a5db74ac066"
        },
        "pairstraight|file1": {
            "id": "e45d8592cf6791f7",
            "src": "hda",
            "uuid": "7e1bf636-e2c9-4c8e-a77c-e71a9259d373"
        },
        "refTranscriptSource|s_index|fasta": {
            "id": "0a0d72ed604e6c90",
            "src": "hda",
            "uuid": "19ba37a7-3c70-48e4-a9b2-5d327dad3a7e"
        }
    },
    "outputs": {
        "whitelist_txt": {
            "id": "6c4bf238f7ec8b44",
            "src": "hda",
            "uuid": "2dc3835f-52cb-4959-85f9-912173f38ce9"
        },
        "raw_cb_frequency_txt": {
            "id": "722b329d047e701a",
            "src": "hda",
            "uuid": "55598e9b-7c60-4dbc-964a-6a6d5c750fea"
        },
        "quants_mat_mtx": {
            "id": "351ccc40da9a2e6e",
            "src": "hda",
            "uuid": "724ed01c-5060-43d8-a3c2-1dd152479201"
        },
        "flenDist_txt": {
            "id": "c410d534f884d312",
            "src": "hda",
            "uuid": "127eb357-b06c-4d1b-b563-95404151f726"
        },
        "quants_mat_cols_txt": {
            "id": "f381ced0d3aa2fd3",
            "src": "hda",
            "uuid": "9837de62-92e0-4a10-9c7d-6daa0c2be779"
        },
        "quants_tier_mat": {
            "id": "fbbe2b8f4dd12403",
            "src": "hda",
            "uuid": "e1f2ea79-7d6f-438c-a679-ffe78b2c44d0"
        },
        "expected_bias": {
            "id": "b2d0a2a638b674f1",
            "src": "hda",
            "uuid": "bf71be92-8aac-443f-8997-c1fa83401ee5"
        },
        "observed_bias_3p": {
            "id": "dbb7eab8f270667c",
            "src": "hda",
            "uuid": "fc5bc8c4-b390-49ed-af5c-1af8b850c345"
        },
        "observed_bias": {
            "id": "6551ea76647f3bdc",
            "src": "hda",
            "uuid": "464cc0f8-ef2d-436c-862d-d93a2d2ef626"
        },
        "quants_mat_rows_txt": {
            "id": "68ccc04d8d109f90",
            "src": "hda",
            "uuid": "a8b32499-0430-46b6-9ade-2cc097523219"
        },
        "featureDump_txt": {
            "id": "4c671fb37da01eb5",
            "src": "hda",
            "uuid": "4782d34d-82d2-4744-ab70-24f9cb27ebec"
        }
    },
    "output_collections": {},
    "tool_stdout": "",
    "tool_stderr": "",
    "job_stdout": null,
    "job_stderr": null,
    "stderr": "",
    "stdout": "",
    "job_messages": [],
    "dependencies": [],
    "user_email": "tests@fake.org",
    "job_metrics": []
}
