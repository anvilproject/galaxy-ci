{"version": "0.1", "suitename": "Ephemeris tool tests targeting http://34.73.156.225:8000/galaxy/", "results": {"total": 187, "errors": 40, "failures": 0, "skips": 0}, "tests": [{"id": "toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat/1.3.1+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat", "tool_version": "1.3.1+galaxy0", "test_index": 0, "time_seconds": 104.10499048233032, "inputs": {"function_select|input": {"src": "hda", "id": "88d3e96530748929"}, "function_select|outside_call": {"src": "hda", "id": "911114b9f0f237d8"}, "function_select|json": true, "function_select|phenojson": true}, "job": {"model_class": "Job", "id": "b195f32c216a2d86", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:25:40.644364", "create_time": "2023-05-24T06:24:17.467859", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat/1.3.1+galaxy0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-q8dp5", "command_line": "ln -s '/galaxy/server/database/objects/b/5/d/dataset_b5dfaa28-5676-41c9-ba0a-4697b9113351.dat' ./input.vcf && java -jar /pharmcat/pharmcat.jar -vcf input.vcf -o output -f pharmCAT_report_Galaxy -a /galaxy/server/database/objects/9/3/b/dataset_93bc4b87-ba5b-4e0e-a893-0d02dbbb8ed6.dat -j -pj", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "function_select": "{\"__current_case__\": 0, \"function\": \"all\", \"input\": {\"values\": [{\"id\": 50, \"src\": \"hda\"}]}, \"json\": true, \"outside_call\": {\"values\": [{\"id\": 51, \"src\": \"hda\"}]}, \"phenojson\": true}"}, "inputs": {"input": {"id": "88d3e96530748929", "src": "hda", "uuid": "b5dfaa28-5676-41c9-ba0a-4697b9113351"}, "outside_call": {"id": "911114b9f0f237d8", "src": "hda", "uuid": "93bc4b87-ba5b-4e0e-a893-0d02dbbb8ed6"}}, "outputs": {"all_out": {"id": "b195f32c216a2d86", "src": "hda", "uuid": "082226e6-428b-403e-a14a-d480ed8381c0"}, "all_pheno": {"id": "6982eb9d97c8fe6b", "src": "hda", "uuid": "bb80764a-ddf3-458d-9eb9-c65e55347d00"}, "all_out_json": {"id": "c6790b4031dfe568", "src": "hda", "uuid": "e076605b-76bc-4c3a-beef-2d6c8a740b17"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Picked up _JAVA_OPTIONS: -Xmx4G -Xms1G\n", "job_stdout": "", "job_stderr": "", "stderr": "Picked up _JAVA_OPTIONS: -Xmx4G -Xms1G\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:25:16", "plugin": "core", "name": "end_epoch", "raw_value": "1684909516.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:25:12", "plugin": "core", "name": "start_epoch", "raw_value": "1684909512.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat/1.3.1+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat", "tool_version": "1.3.1+galaxy0", "test_index": 1, "time_seconds": 75.7069365978241, "inputs": {"function_select|input": {"src": "hda", "id": "2b3405cfa9bbfeee"}, "function_select|function": "name"}, "job": {"model_class": "Job", "id": "c6790b4031dfe568", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:25:40.472822", "create_time": "2023-05-24T06:25:02.474476", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat/1.3.1+galaxy0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-zkkc5", "command_line": "ln -s '/galaxy/server/database/objects/0/a/e/dataset_0ae70894-2546-420a-9b21-7e5fdc2dd6d0.dat' ./input.vcf && java -cp /pharmcat/pharmcat.jar org.pharmgkb.pharmcat.haplotype.NamedAlleleMatcher -vcf input.vcf -json output.json -html output.html", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "function_select": "{\"__current_case__\": 1, \"function\": \"name\", \"input\": {\"values\": [{\"id\": 56, \"src\": \"hda\"}]}}"}, "inputs": {"input": {"id": "2b3405cfa9bbfeee", "src": "hda", "uuid": "0ae70894-2546-420a-9b21-7e5fdc2dd6d0"}}, "outputs": {"namer_json": {"id": "90a5063176b82722", "src": "hda", "uuid": "8e98f6ad-c478-4bf9-8a48-78daf81bbe6d"}, "namer_html": {"id": "32b9317df0cf90ab", "src": "hda", "uuid": "f391494a-2c09-484e-93b8-a8ee87551f07"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Picked up _JAVA_OPTIONS: -Xmx4G -Xms1G\n", "job_stdout": "", "job_stderr": "", "stderr": "Picked up _JAVA_OPTIONS: -Xmx4G -Xms1G\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:25:15", "plugin": "core", "name": "end_epoch", "raw_value": "1684909515.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:25:12", "plugin": "core", "name": "start_epoch", "raw_value": "1684909512.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat/1.3.1+galaxy0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat", "tool_version": "1.3.1+galaxy0", "test_index": 2, "time_seconds": 12.623380184173584, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat/1.3.1+galaxy0-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat", "tool_version": "1.3.1+galaxy0", "test_index": 3, "time_seconds": 2.1881625652313232, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat/1.3.1+galaxy0-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat", "tool_version": "1.3.1+galaxy0", "test_index": 4, "time_seconds": 39.12494158744812, "inputs": {"function_select|input": {"src": "hda", "id": "842ea43ce4261ee1"}, "function_select|function": "report"}, "job": {"model_class": "Job", "id": "f785c4696e888dea", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:26:22.788729", "create_time": "2023-05-24T06:26:08.958753", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/pharmcat/pharmcat/1.3.1+galaxy0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-ncq6m", "command_line": "ln -s '/galaxy/server/database/objects/1/5/c/dataset_15cebd44-0821-4887-bd21-4da681279bff.dat' ./input.json && java -cp /pharmcat/pharmcat.jar org.pharmgkb.pharmcat.reporter.Reporter -p input.json -j output.json -o output.html", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "function_select": "{\"__current_case__\": 3, \"function\": \"report\", \"input\": {\"values\": [{\"id\": 62, \"src\": \"hda\"}]}, \"title\": null}"}, "inputs": {"input": {"id": "842ea43ce4261ee1", "src": "hda", "uuid": "15cebd44-0821-4887-bd21-4da681279bff"}}, "outputs": {"report_html": {"id": "8a65911f0659816e", "src": "hda", "uuid": "9fd3ddda-73c6-43cf-b1dc-49f6162dfffb"}, "report_json": {"id": "74d51ce557ee33cc", "src": "hda", "uuid": "1ba29f4f-c8b3-48e3-a0c2-5e6c9f5be0e4"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Picked up _JAVA_OPTIONS: -Xmx4G -Xms1G\n", "job_stdout": "", "job_stderr": "", "stderr": "Picked up _JAVA_OPTIONS: -Xmx4G -Xms1G\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:26:12", "plugin": "core", "name": "end_epoch", "raw_value": "1684909572.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:26:10", "plugin": "core", "name": "start_epoch", "raw_value": "1684909570.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/bgruening/sailfish/sailfish/0.10.1.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/sailfish/sailfish", "tool_version": "0.10.1.1", "test_index": 0, "time_seconds": 78.18314623832703, "inputs": {"refTranscriptSource|ownFile": {"src": "hda", "id": "35339c09e7ec4da6"}, "refTranscriptSource|TranscriptSource": "history", "single_or_paired|input_mate1": {"src": "hda", "id": "5bc3324fb2871c2f"}, "single_or_paired|input_mate2": {"src": "hda", "id": "1ad7bb64eb51aafd"}, "single_or_paired|single_or_paired_opts": "paired", "biasCorrect": false}, "job": {"model_class": "Job", "id": "bcfe3d8e6698a669", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:06:01.605780", "create_time": "2023-05-24T07:05:15.647869", "galaxy_version": "23.0", "command_version": "version : 0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/sailfish/sailfish/0.10.1.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-n8862", "command_line": "sailfish index --transcripts /galaxy/server/database/objects/8/7/4/dataset_8746c960-dba4-4d98-a807-9580a6ab360f.dat --kmerSize 21 --out ./index_dir --threads \"${GALAXY_SLOTS:-4}\" && ln -s /galaxy/server/database/objects/9/f/2/dataset_9f22f06b-cac0-441a-9fec-c2c43d2fa3be.dat ./mate1.fastq && ln -s /galaxy/server/database/objects/c/8/2/dataset_c820fbc3-b20f-44e4-8d3a-018e219b8b78.dat ./mate2.fastq && sailfish quant --index ./index_dir --mates1 ./mate1.fastq --mates2 ./mate2.fastq --libType \"IU\" --output ./results   --threads \"${GALAXY_SLOTS:-4}\"  --gcSizeSamp 1 --gcSpeedSamp 1 --fldMean 200 --fldSD 80 --maxReadOcc 200      --maxFragLen 1000 --txpAggregationKey 'gene_id'    --numBiasSamples 1000000 --numFragSamples 10000 --numGibbsSamples 0 --numBootstraps 0", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "numBootstraps": "\"0\"", "numGibbsSamples": "\"0\"", "numFragSamples": "\"10000\"", "numBiasSamples": "\"1000000\"", "allowDovetail": "false", "enforceLibCompat": "false", "ignoreLibCompat": "false", "txpAggregationKey": "\"gene_id\"", "maxFragLen": "\"1000\"", "unsmoothedFLD": "false", "discardOrphans": "false", "useVBOpt": "false", "noEffectiveLengthCorrection": "false", "maxReadOcc": "\"200\"", "fldSD": "\"80\"", "fldMean": "\"200\"", "strictIntersect": "false", "gcSpeedSamp": "\"1\"", "gcSizeSamp": "\"1\"", "dumpEq": "false", "gcBiasCorrect": "false", "biasCorrect": "false", "geneMap": null, "single_or_paired": "{\"__current_case__\": 1, \"input_mate1\": {\"values\": [{\"id\": 492, \"src\": \"hda\"}]}, \"input_mate2\": {\"values\": [{\"id\": 493, \"src\": \"hda\"}]}, \"orientation\": \"I\", \"single_or_paired_opts\": \"paired\", \"strandedness\": \"U\"}", "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"kmerSize\": \"21\", \"ownFile\": {\"values\": [{\"id\": 495, \"src\": \"hda\"}]}}"}, "inputs": {"ownFile": {"id": "35339c09e7ec4da6", "src": "hda", "uuid": "8746c960-dba4-4d98-a807-9580a6ab360f"}, "input_mate1": {"id": "5bc3324fb2871c2f", "src": "hda", "uuid": "9f22f06b-cac0-441a-9fec-c2c43d2fa3be"}, "input_mate2": {"id": "1ad7bb64eb51aafd", "src": "hda", "uuid": "c820fbc3-b20f-44e4-8d3a-018e219b8b78"}}, "outputs": {"output_quant": {"id": "b254dfb3752ab0d6", "src": "hda", "uuid": "6c33b4a4-5ac4-4153-96be-6abca25a3f03"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Version Info: This is the most recent version of Sailfish\nwriting log to ./index_dir/logs/sailfish_index.log\nRapMap Indexer\n\n[Step 1 of 4] : counting k-mers\nElapsed time: 0.00357013s\n\nReplaced 0 non-ATCG nucleotides\nClipped poly-A tails from 0 transcripts\nBuilding rank-select dictionary and saving to disk done\nElapsed time: 0.00015581s\nWriting sequence data to file . . . done\nElapsed time: 0.00028625s\n[info] Building 32-bit suffix array (length of generalized text is 28577)\nBuilding suffix array . . . success\nsaving to disk . . . done\nElapsed time: 0.00015461s\ndone\nElapsed time: 0.00533417s\n\r\rprocessed 0 positions\nkhash had 18955 keys\nsaving hash to disk . . . done\nElapsed time: 0.00186866s\nVersion Info: This is the most recent version of Sailfish\n# sailfish (quasi-mapping-based) v0.9.2\n# [ program ] => sailfish \n# [ command ] => quant \n# [ index ] => { ./index_dir }\n# [ mates1 ] => { ./mate1.fastq }\n# [ mates2 ] => { ./mate2.fastq }\n# [ libType ] => { IU }\n# [ output ] => { ./results }\n# [ threads ] => { 6 }\n# [ gcSizeSamp ] => { 1 }\n# [ gcSpeedSamp ] => { 1 }\n# [ fldMean ] => { 200 }\n# [ fldSD ] => { 80 }\n# [ maxReadOcc ] => { 200 }\n# [ maxFragLen ] => { 1000 }\n# [ txpAggregationKey ] => { gene_id }\n# [ numBiasSamples ] => { 1000000 }\n# [ numFragSamples ] => { 10000 }\n# [ numGibbsSamples ] => { 0 }\n# [ numBootstraps ] => { 0 }\nLogs will be written to ./results/logs\n[2023-05-24 07:05:45.405] [jointLog] [info] parsing read library format\nthere is 1 lib\nLoading 32-bit quasi indexIndex contained 15 targets\nLoaded targets\n\n\n[2023-05-24 07:05:45.792] [stderrLog] [info] Loading Position Hash\n[2023-05-24 07:05:45.792] [stderrLog] [info] Loading Suffix Array \n[2023-05-24 07:05:45.795] [stderrLog] [info] Loading Transcript Info \n[2023-05-24 07:05:45.798] [stderrLog] [info] Loading Rank-Select Bit Array\n[2023-05-24 07:05:45.798] [stderrLog] [info] There were 15 set bits in the bit array\n[2023-05-24 07:05:45.798] [stderrLog] [info] Computing transcript lengths\n[2023-05-24 07:05:45.798] [stderrLog] [info] Waiting to finish loading hash\n[2023-05-24 07:05:45.798] [stderrLog] [info] Done loading index\n[2023-05-24 07:05:45.789] [jointLog] [info] Loading Quasi index\n[2023-05-24 07:05:45.798] [jointLog] [info] done\n\n[2023-05-24 07:05:45.835] [jointLog] [info] Gathered fragment lengths from all threads\n[2023-05-24 07:05:45.835] [jointLog] [warning] Sailfish saw fewer then 10000 uniquely mapped reads so 200 will be used as the mean fragment length and 80 as the standard deviation for effective length correction\n[2023-05-24 07:05:45.836] [jointLog] [info] Estimating effective lengths\nDone Quasi-Mapping \n\n[2023-05-24 07:05:45.849] [jointLog] [info] Computed 21 rich equivalence classes for further processing\n[2023-05-24 07:05:45.849] [jointLog] [info] Counted 10000 total reads in the equivalence classes \n[2023-05-24 07:05:45.849] [jointLog] [info] Starting optimizer:\n\n[2023-05-24 07:05:45.866] [jointLog] [info] Optimizing over 21 equivalence classes\n[2023-05-24 07:05:45.866] [jointLog] [info] iteration = 0 | max rel diff. = 14.873\n[2023-05-24 07:05:45.866] [jointLog] [info] iteration = 64 | max rel diff. = 0.00117687\n[2023-05-24 07:05:45.866] [jointLog] [info] Finished optimizer\n[2023-05-24 07:05:45.866] [jointLog] [info] writing output \n\n", "job_stdout": "", "job_stderr": "", "stderr": "Version Info: This is the most recent version of Sailfish\nwriting log to ./index_dir/logs/sailfish_index.log\nRapMap Indexer\n\n[Step 1 of 4] : counting k-mers\nElapsed time: 0.00357013s\n\nReplaced 0 non-ATCG nucleotides\nClipped poly-A tails from 0 transcripts\nBuilding rank-select dictionary and saving to disk done\nElapsed time: 0.00015581s\nWriting sequence data to file . . . done\nElapsed time: 0.00028625s\n[info] Building 32-bit suffix array (length of generalized text is 28577)\nBuilding suffix array . . . success\nsaving to disk . . . done\nElapsed time: 0.00015461s\ndone\nElapsed time: 0.00533417s\n\r\rprocessed 0 positions\nkhash had 18955 keys\nsaving hash to disk . . . done\nElapsed time: 0.00186866s\nVersion Info: This is the most recent version of Sailfish\n# sailfish (quasi-mapping-based) v0.9.2\n# [ program ] => sailfish \n# [ command ] => quant \n# [ index ] => { ./index_dir }\n# [ mates1 ] => { ./mate1.fastq }\n# [ mates2 ] => { ./mate2.fastq }\n# [ libType ] => { IU }\n# [ output ] => { ./results }\n# [ threads ] => { 6 }\n# [ gcSizeSamp ] => { 1 }\n# [ gcSpeedSamp ] => { 1 }\n# [ fldMean ] => { 200 }\n# [ fldSD ] => { 80 }\n# [ maxReadOcc ] => { 200 }\n# [ maxFragLen ] => { 1000 }\n# [ txpAggregationKey ] => { gene_id }\n# [ numBiasSamples ] => { 1000000 }\n# [ numFragSamples ] => { 10000 }\n# [ numGibbsSamples ] => { 0 }\n# [ numBootstraps ] => { 0 }\nLogs will be written to ./results/logs\n[2023-05-24 07:05:45.405] [jointLog] [info] parsing read library format\nthere is 1 lib\nLoading 32-bit quasi indexIndex contained 15 targets\nLoaded targets\n\n\n[2023-05-24 07:05:45.792] [stderrLog] [info] Loading Position Hash\n[2023-05-24 07:05:45.792] [stderrLog] [info] Loading Suffix Array \n[2023-05-24 07:05:45.795] [stderrLog] [info] Loading Transcript Info \n[2023-05-24 07:05:45.798] [stderrLog] [info] Loading Rank-Select Bit Array\n[2023-05-24 07:05:45.798] [stderrLog] [info] There were 15 set bits in the bit array\n[2023-05-24 07:05:45.798] [stderrLog] [info] Computing transcript lengths\n[2023-05-24 07:05:45.798] [stderrLog] [info] Waiting to finish loading hash\n[2023-05-24 07:05:45.798] [stderrLog] [info] Done loading index\n[2023-05-24 07:05:45.789] [jointLog] [info] Loading Quasi index\n[2023-05-24 07:05:45.798] [jointLog] [info] done\n\n[2023-05-24 07:05:45.835] [jointLog] [info] Gathered fragment lengths from all threads\n[2023-05-24 07:05:45.835] [jointLog] [warning] Sailfish saw fewer then 10000 uniquely mapped reads so 200 will be used as the mean fragment length and 80 as the standard deviation for effective length correction\n[2023-05-24 07:05:45.836] [jointLog] [info] Estimating effective lengths\nDone Quasi-Mapping \n\n[2023-05-24 07:05:45.849] [jointLog] [info] Computed 21 rich equivalence classes for further processing\n[2023-05-24 07:05:45.849] [jointLog] [info] Counted 10000 total reads in the equivalence classes \n[2023-05-24 07:05:45.849] [jointLog] [info] Starting optimizer:\n\n[2023-05-24 07:05:45.866] [jointLog] [info] Optimizing over 21 equivalence classes\n[2023-05-24 07:05:45.866] [jointLog] [info] iteration = 0 | max rel diff. = 14.873\n[2023-05-24 07:05:45.866] [jointLog] [info] iteration = 64 | max rel diff. = 0.00117687\n[2023-05-24 07:05:45.866] [jointLog] [info] Finished optimizer\n[2023-05-24 07:05:45.866] [jointLog] [info] writing output \n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:05:46", "plugin": "core", "name": "end_epoch", "raw_value": "1684911946.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:05:42", "plugin": "core", "name": "start_epoch", "raw_value": "1684911942.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "6", "plugin": "core", "name": "galaxy_slots", "raw_value": "6.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/bgruening/sailfish/sailfish/0.10.1.1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/sailfish/sailfish", "tool_version": "0.10.1.1", "test_index": 1, "time_seconds": 63.09785509109497, "inputs": {"refTranscriptSource|ownFile": {"src": "hda", "id": "35339c09e7ec4da6"}, "refTranscriptSource|TranscriptSource": "history", "single_or_paired|input_mate1": {"src": "hda", "id": "f09f05699ecfeb82"}, "single_or_paired|input_mate2": {"src": "hda", "id": "1be6b56f5cfcb0bd"}, "single_or_paired|single_or_paired_opts": "paired", "biasCorrect": false}, "job": {"model_class": "Job", "id": "3c2cff81a80ee095", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:06:09.740323", "create_time": "2023-05-24T07:05:30.592886", "galaxy_version": "23.0", "command_version": "version : 0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/sailfish/sailfish/0.10.1.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-4tqmf", "command_line": "sailfish index --transcripts /galaxy/server/database/objects/8/7/4/dataset_8746c960-dba4-4d98-a807-9580a6ab360f.dat --kmerSize 21 --out ./index_dir --threads \"${GALAXY_SLOTS:-4}\" && ln -s /galaxy/server/database/objects/4/0/2/dataset_402d78fe-4f66-4a78-b732-0ae8ba23eb86.dat ./mate1.fastq && ln -s /galaxy/server/database/objects/0/3/c/dataset_03c0842a-3618-452a-9543-742c4ee2b341.dat ./mate2.fastq && sailfish quant --index ./index_dir --mates1 <(zcat ./mate1.fastq) --mates2 <(zcat ./mate2.fastq) --libType \"IU\" --output ./results   --threads \"${GALAXY_SLOTS:-4}\"  --gcSizeSamp 1 --gcSpeedSamp 1 --fldMean 200 --fldSD 80 --maxReadOcc 200      --maxFragLen 1000 --txpAggregationKey 'gene_id'    --numBiasSamples 1000000 --numFragSamples 10000 --numGibbsSamples 0 --numBootstraps 0", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "numBootstraps": "\"0\"", "numGibbsSamples": "\"0\"", "numFragSamples": "\"10000\"", "numBiasSamples": "\"1000000\"", "allowDovetail": "false", "enforceLibCompat": "false", "ignoreLibCompat": "false", "txpAggregationKey": "\"gene_id\"", "maxFragLen": "\"1000\"", "unsmoothedFLD": "false", "discardOrphans": "false", "useVBOpt": "false", "noEffectiveLengthCorrection": "false", "maxReadOcc": "\"200\"", "fldSD": "\"80\"", "fldMean": "\"200\"", "strictIntersect": "false", "gcSpeedSamp": "\"1\"", "gcSizeSamp": "\"1\"", "dumpEq": "false", "gcBiasCorrect": "false", "biasCorrect": "false", "geneMap": null, "single_or_paired": "{\"__current_case__\": 1, \"input_mate1\": {\"values\": [{\"id\": 496, \"src\": \"hda\"}]}, \"input_mate2\": {\"values\": [{\"id\": 497, \"src\": \"hda\"}]}, \"orientation\": \"I\", \"single_or_paired_opts\": \"paired\", \"strandedness\": \"U\"}", "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"kmerSize\": \"21\", \"ownFile\": {\"values\": [{\"id\": 495, \"src\": \"hda\"}]}}"}, "inputs": {"ownFile": {"id": "35339c09e7ec4da6", "src": "hda", "uuid": "8746c960-dba4-4d98-a807-9580a6ab360f"}, "input_mate1": {"id": "f09f05699ecfeb82", "src": "hda", "uuid": "402d78fe-4f66-4a78-b732-0ae8ba23eb86"}, "input_mate2": {"id": "1be6b56f5cfcb0bd", "src": "hda", "uuid": "03c0842a-3618-452a-9543-742c4ee2b341"}}, "outputs": {"output_quant": {"id": "f6bb7d877b39d138", "src": "hda", "uuid": "0cc00bad-aab3-4dec-8e01-5f450c72c66f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Version Info: This is the most recent version of Sailfish\nwriting log to ./index_dir/logs/sailfish_index.log\nRapMap Indexer\n\n[Step 1 of 4] : counting k-mers\nElapsed time: 0.00160791s\n\nReplaced 0 non-ATCG nucleotides\nClipped poly-A tails from 0 transcripts\nBuilding rank-select dictionary and saving to disk done\nElapsed time: 0.00010928s\nWriting sequence data to file . . . done\nElapsed time: 0.000171699s\n[info] Building 32-bit suffix array (length of generalized text is 28577)\nBuilding suffix array . . . success\nsaving to disk . . . done\nElapsed time: 0.00016708s\ndone\nElapsed time: 0.01724s\n\r\rprocessed 0 positions\nkhash had 18955 keys\nsaving hash to disk . . . done\nElapsed time: 0.0015236s\nVersion Info: This is the most recent version of Sailfish\n# sailfish (quasi-mapping-based) v0.9.2\n# [ program ] => sailfish \n# [ command ] => quant \n# [ index ] => { ./index_dir }\n# [ mates1 ] => { /dev/fd/63 }\n# [ mates2 ] => { /dev/fd/62 }\n# [ libType ] => { IU }\n# [ output ] => { ./results }\n# [ threads ] => { 6 }\n# [ gcSizeSamp ] => { 1 }\n# [ gcSpeedSamp ] => { 1 }\n# [ fldMean ] => { 200 }\n# [ fldSD ] => { 80 }\n# [ maxReadOcc ] => { 200 }\n# [ maxFragLen ] => { 1000 }\n# [ txpAggregationKey ] => { gene_id }\n# [ numBiasSamples ] => { 1000000 }\n# [ numFragSamples ] => { 10000 }\n# [ numGibbsSamples ] => { 0 }\n# [ numBootstraps ] => { 0 }\nLogs will be written to ./results/logs\nthere is 1 lib\n[2023-05-24 07:05:54.846] [jointLog] [info] parsing read library format\nLoading 32-bit quasi indexIndex contained 15 targets\nLoaded targets\n\n\n[2023-05-24 07:05:55.216] [stderrLog] [info] Loading Suffix Array \n[2023-05-24 07:05:55.216] [stderrLog] [info] Loading Position Hash\n[2023-05-24 07:05:55.218] [stderrLog] [info] Loading Transcript Info \n[2023-05-24 07:05:55.219] [stderrLog] [info] Loading Rank-Select Bit Array\n[2023-05-24 07:05:55.220] [stderrLog] [info] There were 15 set bits in the bit array\n[2023-05-24 07:05:55.220] [stderrLog] [info] Computing transcript lengths\n[2023-05-24 07:05:55.220] [stderrLog] [info] Waiting to finish loading hash\n[2023-05-24 07:05:55.220] [stderrLog] [info] Done loading index\n\nDone Quasi-Mapping \n\n[2023-05-24 07:05:55.212] [jointLog] [info] Loading Quasi index\n[2023-05-24 07:05:55.220] [jointLog] [info] done\n[2023-05-24 07:05:55.257] [jointLog] [info] Gathered fragment lengths from all threads\n[2023-05-24 07:05:55.257] [jointLog] [warning] Sailfish saw fewer then 10000 uniquely mapped reads so 200 will be used as the mean fragment length and 80 as the standard deviation for effective length correction\n[2023-05-24 07:05:55.258] [jointLog] [info] Estimating effective lengths\n[2023-05-24 07:05:55.272] [jointLog] [info] Computed 21 rich equivalence classes for further processing\n[2023-05-24 07:05:55.272] [jointLog] [info] Counted 10000 total reads in the equivalence classes \n[2023-05-24 07:05:55.273] [jointLog] [info] Starting optimizer:\n\n[2023-05-24 07:05:55.273] [jointLog] [info] Optimizing over 21 equivalence classes\n[2023-05-24 07:05:55.273] [jointLog] [info] iteration = 0 | max rel diff. = 14.873\n[2023-05-24 07:05:55.275] [jointLog] [info] iteration = 64 | max rel diff. = 0.00117687\n[2023-05-24 07:05:55.275] [jointLog] [info] Finished optimizer\n[2023-05-24 07:05:55.275] [jointLog] [info] writing output \n\n", "job_stdout": "", "job_stderr": "", "stderr": "Version Info: This is the most recent version of Sailfish\nwriting log to ./index_dir/logs/sailfish_index.log\nRapMap Indexer\n\n[Step 1 of 4] : counting k-mers\nElapsed time: 0.00160791s\n\nReplaced 0 non-ATCG nucleotides\nClipped poly-A tails from 0 transcripts\nBuilding rank-select dictionary and saving to disk done\nElapsed time: 0.00010928s\nWriting sequence data to file . . . done\nElapsed time: 0.000171699s\n[info] Building 32-bit suffix array (length of generalized text is 28577)\nBuilding suffix array . . . success\nsaving to disk . . . done\nElapsed time: 0.00016708s\ndone\nElapsed time: 0.01724s\n\r\rprocessed 0 positions\nkhash had 18955 keys\nsaving hash to disk . . . done\nElapsed time: 0.0015236s\nVersion Info: This is the most recent version of Sailfish\n# sailfish (quasi-mapping-based) v0.9.2\n# [ program ] => sailfish \n# [ command ] => quant \n# [ index ] => { ./index_dir }\n# [ mates1 ] => { /dev/fd/63 }\n# [ mates2 ] => { /dev/fd/62 }\n# [ libType ] => { IU }\n# [ output ] => { ./results }\n# [ threads ] => { 6 }\n# [ gcSizeSamp ] => { 1 }\n# [ gcSpeedSamp ] => { 1 }\n# [ fldMean ] => { 200 }\n# [ fldSD ] => { 80 }\n# [ maxReadOcc ] => { 200 }\n# [ maxFragLen ] => { 1000 }\n# [ txpAggregationKey ] => { gene_id }\n# [ numBiasSamples ] => { 1000000 }\n# [ numFragSamples ] => { 10000 }\n# [ numGibbsSamples ] => { 0 }\n# [ numBootstraps ] => { 0 }\nLogs will be written to ./results/logs\nthere is 1 lib\n[2023-05-24 07:05:54.846] [jointLog] [info] parsing read library format\nLoading 32-bit quasi indexIndex contained 15 targets\nLoaded targets\n\n\n[2023-05-24 07:05:55.216] [stderrLog] [info] Loading Suffix Array \n[2023-05-24 07:05:55.216] [stderrLog] [info] Loading Position Hash\n[2023-05-24 07:05:55.218] [stderrLog] [info] Loading Transcript Info \n[2023-05-24 07:05:55.219] [stderrLog] [info] Loading Rank-Select Bit Array\n[2023-05-24 07:05:55.220] [stderrLog] [info] There were 15 set bits in the bit array\n[2023-05-24 07:05:55.220] [stderrLog] [info] Computing transcript lengths\n[2023-05-24 07:05:55.220] [stderrLog] [info] Waiting to finish loading hash\n[2023-05-24 07:05:55.220] [stderrLog] [info] Done loading index\n\nDone Quasi-Mapping \n\n[2023-05-24 07:05:55.212] [jointLog] [info] Loading Quasi index\n[2023-05-24 07:05:55.220] [jointLog] [info] done\n[2023-05-24 07:05:55.257] [jointLog] [info] Gathered fragment lengths from all threads\n[2023-05-24 07:05:55.257] [jointLog] [warning] Sailfish saw fewer then 10000 uniquely mapped reads so 200 will be used as the mean fragment length and 80 as the standard deviation for effective length correction\n[2023-05-24 07:05:55.258] [jointLog] [info] Estimating effective lengths\n[2023-05-24 07:05:55.272] [jointLog] [info] Computed 21 rich equivalence classes for further processing\n[2023-05-24 07:05:55.272] [jointLog] [info] Counted 10000 total reads in the equivalence classes \n[2023-05-24 07:05:55.273] [jointLog] [info] Starting optimizer:\n\n[2023-05-24 07:05:55.273] [jointLog] [info] Optimizing over 21 equivalence classes\n[2023-05-24 07:05:55.273] [jointLog] [info] iteration = 0 | max rel diff. = 14.873\n[2023-05-24 07:05:55.275] [jointLog] [info] iteration = 64 | max rel diff. = 0.00117687\n[2023-05-24 07:05:55.275] [jointLog] [info] Finished optimizer\n[2023-05-24 07:05:55.275] [jointLog] [info] writing output \n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:05:55", "plugin": "core", "name": "end_epoch", "raw_value": "1684911955.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:05:52", "plugin": "core", "name": "start_epoch", "raw_value": "1684911952.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "6", "plugin": "core", "name": "galaxy_slots", "raw_value": "6.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/bgruening/sailfish/sailfish/0.10.1.1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/sailfish/sailfish", "tool_version": "0.10.1.1", "test_index": 2, "time_seconds": 64.37768840789795, "inputs": {"refTranscriptSource|ownFile": {"src": "hda", "id": "8e7d5d4ecf7618d1"}, "refTranscriptSource|TranscriptSource": "history", "single_or_paired|input_mate1": {"src": "hda", "id": "18efb427da9f375d"}, "single_or_paired|input_mate2": {"src": "hda", "id": "92d8766c631ffd30"}, "single_or_paired|single_or_paired_opts": "paired", "biasCorrect": true}, "job": {"model_class": "Job", "id": "927603c48414fc31", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:07:06.061841", "create_time": "2023-05-24T07:06:40.562806", "galaxy_version": "23.0", "command_version": "version : 0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/sailfish/sailfish/0.10.1.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-pxcrj", "command_line": "sailfish index --transcripts /galaxy/server/database/objects/8/a/6/dataset_8a6feb57-8489-43da-82af-81bb057b268e.dat --kmerSize 21 --out ./index_dir --threads \"${GALAXY_SLOTS:-4}\" && ln -s /galaxy/server/database/objects/5/8/f/dataset_58f8ccd3-0f14-41bf-9f3d-a0fba09df163.dat ./mate1.fastq && ln -s /galaxy/server/database/objects/c/8/8/dataset_c88a2373-e541-4aad-a45f-58f85d1a7779.dat ./mate2.fastq && sailfish quant --index ./index_dir --mates1 ./mate1.fastq --mates2 ./mate2.fastq --libType \"IU\" --output ./results --biasCorrect  --threads \"${GALAXY_SLOTS:-4}\"  --gcSizeSamp 1 --gcSpeedSamp 1 --fldMean 200 --fldSD 80 --maxReadOcc 200      --maxFragLen 1000 --txpAggregationKey 'gene_id'    --numBiasSamples 1000000 --numFragSamples 10000 --numGibbsSamples 0 --numBootstraps 0", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "numBootstraps": "\"0\"", "numGibbsSamples": "\"0\"", "numFragSamples": "\"10000\"", "numBiasSamples": "\"1000000\"", "allowDovetail": "false", "enforceLibCompat": "false", "ignoreLibCompat": "false", "txpAggregationKey": "\"gene_id\"", "maxFragLen": "\"1000\"", "unsmoothedFLD": "false", "discardOrphans": "false", "useVBOpt": "false", "noEffectiveLengthCorrection": "false", "maxReadOcc": "\"200\"", "fldSD": "\"80\"", "fldMean": "\"200\"", "strictIntersect": "false", "gcSpeedSamp": "\"1\"", "gcSizeSamp": "\"1\"", "dumpEq": "false", "gcBiasCorrect": "false", "biasCorrect": "true", "geneMap": null, "single_or_paired": "{\"__current_case__\": 1, \"input_mate1\": {\"values\": [{\"id\": 504, \"src\": \"hda\"}]}, \"input_mate2\": {\"values\": [{\"id\": 505, \"src\": \"hda\"}]}, \"orientation\": \"I\", \"single_or_paired_opts\": \"paired\", \"strandedness\": \"U\"}", "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"kmerSize\": \"21\", \"ownFile\": {\"values\": [{\"id\": 503, \"src\": \"hda\"}]}}"}, "inputs": {"ownFile": {"id": "8e7d5d4ecf7618d1", "src": "hda", "uuid": "8a6feb57-8489-43da-82af-81bb057b268e"}, "input_mate1": {"id": "18efb427da9f375d", "src": "hda", "uuid": "58f8ccd3-0f14-41bf-9f3d-a0fba09df163"}, "input_mate2": {"id": "92d8766c631ffd30", "src": "hda", "uuid": "c88a2373-e541-4aad-a45f-58f85d1a7779"}}, "outputs": {"output_quant": {"id": "d0a51d7dec1a7af1", "src": "hda", "uuid": "db66fa97-94bc-4182-a691-ecfa7b5f8684"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Version Info: This is the most recent version of Sailfish\nwriting log to ./index_dir/logs/sailfish_index.log\nRapMap Indexer\n\n[Step 1 of 4] : counting k-mers\nElapsed time: 0.00184717s\n\nReplaced 0 non-ATCG nucleotides\nClipped poly-A tails from 0 transcripts\nBuilding rank-select dictionary and saving to disk done\nElapsed time: 0.00010458s\nWriting sequence data to file . . . done\nElapsed time: 0.000639441s\n[info] Building 32-bit suffix array (length of generalized text is 28577)\nBuilding suffix array . . . success\nsaving to disk . . . done\nElapsed time: 0.00016505s\ndone\nElapsed time: 0.0172889s\n\r\rprocessed 0 positions\nkhash had 18955 keys\nsaving hash to disk . . . done\nElapsed time: 0.00163657s\nVersion Info: This is the most recent version of Sailfish\n# sailfish (quasi-mapping-based) v0.9.2\n# [ program ] => sailfish \n# [ command ] => quant \n# [ index ] => { ./index_dir }\n# [ mates1 ] => { ./mate1.fastq }\n# [ mates2 ] => { ./mate2.fastq }\n# [ libType ] => { IU }\n# [ output ] => { ./results }\n# [ biasCorrect ] => { }\n# [ threads ] => { 6 }\n# [ gcSizeSamp ] => { 1 }\n# [ gcSpeedSamp ] => { 1 }\n# [ fldMean ] => { 200 }\n# [ fldSD ] => { 80 }\n# [ maxReadOcc ] => { 200 }\n# [ maxFragLen ] => { 1000 }\n# [ txpAggregationKey ] => { gene_id }\n# [ numBiasSamples ] => { 1000000 }\n# [ numFragSamples ] => { 10000 }\n# [ numGibbsSamples ] => { 0 }\n# [ numBootstraps ] => { 0 }\nLogs will be written to ./results/logs\n[2023-05-24 07:06:53.926] [jointLog] [info] parsing read library format\nthere is 1 lib\nLoading 32-bit quasi indexIndex contained 15 targets\nLoaded targets\n\n\n\n[2023-05-24 07:06:54.090] [stderrLog] [info] Loading Position Hash\n[2023-05-24 07:06:54.091] [stderrLog] [info] Loading Suffix Array \n[2023-05-24 07:06:54.092] [stderrLog] [info] Loading Transcript Info \n[2023-05-24 07:06:54.094] [stderrLog] [info] Loading Rank-Select Bit Array\n[2023-05-24 07:06:54.094] [stderrLog] [info] There were 15 set bits in the bit array\n[2023-05-24 07:06:54.094] [stderrLog] [info] Computing transcript lengths\n[2023-05-24 07:06:54.094] [stderrLog] [info] Waiting to finish loading hash\n[2023-05-24 07:06:54.094] [stderrLog] [info] Done loading index\nDone Quasi-Mapping \n\n[2023-05-24 07:06:54.087] [jointLog] [info] Loading Quasi index\n[2023-05-24 07:06:54.094] [jointLog] [info] done\n[2023-05-24 07:06:54.127] [jointLog] [info] Gathered fragment lengths from all threads\n[2023-05-24 07:06:54.127] [jointLog] [warning] Sailfish saw fewer then 10000 uniquely mapped reads so 200 will be used as the mean fragment length and 80 as the standard deviation for effective length correction\n[2023-05-24 07:06:54.128] [jointLog] [info] Estimating effective lengths\n[2023-05-24 07:06:54.141] [jointLog] [info] Computed 21 rich equivalence classes for further processing\n[2023-05-24 07:06:54.141] [jointLog] [info] Counted 10000 total reads in the equivalence classes \n[2023-05-24 07:06:54.142] [jointLog] [info] Starting optimizer:\n\n[2023-05-24 07:06:54.142] [jointLog] [info] Optimizing over 21 equivalence classes\n[2023-05-24 07:06:54.142] [jointLog] [info] iteration = 0 | max rel diff. = 14.873\n[2023-05-24 07:06:54.142] [jointLog] [info] iteration 50, recomputing effective lengths\n[2023-05-24 07:06:54.144] [jointLog] [info] iteration = 63 | max rel diff. = 0.00199953\n[2023-05-24 07:06:54.144] [jointLog] [info] Finished optimizer\n[2023-05-24 07:06:54.144] [jointLog] [info] writing output \n\n", "job_stdout": "", "job_stderr": "", "stderr": "Version Info: This is the most recent version of Sailfish\nwriting log to ./index_dir/logs/sailfish_index.log\nRapMap Indexer\n\n[Step 1 of 4] : counting k-mers\nElapsed time: 0.00184717s\n\nReplaced 0 non-ATCG nucleotides\nClipped poly-A tails from 0 transcripts\nBuilding rank-select dictionary and saving to disk done\nElapsed time: 0.00010458s\nWriting sequence data to file . . . done\nElapsed time: 0.000639441s\n[info] Building 32-bit suffix array (length of generalized text is 28577)\nBuilding suffix array . . . success\nsaving to disk . . . done\nElapsed time: 0.00016505s\ndone\nElapsed time: 0.0172889s\n\r\rprocessed 0 positions\nkhash had 18955 keys\nsaving hash to disk . . . done\nElapsed time: 0.00163657s\nVersion Info: This is the most recent version of Sailfish\n# sailfish (quasi-mapping-based) v0.9.2\n# [ program ] => sailfish \n# [ command ] => quant \n# [ index ] => { ./index_dir }\n# [ mates1 ] => { ./mate1.fastq }\n# [ mates2 ] => { ./mate2.fastq }\n# [ libType ] => { IU }\n# [ output ] => { ./results }\n# [ biasCorrect ] => { }\n# [ threads ] => { 6 }\n# [ gcSizeSamp ] => { 1 }\n# [ gcSpeedSamp ] => { 1 }\n# [ fldMean ] => { 200 }\n# [ fldSD ] => { 80 }\n# [ maxReadOcc ] => { 200 }\n# [ maxFragLen ] => { 1000 }\n# [ txpAggregationKey ] => { gene_id }\n# [ numBiasSamples ] => { 1000000 }\n# [ numFragSamples ] => { 10000 }\n# [ numGibbsSamples ] => { 0 }\n# [ numBootstraps ] => { 0 }\nLogs will be written to ./results/logs\n[2023-05-24 07:06:53.926] [jointLog] [info] parsing read library format\nthere is 1 lib\nLoading 32-bit quasi indexIndex contained 15 targets\nLoaded targets\n\n\n\n[2023-05-24 07:06:54.090] [stderrLog] [info] Loading Position Hash\n[2023-05-24 07:06:54.091] [stderrLog] [info] Loading Suffix Array \n[2023-05-24 07:06:54.092] [stderrLog] [info] Loading Transcript Info \n[2023-05-24 07:06:54.094] [stderrLog] [info] Loading Rank-Select Bit Array\n[2023-05-24 07:06:54.094] [stderrLog] [info] There were 15 set bits in the bit array\n[2023-05-24 07:06:54.094] [stderrLog] [info] Computing transcript lengths\n[2023-05-24 07:06:54.094] [stderrLog] [info] Waiting to finish loading hash\n[2023-05-24 07:06:54.094] [stderrLog] [info] Done loading index\nDone Quasi-Mapping \n\n[2023-05-24 07:06:54.087] [jointLog] [info] Loading Quasi index\n[2023-05-24 07:06:54.094] [jointLog] [info] done\n[2023-05-24 07:06:54.127] [jointLog] [info] Gathered fragment lengths from all threads\n[2023-05-24 07:06:54.127] [jointLog] [warning] Sailfish saw fewer then 10000 uniquely mapped reads so 200 will be used as the mean fragment length and 80 as the standard deviation for effective length correction\n[2023-05-24 07:06:54.128] [jointLog] [info] Estimating effective lengths\n[2023-05-24 07:06:54.141] [jointLog] [info] Computed 21 rich equivalence classes for further processing\n[2023-05-24 07:06:54.141] [jointLog] [info] Counted 10000 total reads in the equivalence classes \n[2023-05-24 07:06:54.142] [jointLog] [info] Starting optimizer:\n\n[2023-05-24 07:06:54.142] [jointLog] [info] Optimizing over 21 equivalence classes\n[2023-05-24 07:06:54.142] [jointLog] [info] iteration = 0 | max rel diff. = 14.873\n[2023-05-24 07:06:54.142] [jointLog] [info] iteration 50, recomputing effective lengths\n[2023-05-24 07:06:54.144] [jointLog] [info] iteration = 63 | max rel diff. = 0.00199953\n[2023-05-24 07:06:54.144] [jointLog] [info] Finished optimizer\n[2023-05-24 07:06:54.144] [jointLog] [info] writing output \n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:06:54", "plugin": "core", "name": "end_epoch", "raw_value": "1684912014.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:06:51", "plugin": "core", "name": "start_epoch", "raw_value": "1684912011.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "6", "plugin": "core", "name": "galaxy_slots", "raw_value": "6.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/bgruening/sailfish/sailfish/0.10.1.1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/sailfish/sailfish", "tool_version": "0.10.1.1", "test_index": 3, "time_seconds": 61.750232219696045, "inputs": {"refTranscriptSource|ownFile": {"src": "hda", "id": "8e7d5d4ecf7618d1"}, "refTranscriptSource|TranscriptSource": "history", "single_or_paired|input_mate1": {"src": "hda", "id": "18efb427da9f375d"}, "single_or_paired|input_mate2": {"src": "hda", "id": "92d8766c631ffd30"}, "single_or_paired|single_or_paired_opts": "paired", "geneMap": {"src": "hda", "id": "8fcc151b5006e442"}, "biasCorrect": true}, "job": {"model_class": "Job", "id": "6b7b2234020fc3ee", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:07:10.916067", "create_time": "2023-05-24T07:06:53.650598", "galaxy_version": "23.0", "command_version": "version : 0.9.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/sailfish/sailfish/0.10.1.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-7nx4v", "command_line": "sailfish index --transcripts /galaxy/server/database/objects/8/a/6/dataset_8a6feb57-8489-43da-82af-81bb057b268e.dat --kmerSize 21 --out ./index_dir --threads \"${GALAXY_SLOTS:-4}\" && ln -s /galaxy/server/database/objects/5/8/f/dataset_58f8ccd3-0f14-41bf-9f3d-a0fba09df163.dat ./mate1.fastq && ln -s /galaxy/server/database/objects/c/8/8/dataset_c88a2373-e541-4aad-a45f-58f85d1a7779.dat ./mate2.fastq && ln -s \"/galaxy/server/database/objects/8/2/3/dataset_8236217f-7d81-4b14-9cd0-4f0cb8a0465b.dat\" ./geneMap.tabular && sailfish quant --index ./index_dir --mates1 ./mate1.fastq --mates2 ./mate2.fastq --libType \"IU\" --output ./results --biasCorrect  --threads \"${GALAXY_SLOTS:-4}\"  --gcSizeSamp 1 --gcSpeedSamp 1 --fldMean 200 --fldSD 80 --maxReadOcc 200 --geneMap ./geneMap.tabular      --maxFragLen 1000 --txpAggregationKey 'gene_id'    --numBiasSamples 1000000 --numFragSamples 10000 --numGibbsSamples 0 --numBootstraps 0", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "numBootstraps": "\"0\"", "numGibbsSamples": "\"0\"", "numFragSamples": "\"10000\"", "numBiasSamples": "\"1000000\"", "allowDovetail": "false", "enforceLibCompat": "false", "ignoreLibCompat": "false", "txpAggregationKey": "\"gene_id\"", "maxFragLen": "\"1000\"", "unsmoothedFLD": "false", "discardOrphans": "false", "useVBOpt": "false", "noEffectiveLengthCorrection": "false", "maxReadOcc": "\"200\"", "fldSD": "\"80\"", "fldMean": "\"200\"", "strictIntersect": "false", "gcSpeedSamp": "\"1\"", "gcSizeSamp": "\"1\"", "dumpEq": "false", "gcBiasCorrect": "false", "biasCorrect": "true", "single_or_paired": "{\"__current_case__\": 1, \"input_mate1\": {\"values\": [{\"id\": 504, \"src\": \"hda\"}]}, \"input_mate2\": {\"values\": [{\"id\": 505, \"src\": \"hda\"}]}, \"orientation\": \"I\", \"single_or_paired_opts\": \"paired\", \"strandedness\": \"U\"}", "refTranscriptSource": "{\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"kmerSize\": \"21\", \"ownFile\": {\"values\": [{\"id\": 503, \"src\": \"hda\"}]}}"}, "inputs": {"ownFile": {"id": "8e7d5d4ecf7618d1", "src": "hda", "uuid": "8a6feb57-8489-43da-82af-81bb057b268e"}, "input_mate1": {"id": "18efb427da9f375d", "src": "hda", "uuid": "58f8ccd3-0f14-41bf-9f3d-a0fba09df163"}, "input_mate2": {"id": "92d8766c631ffd30", "src": "hda", "uuid": "c88a2373-e541-4aad-a45f-58f85d1a7779"}, "geneMap": {"id": "8fcc151b5006e442", "src": "hda", "uuid": "8236217f-7d81-4b14-9cd0-4f0cb8a0465b"}}, "outputs": {"output_gene_quant": {"id": "e2a7ba56e5e17aff", "src": "hda", "uuid": "8e16adb7-b530-4141-9d9e-137ee3d502eb"}, "output_quant": {"id": "22055c0072611ebb", "src": "hda", "uuid": "58eeb07b-1eda-4b7e-8255-b1a68d20bdbd"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "Version Info: This is the most recent version of Sailfish\nwriting log to ./index_dir/logs/sailfish_index.log\nRapMap Indexer\n\n[Step 1 of 4] : counting k-mers\nElapsed time: 0.00122103s\n\nReplaced 0 non-ATCG nucleotides\nClipped poly-A tails from 0 transcripts\nBuilding rank-select dictionary and saving to disk done\nElapsed time: 4.1409e-05s\nWriting sequence data to file . . . done\nElapsed time: 0.00012552s\n[info] Building 32-bit suffix array (length of generalized text is 28577)\nBuilding suffix array . . . success\nsaving to disk . . . done\nElapsed time: 0.00014899s\ndone\nElapsed time: 0.016068s\n\r\rprocessed 0 positions\nkhash had 18955 keys\nsaving hash to disk . . . done\nElapsed time: 0.00144833s\nVersion Info: This is the most recent version of Sailfish\n# sailfish (quasi-mapping-based) v0.9.2\n# [ program ] => sailfish \n# [ command ] => quant \n# [ index ] => { ./index_dir }\n# [ mates1 ] => { ./mate1.fastq }\n# [ mates2 ] => { ./mate2.fastq }\n# [ libType ] => { IU }\n# [ output ] => { ./results }\n# [ biasCorrect ] => { }\n# [ threads ] => { 6 }\n# [ gcSizeSamp ] => { 1 }\n# [ gcSpeedSamp ] => { 1 }\n# [ fldMean ] => { 200 }\n# [ fldSD ] => { 80 }\n# [ maxReadOcc ] => { 200 }\n# [ geneMap ] => { ./geneMap.tabular }\n# [ maxFragLen ] => { 1000 }\n# [ txpAggregationKey ] => { gene_id }\n# [ numBiasSamples ] => { 1000000 }\n# [ numFragSamples ] => { 10000 }\n# [ numGibbsSamples ] => { 0 }\n# [ numBootstraps ] => { 0 }\nLogs will be written to ./results/logs\n[2023-05-24 07:06:59.145] [jointLog] [info] parsing read library format\nthere is 1 lib\nLoading 32-bit quasi indexIndex contained 15 targets\nLoaded targets\n\n\n\nDone Quasi-Mapping \n\n[2023-05-24 07:06:59.290] [jointLog] [info] Loading Quasi index\n[2023-05-24 07:06:59.299] [jointLog] [info] done\n[2023-05-24 07:06:59.325] [jointLog] [info] Gathered fragment lengths from all threads\n[2023-05-24 07:06:59.325] [jointLog] [warning] Sailfish saw fewer then 10000 uniquely mapped reads so 200 will be used as the mean fragment length and 80 as the standard deviation for effective length correction\n[2023-05-24 07:06:59.326] [jointLog] [info] Estimating effective lengths\n[2023-05-24 07:06:59.338] [jointLog] [info] Computed 21 rich equivalence classes for further processing\n[2023-05-24 07:06:59.338] [jointLog] [info] Counted 10000 total reads in the equivalence classes \n[2023-05-24 07:06:59.338] [jointLog] [info] Starting optimizer:\n\n[2023-05-24 07:06:59.339] [jointLog] [info] Optimizing over 21 equivalence classes\n[2023-05-24 07:06:59.339] [jointLog] [info] iteration = 0 | max rel diff. = 14.873\n[2023-05-24 07:06:59.339] [jointLog] [info] iteration 50, recomputing effective lengths\n[2023-05-24 07:06:59.341] [jointLog] [info] iteration = 63 | max rel diff. = 0.00199953\n[2023-05-24 07:06:59.341] [jointLog] [info] Finished optimizer\n[2023-05-24 07:06:59.341] [jointLog] [info] writing output \n\n[2023-05-24 07:06:59.294] [stderrLog] [info] Loading Suffix Array \n[2023-05-24 07:06:59.295] [stderrLog] [info] Loading Position Hash\n[2023-05-24 07:06:59.297] [stderrLog] [info] Loading Transcript Info \n[2023-05-24 07:06:59.298] [stderrLog] [info] Loading Rank-Select Bit Array\n[2023-05-24 07:06:59.299] [stderrLog] [info] There were 15 set bits in the bit array\n[2023-05-24 07:06:59.299] [stderrLog] [info] Computing transcript lengths\n[2023-05-24 07:06:59.299] [stderrLog] [info] Waiting to finish loading hash\n[2023-05-24 07:06:59.299] [stderrLog] [info] Done loading index\nComputing gene-level abundance estimates\nThere were 3 transcripts mapping to 3 genes\nWARNING: couldn't find transcript named [NR_031764]; returning transcript  as it's own gene\n\ndone\nAggregating expressions to gene level . . . done\n", "job_stdout": "", "job_stderr": "", "stderr": "Version Info: This is the most recent version of Sailfish\nwriting log to ./index_dir/logs/sailfish_index.log\nRapMap Indexer\n\n[Step 1 of 4] : counting k-mers\nElapsed time: 0.00122103s\n\nReplaced 0 non-ATCG nucleotides\nClipped poly-A tails from 0 transcripts\nBuilding rank-select dictionary and saving to disk done\nElapsed time: 4.1409e-05s\nWriting sequence data to file . . . done\nElapsed time: 0.00012552s\n[info] Building 32-bit suffix array (length of generalized text is 28577)\nBuilding suffix array . . . success\nsaving to disk . . . done\nElapsed time: 0.00014899s\ndone\nElapsed time: 0.016068s\n\r\rprocessed 0 positions\nkhash had 18955 keys\nsaving hash to disk . . . done\nElapsed time: 0.00144833s\nVersion Info: This is the most recent version of Sailfish\n# sailfish (quasi-mapping-based) v0.9.2\n# [ program ] => sailfish \n# [ command ] => quant \n# [ index ] => { ./index_dir }\n# [ mates1 ] => { ./mate1.fastq }\n# [ mates2 ] => { ./mate2.fastq }\n# [ libType ] => { IU }\n# [ output ] => { ./results }\n# [ biasCorrect ] => { }\n# [ threads ] => { 6 }\n# [ gcSizeSamp ] => { 1 }\n# [ gcSpeedSamp ] => { 1 }\n# [ fldMean ] => { 200 }\n# [ fldSD ] => { 80 }\n# [ maxReadOcc ] => { 200 }\n# [ geneMap ] => { ./geneMap.tabular }\n# [ maxFragLen ] => { 1000 }\n# [ txpAggregationKey ] => { gene_id }\n# [ numBiasSamples ] => { 1000000 }\n# [ numFragSamples ] => { 10000 }\n# [ numGibbsSamples ] => { 0 }\n# [ numBootstraps ] => { 0 }\nLogs will be written to ./results/logs\n[2023-05-24 07:06:59.145] [jointLog] [info] parsing read library format\nthere is 1 lib\nLoading 32-bit quasi indexIndex contained 15 targets\nLoaded targets\n\n\n\nDone Quasi-Mapping \n\n[2023-05-24 07:06:59.290] [jointLog] [info] Loading Quasi index\n[2023-05-24 07:06:59.299] [jointLog] [info] done\n[2023-05-24 07:06:59.325] [jointLog] [info] Gathered fragment lengths from all threads\n[2023-05-24 07:06:59.325] [jointLog] [warning] Sailfish saw fewer then 10000 uniquely mapped reads so 200 will be used as the mean fragment length and 80 as the standard deviation for effective length correction\n[2023-05-24 07:06:59.326] [jointLog] [info] Estimating effective lengths\n[2023-05-24 07:06:59.338] [jointLog] [info] Computed 21 rich equivalence classes for further processing\n[2023-05-24 07:06:59.338] [jointLog] [info] Counted 10000 total reads in the equivalence classes \n[2023-05-24 07:06:59.338] [jointLog] [info] Starting optimizer:\n\n[2023-05-24 07:06:59.339] [jointLog] [info] Optimizing over 21 equivalence classes\n[2023-05-24 07:06:59.339] [jointLog] [info] iteration = 0 | max rel diff. = 14.873\n[2023-05-24 07:06:59.339] [jointLog] [info] iteration 50, recomputing effective lengths\n[2023-05-24 07:06:59.341] [jointLog] [info] iteration = 63 | max rel diff. = 0.00199953\n[2023-05-24 07:06:59.341] [jointLog] [info] Finished optimizer\n[2023-05-24 07:06:59.341] [jointLog] [info] writing output \n\n[2023-05-24 07:06:59.294] [stderrLog] [info] Loading Suffix Array \n[2023-05-24 07:06:59.295] [stderrLog] [info] Loading Position Hash\n[2023-05-24 07:06:59.297] [stderrLog] [info] Loading Transcript Info \n[2023-05-24 07:06:59.298] [stderrLog] [info] Loading Rank-Select Bit Array\n[2023-05-24 07:06:59.299] [stderrLog] [info] There were 15 set bits in the bit array\n[2023-05-24 07:06:59.299] [stderrLog] [info] Computing transcript lengths\n[2023-05-24 07:06:59.299] [stderrLog] [info] Waiting to finish loading hash\n[2023-05-24 07:06:59.299] [stderrLog] [info] Done loading index\nComputing gene-level abundance estimates\nThere were 3 transcripts mapping to 3 genes\nWARNING: couldn't find transcript named [NR_031764]; returning transcript  as it's own gene\n\ndone\nAggregating expressions to gene level . . . done\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:06:59", "plugin": "core", "name": "end_epoch", "raw_value": "1684912019.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:06:57", "plugin": "core", "name": "start_epoch", "raw_value": "1684912017.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "6", "plugin": "core", "name": "galaxy_slots", "raw_value": "6.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon/1.3.0+galaxy1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon", "tool_version": "1.3.0+galaxy1", "test_index": 0, "time_seconds": 54.170212507247925, "inputs": {"quant_type|refTranscriptSource|s_index|fasta": {"src": "hda", "id": "6635d85d1ee5c729"}, "quant_type|refTranscriptSource|TranscriptSource": "history", "quant_type|writeMappings": true, "quant_type|qtype": "reads"}, "job": {"model_class": "Job", "id": "b18eb16c49a4a172", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:40:27.324407", "create_time": "2023-05-24T06:39:55.239265", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon/1.3.0+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-p898h", "command_line": "mkdir ./index && mkdir ./output && salmon index -i ./index --kmerLen '31' --gencode --transcripts '/galaxy/server/database/objects/4/b/f/dataset_4bfb0141-2131-4472-9bd4-3e7cec901a72.dat' &&    ln -s /galaxy/server/database/objects/4/b/f/dataset_4bfb0141-2131-4472-9bd4-3e7cec901a72.dat ./single.fasta &&  salmon quant --index './index' --libType U --unmatedReads ./single.fasta --threads \"${GALAXY_SLOTS:-4}\"     --writeMappings=./output/samout.sam         --incompatPrior '0.0'       --biasSpeedSamp '5' --fldMax '1000' --fldMean '250' --fldSD '25' --forgettingFactor '0.65'  --maxReadOcc '100'     --numBiasSamples '2000000' --numAuxModelSamples '5000000' --numPreAuxModelSamples '5000'  --numGibbsSamples '0'  --numBootstraps '0'  --thinningFactor '16'  --sigDigits '3' --vbPrior '1e-05'   -o ./output   && samtools sort -@ ${GALAXY_SLOTS} --output-fmt=BAM -o ./output/bamout.bam ./output/samout.sam", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"biasSpeedSamp\": \"5\", \"bootstrapReproject\": false, \"dumpEq\": false, \"dumpEqWeights\": false, \"fldMax\": \"1000\", \"fldMean\": \"250\", \"fldSD\": \"25\", \"forgettingFactor\": \"0.65\", \"initUniform\": false, \"maxReadOcc\": \"100\", \"minAssignedFrags\": \"\", \"noBiasLengthThreshold\": false, \"noEffectiveLengthCorrection\": false, \"noFragLengthDist\": false, \"noGammaDraw\": false, \"noLengthCorrection\": false, \"numAuxModelSamples\": \"5000000\", \"numBiasSamples\": \"2000000\", \"numBootstraps\": \"0\", \"numGibbsSamples\": \"0\", \"numPreAuxModelSamples\": \"5000\", \"perTranscriptPrior\": false, \"rangeFactorizationBins\": \"0\", \"sigDigits\": \"3\", \"skipQuant\": false, \"thinningFactor\": \"16\", \"useEM\": false, \"vbPrior\": \"1e-05\", \"writeOrphanLinks\": false, \"writeUnmappedNames\": false}", "meta": "false", "incompatPrior": "\"0.0\"", "gcBias": "false", "seqBias": "false", "geneMap": null, "quant_type": "{\"__current_case__\": 0, \"consensusSlack\": \"0\", \"consistentHits\": false, \"discardOrphansQuasi\": false, \"dovetail\": false, \"input\": {\"single_or_paired\": {\"__current_case__\": 0, \"input_singles\": {\"values\": [{\"id\": 207, \"src\": \"hda\"}]}, \"single_or_paired_opts\": \"single\", \"strandedness\": \"U\"}}, \"qtype\": \"reads\", \"quasiCoverage\": \"\", \"recoverOrphans\": false, \"refTranscriptSource\": {\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 207, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}, \"type\": \"quasi\", \"validmap\": {\"__current_case__\": 1, \"validateMappings\": false}, \"writeMappings\": true}"}, "inputs": {"quant_type|refTranscriptSource|fasta": {"id": "6635d85d1ee5c729", "src": "hda", "uuid": "4bfb0141-2131-4472-9bd4-3e7cec901a72"}, "quant_type|input|input_singles": {"id": "6635d85d1ee5c729", "src": "hda", "uuid": "4bfb0141-2131-4472-9bd4-3e7cec901a72"}}, "outputs": {"output_quant": {"id": "9f48d02476cd9f8f", "src": "hda", "uuid": "9dc36405-c403-4a57-a8bb-65902976d5b1"}, "output_bam": {"id": "6154bc97c8fa2e99", "src": "hda", "uuid": "1dfd9519-4438-4ded-981f-5b42d5d5f27e"}}, "output_collections": {}, "tool_stdout": "Threads = 2\nVertex length = 31\nHash functions = 5\nFilter size = 1048576\nCapacity = 2\nFiles: \n./index/ref_k31_fixed.fa\n--------------------------------------------------------------------------------\nRound 0, 0:1048576\nPass\tFilling\tFiltering\n1\t0\t0\t\n2\t0\t0\nTrue junctions count = 14\nFalse junctions count = 18\nHash table size = 32\nCandidate marks count = 55\n--------------------------------------------------------------------------------\nReallocating bifurcations time: 0\nTrue marks count: 51\nEdges construction time: 0\n--------------------------------------------------------------------------------\nDistinct junctions = 14\n\nfor info, total work write each  : 2.331    total work inram from level 3 : 4.322  total work raw : 25.000 \nBitarray          105024  bits (100.00 %)   (array + ranks )\nfinal hash             0  bits (0.00 %) (nb in final hash 0)\n", "tool_stderr": "Version Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###\n[2023-05-24 06:40:11.300] [jLog] [warning] The salmon index is being built without any decoy sequences.  It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be provided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.\n[2023-05-24 06:40:11.301] [jLog] [info] building index\nout : ./index\n[2023-05-24 06:40:11.302] [puff::index::jointLog] [info] Running fixFasta\n\n[Step 1 of 4] : counting k-mers\n\n[2023-05-24 06:40:11.314] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides\n[2023-05-24 06:40:11.314] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcripts\nwrote 15 cleaned references\n[2023-05-24 06:40:11.336] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers\n[2023-05-24 06:40:11.339] [puff::index::jointLog] [info] ntHll estimated 54811 distinct k-mers, setting filter size to 2^20\nallowedIn: 12\nMax Junction ID: 70\nseen.size():569 kmerInfo.size():71\napproximateContigTotalLength: 17465\ncounters for complex kmers:\n(prec>1 & succ>1)=0 | (succ>1 & isStart)=0 | (prec>1 & isEnd)=0 | (isStart & isEnd)=0\ncontig count: 24 element count: 19592 complex nodes: 0\n# of ones in rank vector: 23\n[2023-05-24 06:40:11.426] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.\n[2023-05-24 06:40:11.427] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory ./index\nsize = 19592\n-----------------------------------------\n| Loading contigs | Time = 1.5447 ms\n-----------------------------------------\nsize = 19592\n-----------------------------------------\n| Loading contig boundaries | Time = 1.4334 ms\n-----------------------------------------\nNumber of ones: 23\nNumber of ones per inventory item: 512\nInventory entries filled: 1\n23\n[2023-05-24 06:40:11.430] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.\n[2023-05-24 06:40:11.430] [puff::index::jointLog] [info] contig count for validation: 23\n[2023-05-24 06:40:11.431] [puff::index::jointLog] [info] Total # of Contigs : 23\n[2023-05-24 06:40:11.431] [puff::index::jointLog] [info] Total # of numerical Contigs : 23\n[2023-05-24 06:40:11.432] [puff::index::jointLog] [info] Total # of contig vec entries: 36\n[2023-05-24 06:40:11.432] [puff::index::jointLog] [info] bits per offset entry 6\n[2023-05-24 06:40:11.432] [puff::index::jointLog] [info] Done constructing the contig vector. 24\n[2023-05-24 06:40:11.450] [puff::index::jointLog] [info] # segments = 23\n[2023-05-24 06:40:11.450] [puff::index::jointLog] [info] total length = 19592\n[2023-05-24 06:40:11.450] [puff::index::jointLog] [info] Reading the reference files ...\n[2023-05-24 06:40:11.466] [puff::index::jointLog] [info] positional integer width = 15\n[2023-05-24 06:40:11.466] [puff::index::jointLog] [info] seqSize = 19592\n[2023-05-24 06:40:11.466] [puff::index::jointLog] [info] rankSize = 19592\n[2023-05-24 06:40:11.466] [puff::index::jointLog] [info] edgeVecSize = 0\n[2023-05-24 06:40:11.466] [puff::index::jointLog] [info] num keys = 18902\n\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   ela\n..\n0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\n[2023-05-24 06:40:11.594] [puff::index::jointLog] [info] mphf size = 0.0125198 MB\n[2023-05-24 06:40:11.594] [puff::index::jointLog] [info] chunk size = 9796\n[2023-05-24 06:40:11.594] [puff::index::jointLog] [info] chunk 0 = [0, 9796)\n[2023-05-24 06:40:11.594] [puff::index::jointLog] [info] chunk 1 = [9796, 19562)\n[2023-05-24 06:40:11.595] [puff::index::jointLog] [info] finished populating pos vector\n[2023-05-24 06:40:11.595] [puff::index::jointLog] [info] writing index components\n[2023-05-24 06:40:11.619] [puff::index::jointLog] [info] finished writing dense pufferfish index\n[2023-05-24 06:40:11.630] [jLog] [info] done building index\nVersion Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###\n### salmon (selective-alignment-based) v1.3.0\n### [ program ] => salmon \n### [ command ] => quant \n### [ index ] => { ./index }\n### [ libType ] => { U }\n### [ unmatedReads ] => { ./single.fasta }\n### [ threads ] => { 6 }\n### [ writeMappings ] => { ./output/samout.sam }\n### [ incompatPrior ] => { 0.0 }\n### [ biasSpeedSamp ] => { 5 }\n### [ fldMax ] => { 1000 }\n### [ fldMean ] => { 250 }\n### [ fldSD ] => { 25 }\n### [ forgettingFactor ] => { 0.65 }\n### [ maxReadOcc ] => { 100 }\n### [ numBiasSamples ] => { 2000000 }\n### [ numAuxModelSamples ] => { 5000000 }\n### [ numPreAuxModelSamples ] => { 5000 }\n### [ numGibbsSamples ] => { 0 }\n### [ numBootstraps ] => { 0 }\n### [ thinningFactor ] => { 16 }\n### [ sigDigits ] => { 3 }\n### [ vbPrior ] => { 1e-05 }\n### [ output ] => { ./output }\nLogs will be written to ./output/logs\n[2023-05-24 06:40:12.494] [jointLog] [info] setting maxHashResizeThreads to 6\n[2023-05-24 06:40:12.494] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.\n[2023-05-24 06:40:12.494] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65\n[2023-05-24 06:40:12.494] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.\n[2023-05-24 06:40:12.494] [jointLog] [info] parsing read library format\n[2023-05-24 06:40:12.494] [jointLog] [info] There is 1 library.\n-----------------------------------------\n| Loading contig table | Time = 1.2911 ms\n-----------------------------------------\nsize = 24\n-----------------------------------------\n| Loading contig offsets | Time = 2.4995 ms\n-----------------------------------------\n-----------------------------------------\n| Loading reference lengths | Time = 774.8 us\n-----------------------------------------\n-----------------------------------------\n| Loading mphf table | Time = 1.4553 ms\n-----------------------------------------\nsize = 19592\nNumber of ones: 23\nNumber of ones per inventory item: 512\nInventory entries filled: 1\n-----------------------------------------\n| Loading contig boundaries | Time = 1.692 ms\n-----------------------------------------\nsize = 19592\n-----------------------------------------\n| Loading sequence | Time = 1.2592 ms\n-----------------------------------------\nsize = 18902\n[2023-05-24 06:40:12.658] [jointLog] [info] Loading pufferfish index\n[2023-05-24 06:40:12.660] [jointLog] [info] Loading dense pufferfish index.\n-----------------------------------------\n| Loading positions | Time = 2.7218 ms\n-----------------------------------------\nsize = 28562\n-----------------------------------------\n| Loading reference sequence | Time = 1.8929 ms\n-----------------------------------------\n-----------------------------------------\n| Loading reference accumulative lengths | Time = 1.2291 ms\n-----------------------------------------\n[2023-05-24 06:40:12.678] [jointLog] [info] done\n[2023-05-24 06:40:12.678] [jointLog] [info] Index contained 15 targets\n[2023-05-24 06:40:12.678] [jointLog] [info] Number of decoys : 0\n\n\n\n\n\n\n\n\n\n\n\n\n[2023-05-24 06:40:12.728] [jointLog] [info] Computed 15 rich equivalence classes for further processing\n[2023-05-24 06:40:12.728] [jointLog] [info] Counted 15 total reads in the equivalence classes \n[2023-05-24 06:40:12.729] [jointLog] [info] Number of mappings discarded because of alignment score : 5\n[2023-05-24 06:40:12.729] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 0\n[2023-05-24 06:40:12.729] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0\n[2023-05-24 06:40:12.729] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0\n[2023-05-24 06:40:12.729] [jointLog] [warning] Only 15 fragments were mapped, but the number of burn-in fragments was set to 5000000.\nThe effective lengths have been computed using the observed mappings.\n\n[2023-05-24 06:40:12.729] [jointLog] [info] Mapping rate = 100%\n\n[2023-05-24 06:40:12.729] [jointLog] [info] finished quantifyLibrary()\n[2023-05-24 06:40:12.736] [jointLog] [info] Starting optimizer\n[2023-05-24 06:40:12.736] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate\n[2023-05-24 06:40:12.736] [jointLog] [info] iteration = 0 | max rel diff. = 0\n[2023-05-24 06:40:12.737] [jointLog] [info] iteration = 100 | max rel diff. = 0\n[2023-05-24 06:40:12.737] [jointLog] [info] Finished optimizer\n[2023-05-24 06:40:12.737] [jointLog] [info] writing output \n\n[2023-05-24 06:40:12.745] [jointLog] [warning] NOTE: Read Lib [[ ./single.fasta ]] :\n\nDetected a *potential* strand bias > 1% in an unstranded protocol check the file: ./output/lib_format_counts.json for details\n\n", "job_stdout": "", "job_stderr": "", "stderr": "Version Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###\n[2023-05-24 06:40:11.300] [jLog] [warning] The salmon index is being built without any decoy sequences.  It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be provided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.\n[2023-05-24 06:40:11.301] [jLog] [info] building index\nout : ./index\n[2023-05-24 06:40:11.302] [puff::index::jointLog] [info] Running fixFasta\n\n[Step 1 of 4] : counting k-mers\n\n[2023-05-24 06:40:11.314] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides\n[2023-05-24 06:40:11.314] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcripts\nwrote 15 cleaned references\n[2023-05-24 06:40:11.336] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers\n[2023-05-24 06:40:11.339] [puff::index::jointLog] [info] ntHll estimated 54811 distinct k-mers, setting filter size to 2^20\nallowedIn: 12\nMax Junction ID: 70\nseen.size():569 kmerInfo.size():71\napproximateContigTotalLength: 17465\ncounters for complex kmers:\n(prec>1 & succ>1)=0 | (succ>1 & isStart)=0 | (prec>1 & isEnd)=0 | (isStart & isEnd)=0\ncontig count: 24 element count: 19592 complex nodes: 0\n# of ones in rank vector: 23\n[2023-05-24 06:40:11.426] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.\n[2023-05-24 06:40:11.427] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory ./index\nsize = 19592\n-----------------------------------------\n| Loading contigs | Time = 1.5447 ms\n-----------------------------------------\nsize = 19592\n-----------------------------------------\n| Loading contig boundaries | Time = 1.4334 ms\n-----------------------------------------\nNumber of ones: 23\nNumber of ones per inventory item: 512\nInventory entries filled: 1\n23\n[2023-05-24 06:40:11.430] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.\n[2023-05-24 06:40:11.430] [puff::index::jointLog] [info] contig count for validation: 23\n[2023-05-24 06:40:11.431] [puff::index::jointLog] [info] Total # of Contigs : 23\n[2023-05-24 06:40:11.431] [puff::index::jointLog] [info] Total # of numerical Contigs : 23\n[2023-05-24 06:40:11.432] [puff::index::jointLog] [info] Total # of contig vec entries: 36\n[2023-05-24 06:40:11.432] [puff::index::jointLog] [info] bits per offset entry 6\n[2023-05-24 06:40:11.432] [puff::index::jointLog] [info] Done constructing the contig vector. 24\n[2023-05-24 06:40:11.450] [puff::index::jointLog] [info] # segments = 23\n[2023-05-24 06:40:11.450] [puff::index::jointLog] [info] total length = 19592\n[2023-05-24 06:40:11.450] [puff::index::jointLog] [info] Reading the reference files ...\n[2023-05-24 06:40:11.466] [puff::index::jointLog] [info] positional integer width = 15\n[2023-05-24 06:40:11.466] [puff::index::jointLog] [info] seqSize = 19592\n[2023-05-24 06:40:11.466] [puff::index::jointLog] [info] rankSize = 19592\n[2023-05-24 06:40:11.466] [puff::index::jointLog] [info] edgeVecSize = 0\n[2023-05-24 06:40:11.466] [puff::index::jointLog] [info] num keys = 18902\n\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   ela\n..\n0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\n[2023-05-24 06:40:11.594] [puff::index::jointLog] [info] mphf size = 0.0125198 MB\n[2023-05-24 06:40:11.594] [puff::index::jointLog] [info] chunk size = 9796\n[2023-05-24 06:40:11.594] [puff::index::jointLog] [info] chunk 0 = [0, 9796)\n[2023-05-24 06:40:11.594] [puff::index::jointLog] [info] chunk 1 = [9796, 19562)\n[2023-05-24 06:40:11.595] [puff::index::jointLog] [info] finished populating pos vector\n[2023-05-24 06:40:11.595] [puff::index::jointLog] [info] writing index components\n[2023-05-24 06:40:11.619] [puff::index::jointLog] [info] finished writing dense pufferfish index\n[2023-05-24 06:40:11.630] [jLog] [info] done building index\nVersion Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###\n### salmon (selective-alignment-based) v1.3.0\n### [ program ] => salmon \n### [ command ] => quant \n### [ index ] => { ./index }\n### [ libType ] => { U }\n### [ unmatedReads ] => { ./single.fasta }\n### [ threads ] => { 6 }\n### [ writeMappings ] => { ./output/samout.sam }\n### [ incompatPrior ] => { 0.0 }\n### [ biasSpeedSamp ] => { 5 }\n### [ fldMax ] => { 1000 }\n### [ fldMean ] => { 250 }\n### [ fldSD ] => { 25 }\n### [ forgettingFactor ] => { 0.65 }\n### [ maxReadOcc ] => { 100 }\n### [ numBiasSamples ] => { 2000000 }\n### [ numAuxModelSamples ] => { 5000000 }\n### [ numPreAuxModelSamples ] => { 5000 }\n### [ numGibbsSamples ] => { 0 }\n### [ numBootstraps ] => { 0 }\n### [ thinningFactor ] => { 16 }\n### [ sigDigits ] => { 3 }\n### [ vbPrior ] => { 1e-05 }\n### [ output ] => { ./output }\nLogs will be written to ./output/logs\n[2023-05-24 06:40:12.494] [jointLog] [info] setting maxHashResizeThreads to 6\n[2023-05-24 06:40:12.494] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.\n[2023-05-24 06:40:12.494] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65\n[2023-05-24 06:40:12.494] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.\n[2023-05-24 06:40:12.494] [jointLog] [info] parsing read library format\n[2023-05-24 06:40:12.494] [jointLog] [info] There is 1 library.\n-----------------------------------------\n| Loading contig table | Time = 1.2911 ms\n-----------------------------------------\nsize = 24\n-----------------------------------------\n| Loading contig offsets | Time = 2.4995 ms\n-----------------------------------------\n-----------------------------------------\n| Loading reference lengths | Time = 774.8 us\n-----------------------------------------\n-----------------------------------------\n| Loading mphf table | Time = 1.4553 ms\n-----------------------------------------\nsize = 19592\nNumber of ones: 23\nNumber of ones per inventory item: 512\nInventory entries filled: 1\n-----------------------------------------\n| Loading contig boundaries | Time = 1.692 ms\n-----------------------------------------\nsize = 19592\n-----------------------------------------\n| Loading sequence | Time = 1.2592 ms\n-----------------------------------------\nsize = 18902\n[2023-05-24 06:40:12.658] [jointLog] [info] Loading pufferfish index\n[2023-05-24 06:40:12.660] [jointLog] [info] Loading dense pufferfish index.\n-----------------------------------------\n| Loading positions | Time = 2.7218 ms\n-----------------------------------------\nsize = 28562\n-----------------------------------------\n| Loading reference sequence | Time = 1.8929 ms\n-----------------------------------------\n-----------------------------------------\n| Loading reference accumulative lengths | Time = 1.2291 ms\n-----------------------------------------\n[2023-05-24 06:40:12.678] [jointLog] [info] done\n[2023-05-24 06:40:12.678] [jointLog] [info] Index contained 15 targets\n[2023-05-24 06:40:12.678] [jointLog] [info] Number of decoys : 0\n\n\n\n\n\n\n\n\n\n\n\n\n[2023-05-24 06:40:12.728] [jointLog] [info] Computed 15 rich equivalence classes for further processing\n[2023-05-24 06:40:12.728] [jointLog] [info] Counted 15 total reads in the equivalence classes \n[2023-05-24 06:40:12.729] [jointLog] [info] Number of mappings discarded because of alignment score : 5\n[2023-05-24 06:40:12.729] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 0\n[2023-05-24 06:40:12.729] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0\n[2023-05-24 06:40:12.729] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0\n[2023-05-24 06:40:12.729] [jointLog] [warning] Only 15 fragments were mapped, but the number of burn-in fragments was set to 5000000.\nThe effective lengths have been computed using the observed mappings.\n\n[2023-05-24 06:40:12.729] [jointLog] [info] Mapping rate = 100%\n\n[2023-05-24 06:40:12.729] [jointLog] [info] finished quantifyLibrary()\n[2023-05-24 06:40:12.736] [jointLog] [info] Starting optimizer\n[2023-05-24 06:40:12.736] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate\n[2023-05-24 06:40:12.736] [jointLog] [info] iteration = 0 | max rel diff. = 0\n[2023-05-24 06:40:12.737] [jointLog] [info] iteration = 100 | max rel diff. = 0\n[2023-05-24 06:40:12.737] [jointLog] [info] Finished optimizer\n[2023-05-24 06:40:12.737] [jointLog] [info] writing output \n\n[2023-05-24 06:40:12.745] [jointLog] [warning] NOTE: Read Lib [[ ./single.fasta ]] :\n\nDetected a *potential* strand bias > 1% in an unstranded protocol check the file: ./output/lib_format_counts.json for details\n\n", "stdout": "Threads = 2\nVertex length = 31\nHash functions = 5\nFilter size = 1048576\nCapacity = 2\nFiles: \n./index/ref_k31_fixed.fa\n--------------------------------------------------------------------------------\nRound 0, 0:1048576\nPass\tFilling\tFiltering\n1\t0\t0\t\n2\t0\t0\nTrue junctions count = 14\nFalse junctions count = 18\nHash table size = 32\nCandidate marks count = 55\n--------------------------------------------------------------------------------\nReallocating bifurcations time: 0\nTrue marks count: 51\nEdges construction time: 0\n--------------------------------------------------------------------------------\nDistinct junctions = 14\n\nfor info, total work write each  : 2.331    total work inram from level 3 : 4.322  total work raw : 25.000 \nBitarray          105024  bits (100.00 %)   (array + ranks )\nfinal hash             0  bits (0.00 %) (nb in final hash 0)\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:40:13", "plugin": "core", "name": "end_epoch", "raw_value": "1684910413.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:40:11", "plugin": "core", "name": "start_epoch", "raw_value": "1684910411.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "6", "plugin": "core", "name": "galaxy_slots", "raw_value": "6.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon/1.3.0+galaxy1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon", "tool_version": "1.3.0+galaxy1", "test_index": 1, "time_seconds": 33.5865421295166, "inputs": {"quant_type|refTranscriptSource|s_index|fasta": {"src": "hda", "id": "1b0cbf641525a7db"}, "quant_type|refTranscriptSource|TranscriptSource": "history", "quant_type|qtype": "reads"}, "job": {"model_class": "Job", "id": "382738fe55c45674", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:40:41.422555", "create_time": "2023-05-24T06:40:27.610216", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon/1.3.0+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-t49wz", "command_line": "mkdir ./index && mkdir ./output && salmon index -i ./index --kmerLen '31' --gencode --transcripts '/galaxy/server/database/objects/4/d/7/dataset_4d7ec5bb-2f60-4180-8673-710ab43372a9.dat' &&    ln -s /galaxy/server/database/objects/4/d/7/dataset_4d7ec5bb-2f60-4180-8673-710ab43372a9.dat ./single.fasta &&  salmon quant --index './index' --libType U --unmatedReads ./single.fasta --threads \"${GALAXY_SLOTS:-4}\"              --incompatPrior '0.0'       --biasSpeedSamp '5' --fldMax '1000' --fldMean '250' --fldSD '25' --forgettingFactor '0.65'  --maxReadOcc '100'     --numBiasSamples '2000000' --numAuxModelSamples '5000000' --numPreAuxModelSamples '5000'  --numGibbsSamples '0'  --numBootstraps '0'  --thinningFactor '16'  --sigDigits '3' --vbPrior '1e-05'   -o ./output", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"biasSpeedSamp\": \"5\", \"bootstrapReproject\": false, \"dumpEq\": false, \"dumpEqWeights\": false, \"fldMax\": \"1000\", \"fldMean\": \"250\", \"fldSD\": \"25\", \"forgettingFactor\": \"0.65\", \"initUniform\": false, \"maxReadOcc\": \"100\", \"minAssignedFrags\": \"\", \"noBiasLengthThreshold\": false, \"noEffectiveLengthCorrection\": false, \"noFragLengthDist\": false, \"noGammaDraw\": false, \"noLengthCorrection\": false, \"numAuxModelSamples\": \"5000000\", \"numBiasSamples\": \"2000000\", \"numBootstraps\": \"0\", \"numGibbsSamples\": \"0\", \"numPreAuxModelSamples\": \"5000\", \"perTranscriptPrior\": false, \"rangeFactorizationBins\": \"0\", \"sigDigits\": \"3\", \"skipQuant\": false, \"thinningFactor\": \"16\", \"useEM\": false, \"vbPrior\": \"1e-05\", \"writeOrphanLinks\": false, \"writeUnmappedNames\": false}", "meta": "false", "incompatPrior": "\"0.0\"", "gcBias": "false", "seqBias": "false", "geneMap": null, "quant_type": "{\"__current_case__\": 0, \"consensusSlack\": \"0\", \"consistentHits\": false, \"discardOrphansQuasi\": false, \"dovetail\": false, \"input\": {\"single_or_paired\": {\"__current_case__\": 0, \"input_singles\": {\"values\": [{\"id\": 211, \"src\": \"hda\"}]}, \"single_or_paired_opts\": \"single\", \"strandedness\": \"U\"}}, \"qtype\": \"reads\", \"quasiCoverage\": \"\", \"recoverOrphans\": false, \"refTranscriptSource\": {\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 211, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}, \"type\": \"quasi\", \"validmap\": {\"__current_case__\": 1, \"validateMappings\": false}, \"writeMappings\": false}"}, "inputs": {"quant_type|refTranscriptSource|fasta": {"id": "1b0cbf641525a7db", "src": "hda", "uuid": "4d7ec5bb-2f60-4180-8673-710ab43372a9"}, "quant_type|input|input_singles": {"id": "1b0cbf641525a7db", "src": "hda", "uuid": "4d7ec5bb-2f60-4180-8673-710ab43372a9"}}, "outputs": {"output_quant": {"id": "2ba01a76e3cb81f0", "src": "hda", "uuid": "bb7e2d48-321b-457f-bc82-d0280b929297"}}, "output_collections": {}, "tool_stdout": "Threads = 2\nVertex length = 31\nHash functions = 5\nFilter size = 1048576\nCapacity = 2\nFiles: \n./index/ref_k31_fixed.fa\n--------------------------------------------------------------------------------\nRound 0, 0:1048576\nPass\tFilling\tFiltering\n1\t0\t0\t\n2\t0\t0\nTrue junctions count = 14\nFalse junctions count = 19\nHash table size = 33\nCandidate marks count = 56\n--------------------------------------------------------------------------------\nReallocating bifurcations time: 0\nTrue marks count: 51\nEdges construction time: 0\n--------------------------------------------------------------------------------\nDistinct junctions = 14\n\nfor info, total work write each  : 2.331    total work inram from level 3 : 4.322  total work raw : 25.000 \nBitarray          105024  bits (100.00 %)   (array + ranks )\nfinal hash             0  bits (0.00 %) (nb in final hash 0)\n", "tool_stderr": "Version Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###\n[2023-05-24 06:40:29.730] [jLog] [warning] The salmon index is being built without any decoy sequences.  It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be provided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.\n[2023-05-24 06:40:29.730] [jLog] [info] building index\nout : ./index\n[2023-05-24 06:40:29.731] [puff::index::jointLog] [info] Running fixFasta\n\n[Step 1 of 4] : counting k-mers\n\n[2023-05-24 06:40:29.743] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides\n[2023-05-24 06:40:29.744] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcripts\nwrote 15 cleaned references\n[2023-05-24 06:40:29.765] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers\n[2023-05-24 06:40:29.767] [puff::index::jointLog] [info] ntHll estimated 54811 distinct k-mers, setting filter size to 2^20\nallowedIn: 12\nMax Junction ID: 70\nseen.size():569 kmerInfo.size():71\napproximateContigTotalLength: 17465\ncounters for complex kmers:\n(prec>1 & succ>1)=0 | (succ>1 & isStart)=0 | (prec>1 & isEnd)=0 | (isStart & isEnd)=0\ncontig count: 24 element count: 19592 complex nodes: 0\n# of ones in rank vector: 23\n[2023-05-24 06:40:29.848] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.\n[2023-05-24 06:40:29.848] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory ./index\nsize = 19592\n-----------------------------------------\n| Loading contigs | Time = 1.475 ms\n-----------------------------------------\nsize = 19592\n-----------------------------------------\n| Loading contig boundaries | Time = 1.0375 ms\n-----------------------------------------\nNumber of ones: 23\nNumber of ones per inventory item: 512\nInventory entries filled: 1\n23\n[2023-05-24 06:40:29.851] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.\n[2023-05-24 06:40:29.851] [puff::index::jointLog] [info] contig count for validation: 23\n[2023-05-24 06:40:29.852] [puff::index::jointLog] [info] Total # of Contigs : 23\n[2023-05-24 06:40:29.852] [puff::index::jointLog] [info] Total # of numerical Contigs : 23\n[2023-05-24 06:40:29.852] [puff::index::jointLog] [info] Total # of contig vec entries: 36\n[2023-05-24 06:40:29.852] [puff::index::jointLog] [info] bits per offset entry 6\n[2023-05-24 06:40:29.852] [puff::index::jointLog] [info] Done constructing the contig vector. 24\n[2023-05-24 06:40:29.871] [puff::index::jointLog] [info] # segments = 23\n[2023-05-24 06:40:29.871] [puff::index::jointLog] [info] total length = 19592\n[2023-05-24 06:40:29.871] [puff::index::jointLog] [info] Reading the reference files ...\n[2023-05-24 06:40:29.888] [puff::index::jointLog] [info] positional integer width = 15\n[2023-05-24 06:40:29.888] [puff::index::jointLog] [info] seqSize = 19592\n[2023-05-24 06:40:29.888] [puff::index::jointLog] [info] rankSize = 19592\n[2023-05-24 06:40:29.888] [puff::index::jointLog] [info] edgeVecSize = 0\n[2023-05-24 06:40:29.888] [puff::index::jointLog] [info] num keys = 18902\n\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elap\n..\n  elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\n[2023-05-24 06:40:30.021] [puff::index::jointLog] [info] mphf size = 0.0125198 MB\n[2023-05-24 06:40:30.021] [puff::index::jointLog] [info] chunk size = 9796\n[2023-05-24 06:40:30.022] [puff::index::jointLog] [info] chunk 0 = [0, 9796)\n[2023-05-24 06:40:30.022] [puff::index::jointLog] [info] chunk 1 = [9796, 19562)\n[2023-05-24 06:40:30.023] [puff::index::jointLog] [info] finished populating pos vector\n[2023-05-24 06:40:30.023] [puff::index::jointLog] [info] writing index components\n[2023-05-24 06:40:30.045] [puff::index::jointLog] [info] finished writing dense pufferfish index\n[2023-05-24 06:40:30.056] [jLog] [info] done building index\nVersion Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###\n### salmon (selective-alignment-based) v1.3.0\n### [ program ] => salmon \n### [ command ] => quant \n### [ index ] => { ./index }\n### [ libType ] => { U }\n### [ unmatedReads ] => { ./single.fasta }\n### [ threads ] => { 6 }\n### [ incompatPrior ] => { 0.0 }\n### [ biasSpeedSamp ] => { 5 }\n### [ fldMax ] => { 1000 }\n### [ fldMean ] => { 250 }\n### [ fldSD ] => { 25 }\n### [ forgettingFactor ] => { 0.65 }\n### [ maxReadOcc ] => { 100 }\n### [ numBiasSamples ] => { 2000000 }\n### [ numAuxModelSamples ] => { 5000000 }\n### [ numPreAuxModelSamples ] => { 5000 }\n### [ numGibbsSamples ] => { 0 }\n### [ numBootstraps ] => { 0 }\n### [ thinningFactor ] => { 16 }\n### [ sigDigits ] => { 3 }\n### [ vbPrior ] => { 1e-05 }\n### [ output ] => { ./output }\nLogs will be written to ./output/logs\n[2023-05-24 06:40:30.146] [jointLog] [info] setting maxHashResizeThreads to 6\n[2023-05-24 06:40:30.146] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.\n[2023-05-24 06:40:30.146] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65\n[2023-05-24 06:40:30.146] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.\n[2023-05-24 06:40:30.146] [jointLog] [info] parsing read library format\n[2023-05-24 06:40:30.146] [jointLog] [info] There is 1 library.\n-----------------------------------------\n| Loading contig table | Time = 1.2923 ms\n-----------------------------------------\nsize = 24\n-----------------------------------------\n| Loading contig offsets | Time = 2.9298 ms\n-----------------------------------------\n-----------------------------------------\n| Loading reference lengths | Time = 1.0144 ms\n-----------------------------------------\n-----------------------------------------\n| Loading mphf table | Time = 1.8699 ms\n-----------------------------------------\nsize = 19592\nNumber of ones: 23\nNumber of ones per inventory item: 512\nInventory entries filled: 1\n-----------------------------------------\n| Loading contig boundaries | Time = 1.6264 ms\n-----------------------------------------\n[2023-05-24 06:40:30.213] [jointLog] [info] Loading pufferfish index\n[2023-05-24 06:40:30.215] [jointLog] [info] Loading dense pufferfish index.\nsize = 19592\n-----------------------------------------\n| Loading sequence | Time = 1.5756 ms\n-----------------------------------------\nsize = 18902\n-----------------------------------------\n| Loading positions | Time = 3.1824 ms\n-----------------------------------------\nsize = 28562\n-----------------------------------------\n| Loading reference sequence | Time = 1.9105 ms\n-----------------------------------------\n-----------------------------------------\n| Loading reference accumulative lengths | Time = 1.2136 ms\n-----------------------------------------\n[2023-05-24 06:40:30.236] [jointLog] [info] done\n[2023-05-24 06:40:30.236] [jointLog] [info] Index contained 15 targets\n[2023-05-24 06:40:30.236] [jointLog] [info] Number of decoys : 0\n\n\n\n\n\n\n\n\n\n\n\n\n[2023-05-24 06:40:30.297] [jointLog] [info] Computed 15 rich equivalence classes for further processing\n[2023-05-24 06:40:30.297] [jointLog] [info] Counted 15 total reads in the equivalence classes \n[2023-05-24 06:40:30.299] [jointLog] [info] Number of mappings discarded because of alignment score : 5\n[2023-05-24 06:40:30.299] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 0\n[2023-05-24 06:40:30.299] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0\n[2023-05-24 06:40:30.299] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0\n[2023-05-24 06:40:30.299] [jointLog] [warning] Only 15 fragments were mapped, but the number of burn-in fragments was set to 5000000.\nThe effective lengths have been computed using the observed mappings.\n\n[2023-05-24 06:40:30.299] [jointLog] [info] Mapping rate = 100%\n\n[2023-05-24 06:40:30.299] [jointLog] [info] finished quantifyLibrary()\n[2023-05-24 06:40:30.309] [jointLog] [info] Starting optimizer\n[2023-05-24 06:40:30.310] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate\n[2023-05-24 06:40:30.310] [jointLog] [info] iteration = 0 | max rel diff. = 0\n[2023-05-24 06:40:30.311] [jointLog] [info] iteration = 100 | max rel diff. = 0\n[2023-05-24 06:40:30.311] [jointLog] [info] Finished optimizer\n[2023-05-24 06:40:30.311] [jointLog] [info] writing output \n\n[2023-05-24 06:40:30.320] [jointLog] [warning] NOTE: Read Lib [[ ./single.fasta ]] :\n\nDetected a *potential* strand bias > 1% in an unstranded protocol check the file: ./output/lib_format_counts.json for details\n\n", "job_stdout": "", "job_stderr": "", "stderr": "Version Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###\n[2023-05-24 06:40:29.730] [jLog] [warning] The salmon index is being built without any decoy sequences.  It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be provided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.\n[2023-05-24 06:40:29.730] [jLog] [info] building index\nout : ./index\n[2023-05-24 06:40:29.731] [puff::index::jointLog] [info] Running fixFasta\n\n[Step 1 of 4] : counting k-mers\n\n[2023-05-24 06:40:29.743] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides\n[2023-05-24 06:40:29.744] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcripts\nwrote 15 cleaned references\n[2023-05-24 06:40:29.765] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers\n[2023-05-24 06:40:29.767] [puff::index::jointLog] [info] ntHll estimated 54811 distinct k-mers, setting filter size to 2^20\nallowedIn: 12\nMax Junction ID: 70\nseen.size():569 kmerInfo.size():71\napproximateContigTotalLength: 17465\ncounters for complex kmers:\n(prec>1 & succ>1)=0 | (succ>1 & isStart)=0 | (prec>1 & isEnd)=0 | (isStart & isEnd)=0\ncontig count: 24 element count: 19592 complex nodes: 0\n# of ones in rank vector: 23\n[2023-05-24 06:40:29.848] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.\n[2023-05-24 06:40:29.848] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory ./index\nsize = 19592\n-----------------------------------------\n| Loading contigs | Time = 1.475 ms\n-----------------------------------------\nsize = 19592\n-----------------------------------------\n| Loading contig boundaries | Time = 1.0375 ms\n-----------------------------------------\nNumber of ones: 23\nNumber of ones per inventory item: 512\nInventory entries filled: 1\n23\n[2023-05-24 06:40:29.851] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.\n[2023-05-24 06:40:29.851] [puff::index::jointLog] [info] contig count for validation: 23\n[2023-05-24 06:40:29.852] [puff::index::jointLog] [info] Total # of Contigs : 23\n[2023-05-24 06:40:29.852] [puff::index::jointLog] [info] Total # of numerical Contigs : 23\n[2023-05-24 06:40:29.852] [puff::index::jointLog] [info] Total # of contig vec entries: 36\n[2023-05-24 06:40:29.852] [puff::index::jointLog] [info] bits per offset entry 6\n[2023-05-24 06:40:29.852] [puff::index::jointLog] [info] Done constructing the contig vector. 24\n[2023-05-24 06:40:29.871] [puff::index::jointLog] [info] # segments = 23\n[2023-05-24 06:40:29.871] [puff::index::jointLog] [info] total length = 19592\n[2023-05-24 06:40:29.871] [puff::index::jointLog] [info] Reading the reference files ...\n[2023-05-24 06:40:29.888] [puff::index::jointLog] [info] positional integer width = 15\n[2023-05-24 06:40:29.888] [puff::index::jointLog] [info] seqSize = 19592\n[2023-05-24 06:40:29.888] [puff::index::jointLog] [info] rankSize = 19592\n[2023-05-24 06:40:29.888] [puff::index::jointLog] [info] edgeVecSize = 0\n[2023-05-24 06:40:29.888] [puff::index::jointLog] [info] num keys = 18902\n\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elap\n..\n  elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\n[2023-05-24 06:40:30.021] [puff::index::jointLog] [info] mphf size = 0.0125198 MB\n[2023-05-24 06:40:30.021] [puff::index::jointLog] [info] chunk size = 9796\n[2023-05-24 06:40:30.022] [puff::index::jointLog] [info] chunk 0 = [0, 9796)\n[2023-05-24 06:40:30.022] [puff::index::jointLog] [info] chunk 1 = [9796, 19562)\n[2023-05-24 06:40:30.023] [puff::index::jointLog] [info] finished populating pos vector\n[2023-05-24 06:40:30.023] [puff::index::jointLog] [info] writing index components\n[2023-05-24 06:40:30.045] [puff::index::jointLog] [info] finished writing dense pufferfish index\n[2023-05-24 06:40:30.056] [jLog] [info] done building index\nVersion Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###\n### salmon (selective-alignment-based) v1.3.0\n### [ program ] => salmon \n### [ command ] => quant \n### [ index ] => { ./index }\n### [ libType ] => { U }\n### [ unmatedReads ] => { ./single.fasta }\n### [ threads ] => { 6 }\n### [ incompatPrior ] => { 0.0 }\n### [ biasSpeedSamp ] => { 5 }\n### [ fldMax ] => { 1000 }\n### [ fldMean ] => { 250 }\n### [ fldSD ] => { 25 }\n### [ forgettingFactor ] => { 0.65 }\n### [ maxReadOcc ] => { 100 }\n### [ numBiasSamples ] => { 2000000 }\n### [ numAuxModelSamples ] => { 5000000 }\n### [ numPreAuxModelSamples ] => { 5000 }\n### [ numGibbsSamples ] => { 0 }\n### [ numBootstraps ] => { 0 }\n### [ thinningFactor ] => { 16 }\n### [ sigDigits ] => { 3 }\n### [ vbPrior ] => { 1e-05 }\n### [ output ] => { ./output }\nLogs will be written to ./output/logs\n[2023-05-24 06:40:30.146] [jointLog] [info] setting maxHashResizeThreads to 6\n[2023-05-24 06:40:30.146] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.\n[2023-05-24 06:40:30.146] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65\n[2023-05-24 06:40:30.146] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.\n[2023-05-24 06:40:30.146] [jointLog] [info] parsing read library format\n[2023-05-24 06:40:30.146] [jointLog] [info] There is 1 library.\n-----------------------------------------\n| Loading contig table | Time = 1.2923 ms\n-----------------------------------------\nsize = 24\n-----------------------------------------\n| Loading contig offsets | Time = 2.9298 ms\n-----------------------------------------\n-----------------------------------------\n| Loading reference lengths | Time = 1.0144 ms\n-----------------------------------------\n-----------------------------------------\n| Loading mphf table | Time = 1.8699 ms\n-----------------------------------------\nsize = 19592\nNumber of ones: 23\nNumber of ones per inventory item: 512\nInventory entries filled: 1\n-----------------------------------------\n| Loading contig boundaries | Time = 1.6264 ms\n-----------------------------------------\n[2023-05-24 06:40:30.213] [jointLog] [info] Loading pufferfish index\n[2023-05-24 06:40:30.215] [jointLog] [info] Loading dense pufferfish index.\nsize = 19592\n-----------------------------------------\n| Loading sequence | Time = 1.5756 ms\n-----------------------------------------\nsize = 18902\n-----------------------------------------\n| Loading positions | Time = 3.1824 ms\n-----------------------------------------\nsize = 28562\n-----------------------------------------\n| Loading reference sequence | Time = 1.9105 ms\n-----------------------------------------\n-----------------------------------------\n| Loading reference accumulative lengths | Time = 1.2136 ms\n-----------------------------------------\n[2023-05-24 06:40:30.236] [jointLog] [info] done\n[2023-05-24 06:40:30.236] [jointLog] [info] Index contained 15 targets\n[2023-05-24 06:40:30.236] [jointLog] [info] Number of decoys : 0\n\n\n\n\n\n\n\n\n\n\n\n\n[2023-05-24 06:40:30.297] [jointLog] [info] Computed 15 rich equivalence classes for further processing\n[2023-05-24 06:40:30.297] [jointLog] [info] Counted 15 total reads in the equivalence classes \n[2023-05-24 06:40:30.299] [jointLog] [info] Number of mappings discarded because of alignment score : 5\n[2023-05-24 06:40:30.299] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 0\n[2023-05-24 06:40:30.299] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0\n[2023-05-24 06:40:30.299] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0\n[2023-05-24 06:40:30.299] [jointLog] [warning] Only 15 fragments were mapped, but the number of burn-in fragments was set to 5000000.\nThe effective lengths have been computed using the observed mappings.\n\n[2023-05-24 06:40:30.299] [jointLog] [info] Mapping rate = 100%\n\n[2023-05-24 06:40:30.299] [jointLog] [info] finished quantifyLibrary()\n[2023-05-24 06:40:30.309] [jointLog] [info] Starting optimizer\n[2023-05-24 06:40:30.310] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate\n[2023-05-24 06:40:30.310] [jointLog] [info] iteration = 0 | max rel diff. = 0\n[2023-05-24 06:40:30.311] [jointLog] [info] iteration = 100 | max rel diff. = 0\n[2023-05-24 06:40:30.311] [jointLog] [info] Finished optimizer\n[2023-05-24 06:40:30.311] [jointLog] [info] writing output \n\n[2023-05-24 06:40:30.320] [jointLog] [warning] NOTE: Read Lib [[ ./single.fasta ]] :\n\nDetected a *potential* strand bias > 1% in an unstranded protocol check the file: ./output/lib_format_counts.json for details\n\n", "stdout": "Threads = 2\nVertex length = 31\nHash functions = 5\nFilter size = 1048576\nCapacity = 2\nFiles: \n./index/ref_k31_fixed.fa\n--------------------------------------------------------------------------------\nRound 0, 0:1048576\nPass\tFilling\tFiltering\n1\t0\t0\t\n2\t0\t0\nTrue junctions count = 14\nFalse junctions count = 19\nHash table size = 33\nCandidate marks count = 56\n--------------------------------------------------------------------------------\nReallocating bifurcations time: 0\nTrue marks count: 51\nEdges construction time: 0\n--------------------------------------------------------------------------------\nDistinct junctions = 14\n\nfor info, total work write each  : 2.331    total work inram from level 3 : 4.322  total work raw : 25.000 \nBitarray          105024  bits (100.00 %)   (array + ranks )\nfinal hash             0  bits (0.00 %) (nb in final hash 0)\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:40:31", "plugin": "core", "name": "end_epoch", "raw_value": "1684910431.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:40:29", "plugin": "core", "name": "start_epoch", "raw_value": "1684910429.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "6", "plugin": "core", "name": "galaxy_slots", "raw_value": "6.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon/1.3.0+galaxy1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon", "tool_version": "1.3.0+galaxy1", "test_index": 2, "time_seconds": 33.26564955711365, "inputs": {"quant_type|refTranscriptSource|s_index|fasta": {"src": "hda", "id": "5d1dc1a7fe40f582"}, "quant_type|refTranscriptSource|TranscriptSource": "history", "quant_type|qtype": "reads"}, "job": {"model_class": "Job", "id": "aed946dc438d8faf", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:41:00.716378", "create_time": "2023-05-24T06:40:43.584407", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon/1.3.0+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-ffbzm", "command_line": "mkdir ./index && mkdir ./output && salmon index -i ./index --kmerLen '31' --gencode --transcripts '/galaxy/server/database/objects/c/e/4/dataset_ce45f56d-0b1b-4581-889d-b2d297832f4a.dat' &&    ln -s /galaxy/server/database/objects/c/e/4/dataset_ce45f56d-0b1b-4581-889d-b2d297832f4a.dat ./single.fasta &&  salmon quant --index './index' --libType U --unmatedReads ./single.fasta --threads \"${GALAXY_SLOTS:-4}\"              --incompatPrior '0.0'       --biasSpeedSamp '5' --fldMax '1000' --fldMean '250' --fldSD '25' --forgettingFactor '0.65'  --maxReadOcc '100'     --numBiasSamples '2000000' --numAuxModelSamples '5000000' --numPreAuxModelSamples '5000'  --numGibbsSamples '0'  --numBootstraps '0'  --thinningFactor '16'  --sigDigits '3' --vbPrior '1e-05'   -o ./output", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"biasSpeedSamp\": \"5\", \"bootstrapReproject\": false, \"dumpEq\": false, \"dumpEqWeights\": false, \"fldMax\": \"1000\", \"fldMean\": \"250\", \"fldSD\": \"25\", \"forgettingFactor\": \"0.65\", \"initUniform\": false, \"maxReadOcc\": \"100\", \"minAssignedFrags\": \"\", \"noBiasLengthThreshold\": false, \"noEffectiveLengthCorrection\": false, \"noFragLengthDist\": false, \"noGammaDraw\": false, \"noLengthCorrection\": false, \"numAuxModelSamples\": \"5000000\", \"numBiasSamples\": \"2000000\", \"numBootstraps\": \"0\", \"numGibbsSamples\": \"0\", \"numPreAuxModelSamples\": \"5000\", \"perTranscriptPrior\": false, \"rangeFactorizationBins\": \"0\", \"sigDigits\": \"3\", \"skipQuant\": false, \"thinningFactor\": \"16\", \"useEM\": false, \"vbPrior\": \"1e-05\", \"writeOrphanLinks\": false, \"writeUnmappedNames\": false}", "meta": "false", "incompatPrior": "\"0.0\"", "gcBias": "false", "seqBias": "false", "geneMap": null, "quant_type": "{\"__current_case__\": 0, \"consensusSlack\": \"0\", \"consistentHits\": false, \"discardOrphansQuasi\": false, \"dovetail\": false, \"input\": {\"single_or_paired\": {\"__current_case__\": 0, \"input_singles\": {\"values\": [{\"id\": 213, \"src\": \"hda\"}]}, \"single_or_paired_opts\": \"single\", \"strandedness\": \"U\"}}, \"qtype\": \"reads\", \"quasiCoverage\": \"\", \"recoverOrphans\": false, \"refTranscriptSource\": {\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 213, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}, \"type\": \"quasi\", \"validmap\": {\"__current_case__\": 1, \"validateMappings\": false}, \"writeMappings\": false}"}, "inputs": {"quant_type|refTranscriptSource|fasta": {"id": "5d1dc1a7fe40f582", "src": "hda", "uuid": "ce45f56d-0b1b-4581-889d-b2d297832f4a"}, "quant_type|input|input_singles": {"id": "5d1dc1a7fe40f582", "src": "hda", "uuid": "ce45f56d-0b1b-4581-889d-b2d297832f4a"}}, "outputs": {"output_quant": {"id": "8624ea58d0dd9e75", "src": "hda", "uuid": "6359edc1-297f-4bbd-8844-3a5a0d2f8a56"}}, "output_collections": {}, "tool_stdout": "Threads = 2\nVertex length = 31\nHash functions = 5\nFilter size = 1048576\nCapacity = 2\nFiles: \n./index/ref_k31_fixed.fa\n--------------------------------------------------------------------------------\nRound 0, 0:1048576\nPass\tFilling\tFiltering\n1\t0\t0\t\n2\t0\t0\nTrue junctions count = 14\nFalse junctions count = 17\nHash table size = 31\nCandidate marks count = 54\n--------------------------------------------------------------------------------\nReallocating bifurcations time: 0\nTrue marks count: 51\nEdges construction time: 0\n--------------------------------------------------------------------------------\nDistinct junctions = 14\n\nfor info, total work write each  : 2.331    total work inram from level 3 : 4.322  total work raw : 25.000 \nBitarray          105024  bits (100.00 %)   (array + ranks )\nfinal hash             0  bits (0.00 %) (nb in final hash 0)\n", "tool_stderr": "Version Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###\n[2023-05-24 06:40:47.045] [jLog] [warning] The salmon index is being built without any decoy sequences.  It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be provided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.\n[2023-05-24 06:40:47.045] [jLog] [info] building index\nout : ./index\n[2023-05-24 06:40:47.047] [puff::index::jointLog] [info] Running fixFasta\n\n[Step 1 of 4] : counting k-mers\n\n[2023-05-24 06:40:47.059] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides\n[2023-05-24 06:40:47.059] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcripts\nwrote 15 cleaned references\n[2023-05-24 06:40:47.083] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers\n[2023-05-24 06:40:47.086] [puff::index::jointLog] [info] ntHll estimated 54811 distinct k-mers, setting filter size to 2^20\nallowedIn: 12\nMax Junction ID: 70\nseen.size():569 kmerInfo.size():71\napproximateContigTotalLength: 17465\ncounters for complex kmers:\n(prec>1 & succ>1)=0 | (succ>1 & isStart)=0 | (prec>1 & isEnd)=0 | (isStart & isEnd)=0\ncontig count: 24 element count: 19592 complex nodes: 0\n# of ones in rank vector: 23\n[2023-05-24 06:40:47.170] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.\n[2023-05-24 06:40:47.170] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory ./index\nsize = 19592\n-----------------------------------------\n| Loading contigs | Time = 1.6288 ms\n-----------------------------------------\nsize = 19592\n-----------------------------------------\n| Loading contig boundaries | Time = 1.3819 ms\n-----------------------------------------\nNumber of ones: 23\nNumber of ones per inventory item: 512\nInventory entries filled: 1\n23\n[2023-05-24 06:40:47.173] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.\n[2023-05-24 06:40:47.173] [puff::index::jointLog] [info] contig count for validation: 23\n[2023-05-24 06:40:47.174] [puff::index::jointLog] [info] Total # of Contigs : 23\n[2023-05-24 06:40:47.174] [puff::index::jointLog] [info] Total # of numerical Contigs : 23\n[2023-05-24 06:40:47.175] [puff::index::jointLog] [info] Total # of contig vec entries: 36\n[2023-05-24 06:40:47.175] [puff::index::jointLog] [info] bits per offset entry 6\n[2023-05-24 06:40:47.175] [puff::index::jointLog] [info] Done constructing the contig vector. 24\n[2023-05-24 06:40:47.193] [puff::index::jointLog] [info] # segments = 23\n[2023-05-24 06:40:47.193] [puff::index::jointLog] [info] total length = 19592\n[2023-05-24 06:40:47.193] [puff::index::jointLog] [info] Reading the reference files ...\n[2023-05-24 06:40:47.209] [puff::index::jointLog] [info] positional integer width = 15\n[2023-05-24 06:40:47.209] [puff::index::jointLog] [info] seqSize = 19592\n[2023-05-24 06:40:47.209] [puff::index::jointLog] [info] rankSize = 19592\n[2023-05-24 06:40:47.209] [puff::index::jointLog] [info] edgeVecSize = 0\n[2023-05-24 06:40:47.209] [puff::index::jointLog] [info] num keys = 18902\n\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   ela\n..\n   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\n[2023-05-24 06:40:47.337] [puff::index::jointLog] [info] mphf size = 0.0125198 MB\n[2023-05-24 06:40:47.337] [puff::index::jointLog] [info] chunk size = 9796\n[2023-05-24 06:40:47.337] [puff::index::jointLog] [info] chunk 0 = [0, 9796)\n[2023-05-24 06:40:47.337] [puff::index::jointLog] [info] chunk 1 = [9796, 19562)\n[2023-05-24 06:40:47.338] [puff::index::jointLog] [info] finished populating pos vector\n[2023-05-24 06:40:47.338] [puff::index::jointLog] [info] writing index components\n[2023-05-24 06:40:47.360] [puff::index::jointLog] [info] finished writing dense pufferfish index\n[2023-05-24 06:40:47.369] [jLog] [info] done building index\nVersion Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###\n### salmon (selective-alignment-based) v1.3.0\n### [ program ] => salmon \n### [ command ] => quant \n### [ index ] => { ./index }\n### [ libType ] => { U }\n### [ unmatedReads ] => { ./single.fasta }\n### [ threads ] => { 6 }\n### [ incompatPrior ] => { 0.0 }\n### [ biasSpeedSamp ] => { 5 }\n### [ fldMax ] => { 1000 }\n### [ fldMean ] => { 250 }\n### [ fldSD ] => { 25 }\n### [ forgettingFactor ] => { 0.65 }\n### [ maxReadOcc ] => { 100 }\n### [ numBiasSamples ] => { 2000000 }\n### [ numAuxModelSamples ] => { 5000000 }\n### [ numPreAuxModelSamples ] => { 5000 }\n### [ numGibbsSamples ] => { 0 }\n### [ numBootstraps ] => { 0 }\n### [ thinningFactor ] => { 16 }\n### [ sigDigits ] => { 3 }\n### [ vbPrior ] => { 1e-05 }\n### [ output ] => { ./output }\nLogs will be written to ./output/logs\n[2023-05-24 06:40:47.454] [jointLog] [info] setting maxHashResizeThreads to 6\n[2023-05-24 06:40:47.454] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.\n[2023-05-24 06:40:47.454] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65\n[2023-05-24 06:40:47.454] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.\n[2023-05-24 06:40:47.454] [jointLog] [info] parsing read library format\n[2023-05-24 06:40:47.454] [jointLog] [info] There is 1 library.\n-----------------------------------------\n| Loading contig table | Time = 1.141 ms\n-----------------------------------------\n[2023-05-24 06:40:47.510] [jointLog] [info] Loading pufferfish index\n[2023-05-24 06:40:47.511] [jointLog] [info] Loading dense pufferfish index.\nsize = 24\n-----------------------------------------\n| Loading contig offsets | Time = 2.5626 ms\n-----------------------------------------\n-----------------------------------------\n| Loading reference lengths | Time = 1.1062 ms\n-----------------------------------------\n-----------------------------------------\n| Loading mphf table | Time = 1.2281 ms\n-----------------------------------------\nsize = 19592\nNumber of ones: 23\nNumber of ones per inventory item: 512\nInventory entries filled: 1\n-----------------------------------------\n| Loading contig boundaries | Time = 1.4363 ms\n-----------------------------------------\nsize = 19592\n-----------------------------------------\n| Loading sequence | Time = 1.2113 ms\n-----------------------------------------\nsize = 18902\n-----------------------------------------\n| Loading positions | Time = 2.8058 ms\n-----------------------------------------\nsize = 28562\n-----------------------------------------\n| Loading reference sequence | Time = 1.5729 ms\n-----------------------------------------\n-----------------------------------------\n| Loading reference accumulative lengths | Time = 1.0893 ms\n-----------------------------------------\n[2023-05-24 06:40:47.529] [jointLog] [info] done\n[2023-05-24 06:40:47.529] [jointLog] [info] Index contained 15 targets\n[2023-05-24 06:40:47.529] [jointLog] [info] Number of decoys : 0\n\n\n\n\n\n\n\n\n\n\n\n\n[2023-05-24 06:40:47.578] [jointLog] [info] Computed 15 rich equivalence classes for further processing\n[2023-05-24 06:40:47.578] [jointLog] [info] Counted 15 total reads in the equivalence classes \n[2023-05-24 06:40:47.580] [jointLog] [info] Number of mappings discarded because of alignment score : 5\n[2023-05-24 06:40:47.580] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 0\n[2023-05-24 06:40:47.580] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0\n[2023-05-24 06:40:47.580] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0\n[2023-05-24 06:40:47.580] [jointLog] [warning] Only 15 fragments were mapped, but the number of burn-in fragments was set to 5000000.\nThe effective lengths have been computed using the observed mappings.\n\n[2023-05-24 06:40:47.580] [jointLog] [info] Mapping rate = 100%\n\n[2023-05-24 06:40:47.580] [jointLog] [info] finished quantifyLibrary()\n[2023-05-24 06:40:47.588] [jointLog] [info] Starting optimizer\n[2023-05-24 06:40:47.589] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate\n[2023-05-24 06:40:47.589] [jointLog] [info] iteration = 0 | max rel diff. = 0\n[2023-05-24 06:40:47.590] [jointLog] [info] iteration = 100 | max rel diff. = 0\n[2023-05-24 06:40:47.590] [jointLog] [info] Finished optimizer\n[2023-05-24 06:40:47.590] [jointLog] [info] writing output \n\n[2023-05-24 06:40:47.599] [jointLog] [warning] NOTE: Read Lib [[ ./single.fasta ]] :\n\nDetected a *potential* strand bias > 1% in an unstranded protocol check the file: ./output/lib_format_counts.json for details\n\n", "job_stdout": "", "job_stderr": "", "stderr": "Version Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###\n[2023-05-24 06:40:47.045] [jLog] [warning] The salmon index is being built without any decoy sequences.  It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be provided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.\n[2023-05-24 06:40:47.045] [jLog] [info] building index\nout : ./index\n[2023-05-24 06:40:47.047] [puff::index::jointLog] [info] Running fixFasta\n\n[Step 1 of 4] : counting k-mers\n\n[2023-05-24 06:40:47.059] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides\n[2023-05-24 06:40:47.059] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcripts\nwrote 15 cleaned references\n[2023-05-24 06:40:47.083] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers\n[2023-05-24 06:40:47.086] [puff::index::jointLog] [info] ntHll estimated 54811 distinct k-mers, setting filter size to 2^20\nallowedIn: 12\nMax Junction ID: 70\nseen.size():569 kmerInfo.size():71\napproximateContigTotalLength: 17465\ncounters for complex kmers:\n(prec>1 & succ>1)=0 | (succ>1 & isStart)=0 | (prec>1 & isEnd)=0 | (isStart & isEnd)=0\ncontig count: 24 element count: 19592 complex nodes: 0\n# of ones in rank vector: 23\n[2023-05-24 06:40:47.170] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.\n[2023-05-24 06:40:47.170] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory ./index\nsize = 19592\n-----------------------------------------\n| Loading contigs | Time = 1.6288 ms\n-----------------------------------------\nsize = 19592\n-----------------------------------------\n| Loading contig boundaries | Time = 1.3819 ms\n-----------------------------------------\nNumber of ones: 23\nNumber of ones per inventory item: 512\nInventory entries filled: 1\n23\n[2023-05-24 06:40:47.173] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.\n[2023-05-24 06:40:47.173] [puff::index::jointLog] [info] contig count for validation: 23\n[2023-05-24 06:40:47.174] [puff::index::jointLog] [info] Total # of Contigs : 23\n[2023-05-24 06:40:47.174] [puff::index::jointLog] [info] Total # of numerical Contigs : 23\n[2023-05-24 06:40:47.175] [puff::index::jointLog] [info] Total # of contig vec entries: 36\n[2023-05-24 06:40:47.175] [puff::index::jointLog] [info] bits per offset entry 6\n[2023-05-24 06:40:47.175] [puff::index::jointLog] [info] Done constructing the contig vector. 24\n[2023-05-24 06:40:47.193] [puff::index::jointLog] [info] # segments = 23\n[2023-05-24 06:40:47.193] [puff::index::jointLog] [info] total length = 19592\n[2023-05-24 06:40:47.193] [puff::index::jointLog] [info] Reading the reference files ...\n[2023-05-24 06:40:47.209] [puff::index::jointLog] [info] positional integer width = 15\n[2023-05-24 06:40:47.209] [puff::index::jointLog] [info] seqSize = 19592\n[2023-05-24 06:40:47.209] [puff::index::jointLog] [info] rankSize = 19592\n[2023-05-24 06:40:47.209] [puff::index::jointLog] [info] edgeVecSize = 0\n[2023-05-24 06:40:47.209] [puff::index::jointLog] [info] num keys = 18902\n\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   ela\n..\n   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\n[2023-05-24 06:40:47.337] [puff::index::jointLog] [info] mphf size = 0.0125198 MB\n[2023-05-24 06:40:47.337] [puff::index::jointLog] [info] chunk size = 9796\n[2023-05-24 06:40:47.337] [puff::index::jointLog] [info] chunk 0 = [0, 9796)\n[2023-05-24 06:40:47.337] [puff::index::jointLog] [info] chunk 1 = [9796, 19562)\n[2023-05-24 06:40:47.338] [puff::index::jointLog] [info] finished populating pos vector\n[2023-05-24 06:40:47.338] [puff::index::jointLog] [info] writing index components\n[2023-05-24 06:40:47.360] [puff::index::jointLog] [info] finished writing dense pufferfish index\n[2023-05-24 06:40:47.369] [jLog] [info] done building index\nVersion Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###\n### salmon (selective-alignment-based) v1.3.0\n### [ program ] => salmon \n### [ command ] => quant \n### [ index ] => { ./index }\n### [ libType ] => { U }\n### [ unmatedReads ] => { ./single.fasta }\n### [ threads ] => { 6 }\n### [ incompatPrior ] => { 0.0 }\n### [ biasSpeedSamp ] => { 5 }\n### [ fldMax ] => { 1000 }\n### [ fldMean ] => { 250 }\n### [ fldSD ] => { 25 }\n### [ forgettingFactor ] => { 0.65 }\n### [ maxReadOcc ] => { 100 }\n### [ numBiasSamples ] => { 2000000 }\n### [ numAuxModelSamples ] => { 5000000 }\n### [ numPreAuxModelSamples ] => { 5000 }\n### [ numGibbsSamples ] => { 0 }\n### [ numBootstraps ] => { 0 }\n### [ thinningFactor ] => { 16 }\n### [ sigDigits ] => { 3 }\n### [ vbPrior ] => { 1e-05 }\n### [ output ] => { ./output }\nLogs will be written to ./output/logs\n[2023-05-24 06:40:47.454] [jointLog] [info] setting maxHashResizeThreads to 6\n[2023-05-24 06:40:47.454] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.\n[2023-05-24 06:40:47.454] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65\n[2023-05-24 06:40:47.454] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.\n[2023-05-24 06:40:47.454] [jointLog] [info] parsing read library format\n[2023-05-24 06:40:47.454] [jointLog] [info] There is 1 library.\n-----------------------------------------\n| Loading contig table | Time = 1.141 ms\n-----------------------------------------\n[2023-05-24 06:40:47.510] [jointLog] [info] Loading pufferfish index\n[2023-05-24 06:40:47.511] [jointLog] [info] Loading dense pufferfish index.\nsize = 24\n-----------------------------------------\n| Loading contig offsets | Time = 2.5626 ms\n-----------------------------------------\n-----------------------------------------\n| Loading reference lengths | Time = 1.1062 ms\n-----------------------------------------\n-----------------------------------------\n| Loading mphf table | Time = 1.2281 ms\n-----------------------------------------\nsize = 19592\nNumber of ones: 23\nNumber of ones per inventory item: 512\nInventory entries filled: 1\n-----------------------------------------\n| Loading contig boundaries | Time = 1.4363 ms\n-----------------------------------------\nsize = 19592\n-----------------------------------------\n| Loading sequence | Time = 1.2113 ms\n-----------------------------------------\nsize = 18902\n-----------------------------------------\n| Loading positions | Time = 2.8058 ms\n-----------------------------------------\nsize = 28562\n-----------------------------------------\n| Loading reference sequence | Time = 1.5729 ms\n-----------------------------------------\n-----------------------------------------\n| Loading reference accumulative lengths | Time = 1.0893 ms\n-----------------------------------------\n[2023-05-24 06:40:47.529] [jointLog] [info] done\n[2023-05-24 06:40:47.529] [jointLog] [info] Index contained 15 targets\n[2023-05-24 06:40:47.529] [jointLog] [info] Number of decoys : 0\n\n\n\n\n\n\n\n\n\n\n\n\n[2023-05-24 06:40:47.578] [jointLog] [info] Computed 15 rich equivalence classes for further processing\n[2023-05-24 06:40:47.578] [jointLog] [info] Counted 15 total reads in the equivalence classes \n[2023-05-24 06:40:47.580] [jointLog] [info] Number of mappings discarded because of alignment score : 5\n[2023-05-24 06:40:47.580] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 0\n[2023-05-24 06:40:47.580] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0\n[2023-05-24 06:40:47.580] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 0\n[2023-05-24 06:40:47.580] [jointLog] [warning] Only 15 fragments were mapped, but the number of burn-in fragments was set to 5000000.\nThe effective lengths have been computed using the observed mappings.\n\n[2023-05-24 06:40:47.580] [jointLog] [info] Mapping rate = 100%\n\n[2023-05-24 06:40:47.580] [jointLog] [info] finished quantifyLibrary()\n[2023-05-24 06:40:47.588] [jointLog] [info] Starting optimizer\n[2023-05-24 06:40:47.589] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate\n[2023-05-24 06:40:47.589] [jointLog] [info] iteration = 0 | max rel diff. = 0\n[2023-05-24 06:40:47.590] [jointLog] [info] iteration = 100 | max rel diff. = 0\n[2023-05-24 06:40:47.590] [jointLog] [info] Finished optimizer\n[2023-05-24 06:40:47.590] [jointLog] [info] writing output \n\n[2023-05-24 06:40:47.599] [jointLog] [warning] NOTE: Read Lib [[ ./single.fasta ]] :\n\nDetected a *potential* strand bias > 1% in an unstranded protocol check the file: ./output/lib_format_counts.json for details\n\n", "stdout": "Threads = 2\nVertex length = 31\nHash functions = 5\nFilter size = 1048576\nCapacity = 2\nFiles: \n./index/ref_k31_fixed.fa\n--------------------------------------------------------------------------------\nRound 0, 0:1048576\nPass\tFilling\tFiltering\n1\t0\t0\t\n2\t0\t0\nTrue junctions count = 14\nFalse junctions count = 17\nHash table size = 31\nCandidate marks count = 54\n--------------------------------------------------------------------------------\nReallocating bifurcations time: 0\nTrue marks count: 51\nEdges construction time: 0\n--------------------------------------------------------------------------------\nDistinct junctions = 14\n\nfor info, total work write each  : 2.331    total work inram from level 3 : 4.322  total work raw : 25.000 \nBitarray          105024  bits (100.00 %)   (array + ranks )\nfinal hash             0  bits (0.00 %) (nb in final hash 0)\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:40:48", "plugin": "core", "name": "end_epoch", "raw_value": "1684910448.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:40:46", "plugin": "core", "name": "start_epoch", "raw_value": "1684910446.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "6", "plugin": "core", "name": "galaxy_slots", "raw_value": "6.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon/1.3.0+galaxy1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon", "tool_version": "1.3.0+galaxy1", "test_index": 3, "time_seconds": 11.013692140579224, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon/1.3.0+galaxy1-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon", "tool_version": "1.3.0+galaxy1", "test_index": 4, "time_seconds": 37.70014762878418, "inputs": {"quant_type|refTranscriptSource|s_index|fasta": {"src": "hda", "id": "458f43d74574750d"}, "quant_type|refTranscriptSource|TranscriptSource": "history", "quant_type|discardOrphansQuasi": false, "quant_type|validmap|validateMappings": true, "quant_type|dovetail": true, "quant_type|recoverOrphans": true, "quant_type|qtype": "reads"}, "job": {"model_class": "Job", "id": "165732a2a8cd044a", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:41:30.444517", "create_time": "2023-05-24T06:41:09.504598", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon/1.3.0+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-4cfmt", "command_line": "mkdir ./index && mkdir ./output && salmon index -i ./index --kmerLen '31' --gencode --transcripts '/galaxy/server/database/objects/4/0/c/dataset_40c532d0-b53b-4067-a44b-3c4f3e5359b9.dat' &&    ln -s /galaxy/server/database/objects/5/0/4/dataset_504e3f5c-2ba9-435c-8233-5e15fef548e0.dat ./single.fasta &&  salmon quant --index './index' --libType U --unmatedReads ./single.fasta --threads \"${GALAXY_SLOTS:-4}\"  --validateMappings --minScoreFraction '0.65' --ma '2' --mp '4' --go '5' --ge '3'    --allowDovetail --recoverOrphans          --incompatPrior '0.0'       --biasSpeedSamp '5' --fldMax '1000' --fldMean '250' --fldSD '25' --forgettingFactor '0.65'  --maxReadOcc '100'     --numBiasSamples '2000000' --numAuxModelSamples '5000000' --numPreAuxModelSamples '5000'  --numGibbsSamples '0'  --numBootstraps '0'  --thinningFactor '16'  --sigDigits '3' --vbPrior '1e-05'   -o ./output", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"biasSpeedSamp\": \"5\", \"bootstrapReproject\": false, \"dumpEq\": false, \"dumpEqWeights\": false, \"fldMax\": \"1000\", \"fldMean\": \"250\", \"fldSD\": \"25\", \"forgettingFactor\": \"0.65\", \"initUniform\": false, \"maxReadOcc\": \"100\", \"minAssignedFrags\": \"\", \"noBiasLengthThreshold\": false, \"noEffectiveLengthCorrection\": false, \"noFragLengthDist\": false, \"noGammaDraw\": false, \"noLengthCorrection\": false, \"numAuxModelSamples\": \"5000000\", \"numBiasSamples\": \"2000000\", \"numBootstraps\": \"0\", \"numGibbsSamples\": \"0\", \"numPreAuxModelSamples\": \"5000\", \"perTranscriptPrior\": false, \"rangeFactorizationBins\": \"0\", \"sigDigits\": \"3\", \"skipQuant\": false, \"thinningFactor\": \"16\", \"useEM\": false, \"vbPrior\": \"1e-05\", \"writeOrphanLinks\": false, \"writeUnmappedNames\": false}", "meta": "false", "incompatPrior": "\"0.0\"", "gcBias": "false", "seqBias": "false", "geneMap": null, "quant_type": "{\"__current_case__\": 0, \"consensusSlack\": \"0\", \"consistentHits\": false, \"discardOrphansQuasi\": false, \"dovetail\": true, \"input\": {\"single_or_paired\": {\"__current_case__\": 0, \"input_singles\": {\"values\": [{\"id\": 217, \"src\": \"hda\"}]}, \"single_or_paired_opts\": \"single\", \"strandedness\": \"U\"}}, \"qtype\": \"reads\", \"quasiCoverage\": \"\", \"recoverOrphans\": true, \"refTranscriptSource\": {\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 218, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}, \"type\": \"quasi\", \"validmap\": {\"__current_case__\": 0, \"gapExtensionPenalty\": \"3\", \"gapOpenPenalty\": \"5\", \"hardFilter\": false, \"matchScore\": \"2\", \"maxMMPExtension\": \"\", \"mimicBT2\": false, \"mimicStrictBT2\": false, \"minScoreFraction\": \"0.65\", \"mismatchPenalty\": \"4\", \"validateMappings\": true}, \"writeMappings\": false}"}, "inputs": {"quant_type|refTranscriptSource|fasta": {"id": "458f43d74574750d", "src": "hda", "uuid": "40c532d0-b53b-4067-a44b-3c4f3e5359b9"}, "quant_type|input|input_singles": {"id": "75ac280aa3975403", "src": "hda", "uuid": "504e3f5c-2ba9-435c-8233-5e15fef548e0"}}, "outputs": {"output_quant": {"id": "193350b6840ab621", "src": "hda", "uuid": "9e79ebaf-7f1f-422f-a6dc-fdf12091c9e2"}}, "output_collections": {}, "tool_stdout": "Threads = 2\nVertex length = 31\nHash functions = 5\nFilter size = 1048576\nCapacity = 2\nFiles: \n./index/ref_k31_fixed.fa\n--------------------------------------------------------------------------------\nRound 0, 0:1048576\nPass\tFilling\tFiltering\n1\t0\t0\t\n2\t0\t0\nTrue junctions count = 14\nFalse junctions count = 18\nHash table size = 32\nCandidate marks count = 55\n--------------------------------------------------------------------------------\nReallocating bifurcations time: 0\nTrue marks count: 51\nEdges construction time: 0\n--------------------------------------------------------------------------------\nDistinct junctions = 14\n\nfor info, total work write each  : 2.331    total work inram from level 3 : 4.322  total work raw : 25.000 \nBitarray          105024  bits (100.00 %)   (array + ranks )\nfinal hash             0  bits (0.00 %) (nb in final hash 0)\n", "tool_stderr": "Version Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###\n[2023-05-24 06:41:18.340] [jLog] [warning] The salmon index is being built without any decoy sequences.  It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be provided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.\n[2023-05-24 06:41:18.340] [jLog] [info] building index\nout : ./index\n[2023-05-24 06:41:18.343] [puff::index::jointLog] [info] Running fixFasta\n\n[Step 1 of 4] : counting k-mers\n\n[2023-05-24 06:41:18.353] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides\n[2023-05-24 06:41:18.353] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcripts\nwrote 15 cleaned references\n[2023-05-24 06:41:18.372] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers\n[2023-05-24 06:41:18.374] [puff::index::jointLog] [info] ntHll estimated 54811 distinct k-mers, setting filter size to 2^20\nallowedIn: 12\nMax Junction ID: 70\nseen.size():569 kmerInfo.size():71\napproximateContigTotalLength: 17465\ncounters for complex kmers:\n(prec>1 & succ>1)=0 | (succ>1 & isStart)=0 | (prec>1 & isEnd)=0 | (isStart & isEnd)=0\ncontig count: 24 element count: 19592 complex nodes: 0\n# of ones in rank vector: 23\n[2023-05-24 06:41:18.458] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.\n[2023-05-24 06:41:18.458] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory ./index\nsize = 19592\n-----------------------------------------\n| Loading contigs | Time = 813.41 us\n-----------------------------------------\nsize = 19592\n-----------------------------------------\n| Loading contig boundaries | Time = 1.6162 ms\n-----------------------------------------\nNumber of ones: 23\nNumber of ones per inventory item: 512\nInventory entries filled: 1\n23\n[2023-05-24 06:41:18.460] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.\n[2023-05-24 06:41:18.460] [puff::index::jointLog] [info] contig count for validation: 23\n[2023-05-24 06:41:18.461] [puff::index::jointLog] [info] Total # of Contigs : 23\n[2023-05-24 06:41:18.461] [puff::index::jointLog] [info] Total # of numerical Contigs : 23\n[2023-05-24 06:41:18.462] [puff::index::jointLog] [info] Total # of contig vec entries: 36\n[2023-05-24 06:41:18.462] [puff::index::jointLog] [info] bits per offset entry 6\n[2023-05-24 06:41:18.462] [puff::index::jointLog] [info] Done constructing the contig vector. 24\n[2023-05-24 06:41:18.481] [puff::index::jointLog] [info] # segments = 23\n[2023-05-24 06:41:18.481] [puff::index::jointLog] [info] total length = 19592\n[2023-05-24 06:41:18.481] [puff::index::jointLog] [info] Reading the reference files ...\n[2023-05-24 06:41:18.499] [puff::index::jointLog] [info] positional integer width = 15\n[2023-05-24 06:41:18.499] [puff::index::jointLog] [info] seqSize = 19592\n[2023-05-24 06:41:18.499] [puff::index::jointLog] [info] rankSize = 19592\n[2023-05-24 06:41:18.499] [puff::index::jointLog] [info] edgeVecSize = 0\n[2023-05-24 06:41:18.499] [puff::index::jointLog] [info] num keys = 18902\n\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   ela\n..\nsec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\n[2023-05-24 06:41:18.613] [puff::index::jointLog] [info] mphf size = 0.0125198 MB\n[2023-05-24 06:41:18.613] [puff::index::jointLog] [info] chunk size = 9796\n[2023-05-24 06:41:18.613] [puff::index::jointLog] [info] chunk 0 = [0, 9796)\n[2023-05-24 06:41:18.613] [puff::index::jointLog] [info] chunk 1 = [9796, 19562)\n[2023-05-24 06:41:18.615] [puff::index::jointLog] [info] finished populating pos vector\n[2023-05-24 06:41:18.615] [puff::index::jointLog] [info] writing index components\n[2023-05-24 06:41:18.636] [puff::index::jointLog] [info] finished writing dense pufferfish index\n[2023-05-24 06:41:18.644] [jLog] [info] done building index\nVersion Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###\n### salmon (selective-alignment-based) v1.3.0\n### [ program ] => salmon \n### [ command ] => quant \n### [ index ] => { ./index }\n### [ libType ] => { U }\n### [ unmatedReads ] => { ./single.fasta }\n### [ threads ] => { 6 }\n### [ validateMappings ] => { }\n### [ minScoreFraction ] => { 0.65 }\n### [ ma ] => { 2 }\n### [ mp ] => { 4 }\n### [ go ] => { 5 }\n### [ ge ] => { 3 }\n### [ allowDovetail ] => { }\n### [ recoverOrphans ] => { }\n### [ incompatPrior ] => { 0.0 }\n### [ biasSpeedSamp ] => { 5 }\n### [ fldMax ] => { 1000 }\n### [ fldMean ] => { 250 }\n### [ fldSD ] => { 25 }\n### [ forgettingFactor ] => { 0.65 }\n### [ maxReadOcc ] => { 100 }\n### [ numBiasSamples ] => { 2000000 }\n### [ numAuxModelSamples ] => { 5000000 }\n### [ numPreAuxModelSamples ] => { 5000 }\n### [ numGibbsSamples ] => { 0 }\n### [ numBootstraps ] => { 0 }\n### [ thinningFactor ] => { 16 }\n### [ sigDigits ] => { 3 }\n### [ vbPrior ] => { 1e-05 }\n### [ output ] => { ./output }\nLogs will be written to ./output/logs\n[2023-05-24 06:41:18.722] [jointLog] [info] setting maxHashResizeThreads to 6\n[2023-05-24 06:41:18.722] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.\n[2023-05-24 06:41:18.722] [jointLog] [warning] You set the mismatch penalty as 4, but it should be negative.  It is being negated to -4.\n[2023-05-24 06:41:18.722] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.\n[2023-05-24 06:41:18.722] [jointLog] [info] parsing read library format\n[2023-05-24 06:41:18.722] [jointLog] [info] There is 1 library.\n[2023-05-24 06:41:18.780] [jointLog] [info] Loading pufferfish index\n[2023-05-24 06:41:18.781] [jointLog] [info] Loading dense pufferfish index.\n-----------------------------------------\n| Loading contig table | Time = 1.617 ms\n-----------------------------------------\nsize = 24\n-----------------------------------------\n| Loading contig offsets | Time = 2.2627 ms\n-----------------------------------------\n-----------------------------------------\n| Loading reference lengths | Time = 1.1452 ms\n-----------------------------------------\n-----------------------------------------\n| Loading mphf table | Time = 1.6682 ms\n-----------------------------------------\nsize = 19592\nNumber of ones: 23\nNumber of ones per inventory item: 512\nInventory entries filled: 1\n-----------------------------------------\n| Loading contig boundaries | Time = 1.8283 ms\n-----------------------------------------\nsize = 19592\n-----------------------------------------\n| Loading sequence | Time = 1.1357 ms\n-----------------------------------------\nsize = 18902\n-----------------------------------------\n| Loading positions | Time = 1.7176 ms\n-----------------------------------------\nsize = 28562\n-----------------------------------------\n| Loading reference sequence | Time = 2.1442 ms\n-----------------------------------------\n-----------------------------------------\n| Loading reference accumulative lengths | Time = 1.2048 ms\n-----------------------------------------\n[2023-05-24 06:41:18.801] [jointLog] [info] done\n[2023-05-24 06:41:18.801] [jointLog] [info] Index contained 15 targets\n[2023-05-24 06:41:18.801] [jointLog] [info] Number of decoys : 0\n\n\n\n\n\n\n\n\n\n\n\n\n[2023-05-24 06:41:18.850] [jointLog] [info] Computed 15 rich equivalence classes for further processing\n[2023-05-24 06:41:18.850] [jointLog] [info] Counted 15 total reads in the equivalence classes \n[2023-05-24 06:41:18.853] [jointLog] [info] Number of orphans recovered using orphan rescue : 0\n[2023-05-24 06:41:18.853] [jointLog] [info] Number of mappings discarded because of alignment score : 6\n[2023-05-24 06:41:18.853] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 0\n[2023-05-24 06:41:18.853] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0\n[2023-05-24 06:41:18.853] [jointLog] [warning] Only 15 fragments were mapped, but the number of burn-in fragments was set to 5000000.\nThe effective lengths have been computed using the observed mappings.\n\n[2023-05-24 06:41:18.853] [jointLog] [info] Mapping rate = 100%\n\n[2023-05-24 06:41:18.853] [jointLog] [info] finished quantifyLibrary()\n[2023-05-24 06:41:18.861] [jointLog] [info] Starting optimizer\n[2023-05-24 06:41:18.862] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate\n[2023-05-24 06:41:18.862] [jointLog] [info] iteration = 0 | max rel diff. = 0\n[2023-05-24 06:41:18.863] [jointLog] [info] iteration = 100 | max rel diff. = 0\n[2023-05-24 06:41:18.863] [jointLog] [info] Finished optimizer\n[2023-05-24 06:41:18.863] [jointLog] [info] writing output \n\n[2023-05-24 06:41:18.871] [jointLog] [warning] NOTE: Read Lib [[ ./single.fasta ]] :\n\nDetected a *potential* strand bias > 1% in an unstranded protocol check the file: ./output/lib_format_counts.json for details\n\n", "job_stdout": "", "job_stderr": "", "stderr": "Version Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###\n[2023-05-24 06:41:18.340] [jLog] [warning] The salmon index is being built without any decoy sequences.  It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be provided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.\n[2023-05-24 06:41:18.340] [jLog] [info] building index\nout : ./index\n[2023-05-24 06:41:18.343] [puff::index::jointLog] [info] Running fixFasta\n\n[Step 1 of 4] : counting k-mers\n\n[2023-05-24 06:41:18.353] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides\n[2023-05-24 06:41:18.353] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcripts\nwrote 15 cleaned references\n[2023-05-24 06:41:18.372] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers\n[2023-05-24 06:41:18.374] [puff::index::jointLog] [info] ntHll estimated 54811 distinct k-mers, setting filter size to 2^20\nallowedIn: 12\nMax Junction ID: 70\nseen.size():569 kmerInfo.size():71\napproximateContigTotalLength: 17465\ncounters for complex kmers:\n(prec>1 & succ>1)=0 | (succ>1 & isStart)=0 | (prec>1 & isEnd)=0 | (isStart & isEnd)=0\ncontig count: 24 element count: 19592 complex nodes: 0\n# of ones in rank vector: 23\n[2023-05-24 06:41:18.458] [puff::index::jointLog] [info] Starting the Pufferfish indexing by reading the GFA binary file.\n[2023-05-24 06:41:18.458] [puff::index::jointLog] [info] Setting the index/BinaryGfa directory ./index\nsize = 19592\n-----------------------------------------\n| Loading contigs | Time = 813.41 us\n-----------------------------------------\nsize = 19592\n-----------------------------------------\n| Loading contig boundaries | Time = 1.6162 ms\n-----------------------------------------\nNumber of ones: 23\nNumber of ones per inventory item: 512\nInventory entries filled: 1\n23\n[2023-05-24 06:41:18.460] [puff::index::jointLog] [info] Done wrapping the rank vector with a rank9sel structure.\n[2023-05-24 06:41:18.460] [puff::index::jointLog] [info] contig count for validation: 23\n[2023-05-24 06:41:18.461] [puff::index::jointLog] [info] Total # of Contigs : 23\n[2023-05-24 06:41:18.461] [puff::index::jointLog] [info] Total # of numerical Contigs : 23\n[2023-05-24 06:41:18.462] [puff::index::jointLog] [info] Total # of contig vec entries: 36\n[2023-05-24 06:41:18.462] [puff::index::jointLog] [info] bits per offset entry 6\n[2023-05-24 06:41:18.462] [puff::index::jointLog] [info] Done constructing the contig vector. 24\n[2023-05-24 06:41:18.481] [puff::index::jointLog] [info] # segments = 23\n[2023-05-24 06:41:18.481] [puff::index::jointLog] [info] total length = 19592\n[2023-05-24 06:41:18.481] [puff::index::jointLog] [info] Reading the reference files ...\n[2023-05-24 06:41:18.499] [puff::index::jointLog] [info] positional integer width = 15\n[2023-05-24 06:41:18.499] [puff::index::jointLog] [info] seqSize = 19592\n[2023-05-24 06:41:18.499] [puff::index::jointLog] [info] rankSize = 19592\n[2023-05-24 06:41:18.499] [puff::index::jointLog] [info] edgeVecSize = 0\n[2023-05-24 06:41:18.499] [puff::index::jointLog] [info] num keys = 18902\n\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  2.32 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  4.65 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  6.97 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  9.3  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  11.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  13.9 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  16.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  18.6 %   ela\n..\nsec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  88.3 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  90.7 %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\r[Building BooPHF]  100  %   elapsed:   0 min 0  sec   remaining:   0 min 0  sec\n[2023-05-24 06:41:18.613] [puff::index::jointLog] [info] mphf size = 0.0125198 MB\n[2023-05-24 06:41:18.613] [puff::index::jointLog] [info] chunk size = 9796\n[2023-05-24 06:41:18.613] [puff::index::jointLog] [info] chunk 0 = [0, 9796)\n[2023-05-24 06:41:18.613] [puff::index::jointLog] [info] chunk 1 = [9796, 19562)\n[2023-05-24 06:41:18.615] [puff::index::jointLog] [info] finished populating pos vector\n[2023-05-24 06:41:18.615] [puff::index::jointLog] [info] writing index components\n[2023-05-24 06:41:18.636] [puff::index::jointLog] [info] finished writing dense pufferfish index\n[2023-05-24 06:41:18.644] [jLog] [info] done building index\nVersion Info: ### PLEASE UPGRADE SALMON ###\n### A newer version of salmon with important bug fixes and improvements is available. ####\n###\nThe newest version, available at https://github.com/COMBINE-lab/salmon/releases\ncontains new features, improvements, and bug fixes; please upgrade at your\nearliest convenience.\n###\nSign up for the salmon mailing list to hear about new versions, features and updates at:\nhttps://oceangenomics.com/subscribe\n###\n### salmon (selective-alignment-based) v1.3.0\n### [ program ] => salmon \n### [ command ] => quant \n### [ index ] => { ./index }\n### [ libType ] => { U }\n### [ unmatedReads ] => { ./single.fasta }\n### [ threads ] => { 6 }\n### [ validateMappings ] => { }\n### [ minScoreFraction ] => { 0.65 }\n### [ ma ] => { 2 }\n### [ mp ] => { 4 }\n### [ go ] => { 5 }\n### [ ge ] => { 3 }\n### [ allowDovetail ] => { }\n### [ recoverOrphans ] => { }\n### [ incompatPrior ] => { 0.0 }\n### [ biasSpeedSamp ] => { 5 }\n### [ fldMax ] => { 1000 }\n### [ fldMean ] => { 250 }\n### [ fldSD ] => { 25 }\n### [ forgettingFactor ] => { 0.65 }\n### [ maxReadOcc ] => { 100 }\n### [ numBiasSamples ] => { 2000000 }\n### [ numAuxModelSamples ] => { 5000000 }\n### [ numPreAuxModelSamples ] => { 5000 }\n### [ numGibbsSamples ] => { 0 }\n### [ numBootstraps ] => { 0 }\n### [ thinningFactor ] => { 16 }\n### [ sigDigits ] => { 3 }\n### [ vbPrior ] => { 1e-05 }\n### [ output ] => { ./output }\nLogs will be written to ./output/logs\n[2023-05-24 06:41:18.722] [jointLog] [info] setting maxHashResizeThreads to 6\n[2023-05-24 06:41:18.722] [jointLog] [info] Fragment incompatibility prior below threshold.  Incompatible fragments will be ignored.\n[2023-05-24 06:41:18.722] [jointLog] [warning] You set the mismatch penalty as 4, but it should be negative.  It is being negated to -4.\n[2023-05-24 06:41:18.722] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.\n[2023-05-24 06:41:18.722] [jointLog] [info] parsing read library format\n[2023-05-24 06:41:18.722] [jointLog] [info] There is 1 library.\n[2023-05-24 06:41:18.780] [jointLog] [info] Loading pufferfish index\n[2023-05-24 06:41:18.781] [jointLog] [info] Loading dense pufferfish index.\n-----------------------------------------\n| Loading contig table | Time = 1.617 ms\n-----------------------------------------\nsize = 24\n-----------------------------------------\n| Loading contig offsets | Time = 2.2627 ms\n-----------------------------------------\n-----------------------------------------\n| Loading reference lengths | Time = 1.1452 ms\n-----------------------------------------\n-----------------------------------------\n| Loading mphf table | Time = 1.6682 ms\n-----------------------------------------\nsize = 19592\nNumber of ones: 23\nNumber of ones per inventory item: 512\nInventory entries filled: 1\n-----------------------------------------\n| Loading contig boundaries | Time = 1.8283 ms\n-----------------------------------------\nsize = 19592\n-----------------------------------------\n| Loading sequence | Time = 1.1357 ms\n-----------------------------------------\nsize = 18902\n-----------------------------------------\n| Loading positions | Time = 1.7176 ms\n-----------------------------------------\nsize = 28562\n-----------------------------------------\n| Loading reference sequence | Time = 2.1442 ms\n-----------------------------------------\n-----------------------------------------\n| Loading reference accumulative lengths | Time = 1.2048 ms\n-----------------------------------------\n[2023-05-24 06:41:18.801] [jointLog] [info] done\n[2023-05-24 06:41:18.801] [jointLog] [info] Index contained 15 targets\n[2023-05-24 06:41:18.801] [jointLog] [info] Number of decoys : 0\n\n\n\n\n\n\n\n\n\n\n\n\n[2023-05-24 06:41:18.850] [jointLog] [info] Computed 15 rich equivalence classes for further processing\n[2023-05-24 06:41:18.850] [jointLog] [info] Counted 15 total reads in the equivalence classes \n[2023-05-24 06:41:18.853] [jointLog] [info] Number of orphans recovered using orphan rescue : 0\n[2023-05-24 06:41:18.853] [jointLog] [info] Number of mappings discarded because of alignment score : 6\n[2023-05-24 06:41:18.853] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 0\n[2023-05-24 06:41:18.853] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0\n[2023-05-24 06:41:18.853] [jointLog] [warning] Only 15 fragments were mapped, but the number of burn-in fragments was set to 5000000.\nThe effective lengths have been computed using the observed mappings.\n\n[2023-05-24 06:41:18.853] [jointLog] [info] Mapping rate = 100%\n\n[2023-05-24 06:41:18.853] [jointLog] [info] finished quantifyLibrary()\n[2023-05-24 06:41:18.861] [jointLog] [info] Starting optimizer\n[2023-05-24 06:41:18.862] [jointLog] [info] Marked 0 weighted equivalence classes as degenerate\n[2023-05-24 06:41:18.862] [jointLog] [info] iteration = 0 | max rel diff. = 0\n[2023-05-24 06:41:18.863] [jointLog] [info] iteration = 100 | max rel diff. = 0\n[2023-05-24 06:41:18.863] [jointLog] [info] Finished optimizer\n[2023-05-24 06:41:18.863] [jointLog] [info] writing output \n\n[2023-05-24 06:41:18.871] [jointLog] [warning] NOTE: Read Lib [[ ./single.fasta ]] :\n\nDetected a *potential* strand bias > 1% in an unstranded protocol check the file: ./output/lib_format_counts.json for details\n\n", "stdout": "Threads = 2\nVertex length = 31\nHash functions = 5\nFilter size = 1048576\nCapacity = 2\nFiles: \n./index/ref_k31_fixed.fa\n--------------------------------------------------------------------------------\nRound 0, 0:1048576\nPass\tFilling\tFiltering\n1\t0\t0\t\n2\t0\t0\nTrue junctions count = 14\nFalse junctions count = 18\nHash table size = 32\nCandidate marks count = 55\n--------------------------------------------------------------------------------\nReallocating bifurcations time: 0\nTrue marks count: 51\nEdges construction time: 0\n--------------------------------------------------------------------------------\nDistinct junctions = 14\n\nfor info, total work write each  : 2.331    total work inram from level 3 : 4.322  total work raw : 25.000 \nBitarray          105024  bits (100.00 %)   (array + ranks )\nfinal hash             0  bits (0.00 %) (nb in final hash 0)\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:41:19", "plugin": "core", "name": "end_epoch", "raw_value": "1684910479.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:41:18", "plugin": "core", "name": "start_epoch", "raw_value": "1684910478.0000000"}, {"title": "Memory Allocated (MB)", "value": "51539", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "51539.0000000"}, {"title": "Cores Allocated", "value": "6", "plugin": "core", "name": "galaxy_slots", "raw_value": "6.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon/1.3.0+galaxy1-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon", "tool_version": "1.3.0+galaxy1", "test_index": 5, "time_seconds": 27.888993978500366, "inputs": {"quant_type|refTranscriptSource|s_index|fasta": {"src": "hda", "id": "458f43d74574750d"}, "quant_type|refTranscriptSource|TranscriptSource": "history", "quant_type|qtype": "reads", "seqBias": true, "gcBias": true, "adv|dumpEq": true, "adv|minAssignedFrags": "10", "adv|initUniform": true, "adv|noLengthCorrection": false, "adv|useEM": true, "adv|noGammaDraw": true}, "job": {"model_class": "Job", "id": "a6cbbdc5c74227e0", "state": "error", "exit_code": null, "update_time": "2023-05-24T06:41:28.720158", "create_time": "2023-05-24T06:41:17.428053", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon/1.3.0+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-w7qt5", "command_line": "mkdir ./index && mkdir ./output && salmon index -i ./index --kmerLen '31' --gencode --transcripts '/galaxy/server/database/objects/4/0/c/dataset_40c532d0-b53b-4067-a44b-3c4f3e5359b9.dat' &&    ln -s /galaxy/server/database/objects/4/0/c/dataset_40c532d0-b53b-4067-a44b-3c4f3e5359b9.dat ./single.fasta &&  salmon quant --index './index' --libType U --unmatedReads ./single.fasta --threads \"${GALAXY_SLOTS:-4}\"            --seqBias --gcBias --incompatPrior '0.0'     --dumpEq  --minAssignedFrags '10' --biasSpeedSamp '5' --fldMax '1000' --fldMean '250' --fldSD '25' --forgettingFactor '0.65' --initUniform --maxReadOcc '100'     --numBiasSamples '2000000' --numAuxModelSamples '5000000' --numPreAuxModelSamples '5000' --useEM --numGibbsSamples '0' --noGammaDraw --numBootstraps '0'  --thinningFactor '16'  --sigDigits '3' --vbPrior '1e-05'   -o ./output", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"biasSpeedSamp\": \"5\", \"bootstrapReproject\": false, \"dumpEq\": true, \"dumpEqWeights\": false, \"fldMax\": \"1000\", \"fldMean\": \"250\", \"fldSD\": \"25\", \"forgettingFactor\": \"0.65\", \"initUniform\": true, \"maxReadOcc\": \"100\", \"minAssignedFrags\": \"10\", \"noBiasLengthThreshold\": false, \"noEffectiveLengthCorrection\": false, \"noFragLengthDist\": false, \"noGammaDraw\": true, \"noLengthCorrection\": false, \"numAuxModelSamples\": \"5000000\", \"numBiasSamples\": \"2000000\", \"numBootstraps\": \"0\", \"numGibbsSamples\": \"0\", \"numPreAuxModelSamples\": \"5000\", \"perTranscriptPrior\": false, \"rangeFactorizationBins\": \"0\", \"sigDigits\": \"3\", \"skipQuant\": false, \"thinningFactor\": \"16\", \"useEM\": true, \"vbPrior\": \"1e-05\", \"writeOrphanLinks\": false, \"writeUnmappedNames\": false}", "meta": "false", "incompatPrior": "\"0.0\"", "gcBias": "true", "seqBias": "true", "geneMap": null, "quant_type": "{\"__current_case__\": 0, \"consensusSlack\": \"0\", \"consistentHits\": false, \"discardOrphansQuasi\": false, \"dovetail\": false, \"input\": {\"single_or_paired\": {\"__current_case__\": 0, \"input_singles\": {\"values\": [{\"id\": 218, \"src\": \"hda\"}]}, \"single_or_paired_opts\": \"single\", \"strandedness\": \"U\"}}, \"qtype\": \"reads\", \"quasiCoverage\": \"\", \"recoverOrphans\": false, \"refTranscriptSource\": {\"TranscriptSource\": \"history\", \"__current_case__\": 1, \"s_index\": {\"fasta\": {\"values\": [{\"id\": 218, \"src\": \"hda\"}]}, \"kmer\": \"31\", \"phash\": false}}, \"type\": \"quasi\", \"validmap\": {\"__current_case__\": 1, \"validateMappings\": false}, \"writeMappings\": false}"}, "inputs": {"quant_type|refTranscriptSource|fasta": {"id": "458f43d74574750d", "src": "hda", "uuid": "40c532d0-b53b-4067-a44b-3c4f3e5359b9"}, "quant_type|input|input_singles": {"id": "458f43d74574750d", "src": "hda", "uuid": "40c532d0-b53b-4067-a44b-3c4f3e5359b9"}}, "outputs": {"output_quant": {"id": "f90a7f6ae54ae68f", "src": "hda", "uuid": "e7eb2cf0-ee5a-4ed1-a721-a4c49d28e178"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": null, "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon/1.3.0+galaxy1, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon/1.3.0+galaxy1, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon/1.3.0+galaxy1-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/bgruening/salmon/salmon", "tool_version": "1.3.0+galaxy1", "test_index": 6, "time_seconds": 18.34800887107849, "inputs": {"quant_type|refTranscriptSource|index": "hg19_transcript_subset", "quant_type|refTranscriptSource|TranscriptSource": "indexed", "quant_type|input|single_or_paired|input_mate1": {"src": "hda", "id": "a7ce16b52312de4a"}, "quant_type|input|single_or_paired|input_mate2": {"src": "hda", "id": "8a9cbdd7072633e6"}, "quant_type|input|single_or_paired|strandedness": "U", "quant_type|input|single_or_paired|single_or_paired_opts": "paired", "quant_type|qtype": "reads"}, "execution_problem": "parameter 'index': requires a value, but no legal values defined", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_AddCommentsToBam/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_AddCommentsToBam", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 30.085996627807617, "inputs": {"inputFile": {"src": "hda", "id": "5f53d981e14f7124"}, "comments_0|comment": "test1", "validation_stringency": "LENIENT"}, "job": {"model_class": "Job", "id": "5e05d0c82ee10bff", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:28:27.586831", "create_time": "2023-05-24T06:28:14.434672", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_AddCommentsToBam/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-hvmx8", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/9/7/9/dataset_979dd45e-b61d-4505-aadd-fd7cb399f516.dat' 'picard_AddCommentsToBam_bam' &&  picard AddCommentsToBam INPUT='picard_AddCommentsToBam_bam' OUTPUT=\"/galaxy/server/database/objects/1/9/6/dataset_196fe4f0-452e-46d4-bb1f-f8c2e5e7b327.dat\" COMMENT=\"test1\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi` VALIDATION_STRINGENCY=LENIENT", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "comments": "[{\"__index__\": 0, \"comment\": \"test1\"}]"}, "inputs": {"inputFile": {"id": "5f53d981e14f7124", "src": "hda", "uuid": "979dd45e-b61d-4505-aadd-fd7cb399f516"}}, "outputs": {"outFile": {"id": "890323f4491a0336", "src": "hda", "uuid": "196fe4f0-452e-46d4-bb1f-f8c2e5e7b327"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:28:17.052 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:28:17.052 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:28:17", "plugin": "core", "name": "end_epoch", "raw_value": "1684909697.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:28:16", "plugin": "core", "name": "start_epoch", "raw_value": "1684909696.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "3", "plugin": "core", "name": "galaxy_slots", "raw_value": "3.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_AddOrReplaceReadGroups/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_AddOrReplaceReadGroups", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 41.95819139480591, "inputs": {"inputFile": {"src": "hda", "id": "be84a035b8bbb944"}, "read_group_id_conditional|ID": "id-1", "read_group_sm_conditional|SM": "sample-a", "read_group_lb_conditional|LB": "tumor-a", "PL": "ILLUMINA", "PU": "run-1"}, "job": {"model_class": "Job", "id": "842ea43ce4261ee1", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:26:35.473747", "create_time": "2023-05-24T06:26:12.644779", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_AddOrReplaceReadGroups/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-jccl4", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/0/b/d/dataset_0bdaeee7-39d6-4392-a788-d08666f64818.dat' 'picard_ARRG_bam' &&  picard AddOrReplaceReadGroups INPUT='picard_ARRG_bam' \"RGLB=tumor-a\" \"RGPL=ILLUMINA\" \"RGPU=run-1\" \"RGSM=sample-a\" \"RGID=id-1\"    VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi` OUTPUT=\"/galaxy/server/database/objects/d/3/4/dataset_d340e95d-3d54-44df-9ed6-62318ea94e73.dat\"", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "DT": null, "PI": "\"\"", "DS": null, "CN": null, "PU": "\"run-1\"", "PL": "\"ILLUMINA\"", "read_group_lb_conditional": "{\"LB\": \"tumor-a\", \"__current_case__\": 1, \"do_auto_name\": false}", "read_group_sm_conditional": "{\"SM\": \"sample-a\", \"__current_case__\": 1, \"do_auto_name\": false}", "read_group_id_conditional": "{\"ID\": \"id-1\", \"__current_case__\": 1, \"do_auto_name\": false}"}, "inputs": {"inputFile": {"id": "be84a035b8bbb944", "src": "hda", "uuid": "0bdaeee7-39d6-4392-a788-d08666f64818"}}, "outputs": {"outFile": {"id": "1bcf2dbf175c70a3", "src": "hda", "uuid": "d340e95d-3d54-44df-9ed6-62318ea94e73"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:26:23.759 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:26:23.759 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:26:24", "plugin": "core", "name": "end_epoch", "raw_value": "1684909584.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:26:22", "plugin": "core", "name": "start_epoch", "raw_value": "1684909582.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_BedToIntervalList/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_BedToIntervalList", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 34.3400456905365, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "c5b7b9ba41afa5a2"}, "reference_source|reference_source_selector": "history", "inputFile": {"src": "hda", "id": "6ec34fc758a8f91f"}}, "job": {"model_class": "Job", "id": "282b59db8eedb99d", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:29:35.728792", "create_time": "2023-05-24T06:29:22.886919", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_BedToIntervalList/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-b6v2z", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/6/b/b/dataset_6bbf31b5-0c95-4338-bf58-9c79b38fa134.dat' 'picard_BedToIntervalList_bed' &&   ln -s \"/galaxy/server/database/objects/8/9/9/dataset_899aa87a-8980-446d-9078-8b5ed026f12d.dat\" \"localref.fa\" &&   picard CreateSequenceDictionary REFERENCE=\"localref.fa\" OUTPUT=\"localref.dict\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`  &&   picard BedToIntervalList INPUT='picard_BedToIntervalList_bed' OUTPUT=\"/galaxy/server/database/objects/f/c/5/dataset_fc512a8e-d7e7-4513-a21c-aa5f5b3ef140.dat\"  SEQUENCE_DICTIONARY=\"localref.dict\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 91, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "c5b7b9ba41afa5a2", "src": "hda", "uuid": "899aa87a-8980-446d-9078-8b5ed026f12d"}, "inputFile": {"id": "6ec34fc758a8f91f", "src": "hda", "uuid": "6bbf31b5-0c95-4338-bf58-9c79b38fa134"}}, "outputs": {"outFile": {"id": "4d2ee1d4a823dc16", "src": "hda", "uuid": "fc512a8e-d7e7-4513-a21c-aa5f5b3ef140"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:29:25.025 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:29:25.846 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:29:25.025 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:29:25.846 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:29:25", "plugin": "core", "name": "end_epoch", "raw_value": "1684909765.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:29:24", "plugin": "core", "name": "start_epoch", "raw_value": "1684909764.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "3", "plugin": "core", "name": "galaxy_slots", "raw_value": "3.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CASM/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CASM", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 43.01813101768494, "inputs": {"inputFile": {"src": "hda", "id": "5e07d2f987da36d7"}, "reference_source|ref_file": {"src": "hda", "id": "fb3ca269e8b0b883"}, "reference_source|reference_source_selector": "history", "bisulphite": false, "maxinsert": "100000"}, "job": {"model_class": "Job", "id": "f6c2cf194bcfe7b4", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:35:21.659104", "create_time": "2023-05-24T06:35:02.392394", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CASM/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-b584d", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/1/1/6/dataset_116ddb14-103c-4502-b520-91609924c766.dat' 'picard_CASM_bam' &&     ln -s '/galaxy/server/database/objects/7/6/4/dataset_764c8e95-5b3f-4592-afb4-83a069b1bdf7.dat' 'localref.fa' &&   picard CollectAlignmentSummaryMetrics INPUT='picard_CASM_bam' OUTPUT=\"/galaxy/server/database/objects/5/1/4/dataset_514c86eb-b110-42c4-a7bf-c80262619697.dat\" MAX_INSERT_SIZE=100000 METRIC_ACCUMULATION_LEVEL=\"ALL_READS\" IS_BISULFITE_SEQUENCED=\"false\"  REFERENCE_SEQUENCE=\"localref.fa\"  ASSUME_SORTED=\"true\"  VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "maxinsert": "\"100000\"", "adapters": "[]", "bisulphite": "false", "assume_sorted": "true", "metric_accumulation_level": "\"ALL_READS\"", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 158, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"inputFile": {"id": "5e07d2f987da36d7", "src": "hda", "uuid": "116ddb14-103c-4502-b520-91609924c766"}, "ref_file": {"id": "fb3ca269e8b0b883", "src": "hda", "uuid": "764c8e95-5b3f-4592-afb4-83a069b1bdf7"}}, "outputs": {"outFile": {"id": "3273ad47a274acd3", "src": "hda", "uuid": "514c86eb-b110-42c4-a7bf-c80262619697"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:35:09.759 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:35:09.759 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:35:10", "plugin": "core", "name": "end_epoch", "raw_value": "1684910110.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:35:08", "plugin": "core", "name": "start_epoch", "raw_value": "1684910108.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CleanSam/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CleanSam", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 32.503429889678955, "inputs": {"inputFile": {"src": "hda", "id": "3fb7d30318903994"}}, "job": {"model_class": "Job", "id": "2cf4a9cf50e8ac6d", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:34:03.212981", "create_time": "2023-05-24T06:33:49.290277", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CleanSam/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-5cw86", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/3/c/a/dataset_3caff0b4-dacf-4248-9f59-3ba65b5c5263.dat' 'picard_CleanSam_bam' &&  picard CleanSam INPUT='picard_CleanSam_bam' OUTPUT=\"/galaxy/server/database/objects/f/c/1/dataset_fc1aeb80-f41e-4bf5-8cd3-7823229e3245.dat\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi` VALIDATION_STRINGENCY=LENIENT", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\""}, "inputs": {"inputFile": {"id": "3fb7d30318903994", "src": "hda", "uuid": "3caff0b4-dacf-4248-9f59-3ba65b5c5263"}}, "outputs": {"outFile": {"id": "dad8bb74771b5814", "src": "hda", "uuid": "fc1aeb80-f41e-4bf5-8cd3-7823229e3245"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:33:53.146 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:33:53.146 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:33:53", "plugin": "core", "name": "end_epoch", "raw_value": "1684910033.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:33:51", "plugin": "core", "name": "start_epoch", "raw_value": "1684910031.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectBaseDistributionByCycle/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectBaseDistributionByCycle", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 40.07765460014343, "inputs": {"inputFile": {"src": "hda", "id": "aed946dc438d8faf"}, "reference_source|ref_file": {"src": "hda", "id": "21e6b06e0e438097"}, "reference_source|reference_source_selector": "history", "aligned_reads_only": true, "pf_reads_only": true, "assume_sorted": true}, "job": {"model_class": "Job", "id": "dad8bb74771b5814", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:37:01.341277", "create_time": "2023-05-24T06:36:44.260431", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectBaseDistributionByCycle/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-p92ln", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/4/2/b/dataset_42b081df-a79c-497f-8561-65eeb029cfd3.dat' 'picard_CollectBaseDistributionByCycle_bam' &&     ln -s '/galaxy/server/database/objects/4/d/9/dataset_4d9be43a-631e-41ef-8892-6ee4e66c0e76.dat' 'localref.fa' &&   picard CollectBaseDistributionByCycle INPUT='picard_CollectBaseDistributionByCycle_bam' OUTPUT=\"/galaxy/server/database/objects/2/9/2/dataset_29296be5-3c01-491e-8862-394e5404af5f.dat\" CHART_OUTPUT=\"/galaxy/server/database/objects/8/5/4/dataset_854aea44-d85a-4fdd-bf4d-2649892c47d4.dat\" ALIGNED_READS_ONLY=\"true\" PF_READS_ONLY=\"true\" REFERENCE_SEQUENCE=\"localref.fa\" ASSUME_SORTED=\"true\"  VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "assume_sorted": "true", "pf_reads_only": "true", "aligned_reads_only": "true", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 178, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"inputFile": {"id": "aed946dc438d8faf", "src": "hda", "uuid": "42b081df-a79c-497f-8561-65eeb029cfd3"}, "ref_file": {"id": "21e6b06e0e438097", "src": "hda", "uuid": "4d9be43a-631e-41ef-8892-6ee4e66c0e76"}}, "outputs": {"outFile": {"id": "2b56e667a12c9675", "src": "hda", "uuid": "29296be5-3c01-491e-8862-394e5404af5f"}, "pdfFile": {"id": "165732a2a8cd044a", "src": "hda", "uuid": "854aea44-d85a-4fdd-bf4d-2649892c47d4"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:36:47.678 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\nERROR\t2023-05-24 06:36:47\tProcessExecutor\tDuring startup - Warning messages:\nERROR\t2023-05-24 06:36:47\tProcessExecutor\t1: Setting LC_CTYPE failed, using \"C\" \nERROR\t2023-05-24 06:36:47\tProcessExecutor\t2: Setting LC_COLLATE failed, using \"C\" \nERROR\t2023-05-24 06:36:47\tProcessExecutor\t3: Setting LC_TIME failed, using \"C\" \nERROR\t2023-05-24 06:36:47\tProcessExecutor\t4: Setting LC_MESSAGES failed, using \"C\" \nERROR\t2023-05-24 06:36:47\tProcessExecutor\t5: Setting LC_MONETARY failed, using \"C\" \nERROR\t2023-05-24 06:36:47\tProcessExecutor\t6: Setting LC_PAPER failed, using \"C\" \nERROR\t2023-05-24 06:36:47\tProcessExecutor\t7: Setting LC_MEASUREMENT failed, using \"C\" \n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:36:47.678 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\nERROR\t2023-05-24 06:36:47\tProcessExecutor\tDuring startup - Warning messages:\nERROR\t2023-05-24 06:36:47\tProcessExecutor\t1: Setting LC_CTYPE failed, using \"C\" \nERROR\t2023-05-24 06:36:47\tProcessExecutor\t2: Setting LC_COLLATE failed, using \"C\" \nERROR\t2023-05-24 06:36:47\tProcessExecutor\t3: Setting LC_TIME failed, using \"C\" \nERROR\t2023-05-24 06:36:47\tProcessExecutor\t4: Setting LC_MESSAGES failed, using \"C\" \nERROR\t2023-05-24 06:36:47\tProcessExecutor\t5: Setting LC_MONETARY failed, using \"C\" \nERROR\t2023-05-24 06:36:47\tProcessExecutor\t6: Setting LC_PAPER failed, using \"C\" \nERROR\t2023-05-24 06:36:47\tProcessExecutor\t7: Setting LC_MEASUREMENT failed, using \"C\" \n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:36:48", "plugin": "core", "name": "end_epoch", "raw_value": "1684910208.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:36:46", "plugin": "core", "name": "start_epoch", "raw_value": "1684910206.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "3", "plugin": "core", "name": "galaxy_slots", "raw_value": "3.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectGcBiasMetrics/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectGcBiasMetrics", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 36.17903518676758, "inputs": {"inputFile": {"src": "hda", "id": "d8ac31501a512c63"}, "reference_source|ref_file": {"src": "hda", "id": "bb620dbfe55e8c70"}, "reference_source|reference_source_selector": "history", "window_size": "100", "minimum_genome_fraction": "0.00005", "is_bisulfite_sequenced": true, "assume_sorted": true}, "job": {"model_class": "Job", "id": "669880c7c6210d42", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:29:44.038910", "create_time": "2023-05-24T06:29:30.670409", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectGcBiasMetrics/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-fxn5p", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/b/4/c/dataset_b4c7c508-281c-4939-8601-f89985f6bae8.dat' 'picard_CollectGcBiasMetrics_bam' &&     ln -s '/galaxy/server/database/objects/6/1/b/dataset_61b0cc95-0859-4bba-a0d1-0980fe629b2a.dat' 'localref.fa' &&   picard CollectGcBiasMetrics INPUT='picard_CollectGcBiasMetrics_bam' OUTPUT=\"/galaxy/server/database/objects/1/0/1/dataset_101fb81b-716a-401c-ba00-348b3e86e07e.dat\" CHART_OUTPUT=\"/galaxy/server/database/objects/b/e/6/dataset_be62a1bf-1cdf-4cda-bc5f-6657f059f4d4.dat\" SUMMARY_OUTPUT=\"/galaxy/server/database/objects/2/6/4/dataset_264122dc-f246-4094-83d3-1f10e7bd63e7.dat\" WINDOW_SIZE=\"100\" MINIMUM_GENOME_FRACTION=\"5e-05\" IS_BISULFITE_SEQUENCED=\"true\" REFERENCE_SEQUENCE=\"localref.fa\" ASSUME_SORTED=\"true\"  VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "assume_sorted": "true", "is_bisulfite_sequenced": "true", "minimum_genome_fraction": "\"5e-05\"", "window_size": "\"100\"", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 94, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"inputFile": {"id": "d8ac31501a512c63", "src": "hda", "uuid": "b4c7c508-281c-4939-8601-f89985f6bae8"}, "ref_file": {"id": "bb620dbfe55e8c70", "src": "hda", "uuid": "61b0cc95-0859-4bba-a0d1-0980fe629b2a"}}, "outputs": {"summaryFile": {"id": "6d6cde4867626064", "src": "hda", "uuid": "264122dc-f246-4094-83d3-1f10e7bd63e7"}, "outFile": {"id": "22424b19a20f8486", "src": "hda", "uuid": "101fb81b-716a-401c-ba00-348b3e86e07e"}, "pdfFile": {"id": "97e5a2fb110cf8bf", "src": "hda", "uuid": "be62a1bf-1cdf-4cda-bc5f-6657f059f4d4"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:29:33.357 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\nERROR\t2023-05-24 06:29:33\tProcessExecutor\tDuring startup - Warning messages:\nERROR\t2023-05-24 06:29:33\tProcessExecutor\t1: Setting LC_CTYPE failed, using \"C\" \nERROR\t2023-05-24 06:29:33\tProcessExecutor\t2: Setting LC_COLLATE failed, using \"C\" \nERROR\t2023-05-24 06:29:33\tProcessExecutor\t3: Setting LC_TIME failed, using \"C\" \nERROR\t2023-05-24 06:29:33\tProcessExecutor\t4: Setting LC_MESSAGES failed, using \"C\" \nERROR\t2023-05-24 06:29:33\tProcessExecutor\t5: Setting LC_MONETARY failed, using \"C\" \nERROR\t2023-05-24 06:29:33\tProcessExecutor\t6: Setting LC_PAPER failed, using \"C\" \nERROR\t2023-05-24 06:29:33\tProcessExecutor\t7: Setting LC_MEASUREMENT failed, using \"C\" \n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:29:33.357 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\nERROR\t2023-05-24 06:29:33\tProcessExecutor\tDuring startup - Warning messages:\nERROR\t2023-05-24 06:29:33\tProcessExecutor\t1: Setting LC_CTYPE failed, using \"C\" \nERROR\t2023-05-24 06:29:33\tProcessExecutor\t2: Setting LC_COLLATE failed, using \"C\" \nERROR\t2023-05-24 06:29:33\tProcessExecutor\t3: Setting LC_TIME failed, using \"C\" \nERROR\t2023-05-24 06:29:33\tProcessExecutor\t4: Setting LC_MESSAGES failed, using \"C\" \nERROR\t2023-05-24 06:29:33\tProcessExecutor\t5: Setting LC_MONETARY failed, using \"C\" \nERROR\t2023-05-24 06:29:33\tProcessExecutor\t6: Setting LC_PAPER failed, using \"C\" \nERROR\t2023-05-24 06:29:33\tProcessExecutor\t7: Setting LC_MEASUREMENT failed, using \"C\" \n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:29:33", "plugin": "core", "name": "end_epoch", "raw_value": "1684909773.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:29:32", "plugin": "core", "name": "start_epoch", "raw_value": "1684909772.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "3", "plugin": "core", "name": "galaxy_slots", "raw_value": "3.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectHsMetrics/2.18.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectHsMetrics", "tool_version": "2.18.2", "test_index": 0, "time_seconds": 40.67649817466736, "inputs": {"inputFile": {"src": "hda", "id": "8da4c9e55e8cb4b1"}, "baitFile": {"src": "hda", "id": "d7686b32e3f2c2f0"}, "targetFile": {"src": "hda", "id": "122ff23e4380a2bc"}, "minimum_mapping_quality": "20", "minimum_base_quality": "20", "coverage_cap": "200", "clip_overlapping_reads": true}, "job": {"model_class": "Job", "id": "3952b0fb5d550946", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:38:47.304558", "create_time": "2023-05-24T06:38:31.565257", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectHsMetrics/2.18.2", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-b4lpd", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/3/6/5/dataset_365a60fb-0188-48e7-b62c-fb537b414bb8.dat' 'picard_CollectHsMetrics_bam' &&   picard CollectHsMetrics INPUT='picard_CollectHsMetrics_bam' OUTPUT='/galaxy/server/database/objects/6/1/8/dataset_6183e306-1ed7-4bfb-8bf0-816cabc50861.dat' MINIMUM_MAPPING_QUALITY=20 MINIMUM_BASE_QUALITY=20 COVERAGE_CAP=200 CLIP_OVERLAPPING_READS=true BAIT_INTERVALS='/galaxy/server/database/objects/2/6/1/dataset_26195f90-18c5-466c-a444-112855d54cec.dat' TARGET_INTERVALS='/galaxy/server/database/objects/b/1/3/dataset_b13bfc15-20dd-4bea-972d-85d3b51f37a4.dat' VALIDATION_STRINGENCY=LENIENT QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "clip_overlapping_reads": "true", "coverage_cap": "\"200\"", "minimum_base_quality": "\"20\"", "minimum_mapping_quality": "\"20\""}, "inputs": {"inputFile": {"id": "8da4c9e55e8cb4b1", "src": "hda", "uuid": "365a60fb-0188-48e7-b62c-fb537b414bb8"}, "baitFile": {"id": "d7686b32e3f2c2f0", "src": "hda", "uuid": "26195f90-18c5-466c-a444-112855d54cec"}, "targetFile": {"id": "122ff23e4380a2bc", "src": "hda", "uuid": "b13bfc15-20dd-4bea-972d-85d3b51f37a4"}}, "outputs": {"outFile": {"id": "4c36a522931909c0", "src": "hda", "uuid": "6183e306-1ed7-4bfb-8bf0-816cabc50861"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:38:34.359 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:38:34.359 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:38:35", "plugin": "core", "name": "end_epoch", "raw_value": "1684910315.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:38:33", "plugin": "core", "name": "start_epoch", "raw_value": "1684910313.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "3", "plugin": "core", "name": "galaxy_slots", "raw_value": "3.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectInsertSizeMetrics/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectInsertSizeMetrics", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 33.455883741378784, "inputs": {"inputFile": {"src": "hda", "id": "b08c88c538063fd1"}, "reference_source|ref_file": {"src": "hda", "id": "b148062e5f47881a"}, "reference_source|reference_source_selector": "history", "deviations": "10.0", "hist_width": "500", "min_pct": "0.05", "assume_sorted": true, "metric_accumulation_level": "ALL_READS"}, "job": {"model_class": "Job", "id": "890323f4491a0336", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:29:01.237835", "create_time": "2023-05-24T06:28:48.053007", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectInsertSizeMetrics/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-cncmg", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/e/2/f/dataset_e2fde638-f3aa-4bc5-b977-496289871ba9.dat' 'picard_CollectInsertSizeMetrics_bam' &&     ln -s '/galaxy/server/database/objects/8/e/4/dataset_8e4b169b-25df-4a93-b244-18614bc9469d.dat' 'localref.fa' &&   picard CollectInsertSizeMetrics INPUT='picard_CollectInsertSizeMetrics_bam' OUTPUT=\"/galaxy/server/database/objects/0/4/8/dataset_04856d6a-bb16-4675-9351-fced51269b83.dat\" HISTOGRAM_FILE=\"/galaxy/server/database/objects/d/7/f/dataset_d7fcbdf0-5719-4cab-a64e-adc5b6f3fd99.dat\" DEVIATIONS=\"10.0\"  HISTOGRAM_WIDTH=\"500\"  MINIMUM_PCT=\"0.05\" REFERENCE_SEQUENCE=\"localref.fa\" ASSUME_SORTED=\"true\" METRIC_ACCUMULATION_LEVEL=\"ALL_READS\"  VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "metric_accumulation_level": "\"ALL_READS\"", "assume_sorted": "true", "min_pct": "\"0.05\"", "hist_width": "\"500\"", "deviations": "\"10.0\"", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 85, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"inputFile": {"id": "b08c88c538063fd1", "src": "hda", "uuid": "e2fde638-f3aa-4bc5-b977-496289871ba9"}, "ref_file": {"id": "b148062e5f47881a", "src": "hda", "uuid": "8e4b169b-25df-4a93-b244-18614bc9469d"}}, "outputs": {"outFile": {"id": "282b59db8eedb99d", "src": "hda", "uuid": "04856d6a-bb16-4675-9351-fced51269b83"}, "histFile": {"id": "669880c7c6210d42", "src": "hda", "uuid": "d7fcbdf0-5719-4cab-a64e-adc5b6f3fd99"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:28:51.524 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\nERROR\t2023-05-24 06:28:51\tProcessExecutor\tDuring startup - Warning messages:\nERROR\t2023-05-24 06:28:51\tProcessExecutor\t1: Setting LC_CTYPE failed, using \"C\" \nERROR\t2023-05-24 06:28:51\tProcessExecutor\t2: Setting LC_COLLATE failed, using \"C\" \nERROR\t2023-05-24 06:28:51\tProcessExecutor\t3: Setting LC_TIME failed, using \"C\" \nERROR\t2023-05-24 06:28:51\tProcessExecutor\t4: Setting LC_MESSAGES failed, using \"C\" \nERROR\t2023-05-24 06:28:51\tProcessExecutor\t5: Setting LC_MONETARY failed, using \"C\" \nERROR\t2023-05-24 06:28:51\tProcessExecutor\t6: Setting LC_PAPER failed, using \"C\" \nERROR\t2023-05-24 06:28:51\tProcessExecutor\t7: Setting LC_MEASUREMENT failed, using \"C\" \n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:28:51.524 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\nERROR\t2023-05-24 06:28:51\tProcessExecutor\tDuring startup - Warning messages:\nERROR\t2023-05-24 06:28:51\tProcessExecutor\t1: Setting LC_CTYPE failed, using \"C\" \nERROR\t2023-05-24 06:28:51\tProcessExecutor\t2: Setting LC_COLLATE failed, using \"C\" \nERROR\t2023-05-24 06:28:51\tProcessExecutor\t3: Setting LC_TIME failed, using \"C\" \nERROR\t2023-05-24 06:28:51\tProcessExecutor\t4: Setting LC_MESSAGES failed, using \"C\" \nERROR\t2023-05-24 06:28:51\tProcessExecutor\t5: Setting LC_MONETARY failed, using \"C\" \nERROR\t2023-05-24 06:28:51\tProcessExecutor\t6: Setting LC_PAPER failed, using \"C\" \nERROR\t2023-05-24 06:28:51\tProcessExecutor\t7: Setting LC_MEASUREMENT failed, using \"C\" \n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:28:52", "plugin": "core", "name": "end_epoch", "raw_value": "1684909732.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:28:50", "plugin": "core", "name": "start_epoch", "raw_value": "1684909730.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectRnaSeqMetrics/2.18.2.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectRnaSeqMetrics", "tool_version": "2.18.2.2", "test_index": 0, "time_seconds": 62.91944241523743, "inputs": {"inputFile": {"src": "hda", "id": "a01b0036964d7294"}, "reference_source|ref_file": {"src": "hda", "id": "bbe56c88c47fef44"}, "reference_source|reference_source_selector": "history", "gene_reference_source|refFlat": {"src": "hda", "id": "b57e8404753aa4c5"}, "gene_reference_source|gene_reference_source_selector": "refflat", "strand_specificity": "NONE", "minimum_length": "500", "rrna_fragment_percentage": "0.8", "metric_accumulation_level": "ALL_READS", "assume_sorted": true}, "job": {"model_class": "Job", "id": "6d6cde4867626064", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:30:38.367586", "create_time": "2023-05-24T06:30:00.990725", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectRnaSeqMetrics/2.18.2.2", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-bfpgv", "command_line": "ln -f -s '/galaxy/server/database/objects/0/a/f/dataset_0affd3a8-8cea-4b1c-bf43-b09d22bd8576.dat' 'picard_CollectRnaSeqMetrics_bam' &&     ln -s '/galaxy/server/database/objects/1/7/2/dataset_172041fc-6f00-48f6-90c4-42a8fa16794b.dat' 'localref.fa' &&    grep -v '^#' /galaxy/server/database/objects/2/5/b/dataset_25b6ddf8-a1fb-486f-a3f8-e1d0d9934986.dat | awk '{if ($3 == \"+\" || $3 == \"-\") print $11\"\\t\"$1\"\\t\"$2\"\\t\"$3\"\\t\"$4\"\\t\"$5\"\\t\"$6\"\\t\"$7\"\\t\"$8\"\\t\"$9\"\\t\"$10; else print}' > refFlat.tab &&    _JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&  picard CollectRnaSeqMetrics REF_FLAT=refFlat.tab   STRAND_SPECIFICITY=\"NONE\" MINIMUM_LENGTH=\"500\" CHART_OUTPUT=\"/galaxy/server/database/objects/f/8/9/dataset_f890fb10-863b-44d2-832f-d4a1e370c6cc.dat\"   RRNA_FRAGMENT_PERCENTAGE=\"0.8\" METRIC_ACCUMULATION_LEVEL=\"ALL_READS\" INPUT='picard_CollectRnaSeqMetrics_bam' OUTPUT=\"/galaxy/server/database/objects/b/c/2/dataset_bc2b874a-4333-4591-85b5-0cbb20033d1d.dat\" REFERENCE_SEQUENCE=\"localref.fa\" ASSUME_SORTED=\"true\"  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi` VALIDATION_STRINGENCY=LENIENT", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "assume_sorted": "true", "metric_accumulation_level": "\"ALL_READS\"", "rrna_fragment_percentage": "\"0.8\"", "ignore_list": "[]", "minimum_length": "\"500\"", "strand_specificity": "\"NONE\"", "ribosomal_intervals": null, "gene_reference_source": "{\"__current_case__\": 1, \"gene_reference_source_selector\": \"refflat\", \"refFlat\": {\"values\": [{\"id\": 101, \"src\": \"hda\"}]}}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 103, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"inputFile": {"id": "a01b0036964d7294", "src": "hda", "uuid": "0affd3a8-8cea-4b1c-bf43-b09d22bd8576"}, "ref_file": {"id": "bbe56c88c47fef44", "src": "hda", "uuid": "172041fc-6f00-48f6-90c4-42a8fa16794b"}, "refFlat": {"id": "b57e8404753aa4c5", "src": "hda", "uuid": "25b6ddf8-a1fb-486f-a3f8-e1d0d9934986"}}, "outputs": {"pdfFile": {"id": "f7764be0b5a1b7bc", "src": "hda", "uuid": "f890fb10-863b-44d2-832f-d4a1e370c6cc"}, "outFile": {"id": "6c3d57c9cdc64139", "src": "hda", "uuid": "bc2b874a-4333-4591-85b5-0cbb20033d1d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:30:23.546 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 24 06:30:23 GMT 2023] CollectRnaSeqMetrics REF_FLAT=refFlat.tab STRAND_SPECIFICITY=NONE MINIMUM_LENGTH=500 CHART_OUTPUT=/galaxy/server/database/objects/f/8/9/dataset_f890fb10-863b-44d2-832f-d4a1e370c6cc.dat RRNA_FRAGMENT_PERCENTAGE=0.8 METRIC_ACCUMULATION_LEVEL=[ALL_READS] INPUT=picard_CollectRnaSeqMetrics_bam OUTPUT=/galaxy/server/database/objects/b/c/2/dataset_bc2b874a-4333-4591-85b5-0cbb20033d1d.dat ASSUME_SORTED=true TMP_DIR=[/galaxy/server/database/jobs_directory/000/96/tmp] VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=localref.fa    STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 24 06:30:23 GMT 2023] Executing as root@gxy-bfpgv-sf728 on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\nINFO\t2023-05-24 06:30:23\tCollectRnaSeqMetrics\tLoaded 20 genes.\nINFO\t2023-05-24 06:30:23\tRExecutor\tExecuting R script via command: Rscript /tmp/script3760453842807954192.R /galaxy/server/database/objects/b/c/2/dataset_bc2b874a-4333-4591-85b5-0cbb20033d1d.dat /galaxy/server/database/objects/f/8/9/dataset_f890fb10-863b-44d2-832f-d4a1e370c6cc.dat picard_CollectRnaSeqMetrics_bam \nERROR\t2023-05-24 06:30:24\tProcessExecutor\tDuring startup - Warning messages:\nERROR\t2023-05-24 06:30:24\tProcessExecutor\t1: Setting LC_CTYPE failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t2: Setting LC_COLLATE failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t3: Setting LC_TIME failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t4: Setting LC_MESSAGES failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t5: Setting LC_MONETARY failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t6: Setting LC_PAPER failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t7: Setting LC_MEASUREMENT failed, using \"C\" \nINFO\t2023-05-24 06:30:24\tProcessExecutor\tnull device \nINFO\t2023-05-24 06:30:24\tProcessExecutor\t          1 \n[Wed May 24 06:30:24 GMT 2023] picard.analysis.CollectRnaSeqMetrics done. Elapsed time: 0.01 minutes.\nRuntime.totalMemory()=1029177344\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:30:23.546 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 24 06:30:23 GMT 2023] CollectRnaSeqMetrics REF_FLAT=refFlat.tab STRAND_SPECIFICITY=NONE MINIMUM_LENGTH=500 CHART_OUTPUT=/galaxy/server/database/objects/f/8/9/dataset_f890fb10-863b-44d2-832f-d4a1e370c6cc.dat RRNA_FRAGMENT_PERCENTAGE=0.8 METRIC_ACCUMULATION_LEVEL=[ALL_READS] INPUT=picard_CollectRnaSeqMetrics_bam OUTPUT=/galaxy/server/database/objects/b/c/2/dataset_bc2b874a-4333-4591-85b5-0cbb20033d1d.dat ASSUME_SORTED=true TMP_DIR=[/galaxy/server/database/jobs_directory/000/96/tmp] VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=localref.fa    STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 24 06:30:23 GMT 2023] Executing as root@gxy-bfpgv-sf728 on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\nINFO\t2023-05-24 06:30:23\tCollectRnaSeqMetrics\tLoaded 20 genes.\nINFO\t2023-05-24 06:30:23\tRExecutor\tExecuting R script via command: Rscript /tmp/script3760453842807954192.R /galaxy/server/database/objects/b/c/2/dataset_bc2b874a-4333-4591-85b5-0cbb20033d1d.dat /galaxy/server/database/objects/f/8/9/dataset_f890fb10-863b-44d2-832f-d4a1e370c6cc.dat picard_CollectRnaSeqMetrics_bam \nERROR\t2023-05-24 06:30:24\tProcessExecutor\tDuring startup - Warning messages:\nERROR\t2023-05-24 06:30:24\tProcessExecutor\t1: Setting LC_CTYPE failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t2: Setting LC_COLLATE failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t3: Setting LC_TIME failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t4: Setting LC_MESSAGES failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t5: Setting LC_MONETARY failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t6: Setting LC_PAPER failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t7: Setting LC_MEASUREMENT failed, using \"C\" \nINFO\t2023-05-24 06:30:24\tProcessExecutor\tnull device \nINFO\t2023-05-24 06:30:24\tProcessExecutor\t          1 \n[Wed May 24 06:30:24 GMT 2023] picard.analysis.CollectRnaSeqMetrics done. Elapsed time: 0.01 minutes.\nRuntime.totalMemory()=1029177344\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:30:24", "plugin": "core", "name": "end_epoch", "raw_value": "1684909824.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:30:22", "plugin": "core", "name": "start_epoch", "raw_value": "1684909822.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectRnaSeqMetrics/2.18.2.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectRnaSeqMetrics", "tool_version": "2.18.2.2", "test_index": 1, "time_seconds": 54.26188826560974, "inputs": {"inputFile": {"src": "hda", "id": "a01b0036964d7294"}, "reference_source|ref_file": {"src": "hda", "id": "bbe56c88c47fef44"}, "reference_source|reference_source_selector": "history", "gene_reference_source|refFlat": {"src": "hda", "id": "a213a935bed3a493"}, "gene_reference_source|gene_reference_source_selector": "refflat", "strand_specificity": "NONE", "minimum_length": "500", "rrna_fragment_percentage": "0.8", "metric_accumulation_level": "ALL_READS", "assume_sorted": true}, "job": {"model_class": "Job", "id": "22424b19a20f8486", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:30:38.378636", "create_time": "2023-05-24T06:30:09.108246", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectRnaSeqMetrics/2.18.2.2", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-fczjn", "command_line": "ln -f -s '/galaxy/server/database/objects/0/a/f/dataset_0affd3a8-8cea-4b1c-bf43-b09d22bd8576.dat' 'picard_CollectRnaSeqMetrics_bam' &&     ln -s '/galaxy/server/database/objects/1/7/2/dataset_172041fc-6f00-48f6-90c4-42a8fa16794b.dat' 'localref.fa' &&    grep -v '^#' /galaxy/server/database/objects/7/a/e/dataset_7ae66a65-79bf-4d27-b231-a424a5d7dfa2.dat | awk '{if ($3 == \"+\" || $3 == \"-\") print $11\"\\t\"$1\"\\t\"$2\"\\t\"$3\"\\t\"$4\"\\t\"$5\"\\t\"$6\"\\t\"$7\"\\t\"$8\"\\t\"$9\"\\t\"$10; else print}' > refFlat.tab &&    _JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&  picard CollectRnaSeqMetrics REF_FLAT=refFlat.tab   STRAND_SPECIFICITY=\"NONE\" MINIMUM_LENGTH=\"500\" CHART_OUTPUT=\"/galaxy/server/database/objects/a/c/d/dataset_acd4a938-7cbc-4f89-99b5-c37c7ebcea30.dat\"   RRNA_FRAGMENT_PERCENTAGE=\"0.8\" METRIC_ACCUMULATION_LEVEL=\"ALL_READS\" INPUT='picard_CollectRnaSeqMetrics_bam' OUTPUT=\"/galaxy/server/database/objects/4/c/8/dataset_4c81da39-135f-4450-b709-0bebc156e9b9.dat\" REFERENCE_SEQUENCE=\"localref.fa\" ASSUME_SORTED=\"true\"  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi` VALIDATION_STRINGENCY=LENIENT", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "assume_sorted": "true", "metric_accumulation_level": "\"ALL_READS\"", "rrna_fragment_percentage": "\"0.8\"", "ignore_list": "[]", "minimum_length": "\"500\"", "strand_specificity": "\"NONE\"", "ribosomal_intervals": null, "gene_reference_source": "{\"__current_case__\": 1, \"gene_reference_source_selector\": \"refflat\", \"refFlat\": {\"values\": [{\"id\": 104, \"src\": \"hda\"}]}}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 103, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"inputFile": {"id": "a01b0036964d7294", "src": "hda", "uuid": "0affd3a8-8cea-4b1c-bf43-b09d22bd8576"}, "ref_file": {"id": "bbe56c88c47fef44", "src": "hda", "uuid": "172041fc-6f00-48f6-90c4-42a8fa16794b"}, "refFlat": {"id": "a213a935bed3a493", "src": "hda", "uuid": "7ae66a65-79bf-4d27-b231-a424a5d7dfa2"}}, "outputs": {"pdfFile": {"id": "3944869dbdcb8c08", "src": "hda", "uuid": "acd4a938-7cbc-4f89-99b5-c37c7ebcea30"}, "outFile": {"id": "1b3bbf0f62e19467", "src": "hda", "uuid": "4c81da39-135f-4450-b709-0bebc156e9b9"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:30:23.852 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 24 06:30:23 GMT 2023] CollectRnaSeqMetrics REF_FLAT=refFlat.tab STRAND_SPECIFICITY=NONE MINIMUM_LENGTH=500 CHART_OUTPUT=/galaxy/server/database/objects/a/c/d/dataset_acd4a938-7cbc-4f89-99b5-c37c7ebcea30.dat RRNA_FRAGMENT_PERCENTAGE=0.8 METRIC_ACCUMULATION_LEVEL=[ALL_READS] INPUT=picard_CollectRnaSeqMetrics_bam OUTPUT=/galaxy/server/database/objects/4/c/8/dataset_4c81da39-135f-4450-b709-0bebc156e9b9.dat ASSUME_SORTED=true TMP_DIR=[/galaxy/server/database/jobs_directory/000/97/tmp] VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=localref.fa    STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 24 06:30:23 GMT 2023] Executing as root@gxy-fczjn-g9ncm on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\nINFO\t2023-05-24 06:30:23\tCollectRnaSeqMetrics\tLoaded 20 genes.\nINFO\t2023-05-24 06:30:24\tRExecutor\tExecuting R script via command: Rscript /tmp/script7692815814775569888.R /galaxy/server/database/objects/4/c/8/dataset_4c81da39-135f-4450-b709-0bebc156e9b9.dat /galaxy/server/database/objects/a/c/d/dataset_acd4a938-7cbc-4f89-99b5-c37c7ebcea30.dat picard_CollectRnaSeqMetrics_bam \nERROR\t2023-05-24 06:30:24\tProcessExecutor\tDuring startup - Warning messages:\nERROR\t2023-05-24 06:30:24\tProcessExecutor\t1: Setting LC_CTYPE failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t2: Setting LC_COLLATE failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t3: Setting LC_TIME failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t4: Setting LC_MESSAGES failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t5: Setting LC_MONETARY failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t6: Setting LC_PAPER failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t7: Setting LC_MEASUREMENT failed, using \"C\" \nINFO\t2023-05-24 06:30:24\tProcessExecutor\tnull device \nINFO\t2023-05-24 06:30:24\tProcessExecutor\t          1 \n[Wed May 24 06:30:24 GMT 2023] picard.analysis.CollectRnaSeqMetrics done. Elapsed time: 0.01 minutes.\nRuntime.totalMemory()=1029177344\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:30:23.852 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 24 06:30:23 GMT 2023] CollectRnaSeqMetrics REF_FLAT=refFlat.tab STRAND_SPECIFICITY=NONE MINIMUM_LENGTH=500 CHART_OUTPUT=/galaxy/server/database/objects/a/c/d/dataset_acd4a938-7cbc-4f89-99b5-c37c7ebcea30.dat RRNA_FRAGMENT_PERCENTAGE=0.8 METRIC_ACCUMULATION_LEVEL=[ALL_READS] INPUT=picard_CollectRnaSeqMetrics_bam OUTPUT=/galaxy/server/database/objects/4/c/8/dataset_4c81da39-135f-4450-b709-0bebc156e9b9.dat ASSUME_SORTED=true TMP_DIR=[/galaxy/server/database/jobs_directory/000/97/tmp] VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=localref.fa    STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 24 06:30:23 GMT 2023] Executing as root@gxy-fczjn-g9ncm on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\nINFO\t2023-05-24 06:30:23\tCollectRnaSeqMetrics\tLoaded 20 genes.\nINFO\t2023-05-24 06:30:24\tRExecutor\tExecuting R script via command: Rscript /tmp/script7692815814775569888.R /galaxy/server/database/objects/4/c/8/dataset_4c81da39-135f-4450-b709-0bebc156e9b9.dat /galaxy/server/database/objects/a/c/d/dataset_acd4a938-7cbc-4f89-99b5-c37c7ebcea30.dat picard_CollectRnaSeqMetrics_bam \nERROR\t2023-05-24 06:30:24\tProcessExecutor\tDuring startup - Warning messages:\nERROR\t2023-05-24 06:30:24\tProcessExecutor\t1: Setting LC_CTYPE failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t2: Setting LC_COLLATE failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t3: Setting LC_TIME failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t4: Setting LC_MESSAGES failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t5: Setting LC_MONETARY failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t6: Setting LC_PAPER failed, using \"C\" \nERROR\t2023-05-24 06:30:24\tProcessExecutor\t7: Setting LC_MEASUREMENT failed, using \"C\" \nINFO\t2023-05-24 06:30:24\tProcessExecutor\tnull device \nINFO\t2023-05-24 06:30:24\tProcessExecutor\t          1 \n[Wed May 24 06:30:24 GMT 2023] picard.analysis.CollectRnaSeqMetrics done. Elapsed time: 0.01 minutes.\nRuntime.totalMemory()=1029177344\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:30:24", "plugin": "core", "name": "end_epoch", "raw_value": "1684909824.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:30:22", "plugin": "core", "name": "start_epoch", "raw_value": "1684909822.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectRnaSeqMetrics/2.18.2.2-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectRnaSeqMetrics", "tool_version": "2.18.2.2", "test_index": 2, "time_seconds": 11.277031183242798, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectRnaSeqMetrics/2.18.2.2-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectRnaSeqMetrics", "tool_version": "2.18.2.2", "test_index": 3, "time_seconds": 38.77472138404846, "inputs": {"inputFile": {"src": "hda", "id": "923316546d873c32"}, "reference_source|ref_file": {"src": "hda", "id": "3c05878818bd5112"}, "reference_source|reference_source_selector": "history", "gene_reference_source|refFlat": {"src": "hda", "id": "671c1a8cc4b77fae"}, "gene_reference_source|gene_reference_source_selector": "gtf", "strand_specificity": "NONE", "minimum_length": "500", "rrna_fragment_percentage": "0.8", "metric_accumulation_level": "ALL_READS", "assume_sorted": true}, "job": {"model_class": "Job", "id": "f7764be0b5a1b7bc", "state": "error", "exit_code": null, "update_time": "2023-05-24T06:31:17.616014", "create_time": "2023-05-24T06:31:09.711963", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectRnaSeqMetrics/2.18.2.2", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-b946n", "command_line": "ln -f -s '/galaxy/server/database/objects/6/9/1/dataset_6917e125-b75c-498f-a7c5-01b323817693.dat' 'picard_CollectRnaSeqMetrics_bam' &&     ln -s '/galaxy/server/database/objects/4/d/e/dataset_4decfc2f-9358-4dfe-8a0c-de48b0439fbb.dat' 'localref.fa' &&    gff3ToGenePred '/galaxy/server/database/objects/c/c/2/dataset_cc2efad5-7ab8-49c1-8cd1-daf0be88425b.dat' refFlat.tab.raw && grep -v '^#' refFlat.tab.raw | awk '{print $12\"\\t\"$1\"\\t\"$2\"\\t\"$3\"\\t\"$4\"\\t\"$5\"\\t\"$6\"\\t\"$7\"\\t\"$8\"\\t\"$9\"\\t\"$10}' > refFlat.tab &&    _JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&  picard CollectRnaSeqMetrics REF_FLAT=refFlat.tab   STRAND_SPECIFICITY=\"NONE\" MINIMUM_LENGTH=\"500\" CHART_OUTPUT=\"/galaxy/server/database/objects/0/e/4/dataset_0e48e54e-0791-4d3d-9236-f8da43717d78.dat\"   RRNA_FRAGMENT_PERCENTAGE=\"0.8\" METRIC_ACCUMULATION_LEVEL=\"ALL_READS\" INPUT='picard_CollectRnaSeqMetrics_bam' OUTPUT=\"/galaxy/server/database/objects/6/b/2/dataset_6b27888c-611e-4e4c-a6f8-a1b38a90e894.dat\" REFERENCE_SEQUENCE=\"localref.fa\" ASSUME_SORTED=\"true\"  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi` VALIDATION_STRINGENCY=LENIENT", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "assume_sorted": "true", "metric_accumulation_level": "\"ALL_READS\"", "rrna_fragment_percentage": "\"0.8\"", "ignore_list": "[]", "minimum_length": "\"500\"", "strand_specificity": "\"NONE\"", "ribosomal_intervals": null, "gene_reference_source": "{\"__current_case__\": 0, \"gene_reference_source_selector\": \"gtf\", \"refFlat\": {\"values\": [{\"id\": 114, \"src\": \"hda\"}]}}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 112, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"inputFile": {"id": "923316546d873c32", "src": "hda", "uuid": "6917e125-b75c-498f-a7c5-01b323817693"}, "ref_file": {"id": "3c05878818bd5112", "src": "hda", "uuid": "4decfc2f-9358-4dfe-8a0c-de48b0439fbb"}, "refFlat": {"id": "671c1a8cc4b77fae", "src": "hda", "uuid": "cc2efad5-7ab8-49c1-8cd1-daf0be88425b"}}, "outputs": {"pdfFile": {"id": "dfff26eca9d73267", "src": "hda", "uuid": "0e48e54e-0791-4d3d-9236-f8da43717d78"}, "outFile": {"id": "2686d396c6306a28", "src": "hda", "uuid": "6b27888c-611e-4e4c-a6f8-a1b38a90e894"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": null, "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectRnaSeqMetrics/2.18.2.2, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectRnaSeqMetrics/2.18.2.2, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectWgsMetrics/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectWgsMetrics", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 40.324950218200684, "inputs": {"inputFile": {"src": "hda", "id": "d11a5f77347b26c7"}, "reference_source|ref_file": {"src": "hda", "id": "b225724d560c89b4"}, "reference_source|reference_source_selector": "history", "minimum_mapping_quality": "20", "minimum_base_quality": "20", "coverage_cap": "250"}, "job": {"model_class": "Job", "id": "b2f71fbc5b1e1fe9", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:36:02.196728", "create_time": "2023-05-24T06:35:43.712993", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_CollectWgsMetrics/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-clsvz", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/7/8/8/dataset_7884fc19-df36-4b8a-ac16-6623d0e3e6d1.dat' 'picard_CollectWgsMetrics_bam' &&     ln -s '/galaxy/server/database/objects/5/3/4/dataset_534ef629-f54b-4b3a-972e-0314858db751.dat' 'localref.fa' &&   picard CollectWgsMetrics INPUT='picard_CollectWgsMetrics_bam' OUTPUT=\"/galaxy/server/database/objects/d/c/9/dataset_dc9f7ac1-5738-48c7-9770-dda8c5828769.dat\" REFERENCE_SEQUENCE=\"localref.fa\" MINIMUM_MAPPING_QUALITY=\"20\" MINIMUM_BASE_QUALITY=\"20\" COVERAGE_CAP=\"250\"  VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "coverage_cap": "\"250\"", "minimum_base_quality": "\"20\"", "minimum_mapping_quality": "\"20\"", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 170, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"inputFile": {"id": "d11a5f77347b26c7", "src": "hda", "uuid": "7884fc19-df36-4b8a-ac16-6623d0e3e6d1"}, "ref_file": {"id": "b225724d560c89b4", "src": "hda", "uuid": "534ef629-f54b-4b3a-972e-0314858db751"}}, "outputs": {"outFile": {"id": "c3df53deba3ac1e8", "src": "hda", "uuid": "dc9f7ac1-5738-48c7-9770-dda8c5828769"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:35:48.977 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:35:48.977 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:35:50", "plugin": "core", "name": "end_epoch", "raw_value": "1684910150.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:35:48", "plugin": "core", "name": "start_epoch", "raw_value": "1684910148.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "3", "plugin": "core", "name": "galaxy_slots", "raw_value": "3.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_DownsampleSam/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_DownsampleSam", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 30.930357933044434, "inputs": {"inputFile": {"src": "hda", "id": "2cae37c78abb90f8"}, "probability": "0.1", "seed": "1024", "validation_stringency": "LENIENT"}, "job": {"model_class": "Job", "id": "74d51ce557ee33cc", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:26:53.962633", "create_time": "2023-05-24T06:26:39.841273", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_DownsampleSam/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-l2g4j", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/4/b/c/dataset_4bc40470-9c82-4d3d-bef6-5fb4cd9a2217.dat' 'picard_DownsampleSam_bam' &&  picard DownsampleSam INPUT='picard_DownsampleSam_bam' OUTPUT=\"/galaxy/server/database/objects/9/c/b/dataset_9cb2ffc2-815c-490b-8e39-b1857ee59c95.dat\" PROBABILITY=0.1 RANDOM_SEED=1024 QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi` VALIDATION_STRINGENCY=LENIENT", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "seed": "\"1024\"", "probability": "\"0.1\""}, "inputs": {"inputFile": {"id": "2cae37c78abb90f8", "src": "hda", "uuid": "4bc40470-9c82-4d3d-bef6-5fb4cd9a2217"}}, "outputs": {"outFile": {"id": "95b67aaf702dcffe", "src": "hda", "uuid": "9cb2ffc2-815c-490b-8e39-b1857ee59c95"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:26:43.842 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:26:43.842 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:26:44", "plugin": "core", "name": "end_epoch", "raw_value": "1684909604.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:26:42", "plugin": "core", "name": "start_epoch", "raw_value": "1684909602.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_EstimateLibraryComplexity/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_EstimateLibraryComplexity", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 42.626484870910645, "inputs": {"inputFile": {"src": "hda", "id": "7f2e41808702ef9c"}, "min_identical_bases": "5", "max_diff_rate": "0.03", "min_mean_quality": "20", "max_group_ratio": "500", "read_name_regex": "[a-zA-Z0-9]+:[0-9]:([0-9]+):([0-9]+):([0-9]+).*.", "optical_duplicate_pixel_distance": "100", "validation_stringency": "LENIENT"}, "job": {"model_class": "Job", "id": "d566c9acfcc22f49", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:38:50.102058", "create_time": "2023-05-24T06:38:33.864845", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_EstimateLibraryComplexity/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-4xkmb", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/a/2/9/dataset_a293d6ac-4ddd-45f9-8523-cf5fa98d9af1.dat' 'picard_EstimateLibraryComplexity_bam' &&  picard EstimateLibraryComplexity  INPUT='picard_EstimateLibraryComplexity_bam' OUTPUT=\"/galaxy/server/database/objects/9/5/b/dataset_95bb81aa-803d-4fb6-baec-ea3b64ba89da.dat\"  MIN_IDENTICAL_BASES=\"5\" MAX_DIFF_RATE=\"0.03\" MIN_MEAN_QUALITY=\"20\" MAX_GROUP_RATIO=\"500\" READ_NAME_REGEX='[a-zA-Z0-9]+:[0-9]:([0-9]+):([0-9]+):([0-9]+).*.' OPTICAL_DUPLICATE_PIXEL_DISTANCE=\"100\"  VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "optical_duplicate_pixel_distance": "\"100\"", "read_name_regex": "\"[a-zA-Z0-9]+:[0-9]:([0-9]+):([0-9]+):([0-9]+).*.\"", "max_group_ratio": "\"500\"", "min_mean_quality": "\"20\"", "max_diff_rate": "\"0.03\"", "min_identical_bases": "\"5\""}, "inputs": {"inputFile": {"id": "7f2e41808702ef9c", "src": "hda", "uuid": "a293d6ac-4ddd-45f9-8523-cf5fa98d9af1"}}, "outputs": {"outFile": {"id": "b889507968916590", "src": "hda", "uuid": "95bb81aa-803d-4fb6-baec-ea3b64ba89da"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:38:38.652 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:38:38.652 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:38:39", "plugin": "core", "name": "end_epoch", "raw_value": "1684910319.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:38:37", "plugin": "core", "name": "start_epoch", "raw_value": "1684910317.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_FastqToSam/2.18.2.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_FastqToSam", "tool_version": "2.18.2.2", "test_index": 0, "time_seconds": 35.23446536064148, "inputs": {"input_type|fastq": {"src": "hda", "id": "c87ea66824d1faf8"}, "input_type|fastq2": {"src": "hda", "id": "dc467387fad0e92a"}, "input_type|input_type_selector": "pe", "read_group_name": "A", "sample_name": "sample-a", "library_name": "A", "platform_unit": "A", "platform": "Illumina", "sequencing_center": "A", "predicted_insert_size": "300", "comment": "A", "description": "A", "run_date": "2014-10-10", "min_q": "0", "max_q": "93", "strip_unpairied_mate_number": false, "allow_and_ignore_empty_lines": false, "validation_stringency": "LENIENT"}, "job": {"model_class": "Job", "id": "578020ca8b5e3c95", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:29:07.692287", "create_time": "2023-05-24T06:28:53.295157", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_FastqToSam/2.18.2.2", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-rwshd", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   gunzip -c '/galaxy/server/database/objects/0/b/c/dataset_0bca7d1a-687f-4a46-83bd-4152cf492d64.dat' > fwd.fastq && gunzip -c '/galaxy/server/database/objects/2/b/7/dataset_2b738dbf-3806-4263-af17-c0e182c4403f.dat' > rev.fastq &&  picard FastqToSam  FASTQ=fwd.fastq FASTQ2=rev.fastq  QUALITY_FORMAT=\"Standard\" OUTPUT=\"/galaxy/server/database/objects/2/2/2/dataset_2224cd05-a1c2-4714-a876-33d375a68a99.dat\" READ_GROUP_NAME=\"A\" SAMPLE_NAME=\"sample-a\"  LIBRARY_NAME=\"A\"  PLATFORM_UNIT=\"A\"  PLATFORM=\"Illumina\"  SEQUENCING_CENTER=\"A\"  PREDICTED_INSERT_SIZE=\"300\"  COMMENT=\"A\"  DESCRIPTION=\"A\"  RUN_DATE=\"2014-10-10\"  MIN_Q=\"0\" MAX_Q=\"93\" STRIP_UNPAIRED_MATE_NUMBER=\"false\" ALLOW_AND_IGNORE_EMPTY_LINES=\"false\"  SORT_ORDER=coordinate VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "allow_and_ignore_empty_lines": "false", "strip_unpairied_mate_number": "false", "max_q": "\"93\"", "min_q": "\"0\"", "run_date": "\"2014-10-10\"", "description": "\"A\"", "comment": "\"A\"", "predicted_insert_size": "\"300\"", "sequencing_center": "\"A\"", "platform": "\"Illumina\"", "platform_unit": "\"A\"", "library_name": "\"A\"", "sample_name": "\"sample-a\"", "read_group_name": "\"A\"", "input_type": "{\"__current_case__\": 1, \"fastq\": {\"values\": [{\"id\": 86, \"src\": \"hda\"}]}, \"fastq2\": {\"values\": [{\"id\": 87, \"src\": \"hda\"}]}, \"input_type_selector\": \"pe\"}"}, "inputs": {"fastq": {"id": "c87ea66824d1faf8", "src": "hda", "uuid": "0bca7d1a-687f-4a46-83bd-4152cf492d64"}, "fastq2": {"id": "dc467387fad0e92a", "src": "hda", "uuid": "2b738dbf-3806-4263-af17-c0e182c4403f"}}, "outputs": {"outFile": {"id": "e3f43b4623729d47", "src": "hda", "uuid": "2224cd05-a1c2-4714-a876-33d375a68a99"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:28:57.145 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:28:57.145 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:28:57", "plugin": "core", "name": "end_epoch", "raw_value": "1684909737.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:28:55", "plugin": "core", "name": "start_epoch", "raw_value": "1684909735.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_FilterSamReads/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_FilterSamReads", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 42.76338052749634, "inputs": {"inputFile": {"src": "hda", "id": "c5ed1821b06bcbef"}, "filter_type|read_list_file": {"src": "hda", "id": "62778816132729fd"}, "filter_type|filter": "includeReadList", "validation_stringency": "LENIENT"}, "job": {"model_class": "Job", "id": "4bdcfd1cfcbf2738", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:39:32.953401", "create_time": "2023-05-24T06:39:17.432091", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_FilterSamReads/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-8w8xc", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/2/8/f/dataset_28fd6f93-56e8-4612-b94b-ad4112993161.dat' 'picard_FilterSamReads_bam' &&   picard SortSam INPUT='picard_FilterSamReads_bam' OUTPUT=query_sorted_bam.bam SORT_ORDER=queryname VALIDATION_STRINGENCY=LENIENT QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`  &&  picard FilterSamReads INPUT=query_sorted_bam.bam FILTER=\"includeReadList\"  READ_LIST_FILE=\"/galaxy/server/database/objects/e/7/f/dataset_e7ff3980-484b-45e8-a3ad-76d70dfa74ea.dat\"  OUTPUT=\"/galaxy/server/database/objects/1/f/f/dataset_1ffc457e-ebff-45c1-a24e-8f7af7b063b9.dat\" SORT_ORDER=coordinate VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "filter_type": "{\"__current_case__\": 2, \"filter\": \"includeReadList\", \"read_list_file\": {\"values\": [{\"id\": 202, \"src\": \"hda\"}]}}"}, "inputs": {"inputFile": {"id": "c5ed1821b06bcbef", "src": "hda", "uuid": "28fd6f93-56e8-4612-b94b-ad4112993161"}, "read_list_file": {"id": "62778816132729fd", "src": "hda", "uuid": "e7ff3980-484b-45e8-a3ad-76d70dfa74ea"}}, "outputs": {"outFile": {"id": "7f0c4315e673466b", "src": "hda", "uuid": "1ffc457e-ebff-45c1-a24e-8f7af7b063b9"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:39:21.640 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:39:23.249 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:39:21.640 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:39:23.249 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:39:23", "plugin": "core", "name": "end_epoch", "raw_value": "1684910363.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:39:20", "plugin": "core", "name": "start_epoch", "raw_value": "1684910360.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_FilterSamReads/2.18.2.1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_FilterSamReads", "tool_version": "2.18.2.1", "test_index": 1, "time_seconds": 36.949280738830566, "inputs": {"inputFile": {"src": "hda", "id": "c7ad55cf643f08a9"}, "filter_type|read_list_file": {"src": "hda", "id": "4d7a1c027079ad72"}, "filter_type|filter": "excludeReadList", "validation_stringency": "LENIENT"}, "job": {"model_class": "Job", "id": "36f7f4797f0b86d4", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:40:07.756766", "create_time": "2023-05-24T06:39:50.949799", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_FilterSamReads/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-96jnq", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/1/b/8/dataset_1b8380ec-7b86-4b4c-aa1c-f78e01258637.dat' 'picard_FilterSamReads_bam' &&   picard SortSam INPUT='picard_FilterSamReads_bam' OUTPUT=query_sorted_bam.bam SORT_ORDER=queryname VALIDATION_STRINGENCY=LENIENT QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`  &&  picard FilterSamReads INPUT=query_sorted_bam.bam FILTER=\"excludeReadList\"  READ_LIST_FILE=\"/galaxy/server/database/objects/c/f/5/dataset_cf595fca-b87f-498c-ad71-f8a9f5fbe34a.dat\"  OUTPUT=\"/galaxy/server/database/objects/0/6/6/dataset_0667a900-9e76-4b23-89db-ed975dbc0cd7.dat\" SORT_ORDER=coordinate VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "filter_type": "{\"__current_case__\": 3, \"filter\": \"excludeReadList\", \"read_list_file\": {\"values\": [{\"id\": 206, \"src\": \"hda\"}]}}"}, "inputs": {"inputFile": {"id": "c7ad55cf643f08a9", "src": "hda", "uuid": "1b8380ec-7b86-4b4c-aa1c-f78e01258637"}, "read_list_file": {"id": "4d7a1c027079ad72", "src": "hda", "uuid": "cf595fca-b87f-498c-ad71-f8a9f5fbe34a"}}, "outputs": {"outFile": {"id": "113133c3f1ee023c", "src": "hda", "uuid": "0667a900-9e76-4b23-89db-ed975dbc0cd7"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:39:54.335 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:39:56.059 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:39:54.335 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:39:56.059 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:39:56", "plugin": "core", "name": "end_epoch", "raw_value": "1684910396.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:39:52", "plugin": "core", "name": "start_epoch", "raw_value": "1684910392.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_FixMateInformation/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_FixMateInformation", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 29.668100833892822, "inputs": {"inputFile": {"src": "hda", "id": "3eb4ca29c8540af6"}, "add_mate_cigar": true, "assume_sorted": false, "validation_stringency": "LENIENT"}, "job": {"model_class": "Job", "id": "fc2f051e428187f3", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:28:32.622923", "create_time": "2023-05-24T06:28:20.112552", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_FixMateInformation/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-x7kxw", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&  picard FixMateInformation INPUT=\"/galaxy/server/database/objects/7/f/c/dataset_7fc3c01a-ffd8-4381-a68e-0428b5c6a836.dat\" OUTPUT=\"/galaxy/server/database/objects/b/2/0/dataset_b20c83cd-6375-4cd9-8714-45e807768ecb.dat\" ASSUME_SORTED=False ADD_MATE_CIGAR=True  SORT_ORDER=coordinate VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "assume_sorted": "false", "add_mate_cigar": "true"}, "inputs": {"inputFile": {"id": "3eb4ca29c8540af6", "src": "hda", "uuid": "7fc3c01a-ffd8-4381-a68e-0428b5c6a836"}, "inputFile1": {"id": "3eb4ca29c8540af6", "src": "hda", "uuid": "7fc3c01a-ffd8-4381-a68e-0428b5c6a836"}}, "outputs": {"outFile": {"id": "578020ca8b5e3c95", "src": "hda", "uuid": "b20c83cd-6375-4cd9-8714-45e807768ecb"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:28:22.970 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:28:22.970 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:28:23", "plugin": "core", "name": "end_epoch", "raw_value": "1684909703.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:28:21", "plugin": "core", "name": "start_epoch", "raw_value": "1684909701.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MarkDuplicates/2.18.2.3-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MarkDuplicates", "tool_version": "2.18.2.3", "test_index": 0, "time_seconds": 50.124146938323975, "inputs": {"inputFile": {"src": "hda", "id": "55b4a0ddcdb5af85"}, "comments_0|comment": "test-run", "remove_duplicates": true, "assume_sorted": true, "duplicate_scoring_strategy": "SUM_OF_BASE_QUALITIES", "read_name_regex": ".*[a-zA-Z0-9]+:[0-9]:([0-9]+):([0-9]+):([0-9]+).*", "optical_duplicate_pixel_distance": "100", "validation_stringency": "LENIENT"}, "job": {"model_class": "Job", "id": "6c3d57c9cdc64139", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:31:39.680107", "create_time": "2023-05-24T06:31:13.031911", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MarkDuplicates/2.18.2.3", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-klrx2", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/5/9/0/dataset_59092e81-dd4b-4b45-9e09-03711e4748ae.dat' 'picard_MarkDuplicates_bam' &&  picard MarkDuplicates  INPUT='picard_MarkDuplicates_bam' OUTPUT='/galaxy/server/database/objects/4/7/2/dataset_47236fa6-af51-4e89-9be3-6c0cfd16f09f.dat'  METRICS_FILE='/galaxy/server/database/objects/f/d/1/dataset_fd13c4ae-3d04-4c7a-b2d9-6013b3558400.dat' COMMENT='test-run'  REMOVE_DUPLICATES='true' ASSUME_SORTED='true'  DUPLICATE_SCORING_STRATEGY='SUM_OF_BASE_QUALITIES'  READ_NAME_REGEX='.*[a-zA-Z0-9]+:[0-9]:([0-9]+):([0-9]+):([0-9]+).*' OPTICAL_DUPLICATE_PIXEL_DISTANCE='100'   VALIDATION_STRINGENCY='LENIENT' TAGGING_POLICY=All QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "barcode_tag": null, "optical_duplicate_pixel_distance": "\"100\"", "read_name_regex": "\".*[a-zA-Z0-9]+:[0-9]:([0-9]+):([0-9]+):([0-9]+).*\"", "duplicate_scoring_strategy": "\"SUM_OF_BASE_QUALITIES\"", "assume_sorted": "true", "remove_duplicates": "true", "comments": "[{\"__index__\": 0, \"comment\": \"test-run\"}]"}, "inputs": {"inputFile": {"id": "55b4a0ddcdb5af85", "src": "hda", "uuid": "59092e81-dd4b-4b45-9e09-03711e4748ae"}}, "outputs": {"metrics_file": {"id": "222e0e88f491eaf8", "src": "hda", "uuid": "fd13c4ae-3d04-4c7a-b2d9-6013b3558400"}, "outFile": {"id": "0c8d9ee4d960ab55", "src": "hda", "uuid": "47236fa6-af51-4e89-9be3-6c0cfd16f09f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:31:16.451 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:31:16.451 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "12 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "12.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:31:27", "plugin": "core", "name": "end_epoch", "raw_value": "1684909887.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:31:15", "plugin": "core", "name": "start_epoch", "raw_value": "1684909875.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MarkDuplicates/2.18.2.3-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MarkDuplicates", "tool_version": "2.18.2.3", "test_index": 1, "time_seconds": 63.094287633895874, "inputs": {"inputFile": {"src": "hda", "id": "c386f838e5e8bcd9"}, "comments_0|comment": "test-run", "remove_duplicates": false, "assume_sorted": true, "duplicate_scoring_strategy": "SUM_OF_BASE_QUALITIES", "read_name_regex": "", "optical_duplicate_pixel_distance": "100", "validation_stringency": "LENIENT"}, "job": {"model_class": "Job", "id": "1b3bbf0f62e19467", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:32:20.425880", "create_time": "2023-05-24T06:31:36.765979", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MarkDuplicates/2.18.2.3", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-v5fhd", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/a/0/4/dataset_a04544da-362e-48aa-96a7-6f640568545e.dat' 'picard_MarkDuplicates_bam' &&  picard MarkDuplicates  INPUT='picard_MarkDuplicates_bam' OUTPUT='/galaxy/server/database/objects/7/8/7/dataset_7878d08f-a6c6-4043-9d2e-8f32fd23b050.dat'  METRICS_FILE='/galaxy/server/database/objects/2/0/d/dataset_20d6e8a9-80cf-40b4-83ad-09ee5bf3e895.dat' COMMENT='test-run'  REMOVE_DUPLICATES='false' ASSUME_SORTED='true'  DUPLICATE_SCORING_STRATEGY='SUM_OF_BASE_QUALITIES'  OPTICAL_DUPLICATE_PIXEL_DISTANCE='100'   VALIDATION_STRINGENCY='LENIENT' TAGGING_POLICY=All QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "barcode_tag": null, "optical_duplicate_pixel_distance": "\"100\"", "read_name_regex": "\"\"", "duplicate_scoring_strategy": "\"SUM_OF_BASE_QUALITIES\"", "assume_sorted": "true", "remove_duplicates": "false", "comments": "[{\"__index__\": 0, \"comment\": \"test-run\"}]"}, "inputs": {"inputFile": {"id": "c386f838e5e8bcd9", "src": "hda", "uuid": "a04544da-362e-48aa-96a7-6f640568545e"}}, "outputs": {"metrics_file": {"id": "2cf4a9cf50e8ac6d", "src": "hda", "uuid": "20d6e8a9-80cf-40b4-83ad-09ee5bf3e895"}, "outFile": {"id": "8d9bec525080f809", "src": "hda", "uuid": "7878d08f-a6c6-4043-9d2e-8f32fd23b050"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:31:40.466 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:31:40.466 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "29 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "29.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:32:07", "plugin": "core", "name": "end_epoch", "raw_value": "1684909927.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:31:38", "plugin": "core", "name": "start_epoch", "raw_value": "1684909898.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MarkDuplicates/2.18.2.3-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MarkDuplicates", "tool_version": "2.18.2.3", "test_index": 2, "time_seconds": 66.90326929092407, "inputs": {"inputFile": {"src": "hda", "id": "a4dde98fd54ec262"}, "comments_0|comment": "test-run", "remove_duplicates": false, "assume_sorted": true, "duplicate_scoring_strategy": "SUM_OF_BASE_QUALITIES", "read_name_regex": "", "optical_duplicate_pixel_distance": "100", "barcode_tag": "RX", "validation_stringency": "LENIENT"}, "job": {"model_class": "Job", "id": "923316546d873c32", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:32:46.871110", "create_time": "2023-05-24T06:32:01.285751", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MarkDuplicates/2.18.2.3", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-z9d5w", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/4/c/a/dataset_4ca5220d-2c4d-4572-9f5a-56819d60b557.dat' 'picard_MarkDuplicates_bam' &&  picard MarkDuplicates  INPUT='picard_MarkDuplicates_bam' OUTPUT='/galaxy/server/database/objects/9/9/1/dataset_9919ff58-325e-42fc-9430-11bc691e271d.dat'  METRICS_FILE='/galaxy/server/database/objects/5/8/d/dataset_58d40add-8cfa-41dd-8e1f-32ea51820739.dat' COMMENT='test-run'  REMOVE_DUPLICATES='false' ASSUME_SORTED='true'  DUPLICATE_SCORING_STRATEGY='SUM_OF_BASE_QUALITIES'  OPTICAL_DUPLICATE_PIXEL_DISTANCE='100'  BARCODE_TAG='RX'  VALIDATION_STRINGENCY='LENIENT' TAGGING_POLICY=All QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "barcode_tag": "\"RX\"", "optical_duplicate_pixel_distance": "\"100\"", "read_name_regex": "\"\"", "duplicate_scoring_strategy": "\"SUM_OF_BASE_QUALITIES\"", "assume_sorted": "true", "remove_duplicates": "false", "comments": "[{\"__index__\": 0, \"comment\": \"test-run\"}]"}, "inputs": {"inputFile": {"id": "a4dde98fd54ec262", "src": "hda", "uuid": "4ca5220d-2c4d-4572-9f5a-56819d60b557"}}, "outputs": {"metrics_file": {"id": "61cf2c8de413db7d", "src": "hda", "uuid": "58d40add-8cfa-41dd-8e1f-32ea51820739"}, "outFile": {"id": "f7af1e3da2e7ece8", "src": "hda", "uuid": "9919ff58-325e-42fc-9430-11bc691e271d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:32:05.622 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:32:05.622 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "26 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "26.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:32:29", "plugin": "core", "name": "end_epoch", "raw_value": "1684909949.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:32:03", "plugin": "core", "name": "start_epoch", "raw_value": "1684909923.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MarkDuplicatesWithMateCigar/2.18.2.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MarkDuplicatesWithMateCigar", "tool_version": "2.18.2.2", "test_index": 0, "time_seconds": 32.62497138977051, "inputs": {"inputFile": {"src": "hda", "id": "fc2f051e428187f3"}, "comment": "test-run", "minimum_distance": "-1", "skip_pairs_with_no_mate_cigar": true, "remove_duplicates": false, "assume_sorted": true, "duplicate_scoring_strategy": "TOTAL_MAPPED_REFERENCE_LENGTH", "read_name_regex": "[a-zA-Z0-9]+:[0-9]:([0-9]+):([0-9]+):([0-9]+).*.", "optical_duplicate_pixel_distance": "100", "validation_stringency": "LENIENT"}, "job": {"model_class": "Job", "id": "29ca205c3d4603c6", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:28:02.867232", "create_time": "2023-05-24T06:27:51.114664", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MarkDuplicatesWithMateCigar/2.18.2.2", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-cznv4", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/4/b/5/dataset_4b5d54eb-3d05-4f8d-a714-4f632fb718de.dat' 'picard_MarkDuplicatesWithMateCigar_bam' &&  picard MarkDuplicatesWithMateCigar  INPUT='picard_MarkDuplicatesWithMateCigar_bam' OUTPUT=\"/galaxy/server/database/objects/5/7/2/dataset_5729b377-7b45-4ae9-9e5b-87b8d4dd3a18.dat\"  METRICS_FILE=\"/galaxy/server/database/objects/a/5/9/dataset_a59c4692-bf17-4eaa-9377-444176b07b14.dat\" COMMENT=\"test-run\"  MINIMUM_DISTANCE=\"-1\" SKIP_PAIRS_WITH_NO_MATE_CIGAR=\"true\"   REMOVE_DUPLICATES=\"false\" ASSUME_SORTED=\"true\"  DUPLICATE_SCORING_STRATEGY=\"TOTAL_MAPPED_REFERENCE_LENGTH\"  READ_NAME_REGEX='[a-zA-Z0-9]+:[0-9]:([0-9]+):([0-9]+):([0-9]+).*.' OPTICAL_DUPLICATE_PIXEL_DISTANCE=\"100\"   BLOCK_SIZE=100000 VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "optical_duplicate_pixel_distance": "\"100\"", "read_name_regex": "\"[a-zA-Z0-9]+:[0-9]:([0-9]+):([0-9]+):([0-9]+).*.\"", "duplicate_scoring_strategy": "\"TOTAL_MAPPED_REFERENCE_LENGTH\"", "assume_sorted": "true", "remove_duplicates": "false", "skip_pairs_with_no_mate_cigar": "true", "minimum_distance": "\"-1\"", "comment": "\"test-run\""}, "inputs": {"inputFile": {"id": "fc2f051e428187f3", "src": "hda", "uuid": "4b5d54eb-3d05-4f8d-a714-4f632fb718de"}}, "outputs": {"metrics_file": {"id": "6a7c64ffdb817451", "src": "hda", "uuid": "a59c4692-bf17-4eaa-9377-444176b07b14"}, "outFile": {"id": "a3432e94e6b58864", "src": "hda", "uuid": "5729b377-7b45-4ae9-9e5b-87b8d4dd3a18"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:27:53.573 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:27:53.573 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:27:53", "plugin": "core", "name": "end_epoch", "raw_value": "1684909673.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:27:52", "plugin": "core", "name": "start_epoch", "raw_value": "1684909672.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "3", "plugin": "core", "name": "galaxy_slots", "raw_value": "3.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MeanQualityByCycle/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MeanQualityByCycle", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 39.952855348587036, "inputs": {"inputFile": {"src": "hda", "id": "5e81fc2e42f888ae"}, "reference_source|ref_file": {"src": "hda", "id": "73a2be2b23e619ac"}, "reference_source|reference_source_selector": "history", "aligned_reads_only": false, "pf_reads_only": false, "assume_sorted": true}, "job": {"model_class": "Job", "id": "a752cb4f355dfffe", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:35:38.799959", "create_time": "2023-05-24T06:35:22.748069", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MeanQualityByCycle/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-hpvp6", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/f/a/a/dataset_faaad90b-568a-4fa3-a355-78407ebeee15.dat' 'picard_MeanQualityByCycle_bam' &&    ln -s '/galaxy/server/database/objects/5/2/8/dataset_5281b43f-9278-49b3-a9b6-2565ac19efca.dat' 'localref.fa' &&   picard MeanQualityByCycle INPUT='picard_MeanQualityByCycle_bam' OUTPUT=\"/galaxy/server/database/objects/4/4/7/dataset_447691aa-70b3-4261-810d-56a302fa7230.dat\" CHART_OUTPUT=\"/galaxy/server/database/objects/5/b/4/dataset_5b404a92-a5d8-4695-a456-e6184d15b512.dat\" REFERENCE_SEQUENCE=\"localref.fa\" ALIGNED_READS_ONLY=\"false\" PF_READS_ONLY=\"false\"  ASSUME_SORTED=\"true\"  VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "assume_sorted": "true", "pf_reads_only": "false", "aligned_reads_only": "false", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 165, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"inputFile": {"id": "5e81fc2e42f888ae", "src": "hda", "uuid": "faaad90b-568a-4fa3-a355-78407ebeee15"}, "ref_file": {"id": "73a2be2b23e619ac", "src": "hda", "uuid": "5281b43f-9278-49b3-a9b6-2565ac19efca"}}, "outputs": {"pdfFile": {"id": "1957fa88a87af6a0", "src": "hda", "uuid": "5b404a92-a5d8-4695-a456-e6184d15b512"}, "outFile": {"id": "4bdcfd1cfcbf2738", "src": "hda", "uuid": "447691aa-70b3-4261-810d-56a302fa7230"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:35:25.196 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\nERROR\t2023-05-24 06:35:25\tProcessExecutor\tDuring startup - Warning messages:\nERROR\t2023-05-24 06:35:25\tProcessExecutor\t1: Setting LC_CTYPE failed, using \"C\" \nERROR\t2023-05-24 06:35:25\tProcessExecutor\t2: Setting LC_COLLATE failed, using \"C\" \nERROR\t2023-05-24 06:35:25\tProcessExecutor\t3: Setting LC_TIME failed, using \"C\" \nERROR\t2023-05-24 06:35:25\tProcessExecutor\t4: Setting LC_MESSAGES failed, using \"C\" \nERROR\t2023-05-24 06:35:25\tProcessExecutor\t5: Setting LC_MONETARY failed, using \"C\" \nERROR\t2023-05-24 06:35:25\tProcessExecutor\t6: Setting LC_PAPER failed, using \"C\" \nERROR\t2023-05-24 06:35:25\tProcessExecutor\t7: Setting LC_MEASUREMENT failed, using \"C\" \n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:35:25.196 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\nERROR\t2023-05-24 06:35:25\tProcessExecutor\tDuring startup - Warning messages:\nERROR\t2023-05-24 06:35:25\tProcessExecutor\t1: Setting LC_CTYPE failed, using \"C\" \nERROR\t2023-05-24 06:35:25\tProcessExecutor\t2: Setting LC_COLLATE failed, using \"C\" \nERROR\t2023-05-24 06:35:25\tProcessExecutor\t3: Setting LC_TIME failed, using \"C\" \nERROR\t2023-05-24 06:35:25\tProcessExecutor\t4: Setting LC_MESSAGES failed, using \"C\" \nERROR\t2023-05-24 06:35:25\tProcessExecutor\t5: Setting LC_MONETARY failed, using \"C\" \nERROR\t2023-05-24 06:35:25\tProcessExecutor\t6: Setting LC_PAPER failed, using \"C\" \nERROR\t2023-05-24 06:35:25\tProcessExecutor\t7: Setting LC_MEASUREMENT failed, using \"C\" \n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:35:25", "plugin": "core", "name": "end_epoch", "raw_value": "1684910125.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:35:24", "plugin": "core", "name": "start_epoch", "raw_value": "1684910124.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "3", "plugin": "core", "name": "galaxy_slots", "raw_value": "3.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MergeBamAlignment/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MergeBamAlignment", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 38.73899054527283, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "a6cbbdc5c74227e0"}, "reference_source|reference_source_selector": "history", "unmapped_bam": {"src": "hda", "id": "9f4bbdf8f259cb61"}, "aligned_or_read1_and_read2|aligned_bams_0|aligned_bam": {"src": "hda", "id": "443a1113c64709dc"}, "aligned_or_read1_and_read2|aligned_or_read1_and_read2_selector": "paired_one_file", "clip_adapters": true, "is_bisulfite_sequence": false, "aligned_reads_only": false, "max_insertions_or_deletions": "1", "read1_trim": "0", "read2_trim": "0", "aligner_proper_pair_flags": false, "primary_alignment_strategy": "BestMapq", "clip_overlapping_reads": true, "include_secondary_alignments": true, "add_mate_cigar": true}, "job": {"model_class": "Job", "id": "dc4355b29ed379ad", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:37:21.857054", "create_time": "2023-05-24T06:37:08.104667", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MergeBamAlignment/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-9sbxk", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -s \"/galaxy/server/database/objects/e/5/b/dataset_e5b65f0a-9f96-4619-b2f4-54ad40b308b4.dat\" \"localref.fa\" &&   picard CreateSequenceDictionary REFERENCE=\"localref.fa\" OUTPUT=\"localref.dict\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`  &&   picard MergeBamAlignment UNMAPPED_BAM=\"/galaxy/server/database/objects/9/6/1/dataset_961d1234-7e34-41f2-b410-4d60570328de.dat\"  PAIRED_RUN=true  ALIGNED_BAM=\"/galaxy/server/database/objects/1/8/3/dataset_183e6378-d74e-47b2-b0c8-b6edc389e6dd.dat\"  OUTPUT=\"/galaxy/server/database/objects/4/b/b/dataset_4bb0c400-5a95-4a0b-af20-2495b5505aef.dat\" REFERENCE_SEQUENCE=\"localref.fa\"  CLIP_ADAPTERS=\"true\" IS_BISULFITE_SEQUENCE=\"false\" ALIGNED_READS_ONLY=\"false\" MAX_INSERTIONS_OR_DELETIONS=\"1\"    READ1_TRIM=\"0\" READ2_TRIM=\"0\"   ALIGNER_PROPER_PAIR_FLAGS=\"false\" PRIMARY_ALIGNMENT_STRATEGY=\"BestMapq\" CLIP_OVERLAPPING_READS=\"true\" INCLUDE_SECONDARY_ALIGNMENTS=\"true\" ADD_MATE_CIGAR=\"true\"  VALIDATION_STRINGENCY=\"LENIENT\"  SORT_ORDER=coordinate QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "add_mate_cigar": "true", "include_secondary_alignments": "true", "clip_overlapping_reads": "true", "primary_alignment_strategy": "\"BestMapq\"", "aligner_proper_pair_flags": "false", "orientations": null, "read2_trim": "\"0\"", "read1_trim": "\"0\"", "attributes_to_remove": "[]", "attributes_to_retain": "[]", "max_insertions_or_deletions": "\"1\"", "aligned_reads_only": "false", "is_bisulfite_sequence": "false", "clip_adapters": "true", "aligned_or_read1_and_read2": "{\"__current_case__\": 0, \"aligned_bams\": [{\"__index__\": 0, \"aligned_bam\": {\"values\": [{\"id\": 184, \"src\": \"hda\"}]}}], \"aligned_or_read1_and_read2_selector\": \"paired_one_file\"}", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 182, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "a6cbbdc5c74227e0", "src": "hda", "uuid": "e5b65f0a-9f96-4619-b2f4-54ad40b308b4"}, "unmapped_bam": {"id": "9f4bbdf8f259cb61", "src": "hda", "uuid": "961d1234-7e34-41f2-b410-4d60570328de"}, "aligned_or_read1_and_read2|aligned_bams_0|aligned_bam": {"id": "443a1113c64709dc", "src": "hda", "uuid": "183e6378-d74e-47b2-b0c8-b6edc389e6dd"}}, "outputs": {"outFile": {"id": "dba29fe1b7f62d74", "src": "hda", "uuid": "4bb0c400-5a95-4a0b-af20-2495b5505aef"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:37:10.617 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:37:11.419 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:37:10.617 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:37:11.419 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:37:11", "plugin": "core", "name": "end_epoch", "raw_value": "1684910231.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:37:09", "plugin": "core", "name": "start_epoch", "raw_value": "1684910229.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "3", "plugin": "core", "name": "galaxy_slots", "raw_value": "3.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MergeSamFiles/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MergeSamFiles", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 43.4527530670166, "inputs": {"inputFile": [{"src": "hda", "id": "d9c6cf2bdefa1f3c"}, {"src": "hda", "id": "f6980eb0d7e96bd1"}, {"src": "hda", "id": "6ece31a6c56cb364"}], "merge_sequence_dictionaries": false, "assume_sorted": false, "validation_stringency": "LENIENT"}, "job": {"model_class": "Job", "id": "3273ad47a274acd3", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:39:30.436139", "create_time": "2023-05-24T06:39:14.441358", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_MergeSamFiles/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-4lpxg", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&  picard MergeSamFiles  INPUT=\"/galaxy/server/database/objects/c/0/1/dataset_c01723f1-d7b8-46fb-95d1-ad6e674db96c.dat\" INPUT=\"/galaxy/server/database/objects/3/d/b/dataset_3db81c9d-b516-4acf-8d78-a07ffc1dc669.dat\" INPUT=\"/galaxy/server/database/objects/e/d/b/dataset_edbd37f5-116e-47e4-8ede-4c59a6c4d12c.dat\"  OUTPUT=\"/galaxy/server/database/objects/8/2/8/dataset_8284e3d2-d83b-4c21-a6db-5675ed85f2ff.dat\" MERGE_SEQUENCE_DICTIONARIES=\"false\"  ASSUME_SORTED=\"false\"  USE_THREADING=true SORT_ORDER=coordinate VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "comments": "[]", "assume_sorted": "false", "merge_sequence_dictionaries": "false"}, "inputs": {"inputFile": {"id": "d9c6cf2bdefa1f3c", "src": "hda", "uuid": "c01723f1-d7b8-46fb-95d1-ad6e674db96c"}, "inputFile1": {"id": "d9c6cf2bdefa1f3c", "src": "hda", "uuid": "c01723f1-d7b8-46fb-95d1-ad6e674db96c"}, "inputFile2": {"id": "f6980eb0d7e96bd1", "src": "hda", "uuid": "3db81c9d-b516-4acf-8d78-a07ffc1dc669"}, "inputFile3": {"id": "6ece31a6c56cb364", "src": "hda", "uuid": "edbd37f5-116e-47e4-8ede-4c59a6c4d12c"}}, "outputs": {"outFile": {"id": "55a64a1990aa2990", "src": "hda", "uuid": "8284e3d2-d83b-4c21-a6db-5675ed85f2ff"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:39:18.253 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:39:18.253 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:39:19", "plugin": "core", "name": "end_epoch", "raw_value": "1684910359.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:39:16", "plugin": "core", "name": "start_epoch", "raw_value": "1684910356.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_NormalizeFasta/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_NormalizeFasta", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 35.87453269958496, "inputs": {"inputFile": {"src": "hda", "id": "813bc04230c1487f"}, "line_length": "40", "truncate_sequence_names_at_whitespaces": false}, "job": {"model_class": "Job", "id": "3ef384687c44b95c", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:27:30.041065", "create_time": "2023-05-24T06:27:10.862975", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_NormalizeFasta/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-sq6bq", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/b/b/9/dataset_bb9de3e9-ceb9-4f15-b590-0da6f82aeaee.dat' 'picard_NormalizeFasta_ref_fa'.fa && picard NormalizeFasta  INPUT='picard_NormalizeFasta_ref_fa'.fa OUTPUT=\"/galaxy/server/database/objects/a/0/9/dataset_a09c297f-c445-43be-bf24-ab7ba8171162.dat\" LINE_LENGTH=\"40\" TRUNCATE_SEQUENCE_NAMES_AT_WHITESPACE=\"false\"  QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "truncate_sequence_names_at_whitespaces": "false", "line_length": "\"40\""}, "inputs": {"inputFile": {"id": "813bc04230c1487f", "src": "hda", "uuid": "bb9de3e9-ceb9-4f15-b590-0da6f82aeaee"}}, "outputs": {"outFile": {"id": "c6e6abdf06789a8c", "src": "hda", "uuid": "a09c297f-c445-43be-bf24-ab7ba8171162"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:27:17.624 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:27:17.624 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:27:17", "plugin": "core", "name": "end_epoch", "raw_value": "1684909637.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:27:16", "plugin": "core", "name": "start_epoch", "raw_value": "1684909636.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_QualityScoreDistribution/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_QualityScoreDistribution", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 50.346670627593994, "inputs": {"inputFile": {"src": "hda", "id": "edb9f9b22072b73a"}, "reference_source|ref_file": {"src": "hda", "id": "29ca205c3d4603c6"}, "reference_source|reference_source_selector": "history", "aligned_reads_only": false, "pf_reads_only": false, "include_no_calls": false, "assume_sorted": true}, "job": {"model_class": "Job", "id": "813bc04230c1487f", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:27:57.515366", "create_time": "2023-05-24T06:27:29.335683", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_QualityScoreDistribution/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-684l5", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/9/3/5/dataset_93538281-549a-422e-a0ac-a70508571770.dat' 'picard_QualityScoreDistribution_bam' &&    ln -s '/galaxy/server/database/objects/f/8/7/dataset_f877c3bb-a012-4c97-b8ca-3d42162e23be.dat' 'localref.fa' &&   picard QualityScoreDistribution INPUT='picard_QualityScoreDistribution_bam' OUTPUT=\"/galaxy/server/database/objects/8/7/6/dataset_876eca55-41ad-4e45-97e0-d7505e70569f.dat\" CHART_OUTPUT=\"/galaxy/server/database/objects/2/1/e/dataset_21e9973b-3ec1-41f0-acff-8505f38e4db9.dat\" REFERENCE_SEQUENCE=\"localref.fa\" ALIGNED_READS_ONLY=\"false\" PF_READS_ONLY=\"false\" INCLUDE_NO_CALLS=\"false\"  ASSUME_SORTED=\"true\"  VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "assume_sorted": "true", "include_no_calls": "false", "pf_reads_only": "false", "aligned_reads_only": "false", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 73, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"inputFile": {"id": "edb9f9b22072b73a", "src": "hda", "uuid": "93538281-549a-422e-a0ac-a70508571770"}, "ref_file": {"id": "29ca205c3d4603c6", "src": "hda", "uuid": "f877c3bb-a012-4c97-b8ca-3d42162e23be"}}, "outputs": {"outFile": {"id": "e87db9180d1667d5", "src": "hda", "uuid": "876eca55-41ad-4e45-97e0-d7505e70569f"}, "pdfFile": {"id": "5e05d0c82ee10bff", "src": "hda", "uuid": "21e9973b-3ec1-41f0-acff-8505f38e4db9"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:27:46.444 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\nERROR\t2023-05-24 06:27:46\tProcessExecutor\tDuring startup - Warning messages:\nERROR\t2023-05-24 06:27:46\tProcessExecutor\t1: Setting LC_CTYPE failed, using \"C\" \nERROR\t2023-05-24 06:27:46\tProcessExecutor\t2: Setting LC_COLLATE failed, using \"C\" \nERROR\t2023-05-24 06:27:46\tProcessExecutor\t3: Setting LC_TIME failed, using \"C\" \nERROR\t2023-05-24 06:27:46\tProcessExecutor\t4: Setting LC_MESSAGES failed, using \"C\" \nERROR\t2023-05-24 06:27:46\tProcessExecutor\t5: Setting LC_MONETARY failed, using \"C\" \nERROR\t2023-05-24 06:27:46\tProcessExecutor\t6: Setting LC_PAPER failed, using \"C\" \nERROR\t2023-05-24 06:27:46\tProcessExecutor\t7: Setting LC_MEASUREMENT failed, using \"C\" \n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:27:46.444 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\nERROR\t2023-05-24 06:27:46\tProcessExecutor\tDuring startup - Warning messages:\nERROR\t2023-05-24 06:27:46\tProcessExecutor\t1: Setting LC_CTYPE failed, using \"C\" \nERROR\t2023-05-24 06:27:46\tProcessExecutor\t2: Setting LC_COLLATE failed, using \"C\" \nERROR\t2023-05-24 06:27:46\tProcessExecutor\t3: Setting LC_TIME failed, using \"C\" \nERROR\t2023-05-24 06:27:46\tProcessExecutor\t4: Setting LC_MESSAGES failed, using \"C\" \nERROR\t2023-05-24 06:27:46\tProcessExecutor\t5: Setting LC_MONETARY failed, using \"C\" \nERROR\t2023-05-24 06:27:46\tProcessExecutor\t6: Setting LC_PAPER failed, using \"C\" \nERROR\t2023-05-24 06:27:46\tProcessExecutor\t7: Setting LC_MEASUREMENT failed, using \"C\" \n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:27:47", "plugin": "core", "name": "end_epoch", "raw_value": "1684909667.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:27:45", "plugin": "core", "name": "start_epoch", "raw_value": "1684909665.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_ReorderSam/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_ReorderSam", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 42.07926368713379, "inputs": {"reference_source|ref_file": {"src": "hda", "id": "36f7f4797f0b86d4"}, "reference_source|reference_source_selector": "history", "inputFile": {"src": "hda", "id": "b18eb16c49a4a172"}, "allow_incomplete_dict_concordance": false, "allow_contig_length_discordance": false}, "job": {"model_class": "Job", "id": "7e6ad98134a8f5e4", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:36:20.991226", "create_time": "2023-05-24T06:36:02.538105", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_ReorderSam/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-647kd", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/b/c/2/dataset_bc2c84f1-a528-4be5-9d60-283652bb8cdb.dat' 'picard_ReorderSam_bam' &&   ln -s \"/galaxy/server/database/objects/3/2/b/dataset_32be1f8e-6a0a-4949-8c83-75386ab03f01.dat\" \"localref.fa\" &&   picard CreateSequenceDictionary REFERENCE=\"localref.fa\" OUTPUT=\"localref.dict\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`  &&   picard ReorderSam INPUT='picard_ReorderSam_bam' OUTPUT=\"/galaxy/server/database/objects/a/0/c/dataset_a0c7e560-60bb-4bc7-8861-3d2b1ee3b1fd.dat\" REFERENCE=\"localref.fa\" ALLOW_INCOMPLETE_DICT_CONCORDANCE=\"false\" ALLOW_CONTIG_LENGTH_DISCORDANCE=\"false\"  VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "allow_contig_length_discordance": "false", "allow_incomplete_dict_concordance": "false", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 171, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"ref_file": {"id": "36f7f4797f0b86d4", "src": "hda", "uuid": "32be1f8e-6a0a-4949-8c83-75386ab03f01"}, "inputFile": {"id": "b18eb16c49a4a172", "src": "hda", "uuid": "bc2c84f1-a528-4be5-9d60-283652bb8cdb"}}, "outputs": {"outFile": {"id": "382738fe55c45674", "src": "hda", "uuid": "a0c7e560-60bb-4bc7-8861-3d2b1ee3b1fd"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:36:05.837 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:36:07.444 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:36:05.837 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:36:07.444 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:36:07", "plugin": "core", "name": "end_epoch", "raw_value": "1684910167.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:36:04", "plugin": "core", "name": "start_epoch", "raw_value": "1684910164.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_ReplaceSamHeader/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_ReplaceSamHeader", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 50.26024317741394, "inputs": {"inputFile": {"src": "hda", "id": "5dda19ba715fc8f4"}, "header": {"src": "hda", "id": "7f91faba86135d9b"}}, "job": {"model_class": "Job", "id": "671c1a8cc4b77fae", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:33:10.616945", "create_time": "2023-05-24T06:32:48.701313", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_ReplaceSamHeader/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-q6c97", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/f/4/d/dataset_f4dfbefc-cdb6-45ce-b47a-0385529712e3.dat' 'picard_ReplaceSamHeader_bam' &&   ln -s \"/galaxy/server/database/objects/f/4/d/dataset_f4dfbefc-cdb6-45ce-b47a-0385529712e3.dat\" \"local_fasta.fa\" &&  picard ReplaceSamHeader  INPUT='picard_ReplaceSamHeader_bam' HEADER=\"/galaxy/server/database/objects/f/e/c/dataset_fec30889-868b-49db-b06d-19a274ed9e7c.dat\" OUTPUT=\"/galaxy/server/database/objects/0/b/5/dataset_0b505333-2845-48e7-9dfc-14a8bd017c12.dat\"  QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"inputFile": {"id": "5dda19ba715fc8f4", "src": "hda", "uuid": "f4dfbefc-cdb6-45ce-b47a-0385529712e3"}, "header": {"id": "7f91faba86135d9b", "src": "hda", "uuid": "fec30889-868b-49db-b06d-19a274ed9e7c"}}, "outputs": {"outFile": {"id": "14567ae0f972019f", "src": "hda", "uuid": "0b505333-2845-48e7-9dfc-14a8bd017c12"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:32:54.658 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:32:54.658 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:32:54", "plugin": "core", "name": "end_epoch", "raw_value": "1684909974.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:32:53", "plugin": "core", "name": "start_epoch", "raw_value": "1684909973.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_RevertOriginalBaseQualitiesAndAddMateCigar/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_RevertOriginalBaseQualitiesAndAddMateCigar", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 32.84210777282715, "inputs": {"inputFile": {"src": "hda", "id": "ab958132b8e7b802"}, "restore_original_qualities": true, "max_records_to_examine": "10000", "validation_stringency": "LENIENT"}, "job": {"model_class": "Job", "id": "57b21d80017091a4", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:37:34.076719", "create_time": "2023-05-24T06:37:20.669442", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_RevertOriginalBaseQualitiesAndAddMateCigar/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-wmvp6", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&  picard RevertOriginalBaseQualitiesAndAddMateCigar  INPUT='/galaxy/server/database/objects/6/1/1/dataset_61187dbb-0d8b-400c-931d-0a1859d51e7a.dat' OUTPUT=\"/galaxy/server/database/objects/4/8/1/dataset_48196da6-4d46-4c2f-b7a8-24f2dcb0e812.dat\"  RESTORE_ORIGINAL_QUALITIES=\"true\" MAX_RECORDS_TO_EXAMINE=\"10000\"  SORT_ORDER=coordinate VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "max_records_to_examine": "\"10000\"", "restore_original_qualities": "true"}, "inputs": {"inputFile": {"id": "ab958132b8e7b802", "src": "hda", "uuid": "61187dbb-0d8b-400c-931d-0a1859d51e7a"}, "inputFile1": {"id": "ab958132b8e7b802", "src": "hda", "uuid": "61187dbb-0d8b-400c-931d-0a1859d51e7a"}}, "outputs": {"outFile": {"id": "42786ab7b1b74b00", "src": "hda", "uuid": "48196da6-4d46-4c2f-b7a8-24f2dcb0e812"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:37:22.659 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:37:22.659 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:37:22", "plugin": "core", "name": "end_epoch", "raw_value": "1684910242.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:37:21", "plugin": "core", "name": "start_epoch", "raw_value": "1684910241.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "3", "plugin": "core", "name": "galaxy_slots", "raw_value": "3.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_RevertSam/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_RevertSam", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 31.173887252807617, "inputs": {"inputFile": {"src": "hda", "id": "642595f5b2bb2cfd"}, "restore_original_qualities": true, "remove_duplicate_information": true, "remove_alignment_information": true, "attributes_to_clear_0|attribute": "XM", "sanitize": false, "max_discard_fraction": "0.01", "sample_alias": "null", "library_name": "null", "sort_order": "coordinate", "validation_stringency": "LENIENT"}, "job": {"model_class": "Job", "id": "1bcf2dbf175c70a3", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:27:06.630061", "create_time": "2023-05-24T06:26:53.449279", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_RevertSam/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-9f95b", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&  picard RevertSam  INPUT='/galaxy/server/database/objects/c/2/e/dataset_c2e26f6c-c4c0-4243-bc82-207eea45e537.dat' OUTPUT=\"/galaxy/server/database/objects/3/5/d/dataset_35d8fac0-2c17-422b-8c54-053c39a2fcc3.dat\"  RESTORE_ORIGINAL_QUALITIES=\"true\" REMOVE_DUPLICATE_INFORMATION=\"true\" REMOVE_ALIGNMENT_INFORMATION=\"true\"  ATTRIBUTE_TO_CLEAR=\"XM\"  SANITIZE=\"false\" MAX_DISCARD_FRACTION=\"0.01\" SAMPLE_ALIAS=\"null\" LIBRARY_NAME=\"null\"  SORT_ORDER=\"coordinate\" VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "sort_order": "\"coordinate\"", "library_name": "\"null\"", "sample_alias": "\"null\"", "max_discard_fraction": "\"0.01\"", "sanitize": "false", "attributes_to_clear": "[{\"__index__\": 0, \"attribute\": \"XM\"}]", "remove_alignment_information": "true", "remove_duplicate_information": "true", "restore_original_qualities": "true"}, "inputs": {"inputFile1": {"id": "642595f5b2bb2cfd", "src": "hda", "uuid": "c2e26f6c-c4c0-4243-bc82-207eea45e537"}, "inputFile": {"id": "642595f5b2bb2cfd", "src": "hda", "uuid": "c2e26f6c-c4c0-4243-bc82-207eea45e537"}}, "outputs": {"outFile": {"id": "3ef384687c44b95c", "src": "hda", "uuid": "35d8fac0-2c17-422b-8c54-053c39a2fcc3"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:26:56.259 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:26:56.259 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:26:56", "plugin": "core", "name": "end_epoch", "raw_value": "1684909616.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:26:55", "plugin": "core", "name": "start_epoch", "raw_value": "1684909615.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "3", "plugin": "core", "name": "galaxy_slots", "raw_value": "3.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SamToFastq/2.18.2.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SamToFastq", "tool_version": "2.18.2.2", "test_index": 0, "time_seconds": 35.85126233100891, "inputs": {"inputFile": {"src": "hda", "id": "849e84e5990bcad5"}, "single_or_paired": "pe_interleaved", "re_reverse": true, "include_non_pf_reads": false, "clipping_attribute": "", "clipping_action": "", "read1_trim": "0", "read1_max_bases_to_write": "-1", "read2_trim": "0", "read2_max_bases_to_write": "-1", "include_non_primary_alignments": false}, "job": {"model_class": "Job", "id": "8d9bec525080f809", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:34:21.399788", "create_time": "2023-05-24T06:34:04.754076", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SamToFastq/2.18.2.2", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-dlmg7", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/b/2/c/dataset_b2c8b42b-3fbb-4862-880c-10c2d1cea3cd.dat' 'picard_SamToFastq_bam' &&   picard SamToFastq  INPUT='picard_SamToFastq_bam'  FASTQ='/galaxy/server/database/objects/8/c/f/dataset_8cf77c56-6bd6-4585-bad4-8245f24f87aa.dat' INTERLEAVE=TRUE  RE_REVERSE=\"true\"  INCLUDE_NON_PF_READS=\"false\" READ1_TRIM=\"0\"   READ2_TRIM=\"0\"   INCLUDE_NON_PRIMARY_ALIGNMENTS=\"false\"  VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "include_non_primary_alignments": "false", "read2_max_bases_to_write": "\"-1\"", "read2_trim": "\"0\"", "read1_max_bases_to_write": "\"-1\"", "read1_trim": "\"0\"", "clipping_action": "\"\"", "clipping_attribute": "\"\"", "include_non_pf_reads": "false", "re_reverse": "true", "single_or_paired": "\"pe_interleaved\""}, "inputs": {"inputFile": {"id": "849e84e5990bcad5", "src": "hda", "uuid": "b2c8b42b-3fbb-4862-880c-10c2d1cea3cd"}}, "outputs": {"fq_single": {"id": "502d2b9e6020741f", "src": "hda", "uuid": "02b22115-efff-4605-8766-5cde8e796d94"}, "interleaved_fastq": {"id": "6c9371d2ed43cb8b", "src": "hda", "uuid": "8cf77c56-6bd6-4585-bad4-8245f24f87aa"}, "fq1": {"id": "272803e04c4abae5", "src": "hda", "uuid": "a10377d9-b012-443e-a7e9-6ed7522205c7"}, "fq2": {"id": "c23217e5ac426b61", "src": "hda", "uuid": "a0e1d754-cbf1-43e9-9342-f51121408b2a"}, "fq_u": {"id": "dc4355b29ed379ad", "src": "hda", "uuid": "5d6b1607-6546-495f-aba1-71ec52255568"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:34:10.148 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:34:10.148 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:34:10", "plugin": "core", "name": "end_epoch", "raw_value": "1684910050.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:34:08", "plugin": "core", "name": "start_epoch", "raw_value": "1684910048.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SamToFastq/2.18.2.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SamToFastq", "tool_version": "2.18.2.2", "test_index": 1, "time_seconds": 35.32543349266052, "inputs": {"inputFile": {"src": "hda", "id": "57b21d80017091a4"}, "single_or_paired": "pe_sep", "re_reverse": true, "include_non_pf_reads": false, "clipping_attribute": "", "clipping_action": "", "read1_trim": "0", "read1_max_bases_to_write": "-1", "read2_trim": "0", "read2_max_bases_to_write": "-1", "include_non_primary_alignments": false}, "job": {"model_class": "Job", "id": "61cf2c8de413db7d", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:34:36.900064", "create_time": "2023-05-24T06:34:22.238703", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SamToFastq/2.18.2.2", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-257sr", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/0/e/0/dataset_0e0defa4-cb18-45ce-81f6-1d6aec733a3a.dat' 'picard_SamToFastq_bam' &&   picard SamToFastq  INPUT='picard_SamToFastq_bam'  F='/galaxy/server/database/objects/a/b/e/dataset_abe78300-4055-450c-b0cf-4d08479841bc.dat' F2='/galaxy/server/database/objects/6/3/7/dataset_637f572a-b8e4-4de8-a5f2-b13e31d35a14.dat' FU='/galaxy/server/database/objects/e/2/a/dataset_e2af309a-a60b-4b77-bdf5-196b0b159316.dat'  RE_REVERSE=\"true\"  INCLUDE_NON_PF_READS=\"false\" READ1_TRIM=\"0\"   READ2_TRIM=\"0\"   INCLUDE_NON_PRIMARY_ALIGNMENTS=\"false\"  VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "include_non_primary_alignments": "false", "read2_max_bases_to_write": "\"-1\"", "read2_trim": "\"0\"", "read1_max_bases_to_write": "\"-1\"", "read1_trim": "\"0\"", "clipping_action": "\"\"", "clipping_attribute": "\"\"", "include_non_pf_reads": "false", "re_reverse": "true", "single_or_paired": "\"pe_sep\""}, "inputs": {"inputFile": {"id": "57b21d80017091a4", "src": "hda", "uuid": "0e0defa4-cb18-45ce-81f6-1d6aec733a3a"}}, "outputs": {"fq_single": {"id": "d7274230fcceb801", "src": "hda", "uuid": "54c47d5c-d766-4703-8894-33a8cfea625c"}, "interleaved_fastq": {"id": "78d11cb4680cd8a5", "src": "hda", "uuid": "1f521114-74ec-4942-974e-bdbd80e014ba"}, "fq1": {"id": "08b6ca44f57ba098", "src": "hda", "uuid": "abe78300-4055-450c-b0cf-4d08479841bc"}, "fq2": {"id": "58565a3c723c9e71", "src": "hda", "uuid": "637f572a-b8e4-4de8-a5f2-b13e31d35a14"}, "fq_u": {"id": "731f5165dd94d586", "src": "hda", "uuid": "e2af309a-a60b-4b77-bdf5-196b0b159316"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:34:25.240 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:34:25.240 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:34:25", "plugin": "core", "name": "end_epoch", "raw_value": "1684910065.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:34:23", "plugin": "core", "name": "start_epoch", "raw_value": "1684910063.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SamToFastq/2.18.2.2-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SamToFastq", "tool_version": "2.18.2.2", "test_index": 2, "time_seconds": 37.11490869522095, "inputs": {"inputFile": {"src": "hda", "id": "82d58e83d3e587a5"}, "single_or_paired": "se", "re_reverse": true, "include_non_pf_reads": false, "clipping_attribute": "", "clipping_action": "", "read1_trim": "0", "read1_max_bases_to_write": "-1", "read2_trim": "0", "read2_max_bases_to_write": "-1", "include_non_primary_alignments": false}, "job": {"model_class": "Job", "id": "7f91faba86135d9b", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:34:58.685445", "create_time": "2023-05-24T06:34:40.622766", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SamToFastq/2.18.2.2", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-kshh9", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/c/e/b/dataset_ceb8704a-0d62-423f-bc0e-1cb8605669b2.dat' 'picard_SamToFastq_se_bam' &&   picard SamToFastq  INPUT='picard_SamToFastq_se_bam'  F='/galaxy/server/database/objects/d/f/1/dataset_df18a9e3-18c0-481b-80a7-0ca0de25dfab.dat'  RE_REVERSE=\"true\"  INCLUDE_NON_PF_READS=\"false\" READ1_TRIM=\"0\"   READ2_TRIM=\"0\"   INCLUDE_NON_PRIMARY_ALIGNMENTS=\"false\"  VALIDATION_STRINGENCY=\"LENIENT\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi`", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "include_non_primary_alignments": "false", "read2_max_bases_to_write": "\"-1\"", "read2_trim": "\"0\"", "read1_max_bases_to_write": "\"-1\"", "read1_trim": "\"0\"", "clipping_action": "\"\"", "clipping_attribute": "\"\"", "include_non_pf_reads": "false", "re_reverse": "true", "single_or_paired": "\"se\""}, "inputs": {"inputFile": {"id": "82d58e83d3e587a5", "src": "hda", "uuid": "ceb8704a-0d62-423f-bc0e-1cb8605669b2"}}, "outputs": {"fq_single": {"id": "3952b0fb5d550946", "src": "hda", "uuid": "df18a9e3-18c0-481b-80a7-0ca0de25dfab"}, "interleaved_fastq": {"id": "d566c9acfcc22f49", "src": "hda", "uuid": "e1f80ca9-4a9d-4cb0-bc22-c4c946d4bab3"}, "fq1": {"id": "7d7e09821782a930", "src": "hda", "uuid": "3f013546-c40f-4b8d-a91a-85a2e19e3ad4"}, "fq2": {"id": "e57cd0a7318a72bb", "src": "hda", "uuid": "1ed89376-f68c-4f72-83eb-346409f47495"}, "fq_u": {"id": "0616bb4fb5a2dcba", "src": "hda", "uuid": "70f13512-78c8-4b7c-8c09-2dcab56f6180"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:34:46.540 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx12G -Xms1G\n06:34:46.540 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "3 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "3.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:34:47", "plugin": "core", "name": "end_epoch", "raw_value": "1684910087.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:34:44", "plugin": "core", "name": "start_epoch", "raw_value": "1684910084.0000000"}, {"title": "Memory Allocated (MB)", "value": "12884", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12884.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SortSam/2.18.2.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SortSam", "tool_version": "2.18.2.1", "test_index": 0, "time_seconds": 44.54448914527893, "inputs": {"inputFile": {"src": "hda", "id": "74ae4d0d969ee49c"}, "sort_order": "queryname"}, "job": {"model_class": "Job", "id": "08b6ca44f57ba098", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:38:05.924138", "create_time": "2023-05-24T06:37:40.757204", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SortSam/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-5m489", "command_line": "ln -s '/galaxy/server/database/objects/2/b/3/dataset_2b364f7b-8e53-4276-8a51-9f3ff4eb1ffa.dat' output.sam &&  _JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/b/d/b/dataset_bdb25872-236d-4286-bd99-e696487dade8.dat' 'picard_SortSam_bam' &&  picard SortSam INPUT='picard_SortSam_bam' OUTPUT='output.sam' SORT_ORDER=\"queryname\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi` VALIDATION_STRINGENCY=LENIENT", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "sort_order": "\"queryname\""}, "inputs": {"inputFile": {"id": "74ae4d0d969ee49c", "src": "hda", "uuid": "bdb25872-236d-4286-bd99-e696487dade8"}}, "outputs": {"outFile": {"id": "94f2327ecea4eac4", "src": "hda", "uuid": "2b364f7b-8e53-4276-8a51-9f3ff4eb1ffa"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx10G -Xms1G\n06:37:54.766 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx10G -Xms1G\n06:37:54.766 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:37:55", "plugin": "core", "name": "end_epoch", "raw_value": "1684910275.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:37:53", "plugin": "core", "name": "start_epoch", "raw_value": "1684910273.0000000"}, {"title": "Memory Allocated (MB)", "value": "10737", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "10737.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SortSam/2.18.2.1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SortSam", "tool_version": "2.18.2.1", "test_index": 1, "time_seconds": 33.039793491363525, "inputs": {"inputFile": {"src": "hda", "id": "74ae4d0d969ee49c"}, "sort_order": "coordinate"}, "job": {"model_class": "Job", "id": "58565a3c723c9e71", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:38:07.066875", "create_time": "2023-05-24T06:37:51.948371", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_SortSam/2.18.2.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-jwpsd", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/b/d/b/dataset_bdb25872-236d-4286-bd99-e696487dade8.dat' 'picard_SortSam_bam' &&  picard SortSam INPUT='picard_SortSam_bam' OUTPUT='/galaxy/server/database/objects/f/e/a/dataset_fea2bdab-ae86-4296-a014-e1dfcd2927f8.dat' SORT_ORDER=\"coordinate\" QUIET=true VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi` VALIDATION_STRINGENCY=LENIENT", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "sort_order": "\"coordinate\""}, "inputs": {"inputFile": {"id": "74ae4d0d969ee49c", "src": "hda", "uuid": "bdb25872-236d-4286-bd99-e696487dade8"}}, "outputs": {"outFile": {"id": "5dec70ce35125f0e", "src": "hda", "uuid": "fea2bdab-ae86-4296-a014-e1dfcd2927f8"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx10G -Xms1G\n06:37:56.240 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx10G -Xms1G\n06:37:56.240 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:37:56", "plugin": "core", "name": "end_epoch", "raw_value": "1684910276.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:37:54", "plugin": "core", "name": "start_epoch", "raw_value": "1684910274.0000000"}, {"title": "Memory Allocated (MB)", "value": "10737", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "10737.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_ValidateSamFile/2.18.2.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_ValidateSamFile", "tool_version": "2.18.2.2", "test_index": 0, "time_seconds": 40.75713920593262, "inputs": {"inputFile": {"src": "hda", "id": "2687f0554c2fceba"}, "reference_source|ref_file": {"src": "hda", "id": "c5a32313dd6ff6bb"}, "reference_source|reference_source_selector": "history", "mode": "VERBOSE", "ignore": ["INVALID_QUALITY_FORMAT", "INVALID_FLAG_PROPER_PAIR"], "max_output": "100", "ignore_warnings": false, "validate_index": true, "is_bisulfite_sequenced": false}, "job": {"model_class": "Job", "id": "849e84e5990bcad5", "state": "ok", "exit_code": 2, "update_time": "2023-05-24T06:36:43.054552", "create_time": "2023-05-24T06:36:24.120888", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_ValidateSamFile/2.18.2.2", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-sddz8", "command_line": "[ `ulimit -Hn` = unlimited ] && ulimit -Sn 4096 || ulimit -Sn `ulimit -Hn`  &&   ln -f -s '/galaxy/server/database/objects/8/6/5/dataset_8658bf93-d028-4b3f-8dc3-ea8405c74799.dat' 'picard_ValidateSamFile_bam' &&   ln -s \"/galaxy/server/database/objects/d/1/7/dataset_d174182e-01ca-4ad0-a936-68935bd111b6.dat\" \"localref.fa\" &&   _JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   picard ValidateSamFile  INPUT='picard_ValidateSamFile_bam' OUTPUT=\"/galaxy/server/database/objects/d/f/6/dataset_df615874-8fc2-4e98-9443-df79707eca45.dat\" MODE=\"VERBOSE\"  IGNORE=\"INVALID_QUALITY_FORMAT\" IGNORE=\"INVALID_FLAG_PROPER_PAIR\"  MAX_OUTPUT=\"100\" REFERENCE_SEQUENCE=\"localref.fa\" IGNORE_WARNINGS=\"false\" IS_BISULFITE_SEQUENCED=\"false\" VALIDATE_INDEX=\"true\" MAX_OPEN_TEMP_FILES=`ulimit -Sn`  VERBOSITY=ERROR  `if [ -n \"$TMPDIR\" ] ; then echo 'TMP_DIR=$TMPDIR' ; else if [ -n \"$TEMP\" ] ; then echo 'TMP_DIR=$TEMP' ; fi ; fi` QUIET=true", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "is_bisulfite_sequenced": "false", "validate_index": "true", "ignore_warnings": "false", "max_output": "\"100\"", "ignore": "[\"INVALID_QUALITY_FORMAT\", \"INVALID_FLAG_PROPER_PAIR\"]", "mode": "\"VERBOSE\"", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 176, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"inputFile": {"id": "2687f0554c2fceba", "src": "hda", "uuid": "8658bf93-d028-4b3f-8dc3-ea8405c74799"}, "ref_file": {"id": "c5a32313dd6ff6bb", "src": "hda", "uuid": "d174182e-01ca-4ad0-a936-68935bd111b6"}}, "outputs": {"outFile": {"id": "4800b9c6476ae04f", "src": "hda", "uuid": "df615874-8fc2-4e98-9443-df79707eca45"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:36:31.008 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:36:31.008 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n", "stdout": "", "job_messages": [{"code_desc": "", "desc": "Warning: Exit code 2 ()", "error_level": 2, "exit_code": 2, "type": "exit_code"}], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:36:31", "plugin": "core", "name": "end_epoch", "raw_value": "1684910191.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:36:30", "plugin": "core", "name": "start_epoch", "raw_value": "1684910190.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "3", "plugin": "core", "name": "galaxy_slots", "raw_value": "3.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics/2.18.2.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics", "tool_version": "2.18.2.2", "test_index": 0, "time_seconds": 43.57165336608887, "inputs": {"inputFile": {"src": "hda", "id": "4b0378c65451e77e"}, "reference_source|ref_file": {"src": "hda", "id": "78cea08b05c34ae2"}, "reference_source|reference_source_selector": "history", "context_size": "1", "contexts_to_print": "AAA,CAA,AAC,AAT,AAG"}, "job": {"model_class": "Job", "id": "dfff26eca9d73267", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:33:27.977840", "create_time": "2023-05-24T06:33:12.390328", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics/2.18.2.2", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-54ptt", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/0/f/3/dataset_0f320642-fc16-4de7-85df-dfee34637928.dat' 'picard_ARRG_test1_bam' &&    ln -s '/galaxy/server/database/objects/3/a/1/dataset_3a18cd8e-a266-4122-b4ee-39957b164d5a.dat' 'localref.fa' &&   picard CollectSequencingArtifactMetrics I='picard_ARRG_test1_bam' O='OutPut' R='localref.fa' AS=false CONTEXT_SIZE=1 INCLUDE_DUPLICATES='false' CONTEXTS_TO_PRINT='AAA' CONTEXTS_TO_PRINT='CAA' CONTEXTS_TO_PRINT='AAC' CONTEXTS_TO_PRINT='AAT' CONTEXTS_TO_PRINT='AAG' MINIMUM_QUALITY_SCORE='30' INCLUDE_UNPAIRED='false' MAXIMUM_INSERT_SIZE='600' MINIMUM_INSERT_SIZE='30' MINIMUM_MAPPING_QUALITY='20' VALIDATION_STRINGENCY='LENIENT';", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "validation_stringency": "\"LENIENT\"", "unpaired": "false", "duplicates": "false", "assume_sorted": "false", "minim_map_quality": "\"20\"", "min_size": "\"30\"", "max_size": "\"600\"", "min_quality_score": "\"30\"", "contexts_to_print": "\"AAA,CAA,AAC,AAT,AAG\"", "context_size": "\"1\"", "reference_source": "{\"__current_case__\": 1, \"ref_file\": {\"values\": [{\"id\": 130, \"src\": \"hda\"}]}, \"reference_source_selector\": \"history\"}"}, "inputs": {"inputFile": {"id": "4b0378c65451e77e", "src": "hda", "uuid": "0f320642-fc16-4de7-85df-dfee34637928"}, "ref_file": {"id": "78cea08b05c34ae2", "src": "hda", "uuid": "3a18cd8e-a266-4122-b4ee-39957b164d5a"}}, "outputs": {"pre_details": {"id": "a752cb4f355dfffe", "src": "hda", "uuid": "5fb90fa0-9b63-4b18-b157-cfc21086d519"}, "pre_summary": {"id": "0642cd555ac058e7", "src": "hda", "uuid": "1fab55f9-f9a5-4512-9988-58205070d9d1"}, "pos_details": {"id": "a10a262a1ff98949", "src": "hda", "uuid": "4baa3af9-36a7-4b1c-b97c-a2c369f65590"}, "pos_summary": {"id": "1e99ad736397284a", "src": "hda", "uuid": "f2bb5c7f-4d0c-4fb7-82ba-ba64a596d616"}, "err_summary": {"id": "bbecd1bc95894c6f", "src": "hda", "uuid": "42cd9b94-c03e-4a58-af81-66b92c696f17"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:33:17.051 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 24 06:33:17 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=localref.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 24 06:33:17 GMT 2023] Executing as root@gxy-54ptt-zg9km on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\n[Wed May 24 06:33:17 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.00 minutes.\nRuntime.totalMemory()=1029177344\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:33:17.051 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 24 06:33:17 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=localref.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 24 06:33:17 GMT 2023] Executing as root@gxy-54ptt-zg9km on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\n[Wed May 24 06:33:17 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.00 minutes.\nRuntime.totalMemory()=1029177344\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:33:17", "plugin": "core", "name": "end_epoch", "raw_value": "1684909997.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:33:16", "plugin": "core", "name": "start_epoch", "raw_value": "1684909996.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "3", "plugin": "core", "name": "galaxy_slots", "raw_value": "3.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics/2.18.2.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics", "tool_version": "2.18.2.2", "test_index": 1, "time_seconds": 34.776429414749146, "inputs": {"inputFile": {"src": "hda", "id": "f6c2cf194bcfe7b4"}, "reference_source|reference_source_selector": "cached", "context_size": "1", "contexts_to_print": "AAA,CAA,AAC,AAT,AAG"}, "job": {"model_class": "Job", "id": "222e0e88f491eaf8", "state": "error", "exit_code": 1, "update_time": "2023-05-24T06:33:45.164624", "create_time": "2023-05-24T06:33:29.757095", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics/2.18.2.2", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-dl8bq", "command_line": "_JAVA_OPTIONS=${_JAVA_OPTIONS:-'-Xmx2048m -Xms256m'} && export _JAVA_OPTIONS &&   ln -f -s '/galaxy/server/database/objects/5/6/f/dataset_56fc8c48-3001-44bd-ab7f-1a82d743e00f.dat' 'picard_ARRG_test1_bam' &&      picard CollectSequencingArtifactMetrics I='picard_ARRG_test1_bam' O='OutPut' R='/cvmfs/data.galaxyproject.org/managed/picard_index/apiMel4/apiMel4.fa' AS=false CONTEXT_SIZE=1 INCLUDE_DUPLICATES='false' CONTEXTS_TO_PRINT='AAA' CONTEXTS_TO_PRINT='CAA' CONTEXTS_TO_PRINT='AAC' CONTEXTS_TO_PRINT='AAT' CONTEXTS_TO_PRINT='AAG' MINIMUM_QUALITY_SCORE='30' INCLUDE_UNPAIRED='false' MAXIMUM_INSERT_SIZE='600' MINIMUM_INSERT_SIZE='30' MINIMUM_MAPPING_QUALITY='20' VALIDATION_STRINGENCY='LENIENT';", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"hg38\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/hg38.len\"", "validation_stringency": "\"LENIENT\"", "unpaired": "false", "duplicates": "false", "assume_sorted": "false", "minim_map_quality": "\"20\"", "min_size": "\"30\"", "max_size": "\"600\"", "min_quality_score": "\"30\"", "contexts_to_print": "\"AAA,CAA,AAC,AAT,AAG\"", "context_size": "\"1\"", "reference_source": "{\"__current_case__\": 0, \"ref_file\": \"apiMel4\", \"reference_source_selector\": \"cached\"}"}, "inputs": {"inputFile": {"id": "f6c2cf194bcfe7b4", "src": "hda", "uuid": "56fc8c48-3001-44bd-ab7f-1a82d743e00f"}}, "outputs": {"pre_details": {"id": "b2f71fbc5b1e1fe9", "src": "hda", "uuid": "c2f0a81a-4d6d-4ade-a179-40ab6d559fed"}, "pre_summary": {"id": "7e6ad98134a8f5e4", "src": "hda", "uuid": "8f8673d8-64e3-4d10-9924-689ea8e39d24"}, "pos_details": {"id": "bdf909f6d83004e6", "src": "hda", "uuid": "616533e2-94e7-478c-aee7-1f5c3ce46d37"}, "pos_summary": {"id": "08e2e8cbe3019998", "src": "hda", "uuid": "4ab8e2b8-107b-4add-b73b-b2bedaf078c3"}, "err_summary": {"id": "254d11f9ca7bba70", "src": "hda", "uuid": "394a6d69-2520-4d9b-a081-6ed5625bf2cc"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:33:32.460 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 24 06:33:32 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=/cvmfs/data.galaxyproject.org/managed/picard_index/apiMel4/apiMel4.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 24 06:33:32 GMT 2023] Executing as root@gxy-dl8bq-ss872 on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\n[Wed May 24 06:33:33 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.01 minutes.\nRuntime.totalMemory()=1029177344\nTo get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp\nException in thread \"main\" htsjdk.samtools.util.SequenceUtil$SequenceListsDifferException: Sequence dictionaries are not the same size (1, 5321)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceListsEqual(SequenceUtil.java:237)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:320)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:306)\n\tat picard.analysis.SinglePassSamProgram.makeItSo(SinglePassSamProgram.java:107)\n\tat picard.analysis.SinglePassSamProgram.doWork(SinglePassSamProgram.java:84)\n\tat picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:282)\n\tat picard.cmdline.PicardCommandLine.instanceMain(PicardCommandLine.java:98)\n\tat picard.cmdline.PicardCommandLine.main(PicardCommandLine.java:108)\n", "job_stdout": "", "job_stderr": "", "stderr": "/usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:33:32.460 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 24 06:33:32 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=/cvmfs/data.galaxyproject.org/managed/picard_index/apiMel4/apiMel4.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 24 06:33:32 GMT 2023] Executing as root@gxy-dl8bq-ss872 on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\n[Wed May 24 06:33:33 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.01 minutes.\nRuntime.totalMemory()=1029177344\nTo get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp\nException in thread \"main\" htsjdk.samtools.util.SequenceUtil$SequenceListsDifferException: Sequence dictionaries are not the same size (1, 5321)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceListsEqual(SequenceUtil.java:237)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:320)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:306)\n\tat picard.analysis.SinglePassSamProgram.makeItSo(SinglePassSamProgram.java:107)\n\tat picard.analysis.SinglePassSamProgram.doWork(SinglePassSamProgram.java:84)\n\tat picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:282)\n\tat picard.cmdline.PicardCommandLine.instanceMain(PicardCommandLine.java:98)\n\tat picard.cmdline.PicardCommandLine.main(PicardCommandLine.java:108)\n", "stdout": "", "job_messages": [{"code_desc": "", "desc": "Fatal error: Exit code 1 ()", "error_level": 3, "exit_code": 1, "type": "exit_code"}], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "2 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "2.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:33:33", "plugin": "core", "name": "end_epoch", "raw_value": "1684910013.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:33:31", "plugin": "core", "name": "start_epoch", "raw_value": "1684910011.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "3", "plugin": "core", "name": "galaxy_slots", "raw_value": "3.0000000"}]}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics/2.18.2.2, exit_code: 1, stderr: /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:33:32.460 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 24 06:33:32 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=/cvmfs/data.galaxyproject.org/managed/picard_index/apiMel4/apiMel4.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 24 06:33:32 GMT 2023] Executing as root@gxy-dl8bq-ss872 on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\n[Wed May 24 06:33:33 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.01 minutes.\nRuntime.totalMemory()=1029177344\nTo get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp\nException in thread \"main\" htsjdk.samtools.util.SequenceUtil$SequenceListsDifferException: Sequence dictionaries are not the same size (1, 5321)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceListsEqual(SequenceUtil.java:237)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:320)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:306)\n\tat picard.analysis.SinglePassSamProgram.makeItSo(SinglePassSamProgram.java:107)\n\tat picard.analysis.SinglePassSamProgram.doWork(SinglePassSamProgram.java:84)\n\tat picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:282)\n\tat picard.cmdline.PicardCommandLine.instanceMain(PicardCommandLine.java:98)\n\tat picard.cmdline.PicardCommandLine.main(PicardCommandLine.java:108)\n.", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics/2.18.2.2, exit_code: 1, stderr: /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:33:32.460 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 24 06:33:32 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=/cvmfs/data.galaxyproject.org/managed/picard_index/apiMel4/apiMel4.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 24 06:33:32 GMT 2023] Executing as root@gxy-dl8bq-ss872 on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\n[Wed May 24 06:33:33 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.01 minutes.\nRuntime.totalMemory()=1029177344\nTo get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp\nException in thread \"main\" htsjdk.samtools.util.SequenceUtil$SequenceListsDifferException: Sequence dictionaries are not the same size (1, 5321)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceListsEqual(SequenceUtil.java:237)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:320)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:306)\n\tat picard.analysis.SinglePassSamProgram.makeItSo(SinglePassSamProgram.java:107)\n\tat picard.analysis.SinglePassSamProgram.doWork(SinglePassSamProgram.java:84)\n\tat picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:282)\n\tat picard.cmdline.PicardCommandLine.instanceMain(PicardCommandLine.java:98)\n\tat picard.cmdline.PicardCommandLine.main(PicardCommandLine.java:108)\n.", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics/2.18.2.2, exit_code: 1, stderr: /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:33:32.460 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 24 06:33:32 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=/cvmfs/data.galaxyproject.org/managed/picard_index/apiMel4/apiMel4.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 24 06:33:32 GMT 2023] Executing as root@gxy-dl8bq-ss872 on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\n[Wed May 24 06:33:33 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.01 minutes.\nRuntime.totalMemory()=1029177344\nTo get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp\nException in thread \"main\" htsjdk.samtools.util.SequenceUtil$SequenceListsDifferException: Sequence dictionaries are not the same size (1, 5321)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceListsEqual(SequenceUtil.java:237)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:320)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:306)\n\tat picard.analysis.SinglePassSamProgram.makeItSo(SinglePassSamProgram.java:107)\n\tat picard.analysis.SinglePassSamProgram.doWork(SinglePassSamProgram.java:84)\n\tat picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:282)\n\tat picard.cmdline.PicardCommandLine.instanceMain(PicardCommandLine.java:98)\n\tat picard.cmdline.PicardCommandLine.main(PicardCommandLine.java:108)\n.", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics/2.18.2.2, exit_code: 1, stderr: /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:33:32.460 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 24 06:33:32 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=/cvmfs/data.galaxyproject.org/managed/picard_index/apiMel4/apiMel4.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 24 06:33:32 GMT 2023] Executing as root@gxy-dl8bq-ss872 on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\n[Wed May 24 06:33:33 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.01 minutes.\nRuntime.totalMemory()=1029177344\nTo get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp\nException in thread \"main\" htsjdk.samtools.util.SequenceUtil$SequenceListsDifferException: Sequence dictionaries are not the same size (1, 5321)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceListsEqual(SequenceUtil.java:237)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:320)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:306)\n\tat picard.analysis.SinglePassSamProgram.makeItSo(SinglePassSamProgram.java:107)\n\tat picard.analysis.SinglePassSamProgram.doWork(SinglePassSamProgram.java:84)\n\tat picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:282)\n\tat picard.cmdline.PicardCommandLine.instanceMain(PicardCommandLine.java:98)\n\tat picard.cmdline.PicardCommandLine.main(PicardCommandLine.java:108)\n.", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics/2.18.2.2, exit_code: 1, stderr: /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:33:32.460 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 24 06:33:32 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=/cvmfs/data.galaxyproject.org/managed/picard_index/apiMel4/apiMel4.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 24 06:33:32 GMT 2023] Executing as root@gxy-dl8bq-ss872 on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\n[Wed May 24 06:33:33 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.01 minutes.\nRuntime.totalMemory()=1029177344\nTo get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp\nException in thread \"main\" htsjdk.samtools.util.SequenceUtil$SequenceListsDifferException: Sequence dictionaries are not the same size (1, 5321)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceListsEqual(SequenceUtil.java:237)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:320)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:306)\n\tat picard.analysis.SinglePassSamProgram.makeItSo(SinglePassSamProgram.java:107)\n\tat picard.analysis.SinglePassSamProgram.doWork(SinglePassSamProgram.java:84)\n\tat picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:282)\n\tat picard.cmdline.PicardCommandLine.instanceMain(PicardCommandLine.java:98)\n\tat picard.cmdline.PicardCommandLine.main(PicardCommandLine.java:108)\n.", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/devteam/picard/picard_artifact_metrics/2.18.2.2, exit_code: 1, stderr: /usr/local/bin/picard: line 5: warning: setlocale: LC_ALL: cannot change locale (en_US.UTF-8): No such file or directory\nPicked up _JAVA_OPTIONS: -Xmx11G -Xms1G\n06:33:32.460 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/local/share/picard-2.18.2-0/picard.jar!/com/intel/gkl/native/libgkl_compression.so\n[Wed May 24 06:33:32 GMT 2023] CollectSequencingArtifactMetrics MINIMUM_QUALITY_SCORE=30 MINIMUM_MAPPING_QUALITY=20 MINIMUM_INSERT_SIZE=30 MAXIMUM_INSERT_SIZE=600 INCLUDE_UNPAIRED=false INCLUDE_DUPLICATES=false CONTEXT_SIZE=1 CONTEXTS_TO_PRINT=[AAA, CAA, AAC, AAT, AAG] INPUT=picard_ARRG_test1_bam OUTPUT=OutPut ASSUME_SORTED=false VALIDATION_STRINGENCY=LENIENT REFERENCE_SEQUENCE=/cvmfs/data.galaxyproject.org/managed/picard_index/apiMel4/apiMel4.fa    INCLUDE_NON_PF_READS=false TANDEM_READS=false USE_OQ=true STOP_AFTER=0 VERBOSITY=INFO QUIET=false COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json USE_JDK_DEFLATER=false USE_JDK_INFLATER=false\n[Wed May 24 06:33:32 GMT 2023] Executing as root@gxy-dl8bq-ss872 on Linux 5.10.162+ amd64; OpenJDK 64-Bit Server VM 1.8.0_121-b15; Deflater: Intel; Inflater: Intel; Provider GCS is not available; Picard version: 2.18.2-SNAPSHOT\n[Wed May 24 06:33:33 GMT 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.01 minutes.\nRuntime.totalMemory()=1029177344\nTo get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp\nException in thread \"main\" htsjdk.samtools.util.SequenceUtil$SequenceListsDifferException: Sequence dictionaries are not the same size (1, 5321)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceListsEqual(SequenceUtil.java:237)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:320)\n\tat htsjdk.samtools.util.SequenceUtil.assertSequenceDictionariesEqual(SequenceUtil.java:306)\n\tat picard.analysis.SinglePassSamProgram.makeItSo(SinglePassSamProgram.java:107)\n\tat picard.analysis.SinglePassSamProgram.doWork(SinglePassSamProgram.java:84)\n\tat picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:282)\n\tat picard.cmdline.PicardCommandLine.instanceMain(PicardCommandLine.java:98)\n\tat picard.cmdline.PicardCommandLine.main(PicardCommandLine.java:108)\n."], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.6+galaxy1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2", "tool_version": "2.11.40.6+galaxy1", "test_index": 0, "time_seconds": 133.4392864704132, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "6c403441eb742c53"}, {"src": "hda", "id": "9bb04528c4b6d069"}, {"src": "hda", "id": "941b46dddd10a63d"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "5b72c248c20209f3"}, {"src": "hda", "id": "67fee57ea21987f2"}, {"src": "hda", "id": "e43b628d8b3f85e9"}, {"src": "hda", "id": "148be0224d0cc9f0"}], "pdf": false, "normCounts": true, "normRLog": true, "normVST": true}, "job": {"model_class": "Job", "id": "75ac280aa3975403", "state": "error", "exit_code": null, "update_time": "2023-05-24T06:45:29.840384", "create_time": "2023-05-24T06:44:16.305136", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.6+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-ls26t", "command_line": "cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/6a3a025714d3/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/6a3a025714d3/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/f/8/7/dataset_f876eccc-df7d-4bfb-9185-62ac6138b6d9.dat' -n '/galaxy/server/database/objects/c/9/d/dataset_c9d24780-6f5b-4034-b2f0-5666244ad9f5.dat' -r '/galaxy/server/database/objects/d/c/2/dataset_dc20ac49-c9b5-46f9-a3b5-b520ba83b063.dat' -v '/galaxy/server/database/objects/4/6/4/dataset_464b6b8b-c447-4aa0-bdfa-8939b73f032c.dat'                    -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/3/d/0/dataset_3d035c09-c84e-41f1-a904-0bf6e113be3a.dat\", \"/galaxy/server/database/objects/2/1/2/dataset_2120104f-6855-4c01-b4ac-412193b94140.dat\", \"/galaxy/server/database/objects/e/8/7/dataset_e8740fd6-0403-4591-8d1c-490241845c99.dat\", \"/galaxy/server/database/objects/d/9/7/dataset_d973e672-997e-42e2-81ea-c0b80fc3272d.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/5/e/5/dataset_5e5148ee-31b5-41ba-96ba-4b3349ac92cc.dat\", \"/galaxy/server/database/objects/f/7/2/dataset_f7243932-4392-4b42-8176-301632eb6d05.dat\", \"/galaxy/server/database/objects/8/0/c/dataset_80c944da-6d06-4d16-a825-3d31aec94b44.dat\"]}]]]' -l '{\"dataset_5e5148ee-31b5-41ba-96ba-4b3349ac92cc.dat\": \"GSM461179_treat_single.counts\", \"dataset_f7243932-4392-4b42-8176-301632eb6d05.dat\": \"GSM461180_treat_paired.counts\", \"dataset_80c944da-6d06-4d16-a825-3d31aec94b44.dat\": \"GSM461181_treat_paired.counts\", \"dataset_3d035c09-c84e-41f1-a904-0bf6e113be3a.dat\": \"GSM461176_untreat_single.counts\", \"dataset_2120104f-6855-4c01-b4ac-412193b94140.dat\": \"GSM461177_untreat_paired.counts\", \"dataset_e8740fd6-0403-4591-8d1c-490241845c99.dat\": \"GSM461178_untreat_paired.counts\", \"dataset_d973e672-997e-42e2-81ea-c0b80fc3272d.dat\": \"GSM461182_untreat_single.counts\"}' -t 1", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "auto_mean_filter_off": "false", "outlier_filter_off": "false", "outlier_replace_off": "false", "fit_type": "\"1\"", "esf": "\"\"", "many_contrasts": "false", "normVST": "true", "normRLog": "true", "normCounts": "true", "pdf": "false", "tximport": "{\"__current_case__\": 1, \"tximport_selector\": \"count\"}", "header": "true", "batch_factors": null, "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 265, \"src\": \"hda\"}, {\"id\": 266, \"src\": \"hda\"}, {\"id\": 267, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 268, \"src\": \"hda\"}, {\"id\": 269, \"src\": \"hda\"}, {\"id\": 270, \"src\": \"hda\"}, {\"id\": 271, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "6c403441eb742c53", "src": "hda", "uuid": "5e5148ee-31b5-41ba-96ba-4b3349ac92cc"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "6c403441eb742c53", "src": "hda", "uuid": "5e5148ee-31b5-41ba-96ba-4b3349ac92cc"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "9bb04528c4b6d069", "src": "hda", "uuid": "f7243932-4392-4b42-8176-301632eb6d05"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "941b46dddd10a63d", "src": "hda", "uuid": "80c944da-6d06-4d16-a825-3d31aec94b44"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "5b72c248c20209f3", "src": "hda", "uuid": "3d035c09-c84e-41f1-a904-0bf6e113be3a"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "5b72c248c20209f3", "src": "hda", "uuid": "3d035c09-c84e-41f1-a904-0bf6e113be3a"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "67fee57ea21987f2", "src": "hda", "uuid": "2120104f-6855-4c01-b4ac-412193b94140"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "e43b628d8b3f85e9", "src": "hda", "uuid": "e8740fd6-0403-4591-8d1c-490241845c99"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile4": {"id": "148be0224d0cc9f0", "src": "hda", "uuid": "d973e672-997e-42e2-81ea-c0b80fc3272d"}}, "outputs": {"deseq_out": {"id": "679208ad0b6351be", "src": "hda", "uuid": "f876eccc-df7d-4bfb-9185-62ac6138b6d9"}, "counts_out": {"id": "1a3f4232728e3a1a", "src": "hda", "uuid": "c9d24780-6f5b-4034-b2f0-5666244ad9f5"}, "rlog_out": {"id": "768eef53745c43c2", "src": "hda", "uuid": "dc20ac49-c9b5-46f9-a3b5-b520ba83b063"}, "vst_out": {"id": "05a60f63f25164a7", "src": "hda", "uuid": "464b6b8b-c447-4aa0-bdfa-8939b73f032c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": null, "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.6+galaxy1, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.6+galaxy1, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.6+galaxy1, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.6+galaxy1, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.6+galaxy1, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.6+galaxy1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2", "tool_version": "2.11.40.6+galaxy1", "test_index": 1, "time_seconds": 113.91810488700867, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "6c403441eb742c53"}, {"src": "hda", "id": "9bb04528c4b6d069"}, {"src": "hda", "id": "941b46dddd10a63d"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "5b72c248c20209f3"}, {"src": "hda", "id": "67fee57ea21987f2"}, {"src": "hda", "id": "e43b628d8b3f85e9"}, {"src": "hda", "id": "148be0224d0cc9f0"}], "batch_factors": {"src": "hda", "id": "e4e3c081504eb955"}, "pdf": false, "normCounts": true}, "job": {"model_class": "Job", "id": "458f43d74574750d", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:45:35.961190", "create_time": "2023-05-24T06:44:38.155042", "galaxy_version": "23.0", "command_version": "R version 3.5.1 (2018-07-02) -- \"Feather Spray\", DESeq2 version 1.22.1", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.6+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-6hf4b", "command_line": "cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/6a3a025714d3/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/6a3a025714d3/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/8/0/c/dataset_80c44028-98e4-44a8-923e-3f3336974fcc.dat' -n '/galaxy/server/database/objects/e/2/c/dataset_e2c21654-f28a-4f63-8c81-42bdc5325ed7.dat'                    -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/3/d/0/dataset_3d035c09-c84e-41f1-a904-0bf6e113be3a.dat\", \"/galaxy/server/database/objects/2/1/2/dataset_2120104f-6855-4c01-b4ac-412193b94140.dat\", \"/galaxy/server/database/objects/e/8/7/dataset_e8740fd6-0403-4591-8d1c-490241845c99.dat\", \"/galaxy/server/database/objects/d/9/7/dataset_d973e672-997e-42e2-81ea-c0b80fc3272d.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/5/e/5/dataset_5e5148ee-31b5-41ba-96ba-4b3349ac92cc.dat\", \"/galaxy/server/database/objects/f/7/2/dataset_f7243932-4392-4b42-8176-301632eb6d05.dat\", \"/galaxy/server/database/objects/8/0/c/dataset_80c944da-6d06-4d16-a825-3d31aec94b44.dat\"]}]]]' -l '{\"dataset_5e5148ee-31b5-41ba-96ba-4b3349ac92cc.dat\": \"GSM461179_treat_single.counts\", \"dataset_f7243932-4392-4b42-8176-301632eb6d05.dat\": \"GSM461180_treat_paired.counts\", \"dataset_80c944da-6d06-4d16-a825-3d31aec94b44.dat\": \"GSM461181_treat_paired.counts\", \"dataset_3d035c09-c84e-41f1-a904-0bf6e113be3a.dat\": \"GSM461176_untreat_single.counts\", \"dataset_2120104f-6855-4c01-b4ac-412193b94140.dat\": \"GSM461177_untreat_paired.counts\", \"dataset_e8740fd6-0403-4591-8d1c-490241845c99.dat\": \"GSM461178_untreat_paired.counts\", \"dataset_d973e672-997e-42e2-81ea-c0b80fc3272d.dat\": \"GSM461182_untreat_single.counts\"}' -t 1 --batch_factors '/galaxy/server/database/objects/0/8/7/dataset_087f4ee6-4e03-485e-bbc3-2d6b1dbd4ed1.dat'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "auto_mean_filter_off": "false", "outlier_filter_off": "false", "outlier_replace_off": "false", "fit_type": "\"1\"", "esf": "\"\"", "many_contrasts": "false", "normVST": "false", "normRLog": "false", "normCounts": "true", "pdf": "false", "tximport": "{\"__current_case__\": 1, \"tximport_selector\": \"count\"}", "header": "true", "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 265, \"src\": \"hda\"}, {\"id\": 266, \"src\": \"hda\"}, {\"id\": 267, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 268, \"src\": \"hda\"}, {\"id\": 269, \"src\": \"hda\"}, {\"id\": 270, \"src\": \"hda\"}, {\"id\": 271, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "6c403441eb742c53", "src": "hda", "uuid": "5e5148ee-31b5-41ba-96ba-4b3349ac92cc"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "6c403441eb742c53", "src": "hda", "uuid": "5e5148ee-31b5-41ba-96ba-4b3349ac92cc"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "9bb04528c4b6d069", "src": "hda", "uuid": "f7243932-4392-4b42-8176-301632eb6d05"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "941b46dddd10a63d", "src": "hda", "uuid": "80c944da-6d06-4d16-a825-3d31aec94b44"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "5b72c248c20209f3", "src": "hda", "uuid": "3d035c09-c84e-41f1-a904-0bf6e113be3a"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "5b72c248c20209f3", "src": "hda", "uuid": "3d035c09-c84e-41f1-a904-0bf6e113be3a"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "67fee57ea21987f2", "src": "hda", "uuid": "2120104f-6855-4c01-b4ac-412193b94140"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "e43b628d8b3f85e9", "src": "hda", "uuid": "e8740fd6-0403-4591-8d1c-490241845c99"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile4": {"id": "148be0224d0cc9f0", "src": "hda", "uuid": "d973e672-997e-42e2-81ea-c0b80fc3272d"}, "batch_factors": {"id": "e4e3c081504eb955", "src": "hda", "uuid": "087f4ee6-4e03-485e-bbc3-2d6b1dbd4ed1"}}, "outputs": {"deseq_out": {"id": "e041acc4916a4029", "src": "hda", "uuid": "80c44028-98e4-44a8-923e-3f3336974fcc"}, "counts_out": {"id": "824174aaebeeeba4", "src": "hda", "uuid": "e2c21654-f28a-4f63-8c81-42bdc5325ed7"}}, "output_collections": {}, "tool_stdout": "primary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                                Treatment\nGSM461176_untreat_single.counts Untreated\nGSM461177_untreat_paired.counts Untreated\nGSM461178_untreat_paired.counts Untreated\nGSM461182_untreat_single.counts Untreated\nGSM461179_treat_single.counts     Treated\nGSM461180_treat_paired.counts     Treated\nGSM461181_treat_paired.counts     Treated\n\ndesign formula:\n~W_1 + Treatment\n\n\n7 samples with counts over 3999 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 3429 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 179, 5.2%\nLFC < 0 (down)     : 208, 6.1%\noutliers [1]       : 0, 0%\nlow counts [2]     : 725, 21%\n(mean count < 4)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 3.5.1 (2018-07-02)\nPlatform: x86_64-conda_cos6-linux-gnu (64-bit)\nRunning under: Buildroot 2014.02\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/R/lib/libRblas.so\n\nlocale:\n[1] C\n\nattached base packages:\n [1] parallel  stats4    tools     stats     graphics  grDevices utils    \n [8] datasets  methods   base     \n\nother attached packages:\n [1] rjson_0.2.20                gplots_3.0.1               \n [3] RColorBrewer_1.1-2          DESeq2_1.22.1              \n [5] SummarizedExperiment_1.12.0 DelayedArray_0.8.0         \n [7] BiocParallel_1.16.2         matrixStats_0.54.0         \n [9] Biobase_2.42.0              GenomicRanges_1.34.0       \n[11] GenomeInfoDb_1.18.1         IRanges_2.16.0             \n[13] S4Vectors_0.20.1            BiocGenerics_0.28.0        \n[15] getopt_1.20.2              \n\nloaded via a namespace (and not attached):\n [1] bit64_0.9-7            splines_3.5.1          gtools_3.8.1          \n [4] Formula_1.2-3          latticeExtra_0.6-28    blob_1.1.1            \n [7] GenomeInfoDbData_1.2.0 pillar_1.3.1           RSQLite_2.1.1         \n[10] backports_1.1.3        lattice_0.20-38        digest_0.6.18         \n[13] XVector_0.22.0         checkmate_1.8.5        colorspace_1.4-0      \n[16] htmltools_0.3.6        Matrix_1.2-15          plyr_1.8.4            \n[19] XML_3.98-1.16          pkgconfig_2.0.2        genefilter_1.64.0     \n[22] zlibbioc_1.28.0        xtable_1.8-3           scales_1.0.0          \n[25] gdata_2.18.0           htmlTable_1.13.1       tibble_2.0.1          \n[28] annotate_1.60.0        ggplot2_3.1.0          nnet_7.3-12           \n[31] lazyeval_0.2.1         survival_2.43-3        magrittr_1.5          \n[34] crayon_1.3.4           memoise_1.1.0          foreign_0.8-71        \n[37] data.table_1.12.0      stringr_1.3.1          munsell_0.5.0         \n[40] locfit_1.5-9.1         cluster_2.0.7-1        AnnotationDbi_1.44.0  \n[43] compiler_3.5.1         caTools_1.17.1.1       rlang_0.3.1           \n[46] grid_3.5.1             RCurl_1.95-4.11        rstudioapi_0.9.0      \n[49] htmlwidgets_1.3        bitops_1.0-6           base64enc_0.1-3       \n[52] gtable_0.2.0           DBI_1.0.0              gridExtra_2.3         \n[55] knitr_1.21             bit_1.1-12             Hmisc_4.1-1           \n[58] KernSmooth_2.23-15     stringi_1.2.4          Rcpp_1.0.0            \n[61] geneplotter_1.60.0     rpart_4.1-13           acepack_1.4.1         \n[64] xfun_0.4              \n", "tool_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nestimating size factors\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\nfinal dispersion estimates\nfitting model and testing\n", "job_stdout": "", "job_stderr": "", "stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nestimating size factors\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\nfinal dispersion estimates\nfitting model and testing\n", "stdout": "primary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                                Treatment\nGSM461176_untreat_single.counts Untreated\nGSM461177_untreat_paired.counts Untreated\nGSM461178_untreat_paired.counts Untreated\nGSM461182_untreat_single.counts Untreated\nGSM461179_treat_single.counts     Treated\nGSM461180_treat_paired.counts     Treated\nGSM461181_treat_paired.counts     Treated\n\ndesign formula:\n~W_1 + Treatment\n\n\n7 samples with counts over 3999 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 3429 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 179, 5.2%\nLFC < 0 (down)     : 208, 6.1%\noutliers [1]       : 0, 0%\nlow counts [2]     : 725, 21%\n(mean count < 4)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 3.5.1 (2018-07-02)\nPlatform: x86_64-conda_cos6-linux-gnu (64-bit)\nRunning under: Buildroot 2014.02\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/R/lib/libRblas.so\n\nlocale:\n[1] C\n\nattached base packages:\n [1] parallel  stats4    tools     stats     graphics  grDevices utils    \n [8] datasets  methods   base     \n\nother attached packages:\n [1] rjson_0.2.20                gplots_3.0.1               \n [3] RColorBrewer_1.1-2          DESeq2_1.22.1              \n [5] SummarizedExperiment_1.12.0 DelayedArray_0.8.0         \n [7] BiocParallel_1.16.2         matrixStats_0.54.0         \n [9] Biobase_2.42.0              GenomicRanges_1.34.0       \n[11] GenomeInfoDb_1.18.1         IRanges_2.16.0             \n[13] S4Vectors_0.20.1            BiocGenerics_0.28.0        \n[15] getopt_1.20.2              \n\nloaded via a namespace (and not attached):\n [1] bit64_0.9-7            splines_3.5.1          gtools_3.8.1          \n [4] Formula_1.2-3          latticeExtra_0.6-28    blob_1.1.1            \n [7] GenomeInfoDbData_1.2.0 pillar_1.3.1           RSQLite_2.1.1         \n[10] backports_1.1.3        lattice_0.20-38        digest_0.6.18         \n[13] XVector_0.22.0         checkmate_1.8.5        colorspace_1.4-0      \n[16] htmltools_0.3.6        Matrix_1.2-15          plyr_1.8.4            \n[19] XML_3.98-1.16          pkgconfig_2.0.2        genefilter_1.64.0     \n[22] zlibbioc_1.28.0        xtable_1.8-3           scales_1.0.0          \n[25] gdata_2.18.0           htmlTable_1.13.1       tibble_2.0.1          \n[28] annotate_1.60.0        ggplot2_3.1.0          nnet_7.3-12           \n[31] lazyeval_0.2.1         survival_2.43-3        magrittr_1.5          \n[34] crayon_1.3.4           memoise_1.1.0          foreign_0.8-71        \n[37] data.table_1.12.0      stringr_1.3.1          munsell_0.5.0         \n[40] locfit_1.5-9.1         cluster_2.0.7-1        AnnotationDbi_1.44.0  \n[43] compiler_3.5.1         caTools_1.17.1.1       rlang_0.3.1           \n[46] grid_3.5.1             RCurl_1.95-4.11        rstudioapi_0.9.0      \n[49] htmlwidgets_1.3        bitops_1.0-6           base64enc_0.1-3       \n[52] gtable_0.2.0           DBI_1.0.0              gridExtra_2.3         \n[55] knitr_1.21             bit_1.1-12             Hmisc_4.1-1           \n[58] KernSmooth_2.23-15     stringi_1.2.4          Rcpp_1.0.0            \n[61] geneplotter_1.60.0     rpart_4.1-13           acepack_1.4.1         \n[64] xfun_0.4              \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "16 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "16.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:45:18", "plugin": "core", "name": "end_epoch", "raw_value": "1684910718.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:45:02", "plugin": "core", "name": "start_epoch", "raw_value": "1684910702.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.6+galaxy1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2", "tool_version": "2.11.40.6+galaxy1", "test_index": 2, "time_seconds": 24.582118272781372, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.6+galaxy1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2", "tool_version": "2.11.40.6+galaxy1", "test_index": 3, "time_seconds": 106.78670191764832, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "68d8dd13d3f93eb0"}, {"src": "hda", "id": "28f4bbd1fab850bf"}, {"src": "hda", "id": "88bc842f3d0972c5"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "57584562d5946743"}, {"src": "hda", "id": "1e339610ff25f364"}, {"src": "hda", "id": "10dc6bc2e4f603df"}], "tximport|txtype": "sailfish", "tximport|mapping_format|tabular_file": {"src": "hda", "id": "60b002985cab8493"}, "tximport|mapping_format|mapping_format_selector": "tabular", "tximport|tximport_selector": "tximport", "pdf": false}, "job": {"model_class": "Job", "id": "2102257e6e5b17bd", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:47:22.625032", "create_time": "2023-05-24T06:46:40.988453", "galaxy_version": "23.0", "command_version": "R version 3.5.1 (2018-07-02) -- \"Feather Spray\", DESeq2 version 1.22.1", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.6+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-g7dgn", "command_line": "ln -s '/galaxy/server/database/objects/a/2/d/dataset_a2da200f-212b-4485-a429-dce964d4c6da.dat' mapping.txt &&  cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/6a3a025714d3/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/6a3a025714d3/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/4/a/9/dataset_4a94fe6a-a3dc-41d5-b1e2-3972a1900d4e.dat'                  -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/9/a/0/dataset_9a0f1795-6a34-4d11-aced-0749eae9d6bf.dat\", \"/galaxy/server/database/objects/b/2/8/dataset_b28653b1-89c9-4472-b9bb-de15ddfd3951.dat\", \"/galaxy/server/database/objects/f/b/f/dataset_fbf5ea48-ac0f-4f30-8804-a381f350f2e1.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/e/8/1/dataset_e813abf7-6708-4ed2-a20b-5c15fd40db73.dat\", \"/galaxy/server/database/objects/f/e/d/dataset_fed88d1b-a953-40fe-8e22-5ec8c26207ad.dat\", \"/galaxy/server/database/objects/7/4/f/dataset_74f5d5db-bce3-40bf-8e4c-6fa0c4ee4aae.dat\"]}]]]' -l '{\"dataset_e813abf7-6708-4ed2-a20b-5c15fd40db73.dat\": \"sailfish_quant.sf1.tab\", \"dataset_fed88d1b-a953-40fe-8e22-5ec8c26207ad.dat\": \"sailfish_quant.sf2.tab\", \"dataset_74f5d5db-bce3-40bf-8e4c-6fa0c4ee4aae.dat\": \"sailfish_quant.sf3.tab\", \"dataset_9a0f1795-6a34-4d11-aced-0749eae9d6bf.dat\": \"sailfish_quant.sf4.tab\", \"dataset_b28653b1-89c9-4472-b9bb-de15ddfd3951.dat\": \"sailfish_quant.sf5.tab\", \"dataset_fbf5ea48-ac0f-4f30-8804-a381f350f2e1.dat\": \"sailfish_quant.sf6.tab\"}' -t 1 -i -y sailfish -x mapping.txt", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "auto_mean_filter_off": "false", "outlier_filter_off": "false", "outlier_replace_off": "false", "fit_type": "\"1\"", "esf": "\"\"", "many_contrasts": "false", "normVST": "false", "normRLog": "false", "normCounts": "false", "pdf": "false", "tximport": "{\"__current_case__\": 0, \"mapping_format\": {\"__current_case__\": 1, \"mapping_format_selector\": \"tabular\", \"tabular_file\": {\"values\": [{\"id\": 292, \"src\": \"hda\"}]}}, \"tximport_selector\": \"tximport\", \"txtype\": \"sailfish\"}", "header": "true", "batch_factors": null, "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 293, \"src\": \"hda\"}, {\"id\": 294, \"src\": \"hda\"}, {\"id\": 295, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 296, \"src\": \"hda\"}, {\"id\": 297, \"src\": \"hda\"}, {\"id\": 298, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "1e339610ff25f364", "src": "hda", "uuid": "b28653b1-89c9-4472-b9bb-de15ddfd3951"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "68d8dd13d3f93eb0", "src": "hda", "uuid": "e813abf7-6708-4ed2-a20b-5c15fd40db73"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "68d8dd13d3f93eb0", "src": "hda", "uuid": "e813abf7-6708-4ed2-a20b-5c15fd40db73"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "88bc842f3d0972c5", "src": "hda", "uuid": "74f5d5db-bce3-40bf-8e4c-6fa0c4ee4aae"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "10dc6bc2e4f603df", "src": "hda", "uuid": "fbf5ea48-ac0f-4f30-8804-a381f350f2e1"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "28f4bbd1fab850bf", "src": "hda", "uuid": "fed88d1b-a953-40fe-8e22-5ec8c26207ad"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "57584562d5946743", "src": "hda", "uuid": "9a0f1795-6a34-4d11-aced-0749eae9d6bf"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "57584562d5946743", "src": "hda", "uuid": "9a0f1795-6a34-4d11-aced-0749eae9d6bf"}, "tximport|tabular_file": {"id": "60b002985cab8493", "src": "hda", "uuid": "a2da200f-212b-4485-a429-dce964d4c6da"}}, "outputs": {"deseq_out": {"id": "21bcfa4a2c1ae0d4", "src": "hda", "uuid": "4a94fe6a-a3dc-41d5-b1e2-3972a1900d4e"}}, "output_collections": {}, "tool_stdout": "primary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 10 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 8 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 3.5.1 (2018-07-02)\nPlatform: x86_64-conda_cos6-linux-gnu (64-bit)\nRunning under: Buildroot 2014.02\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/R/lib/libRblas.so\n\nlocale:\n[1] C\n\nattached base packages:\n [1] parallel  stats4    tools     stats     graphics  grDevices utils    \n [8] datasets  methods   base     \n\nother attached packages:\n [1] tximport_1.10.0             rjson_0.2.20               \n [3] gplots_3.0.1                RColorBrewer_1.1-2         \n [5] DESeq2_1.22.1               SummarizedExperiment_1.12.0\n [7] DelayedArray_0.8.0          BiocParallel_1.16.2        \n [9] matrixStats_0.54.0          Biobase_2.42.0             \n[11] GenomicRanges_1.34.0        GenomeInfoDb_1.18.1        \n[13] IRanges_2.16.0              S4Vectors_0.20.1           \n[15] BiocGenerics_0.28.0         getopt_1.20.2              \n\nloaded via a namespace (and not attached):\n [1] jsonlite_1.6           bit64_0.9-7            splines_3.5.1         \n [4] gtools_3.8.1           Formula_1.2-3          latticeExtra_0.6-28   \n [7] blob_1.1.1             GenomeInfoDbData_1.2.0 pillar_1.3.1          \n[10] RSQLite_2.1.1          backports_1.1.3        lattice_0.20-38       \n[13] digest_0.6.18          XVector_0.22.0         checkmate_1.8.5       \n[16] colorspace_1.4-0       htmltools_0.3.6        Matrix_1.2-15         \n[19] plyr_1.8.4             XML_3.98-1.16          pkgconfig_2.0.2       \n[22] genefilter_1.64.0      zlibbioc_1.28.0        xtable_1.8-3          \n[25] scales_1.0.0           gdata_2.18.0           htmlTable_1.13.1      \n[28] tibble_2.0.1           annotate_1.60.0        ggplot2_3.1.0         \n[31] nnet_7.3-12            lazyeval_0.2.1         survival_2.43-3       \n[34] magrittr_1.5           crayon_1.3.4           memoise_1.1.0         \n[37] foreign_0.8-71         data.table_1.12.0      stringr_1.3.1         \n[40] munsell_0.5.0          locfit_1.5-9.1         cluster_2.0.7-1       \n[43] AnnotationDbi_1.44.0   compiler_3.5.1         caTools_1.17.1.1      \n[46] rlang_0.3.1            grid_3.5.1             RCurl_1.95-4.11       \n[49] rstudioapi_0.9.0       htmlwidgets_1.3        bitops_1.0-6          \n[52] base64enc_0.1-3        gtable_0.2.0           DBI_1.0.0             \n[55] gridExtra_2.3          knitr_1.21             bit_1.1-12            \n[58] Hmisc_4.1-1            KernSmooth_2.23-15     stringi_1.2.4         \n[61] Rcpp_1.0.0             geneplotter_1.60.0     rpart_4.1-13          \n[64] acepack_1.4.1          xfun_0.4              \n", "tool_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "job_stdout": "", "job_stderr": "", "stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "stdout": "primary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 10 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 8 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 3.5.1 (2018-07-02)\nPlatform: x86_64-conda_cos6-linux-gnu (64-bit)\nRunning under: Buildroot 2014.02\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/R/lib/libRblas.so\n\nlocale:\n[1] C\n\nattached base packages:\n [1] parallel  stats4    tools     stats     graphics  grDevices utils    \n [8] datasets  methods   base     \n\nother attached packages:\n [1] tximport_1.10.0             rjson_0.2.20               \n [3] gplots_3.0.1                RColorBrewer_1.1-2         \n [5] DESeq2_1.22.1               SummarizedExperiment_1.12.0\n [7] DelayedArray_0.8.0          BiocParallel_1.16.2        \n [9] matrixStats_0.54.0          Biobase_2.42.0             \n[11] GenomicRanges_1.34.0        GenomeInfoDb_1.18.1        \n[13] IRanges_2.16.0              S4Vectors_0.20.1           \n[15] BiocGenerics_0.28.0         getopt_1.20.2              \n\nloaded via a namespace (and not attached):\n [1] jsonlite_1.6           bit64_0.9-7            splines_3.5.1         \n [4] gtools_3.8.1           Formula_1.2-3          latticeExtra_0.6-28   \n [7] blob_1.1.1             GenomeInfoDbData_1.2.0 pillar_1.3.1          \n[10] RSQLite_2.1.1          backports_1.1.3        lattice_0.20-38       \n[13] digest_0.6.18          XVector_0.22.0         checkmate_1.8.5       \n[16] colorspace_1.4-0       htmltools_0.3.6        Matrix_1.2-15         \n[19] plyr_1.8.4             XML_3.98-1.16          pkgconfig_2.0.2       \n[22] genefilter_1.64.0      zlibbioc_1.28.0        xtable_1.8-3          \n[25] scales_1.0.0           gdata_2.18.0           htmlTable_1.13.1      \n[28] tibble_2.0.1           annotate_1.60.0        ggplot2_3.1.0         \n[31] nnet_7.3-12            lazyeval_0.2.1         survival_2.43-3       \n[34] magrittr_1.5           crayon_1.3.4           memoise_1.1.0         \n[37] foreign_0.8-71         data.table_1.12.0      stringr_1.3.1         \n[40] munsell_0.5.0          locfit_1.5-9.1         cluster_2.0.7-1       \n[43] AnnotationDbi_1.44.0   compiler_3.5.1         caTools_1.17.1.1      \n[46] rlang_0.3.1            grid_3.5.1             RCurl_1.95-4.11       \n[49] rstudioapi_0.9.0       htmlwidgets_1.3        bitops_1.0-6          \n[52] base64enc_0.1-3        gtable_0.2.0           DBI_1.0.0             \n[55] gridExtra_2.3          knitr_1.21             bit_1.1-12            \n[58] Hmisc_4.1-1            KernSmooth_2.23-15     stringi_1.2.4         \n[61] Rcpp_1.0.0             geneplotter_1.60.0     rpart_4.1-13          \n[64] acepack_1.4.1          xfun_0.4              \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "14 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "14.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:47:12", "plugin": "core", "name": "end_epoch", "raw_value": "1684910832.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:46:58", "plugin": "core", "name": "start_epoch", "raw_value": "1684910818.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.6+galaxy1-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2", "tool_version": "2.11.40.6+galaxy1", "test_index": 4, "time_seconds": 94.31609272956848, "inputs": {"select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|countsFile": [{"src": "hda", "id": "68d8dd13d3f93eb0"}, {"src": "hda", "id": "28f4bbd1fab850bf"}, {"src": "hda", "id": "88bc842f3d0972c5"}], "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": [{"src": "hda", "id": "57584562d5946743"}, {"src": "hda", "id": "1e339610ff25f364"}, {"src": "hda", "id": "10dc6bc2e4f603df"}], "tximport|txtype": "sailfish", "tximport|mapping_format|gtf_file": {"src": "hda", "id": "c315583a3e800c8b"}, "tximport|mapping_format|mapping_format_selector": "gtf", "tximport|tximport_selector": "tximport", "pdf": false}, "job": {"model_class": "Job", "id": "c78e9d4eaab8eff3", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:47:29.517433", "create_time": "2023-05-24T06:46:57.407138", "galaxy_version": "23.0", "command_version": "R version 3.5.1 (2018-07-02) -- \"Feather Spray\", DESeq2 version 1.22.1", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.6+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-9zbd4", "command_line": "ln -s '/galaxy/server/database/objects/a/5/8/dataset_a589a619-eb09-48c9-833c-b6eb7423d3d7.dat' mapping.gff &&  cat '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/6a3a025714d3/deseq2/get_deseq_dataset.R' > /dev/null &&  Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/deseq2/6a3a025714d3/deseq2/deseq2.R' --cores ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/d/5/c/dataset_d5c48fdb-f306-4a0d-8f96-0c8e64de8865.dat'                  -H  -f '[[\"Treatment\", [{\"Untreated\": [\"/galaxy/server/database/objects/9/a/0/dataset_9a0f1795-6a34-4d11-aced-0749eae9d6bf.dat\", \"/galaxy/server/database/objects/b/2/8/dataset_b28653b1-89c9-4472-b9bb-de15ddfd3951.dat\", \"/galaxy/server/database/objects/f/b/f/dataset_fbf5ea48-ac0f-4f30-8804-a381f350f2e1.dat\"]}, {\"Treated\": [\"/galaxy/server/database/objects/e/8/1/dataset_e813abf7-6708-4ed2-a20b-5c15fd40db73.dat\", \"/galaxy/server/database/objects/f/e/d/dataset_fed88d1b-a953-40fe-8e22-5ec8c26207ad.dat\", \"/galaxy/server/database/objects/7/4/f/dataset_74f5d5db-bce3-40bf-8e4c-6fa0c4ee4aae.dat\"]}]]]' -l '{\"dataset_e813abf7-6708-4ed2-a20b-5c15fd40db73.dat\": \"sailfish_quant.sf1.tab\", \"dataset_fed88d1b-a953-40fe-8e22-5ec8c26207ad.dat\": \"sailfish_quant.sf2.tab\", \"dataset_74f5d5db-bce3-40bf-8e4c-6fa0c4ee4aae.dat\": \"sailfish_quant.sf3.tab\", \"dataset_9a0f1795-6a34-4d11-aced-0749eae9d6bf.dat\": \"sailfish_quant.sf4.tab\", \"dataset_b28653b1-89c9-4472-b9bb-de15ddfd3951.dat\": \"sailfish_quant.sf5.tab\", \"dataset_fbf5ea48-ac0f-4f30-8804-a381f350f2e1.dat\": \"sailfish_quant.sf6.tab\"}' -t 1 -i -y sailfish -x mapping.gff", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "auto_mean_filter_off": "false", "outlier_filter_off": "false", "outlier_replace_off": "false", "fit_type": "\"1\"", "esf": "\"\"", "many_contrasts": "false", "normVST": "false", "normRLog": "false", "normCounts": "false", "pdf": "false", "tximport": "{\"__current_case__\": 0, \"mapping_format\": {\"__current_case__\": 0, \"gtf_file\": {\"values\": [{\"id\": 299, \"src\": \"hda\"}]}, \"mapping_format_selector\": \"gtf\"}, \"tximport_selector\": \"tximport\", \"txtype\": \"sailfish\"}", "header": "true", "batch_factors": null, "select_data": "{\"__current_case__\": 1, \"how\": \"datasets_per_level\", \"rep_factorName\": [{\"__index__\": 0, \"factorName\": \"Treatment\", \"rep_factorLevel\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 293, \"src\": \"hda\"}, {\"id\": 294, \"src\": \"hda\"}, {\"id\": 295, \"src\": \"hda\"}]}, \"factorLevel\": \"Treated\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 296, \"src\": \"hda\"}, {\"id\": 297, \"src\": \"hda\"}, {\"id\": 298, \"src\": \"hda\"}]}, \"factorLevel\": \"Untreated\"}]}]}"}, "inputs": {"select_data|rep_factorName_0|rep_factorLevel_0|countsFile": {"id": "68d8dd13d3f93eb0", "src": "hda", "uuid": "e813abf7-6708-4ed2-a20b-5c15fd40db73"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile1": {"id": "68d8dd13d3f93eb0", "src": "hda", "uuid": "e813abf7-6708-4ed2-a20b-5c15fd40db73"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile2": {"id": "28f4bbd1fab850bf", "src": "hda", "uuid": "fed88d1b-a953-40fe-8e22-5ec8c26207ad"}, "select_data|rep_factorName_0|rep_factorLevel_0|countsFile3": {"id": "88bc842f3d0972c5", "src": "hda", "uuid": "74f5d5db-bce3-40bf-8e4c-6fa0c4ee4aae"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile": {"id": "57584562d5946743", "src": "hda", "uuid": "9a0f1795-6a34-4d11-aced-0749eae9d6bf"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile1": {"id": "57584562d5946743", "src": "hda", "uuid": "9a0f1795-6a34-4d11-aced-0749eae9d6bf"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile2": {"id": "1e339610ff25f364", "src": "hda", "uuid": "b28653b1-89c9-4472-b9bb-de15ddfd3951"}, "select_data|rep_factorName_0|rep_factorLevel_1|countsFile3": {"id": "10dc6bc2e4f603df", "src": "hda", "uuid": "fbf5ea48-ac0f-4f30-8804-a381f350f2e1"}, "tximport|gtf_file": {"id": "c315583a3e800c8b", "src": "hda", "uuid": "a589a619-eb09-48c9-833c-b6eb7423d3d7"}}, "outputs": {"deseq_out": {"id": "057567270d26e562", "src": "hda", "uuid": "d5c48fdb-f306-4a0d-8f96-0c8e64de8865"}}, "output_collections": {}, "tool_stdout": "primary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 10 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 8 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 3.5.1 (2018-07-02)\nPlatform: x86_64-conda_cos6-linux-gnu (64-bit)\nRunning under: Buildroot 2014.02\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/R/lib/libRblas.so\n\nlocale:\n[1] C\n\nattached base packages:\n [1] parallel  stats4    tools     stats     graphics  grDevices utils    \n [8] datasets  methods   base     \n\nother attached packages:\n [1] GenomicFeatures_1.34.1      AnnotationDbi_1.44.0       \n [3] tximport_1.10.0             rjson_0.2.20               \n [5] gplots_3.0.1                RColorBrewer_1.1-2         \n [7] DESeq2_1.22.1               SummarizedExperiment_1.12.0\n [9] DelayedArray_0.8.0          BiocParallel_1.16.2        \n[11] matrixStats_0.54.0          Biobase_2.42.0             \n[13] GenomicRanges_1.34.0        GenomeInfoDb_1.18.1        \n[15] IRanges_2.16.0              S4Vectors_0.20.1           \n[17] BiocGenerics_0.28.0         getopt_1.20.2              \n\nloaded via a namespace (and not attached):\n [1] bitops_1.0-6             bit64_0.9-7              progress_1.2.0          \n [4] httr_1.4.0               backports_1.1.3          R6_2.3.0                \n [7] rpart_4.1-13             KernSmooth_2.23-15       Hmisc_4.1-1             \n[10] DBI_1.0.0                lazyeval_0.2.1           colorspace_1.4-0        \n[13] nnet_7.3-12              gridExtra_2.3            prettyunits_1.0.2       \n[16] bit_1.1-12               compiler_3.5.1           htmlTable_1.13.1        \n[19] rtracklayer_1.42.1       caTools_1.17.1.1         scales_1.0.0            \n[22] checkmate_1.8.5          genefilter_1.64.0        stringr_1.3.1           \n[25] digest_0.6.18            Rsamtools_1.34.0         foreign_0.8-71          \n[28] XVector_0.22.0           base64enc_0.1-3          pkgconfig_2.0.2         \n[31] htmltools_0.3.6          htmlwidgets_1.3          rlang_0.3.1             \n[34] rstudioapi_0.9.0         RSQLite_2.1.1            jsonlite_1.6            \n[37] gtools_3.8.1             acepack_1.4.1            RCurl_1.95-4.11         \n[40] magrittr_1.5             GenomeInfoDbData_1.2.0   Formula_1.2-3           \n[43] Matrix_1.2-15            Rcpp_1.0.0               munsell_0.5.0           \n[46] stringi_1.2.4            zlibbioc_1.28.0          plyr_1.8.4              \n[49] grid_3.5.1               blob_1.1.1               gdata_2.18.0            \n[52] crayon_1.3.4             lattice_0.20-38          Biostrings_2.50.1       \n[55] splines_3.5.1            annotate_1.60.0          hms_0.4.2               \n[58] locfit_1.5-9.1           knitr_1.21               pillar_1.3.1            \n[61] geneplotter_1.60.0       biomaRt_2.38.0           XML_3.98-1.16           \n[64] latticeExtra_0.6-28      data.table_1.12.0        gtable_0.2.0            \n[67] assertthat_0.2.0         ggplot2_3.1.0            xfun_0.4                \n[70] xtable_1.8-3             survival_2.43-3          tibble_2.0.1            \n[73] GenomicAlignments_1.18.0 memoise_1.1.0            cluster_2.0.7-1         \n", "tool_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nImport genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... OK\n'select()' returned 1:1 mapping between keys and columns\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "job_stdout": "", "job_stderr": "", "stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\nImport genomic features from the file as a GRanges object ... OK\nPrepare the 'metadata' data frame ... OK\nMake the TxDb object ... OK\n'select()' returned 1:1 mapping between keys and columns\nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nreading in files with read.delim (install 'readr' package for speed up)\n1 2 3 4 5 6 \nsummarizing abundance\nsummarizing counts\nsummarizing length\nusing counts and average transcript lengths from tximport\nestimating size factors\nusing 'avgTxLength' from assays(dds), correcting for library size\nestimating dispersions\ngene-wise dispersion estimates\nmean-dispersion relationship\n-- note: fitType='parametric', but the dispersion trend was not well captured by the\n   function: y = a/x + b, and a local regression fit was automatically substituted.\n   specify fitType='local' or 'mean' to avoid this message next time.\nfinal dispersion estimates\nfitting model and testing\nWarning message:\nIn lfproc(x, y, weights = weights, cens = cens, base = base, geth = geth,  :\n  Estimated rdf < 1.0; not estimating variance\n", "stdout": "primary factor: Treatment \n\n---------------------\nDESeq2 run information\n\nsample table:\n                       Treatment\nsailfish_quant.sf4.tab Untreated\nsailfish_quant.sf5.tab Untreated\nsailfish_quant.sf6.tab Untreated\nsailfish_quant.sf1.tab   Treated\nsailfish_quant.sf2.tab   Treated\nsailfish_quant.sf3.tab   Treated\n\ndesign formula:\n~Treatment\n\n\n6 samples with counts over 10 genes\nusing disperion fit type: parametric \nsummary of results\nTreatment: Treated vs Untreated\n\nout of 8 with nonzero total read count\nadjusted p-value < 0.1\nLFC > 0 (up)       : 0, 0%\nLFC < 0 (down)     : 0, 0%\noutliers [1]       : 0, 0%\nlow counts [2]     : 0, 0%\n(mean count < 0)\n[1] see 'cooksCutoff' argument of ?results\n[2] see 'independentFiltering' argument of ?results\n\nNULL\nSession information:\n\nR version 3.5.1 (2018-07-02)\nPlatform: x86_64-conda_cos6-linux-gnu (64-bit)\nRunning under: Buildroot 2014.02\n\nMatrix products: default\nBLAS/LAPACK: /usr/local/lib/R/lib/libRblas.so\n\nlocale:\n[1] C\n\nattached base packages:\n [1] parallel  stats4    tools     stats     graphics  grDevices utils    \n [8] datasets  methods   base     \n\nother attached packages:\n [1] GenomicFeatures_1.34.1      AnnotationDbi_1.44.0       \n [3] tximport_1.10.0             rjson_0.2.20               \n [5] gplots_3.0.1                RColorBrewer_1.1-2         \n [7] DESeq2_1.22.1               SummarizedExperiment_1.12.0\n [9] DelayedArray_0.8.0          BiocParallel_1.16.2        \n[11] matrixStats_0.54.0          Biobase_2.42.0             \n[13] GenomicRanges_1.34.0        GenomeInfoDb_1.18.1        \n[15] IRanges_2.16.0              S4Vectors_0.20.1           \n[17] BiocGenerics_0.28.0         getopt_1.20.2              \n\nloaded via a namespace (and not attached):\n [1] bitops_1.0-6             bit64_0.9-7              progress_1.2.0          \n [4] httr_1.4.0               backports_1.1.3          R6_2.3.0                \n [7] rpart_4.1-13             KernSmooth_2.23-15       Hmisc_4.1-1             \n[10] DBI_1.0.0                lazyeval_0.2.1           colorspace_1.4-0        \n[13] nnet_7.3-12              gridExtra_2.3            prettyunits_1.0.2       \n[16] bit_1.1-12               compiler_3.5.1           htmlTable_1.13.1        \n[19] rtracklayer_1.42.1       caTools_1.17.1.1         scales_1.0.0            \n[22] checkmate_1.8.5          genefilter_1.64.0        stringr_1.3.1           \n[25] digest_0.6.18            Rsamtools_1.34.0         foreign_0.8-71          \n[28] XVector_0.22.0           base64enc_0.1-3          pkgconfig_2.0.2         \n[31] htmltools_0.3.6          htmlwidgets_1.3          rlang_0.3.1             \n[34] rstudioapi_0.9.0         RSQLite_2.1.1            jsonlite_1.6            \n[37] gtools_3.8.1             acepack_1.4.1            RCurl_1.95-4.11         \n[40] magrittr_1.5             GenomeInfoDbData_1.2.0   Formula_1.2-3           \n[43] Matrix_1.2-15            Rcpp_1.0.0               munsell_0.5.0           \n[46] stringi_1.2.4            zlibbioc_1.28.0          plyr_1.8.4              \n[49] grid_3.5.1               blob_1.1.1               gdata_2.18.0            \n[52] crayon_1.3.4             lattice_0.20-38          Biostrings_2.50.1       \n[55] splines_3.5.1            annotate_1.60.0          hms_0.4.2               \n[58] locfit_1.5-9.1           knitr_1.21               pillar_1.3.1            \n[61] geneplotter_1.60.0       biomaRt_2.38.0           XML_3.98-1.16           \n[64] latticeExtra_0.6-28      data.table_1.12.0        gtable_0.2.0            \n[67] assertthat_0.2.0         ggplot2_3.1.0            xfun_0.4                \n[70] xtable_1.8-3             survival_2.43-3          tibble_2.0.1            \n[73] GenomicAlignments_1.18.0 memoise_1.1.0            cluster_2.0.7-1         \n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "17 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "17.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:47:18", "plugin": "core", "name": "end_epoch", "raw_value": "1684910838.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:47:01", "plugin": "core", "name": "start_epoch", "raw_value": "1684910821.0000000"}, {"title": "Memory Allocated (MB)", "value": "8589", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "8589.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.6+galaxy1-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2", "tool_version": "2.11.40.6+galaxy1", "test_index": 5, "time_seconds": 36.54829931259155, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.6+galaxy1-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2", "tool_version": "2.11.40.6+galaxy1", "test_index": 6, "time_seconds": 63.974401235580444, "inputs": {"select_data|countsFile": {"src": "hdca", "id": "e932996d9d4ec006"}, "select_data|rep_factorName_0|factorName": "Treatment", "select_data|rep_factorName_0|rep_factorLevel_0|factorLevel": "Treated", "select_data|rep_factorName_0|rep_factorLevel_0|groups": "primary:treated", "select_data|rep_factorName_0|rep_factorLevel_1|factorLevel": "Untreated", "select_data|rep_factorName_0|rep_factorLevel_1|groups": "primary:untreated", "select_data|how": "group_tags", "tximport|txtype": "sailfish", "tximport|mapping_format|tabular_file": {"src": "hda", "id": "a3d12c234616e199"}, "tximport|mapping_format|mapping_format_selector": "tabular", "tximport|tximport_selector": "tximport", "pdf": false}, "execution_problem": "Error executing tool with id 'toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.6+galaxy1': 'NoneType' object has no attribute 'matches_any'", "dynamic_param_error": false, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2/2.11.40.6+galaxy1-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/deseq2/deseq2", "tool_version": "2.11.40.6+galaxy1", "test_index": 7, "time_seconds": 29.666134119033813, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger", "tool_version": "3.24.1+galaxy1", "test_index": 0, "time_seconds": 60.42308449745178, "inputs": {"input|counts": {"src": "hda", "id": "6b17fcc3adccdf22"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "rep_contrast_0|contrast": "Mut-WT", "rep_contrast_1|contrast": "WT-Mut", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "57ff7ce2d167ffe6", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:00:35.818338", "create_time": "2023-05-24T06:59:56.705844", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-v9kxj", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/edger/334ce9b1bac5/edger/edger.R'  -R '/galaxy/server/database/objects/4/c/4/dataset_4c4e504c-7cb9-4751-a5b6-300eff9b4de3.dat' -o '/galaxy/server/database/jobs_directory/000/341/working/dataset_4c4e504c-7cb9-4751-a5b6-300eff9b4de3_files'  -m '/galaxy/server/database/objects/a/4/2/dataset_a4247a3c-cad9-45f7-b968-25a8fd05119a.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'   -C 'Mut-WT,WT-Mut'    -l '0.0' -p '0.05' -d 'BH' -n 'TMM' -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/341/working/dataset_4c4e504c-7cb9-4751-a5b6-300eff9b4de3_files'/*.tsv output_dir/", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"lrtOption\": false, \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true}", "out": "{\"normCounts\": false, \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "rep_contrast": "[{\"__index__\": 0, \"contrast\": \"Mut-WT\"}, {\"__index__\": 1, \"contrast\": \"WT-Mut\"}]", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 433, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}"}, "inputs": {"counts": {"id": "6b17fcc3adccdf22", "src": "hda", "uuid": "a4247a3c-cad9-45f7-b968-25a8fd05119a"}}, "outputs": {"__new_primary_file_outTables|edgeR_WT-Mut__": {"id": "453f4d0e1a90df2b", "src": "hda", "uuid": "e885e4db-a6f7-42d8-b124-b9dae3ea9ae0"}, "__new_primary_file_outTables|edgeR_Mut-WT__": {"id": "cb7c5aa0daff3387", "src": "hda", "uuid": "b07a0630-a61f-4b58-a627-2f9a496e547c"}, "outReport": {"id": "c71b2ed88e63f733", "src": "hda", "uuid": "4c4e504c-7cb9-4751-a5b6-300eff9b4de3"}}, "output_collections": {"outTables": {"id": "3c77f47af76a9ae3", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "job_stdout": "", "job_stderr": "", "stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "5 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "5.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:00:20", "plugin": "core", "name": "end_epoch", "raw_value": "1684911620.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:00:15", "plugin": "core", "name": "start_epoch", "raw_value": "1684911615.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger", "tool_version": "3.24.1+galaxy1", "test_index": 1, "time_seconds": 38.827677726745605, "inputs": {"input|counts": {"src": "hda", "id": "70feec30d53d1ffe"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "MutA,MutA,MutA,MutB,MutB,MutB,WTA,WTA,WTA,WTB,WTB,WTB", "input|format": "matrix", "rep_contrast_0|contrast": "(MutA-MutB)-(WTA-WTB)", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "c872ee051cbbe620", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:01:14.909752", "create_time": "2023-05-24T07:00:56.998638", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-j657q", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/edger/334ce9b1bac5/edger/edger.R'  -R '/galaxy/server/database/objects/b/b/5/dataset_bb5d66d5-0aef-469d-83a8-3ff6007c1f60.dat' -o '/galaxy/server/database/jobs_directory/000/345/working/dataset_bb5d66d5-0aef-469d-83a8-3ff6007c1f60_files'  -m '/galaxy/server/database/objects/1/6/8/dataset_168d705d-a384-4ac7-a7c5-da0dc0bbadea.dat' -i 'Genotype::MutA,MutA,MutA,MutB,MutB,MutB,WTA,WTA,WTA,WTB,WTB,WTB'   -C '(MutA-MutB)-(WTA-WTB)'    -l '0.0' -p '0.05' -d 'BH' -n 'TMM' -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/345/working/dataset_bb5d66d5-0aef-469d-83a8-3ff6007c1f60_files'/*.tsv output_dir/", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"lrtOption\": false, \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true}", "out": "{\"normCounts\": false, \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "rep_contrast": "[{\"__index__\": 0, \"contrast\": \"(MutA-MutB)-(WTA-WTB)\"}]", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 441, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"MutA,MutA,MutA,MutB,MutB,MutB,WTA,WTA,WTA,WTB,WTB,WTB\"}]}, \"format\": \"matrix\"}"}, "inputs": {"counts": {"id": "70feec30d53d1ffe", "src": "hda", "uuid": "168d705d-a384-4ac7-a7c5-da0dc0bbadea"}}, "outputs": {"__new_primary_file_outTables|edgeR_(MutA-MutB)-(WTA-WTB)__": {"id": "2542d5b63e939a7a", "src": "hda", "uuid": "7a71a0ef-63cd-4298-a840-8f42b9bdea73"}, "outReport": {"id": "aec7ac8e6edeeaae", "src": "hda", "uuid": "bb5d66d5-0aef-469d-83a8-3ff6007c1f60"}}, "output_collections": {"outTables": {"id": "1f512ee68d517dc0", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "job_stdout": "", "job_stderr": "", "stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "5 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "5.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:01:04", "plugin": "core", "name": "end_epoch", "raw_value": "1684911664.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:00:59", "plugin": "core", "name": "start_epoch", "raw_value": "1684911659.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1-10", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger", "tool_version": "3.24.1+galaxy1", "test_index": 10, "time_seconds": 36.822678327560425, "inputs": {"input|counts": {"src": "hda", "id": "3031703444324615"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "rep_contrast_0|contrast": "Mut-WT", "f|filt|cformat|cntReq": "10", "f|filt|cformat|samples|cntSampleReq": "3", "f|filt|cformat|samples|count_select": "sample", "f|filt|cformat|format_select": "counts", "f|filt|filt_select": "yes", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "ac9c2f3051c60896", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:04:43.068777", "create_time": "2023-05-24T07:04:25.386608", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-q77m5", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/edger/334ce9b1bac5/edger/edger.R'  -R '/galaxy/server/database/objects/d/a/d/dataset_dad07776-4947-4198-b700-574db96155ef.dat' -o '/galaxy/server/database/jobs_directory/000/375/working/dataset_dad07776-4947-4198-b700-574db96155ef_files'  -m '/galaxy/server/database/objects/4/6/1/dataset_461bea71-7889-45cf-913e-22b329745c40.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'   -C 'Mut-WT'  -z '10' -s '3'   -l '0.0' -p '0.05' -d 'BH' -n 'TMM' -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/375/working/dataset_dad07776-4947-4198-b700-574db96155ef_files'/*.tsv output_dir/", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"lrtOption\": false, \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true}", "out": "{\"normCounts\": false, \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 0, \"cformat\": {\"__current_case__\": 1, \"cntReq\": \"10\", \"format_select\": \"counts\", \"samples\": {\"__current_case__\": 1, \"cntSampleReq\": \"3\", \"count_select\": \"sample\"}}, \"filt_select\": \"yes\"}}", "rep_contrast": "[{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 485, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}"}, "inputs": {"counts": {"id": "3031703444324615", "src": "hda", "uuid": "461bea71-7889-45cf-913e-22b329745c40"}}, "outputs": {"__new_primary_file_outTables|edgeR_Mut-WT__": {"id": "24542d56685e2b40", "src": "hda", "uuid": "dd807a59-e8f5-4a1c-b8ba-111f13d01b26"}, "outReport": {"id": "4affed51b0185ecb", "src": "hda", "uuid": "dad07776-4947-4198-b700-574db96155ef"}}, "output_collections": {"outTables": {"id": "456e6f43cf3ba505", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "job_stdout": "", "job_stderr": "", "stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:04:31", "plugin": "core", "name": "end_epoch", "raw_value": "1684911871.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:04:27", "plugin": "core", "name": "start_epoch", "raw_value": "1684911867.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1-11", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger", "tool_version": "3.24.1+galaxy1", "test_index": 11, "time_seconds": 39.965073108673096, "inputs": {"input|counts": {"src": "hda", "id": "99ab42753d0d4af1"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "rep_contrast_0|contrast": "Mut-WT", "f|filt|cformat|cntReq": "1000", "f|filt|cformat|samples|totReq": true, "f|filt|cformat|samples|count_select": "total", "f|filt|cformat|format_select": "counts", "f|filt|filt_select": "yes", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "6da4aeccb0cdbc00", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:05:06.503745", "create_time": "2023-05-24T07:04:45.000983", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-bz958", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/edger/334ce9b1bac5/edger/edger.R'  -R '/galaxy/server/database/objects/9/b/2/dataset_9b21d210-68e5-4522-9f00-77de391ea659.dat' -o '/galaxy/server/database/jobs_directory/000/378/working/dataset_9b21d210-68e5-4522-9f00-77de391ea659_files'  -m '/galaxy/server/database/objects/4/9/9/dataset_49906e80-1dc1-4c17-9a2d-55c7eb0b68bb.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'   -C 'Mut-WT'  -z '1000' -y   -l '0.0' -p '0.05' -d 'BH' -n 'TMM' -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/378/working/dataset_9b21d210-68e5-4522-9f00-77de391ea659_files'/*.tsv output_dir/", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"lrtOption\": false, \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true}", "out": "{\"normCounts\": false, \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 0, \"cformat\": {\"__current_case__\": 1, \"cntReq\": \"1000\", \"format_select\": \"counts\", \"samples\": {\"__current_case__\": 0, \"count_select\": \"total\", \"totReq\": true}}, \"filt_select\": \"yes\"}}", "rep_contrast": "[{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 488, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}"}, "inputs": {"counts": {"id": "99ab42753d0d4af1", "src": "hda", "uuid": "49906e80-1dc1-4c17-9a2d-55c7eb0b68bb"}}, "outputs": {"__new_primary_file_outTables|edgeR_Mut-WT__": {"id": "f5864f7f745ab6b0", "src": "hda", "uuid": "3effd4a9-13b7-4648-aba5-b72e95c5a0a5"}, "outReport": {"id": "79be414c880fe8fa", "src": "hda", "uuid": "9b21d210-68e5-4522-9f00-77de391ea659"}}, "output_collections": {"outTables": {"id": "2f185f8433332586", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "job_stdout": "", "job_stderr": "", "stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "5 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "5.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:04:53", "plugin": "core", "name": "end_epoch", "raw_value": "1684911893.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:04:48", "plugin": "core", "name": "start_epoch", "raw_value": "1684911888.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger", "tool_version": "3.24.1+galaxy1", "test_index": 2, "time_seconds": 42.180256366729736, "inputs": {"input|counts": {"src": "hda", "id": "110f0bee5fb1b0dc"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "anno|geneanno": {"src": "hda", "id": "f49ec963a6bfd1c4"}, "anno|annoOpt": "yes", "rep_contrast_0|contrast": "Mut-WT", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "03354fa7870016f8", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:01:18.874063", "create_time": "2023-05-24T07:01:00.805755", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-8282c", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/edger/334ce9b1bac5/edger/edger.R'  -R '/galaxy/server/database/objects/e/2/3/dataset_e2348081-3a08-4f12-b6bf-c8f18e52d52a.dat' -o '/galaxy/server/database/jobs_directory/000/346/working/dataset_e2348081-3a08-4f12-b6bf-c8f18e52d52a_files'  -m '/galaxy/server/database/objects/d/d/8/dataset_dd8bf2a0-a7fd-4e73-bb94-c5797b025838.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'  -a '/galaxy/server/database/objects/8/0/1/dataset_8019958e-b17c-41ff-95de-19d62d62a411.dat'  -C 'Mut-WT'    -l '0.0' -p '0.05' -d 'BH' -n 'TMM' -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/346/working/dataset_e2348081-3a08-4f12-b6bf-c8f18e52d52a_files'/*.tsv output_dir/", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"lrtOption\": false, \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true}", "out": "{\"normCounts\": false, \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "rep_contrast": "[{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]", "anno": "{\"__current_case__\": 0, \"annoOpt\": \"yes\", \"geneanno\": {\"values\": [{\"id\": 443, \"src\": \"hda\"}]}}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 442, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}"}, "inputs": {"counts": {"id": "110f0bee5fb1b0dc", "src": "hda", "uuid": "dd8bf2a0-a7fd-4e73-bb94-c5797b025838"}, "geneanno": {"id": "f49ec963a6bfd1c4", "src": "hda", "uuid": "8019958e-b17c-41ff-95de-19d62d62a411"}}, "outputs": {"__new_primary_file_outTables|edgeR_Mut-WT__": {"id": "3ca39cda64c207b5", "src": "hda", "uuid": "3ed4cfea-76df-4909-8471-9c567bfb3ae7"}, "outReport": {"id": "d37482bb247203ba", "src": "hda", "uuid": "e2348081-3a08-4f12-b6bf-c8f18e52d52a"}}, "output_collections": {"outTables": {"id": "21158c161401efd7", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "job_stdout": "", "job_stderr": "", "stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "5 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "5.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:01:08", "plugin": "core", "name": "end_epoch", "raw_value": "1684911668.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:01:03", "plugin": "core", "name": "start_epoch", "raw_value": "1684911663.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger", "tool_version": "3.24.1+galaxy1", "test_index": 3, "time_seconds": 37.27983021736145, "inputs": {"input|counts": {"src": "hda", "id": "649db42c4d809252"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "rep_contrast_0|contrast": "Mut-WT", "out|rscript": true, "out|rdaOption": true, "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "16f42ce65faca8d8", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:01:52.015228", "create_time": "2023-05-24T07:01:32.884835", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-cb4cf", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/edger/334ce9b1bac5/edger/edger.R'  -R '/galaxy/server/database/objects/5/b/b/dataset_5bb28c63-7095-453e-a525-a681c43952e1.dat' -o '/galaxy/server/database/jobs_directory/000/349/working/dataset_5bb28c63-7095-453e-a525-a681c43952e1_files'  -m '/galaxy/server/database/objects/9/a/0/dataset_9a02b5a7-4aac-4183-861e-14804365dd42.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'   -C 'Mut-WT'   -r  -l '0.0' -p '0.05' -d 'BH' -n 'TMM' -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/349/working/dataset_5bb28c63-7095-453e-a525-a681c43952e1_files'/*.tsv output_dir/  && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/edger/334ce9b1bac5/edger/edger.R' '/galaxy/server/database/objects/3/6/1/dataset_36158a30-19d8-4767-91d3-e2f5162b7f5f.dat'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"lrtOption\": false, \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true}", "out": "{\"normCounts\": false, \"rdaOption\": true, \"rscript\": true}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "rep_contrast": "[{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 449, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}"}, "inputs": {"counts": {"id": "649db42c4d809252", "src": "hda", "uuid": "9a02b5a7-4aac-4183-861e-14804365dd42"}}, "outputs": {"__new_primary_file_outTables|edgeR_Mut-WT__": {"id": "66025a0d8d0246fa", "src": "hda", "uuid": "3ef19ea0-90cb-4856-8aa3-b125b1a7d940"}, "rscript": {"id": "dbd4a2e0106883ac", "src": "hda", "uuid": "36158a30-19d8-4767-91d3-e2f5162b7f5f"}, "outReport": {"id": "6a8b504a9c8d445e", "src": "hda", "uuid": "5bb28c63-7095-453e-a525-a681c43952e1"}}, "output_collections": {"outTables": {"id": "67f67715b315061a", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "job_stdout": "", "job_stderr": "", "stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "5 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "5.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:01:41", "plugin": "core", "name": "end_epoch", "raw_value": "1684911701.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:01:36", "plugin": "core", "name": "start_epoch", "raw_value": "1684911696.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger", "tool_version": "3.24.1+galaxy1", "test_index": 4, "time_seconds": 35.679194927215576, "inputs": {"input|counts": {"src": "hda", "id": "649db42c4d809252"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|fact|rep_factor_1|factorName": "Batch", "input|fact|rep_factor_1|groupNames": "b1,b2,b3,b1,b2,b3", "input|format": "matrix", "rep_contrast_0|contrast": "Mut-WT", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "ae1738b09e01fe83", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:01:54.728348", "create_time": "2023-05-24T07:01:35.548203", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-s5642", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/edger/334ce9b1bac5/edger/edger.R'  -R '/galaxy/server/database/objects/5/0/7/dataset_507fcb9e-27f7-49bb-bd25-080f9b19a97d.dat' -o '/galaxy/server/database/jobs_directory/000/350/working/dataset_507fcb9e-27f7-49bb-bd25-080f9b19a97d_files'  -m '/galaxy/server/database/objects/9/a/0/dataset_9a02b5a7-4aac-4183-861e-14804365dd42.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT|Batch::b1,b2,b3,b1,b2,b3'   -C 'Mut-WT'    -l '0.0' -p '0.05' -d 'BH' -n 'TMM' -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/350/working/dataset_507fcb9e-27f7-49bb-bd25-080f9b19a97d_files'/*.tsv output_dir/", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"lrtOption\": false, \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true}", "out": "{\"normCounts\": false, \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "rep_contrast": "[{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 449, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}, {\"__index__\": 1, \"factorName\": \"Batch\", \"groupNames\": \"b1,b2,b3,b1,b2,b3\"}]}, \"format\": \"matrix\"}"}, "inputs": {"counts": {"id": "649db42c4d809252", "src": "hda", "uuid": "9a02b5a7-4aac-4183-861e-14804365dd42"}}, "outputs": {"__new_primary_file_outTables|edgeR_Mut-WT__": {"id": "91f99cb90421334e", "src": "hda", "uuid": "58f748ec-1e19-439a-a537-8803de096757"}, "outReport": {"id": "78b1ff431595837b", "src": "hda", "uuid": "507fcb9e-27f7-49bb-bd25-080f9b19a97d"}}, "output_collections": {"outTables": {"id": "58bb5b159866dd0c", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "job_stdout": "", "job_stderr": "", "stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "5 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "5.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:01:44", "plugin": "core", "name": "end_epoch", "raw_value": "1684911704.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:01:39", "plugin": "core", "name": "start_epoch", "raw_value": "1684911699.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger", "tool_version": "3.24.1+galaxy1", "test_index": 5, "time_seconds": 41.63599252700806, "inputs": {"input|counts": {"src": "hda", "id": "41e1d7126884ce3c"}, "input|fact|finfo": {"src": "hda", "id": "7371ff5c9aab0040"}, "input|fact|ffile": "yes", "input|format": "matrix", "rep_contrast_0|contrast": "Mut-WT", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "77cdaf0aeee83e45", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:02:34.411957", "create_time": "2023-05-24T07:02:14.341211", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-jsnbd", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/edger/334ce9b1bac5/edger/edger.R'  -R '/galaxy/server/database/objects/2/f/5/dataset_2f5c3a77-7628-4b48-acac-14e4f5cf15f7.dat' -o '/galaxy/server/database/jobs_directory/000/354/working/dataset_2f5c3a77-7628-4b48-acac-14e4f5cf15f7_files'  -m '/galaxy/server/database/objects/c/a/6/dataset_ca63e263-07aa-4948-b5d7-c3d66c995cc3.dat' -f '/galaxy/server/database/objects/7/b/b/dataset_7bb80940-db8c-483a-98bb-bea8e9e91769.dat'   -C 'Mut-WT'    -l '0.0' -p '0.05' -d 'BH' -n 'TMM' -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/354/working/dataset_2f5c3a77-7628-4b48-acac-14e4f5cf15f7_files'/*.tsv output_dir/", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"lrtOption\": false, \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true}", "out": "{\"normCounts\": false, \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "rep_contrast": "[{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 457, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 0, \"ffile\": \"yes\", \"finfo\": {\"values\": [{\"id\": 455, \"src\": \"hda\"}]}}, \"format\": \"matrix\"}"}, "inputs": {"counts": {"id": "41e1d7126884ce3c", "src": "hda", "uuid": "ca63e263-07aa-4948-b5d7-c3d66c995cc3"}, "input|finfo": {"id": "7371ff5c9aab0040", "src": "hda", "uuid": "7bb80940-db8c-483a-98bb-bea8e9e91769"}}, "outputs": {"__new_primary_file_outTables|edgeR_Mut-WT__": {"id": "5c72e4f2e41fc74e", "src": "hda", "uuid": "f0702a45-e44c-40f2-88bb-cf65975b5a7c"}, "outReport": {"id": "96db88ea41a4168d", "src": "hda", "uuid": "2f5c3a77-7628-4b48-acac-14e4f5cf15f7"}}, "output_collections": {"outTables": {"id": "4dca6d9834170aae", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "job_stdout": "", "job_stderr": "", "stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "5 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "5.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:02:23", "plugin": "core", "name": "end_epoch", "raw_value": "1684911743.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:02:18", "plugin": "core", "name": "start_epoch", "raw_value": "1684911738.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger", "tool_version": "3.24.1+galaxy1", "test_index": 6, "time_seconds": 41.37862253189087, "inputs": {"input|counts": {"src": "hda", "id": "41e1d7126884ce3c"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "rep_contrast_0|contrast": "Mut-WT", "out|normCounts": true, "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "7f629430f3bde643", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:02:36.189845", "create_time": "2023-05-24T07:02:16.794436", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-64glt", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/edger/334ce9b1bac5/edger/edger.R'  -R '/galaxy/server/database/objects/f/4/3/dataset_f4369e53-97e6-4d8f-ae44-fc2f7374ade6.dat' -o '/galaxy/server/database/jobs_directory/000/355/working/dataset_f4369e53-97e6-4d8f-ae44-fc2f7374ade6_files'  -m '/galaxy/server/database/objects/c/a/6/dataset_ca63e263-07aa-4948-b5d7-c3d66c995cc3.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'   -C 'Mut-WT'   -x  -l '0.0' -p '0.05' -d 'BH' -n 'TMM' -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/355/working/dataset_f4369e53-97e6-4d8f-ae44-fc2f7374ade6_files'/*.tsv output_dir/", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"lrtOption\": false, \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true}", "out": "{\"normCounts\": true, \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "rep_contrast": "[{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 457, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}"}, "inputs": {"counts": {"id": "41e1d7126884ce3c", "src": "hda", "uuid": "ca63e263-07aa-4948-b5d7-c3d66c995cc3"}}, "outputs": {"__new_primary_file_outTables|edgeR_normcounts__": {"id": "0ae9cdd325faa057", "src": "hda", "uuid": "84700e73-90cb-42f1-b3d8-5a2a0b349cbb"}, "__new_primary_file_outTables|edgeR_Mut-WT__": {"id": "bab84529b2f28d18", "src": "hda", "uuid": "b823797c-b42a-4aa1-9da7-76367ac5fafc"}, "outReport": {"id": "47d16bd07ce1c629", "src": "hda", "uuid": "f4369e53-97e6-4d8f-ae44-fc2f7374ade6"}}, "output_collections": {"outTables": {"id": "f8098725d2c53169", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "job_stdout": "", "job_stderr": "", "stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "5 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "5.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:02:25", "plugin": "core", "name": "end_epoch", "raw_value": "1684911745.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:02:20", "plugin": "core", "name": "start_epoch", "raw_value": "1684911740.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger", "tool_version": "3.24.1+galaxy1", "test_index": 7, "time_seconds": 74.3567442893982, "inputs": {"input|counts": {"src": "hda", "id": "59d2cd2b9c3bdf1e"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "rep_contrast_0|contrast": "Mut-WT", "adv|normalisationOption": "TMM", "adv|lrtOption": true}, "job": {"model_class": "Job", "id": "f9ea737255a627e5", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:03:48.892171", "create_time": "2023-05-24T07:02:56.791120", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-sph2g", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/edger/334ce9b1bac5/edger/edger.R'  -R '/galaxy/server/database/objects/9/e/4/dataset_9e438c40-1a72-4e00-b4f6-7de23eae0dad.dat' -o '/galaxy/server/database/jobs_directory/000/370/working/dataset_9e438c40-1a72-4e00-b4f6-7de23eae0dad_files'  -m '/galaxy/server/database/objects/6/3/1/dataset_631b15fd-f024-4ca0-9ce3-ae62585f044c.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'   -C 'Mut-WT'    -l '0.0' -p '0.05' -d 'BH' -n 'TMM' -b -t  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/370/working/dataset_9e438c40-1a72-4e00-b4f6-7de23eae0dad_files'/*.tsv output_dir/", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"lrtOption\": true, \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true}", "out": "{\"normCounts\": false, \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "rep_contrast": "[{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 461, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}"}, "inputs": {"counts": {"id": "59d2cd2b9c3bdf1e", "src": "hda", "uuid": "631b15fd-f024-4ca0-9ce3-ae62585f044c"}}, "outputs": {"__new_primary_file_outTables|edgeR_Mut-WT__": {"id": "74ff9a64293e2997", "src": "hda", "uuid": "30131701-b8b0-4c6b-beb6-b106662a1fcd"}, "outReport": {"id": "0ec089adc9078640", "src": "hda", "uuid": "9e438c40-1a72-4e00-b4f6-7de23eae0dad"}}, "output_collections": {"outTables": {"id": "999172a4fc2df6cd", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "job_stdout": "", "job_stderr": "", "stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:03:21", "plugin": "core", "name": "end_epoch", "raw_value": "1684911801.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:03:17", "plugin": "core", "name": "start_epoch", "raw_value": "1684911797.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1-8", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger", "tool_version": "3.24.1+galaxy1", "test_index": 8, "time_seconds": 90.3025848865509, "inputs": {"input|rep_factor_0|factorName": "Genotype", "input|rep_factor_0|rep_group_0|groupName": "WT", "input|rep_factor_0|rep_group_0|countsFile": [{"src": "hda", "id": "4051a6a2a3cec924"}, {"src": "hda", "id": "cda4c2cc67e8f1fc"}, {"src": "hda", "id": "1f3654d5913981b4"}], "input|rep_factor_0|rep_group_1|groupName": "Mut", "input|rep_factor_0|rep_group_1|countsFile": [{"src": "hda", "id": "225b30f508faf769"}, {"src": "hda", "id": "296c31b416398987"}, {"src": "hda", "id": "9a7baead4b590afc"}], "input|rep_factor_1|factorName": "Batch", "input|rep_factor_1|rep_group_0|groupName": "b1", "input|rep_factor_1|rep_group_0|countsFile": [{"src": "hda", "id": "4051a6a2a3cec924"}, {"src": "hda", "id": "225b30f508faf769"}], "input|rep_factor_1|rep_group_1|groupName": "b2", "input|rep_factor_1|rep_group_1|countsFile": [{"src": "hda", "id": "cda4c2cc67e8f1fc"}, {"src": "hda", "id": "296c31b416398987"}], "input|rep_factor_1|rep_group_2|groupName": "b3", "input|rep_factor_1|rep_group_2|countsFile": [{"src": "hda", "id": "1f3654d5913981b4"}, {"src": "hda", "id": "9a7baead4b590afc"}], "input|format": "files", "anno|geneanno": {"src": "hda", "id": "303ee84253b9b928"}, "anno|annoOpt": "yes", "rep_contrast_0|contrast": "Mut-WT", "rep_contrast_1|contrast": "WT-Mut", "out|normCounts": true}, "job": {"model_class": "Job", "id": "f30e45a8ffcfd241", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:04:06.264808", "create_time": "2023-05-24T07:03:47.999470", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-m25nz", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/edger/334ce9b1bac5/edger/edger.R'  -R '/galaxy/server/database/objects/b/5/6/dataset_b56ea23e-bb14-4f9c-bc4e-7ebf0b071c20.dat' -o '/galaxy/server/database/jobs_directory/000/371/working/dataset_b56ea23e-bb14-4f9c-bc4e-7ebf0b071c20_files'                          -j '[[\"Genotype\", [{\"Mut\": [\"/galaxy/server/database/objects/e/3/4/dataset_e34da8ec-b563-43df-8faa-7cd20ad8a481.dat\", \"/galaxy/server/database/objects/9/6/b/dataset_96b8ebb2-b330-463b-9e1c-90fb15c62c34.dat\", \"/galaxy/server/database/objects/4/4/f/dataset_44f2d6b7-5470-4e45-b9e0-acd2725569ed.dat\"]}, {\"WT\": [\"/galaxy/server/database/objects/2/c/1/dataset_2c11df6a-3c10-430b-b4d0-7d282e764e91.dat\", \"/galaxy/server/database/objects/7/5/8/dataset_758cdf4e-1a1c-4753-b476-ca3585b31bdf.dat\", \"/galaxy/server/database/objects/c/3/d/dataset_c3d9dad5-4b59-478b-ae2f-f32f3d8a4bd6.dat\"]}]], [\"Batch\", [{\"b3\": [\"/galaxy/server/database/objects/c/3/d/dataset_c3d9dad5-4b59-478b-ae2f-f32f3d8a4bd6.dat\", \"/galaxy/server/database/objects/4/4/f/dataset_44f2d6b7-5470-4e45-b9e0-acd2725569ed.dat\"]}, {\"b2\": [\"/galaxy/server/database/objects/7/5/8/dataset_758cdf4e-1a1c-4753-b476-ca3585b31bdf.dat\", \"/galaxy/server/database/objects/9/6/b/dataset_96b8ebb2-b330-463b-9e1c-90fb15c62c34.dat\"]}, {\"b1\": [\"/galaxy/server/database/objects/2/c/1/dataset_2c11df6a-3c10-430b-b4d0-7d282e764e91.dat\", \"/galaxy/server/database/objects/e/3/4/dataset_e34da8ec-b563-43df-8faa-7cd20ad8a481.dat\"]}]]]'   -a '/galaxy/server/database/objects/9/0/0/dataset_9008bd52-49f4-4bd1-a714-389c27ed4cf8.dat'  -C 'Mut-WT,WT-Mut'   -x  -l '0.0' -p '0.05' -d 'BH' -n 'TMM' -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/371/working/dataset_b56ea23e-bb14-4f9c-bc4e-7ebf0b071c20_files'/*.tsv output_dir/", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"lrtOption\": false, \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true}", "out": "{\"normCounts\": true, \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "rep_contrast": "[{\"__index__\": 0, \"contrast\": \"Mut-WT\"}, {\"__index__\": 1, \"contrast\": \"WT-Mut\"}]", "anno": "{\"__current_case__\": 0, \"annoOpt\": \"yes\", \"geneanno\": {\"values\": [{\"id\": 476, \"src\": \"hda\"}]}}", "input": "{\"__current_case__\": 0, \"format\": \"files\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"rep_group\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 470, \"src\": \"hda\"}, {\"id\": 472, \"src\": \"hda\"}, {\"id\": 474, \"src\": \"hda\"}]}, \"groupName\": \"WT\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 471, \"src\": \"hda\"}, {\"id\": 473, \"src\": \"hda\"}, {\"id\": 475, \"src\": \"hda\"}]}, \"groupName\": \"Mut\"}]}, {\"__index__\": 1, \"factorName\": \"Batch\", \"rep_group\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 470, \"src\": \"hda\"}, {\"id\": 471, \"src\": \"hda\"}]}, \"groupName\": \"b1\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 472, \"src\": \"hda\"}, {\"id\": 473, \"src\": \"hda\"}]}, \"groupName\": \"b2\"}, {\"__index__\": 2, \"countsFile\": {\"values\": [{\"id\": 474, \"src\": \"hda\"}, {\"id\": 475, \"src\": \"hda\"}]}, \"groupName\": \"b3\"}]}]}"}, "inputs": {"input|rep_factor_0|rep_group_0|countsFile": {"id": "4051a6a2a3cec924", "src": "hda", "uuid": "2c11df6a-3c10-430b-b4d0-7d282e764e91"}, "input|rep_factor_0|rep_group_0|countsFile1": {"id": "4051a6a2a3cec924", "src": "hda", "uuid": "2c11df6a-3c10-430b-b4d0-7d282e764e91"}, "input|rep_factor_0|rep_group_0|countsFile2": {"id": "cda4c2cc67e8f1fc", "src": "hda", "uuid": "758cdf4e-1a1c-4753-b476-ca3585b31bdf"}, "input|rep_factor_0|rep_group_0|countsFile3": {"id": "1f3654d5913981b4", "src": "hda", "uuid": "c3d9dad5-4b59-478b-ae2f-f32f3d8a4bd6"}, "input|rep_factor_0|rep_group_1|countsFile": {"id": "225b30f508faf769", "src": "hda", "uuid": "e34da8ec-b563-43df-8faa-7cd20ad8a481"}, "input|rep_factor_0|rep_group_1|countsFile1": {"id": "225b30f508faf769", "src": "hda", "uuid": "e34da8ec-b563-43df-8faa-7cd20ad8a481"}, "input|rep_factor_0|rep_group_1|countsFile2": {"id": "296c31b416398987", "src": "hda", "uuid": "96b8ebb2-b330-463b-9e1c-90fb15c62c34"}, "input|rep_factor_0|rep_group_1|countsFile3": {"id": "9a7baead4b590afc", "src": "hda", "uuid": "44f2d6b7-5470-4e45-b9e0-acd2725569ed"}, "geneanno": {"id": "303ee84253b9b928", "src": "hda", "uuid": "9008bd52-49f4-4bd1-a714-389c27ed4cf8"}, "input|rep_factor_1|rep_group_0|countsFile": {"id": "4051a6a2a3cec924", "src": "hda", "uuid": "2c11df6a-3c10-430b-b4d0-7d282e764e91"}, "input|rep_factor_1|rep_group_0|countsFile1": {"id": "4051a6a2a3cec924", "src": "hda", "uuid": "2c11df6a-3c10-430b-b4d0-7d282e764e91"}, "input|rep_factor_1|rep_group_0|countsFile2": {"id": "225b30f508faf769", "src": "hda", "uuid": "e34da8ec-b563-43df-8faa-7cd20ad8a481"}, "input|rep_factor_1|rep_group_1|countsFile": {"id": "cda4c2cc67e8f1fc", "src": "hda", "uuid": "758cdf4e-1a1c-4753-b476-ca3585b31bdf"}, "input|rep_factor_1|rep_group_1|countsFile1": {"id": "cda4c2cc67e8f1fc", "src": "hda", "uuid": "758cdf4e-1a1c-4753-b476-ca3585b31bdf"}, "input|rep_factor_1|rep_group_1|countsFile2": {"id": "296c31b416398987", "src": "hda", "uuid": "96b8ebb2-b330-463b-9e1c-90fb15c62c34"}, "input|rep_factor_1|rep_group_2|countsFile": {"id": "1f3654d5913981b4", "src": "hda", "uuid": "c3d9dad5-4b59-478b-ae2f-f32f3d8a4bd6"}, "input|rep_factor_1|rep_group_2|countsFile1": {"id": "1f3654d5913981b4", "src": "hda", "uuid": "c3d9dad5-4b59-478b-ae2f-f32f3d8a4bd6"}, "input|rep_factor_1|rep_group_2|countsFile2": {"id": "9a7baead4b590afc", "src": "hda", "uuid": "44f2d6b7-5470-4e45-b9e0-acd2725569ed"}}, "outputs": {"__new_primary_file_outTables|edgeR_normcounts__": {"id": "d8c8541cdbfe6b88", "src": "hda", "uuid": "3669bdcd-9143-46b8-946d-d94d12f6a271"}, "__new_primary_file_outTables|edgeR_WT-Mut__": {"id": "08d4f871fbd2e98d", "src": "hda", "uuid": "7c4b903c-4414-46cf-a01e-33c5a56f66c0"}, "__new_primary_file_outTables|edgeR_Mut-WT__": {"id": "236d776c4dc7aedc", "src": "hda", "uuid": "5f315b92-20fb-46fc-aea7-93c87de8c9d0"}, "outReport": {"id": "c1d5d42a4e48e248", "src": "hda", "uuid": "b56ea23e-bb14-4f9c-bc4e-7ebf0b071c20"}}, "output_collections": {"outTables": {"id": "7245e8c26b4b31b8", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "job_stdout": "", "job_stderr": "", "stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "6 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "6.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:03:55", "plugin": "core", "name": "end_epoch", "raw_value": "1684911835.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:03:49", "plugin": "core", "name": "start_epoch", "raw_value": "1684911829.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1-9", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger", "tool_version": "3.24.1+galaxy1", "test_index": 9, "time_seconds": 37.94868588447571, "inputs": {"input|counts": {"src": "hda", "id": "b81d58b7dfee0ad3"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "rep_contrast_0|contrast": "Mut-WT", "f|filt|cformat|cpmReq": "1000", "f|filt|cformat|cpmSampleReq": "3", "f|filt|cformat|format_select": "cpm", "f|filt|filt_select": "yes", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "054ae764150951ca", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:04:26.264527", "create_time": "2023-05-24T07:04:07.218362", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/edger/edger/3.24.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-k26qm", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/edger/334ce9b1bac5/edger/edger.R'  -R '/galaxy/server/database/objects/0/2/c/dataset_02c637c8-0428-4364-b642-0e710749168d.dat' -o '/galaxy/server/database/jobs_directory/000/373/working/dataset_02c637c8-0428-4364-b642-0e710749168d_files'  -m '/galaxy/server/database/objects/9/7/1/dataset_97171395-65d2-45b3-a6a0-40763a7bce91.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'   -C 'Mut-WT'  -c '1000.0' -s '3'   -l '0.0' -p '0.05' -d 'BH' -n 'TMM' -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/373/working/dataset_02c637c8-0428-4364-b642-0e710749168d_files'/*.tsv output_dir/", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"lrtOption\": false, \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true}", "out": "{\"normCounts\": false, \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 0, \"cformat\": {\"__current_case__\": 0, \"cpmReq\": \"1000.0\", \"cpmSampleReq\": \"3\", \"format_select\": \"cpm\"}, \"filt_select\": \"yes\"}}", "rep_contrast": "[{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 480, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}"}, "inputs": {"counts": {"id": "b81d58b7dfee0ad3", "src": "hda", "uuid": "97171395-65d2-45b3-a6a0-40763a7bce91"}}, "outputs": {"__new_primary_file_outTables|edgeR_Mut-WT__": {"id": "6b9dadf9d146d5b0", "src": "hda", "uuid": "3b3b41a4-423e-43fe-a03e-8e2633dc61ec"}, "outReport": {"id": "4d44748aa3e8753d", "src": "hda", "uuid": "02c637c8-0428-4364-b642-0e710749168d"}}, "output_collections": {"outTables": {"id": "805e579713b6bfa9", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "job_stdout": "", "job_stderr": "", "stderr": "Warning message:\nIn Sys.setlocale(\"LC_MESSAGES\", \"en_US.UTF-8\") :\n  OS reports request to set locale to \"en_US.UTF-8\" cannot be honored\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "4 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "4.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:04:14", "plugin": "core", "name": "end_epoch", "raw_value": "1684911854.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:04:10", "plugin": "core", "name": "start_epoch", "raw_value": "1684911850.0000000"}, {"title": "Memory Allocated (MB)", "value": "20401", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "20401.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/1.6.2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts", "tool_version": "1.6.2", "test_index": 0, "time_seconds": 17.490265369415283, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/1.6.2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts", "tool_version": "1.6.2", "test_index": 1, "time_seconds": 47.672781467437744, "inputs": {"alignment": {"src": "hda", "id": "5975edd1c56d1a73"}, "anno|reference_gene_sets": {"src": "hda", "id": "425f6f9b51f85e2b"}, "anno|anno_select": "history", "format": "tabdel_full", "include_feature_length_file": true}, "job": {"model_class": "Job", "id": "37e4cd6abaecd008", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:25:32.865836", "create_time": "2023-05-24T07:25:10.200952", "galaxy_version": "23.0", "command_version": "featureCounts v1.6.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/1.6.2", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-nwvh6", "command_line": "export FC_PATH=$(command -v featureCounts | sed 's@/bin/featureCounts$@@') &&  featureCounts  -a '/galaxy/server/database/objects/f/8/4/dataset_f84a51eb-ddd9-46c7-b6a7-ce51202ce16d.dat' -F \"GTF\"  -o \"output\" -T ${GALAXY_SLOTS:-2}  -s  0 -t 'exon' -g 'gene_id'            -Q  12  --minOverlap  1 --fracOverlap 0 --fracOverlapFeature 0         -C  '/galaxy/server/database/objects/a/8/c/dataset_a8c828df-e15d-4848-be7e-e1ecdef67b15.dat'  && grep -v \"^#\" \"output\" | sed -e 's|/galaxy/server/database/objects/a/8/c/dataset_a8c828df-e15d-4848-be7e-e1ecdef67b15.dat|featureCounts_input1.bam|g' > body.txt && cp body.txt '/galaxy/server/database/objects/b/0/d/dataset_b0d4653a-5d4c-421c-9859-b170a050c5f4.dat'  && cut -f 1,6 body.txt > '/galaxy/server/database/objects/d/b/2/dataset_db2f1ae8-56ad-4e38-b435-0e1c74239cee.dat'   && sed -e 's|/galaxy/server/database/objects/a/8/c/dataset_a8c828df-e15d-4848-be7e-e1ecdef67b15.dat|featureCounts_input1.bam|g' 'output.summary' > '/galaxy/server/database/objects/4/0/4/dataset_40486744-5489-4715-a02e-14d44663e04a.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"hg38\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/hg38.len\"", "extended_parameters": "{\"R\": false, \"by_read_group\": false, \"contribute_to_multiple_features\": false, \"count_split_alignments_only\": false, \"exon_exon_junction_read_counting_enabled\": {\"__current_case__\": 1, \"count_exon_exon_junction_reads\": false}, \"frac_overlap\": \"0\", \"frac_overlap_feature\": \"0\", \"gff_feature_attribute\": \"gene_id\", \"gff_feature_type\": \"exon\", \"ignore_dup\": false, \"largest_overlap\": false, \"long_reads\": false, \"mapping_quality\": \"12\", \"min_overlap\": \"1\", \"multimapping_enabled\": {\"__current_case__\": 1, \"multimapping_counts\": \"\"}, \"primary\": false, \"read_extension_3p\": \"0\", \"read_extension_5p\": \"0\", \"read_reduction\": \"\", \"summarization_level\": false}", "pe_parameters": "{\"exclude_chimerics\": true, \"fragment_counting_enabled\": {\"__current_case__\": 1, \"fragment_counting\": \"\"}, \"only_both_ends\": false}", "include_feature_length_file": "true", "format": "\"tabdel_full\"", "anno": "{\"__current_case__\": 2, \"anno_select\": \"history\", \"reference_gene_sets\": {\"values\": [{\"id\": 708, \"src\": \"hda\"}]}}", "strand_specificity": "\"0\""}, "inputs": {"reference_gene_sets": {"id": "425f6f9b51f85e2b", "src": "hda", "uuid": "f84a51eb-ddd9-46c7-b6a7-ce51202ce16d"}, "alignment": {"id": "5975edd1c56d1a73", "src": "hda", "uuid": "a8c828df-e15d-4848-be7e-e1ecdef67b15"}}, "outputs": {"output_feature_lengths": {"id": "f911639ed71ec355", "src": "hda", "uuid": "db2f1ae8-56ad-4e38-b435-0e1c74239cee"}, "output_summary": {"id": "f023c490ce2ed8b0", "src": "hda", "uuid": "40486744-5489-4715-a02e-14d44663e04a"}, "output_full": {"id": "a27b2c7b43f77a18", "src": "hda", "uuid": "b0d4653a-5d4c-421c-9859-b170a050c5f4"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ <|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n\t  v1.6.2\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                           S dataset_a8c828df-e15d-4848-be7e-e1ecdef67b ... ||\n||                                                                            ||\n||             Output file : output                                           ||\n||                 Summary : output.summary                                   ||\n||              Annotation : dataset_f84a51eb-ddd9-46c7-b6a7-ce51202ce16d ... ||\n||      Dir for temp files : ./                                               ||\n||                                                                            ||\n||                 Threads : 8                                                ||\n||                   Level : meta-feature level                               ||\n||              Paired-end : no                                               ||\n||      Multimapping reads : not counted                                      ||\n|| Multi-overlapping reads : not counted                                      ||\n||   Min overlapping bases : 1                                                ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file dataset_f84a51eb-ddd9-46c7-b6a7-ce51202ce16d.dat ...  ||\n||    Features : 680                                                          ||\n||    Meta-features : 2                                                       ||\n||    Chromosomes/contigs : 1                                                 ||\n||                                                                            ||\n|| Process BAM file dataset_a8c828df-e15d-4848-be7e-e1ecdef67b15.dat...       ||\n||    Single-end reads are included.                                          ||\n||    Assign reads to features...                                             ||\n||    Total reads : 6236                                                      ||\n||    Successfully assigned reads : 158 (2.5%)                                ||\n||    Running time : 0.00 minutes                                             ||\n||                                                                            ||\n||                         Read assignment finished.                          ||\n||                                                                            ||\n|| Summary of counting results can be found in file \"output.summary\"          ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n", "job_stdout": "", "job_stderr": "", "stderr": "\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ <|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n\t  v1.6.2\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                           S dataset_a8c828df-e15d-4848-be7e-e1ecdef67b ... ||\n||                                                                            ||\n||             Output file : output                                           ||\n||                 Summary : output.summary                                   ||\n||              Annotation : dataset_f84a51eb-ddd9-46c7-b6a7-ce51202ce16d ... ||\n||      Dir for temp files : ./                                               ||\n||                                                                            ||\n||                 Threads : 8                                                ||\n||                   Level : meta-feature level                               ||\n||              Paired-end : no                                               ||\n||      Multimapping reads : not counted                                      ||\n|| Multi-overlapping reads : not counted                                      ||\n||   Min overlapping bases : 1                                                ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file dataset_f84a51eb-ddd9-46c7-b6a7-ce51202ce16d.dat ...  ||\n||    Features : 680                                                          ||\n||    Meta-features : 2                                                       ||\n||    Chromosomes/contigs : 1                                                 ||\n||                                                                            ||\n|| Process BAM file dataset_a8c828df-e15d-4848-be7e-e1ecdef67b15.dat...       ||\n||    Single-end reads are included.                                          ||\n||    Assign reads to features...                                             ||\n||    Total reads : 6236                                                      ||\n||    Successfully assigned reads : 158 (2.5%)                                ||\n||    Running time : 0.00 minutes                                             ||\n||                                                                            ||\n||                         Read assignment finished.                          ||\n||                                                                            ||\n|| Summary of counting results can be found in file \"output.summary\"          ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:25:21", "plugin": "core", "name": "end_epoch", "raw_value": "1684913121.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:25:20", "plugin": "core", "name": "start_epoch", "raw_value": "1684913120.0000000"}, {"title": "Memory Allocated (MB)", "value": "19327", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "19327.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/1.6.2-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts", "tool_version": "1.6.2", "test_index": 2, "time_seconds": 44.648733377456665, "inputs": {"alignment": {"src": "hda", "id": "5975edd1c56d1a73"}, "anno|reference_gene_sets": {"src": "hda", "id": "425f6f9b51f85e2b"}, "anno|anno_select": "history", "format": "tabdel_short", "include_feature_length_file": true, "extended_parameters|exon_exon_junction_read_counting_enabled|count_exon_exon_junction_reads": true}, "job": {"model_class": "Job", "id": "2b331a7140d117ae", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:25:35.992657", "create_time": "2023-05-24T07:25:15.624314", "galaxy_version": "23.0", "command_version": "featureCounts v1.6.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/1.6.2", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-bqndv", "command_line": "export FC_PATH=$(command -v featureCounts | sed 's@/bin/featureCounts$@@') &&  featureCounts  -a '/galaxy/server/database/objects/f/8/4/dataset_f84a51eb-ddd9-46c7-b6a7-ce51202ce16d.dat' -F \"GTF\"  -o \"output\" -T ${GALAXY_SLOTS:-2}  -s  0 -t 'exon' -g 'gene_id'      -J      -Q  12  --minOverlap  1 --fracOverlap 0 --fracOverlapFeature 0         -C  '/galaxy/server/database/objects/a/8/c/dataset_a8c828df-e15d-4848-be7e-e1ecdef67b15.dat'  && grep -v \"^#\" \"output\" | sed -e 's|/galaxy/server/database/objects/a/8/c/dataset_a8c828df-e15d-4848-be7e-e1ecdef67b15.dat|featureCounts_input1.bam|g' > body.txt && cut -f 1,7 body.txt > '/galaxy/server/database/objects/c/9/b/dataset_c9b11df8-e2eb-4ee3-a75a-e8b50110e9a3.dat'  && cut -f 1,6 body.txt > '/galaxy/server/database/objects/3/8/f/dataset_38fab91f-6f7b-40fa-ae9a-b40e156a936a.dat'  && sed -e 's|/galaxy/server/database/objects/a/8/c/dataset_a8c828df-e15d-4848-be7e-e1ecdef67b15.dat|featureCounts_input1.bam|g' 'output.jcounts' > '/galaxy/server/database/objects/e/0/6/dataset_e066c856-05f9-4816-89d0-dba3cf3fed5e.dat'  && sed -e 's|/galaxy/server/database/objects/a/8/c/dataset_a8c828df-e15d-4848-be7e-e1ecdef67b15.dat|featureCounts_input1.bam|g' 'output.summary' > '/galaxy/server/database/objects/c/8/f/dataset_c8fc6cf6-ee24-4c3e-a04e-2c1c5db6216e.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"hg38\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/hg38.len\"", "extended_parameters": "{\"R\": false, \"by_read_group\": false, \"contribute_to_multiple_features\": false, \"count_split_alignments_only\": false, \"exon_exon_junction_read_counting_enabled\": {\"__current_case__\": 0, \"count_exon_exon_junction_reads\": true, \"genome\": null}, \"frac_overlap\": \"0\", \"frac_overlap_feature\": \"0\", \"gff_feature_attribute\": \"gene_id\", \"gff_feature_type\": \"exon\", \"ignore_dup\": false, \"largest_overlap\": false, \"long_reads\": false, \"mapping_quality\": \"12\", \"min_overlap\": \"1\", \"multimapping_enabled\": {\"__current_case__\": 1, \"multimapping_counts\": \"\"}, \"primary\": false, \"read_extension_3p\": \"0\", \"read_extension_5p\": \"0\", \"read_reduction\": \"\", \"summarization_level\": false}", "pe_parameters": "{\"exclude_chimerics\": true, \"fragment_counting_enabled\": {\"__current_case__\": 1, \"fragment_counting\": \"\"}, \"only_both_ends\": false}", "include_feature_length_file": "true", "format": "\"tabdel_short\"", "anno": "{\"__current_case__\": 2, \"anno_select\": \"history\", \"reference_gene_sets\": {\"values\": [{\"id\": 708, \"src\": \"hda\"}]}}", "strand_specificity": "\"0\""}, "inputs": {"reference_gene_sets": {"id": "425f6f9b51f85e2b", "src": "hda", "uuid": "f84a51eb-ddd9-46c7-b6a7-ce51202ce16d"}, "alignment": {"id": "5975edd1c56d1a73", "src": "hda", "uuid": "a8c828df-e15d-4848-be7e-e1ecdef67b15"}}, "outputs": {"output_jcounts": {"id": "f467d27656754095", "src": "hda", "uuid": "e066c856-05f9-4816-89d0-dba3cf3fed5e"}, "output_feature_lengths": {"id": "cca784c81312b9c8", "src": "hda", "uuid": "38fab91f-6f7b-40fa-ae9a-b40e156a936a"}, "output_summary": {"id": "8326958059d61c46", "src": "hda", "uuid": "c8fc6cf6-ee24-4c3e-a04e-2c1c5db6216e"}, "output_short": {"id": "494585a8a91f38c6", "src": "hda", "uuid": "c9b11df8-e2eb-4ee3-a75a-e8b50110e9a3"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ <|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n\t  v1.6.2\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                           S dataset_a8c828df-e15d-4848-be7e-e1ecdef67b ... ||\n||                                                                            ||\n||             Output file : output                                           ||\n||                 Summary : output.summary                                   ||\n||              Annotation : dataset_f84a51eb-ddd9-46c7-b6a7-ce51202ce16d ... ||\n||       Junction Counting : <output_file>.jcounts                            ||\n||      Dir for temp files : ./                                               ||\n||                                                                            ||\n||                 Threads : 8                                                ||\n||                   Level : meta-feature level                               ||\n||              Paired-end : no                                               ||\n||      Multimapping reads : not counted                                      ||\n|| Multi-overlapping reads : not counted                                      ||\n||   Min overlapping bases : 1                                                ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file dataset_f84a51eb-ddd9-46c7-b6a7-ce51202ce16d.dat ...  ||\n||    Features : 680                                                          ||\n||    Meta-features : 2                                                       ||\n||    Chromosomes/contigs : 1                                                 ||\n||                                                                            ||\n|| Process BAM file dataset_a8c828df-e15d-4848-be7e-e1ecdef67b15.dat...       ||\n||    Single-end reads are included.                                          ||\n||    Assign reads to features...                                             ||\n||    Total reads : 6236                                                      ||\n||    Successfully assigned reads : 158 (2.5%)                                ||\n||    Running time : 0.00 minutes                                             ||\n||                                                                            ||\n||                 Found 0 junctions in all the input files.                  ||\n||                                                                            ||\n||                         Read assignment finished.                          ||\n||                                                                            ||\n|| Summary of counting results can be found in file \"output.summary\"          ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n", "job_stdout": "", "job_stderr": "", "stderr": "\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ <|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n\t  v1.6.2\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                           S dataset_a8c828df-e15d-4848-be7e-e1ecdef67b ... ||\n||                                                                            ||\n||             Output file : output                                           ||\n||                 Summary : output.summary                                   ||\n||              Annotation : dataset_f84a51eb-ddd9-46c7-b6a7-ce51202ce16d ... ||\n||       Junction Counting : <output_file>.jcounts                            ||\n||      Dir for temp files : ./                                               ||\n||                                                                            ||\n||                 Threads : 8                                                ||\n||                   Level : meta-feature level                               ||\n||              Paired-end : no                                               ||\n||      Multimapping reads : not counted                                      ||\n|| Multi-overlapping reads : not counted                                      ||\n||   Min overlapping bases : 1                                                ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file dataset_f84a51eb-ddd9-46c7-b6a7-ce51202ce16d.dat ...  ||\n||    Features : 680                                                          ||\n||    Meta-features : 2                                                       ||\n||    Chromosomes/contigs : 1                                                 ||\n||                                                                            ||\n|| Process BAM file dataset_a8c828df-e15d-4848-be7e-e1ecdef67b15.dat...       ||\n||    Single-end reads are included.                                          ||\n||    Assign reads to features...                                             ||\n||    Total reads : 6236                                                      ||\n||    Successfully assigned reads : 158 (2.5%)                                ||\n||    Running time : 0.00 minutes                                             ||\n||                                                                            ||\n||                 Found 0 junctions in all the input files.                  ||\n||                                                                            ||\n||                         Read assignment finished.                          ||\n||                                                                            ||\n|| Summary of counting results can be found in file \"output.summary\"          ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:25:26", "plugin": "core", "name": "end_epoch", "raw_value": "1684913126.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:25:25", "plugin": "core", "name": "start_epoch", "raw_value": "1684913125.0000000"}, {"title": "Memory Allocated (MB)", "value": "19327", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "19327.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/1.6.2-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts", "tool_version": "1.6.2", "test_index": 3, "time_seconds": 16.313414096832275, "inputs": {"alignment": {"src": "hda", "id": "f6b310fbec7cd6f1"}, "anno|anno_select": "builtin", "format": "tabdel_short", "extended_parameters|R": true}, "execution_problem": "parameter 'bgenome': an invalid option (None) was selected, please verify", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/1.6.2-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts", "tool_version": "1.6.2", "test_index": 4, "time_seconds": 16.854655742645264, "inputs": {"alignment": {"src": "hda", "id": "b7ed456a49dfd715"}, "anno|anno_select": "cached", "format": "tabdel_medium", "include_feature_length_file": true}, "execution_problem": "parameter 'reference_gene_sets_builtin': an invalid option (None) was selected, please verify", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/1.6.2-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts", "tool_version": "1.6.2", "test_index": 5, "time_seconds": 33.54618763923645, "inputs": {"alignment": {"src": "hda", "id": "ac2960861803ee24"}, "anno|reference_gene_sets": {"src": "hda", "id": "8dba0e93da925293"}, "anno|anno_select": "history", "extended_parameters|R": true}, "job": {"model_class": "Job", "id": "a64cbc1b44e5c011", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:26:24.065378", "create_time": "2023-05-24T07:26:10.572621", "galaxy_version": "23.0", "command_version": "featureCounts v1.6.2", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/1.6.2", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-n9qjd", "command_line": "export FC_PATH=$(command -v featureCounts | sed 's@/bin/featureCounts$@@') &&  featureCounts  -a '/galaxy/server/database/objects/2/5/b/dataset_25bcee53-a9cd-4036-a69d-d8575136105f.dat' -F \"GTF\"  -o \"output\" -T ${GALAXY_SLOTS:-2}  -s  0 -t 'exon' -g 'gene_id'            -Q  12  --minOverlap  1 --fracOverlap 0 --fracOverlapFeature 0    -R BAM      -C  '/galaxy/server/database/objects/e/6/7/dataset_e6747b35-9708-401e-ae1c-adae6bfefb77.dat'  && grep -v \"^#\" \"output\" | sed -e 's|/galaxy/server/database/objects/e/6/7/dataset_e6747b35-9708-401e-ae1c-adae6bfefb77.dat|subset.sorted.bam|g' > body.txt && cut -f 1,7 body.txt > '/galaxy/server/database/objects/2/9/b/dataset_29b8cef7-4331-4358-846c-71386ec398fb.dat'    && samtools sort -o '/galaxy/server/database/objects/6/a/7/dataset_6a70f330-9ced-4886-8906-398e2057e9dd.dat' -@ ${GALAXY_SLOTS:-2} *.featureCounts.bam && sed -e 's|/galaxy/server/database/objects/e/6/7/dataset_e6747b35-9708-401e-ae1c-adae6bfefb77.dat|subset.sorted.bam|g' 'output.summary' > '/galaxy/server/database/objects/e/f/f/dataset_effecf04-37d3-4e9a-8183-aa1cad405c16.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "extended_parameters": "{\"R\": true, \"by_read_group\": false, \"contribute_to_multiple_features\": false, \"count_split_alignments_only\": false, \"exon_exon_junction_read_counting_enabled\": {\"__current_case__\": 1, \"count_exon_exon_junction_reads\": false}, \"frac_overlap\": \"0\", \"frac_overlap_feature\": \"0\", \"gff_feature_attribute\": \"gene_id\", \"gff_feature_type\": \"exon\", \"ignore_dup\": false, \"largest_overlap\": false, \"long_reads\": false, \"mapping_quality\": \"12\", \"min_overlap\": \"1\", \"multimapping_enabled\": {\"__current_case__\": 1, \"multimapping_counts\": \"\"}, \"primary\": false, \"read_extension_3p\": \"0\", \"read_extension_5p\": \"0\", \"read_reduction\": \"\", \"summarization_level\": false}", "pe_parameters": "{\"exclude_chimerics\": true, \"fragment_counting_enabled\": {\"__current_case__\": 1, \"fragment_counting\": \"\"}, \"only_both_ends\": false}", "include_feature_length_file": "false", "format": "\"tabdel_short\"", "anno": "{\"__current_case__\": 2, \"anno_select\": \"history\", \"reference_gene_sets\": {\"values\": [{\"id\": 719, \"src\": \"hda\"}]}}", "strand_specificity": "\"0\""}, "inputs": {"reference_gene_sets": {"id": "8dba0e93da925293", "src": "hda", "uuid": "25bcee53-a9cd-4036-a69d-d8575136105f"}, "alignment": {"id": "ac2960861803ee24", "src": "hda", "uuid": "e6747b35-9708-401e-ae1c-adae6bfefb77"}}, "outputs": {"output_summary": {"id": "e5cffa96d00cab85", "src": "hda", "uuid": "effecf04-37d3-4e9a-8183-aa1cad405c16"}, "output_short": {"id": "27b9e3d94169141c", "src": "hda", "uuid": "29b8cef7-4331-4358-846c-71386ec398fb"}, "output_bam": {"id": "80cecdbe699f06bf", "src": "hda", "uuid": "6a70f330-9ced-4886-8906-398e2057e9dd"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ <|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n\t  v1.6.2\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                           S dataset_e6747b35-9708-401e-ae1c-adae6bfefb ... ||\n||                                                                            ||\n||             Output file : output                                           ||\n||                 Summary : output.summary                                   ||\n||              Annotation : dataset_25bcee53-a9cd-4036-a69d-d8575136105f ... ||\n||      Assignment details : <input_file>.featureCounts.bam                   ||\n||                      (Note that files are saved to the output directory)   ||\n||                                                                            ||\n||      Dir for temp files : ./                                               ||\n||                                                                            ||\n||                 Threads : 8                                                ||\n||                   Level : meta-feature level                               ||\n||              Paired-end : no                                               ||\n||      Multimapping reads : not counted                                      ||\n|| Multi-overlapping reads : not counted                                      ||\n||   Min overlapping bases : 1                                                ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file dataset_25bcee53-a9cd-4036-a69d-d8575136105f.dat ...  ||\n||    Features : 1398                                                         ||\n||    Meta-features : 1389                                                    ||\n||    Chromosomes/contigs : 32                                                ||\n||                                                                            ||\n|| Process BAM file dataset_e6747b35-9708-401e-ae1c-adae6bfefb77.dat...       ||\n||    Single-end reads are included.                                          ||\n||    Assign reads to features...                                             ||\n||    Total reads : 8936                                                      ||\n||    Successfully assigned reads : 14 (0.2%)                                 ||\n||    Running time : 0.00 minutes                                             ||\n||                                                                            ||\n||                         Read assignment finished.                          ||\n||                                                                            ||\n|| Summary of counting results can be found in file \"output.summary\"          ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n[bam_sort_core] merging from 0 files and 8 in-memory blocks...\n", "job_stdout": "", "job_stderr": "", "stderr": "\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ <|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n\t  v1.6.2\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                           S dataset_e6747b35-9708-401e-ae1c-adae6bfefb ... ||\n||                                                                            ||\n||             Output file : output                                           ||\n||                 Summary : output.summary                                   ||\n||              Annotation : dataset_25bcee53-a9cd-4036-a69d-d8575136105f ... ||\n||      Assignment details : <input_file>.featureCounts.bam                   ||\n||                      (Note that files are saved to the output directory)   ||\n||                                                                            ||\n||      Dir for temp files : ./                                               ||\n||                                                                            ||\n||                 Threads : 8                                                ||\n||                   Level : meta-feature level                               ||\n||              Paired-end : no                                               ||\n||      Multimapping reads : not counted                                      ||\n|| Multi-overlapping reads : not counted                                      ||\n||   Min overlapping bases : 1                                                ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file dataset_25bcee53-a9cd-4036-a69d-d8575136105f.dat ...  ||\n||    Features : 1398                                                         ||\n||    Meta-features : 1389                                                    ||\n||    Chromosomes/contigs : 32                                                ||\n||                                                                            ||\n|| Process BAM file dataset_e6747b35-9708-401e-ae1c-adae6bfefb77.dat...       ||\n||    Single-end reads are included.                                          ||\n||    Assign reads to features...                                             ||\n||    Total reads : 8936                                                      ||\n||    Successfully assigned reads : 14 (0.2%)                                 ||\n||    Running time : 0.00 minutes                                             ||\n||                                                                            ||\n||                         Read assignment finished.                          ||\n||                                                                            ||\n|| Summary of counting results can be found in file \"output.summary\"          ||\n||                                                                            ||\n\\\\===================== http://subread.sourceforge.net/ ======================//\n\n[bam_sort_core] merging from 0 files and 8 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:26:13", "plugin": "core", "name": "end_epoch", "raw_value": "1684913173.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:26:12", "plugin": "core", "name": "start_epoch", "raw_value": "1684913172.0000000"}, {"title": "Memory Allocated (MB)", "value": "19327", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "19327.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/2.0.1+galaxy2-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts", "tool_version": "2.0.1+galaxy2", "test_index": 0, "time_seconds": 53.70028281211853, "inputs": {"alignment": {"src": "hda", "id": "6cb92ef3705ca589"}, "anno|reference_gene_sets": {"src": "hda", "id": "f26d648bfb516894"}, "anno|anno_select": "history", "format": "tabdel_medium", "include_feature_length_file": true}, "job": {"model_class": "Job", "id": "bd2cf900b5f93985", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:23:46.046541", "create_time": "2023-05-24T07:23:15.395805", "galaxy_version": "23.0", "command_version": "featureCounts v2.0.1", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/2.0.1+galaxy2", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-tqm4q", "command_line": "export FC_PATH=$(command -v featureCounts | sed 's@/bin/featureCounts$@@') &&  featureCounts  -a '/galaxy/server/database/objects/6/e/7/dataset_6e74f4dc-d5c5-4079-9b7c-f423b1f57b32.dat' -F \"GTF\"  -o \"output\" -T ${GALAXY_SLOTS:-2}  -s  0  -Q  0     -t 'exon' -g 'gene_id'               --minOverlap  1 --fracOverlap 0 --fracOverlapFeature 0       -C  '/galaxy/server/database/objects/4/c/a/dataset_4cabed9f-e13a-49d5-9ebc-77f041a0e70c.dat'  && grep -v \"^#\" \"output\" | sed -e 's|/galaxy/server/database/objects/4/c/a/dataset_4cabed9f-e13a-49d5-9ebc-77f041a0e70c.dat|featureCounts_input1.bam|g' > body.txt && cut -f 1,7 body.txt > expression_matrix.txt  && cut -f 6 body.txt > gene_lengths.txt && paste expression_matrix.txt gene_lengths.txt > expression_matrix.txt.bak && mv -f expression_matrix.txt.bak '/galaxy/server/database/objects/d/f/3/dataset_df37696c-bd80-4cc7-b344-6b0e9c13d0f0.dat'  && cut -f 1,6 body.txt > '/galaxy/server/database/objects/3/5/5/dataset_3553e9fe-1267-4def-aec4-185da4840ab5.dat'   && sed -e 's|/galaxy/server/database/objects/4/c/a/dataset_4cabed9f-e13a-49d5-9ebc-77f041a0e70c.dat|featureCounts_input1.bam|g' 'output.summary' > '/galaxy/server/database/objects/2/2/4/dataset_22473ec1-3d3a-4ef0-93b5-bcb704c546eb.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"hg38\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/hg38.len\"", "extended_parameters": "{\"R\": false, \"by_read_group\": false, \"exon_exon_junction_read_counting_enabled\": {\"__current_case__\": 1, \"count_exon_exon_junction_reads\": false}, \"frac_overlap\": \"0\", \"frac_overlap_feature\": \"0\", \"gff_feature_attribute\": \"gene_id\", \"gff_feature_type\": \"exon\", \"largest_overlap\": false, \"long_reads\": false, \"min_overlap\": \"1\", \"multifeatures\": {\"__current_case__\": 0, \"multifeat\": \"\"}, \"read_extension_3p\": \"0\", \"read_extension_5p\": \"0\", \"read_reduction\": \"\", \"summarization_level\": false}", "read_filtering_parameters": "{\"ignore_dup\": false, \"mapping_quality\": \"0\", \"primary\": false, \"splitonly\": \"\"}", "pe_parameters": "{\"exclude_chimerics\": true, \"fragment_counting_enabled\": {\"__current_case__\": 1, \"fragment_counting\": \"\"}, \"only_both_ends\": false}", "include_feature_length_file": "true", "format": "\"tabdel_medium\"", "anno": "{\"__current_case__\": 2, \"anno_select\": \"history\", \"reference_gene_sets\": {\"values\": [{\"id\": 683, \"src\": \"hda\"}]}}", "strand_specificity": "\"0\""}, "inputs": {"reference_gene_sets": {"id": "f26d648bfb516894", "src": "hda", "uuid": "6e74f4dc-d5c5-4079-9b7c-f423b1f57b32"}, "alignment": {"id": "6cb92ef3705ca589", "src": "hda", "uuid": "4cabed9f-e13a-49d5-9ebc-77f041a0e70c"}}, "outputs": {"output_feature_lengths": {"id": "31084c2ec77e578f", "src": "hda", "uuid": "3553e9fe-1267-4def-aec4-185da4840ab5"}, "output_summary": {"id": "79f80644e49ac934", "src": "hda", "uuid": "22473ec1-3d3a-4ef0-93b5-bcb704c546eb"}, "output_medium": {"id": "a9f4e7596bd6783a", "src": "hda", "uuid": "df37696c-bd80-4cc7-b344-6b0e9c13d0f0"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ <|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n\t  v2.0.1\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                           o dataset_4cabed9f-e13a-49d5-9ebc-77f041a0e7 ... ||\n||                                                                            ||\n||             Output file : output                                           ||\n||                 Summary : output.summary                                   ||\n||              Annotation : dataset_6e74f4dc-d5c5-4079-9b7c-f423b1f57b32 ... ||\n||      Dir for temp files : ./                                               ||\n||                                                                            ||\n||                 Threads : 8                                                ||\n||                   Level : meta-feature level                               ||\n||              Paired-end : no                                               ||\n||      Multimapping reads : not counted                                      ||\n|| Multi-overlapping reads : not counted                                      ||\n||   Min overlapping bases : 1                                                ||\n||                                                                            ||\n\\\\============================================================================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file dataset_6e74f4dc-d5c5-4079-9b7c-f423b1f57b32.dat ...  ||\n||    Features : 680                                                          ||\n||    Meta-features : 2                                                       ||\n||    Chromosomes/contigs : 1                                                 ||\n||                                                                            ||\n|| Process BAM file dataset_4cabed9f-e13a-49d5-9ebc-77f041a0e70c.dat...       ||\n||    Single-end reads are included.                                          ||\n||    Total alignments : 6236                                                 ||\n||    Successfully assigned alignments : 158 (2.5%)                           ||\n||    Running time : 0.00 minutes                                             ||\n||                                                                            ||\n|| Write the final count table.                                               ||\n|| Write the read assignment summary.                                         ||\n||                                                                            ||\n|| Summary of counting results can be found in file \"output.summary\"          ||\n||                                                                            ||\n\\\\============================================================================//\n\n", "job_stdout": "", "job_stderr": "", "stderr": "\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ <|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n\t  v2.0.1\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                           o dataset_4cabed9f-e13a-49d5-9ebc-77f041a0e7 ... ||\n||                                                                            ||\n||             Output file : output                                           ||\n||                 Summary : output.summary                                   ||\n||              Annotation : dataset_6e74f4dc-d5c5-4079-9b7c-f423b1f57b32 ... ||\n||      Dir for temp files : ./                                               ||\n||                                                                            ||\n||                 Threads : 8                                                ||\n||                   Level : meta-feature level                               ||\n||              Paired-end : no                                               ||\n||      Multimapping reads : not counted                                      ||\n|| Multi-overlapping reads : not counted                                      ||\n||   Min overlapping bases : 1                                                ||\n||                                                                            ||\n\\\\============================================================================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file dataset_6e74f4dc-d5c5-4079-9b7c-f423b1f57b32.dat ...  ||\n||    Features : 680                                                          ||\n||    Meta-features : 2                                                       ||\n||    Chromosomes/contigs : 1                                                 ||\n||                                                                            ||\n|| Process BAM file dataset_4cabed9f-e13a-49d5-9ebc-77f041a0e70c.dat...       ||\n||    Single-end reads are included.                                          ||\n||    Total alignments : 6236                                                 ||\n||    Successfully assigned alignments : 158 (2.5%)                           ||\n||    Running time : 0.00 minutes                                             ||\n||                                                                            ||\n|| Write the final count table.                                               ||\n|| Write the read assignment summary.                                         ||\n||                                                                            ||\n|| Summary of counting results can be found in file \"output.summary\"          ||\n||                                                                            ||\n\\\\============================================================================//\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:23:34", "plugin": "core", "name": "end_epoch", "raw_value": "1684913014.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:23:34", "plugin": "core", "name": "start_epoch", "raw_value": "1684913014.0000000"}, {"title": "Memory Allocated (MB)", "value": "19327", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "19327.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/2.0.1+galaxy2-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts", "tool_version": "2.0.1+galaxy2", "test_index": 1, "time_seconds": 42.08207941055298, "inputs": {"alignment": {"src": "hda", "id": "6cb92ef3705ca589"}, "anno|reference_gene_sets": {"src": "hda", "id": "f26d648bfb516894"}, "anno|anno_select": "history", "format": "tabdel_full", "include_feature_length_file": true}, "job": {"model_class": "Job", "id": "c24b534f1a14412b", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:23:50.126662", "create_time": "2023-05-24T07:23:28.610696", "galaxy_version": "23.0", "command_version": "featureCounts v2.0.1", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/2.0.1+galaxy2", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-wz866", "command_line": "export FC_PATH=$(command -v featureCounts | sed 's@/bin/featureCounts$@@') &&  featureCounts  -a '/galaxy/server/database/objects/6/e/7/dataset_6e74f4dc-d5c5-4079-9b7c-f423b1f57b32.dat' -F \"GTF\"  -o \"output\" -T ${GALAXY_SLOTS:-2}  -s  0  -Q  0     -t 'exon' -g 'gene_id'               --minOverlap  1 --fracOverlap 0 --fracOverlapFeature 0       -C  '/galaxy/server/database/objects/4/c/a/dataset_4cabed9f-e13a-49d5-9ebc-77f041a0e70c.dat'  && grep -v \"^#\" \"output\" | sed -e 's|/galaxy/server/database/objects/4/c/a/dataset_4cabed9f-e13a-49d5-9ebc-77f041a0e70c.dat|featureCounts_input1.bam|g' > body.txt && cp body.txt '/galaxy/server/database/objects/a/b/8/dataset_ab80581a-2019-4d0d-995e-3e27997225d7.dat'  && cut -f 1,6 body.txt > '/galaxy/server/database/objects/d/4/a/dataset_d4a718c9-fd7c-43c1-88a2-aca4f9032c54.dat'   && sed -e 's|/galaxy/server/database/objects/4/c/a/dataset_4cabed9f-e13a-49d5-9ebc-77f041a0e70c.dat|featureCounts_input1.bam|g' 'output.summary' > '/galaxy/server/database/objects/d/0/6/dataset_d06345b1-1ec9-4ef8-80c9-a4b9faecf3ae.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"hg38\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/hg38.len\"", "extended_parameters": "{\"R\": false, \"by_read_group\": false, \"exon_exon_junction_read_counting_enabled\": {\"__current_case__\": 1, \"count_exon_exon_junction_reads\": false}, \"frac_overlap\": \"0\", \"frac_overlap_feature\": \"0\", \"gff_feature_attribute\": \"gene_id\", \"gff_feature_type\": \"exon\", \"largest_overlap\": false, \"long_reads\": false, \"min_overlap\": \"1\", \"multifeatures\": {\"__current_case__\": 0, \"multifeat\": \"\"}, \"read_extension_3p\": \"0\", \"read_extension_5p\": \"0\", \"read_reduction\": \"\", \"summarization_level\": false}", "read_filtering_parameters": "{\"ignore_dup\": false, \"mapping_quality\": \"0\", \"primary\": false, \"splitonly\": \"\"}", "pe_parameters": "{\"exclude_chimerics\": true, \"fragment_counting_enabled\": {\"__current_case__\": 1, \"fragment_counting\": \"\"}, \"only_both_ends\": false}", "include_feature_length_file": "true", "format": "\"tabdel_full\"", "anno": "{\"__current_case__\": 2, \"anno_select\": \"history\", \"reference_gene_sets\": {\"values\": [{\"id\": 683, \"src\": \"hda\"}]}}", "strand_specificity": "\"0\""}, "inputs": {"reference_gene_sets": {"id": "f26d648bfb516894", "src": "hda", "uuid": "6e74f4dc-d5c5-4079-9b7c-f423b1f57b32"}, "alignment": {"id": "6cb92ef3705ca589", "src": "hda", "uuid": "4cabed9f-e13a-49d5-9ebc-77f041a0e70c"}}, "outputs": {"output_feature_lengths": {"id": "f82a2fb0b42c773f", "src": "hda", "uuid": "d4a718c9-fd7c-43c1-88a2-aca4f9032c54"}, "output_summary": {"id": "903923536b793463", "src": "hda", "uuid": "d06345b1-1ec9-4ef8-80c9-a4b9faecf3ae"}, "output_full": {"id": "830ca42193b8acb1", "src": "hda", "uuid": "ab80581a-2019-4d0d-995e-3e27997225d7"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ <|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n\t  v2.0.1\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                           o dataset_4cabed9f-e13a-49d5-9ebc-77f041a0e7 ... ||\n||                                                                            ||\n||             Output file : output                                           ||\n||                 Summary : output.summary                                   ||\n||              Annotation : dataset_6e74f4dc-d5c5-4079-9b7c-f423b1f57b32 ... ||\n||      Dir for temp files : ./                                               ||\n||                                                                            ||\n||                 Threads : 8                                                ||\n||                   Level : meta-feature level                               ||\n||              Paired-end : no                                               ||\n||      Multimapping reads : not counted                                      ||\n|| Multi-overlapping reads : not counted                                      ||\n||   Min overlapping bases : 1                                                ||\n||                                                                            ||\n\\\\============================================================================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file dataset_6e74f4dc-d5c5-4079-9b7c-f423b1f57b32.dat ...  ||\n||    Features : 680                                                          ||\n||    Meta-features : 2                                                       ||\n||    Chromosomes/contigs : 1                                                 ||\n||                                                                            ||\n|| Process BAM file dataset_4cabed9f-e13a-49d5-9ebc-77f041a0e70c.dat...       ||\n||    Single-end reads are included.                                          ||\n||    Total alignments : 6236                                                 ||\n||    Successfully assigned alignments : 158 (2.5%)                           ||\n||    Running time : 0.00 minutes                                             ||\n||                                                                            ||\n|| Write the final count table.                                               ||\n|| Write the read assignment summary.                                         ||\n||                                                                            ||\n|| Summary of counting results can be found in file \"output.summary\"          ||\n||                                                                            ||\n\\\\============================================================================//\n\n", "job_stdout": "", "job_stderr": "", "stderr": "\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ <|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n\t  v2.0.1\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                           o dataset_4cabed9f-e13a-49d5-9ebc-77f041a0e7 ... ||\n||                                                                            ||\n||             Output file : output                                           ||\n||                 Summary : output.summary                                   ||\n||              Annotation : dataset_6e74f4dc-d5c5-4079-9b7c-f423b1f57b32 ... ||\n||      Dir for temp files : ./                                               ||\n||                                                                            ||\n||                 Threads : 8                                                ||\n||                   Level : meta-feature level                               ||\n||              Paired-end : no                                               ||\n||      Multimapping reads : not counted                                      ||\n|| Multi-overlapping reads : not counted                                      ||\n||   Min overlapping bases : 1                                                ||\n||                                                                            ||\n\\\\============================================================================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file dataset_6e74f4dc-d5c5-4079-9b7c-f423b1f57b32.dat ...  ||\n||    Features : 680                                                          ||\n||    Meta-features : 2                                                       ||\n||    Chromosomes/contigs : 1                                                 ||\n||                                                                            ||\n|| Process BAM file dataset_4cabed9f-e13a-49d5-9ebc-77f041a0e70c.dat...       ||\n||    Single-end reads are included.                                          ||\n||    Total alignments : 6236                                                 ||\n||    Successfully assigned alignments : 158 (2.5%)                           ||\n||    Running time : 0.00 minutes                                             ||\n||                                                                            ||\n|| Write the final count table.                                               ||\n|| Write the read assignment summary.                                         ||\n||                                                                            ||\n|| Summary of counting results can be found in file \"output.summary\"          ||\n||                                                                            ||\n\\\\============================================================================//\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:23:39", "plugin": "core", "name": "end_epoch", "raw_value": "1684913019.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:23:38", "plugin": "core", "name": "start_epoch", "raw_value": "1684913018.0000000"}, {"title": "Memory Allocated (MB)", "value": "19327", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "19327.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/2.0.1+galaxy2-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts", "tool_version": "2.0.1+galaxy2", "test_index": 2, "time_seconds": 33.7619309425354, "inputs": {"alignment": {"src": "hda", "id": "43963de576cee891"}, "anno|reference_gene_sets": {"src": "hda", "id": "414277f3ece3c335"}, "anno|anno_select": "history", "format": "tabdel_short", "include_feature_length_file": true, "extended_parameters|exon_exon_junction_read_counting_enabled|count_exon_exon_junction_reads": true}, "job": {"model_class": "Job", "id": "009f3df464c76c4c", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:24:19.263383", "create_time": "2023-05-24T07:24:06.051835", "galaxy_version": "23.0", "command_version": "featureCounts v2.0.1", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/2.0.1+galaxy2", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-cqvvb", "command_line": "export FC_PATH=$(command -v featureCounts | sed 's@/bin/featureCounts$@@') &&  featureCounts  -a '/galaxy/server/database/objects/a/f/a/dataset_afa4c1cc-a0bb-484b-a225-c392193cdc68.dat' -F \"GTF\"  -o \"output\" -T ${GALAXY_SLOTS:-2}  -s  0  -Q  0     -t 'exon' -g 'gene_id'        -J       --minOverlap  1 --fracOverlap 0 --fracOverlapFeature 0       -C  '/galaxy/server/database/objects/f/8/f/dataset_f8fd531b-858b-4bb3-a61c-51ab5fb4f68a.dat'  && grep -v \"^#\" \"output\" | sed -e 's|/galaxy/server/database/objects/f/8/f/dataset_f8fd531b-858b-4bb3-a61c-51ab5fb4f68a.dat|featureCounts_input1.bam|g' > body.txt && cut -f 1,7 body.txt > '/galaxy/server/database/objects/1/d/9/dataset_1d9a77fd-6439-4440-865c-5b64a38196c5.dat'  && cut -f 1,6 body.txt > '/galaxy/server/database/objects/2/d/f/dataset_2df1d0e9-9509-4624-b6af-a754b15db635.dat'  && sed -e 's|/galaxy/server/database/objects/f/8/f/dataset_f8fd531b-858b-4bb3-a61c-51ab5fb4f68a.dat|featureCounts_input1.bam|g' 'output.jcounts' > '/galaxy/server/database/objects/d/3/a/dataset_d3a9dbb6-8cc8-4859-8611-bce834ef0d60.dat'  && sed -e 's|/galaxy/server/database/objects/f/8/f/dataset_f8fd531b-858b-4bb3-a61c-51ab5fb4f68a.dat|featureCounts_input1.bam|g' 'output.summary' > '/galaxy/server/database/objects/a/3/e/dataset_a3ef6e87-841a-4cc2-9147-f44566631811.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"hg38\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/hg38.len\"", "extended_parameters": "{\"R\": false, \"by_read_group\": false, \"exon_exon_junction_read_counting_enabled\": {\"__current_case__\": 0, \"count_exon_exon_junction_reads\": true, \"genome\": null}, \"frac_overlap\": \"0\", \"frac_overlap_feature\": \"0\", \"gff_feature_attribute\": \"gene_id\", \"gff_feature_type\": \"exon\", \"largest_overlap\": false, \"long_reads\": false, \"min_overlap\": \"1\", \"multifeatures\": {\"__current_case__\": 0, \"multifeat\": \"\"}, \"read_extension_3p\": \"0\", \"read_extension_5p\": \"0\", \"read_reduction\": \"\", \"summarization_level\": false}", "read_filtering_parameters": "{\"ignore_dup\": false, \"mapping_quality\": \"0\", \"primary\": false, \"splitonly\": \"\"}", "pe_parameters": "{\"exclude_chimerics\": true, \"fragment_counting_enabled\": {\"__current_case__\": 1, \"fragment_counting\": \"\"}, \"only_both_ends\": false}", "include_feature_length_file": "true", "format": "\"tabdel_short\"", "anno": "{\"__current_case__\": 2, \"anno_select\": \"history\", \"reference_gene_sets\": {\"values\": [{\"id\": 691, \"src\": \"hda\"}]}}", "strand_specificity": "\"0\""}, "inputs": {"reference_gene_sets": {"id": "414277f3ece3c335", "src": "hda", "uuid": "afa4c1cc-a0bb-484b-a225-c392193cdc68"}, "alignment": {"id": "43963de576cee891", "src": "hda", "uuid": "f8fd531b-858b-4bb3-a61c-51ab5fb4f68a"}}, "outputs": {"output_jcounts": {"id": "6740629b76b5bff0", "src": "hda", "uuid": "d3a9dbb6-8cc8-4859-8611-bce834ef0d60"}, "output_feature_lengths": {"id": "143c1ed69f8d1f22", "src": "hda", "uuid": "2df1d0e9-9509-4624-b6af-a754b15db635"}, "output_summary": {"id": "08e832e91f86a090", "src": "hda", "uuid": "a3ef6e87-841a-4cc2-9147-f44566631811"}, "output_short": {"id": "8ccb09cb7f7af298", "src": "hda", "uuid": "1d9a77fd-6439-4440-865c-5b64a38196c5"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ <|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n\t  v2.0.1\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                           o dataset_f8fd531b-858b-4bb3-a61c-51ab5fb4f6 ... ||\n||                                                                            ||\n||             Output file : output                                           ||\n||                 Summary : output.summary                                   ||\n||              Annotation : dataset_afa4c1cc-a0bb-484b-a225-c392193cdc68 ... ||\n||      Dir for temp files : ./                                               ||\n||       Junction Counting : <output_file>.jcounts                            ||\n||                                                                            ||\n||                 Threads : 8                                                ||\n||                   Level : meta-feature level                               ||\n||              Paired-end : no                                               ||\n||      Multimapping reads : not counted                                      ||\n|| Multi-overlapping reads : not counted                                      ||\n||   Min overlapping bases : 1                                                ||\n||                                                                            ||\n\\\\============================================================================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file dataset_afa4c1cc-a0bb-484b-a225-c392193cdc68.dat ...  ||\n||    Features : 680                                                          ||\n||    Meta-features : 2                                                       ||\n||    Chromosomes/contigs : 1                                                 ||\n||                                                                            ||\n|| Process BAM file dataset_f8fd531b-858b-4bb3-a61c-51ab5fb4f68a.dat...       ||\n||    Single-end reads are included.                                          ||\n||    Total alignments : 6236                                                 ||\n||    Successfully assigned alignments : 158 (2.5%)                           ||\n||    Running time : 0.00 minutes                                             ||\n||                                                                            ||\n|| Write the final count table.                                               ||\n|| Write the junction count table.                                            ||\n|| Write the read assignment summary.                                         ||\n||                                                                            ||\n|| Summary of counting results can be found in file \"output.summary\"          ||\n||                                                                            ||\n\\\\============================================================================//\n\n", "job_stdout": "", "job_stderr": "", "stderr": "\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ <|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n\t  v2.0.1\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                           o dataset_f8fd531b-858b-4bb3-a61c-51ab5fb4f6 ... ||\n||                                                                            ||\n||             Output file : output                                           ||\n||                 Summary : output.summary                                   ||\n||              Annotation : dataset_afa4c1cc-a0bb-484b-a225-c392193cdc68 ... ||\n||      Dir for temp files : ./                                               ||\n||       Junction Counting : <output_file>.jcounts                            ||\n||                                                                            ||\n||                 Threads : 8                                                ||\n||                   Level : meta-feature level                               ||\n||              Paired-end : no                                               ||\n||      Multimapping reads : not counted                                      ||\n|| Multi-overlapping reads : not counted                                      ||\n||   Min overlapping bases : 1                                                ||\n||                                                                            ||\n\\\\============================================================================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file dataset_afa4c1cc-a0bb-484b-a225-c392193cdc68.dat ...  ||\n||    Features : 680                                                          ||\n||    Meta-features : 2                                                       ||\n||    Chromosomes/contigs : 1                                                 ||\n||                                                                            ||\n|| Process BAM file dataset_f8fd531b-858b-4bb3-a61c-51ab5fb4f68a.dat...       ||\n||    Single-end reads are included.                                          ||\n||    Total alignments : 6236                                                 ||\n||    Successfully assigned alignments : 158 (2.5%)                           ||\n||    Running time : 0.00 minutes                                             ||\n||                                                                            ||\n|| Write the final count table.                                               ||\n|| Write the junction count table.                                            ||\n|| Write the read assignment summary.                                         ||\n||                                                                            ||\n|| Summary of counting results can be found in file \"output.summary\"          ||\n||                                                                            ||\n\\\\============================================================================//\n\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:24:08", "plugin": "core", "name": "end_epoch", "raw_value": "1684913048.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:24:08", "plugin": "core", "name": "start_epoch", "raw_value": "1684913048.0000000"}, {"title": "Memory Allocated (MB)", "value": "19327", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "19327.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/2.0.1+galaxy2-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts", "tool_version": "2.0.1+galaxy2", "test_index": 3, "time_seconds": 19.482357025146484, "inputs": {"alignment": {"src": "hda", "id": "e6324e658e1eb584"}, "anno|anno_select": "builtin", "format": "tabdel_short", "extended_parameters|R": true}, "execution_problem": "parameter 'bgenome': an invalid option (None) was selected, please verify", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/2.0.1+galaxy2-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts", "tool_version": "2.0.1+galaxy2", "test_index": 4, "time_seconds": 17.864389657974243, "inputs": {"alignment": {"src": "hda", "id": "b18d47ceef791845"}, "anno|anno_select": "cached", "format": "tabdel_medium", "include_feature_length_file": true}, "execution_problem": "parameter 'reference_gene_sets_builtin': an invalid option (None) was selected, please verify", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/2.0.1+galaxy2-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts", "tool_version": "2.0.1+galaxy2", "test_index": 5, "time_seconds": 31.902944326400757, "inputs": {"alignment": {"src": "hda", "id": "eb3fe14e56ac5e82"}, "anno|reference_gene_sets": {"src": "hda", "id": "0e12e52490734fca"}, "anno|anno_select": "history", "extended_parameters|R": true}, "job": {"model_class": "Job", "id": "2fd56b89a8279bb4", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:24:52.408739", "create_time": "2023-05-24T07:24:39.891591", "galaxy_version": "23.0", "command_version": "featureCounts v2.0.1", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/featurecounts/featurecounts/2.0.1+galaxy2", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-d2jf7", "command_line": "export FC_PATH=$(command -v featureCounts | sed 's@/bin/featureCounts$@@') &&  featureCounts  -a '/galaxy/server/database/objects/c/3/4/dataset_c3497438-6ed2-4d80-a648-645b0901a246.dat' -F \"GTF\"  -o \"output\" -T ${GALAXY_SLOTS:-2}  -s  0  -Q  0     -t 'exon' -g 'gene_id'               --minOverlap  1 --fracOverlap 0 --fracOverlapFeature 0  -R BAM      -C  '/galaxy/server/database/objects/0/1/2/dataset_0128728b-9a5c-43cc-bb4c-94fee6d9d848.dat'  && grep -v \"^#\" \"output\" | sed -e 's|/galaxy/server/database/objects/0/1/2/dataset_0128728b-9a5c-43cc-bb4c-94fee6d9d848.dat|subset.sorted.bam|g' > body.txt && cut -f 1,7 body.txt > '/galaxy/server/database/objects/7/6/a/dataset_76a230a5-744a-40a7-9bc2-c083758c49f1.dat'    && samtools sort --no-PG -o '/galaxy/server/database/objects/d/c/e/dataset_dce8f123-1fe1-44d5-9200-fc254eae973b.dat' -@ ${GALAXY_SLOTS:-2} -T \"${TMPDIR:-.}\" *.featureCounts.bam && sed -e 's|/galaxy/server/database/objects/0/1/2/dataset_0128728b-9a5c-43cc-bb4c-94fee6d9d848.dat|subset.sorted.bam|g' 'output.summary' > '/galaxy/server/database/objects/d/d/0/dataset_dd05bd01-ab41-4d56-87a4-97136daf3e40.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "extended_parameters": "{\"R\": true, \"by_read_group\": false, \"exon_exon_junction_read_counting_enabled\": {\"__current_case__\": 1, \"count_exon_exon_junction_reads\": false}, \"frac_overlap\": \"0\", \"frac_overlap_feature\": \"0\", \"gff_feature_attribute\": \"gene_id\", \"gff_feature_type\": \"exon\", \"largest_overlap\": false, \"long_reads\": false, \"min_overlap\": \"1\", \"multifeatures\": {\"__current_case__\": 0, \"multifeat\": \"\"}, \"read_extension_3p\": \"0\", \"read_extension_5p\": \"0\", \"read_reduction\": \"\", \"summarization_level\": false}", "read_filtering_parameters": "{\"ignore_dup\": false, \"mapping_quality\": \"0\", \"primary\": false, \"splitonly\": \"\"}", "pe_parameters": "{\"exclude_chimerics\": true, \"fragment_counting_enabled\": {\"__current_case__\": 1, \"fragment_counting\": \"\"}, \"only_both_ends\": false}", "include_feature_length_file": "false", "format": "\"tabdel_short\"", "anno": "{\"__current_case__\": 2, \"anno_select\": \"history\", \"reference_gene_sets\": {\"values\": [{\"id\": 699, \"src\": \"hda\"}]}}", "strand_specificity": "\"0\""}, "inputs": {"reference_gene_sets": {"id": "0e12e52490734fca", "src": "hda", "uuid": "c3497438-6ed2-4d80-a648-645b0901a246"}, "alignment": {"id": "eb3fe14e56ac5e82", "src": "hda", "uuid": "0128728b-9a5c-43cc-bb4c-94fee6d9d848"}}, "outputs": {"output_summary": {"id": "a352dd75cc34e64a", "src": "hda", "uuid": "dd05bd01-ab41-4d56-87a4-97136daf3e40"}, "output_short": {"id": "ee05e0974b126640", "src": "hda", "uuid": "76a230a5-744a-40a7-9bc2-c083758c49f1"}, "output_bam": {"id": "3bd2570b155b5a5a", "src": "hda", "uuid": "dce8f123-1fe1-44d5-9200-fc254eae973b"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ <|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n\t  v2.0.1\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                           o dataset_0128728b-9a5c-43cc-bb4c-94fee6d9d8 ... ||\n||                                                                            ||\n||             Output file : output                                           ||\n||                 Summary : output.summary                                   ||\n||              Annotation : dataset_c3497438-6ed2-4d80-a648-645b0901a246 ... ||\n||      Dir for temp files : ./                                               ||\n||      Assignment details : <input_file>.featureCounts.bam                   ||\n||                      (Note that files are saved to the output directory)   ||\n||                                                                            ||\n||                                                                            ||\n||                 Threads : 8                                                ||\n||                   Level : meta-feature level                               ||\n||              Paired-end : no                                               ||\n||      Multimapping reads : not counted                                      ||\n|| Multi-overlapping reads : not counted                                      ||\n||   Min overlapping bases : 1                                                ||\n||                                                                            ||\n\\\\============================================================================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file dataset_c3497438-6ed2-4d80-a648-645b0901a246.dat ...  ||\n||    Features : 1398                                                         ||\n||    Meta-features : 1389                                                    ||\n||    Chromosomes/contigs : 32                                                ||\n||                                                                            ||\n|| Process BAM file dataset_0128728b-9a5c-43cc-bb4c-94fee6d9d848.dat...       ||\n||    Single-end reads are included.                                          ||\n||    Total alignments : 8936                                                 ||\n||    Successfully assigned alignments : 14 (0.2%)                            ||\n||    Running time : 0.00 minutes                                             ||\n||                                                                            ||\n|| Write the final count table.                                               ||\n|| Write the read assignment summary.                                         ||\n||                                                                            ||\n|| Summary of counting results can be found in file \"output.summary\"          ||\n||                                                                            ||\n\\\\============================================================================//\n\n[bam_sort_core] merging from 0 files and 8 in-memory blocks...\n", "job_stdout": "", "job_stderr": "", "stderr": "\n        ==========     _____ _    _ ____  _____  ______          _____  \n        =====         / ____| |  | |  _ \\|  __ \\|  ____|   /\\   |  __ \\ \n          =====      | (___ | |  | | |_) | |__) | |__     /  \\  | |  | |\n            ====      \\___ \\| |  | |  _ <|  _  /|  __|   / /\\ \\ | |  | |\n              ====    ____) | |__| | |_) | | \\ \\| |____ / ____ \\| |__| |\n        ==========   |_____/ \\____/|____/|_|  \\_\\______/_/    \\_\\_____/\n\t  v2.0.1\n\n//========================== featureCounts setting ===========================\\\\\n||                                                                            ||\n||             Input files : 1 BAM file                                       ||\n||                           o dataset_0128728b-9a5c-43cc-bb4c-94fee6d9d8 ... ||\n||                                                                            ||\n||             Output file : output                                           ||\n||                 Summary : output.summary                                   ||\n||              Annotation : dataset_c3497438-6ed2-4d80-a648-645b0901a246 ... ||\n||      Dir for temp files : ./                                               ||\n||      Assignment details : <input_file>.featureCounts.bam                   ||\n||                      (Note that files are saved to the output directory)   ||\n||                                                                            ||\n||                                                                            ||\n||                 Threads : 8                                                ||\n||                   Level : meta-feature level                               ||\n||              Paired-end : no                                               ||\n||      Multimapping reads : not counted                                      ||\n|| Multi-overlapping reads : not counted                                      ||\n||   Min overlapping bases : 1                                                ||\n||                                                                            ||\n\\\\============================================================================//\n\n//================================= Running ==================================\\\\\n||                                                                            ||\n|| Load annotation file dataset_c3497438-6ed2-4d80-a648-645b0901a246.dat ...  ||\n||    Features : 1398                                                         ||\n||    Meta-features : 1389                                                    ||\n||    Chromosomes/contigs : 32                                                ||\n||                                                                            ||\n|| Process BAM file dataset_0128728b-9a5c-43cc-bb4c-94fee6d9d848.dat...       ||\n||    Single-end reads are included.                                          ||\n||    Total alignments : 8936                                                 ||\n||    Successfully assigned alignments : 14 (0.2%)                            ||\n||    Running time : 0.00 minutes                                             ||\n||                                                                            ||\n|| Write the final count table.                                               ||\n|| Write the read assignment summary.                                         ||\n||                                                                            ||\n|| Summary of counting results can be found in file \"output.summary\"          ||\n||                                                                            ||\n\\\\============================================================================//\n\n[bam_sort_core] merging from 0 files and 8 in-memory blocks...\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:24:42", "plugin": "core", "name": "end_epoch", "raw_value": "1684913082.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:24:42", "plugin": "core", "name": "start_epoch", "raw_value": "1684913082.0000000"}, {"title": "Memory Allocated (MB)", "value": "19327", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "19327.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7", "test_index": 0, "time_seconds": 59.01676297187805, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "086d015d35685797"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "2a34db0be36852ab"}, "library|input_2": {"src": "hda", "id": "4068e402fbee5784"}, "library|type": "paired", "adv|reporting_options|reporting_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "32cd131c866fc29f", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:08:05.558087", "create_time": "2023-05-24T07:07:30.492184", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-dzwjt", "command_line": "ln -s '/galaxy/server/database/objects/e/4/f/dataset_e4fd6516-b44f-443f-8b9b-2da1f5c76d67.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/1/f/4/dataset_1f49adab-bb7f-468e-ad0e-76f9eb654731.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/8/8/5/dataset_885b2d13-b2c8-47ad-b7f3-138ce7c70a39.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'                                | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/9/8/0/dataset_980da099-59de-413e-a568-b369bab27377.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 1, \"max_primary\": \"\", \"reporting_options_selector\": \"advanced\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 514, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 515, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 513, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "086d015d35685797", "src": "hda", "uuid": "e4fd6516-b44f-443f-8b9b-2da1f5c76d67"}, "input_1": {"id": "2a34db0be36852ab", "src": "hda", "uuid": "1f49adab-bb7f-468e-ad0e-76f9eb654731"}, "input_2": {"id": "4068e402fbee5784", "src": "hda", "uuid": "885b2d13-b2c8-47ad-b7f3-138ce7c70a39"}}, "outputs": {"output_alignments": {"id": "c290547d99192cb1", "src": "hda", "uuid": "980da099-59de-413e-a568-b369bab27377"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Calculating Z arrays for bucket 4\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 2\n  bucket 3: 10%\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  Calculating Z arrays for bucket 1\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 1:\n  bucket 3: 30%\n  Entering block accumulator loop for bucket 2:\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 40%\n  bucket 2: 10%\n  bucket 1: 10%\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 7: 30%\n  bucket 3: 50%\n  bucket 1: 20%\n  bucket 4: 30%\n  bucket 7: 40%\n  bucket 2: 20%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 4: 40%\n  bucket 7: 50%\n  bucket 3: 60%\n  bucket 6: 30%\n  bucket 2: 30%\n  bucket 5: 30%\n  bucket 4: 50%\n  bucket 7: 60%\n  bucket 3: 70%\n  bucket 5: 40%\n  bucket 2: 40%\n  bucket 1: 30%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 7: 70%\n  bucket 5: 50%\n  bucket 2: 50%\n  bucket 4: 70%\n  bucket 6: 40%\n  bucket 7: 80%\n  bucket 5: 60%\n  bucket 3: 90%\n  bucket 1: 40%\n  bucket 4: 80%\n  bucket 2: 60%\n  bucket 5: 70%\n  bucket 3: 100%\n  bucket 1: 50%\n  bucket 6: 50%\n  bucket 7: 90%\n  bucket 4: 90%\n  bucket 5: 80%\n  Sorting block of length 444 for bucket 3\n  bucket 7: 100%\n  bucket 6: 60%\n  bucket 2: 70%\n  (Using difference cover)\n  Sorting block of length 739 for bucket 7\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 4: 100%\n  bucket 5: 100%\n  bucket 2: 80%\n  (Using difference cover)\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 1: 60%\n  bucket 2: 90%\n  bucket 6: 80%\n  bucket 1: 70%\n  bucket 2: 100%\n  bucket 1: 80%\n  bucket 6: 90%\n  Sorting block of length 845 for bucket 2\n  bucket 1: 90%\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\nReturning block of 846 for bucket 2\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Calculating Z arrays for bucket 4\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 2\n  bucket 3: 10%\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 20%\n  Calculating Z arrays for bucket 1\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 1:\n  bucket 3: 30%\n  Entering block accumulator loop for bucket 2:\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 5:\n  bucket 3: 40%\n  bucket 2: 10%\n  bucket 1: 10%\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 7: 30%\n  bucket 3: 50%\n  bucket 1: 20%\n  bucket 4: 30%\n  bucket 7: 40%\n  bucket 2: 20%\n  bucket 6: 20%\n  bucket 5: 20%\n  bucket 4: 40%\n  bucket 7: 50%\n  bucket 3: 60%\n  bucket 6: 30%\n  bucket 2: 30%\n  bucket 5: 30%\n  bucket 4: 50%\n  bucket 7: 60%\n  bucket 3: 70%\n  bucket 5: 40%\n  bucket 2: 40%\n  bucket 1: 30%\n  bucket 4: 60%\n  bucket 3: 80%\n  bucket 7: 70%\n  bucket 5: 50%\n  bucket 2: 50%\n  bucket 4: 70%\n  bucket 6: 40%\n  bucket 7: 80%\n  bucket 5: 60%\n  bucket 3: 90%\n  bucket 1: 40%\n  bucket 4: 80%\n  bucket 2: 60%\n  bucket 5: 70%\n  bucket 3: 100%\n  bucket 1: 50%\n  bucket 6: 50%\n  bucket 7: 90%\n  bucket 4: 90%\n  bucket 5: 80%\n  Sorting block of length 444 for bucket 3\n  bucket 7: 100%\n  bucket 6: 60%\n  bucket 2: 70%\n  (Using difference cover)\n  Sorting block of length 739 for bucket 7\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 4: 100%\n  bucket 5: 100%\n  bucket 2: 80%\n  (Using difference cover)\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 1: 60%\n  bucket 2: 90%\n  bucket 6: 80%\n  bucket 1: 70%\n  bucket 2: 100%\n  bucket 1: 80%\n  bucket 6: 90%\n  Sorting block of length 845 for bucket 2\n  bucket 1: 90%\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 1: 100%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\nReturning block of 846 for bucket 2\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:07:52", "plugin": "core", "name": "end_epoch", "raw_value": "1684912072.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:07:52", "plugin": "core", "name": "start_epoch", "raw_value": "1684912072.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_yiyrs_tk.sam v. /tmp/history_bam_converted_to_sam_536gsgen.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/401/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/9/8/0/dataset_980da099-59de-413e-a568-b369bab27377.dat\n phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n phiX174_36_572_1:0:0_0:0:0_8\t83\tphiX174\t503\t60\t70M\t=\t36\t-537\tGAGTAACAAAGTTTGGATTGCTACTGACCGCTCTCGTGCTCGTCGCTGCGTTGAGGCTTGCGTTTATGGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7", "test_index": 1, "time_seconds": 57.105633020401, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "086d015d35685797"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "2a34db0be36852ab"}, "library|input_2": {"src": "hda", "id": "4068e402fbee5784"}, "library|type": "paired"}, "job": {"model_class": "Job", "id": "f2a9c8d576207b2e", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:08:09.366701", "create_time": "2023-05-24T07:07:41.604114", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-n5r6h", "command_line": "ln -s '/galaxy/server/database/objects/e/4/f/dataset_e4fd6516-b44f-443f-8b9b-2da1f5c76d67.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/1/f/4/dataset_1f49adab-bb7f-468e-ad0e-76f9eb654731.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/8/8/5/dataset_885b2d13-b2c8-47ad-b7f3-138ce7c70a39.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'                                | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/0/2/7/dataset_02714fd6-d6fb-42f6-8982-9a60eb1ce38f.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 514, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 515, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 513, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "086d015d35685797", "src": "hda", "uuid": "e4fd6516-b44f-443f-8b9b-2da1f5c76d67"}, "input_1": {"id": "2a34db0be36852ab", "src": "hda", "uuid": "1f49adab-bb7f-468e-ad0e-76f9eb654731"}, "input_2": {"id": "4068e402fbee5784", "src": "hda", "uuid": "885b2d13-b2c8-47ad-b7f3-138ce7c70a39"}}, "outputs": {"output_alignments": {"id": "d72f5ec6b6291cc4", "src": "hda", "uuid": "02714fd6-d6fb-42f6-8982-9a60eb1ce38f"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\n  Calculating Z arrays for bucket 2\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 6\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 6:\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  Calculating Z arrays for bucket 4\n  bucket 3: 20%\n  Calculating Z arrays for bucket 7\n  bucket 6: 10%\n  bucket 3: 30%\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 40%\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 3: 50%\n  Calculating Z arrays for bucket 1\n  bucket 7: 20%\n  bucket 3: 60%\n  bucket 6: 30%\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 1:\n  bucket 6: 40%\n  bucket 4: 10%\n  bucket 3: 70%\n  bucket 7: 40%\n  bucket 1: 10%\n  bucket 6: 50%\n  bucket 3: 80%\n  bucket 7: 50%\n  bucket 4: 20%\n  bucket 1: 20%\n  bucket 3: 90%\n  bucket 7: 60%\n  bucket 6: 60%\n  bucket 1: 30%\n  bucket 3: 100%\n  bucket 7: 70%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 6: 70%\n  Sorting block of length 444 for bucket 3\n  bucket 7: 80%\n  (Using difference cover)\n  bucket 4: 30%\n  bucket 7: 90%\n  Calculating Z arrays for bucket 5\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 6: 80%\n  bucket 1: 60%\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 6: 90%\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 80%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 6: 100%\n  bucket 5: 10%\n  Sorting block of length 517 for bucket 6\n  bucket 1: 100%\n  (Using difference cover)\n  bucket 4: 70%\n  Sorting block of length 940 for bucket 1\n  bucket 5: 20%\n  (Using difference cover)\n  bucket 2: 30%\n  bucket 4: 80%\n  bucket 5: 30%\n  bucket 2: 40%\n  bucket 4: 90%\n  bucket 5: 40%\n  bucket 2: 50%\n  bucket 4: 100%\n  bucket 5: 50%\n  Sorting block of length 972 for bucket 4\n  bucket 2: 60%\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 2: 70%\n  bucket 5: 70%\n  bucket 2: 80%\n  bucket 5: 80%\n  bucket 2: 90%\n  bucket 5: 90%\n  bucket 2: 100%\n  Sorting block of length 845 for bucket 2\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\n  Calculating Z arrays for bucket 2\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 6\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 6:\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  Calculating Z arrays for bucket 4\n  bucket 3: 20%\n  Calculating Z arrays for bucket 7\n  bucket 6: 10%\n  bucket 3: 30%\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 40%\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 3: 50%\n  Calculating Z arrays for bucket 1\n  bucket 7: 20%\n  bucket 3: 60%\n  bucket 6: 30%\n  bucket 7: 30%\n  Entering block accumulator loop for bucket 1:\n  bucket 6: 40%\n  bucket 4: 10%\n  bucket 3: 70%\n  bucket 7: 40%\n  bucket 1: 10%\n  bucket 6: 50%\n  bucket 3: 80%\n  bucket 7: 50%\n  bucket 4: 20%\n  bucket 1: 20%\n  bucket 3: 90%\n  bucket 7: 60%\n  bucket 6: 60%\n  bucket 1: 30%\n  bucket 3: 100%\n  bucket 7: 70%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 6: 70%\n  Sorting block of length 444 for bucket 3\n  bucket 7: 80%\n  (Using difference cover)\n  bucket 4: 30%\n  bucket 7: 90%\n  Calculating Z arrays for bucket 5\n  bucket 1: 50%\n  bucket 4: 40%\n  bucket 6: 80%\n  bucket 1: 60%\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 4: 50%\n  bucket 1: 70%\n  bucket 6: 90%\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 80%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 6: 100%\n  bucket 5: 10%\n  Sorting block of length 517 for bucket 6\n  bucket 1: 100%\n  (Using difference cover)\n  bucket 4: 70%\n  Sorting block of length 940 for bucket 1\n  bucket 5: 20%\n  (Using difference cover)\n  bucket 2: 30%\n  bucket 4: 80%\n  bucket 5: 30%\n  bucket 2: 40%\n  bucket 4: 90%\n  bucket 5: 40%\n  bucket 2: 50%\n  bucket 4: 100%\n  bucket 5: 50%\n  Sorting block of length 972 for bucket 4\n  bucket 2: 60%\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 2: 70%\n  bucket 5: 70%\n  bucket 2: 80%\n  bucket 5: 80%\n  bucket 2: 90%\n  bucket 5: 90%\n  bucket 2: 100%\n  Sorting block of length 845 for bucket 2\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:07:58", "plugin": "core", "name": "end_epoch", "raw_value": "1684912078.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:07:58", "plugin": "core", "name": "start_epoch", "raw_value": "1684912078.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_wdz62dxj.sam v. /tmp/history_bam_converted_to_sam_k3q66ng2.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/402/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/0/2/7/dataset_02714fd6-d6fb-42f6-8982-9a60eb1ce38f.dat\n phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n phiX174_36_572_1:0:0_0:0:0_8\t83\tphiX174\t503\t60\t70M\t=\t36\t-537\tGAGTAACAAAGTTTGGATTGCTACTGACCGCTCTCGTGCTCGTCGCTGCGTTGAGGCTTGCGTTTATGGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7-10", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7", "test_index": 10, "time_seconds": 24.106209754943848, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7-11", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7", "test_index": 11, "time_seconds": 48.09505581855774, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "2fd56b89a8279bb4"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "ede1f101f33fb4f5"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "b5a1bcb47cda3e10", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:11:40.208271", "create_time": "2023-05-24T07:11:11.859227", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-h7699", "command_line": "ln -s '/galaxy/server/database/objects/5/a/b/dataset_5aba2000-8d2e-4a0d-a090-d677cc3f1a4b.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/3/7/8/dataset_3785a159-a318-41c6-b4a2-5974fc555ac6.dat' input_f.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 <(seqtk seq -1 input_f.fastq) -2 <(seqtk seq -2 input_f.fastq)                                | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/0/e/4/dataset_0e44b1d6-1aef-4989-927b-6aa3fc4d0e30.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 553, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 556, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "2fd56b89a8279bb4", "src": "hda", "uuid": "5aba2000-8d2e-4a0d-a090-d677cc3f1a4b"}, "input_1": {"id": "ede1f101f33fb4f5", "src": "hda", "uuid": "3785a159-a318-41c6-b4a2-5974fc555ac6"}}, "outputs": {"output_alignments": {"id": "074abaf9a73fe3ab", "src": "hda", "uuid": "0e44b1d6-1aef-4989-927b-6aa3fc4d0e30"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  Calculating Z arrays for bucket 2\nGetting block 3 of 7\n  Entering block accumulator loop for bucket 2:\nGetting block 4 of 7\nGetting block 5 of 7\n  Calculating Z arrays for bucket 1\nGetting block 6 of 7\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  Reserving size (1010) for bucket 3\n  bucket 2: 10%\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 3\n  Reserving size (1010) for bucket 6\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 3:\n  Reserving size (1010) for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 4\n  bucket 3: 20%\n  Reserving size (1010) for bucket 5\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 5\n  bucket 2: 30%\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 7: 20%\n  bucket 2: 40%\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 50%\n  bucket 7: 30%\n  bucket 3: 40%\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 10%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 7: 40%\n  bucket 4: 20%\n  bucket 2: 70%\n  bucket 3: 60%\n  bucket 7: 50%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 3: 70%\n  bucket 5: 20%\n  bucket 1: 10%\n  bucket 6: 30%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 1: 20%\n  bucket 5: 30%\n  bucket 1: 30%\n  bucket 5: 40%\n  bucket 1: 40%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 6: 40%\n  bucket 3: 100%\n  bucket 2: 100%\n  bucket 6: 50%\n  Sorting block of length 444 for bucket 3\n  bucket 6: 60%\n  (Using difference cover)\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 6: 70%\n  bucket 7: 80%\n  bucket 4: 30%\n  bucket 6: 80%\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  bucket 6: 100%\n  (Using difference cover)\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 5: 50%\n  bucket 4: 90%\n  bucket 5: 60%\n  bucket 1: 50%\n  bucket 5: 70%\n  bucket 4: 100%\n  bucket 1: 60%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 5: 90%\n  bucket 1: 90%\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  bucket 1: 100%\n  (Using difference cover)\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  Calculating Z arrays for bucket 2\nGetting block 3 of 7\n  Entering block accumulator loop for bucket 2:\nGetting block 4 of 7\nGetting block 5 of 7\n  Calculating Z arrays for bucket 1\nGetting block 6 of 7\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  Reserving size (1010) for bucket 3\n  bucket 2: 10%\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 3\n  Reserving size (1010) for bucket 6\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 3:\n  Reserving size (1010) for bucket 4\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 4\n  bucket 3: 20%\n  Reserving size (1010) for bucket 5\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 5\n  bucket 2: 30%\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\n  bucket 7: 20%\n  bucket 2: 40%\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 50%\n  bucket 7: 30%\n  bucket 3: 40%\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 10%\n  bucket 2: 60%\n  bucket 3: 50%\n  bucket 7: 40%\n  bucket 4: 20%\n  bucket 2: 70%\n  bucket 3: 60%\n  bucket 7: 50%\n  bucket 5: 10%\n  bucket 6: 20%\n  bucket 3: 70%\n  bucket 5: 20%\n  bucket 1: 10%\n  bucket 6: 30%\n  bucket 3: 80%\n  bucket 2: 80%\n  bucket 1: 20%\n  bucket 5: 30%\n  bucket 1: 30%\n  bucket 5: 40%\n  bucket 1: 40%\n  bucket 2: 90%\n  bucket 3: 90%\n  bucket 6: 40%\n  bucket 3: 100%\n  bucket 2: 100%\n  bucket 6: 50%\n  Sorting block of length 444 for bucket 3\n  bucket 6: 60%\n  (Using difference cover)\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 6: 70%\n  bucket 7: 80%\n  bucket 4: 30%\n  bucket 6: 80%\n  bucket 7: 90%\n  bucket 6: 90%\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  bucket 6: 100%\n  (Using difference cover)\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 4: 40%\n  bucket 4: 50%\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 5: 50%\n  bucket 4: 90%\n  bucket 5: 60%\n  bucket 1: 50%\n  bucket 5: 70%\n  bucket 4: 100%\n  bucket 1: 60%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 1: 70%\n  bucket 1: 80%\n  bucket 5: 90%\n  bucket 1: 90%\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  bucket 1: 100%\n  (Using difference cover)\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:11:29", "plugin": "core", "name": "end_epoch", "raw_value": "1684912289.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:11:29", "plugin": "core", "name": "start_epoch", "raw_value": "1684912289.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_te4ff5p9.sam v. /tmp/history_bam_converted_to_sam_pwbg5esx.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome -1 /dev/fd/63 -2 /dev/fd/62\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/438/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/0/e/4/dataset_0e44b1d6-1aef-4989-927b-6aa3fc4d0e30.dat\n phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n phiX174_36_572_1:0:0_0:0:0_8\t83\tphiX174\t503\t60\t70M\t=\t36\t-537\tGAGTAACAAAGTTTGGATTGCTACTGACCGCTCTCGTGCTCGTCGCTGCGTTGAGGCTTGCGTTTATGGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7-12", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7", "test_index": 12, "time_seconds": 12.126770496368408, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7-13", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7", "test_index": 13, "time_seconds": 35.773279905319214, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "2fd56b89a8279bb4"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "e9642dd88f22f3e5"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "42f176f4899a0afe", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:11:44.358423", "create_time": "2023-05-24T07:11:29.165941", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-qgp5c", "command_line": "ln -s '/galaxy/server/database/objects/5/a/b/dataset_5aba2000-8d2e-4a0d-a090-d677cc3f1a4b.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/e/d/9/dataset_ed9b2cb1-abef-46a8-b89c-029651db78b9.dat' input_f.fastq.gz &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 <(seqtk seq -1 input_f.fastq.gz) -2 <(seqtk seq -2 input_f.fastq.gz)                                | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/9/5/5/dataset_95594940-e05e-41d5-ae0e-14c2288b3abd.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 557, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 556, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "2fd56b89a8279bb4", "src": "hda", "uuid": "5aba2000-8d2e-4a0d-a090-d677cc3f1a4b"}, "input_1": {"id": "e9642dd88f22f3e5", "src": "hda", "uuid": "ed9b2cb1-abef-46a8-b89c-029651db78b9"}}, "outputs": {"output_alignments": {"id": "b4dbb3ad3c8b395e", "src": "hda", "uuid": "95594940-e05e-41d5-ae0e-14c2288b3abd"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  Calculating Z arrays for bucket 2\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Calculating Z arrays for bucket 4\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 6\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 5\n  bucket 4: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  Calculating Z arrays for bucket 7\n  bucket 1: 10%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 40%\n  bucket 4: 20%\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 30%\n  bucket 7: 10%\n  bucket 5: 10%\n  bucket 3: 40%\n  bucket 1: 20%\n  bucket 2: 50%\n  bucket 5: 20%\n  bucket 3: 50%\n  bucket 1: 30%\n  bucket 7: 20%\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 7: 30%\n  bucket 6: 20%\n  bucket 1: 40%\n  bucket 3: 70%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 3: 80%\n  bucket 7: 40%\n  bucket 6: 40%\n  bucket 2: 60%\n  bucket 7: 50%\n  bucket 1: 50%\n  bucket 6: 50%\n  bucket 4: 40%\n  bucket 2: 70%\n  bucket 5: 40%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 1: 60%\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 7: 70%\n  bucket 5: 50%\n  bucket 6: 70%\n  bucket 4: 50%\n  bucket 2: 90%\n  bucket 3: 100%\n  bucket 7: 80%\n  bucket 1: 70%\n  Sorting block of length 444 for bucket 3\n  bucket 5: 60%\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 1: 80%\n  bucket 6: 80%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 5: 70%\n  Sorting block of length 845 for bucket 2\n  bucket 6: 90%\n  bucket 4: 70%\n  bucket 7: 90%\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 7: 100%\n  bucket 5: 80%\n  bucket 1: 100%\n  bucket 6: 100%\n  bucket 5: 90%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 5: 100%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  Sorting block of length 517 for bucket 6\n  Sorting block time: 00:00:00\n  bucket 4: 100%\n  (Using difference cover)\nReturning block of 445 for bucket 3\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  Calculating Z arrays for bucket 2\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Calculating Z arrays for bucket 4\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 6\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 5\n  bucket 4: 10%\n  bucket 2: 10%\n  bucket 3: 10%\n  Calculating Z arrays for bucket 7\n  bucket 1: 10%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 40%\n  bucket 4: 20%\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 30%\n  bucket 7: 10%\n  bucket 5: 10%\n  bucket 3: 40%\n  bucket 1: 20%\n  bucket 2: 50%\n  bucket 5: 20%\n  bucket 3: 50%\n  bucket 1: 30%\n  bucket 7: 20%\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 3: 60%\n  bucket 7: 30%\n  bucket 6: 20%\n  bucket 1: 40%\n  bucket 3: 70%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 3: 80%\n  bucket 7: 40%\n  bucket 6: 40%\n  bucket 2: 60%\n  bucket 7: 50%\n  bucket 1: 50%\n  bucket 6: 50%\n  bucket 4: 40%\n  bucket 2: 70%\n  bucket 5: 40%\n  bucket 6: 60%\n  bucket 7: 60%\n  bucket 1: 60%\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 7: 70%\n  bucket 5: 50%\n  bucket 6: 70%\n  bucket 4: 50%\n  bucket 2: 90%\n  bucket 3: 100%\n  bucket 7: 80%\n  bucket 1: 70%\n  Sorting block of length 444 for bucket 3\n  bucket 5: 60%\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 1: 80%\n  bucket 6: 80%\n  bucket 4: 60%\n  bucket 1: 90%\n  bucket 5: 70%\n  Sorting block of length 845 for bucket 2\n  bucket 6: 90%\n  bucket 4: 70%\n  bucket 7: 90%\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 7: 100%\n  bucket 5: 80%\n  bucket 1: 100%\n  bucket 6: 100%\n  bucket 5: 90%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 4: 90%\n  bucket 5: 100%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  Sorting block of length 517 for bucket 6\n  Sorting block time: 00:00:00\n  bucket 4: 100%\n  (Using difference cover)\nReturning block of 445 for bucket 3\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:11:33", "plugin": "core", "name": "end_epoch", "raw_value": "1684912293.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:11:33", "plugin": "core", "name": "start_epoch", "raw_value": "1684912293.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_6nttbt_s.sam v. /tmp/history_bam_converted_to_sam_t407mwd6.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome -1 /dev/fd/63 -2 /dev/fd/62\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/439/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/9/5/5/dataset_95594940-e05e-41d5-ae0e-14c2288b3abd.dat\n phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n phiX174_36_572_1:0:0_0:0:0_8\t83\tphiX174\t503\t60\t70M\t=\t36\t-537\tGAGTAACAAAGTTTGGATTGCTACTGACCGCTCTCGTGCTCGTCGCTGCGTTGAGGCTTGCGTTTATGGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7-14", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7", "test_index": 14, "time_seconds": 35.59572386741638, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "2b331a7140d117ae"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "37e4cd6abaecd008"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "aec7ac8e6edeeaae", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:12:15.574134", "create_time": "2023-05-24T07:12:02.123371", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-6ktdl", "command_line": "ln -s '/galaxy/server/database/objects/6/d/c/dataset_6dc92f2f-13fa-4957-8554-08d7d342b2a4.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/c/4/2/dataset_c42cf81d-ec88-43d9-a4fd-2794bc8e1112.dat' input_f.fasta &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f   -1 <(seqtk seq -1 input_f.fasta) -2 <(seqtk seq -2 input_f.fasta)                                | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/c/5/6/dataset_c5636f43-53c8-4dce-be94-256e9b4be119.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 561, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 562, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "2b331a7140d117ae", "src": "hda", "uuid": "6dc92f2f-13fa-4957-8554-08d7d342b2a4"}, "input_1": {"id": "37e4cd6abaecd008", "src": "hda", "uuid": "c42cf81d-ec88-43d9-a4fd-2794bc8e1112"}}, "outputs": {"output_alignments": {"id": "79e46319d588cb82", "src": "hda", "uuid": "c5636f43-53c8-4dce-be94-256e9b4be119"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 1\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  Entering block accumulator loop for bucket 1:\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  bucket 1: 10%\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 4\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 4:\nGetting block 5 of 7\n  Entering block accumulator loop for bucket 3:\n  Reserving size (1010) for bucket 5\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 1: 30%\n  Calculating Z arrays for bucket 5\n  bucket 2: 10%\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 5:\n  bucket 7: 10%\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 2: 30%\n  bucket 4: 10%\n  bucket 6: 10%\n  bucket 1: 70%\n  bucket 7: 20%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 7: 30%\n  bucket 1: 80%\n  bucket 3: 50%\n  bucket 5: 10%\n  bucket 7: 40%\n  bucket 2: 50%\n  bucket 1: 90%\n  bucket 6: 20%\n  bucket 4: 20%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 940 for bucket 1\n  bucket 7: 50%\n  bucket 5: 20%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 4: 30%\n  bucket 7: 60%\n  bucket 3: 80%\n  bucket 6: 30%\n  bucket 2: 80%\n  (Using difference cover)\n  bucket 5: 30%\n  bucket 7: 70%\n  bucket 4: 40%\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 6: 40%\n  bucket 7: 80%\n  bucket 4: 50%\n  bucket 3: 100%\n  bucket 2: 100%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 5: 40%\n  bucket 7: 90%\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 6: 50%\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 4: 70%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 4: 80%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 4: 90%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 4: 100%\n  bucket 5: 90%\n  Sorting block of length 972 for bucket 4\n  bucket 6: 100%\n  (Using difference cover)\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    3 (30.00%) aligned concordantly 0 times\n    7 (70.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        3 (50.00%) aligned 0 times\n        3 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n85.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    3 (30.00%) aligned concordantly 0 times\n    7 (70.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        3 (50.00%) aligned 0 times\n        3 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n85.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 1\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  Entering block accumulator loop for bucket 1:\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  bucket 1: 10%\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 4\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 4:\nGetting block 5 of 7\n  Entering block accumulator loop for bucket 3:\n  Reserving size (1010) for bucket 5\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 1: 30%\n  Calculating Z arrays for bucket 5\n  bucket 2: 10%\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 20%\n  bucket 2: 20%\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 5:\n  bucket 7: 10%\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 2: 30%\n  bucket 4: 10%\n  bucket 6: 10%\n  bucket 1: 70%\n  bucket 7: 20%\n  bucket 3: 40%\n  bucket 2: 40%\n  bucket 7: 30%\n  bucket 1: 80%\n  bucket 3: 50%\n  bucket 5: 10%\n  bucket 7: 40%\n  bucket 2: 50%\n  bucket 1: 90%\n  bucket 6: 20%\n  bucket 4: 20%\n  bucket 3: 60%\n  bucket 2: 60%\n  bucket 1: 100%\n  Sorting block of length 940 for bucket 1\n  bucket 7: 50%\n  bucket 5: 20%\n  bucket 3: 70%\n  bucket 2: 70%\n  bucket 4: 30%\n  bucket 7: 60%\n  bucket 3: 80%\n  bucket 6: 30%\n  bucket 2: 80%\n  (Using difference cover)\n  bucket 5: 30%\n  bucket 7: 70%\n  bucket 4: 40%\n  bucket 3: 90%\n  bucket 2: 90%\n  bucket 6: 40%\n  bucket 7: 80%\n  bucket 4: 50%\n  bucket 3: 100%\n  bucket 2: 100%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 5: 40%\n  bucket 7: 90%\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 6: 50%\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 5: 50%\n  bucket 6: 60%\n  bucket 4: 70%\n  bucket 5: 60%\n  bucket 6: 70%\n  bucket 4: 80%\n  bucket 5: 70%\n  bucket 6: 80%\n  bucket 4: 90%\n  bucket 5: 80%\n  bucket 6: 90%\n  bucket 4: 100%\n  bucket 5: 90%\n  Sorting block of length 972 for bucket 4\n  bucket 6: 100%\n  (Using difference cover)\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:12:05", "plugin": "core", "name": "end_epoch", "raw_value": "1684912325.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:12:05", "plugin": "core", "name": "start_epoch", "raw_value": "1684912325.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_8bhu751l.sam v. /tmp/history_bam_converted_to_sam_2016n1g0.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tCL:\"/usr/local/bin/../Cellar/hisat2/2.0.5/bin/hisat2-align-s --wrapper basic-0 -x genome -f -1 /dev/fd/63 -2 /dev/fd/62\"\tVN:2.0.5\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome -f -1 /dev/fd/63 -2 /dev/fd/62\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/444/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/c/5/6/dataset_c5636f43-53c8-4dce-be94-256e9b4be119.dat\n phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:-6\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-6\tYT:Z:CP\tNH:i:1\n phiX174_36_572_1:0:0_0:0:0_8\t83\tphiX174\t503\t60\t70M\t=\t36\t-537\tGAGTAACAAAGTTTGGATTGCTACTGACCGCTCTCGTGCTCGTCGCTGCGTTGAGGCTTGCGTTTATGGT\tIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-6\tYT:Z:CP\tNH:i:1\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7-15", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7", "test_index": 15, "time_seconds": 36.982126235961914, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "2b331a7140d117ae"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "4b82e03486c62e93"}, "library|rna_strandness": "R", "library|type": "single", "adv|spliced_options|novel_splicesite_outfile": true, "adv|spliced_options|spliced_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "d37482bb247203ba", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:12:20.996930", "create_time": "2023-05-24T07:12:06.717048", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-pt2vs", "command_line": "ln -s '/galaxy/server/database/objects/6/d/c/dataset_6dc92f2f-13fa-4957-8554-08d7d342b2a4.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/f/3/4/dataset_f347fe93-b756-4d71-848c-cd8fc3991b0a.dat' input_f.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'     -U 'input_f.fastq'      --rna-strandness R             --pen-cansplice 0 --pen-noncansplice 12 --pen-canintronlen G,-8.0,1.0 --pen-noncanintronlen G,-8.0,1.0  --min-intronlen 20 --max-intronlen 500000   --novel-splicesite-outfile '/galaxy/server/database/objects/0/7/2/dataset_07250059-1acf-44bf-bfe5-94c165ab5630.dat'                | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/a/8/9/dataset_a89e4b0a-1517-40db-8348-f1f25bd67136.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 1, \"canonical_penalty\": \"0\", \"coefficient\": \"1.0\", \"constant_term\": \"-8.0\", \"function_type\": \"G\", \"known_splice_gtf\": null, \"max_intron\": \"500000\", \"min_intron\": \"20\", \"nc_coefficient\": \"1.0\", \"nc_constant_term\": \"-8.0\", \"nc_function_type\": \"G\", \"no_spliced_alignment_options\": {\"__current_case__\": 1, \"no_spliced_alignment\": \"\"}, \"noncanonical_penalty\": \"12\", \"notmplen\": false, \"novel_splicesite_outfile\": true, \"spliced_options_selector\": \"advanced\", \"tma\": \"\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 563, \"src\": \"hda\"}]}, \"rna_strandness\": \"R\", \"type\": \"single\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 562, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "2b331a7140d117ae", "src": "hda", "uuid": "6dc92f2f-13fa-4957-8554-08d7d342b2a4"}, "input_1": {"id": "4b82e03486c62e93", "src": "hda", "uuid": "f347fe93-b756-4d71-848c-cd8fc3991b0a"}}, "outputs": {"novel_splicesite_output": {"id": "f38b6d13f668dbe6", "src": "hda", "uuid": "07250059-1acf-44bf-bfe5-94c165ab5630"}, "output_alignments": {"id": "f8331a05092ae719", "src": "hda", "uuid": "a89e4b0a-1517-40db-8348-f1f25bd67136"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  Calculating Z arrays for bucket 1\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\nGetting block 4 of 7\n  Calculating Z arrays for bucket 2\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 5\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  bucket 2: 10%\n  Calculating Z arrays for bucket 6\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 6: 10%\n  Calculating Z arrays for bucket 7\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 6: 20%\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 40%\n  Reserving size (1010) for bucket 4\n  bucket 1: 70%\n  bucket 7: 10%\n  Calculating Z arrays for bucket 4\n  bucket 5: 10%\n  bucket 2: 40%\n  bucket 7: 20%\n  bucket 1: 80%\n  bucket 6: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 50%\n  bucket 7: 30%\n  bucket 5: 20%\n  bucket 1: 90%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 2: 60%\n  bucket 1: 100%\n  bucket 3: 50%\n  bucket 6: 50%\n  bucket 5: 30%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 7: 50%\n  bucket 6: 60%\n  bucket 4: 10%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 7: 60%\n  bucket 5: 40%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 4: 20%\n  bucket 2: 90%\n  bucket 3: 80%\n  bucket 5: 50%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 4: 30%\n  bucket 7: 90%\n  bucket 5: 60%\n  bucket 2: 100%\n  bucket 7: 100%\n  Sorting block of length 845 for bucket 2\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 3: 90%\n  bucket 4: 40%\n  bucket 5: 70%\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 5: 80%\n  Sorting block of length 444 for bucket 3\n  bucket 4: 50%\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 4: 60%\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were unpaired; of these:\n    0 (0.00%) aligned 0 times\n    10 (100.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n100.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were unpaired; of these:\n    0 (0.00%) aligned 0 times\n    10 (100.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n100.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  Calculating Z arrays for bucket 1\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\nGetting block 4 of 7\n  Calculating Z arrays for bucket 2\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 5\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  bucket 2: 10%\n  Calculating Z arrays for bucket 6\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 20%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 2: 20%\n  bucket 1: 40%\n  bucket 3: 20%\n  bucket 6: 10%\n  Calculating Z arrays for bucket 7\n  bucket 1: 50%\n  bucket 3: 30%\n  bucket 6: 20%\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 40%\n  Reserving size (1010) for bucket 4\n  bucket 1: 70%\n  bucket 7: 10%\n  Calculating Z arrays for bucket 4\n  bucket 5: 10%\n  bucket 2: 40%\n  bucket 7: 20%\n  bucket 1: 80%\n  bucket 6: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 50%\n  bucket 7: 30%\n  bucket 5: 20%\n  bucket 1: 90%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 2: 60%\n  bucket 1: 100%\n  bucket 3: 50%\n  bucket 6: 50%\n  bucket 5: 30%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 2: 70%\n  bucket 7: 50%\n  bucket 6: 60%\n  bucket 4: 10%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 7: 60%\n  bucket 5: 40%\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 4: 20%\n  bucket 2: 90%\n  bucket 3: 80%\n  bucket 5: 50%\n  bucket 7: 80%\n  bucket 6: 80%\n  bucket 4: 30%\n  bucket 7: 90%\n  bucket 5: 60%\n  bucket 2: 100%\n  bucket 7: 100%\n  Sorting block of length 845 for bucket 2\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 3: 90%\n  bucket 4: 40%\n  bucket 5: 70%\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 5: 80%\n  Sorting block of length 444 for bucket 3\n  bucket 4: 50%\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 4: 60%\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:12:10", "plugin": "core", "name": "end_epoch", "raw_value": "1684912330.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:12:09", "plugin": "core", "name": "start_epoch", "raw_value": "1684912329.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_pnmi9kly.sam v. /tmp/history_bam_converted_to_sam_mn5v7frf.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/berntm/miniconda3/envs/mulled-v1-dc6f63e1868acbc3942929987e34de2bf48adbca1b58f06d3967ba62f134dab2/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome --rna-strandness R --pen-cansplice 0 --pen-noncansplice 12 --pen-canintronlen G,-8.0,1.0 --pen-noncanintronlen G,-8.0,1.0 --min-intronlen 20 --max-intronlen 500000 --novel-splicesite-outfile /tmp/tmpw1ltmaqi/files/0/5/a/dataset_05a3c64c-55b8-43ae-970e-778b359793ee.dat -U input_f.fastq\"\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome --rna-strandness R --pen-cansplice 0 --pen-noncansplice 12 --pen-canintronlen G,-8.0,1.0 --pen-noncanintronlen G,-8.0,1.0 --min-intronlen 20 --max-intronlen 500000 --novel-splicesite-outfile /galaxy/server/database/objects/0/7/2/dataset_07250059-1acf-44bf-bfe5-94c165ab5630.dat -U input_f.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/445/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/a/8/9/dataset_a89e4b0a-1517-40db-8348-f1f25bd67136.dat\n phiX174_185_708_0:0:0_1:0:0_5/1\t0\tphiX174\t185\t60\t70M\t*\t0\t0\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYT:Z:UU\tXS:A:-\tNH:i:1\n phiX174_36_572_1:0:0_0:0:0_8/1\t16\tphiX174\t503\t60\t70M\t*\t0\t0\tGAGTAACAAAGTTTGGATTGCTACTGACCGCTCTCGTGCTCGTCGCTGCGTTGAGGCTTGCGTTTATGGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYT:Z:UU\tXS:A:+\tNH:i:1\n phiX174_1141_1609_1:0:0_1:0:0_4/1\t0\tphiX174\t1141\t60\t70M\t*\t0\t0\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:24G45\tYT:Z:UU\tXS:A:-\tNH:i:1\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7-16", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7", "test_index": 16, "time_seconds": 13.34131407737732, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7", "test_index": 2, "time_seconds": 56.89993071556091, "inputs": {"reference_genome|source": "indexed", "library|input_1": {"src": "hda", "id": "a58b2a5c6504f64f"}, "library|input_2": {"src": "hda", "id": "7f0a8b2bfe43b4d6"}, "library|type": "paired"}, "job": {"model_class": "Job", "id": "2baee3b4a2d12dde", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:09:02.385475", "create_time": "2023-05-24T07:08:27.268864", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-8bh44", "command_line": "ln -f -s '/galaxy/server/database/objects/0/9/a/dataset_09a690c2-c148-4f81-a6f4-9035a1a524c4.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/6/7/5/dataset_67571a50-ac44-43fa-8305-386b3ee9ed63.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x '/cvmfs/data.galaxyproject.org/managed/hisat2_index/apiMel4/apiMel4'    -1 'input_f.fastq' -2 'input_r.fastq'                                | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/3/0/f/dataset_30f24d0c-242c-48b9-b43c-198629bc206f.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"phiX\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/phiX.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 518, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 519, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 0, \"index\": \"apiMel4\", \"source\": \"indexed\"}"}, "inputs": {"input_1": {"id": "a58b2a5c6504f64f", "src": "hda", "uuid": "09a690c2-c148-4f81-a6f4-9035a1a524c4"}, "input_2": {"id": "7f0a8b2bfe43b4d6", "src": "hda", "uuid": "67571a50-ac44-43fa-8305-386b3ee9ed63"}}, "outputs": {"output_alignments": {"id": "3a2e50627b161dee", "src": "hda", "uuid": "30f24d0c-242c-48b9-b43c-198629bc206f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "18 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "18.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:08:52", "plugin": "core", "name": "end_epoch", "raw_value": "1684912132.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:08:34", "plugin": "core", "name": "start_epoch", "raw_value": "1684912114.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_1nflgyub.sam v. /tmp/history_bam_converted_to_sam_d7xa5th_.sam )\n--- local_file\n+++ history_data\n@@ -1,23 +1,5345 @@\n @HD\tVN:1.0\tSO:coordinate\n-@SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome -1 input_f.fastq -2 input_r.fastq\"\n-phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_36_572_1:0:0_0:0:0_8\t83\tphiX174\t503\t60\t70M\t=\t36\t-537\tGAGTAACAAAGTTTGGATTGCTACTGACCGCTCTCGTGCTCGTCGCTGCGTTGAGGCTTGCGTTTATGGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t147\tphiX174\t639\t60\t70M\t=\t185\t-524\tTATTATGTTCATCCCGTCAACATTCAAACGGCCTGTCGCATCATGGAAGGCGCTGAATTTACGGAAAACA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:37T32\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_1141_1609_1:0:0_1:0:0_4\t99\tphiX174\t1141\t60\t70M\t=\t1540\t469\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:24G45\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1141_1609_1:0:0_1:0:0_4\t147\tphiX174\t1540\t60\t70M\t=\t1141\t-469\tTTCTAGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tZS:i:-5\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:4C65\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t99\tphiX174\t1542\t60\t70M\t=\t1896\t424\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_1363_1914_3:0:0_0:0:0_6\t133\tphiX174\t1845\t0\t*\t=\t1845\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_1363_1914_3:0:0_0:0:0_6\t89\tphiX174\t1845\t60\t70M\t=\t1845\t0\tGCACTATGTTTACTCTTGCGCTTGTTCGTTTTCCGCCTACTGCGACTAAAGAGATTCAGTACCTTAACGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYT:Z:UP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t147\tphiX174\t1896\t60\t70M\t=\t1542\t-424\tAGATTCAGTACCTTAACGCTAAAGGTGCTTTGACTTATACCGATATTGCTGGCGACCCTGTTTTGTATGG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t163\tphiX174\t1980\t60\t70M\t=\t2432\t522\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:12T57\tYS:i:-9\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t99\tphiX174\t2128\t60\t70M\t=\t2508\t450\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-12\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t99\tphiX174\t2259\t60\t68M2S\t=\t2670\t481\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-2\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:68\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t83\tphiX174\t2432\t60\t70M\t=\t1980\t-522\tTTTTTTCTGATAAGCTGGTTCTCAATTCTGTTAATCCAGCTTCTTCGGCACCTGTTTTACACACACCTAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-9\tXN:i:0\tXM:i:3\tXO:i:0\tXG:i:0\tNM:i:3\tMD:Z:24C8C27G8\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t147\tphiX174\t2508\t60\t70M\t=\t2128\t-450\tATCGTCAACGTTATATTTTGATAGTTTGAAGGTTAATGCTGGTATTGGTGGTTTTCTTAATTCCATTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-12\tXN:i:0\tXM:i:4\tXO:i:0\tXG:i:0\tNM:i:4\tMD:Z:29C14A13C3G7\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t147\tphiX174\t2670\t60\t70M\t=\t2259\t-481\tTCGCTTTGAGTCTTCGTCGGTTCCGACTACCCTCCCGACTGCCTATGATGTTTATCCTTTGAATGGTCGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:15T54\tYS:i:-2\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t163\tphiX174\t2950\t60\t70M\t=\t3308\t428\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-6\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t99\tphiX174\t3199\t60\t70M\t=\t3663\t534\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t83\tphiX174\t3308\t60\t70M\t=\t2950\t-428\tTGAGATTAATGCTTGGGAGCGTGCTGGTGCTGATGCTTCCTATGCTGGTATGGTTGACGCCGGATTTGAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-6\tZS:i:-8\tXN:i:0\tXM:i:2\tXO:i:0\tXG:i:0\tNM:i:2\tMD:Z:4C36C28\tYS:i:0\tYT:Z:CP\tNH:i:1\n********\n*SNIP *\n********\n+@SQ\tSN:GL635651\tLN:909\n+@SQ\tSN:GL635652\tLN:865\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x /cvmfs/data.galaxyproject.org/managed/hisat2_index/apiMel4/apiMel4 -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/410/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/3/0/f/dataset_30f24d0c-242c-48b9-b43c-198629bc206f.dat\n+phiX174_1980_2501_0:1:0_3:0:0_0\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGGTGTGTGTAAAACAGGTGCCGAAGAAGCTGGATTAACAGAATTGAGAACCAGCTTATCAGAAAAAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t141\t*\t0\t0\t*\t*\t0\t0\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t141\t*\t0\t0\t*\t*\t0\t0\tGCGACCATTCAAAGGATAAACATCATAGGCAGTCGGGAGGGTAGTCGGAACCGACGAAGACTCAAAGCGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t77\t*\t0\t0\t*\t*\t0\t0\tCTCAAATCCGGCGTCAACCATACCAGCATAGGAAGCATCAGCACCAGCACGCTCCCAAGCATTAATCTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t141\t*\t0\t0\t*\t*\t0\t0\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t141\t*\t0\t0\t*\t*\t0\t0\tCCATACAAAACAGGGTCGCCAGCAATATCGGTATAAGTCAAAGCACCTTTAGCGTTAAGGTACTGAATCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t77\t*\t0\t0\t*\t*\t0\t0\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t141\t*\t0\t0\t*\t*\t0\t0\tTCTGCGTTTGCTGATGAACTAAGTCAACCTCAGCACTAACCTTGCGAGTCATTTCATTGATTTGGTCATT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t77\t*\t0\t0\t*\t*\t0\t0\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t141\t*\t0\t0\t*\t*\t0\t0\tTGTTTTCCGTAAATTCAGCGCCTTCCATGATGCGACAGGCCGTTTGAATGTTGACGGGATGAACATAATA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t77\t*\t0\t0\t*\t*\t0\t0\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t141\t*\t0\t0\t*\t*\t0\t0\tCTGAATGGAATTAAGAAAACCACCAATACCAGCATTAACCTTCAAACTATCAAAATATAACGTTGACGAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t77\t*\t0\t0\t*\t*\t0\t0\tGCGTTAAGGTACTGAATCTCTTTAGTCGCAGTAGGCGGAAAACGAACAAGCGCAAGAGTAAACATAGTGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t141\t*\t0\t0\t*\t*\t0\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t77\t*\t0\t0\t*\t*\t0\t0\tACCATAAACGCAAGCCTCAACGCAGCGACGAGCACGAGAGCGGTCAGTAGCAATCCAAACTTTGTTACTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t141\t*\t0\t0\t*\t*\t0\t0\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1141_1609_1:0:0_1:0:0_4\t77\t*\t0\t0\t*\t*\t0\t0\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1141_1609_1:0:0_1:0:0_4\t141\t*\t0\t0\t*\t*\t0\t0\tCAAATTAGCATAAGCAGCTTGCAGACCCATAATGTCAATAGATGTGGTAGAAGTCGTCATTTGGCTAGAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7", "test_index": 3, "time_seconds": 16.162354707717896, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7", "test_index": 4, "time_seconds": 40.733097076416016, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "7468d10ed4065c28"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "ac503f8257ffd8e5"}, "library|input_2": {"src": "hda", "id": "ed6545368188309c"}, "library|paired_options|no_mixed": true, "library|paired_options|no_discordant": true, "library|paired_options|paired_options_selector": "advanced", "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "81188a4c0be7a351", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:09:06.299951", "create_time": "2023-05-24T07:08:53.362432", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-s49pg", "command_line": "ln -s '/galaxy/server/database/objects/e/0/5/dataset_e05d4af1-6d3d-4566-8c13-199097b6e719.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/2/f/c/dataset_2fc9f9c7-ed0c-4db3-816b-67dc2eee7d27.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/f/1/5/dataset_f15052e9-effc-41e2-b8ad-fbea83ef0552.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'  --fr --no-mixed --no-discordant        --trim5 '15' --trim3 '15' --phred33                          | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/6/a/b/dataset_6abcbcd4-742f-4345-b821-2bdf0f85d3b1.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 524, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 526, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"fr_rf_ff\": \"--fr\", \"no_discordant\": true, \"no_mixed\": true, \"paired_options_selector\": \"advanced\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 523, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "7468d10ed4065c28", "src": "hda", "uuid": "e05d4af1-6d3d-4566-8c13-199097b6e719"}, "input_1": {"id": "ac503f8257ffd8e5", "src": "hda", "uuid": "2fc9f9c7-ed0c-4db3-816b-67dc2eee7d27"}, "input_2": {"id": "ed6545368188309c", "src": "hda", "uuid": "f15052e9-effc-41e2-b8ad-fbea83ef0552"}}, "outputs": {"output_alignments": {"id": "627f9d485280e63c", "src": "hda", "uuid": "6abcbcd4-742f-4345-b821-2bdf0f85d3b1"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\nGetting block 3 of 7\n  Calculating Z arrays for bucket 2\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Entering block accumulator loop for bucket 2:\n  Reserving size (1010) for bucket 3\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 3\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 5\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 1: 10%\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  bucket 3: 10%\n  bucket 1: 20%\n  Calculating Z arrays for bucket 6\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 7: 20%\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 5: 10%\n  bucket 7: 30%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 6: 10%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 5: 20%\n  bucket 7: 40%\n  bucket 1: 70%\n  bucket 6: 20%\n  bucket 2: 70%\n  bucket 5: 30%\n  bucket 1: 80%\n  bucket 3: 50%\n  bucket 7: 50%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 1: 100%\n  bucket 7: 60%\n  bucket 2: 90%\n  bucket 3: 60%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 7: 70%\n  bucket 2: 100%\n  bucket 3: 70%\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 7: 80%\n  bucket 6: 50%\n  bucket 3: 80%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 3: 90%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 7: 90%\n  bucket 5: 100%\n  bucket 3: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 4: 50%\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\nReturning block of 924 for bucket 5\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\nGetting block 3 of 7\n  Calculating Z arrays for bucket 2\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Entering block accumulator loop for bucket 2:\n  Reserving size (1010) for bucket 3\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 3\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 5\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 1: 10%\nGetting block 6 of 7\n  Reserving size (1010) for bucket 6\n  bucket 3: 10%\n  bucket 1: 20%\n  Calculating Z arrays for bucket 6\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 30%\n  bucket 1: 30%\n  bucket 3: 20%\n  bucket 7: 20%\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 30%\n  bucket 2: 40%\n  bucket 5: 10%\n  bucket 7: 30%\n  bucket 1: 50%\n  bucket 2: 50%\n  bucket 6: 10%\n  bucket 3: 40%\n  bucket 1: 60%\n  bucket 2: 60%\n  bucket 5: 20%\n  bucket 7: 40%\n  bucket 1: 70%\n  bucket 6: 20%\n  bucket 2: 70%\n  bucket 5: 30%\n  bucket 1: 80%\n  bucket 3: 50%\n  bucket 7: 50%\n  bucket 2: 80%\n  bucket 1: 90%\n  bucket 6: 30%\n  bucket 5: 40%\n  bucket 1: 100%\n  bucket 7: 60%\n  bucket 2: 90%\n  bucket 3: 60%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 5: 50%\n  bucket 6: 40%\n  bucket 7: 70%\n  bucket 2: 100%\n  bucket 3: 70%\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 7: 80%\n  bucket 6: 50%\n  bucket 3: 80%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 3: 90%\n  bucket 5: 80%\n  bucket 6: 70%\n  bucket 5: 90%\n  bucket 7: 90%\n  bucket 5: 100%\n  bucket 3: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 4:\n  bucket 4: 10%\n  bucket 4: 20%\n  bucket 4: 30%\n  bucket 4: 40%\n  bucket 4: 50%\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  bucket 4: 60%\n  bucket 4: 70%\n  bucket 4: 80%\n  bucket 4: 90%\n  bucket 4: 100%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\nReturning block of 924 for bucket 5\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:08:56", "plugin": "core", "name": "end_epoch", "raw_value": "1684912136.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:08:55", "plugin": "core", "name": "start_epoch", "raw_value": "1684912135.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_bvcc91t_.sam v. /tmp/history_bam_converted_to_sam_76jl0brm.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome --fr --no-mixed --no-discordant --trim5 15 --trim3 15 --phred33 -1 /tmp/3453.inpipe1 -2 /tmp/3453.inpipe2\"\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome --fr --no-mixed --no-discordant --trim5 15 --trim3 15 --phred33 -1 input_f.fastq -2 input_r.fastq\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/412/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/6/a/b/dataset_6abcbcd4-742f-4345-b821-2bdf0f85d3b1.dat\n phiX174_17_543_2:0:0_2:0:0_1e\t163\tphiX174\t32\t60\t40M\t=\t489\t497\tACACTTTCGGATATTTCTGATGAGTCGAAAACTTATCTTG\t2222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:31A8\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_21_568_3:0:0_0:0:0_79\t163\tphiX174\t36\t60\t40M\t=\t514\t518\tTTTCGGATATTTGTGATGAGTCGAAAAATTATCTTGATAA\t2222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:12C27\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_22_543_0:0:0_1:0:0_188\t99\tphiX174\t37\t60\t40M\t=\t489\t492\tTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAA\t2222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:40\tYS:i:0\tYT:Z:CP\tNH:i:1\n@@ -867,32 +869,32 @@\n phiX174_79_485_2:0:0_2:0:0_10\t141\t*\t0\t0\t*\t*\t0\t0\tTTGTTTACGAATTAAATCGAAGTGGACTGCAGGCGGACAA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1822_2393_2:0:0_0:0:0_19\t77\t*\t0\t0\t*\t*\t0\t0\tAGAAAACCTACCGCGCTTCGCTTGGTCAACCCCTCAGCGG\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1822_2393_2:0:0_0:0:0_19\t141\t*\t0\t0\t*\t*\t0\t0\tTGAGCAAGGCACTATGTTAACTCTTGCGCTTGTTCGTTTT\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_3543_4018_1:0:0_2:0:0_20\t77\t*\t0\t0\t*\t*\t0\t0\tGTTGCGTCTATTATGGAAAACACCAAACTTTCCAAGCAAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_3543_4018_1:0:0_2:0:0_20\t141\t*\t0\t0\t*\t*\t0\t0\tGAAGGGTAATAAGAACGAACCATAACAAAGCCTCGAAGAT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2738_3250_0:0:0_3:0:0_23\t77\t*\t0\t0\t*\t*\t0\t0\tAAATCACGCAACTTATCAGACACTGCAGAAGTGCCAGCCT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2738_3250_0:0:0_3:0:0_23\t141\t*\t0\t0\t*\t*\t0\t0\tATTATACCGTCAAGGACTGTGTGACTATTGACGTCCTTCC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1043_1520_4:0:0_1:0:0_2f\t77\t*\t0\t0\t*\t*\t0\t0\tTGTTTTTGAGATGGCAGCAACGGAAACCATAACGAGCATC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1043_1520_4:0:0_1:0:0_2f\t141\t*\t0\t0\t*\t*\t0\t0\tTTCCTTGCTGTACAGCTTGGTCGTCTTATTACCATTTCAA\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3543_4018_1:0:0_2:0:0_20\t77\t*\t0\t0\t*\t*\t0\t0\tGTTGCGTCTATTATGGAAAACACCAAACTTTCCAAGCAAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3543_4018_1:0:0_2:0:0_20\t141\t*\t0\t0\t*\t*\t0\t0\tGAAGGGTAATAAGAACGAACCATAACAAAGCCTCGAAGAT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2530_2954_5:0:0_2:0:0_32\t77\t*\t0\t0\t*\t*\t0\t0\tGCTGGTAATGGAGGTTTTCTTCATATCATTCAGATGGATA\t2222222222222222222222222222222222222222\tYT:Z:UP\n********\n*SNIP *\n********\n+phiX174_843_1287_5:0:0_2:0:0_131\t141\t*\t0\t0\t*\t*\t0\t0\tGTAAACAACGTTCTGGGGCTCGCCCTGGACGTCCGCAGCC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2494_2909_4:0:0_1:0:0_145\t77\t*\t0\t0\t*\t*\t0\t0\tTCTTTAATAACCTGATTCAGCGAAACCAATCCGCGGCATT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2494_2909_4:0:0_1:0:0_145\t141\t*\t0\t0\t*\t*\t0\t0\tTCGTCAACGTAATCTTTTGAAAGTTTGACGGTTAATGCTG\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2409_2834_3:1:0_0:0:0_14d\t77\t*\t0\t0\t*\t*\t0\t0\tTTCAACCTTTTTTTCTGATAAGCTGGAACTCACTTCTGTA\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2409_2834_3:1:0_0:0:0_14d\t141\t*\t0\t0\t*\t*\t0\t0\tACATAAACATTATTGCCCGGCGTACGGGGAAGGACGTCAA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3672_4168_0:0:0_2:0:0_14b\t77\t*\t0\t0\t*\t*\t0\t0\tAGAATGTCTTCCACGAGCTTGATGCGGTTATCCATCTGCT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3672_4168_0:0:0_2:0:0_14b\t141\t*\t0\t0\t*\t*\t0\t0\tCGCAAGGTTAGTGCTGAGGTTGACTTAGTTCATCAGCAAA\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_2409_2834_3:1:0_0:0:0_14d\t77\t*\t0\t0\t*\t*\t0\t0\tTTCAACCTTTTTTTCTGATAAGCTGGAACTCACTTCTGTA\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_2409_2834_3:1:0_0:0:0_14d\t141\t*\t0\t0\t*\t*\t0\t0\tACATAAACATTATTGCCCGGCGTACGGGGAAGGACGTCAA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1896_2319_0:0:0_3:0:0_161\t77\t*\t0\t0\t*\t*\t0\t0\tACCTCCCACTCACTCTTTTATCACGAAGTCATGATTGAAT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1896_2319_0:0:0_3:0:0_161\t141\t*\t0\t0\t*\t*\t0\t0\tACGCTAAAGGTGCTTTGACTTATACCGATATTGCTGGCGA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_4761_5246_1:0:0_2:0:0_16c\t77\t*\t0\t0\t*\t*\t0\t0\tGCGGTGCATTTTATGCGGACACATCCTACAGGTAGCGTTG\t2222222222222222222222222222222222222222\tYT:Z:UP\n@@ -981,10 +983,10 @@\n phiX174_2952_3480_3:0:0_3:0:0_186\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTCTGGTGTCGCCATGTCTAAATTGTTTGGAGGCGGTC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3190_3751_0:0:0_2:0:0_198\t77\t*\t0\t0\t*\t*\t0\t0\tCTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3190_3751_0:0:0_2:0:0_198\t141\t*\t0\t0\t*\t*\t0\t0\tTGATTGTGCGTTTGCTTATGAACTAAGTCAACCTCAGCAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1089_1572_0:0:0_4:0:0_1a4\t77\t*\t0\t0\t*\t*\t0\t0\tGTCGTGAATTGGCGAGAAAGCTCAGTCTGAGGAGGAAGCG\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1089_1572_0:0:0_4:0:0_1a4\t141\t*\t0\t0\t*\t*\t0\t0\tCGGTTATCGCTGGCGACTCCTTCGAGATGGACGCCGTTGG\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1446_1947_4:0:0_2:0:0_1a2\t77\t*\t0\t0\t*\t*\t0\t0\tAAGATGATGCTCGTTCTGGTTTCCGTTGCTGCCCTGTCAA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1446_1947_4:0:0_2:0:0_1a2\t141\t*\t0\t0\t*\t*\t0\t0\tTAAGTCAAAGCACCTTTAGCGTTAAGGTACTGAATCTCTT\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_1089_1572_0:0:0_4:0:0_1a4\t77\t*\t0\t0\t*\t*\t0\t0\tGTCGTGAATTGGCGAGAAAGCTCAGTCTGAGGAGGAAGCG\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_1089_1572_0:0:0_4:0:0_1a4\t141\t*\t0\t0\t*\t*\t0\t0\tCGGTTATCGCTGGCGACTCCTTCGAGATGGACGCCGTTGG\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_659_1076_3:0:0_0:0:0_1a6\t77\t*\t0\t0\t*\t*\t0\t0\tGGAAGCCAAGATGGGAAAGGTCATGCGGCATACGCTCGGC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_659_1076_3:0:0_0:0:0_1a6\t141\t*\t0\t0\t*\t*\t0\t0\tTCTCATGAATGAAGGCGCTGAATTTACGGAAAACATTATT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3517_3986_3:0:0_2:0:0_1b6\t77\t*\t0\t0\t*\t*\t0\t0\tTCCAAGATTTGGAGGCATGAAAACATACAAATGGGAGGGT\t2222222222222222222222222222222222222222\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7", "test_index": 5, "time_seconds": 39.08889198303223, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "9ecc40cff0690c2c"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "9d8136519aae6de6"}, "library|type": "single", "adv|output_options|unaligned_file": true, "adv|output_options|output_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "1cfbd0a2ef6c377e", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:09:41.622205", "create_time": "2023-05-24T07:09:22.997909", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-pg892", "command_line": "ln -s '/galaxy/server/database/objects/6/e/f/dataset_6effcb2b-2b59-4cf4-8dfa-bce686f5feb5.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/c/e/e/dataset_cee975c0-a78c-41f4-8f99-6b936664b08e.dat' input_f.fasta &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f    -U 'input_f.fasta'  --un '/galaxy/server/database/objects/9/f/1/dataset_9f182617-717c-430d-a18b-d030220c0e44.dat'                                | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/d/f/4/dataset_df4e0d7a-d42e-4909-ba85-06e9cc647856.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 1, \"aligned_file\": false, \"output_options_selector\": \"advanced\", \"unaligned_file\": true}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 531, \"src\": \"hda\"}]}, \"rna_strandness\": \"\", \"type\": \"single\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 530, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "9ecc40cff0690c2c", "src": "hda", "uuid": "6effcb2b-2b59-4cf4-8dfa-bce686f5feb5"}, "input_1": {"id": "9d8136519aae6de6", "src": "hda", "uuid": "cee975c0-a78c-41f4-8f99-6b936664b08e"}}, "outputs": {"output_unaligned_reads_l": {"id": "f5cdf5e78e52fdac", "src": "hda", "uuid": "9f182617-717c-430d-a18b-d030220c0e44"}, "output_alignments": {"id": "d24e5bf859da16e1", "src": "hda", "uuid": "df4e0d7a-d42e-4909-ba85-06e9cc647856"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\n  Calculating Z arrays for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 4 of 7\n  Entering block accumulator loop for bucket 1:\nGetting block 5 of 7\n  Reserving size (1010) for bucket 4\n  Reserving size (1010) for bucket 5\n  Calculating Z arrays for bucket 4\nGetting block 6 of 7\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 5\n  bucket 4: 10%\n  Calculating Z arrays for bucket 3\n  bucket 4: 20%\n  Calculating Z arrays for bucket 2\n  Reserving size (1010) for bucket 6\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 6\n  bucket 1: 20%\n  bucket 3: 10%\nGetting block 7 of 7\n  bucket 4: 30%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 5:\n  Reserving size (1010) for bucket 7\n  Entering block accumulator loop for bucket 2:\n  bucket 3: 20%\n  Calculating Z arrays for bucket 7\n  bucket 5: 10%\n  bucket 1: 30%\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 10%\n  bucket 3: 30%\n  bucket 5: 20%\n  bucket 4: 50%\n  bucket 1: 40%\n  bucket 6: 10%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 2: 20%\n  bucket 4: 60%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 4: 70%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 7: 10%\n  bucket 6: 40%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 5: 50%\n  bucket 4: 80%\n  bucket 3: 60%\n  bucket 6: 50%\n  bucket 7: 20%\n  bucket 2: 40%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 4: 100%\n  bucket 3: 80%\n  Sorting block of length 972 for bucket 4\n  bucket 7: 30%\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 2: 50%\n  bucket 5: 70%\n  bucket 7: 40%\n  bucket 6: 80%\n  bucket 2: 60%\n  bucket 3: 90%\n  bucket 5: 80%\n  bucket 1: 90%\n  bucket 6: 90%\n  bucket 3: 100%\n  bucket 1: 100%\n  bucket 7: 50%\n  bucket 5: 90%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 5: 100%\n  bucket 2: 70%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 7: 60%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 7: 70%\n  bucket 2: 90%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were unpaired; of these:\n    3 (100.00%) aligned 0 times\n    0 (0.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were unpaired; of these:\n    3 (100.00%) aligned 0 times\n    0 (0.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\n  Calculating Z arrays for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\nGetting block 4 of 7\n  Entering block accumulator loop for bucket 1:\nGetting block 5 of 7\n  Reserving size (1010) for bucket 4\n  Reserving size (1010) for bucket 5\n  Calculating Z arrays for bucket 4\nGetting block 6 of 7\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 5\n  bucket 4: 10%\n  Calculating Z arrays for bucket 3\n  bucket 4: 20%\n  Calculating Z arrays for bucket 2\n  Reserving size (1010) for bucket 6\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 6\n  bucket 1: 20%\n  bucket 3: 10%\nGetting block 7 of 7\n  bucket 4: 30%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 5:\n  Reserving size (1010) for bucket 7\n  Entering block accumulator loop for bucket 2:\n  bucket 3: 20%\n  Calculating Z arrays for bucket 7\n  bucket 5: 10%\n  bucket 1: 30%\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 10%\n  bucket 3: 30%\n  bucket 5: 20%\n  bucket 4: 50%\n  bucket 1: 40%\n  bucket 6: 10%\n  bucket 3: 40%\n  bucket 1: 50%\n  bucket 5: 30%\n  bucket 6: 20%\n  bucket 2: 20%\n  bucket 4: 60%\n  bucket 5: 40%\n  bucket 6: 30%\n  bucket 4: 70%\n  bucket 3: 50%\n  bucket 1: 60%\n  bucket 7: 10%\n  bucket 6: 40%\n  bucket 2: 30%\n  bucket 1: 70%\n  bucket 5: 50%\n  bucket 4: 80%\n  bucket 3: 60%\n  bucket 6: 50%\n  bucket 7: 20%\n  bucket 2: 40%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 6: 60%\n  bucket 5: 60%\n  bucket 4: 100%\n  bucket 3: 80%\n  Sorting block of length 972 for bucket 4\n  bucket 7: 30%\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 2: 50%\n  bucket 5: 70%\n  bucket 7: 40%\n  bucket 6: 80%\n  bucket 2: 60%\n  bucket 3: 90%\n  bucket 5: 80%\n  bucket 1: 90%\n  bucket 6: 90%\n  bucket 3: 100%\n  bucket 1: 100%\n  bucket 7: 50%\n  bucket 5: 90%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 5: 100%\n  bucket 2: 70%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 7: 60%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 2: 80%\n  bucket 7: 70%\n  bucket 2: 90%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  bucket 2: 100%\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:09:30", "plugin": "core", "name": "end_epoch", "raw_value": "1684912170.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:09:30", "plugin": "core", "name": "start_epoch", "raw_value": "1684912170.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7", "test_index": 6, "time_seconds": 41.484660148620605, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "9ecc40cff0690c2c"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "9d8136519aae6de6"}, "library|input_2": {"src": "hda", "id": "9d8136519aae6de6"}, "library|type": "paired", "adv|output_options|unaligned_file": true, "adv|output_options|aligned_file": true, "adv|output_options|output_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "dbc7bfd9ab87865b", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:09:47.238751", "create_time": "2023-05-24T07:09:28.953042", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-fwzwp", "command_line": "ln -s '/galaxy/server/database/objects/6/e/f/dataset_6effcb2b-2b59-4cf4-8dfa-bce686f5feb5.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/c/e/e/dataset_cee975c0-a78c-41f4-8f99-6b936664b08e.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/c/e/e/dataset_cee975c0-a78c-41f4-8f99-6b936664b08e.dat' input_r.fasta &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f   -1 'input_f.fasta' -2 'input_r.fasta' --un-conc '/galaxy/server/database/objects/a/d/5/dataset_ad5c140b-e3a3-4f63-86e3-01fdb9b3a45f.dat'  --al-conc '/galaxy/server/database/objects/e/3/2/dataset_e321efb1-243c-4ea8-9854-ca41aef88d15.dat'                                | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/b/8/4/dataset_b84543db-b0c6-4b41-a95a-1fc385f487c6.dat'   && mv '/galaxy/server/database/objects/a/d/5/dataset_ad5c140b-e3a3-4f63-86e3-01fdb9b3a45f.1.dat' '/galaxy/server/database/objects/a/d/5/dataset_ad5c140b-e3a3-4f63-86e3-01fdb9b3a45f.dat' && mv '/galaxy/server/database/objects/a/d/5/dataset_ad5c140b-e3a3-4f63-86e3-01fdb9b3a45f.2.dat' '/galaxy/server/database/objects/c/b/8/dataset_cb8a974f-0045-470b-8dd0-e79c4ac8b3d0.dat' && mv '/galaxy/server/database/objects/e/3/2/dataset_e321efb1-243c-4ea8-9854-ca41aef88d15.1.dat' '/galaxy/server/database/objects/e/3/2/dataset_e321efb1-243c-4ea8-9854-ca41aef88d15.dat' && mv '/galaxy/server/database/objects/e/3/2/dataset_e321efb1-243c-4ea8-9854-ca41aef88d15.2.dat' '/galaxy/server/database/objects/5/a/5/dataset_5a56821e-4b30-46ad-a254-26fb3786fe4f.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 1, \"aligned_file\": true, \"output_options_selector\": \"advanced\", \"unaligned_file\": true}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 531, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 531, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 530, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "9ecc40cff0690c2c", "src": "hda", "uuid": "6effcb2b-2b59-4cf4-8dfa-bce686f5feb5"}, "input_1": {"id": "9d8136519aae6de6", "src": "hda", "uuid": "cee975c0-a78c-41f4-8f99-6b936664b08e"}, "input_2": {"id": "9d8136519aae6de6", "src": "hda", "uuid": "cee975c0-a78c-41f4-8f99-6b936664b08e"}}, "outputs": {"output_aligned_reads_r": {"id": "941b03cf1b01a6e5", "src": "hda", "uuid": "5a56821e-4b30-46ad-a254-26fb3786fe4f"}, "output_unaligned_reads_r": {"id": "0bb57e4ece3f072b", "src": "hda", "uuid": "cb8a974f-0045-470b-8dd0-e79c4ac8b3d0"}, "output_aligned_reads_l": {"id": "f4358df6de805565", "src": "hda", "uuid": "e321efb1-243c-4ea8-9854-ca41aef88d15"}, "output_unaligned_reads_l": {"id": "9ebc2ca56707fd20", "src": "hda", "uuid": "ad5c140b-e3a3-4f63-86e3-01fdb9b3a45f"}, "output_alignments": {"id": "88a8dfb7b90dc0f8", "src": "hda", "uuid": "b84543db-b0c6-4b41-a95a-1fc385f487c6"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 1: 40%\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  bucket 1: 50%\n  Calculating Z arrays for bucket 2\n  bucket 1: 60%\n  bucket 1: 70%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 80%\n  bucket 2: 10%\n  bucket 1: 90%\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\n  bucket 2: 20%\n  bucket 1: 100%\n  Calculating Z arrays for bucket 3\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 40%\n  bucket 3: 10%\n  bucket 2: 50%\n  bucket 3: 20%\n  bucket 2: 60%\n  bucket 3: 30%\n  bucket 2: 70%\n  bucket 3: 40%\n  bucket 2: 80%\n  bucket 3: 50%\n  bucket 2: 90%\n  bucket 3: 60%\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Calculating Z arrays for bucket 4\n  Sorting block time: 00:00:00\nGetting block 6 of 7\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 5\n  bucket 4: 10%\n  Calculating Z arrays for bucket 7\nReturning block of 941 for bucket 1\n  Reserving size (1010) for bucket 6\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 6\n  bucket 2: 100%\n  Entering block accumulator loop for bucket 7:\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  bucket 4: 30%\n  bucket 3: 70%\n  bucket 7: 10%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 7: 20%\n  bucket 3: 90%\n  bucket 4: 50%\n  bucket 7: 30%\n  bucket 3: 100%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 7: 40%\n  bucket 4: 70%\n  bucket 5: 10%\n  bucket 7: 50%\n  bucket 4: 80%\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 7: 60%\n  bucket 5: 30%\n  bucket 7: 70%\n  bucket 4: 90%\n  bucket 7: 80%\n  bucket 5: 40%\n  bucket 4: 100%\n  bucket 7: 90%\n  bucket 5: 50%\n  bucket 6: 10%\n  bucket 7: 100%\n  Sorting block time: 00:00:00\n  bucket 5: 60%\n  bucket 6: 20%\n  bucket 5: 70%\n  Sorting block time: 00:00:00\n  Sorting block of length 972 for bucket 4\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\nReturning block of 846 for bucket 2\n  bucket 6: 30%\n  bucket 5: 80%\n  bucket 6: 40%\n  bucket 5: 90%\n  (Using difference cover)\nReturning block of 445 for bucket 3\n  bucket 6: 50%\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    3 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        6 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    3 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        6 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 1:\n  bucket 1: 10%\n  bucket 1: 20%\n  bucket 1: 30%\n  bucket 1: 40%\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  bucket 1: 50%\n  Calculating Z arrays for bucket 2\n  bucket 1: 60%\n  bucket 1: 70%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 80%\n  bucket 2: 10%\n  bucket 1: 90%\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\n  bucket 2: 20%\n  bucket 1: 100%\n  Calculating Z arrays for bucket 3\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 40%\n  bucket 3: 10%\n  bucket 2: 50%\n  bucket 3: 20%\n  bucket 2: 60%\n  bucket 3: 30%\n  bucket 2: 70%\n  bucket 3: 40%\n  bucket 2: 80%\n  bucket 3: 50%\n  bucket 2: 90%\n  bucket 3: 60%\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Calculating Z arrays for bucket 4\n  Sorting block time: 00:00:00\nGetting block 6 of 7\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 5\n  bucket 4: 10%\n  Calculating Z arrays for bucket 7\nReturning block of 941 for bucket 1\n  Reserving size (1010) for bucket 6\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 6\n  bucket 2: 100%\n  Entering block accumulator loop for bucket 7:\n  Sorting block of length 845 for bucket 2\n  (Using difference cover)\n  bucket 4: 30%\n  bucket 3: 70%\n  bucket 7: 10%\n  bucket 4: 40%\n  bucket 3: 80%\n  bucket 7: 20%\n  bucket 3: 90%\n  bucket 4: 50%\n  bucket 7: 30%\n  bucket 3: 100%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 4: 60%\n  bucket 7: 40%\n  bucket 4: 70%\n  bucket 5: 10%\n  bucket 7: 50%\n  bucket 4: 80%\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 7: 60%\n  bucket 5: 30%\n  bucket 7: 70%\n  bucket 4: 90%\n  bucket 7: 80%\n  bucket 5: 40%\n  bucket 4: 100%\n  bucket 7: 90%\n  bucket 5: 50%\n  bucket 6: 10%\n  bucket 7: 100%\n  Sorting block time: 00:00:00\n  bucket 5: 60%\n  bucket 6: 20%\n  bucket 5: 70%\n  Sorting block time: 00:00:00\n  Sorting block of length 972 for bucket 4\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\nReturning block of 846 for bucket 2\n  bucket 6: 30%\n  bucket 5: 80%\n  bucket 6: 40%\n  bucket 5: 90%\n  (Using difference cover)\nReturning block of 445 for bucket 3\n  bucket 6: 50%\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 6: 70%\n  bucket 6: 80%\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:09:36", "plugin": "core", "name": "end_epoch", "raw_value": "1684912176.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:09:35", "plugin": "core", "name": "start_epoch", "raw_value": "1684912175.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7", "test_index": 7, "time_seconds": 45.06430721282959, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "bd6945a81d1fd936"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "7d41e62fecd3c16d"}, "library|input_2": {"src": "hda", "id": "3c866c83cfc29736"}, "library|paired_options|no_mixed": true, "library|paired_options|no_discordant": true, "library|paired_options|paired_options_selector": "advanced", "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "9a17b64a352d044a", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:10:26.725113", "create_time": "2023-05-24T07:10:13.019757", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-chrdx", "command_line": "ln -s '/galaxy/server/database/objects/c/5/b/dataset_c5b6822d-e203-4f82-b878-85d1e80ca3f7.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/4/7/a/dataset_47a4b8fa-f051-46da-b05f-e5674b5d960e.dat' input_f.fastq.gz &&  ln -f -s '/galaxy/server/database/objects/b/1/d/dataset_b1dc4de1-1c51-415e-b864-6f0d02d30abb.dat' input_r.fastq.gz &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq.gz' -2 'input_r.fastq.gz'  --fr --no-mixed --no-discordant        --trim5 '15' --trim3 '15' --phred33                          | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/6/8/0/dataset_680e743f-0ab8-41b5-9a0d-d67172a5dd43.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 540, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 541, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"fr_rf_ff\": \"--fr\", \"no_discordant\": true, \"no_mixed\": true, \"paired_options_selector\": \"advanced\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 542, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "bd6945a81d1fd936", "src": "hda", "uuid": "c5b6822d-e203-4f82-b878-85d1e80ca3f7"}, "input_1": {"id": "7d41e62fecd3c16d", "src": "hda", "uuid": "47a4b8fa-f051-46da-b05f-e5674b5d960e"}, "input_2": {"id": "3c866c83cfc29736", "src": "hda", "uuid": "b1dc4de1-1c51-415e-b864-6f0d02d30abb"}}, "outputs": {"output_alignments": {"id": "bd2cf900b5f93985", "src": "hda", "uuid": "680e743f-0ab8-41b5-9a0d-d67172a5dd43"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\n  bucket 1: 10%\n  bucket 2: 10%\n  Calculating Z arrays for bucket 3\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\nGetting block 7 of 7\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  Reserving size (1010) for bucket 7\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 7\nGetting block 6 of 7\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 20%\n  bucket 7: 10%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 40%\n  bucket 3: 10%\n  bucket 2: 50%\n  bucket 3: 20%\n  bucket 7: 20%\n  bucket 4: 10%\n  Reserving size (1010) for bucket 6\n  bucket 4: 20%\n  bucket 1: 30%\n  Calculating Z arrays for bucket 6\n  bucket 1: 40%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 2: 60%\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 50%\n  Calculating Z arrays for bucket 5\n  bucket 7: 30%\n  bucket 3: 40%\n  bucket 2: 70%\n  bucket 7: 40%\n  bucket 4: 40%\n  bucket 7: 50%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 80%\n  bucket 7: 60%\n  bucket 1: 60%\n  bucket 2: 90%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 6: 10%\n  bucket 1: 70%\n  bucket 7: 70%\n  bucket 3: 60%\n  bucket 5: 10%\n  bucket 2: 100%\n  bucket 6: 20%\n  bucket 1: 80%\n  bucket 7: 80%\n  bucket 5: 20%\n  bucket 3: 70%\n  bucket 1: 90%\n  Sorting block of length 845 for bucket 2\n  bucket 7: 90%\n  (Using difference cover)\n  bucket 6: 30%\n  bucket 3: 80%\n  bucket 1: 100%\n  bucket 5: 30%\n  Sorting block of length 940 for bucket 1\n  bucket 3: 90%\n  (Using difference cover)\n  bucket 7: 100%\n  bucket 5: 40%\n  Sorting block of length 739 for bucket 7\n  bucket 4: 60%\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 6: 40%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 4: 70%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 4: 80%\n  bucket 5: 70%\n  bucket 4: 90%\n  bucket 6: 70%\n  bucket 4: 100%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 6: 100%\n  bucket 5: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 2:\nGetting block 3 of 7\n  Reserving size (1010) for bucket 3\n  bucket 1: 10%\n  bucket 2: 10%\n  Calculating Z arrays for bucket 3\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\nGetting block 7 of 7\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\n  Reserving size (1010) for bucket 7\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 7\nGetting block 6 of 7\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 20%\n  bucket 7: 10%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 40%\n  bucket 3: 10%\n  bucket 2: 50%\n  bucket 3: 20%\n  bucket 7: 20%\n  bucket 4: 10%\n  Reserving size (1010) for bucket 6\n  bucket 4: 20%\n  bucket 1: 30%\n  Calculating Z arrays for bucket 6\n  bucket 1: 40%\n  bucket 4: 30%\n  bucket 3: 30%\n  bucket 2: 60%\n  Entering block accumulator loop for bucket 6:\n  bucket 1: 50%\n  Calculating Z arrays for bucket 5\n  bucket 7: 30%\n  bucket 3: 40%\n  bucket 2: 70%\n  bucket 7: 40%\n  bucket 4: 40%\n  bucket 7: 50%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 80%\n  bucket 7: 60%\n  bucket 1: 60%\n  bucket 2: 90%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 6: 10%\n  bucket 1: 70%\n  bucket 7: 70%\n  bucket 3: 60%\n  bucket 5: 10%\n  bucket 2: 100%\n  bucket 6: 20%\n  bucket 1: 80%\n  bucket 7: 80%\n  bucket 5: 20%\n  bucket 3: 70%\n  bucket 1: 90%\n  Sorting block of length 845 for bucket 2\n  bucket 7: 90%\n  (Using difference cover)\n  bucket 6: 30%\n  bucket 3: 80%\n  bucket 1: 100%\n  bucket 5: 30%\n  Sorting block of length 940 for bucket 1\n  bucket 3: 90%\n  (Using difference cover)\n  bucket 7: 100%\n  bucket 5: 40%\n  Sorting block of length 739 for bucket 7\n  bucket 4: 60%\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 6: 40%\n  Sorting block of length 444 for bucket 3\n  (Using difference cover)\n  bucket 5: 50%\n  bucket 6: 50%\n  bucket 4: 70%\n  bucket 5: 60%\n  bucket 6: 60%\n  bucket 4: 80%\n  bucket 5: 70%\n  bucket 4: 90%\n  bucket 6: 70%\n  bucket 4: 100%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 6: 80%\n  bucket 5: 90%\n  bucket 6: 90%\n  bucket 6: 100%\n  bucket 5: 100%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:10:16", "plugin": "core", "name": "end_epoch", "raw_value": "1684912216.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:10:16", "plugin": "core", "name": "start_epoch", "raw_value": "1684912216.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam__38qtapu.sam v. /tmp/history_bam_converted_to_sam_eftol93s.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome --fr --no-mixed --no-discordant --trim5 15 --trim3 15 --phred33 -1 /tmp/3453.inpipe1 -2 /tmp/3453.inpipe2\"\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome --fr --no-mixed --no-discordant --trim5 15 --trim3 15 --phred33 -1 /tmp/78.inpipe1 -2 /tmp/78.inpipe2\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/425/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/6/8/0/dataset_680e743f-0ab8-41b5-9a0d-d67172a5dd43.dat\n phiX174_17_543_2:0:0_2:0:0_1e\t163\tphiX174\t32\t60\t40M\t=\t489\t497\tACACTTTCGGATATTTCTGATGAGTCGAAAACTTATCTTG\t2222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:31A8\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_21_568_3:0:0_0:0:0_79\t163\tphiX174\t36\t60\t40M\t=\t514\t518\tTTTCGGATATTTGTGATGAGTCGAAAAATTATCTTGATAA\t2222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:12C27\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_22_543_0:0:0_1:0:0_188\t99\tphiX174\t37\t60\t40M\t=\t489\t492\tTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAA\t2222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:40\tYS:i:0\tYT:Z:CP\tNH:i:1\n@@ -885,14 +887,14 @@\n phiX174_3424_3922_2:0:0_2:0:0_58\t141\t*\t0\t0\t*\t*\t0\t0\tGACAAATTAGAGCCAATACCATCAGCTTTACCTTCTTTCC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1971_2492_1:0:0_4:0:0_74\t77\t*\t0\t0\t*\t*\t0\t0\tTTTCTATGAAGGATGTTTTCCGTTCAGGTGATTCGTCTAA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1971_2492_1:0:0_4:0:0_74\t141\t*\t0\t0\t*\t*\t0\t0\tTAAGAAGCAGGCGTAACAGAAGTGAGAACCAGCTTATCAG\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_4468_5007_1:0:0_3:0:0_88\t77\t*\t0\t0\t*\t*\t0\t0\tTATAACTGGAAGCTTTAAGGGGCTCACCTTTAGCAACAAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_4468_5007_1:0:0_3:0:0_88\t141\t*\t0\t0\t*\t*\t0\t0\tTGGAGGCCTCCACTATGAAATCGCGTAGAGGCTTTACTAT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_354_848_1:0:0_3:0:0_89\t77\t*\t0\t0\t*\t*\t0\t0\tTGCACTTAATTTTTGACGGACGTTTTCTTCTGCGTCATTA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_354_848_1:0:0_3:0:0_89\t141\t*\t0\t0\t*\t*\t0\t0\tACCACTAATAGGTAAGAAATCATGAGTCAAGTTACTGAAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2991_3536_3:0:0_1:0:0_8e\t77\t*\t0\t0\t*\t*\t0\t0\tCTCATTTTTTGCATATACCTGGTCTTTCGTATTCTGGCGT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2991_3536_3:0:0_1:0:0_8e\t141\t*\t0\t0\t*\t*\t0\t0\tCAAACAGCCGCCTCCGGTGGCATTCAATGTGCTGTGCTTG\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3846_4285_4:0:0_2:1:0_90\t77\t*\t0\t0\t*\t*\t0\t0\tAAATTCTGGAAAGACGGTAAAGCTGATGGTATTTTCTCTA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3846_4285_4:0:0_2:1:0_90\t141\t*\t0\t0\t*\t*\t0\t0\tTCATCCATTAACTTCTCAGTAACAGATACAAACTAATCAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_4468_5007_1:0:0_3:0:0_88\t77\t*\t0\t0\t*\t*\t0\t0\tTATAACTGGAAGCTTTAAGGGGCTCACCTTTAGCAACAAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n********\n*SNIP *\n********\n+phiX174_2046_2510_1:0:0_2:1:0_16e\t141\t*\t0\t0\t*\t*\t0\t0\tGTCTGTAAAACAGGTGCCGAAGAAGCTGGAGTTACAGACG\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_4761_5246_1:0:0_2:0:0_16c\t77\t*\t0\t0\t*\t*\t0\t0\tGCGGTGCATTTTATGCGGACACATCCTACAGGTAGCGTTG\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_4761_5246_1:0:0_2:0:0_16c\t141\t*\t0\t0\t*\t*\t0\t0\tCGGCGTCGCGTCGTAACCCAGCTTGGTAAGATGGAATAAG\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_2046_2510_1:0:0_2:1:0_16e\t77\t*\t0\t0\t*\t*\t0\t0\tATGCGCCTTCGTATGTTTCTCCTGCTTATCACCTTCTTGA\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_2046_2510_1:0:0_2:1:0_16e\t141\t*\t0\t0\t*\t*\t0\t0\tGTCTGTAAAACAGGTGCCGAAGAAGCTGGAGTTACAGACG\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3101_3478_2:0:0_1:0:0_16f\t77\t*\t0\t0\t*\t*\t0\t0\tTAACCCATATGAGGCCGCCCCTAGTTTTGTTTCTGGTGCT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3101_3478_2:0:0_1:0:0_16f\t141\t*\t0\t0\t*\t*\t0\t0\tCCAGCAATCTCTTTTTGAGTCTCATTTTGCATCTCGGCAA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_46_522_6:0:0_1:0:0_170\t77\t*\t0\t0\t*\t*\t0\t0\tAAATTATCTTGATAAAGGAGGAATTACTACTGCTAGATTA\t2222222222222222222222222222222222222222\tYT:Z:UP\n@@ -981,12 +983,12 @@\n phiX174_2952_3480_3:0:0_3:0:0_186\t141\t*\t0\t0\t*\t*\t0\t0\tCTTTCTGGTGTCGCCATGTCTAAATTGTTTGGAGGCGGTC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3190_3751_0:0:0_2:0:0_198\t77\t*\t0\t0\t*\t*\t0\t0\tCTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3190_3751_0:0:0_2:0:0_198\t141\t*\t0\t0\t*\t*\t0\t0\tTGATTGTGCGTTTGCTTATGAACTAAGTCAACCTCAGCAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_659_1076_3:0:0_0:0:0_1a6\t77\t*\t0\t0\t*\t*\t0\t0\tGGAAGCCAAGATGGGAAAGGTCATGCGGCATACGCTCGGC\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_659_1076_3:0:0_0:0:0_1a6\t141\t*\t0\t0\t*\t*\t0\t0\tTCTCATGAATGAAGGCGCTGAATTTACGGAAAACATTATT\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1089_1572_0:0:0_4:0:0_1a4\t77\t*\t0\t0\t*\t*\t0\t0\tGTCGTGAATTGGCGAGAAAGCTCAGTCTGAGGAGGAAGCG\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1089_1572_0:0:0_4:0:0_1a4\t141\t*\t0\t0\t*\t*\t0\t0\tCGGTTATCGCTGGCGACTCCTTCGAGATGGACGCCGTTGG\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1446_1947_4:0:0_2:0:0_1a2\t77\t*\t0\t0\t*\t*\t0\t0\tAAGATGATGCTCGTTCTGGTTTCCGTTGCTGCCCTGTCAA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1446_1947_4:0:0_2:0:0_1a2\t141\t*\t0\t0\t*\t*\t0\t0\tTAAGTCAAAGCACCTTTAGCGTTAAGGTACTGAATCTCTT\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_1089_1572_0:0:0_4:0:0_1a4\t77\t*\t0\t0\t*\t*\t0\t0\tGTCGTGAATTGGCGAGAAAGCTCAGTCTGAGGAGGAAGCG\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_1089_1572_0:0:0_4:0:0_1a4\t141\t*\t0\t0\t*\t*\t0\t0\tCGGTTATCGCTGGCGACTCCTTCGAGATGGACGCCGTTGG\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_659_1076_3:0:0_0:0:0_1a6\t77\t*\t0\t0\t*\t*\t0\t0\tGGAAGCCAAGATGGGAAAGGTCATGCGGCATACGCTCGGC\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_659_1076_3:0:0_0:0:0_1a6\t141\t*\t0\t0\t*\t*\t0\t0\tTCTCATGAATGAAGGCGCTGAATTTACGGAAAACATTATT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3517_3986_3:0:0_2:0:0_1b6\t77\t*\t0\t0\t*\t*\t0\t0\tTCCAAGATTTGGAGGCATGAAAACATACAAATGGGAGGGT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3517_3986_3:0:0_2:0:0_1b6\t141\t*\t0\t0\t*\t*\t0\t0\tATCAACAGAAGGAGTCTACTGCTCGCGTTGCTTCTAATAT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_812_1266_2:1:0_3:0:0_1cf\t77\t*\t0\t0\t*\t*\t0\t0\tTTAATCGACTTTTCACCATAAACGTGACGATGAGGGACAT\t2222222222222222222222222222222222222222\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7-8", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7", "test_index": 8, "time_seconds": 44.215452432632446, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "bd6945a81d1fd936"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "d19033e2ce6be116"}, "library|input_2": {"src": "hda", "id": "cfabe5817795fb0f"}, "library|paired_options|no_mixed": true, "library|paired_options|no_discordant": true, "library|paired_options|paired_options_selector": "advanced", "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "5a42a6ecf051dc9b", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:10:32.053560", "create_time": "2023-05-24T07:10:17.637704", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.1.0\n64-bit\nBuilt on login-node03\nWed Jun  7 15:53:42 EDT 2017\nCompiler: gcc version 4.8.2 (GCC) \nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-hxl7m", "command_line": "ln -s '/galaxy/server/database/objects/c/5/b/dataset_c5b6822d-e203-4f82-b878-85d1e80ca3f7.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/1/e/8/dataset_1e85ea58-71f7-48cb-821a-491b69f859e0.dat' input_f.fastq.bz2 &&  ln -f -s '/galaxy/server/database/objects/b/e/e/dataset_bee2a859-7028-44e2-bcf2-dd9d9e470d7d.dat' input_r.fastq.bz2 &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq.bz2' -2 'input_r.fastq.bz2'  --fr --no-mixed --no-discordant        --trim5 '15' --trim3 '15' --phred33                          | samtools sort -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/4/2/2/dataset_422443c5-6992-48ea-a1c6-c162f18a8ad3.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 543, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 544, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"fr_rf_ff\": \"--fr\", \"no_discordant\": true, \"no_mixed\": true, \"paired_options_selector\": \"advanced\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 542, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "bd6945a81d1fd936", "src": "hda", "uuid": "c5b6822d-e203-4f82-b878-85d1e80ca3f7"}, "input_1": {"id": "d19033e2ce6be116", "src": "hda", "uuid": "1e85ea58-71f7-48cb-821a-491b69f859e0"}, "input_2": {"id": "cfabe5817795fb0f", "src": "hda", "uuid": "bee2a859-7028-44e2-bcf2-dd9d9e470d7d"}}, "outputs": {"output_alignments": {"id": "c24b534f1a14412b", "src": "hda", "uuid": "422443c5-6992-48ea-a1c6-c162f18a8ad3"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\nGetting block 3 of 7\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Entering block accumulator loop for bucket 2:\n  Reserving size (1010) for bucket 3\n  bucket 2: 10%\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\nGetting block 6 of 7\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 2: 30%\n  Reserving size (1010) for bucket 6\n  bucket 2: 40%\n  bucket 3: 20%\n  bucket 4: 10%\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 1:\n  bucket 2: 50%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 5:\n  bucket 4: 20%\n  bucket 1: 10%\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 3: 30%\n  bucket 2: 60%\n  bucket 6: 20%\n  bucket 1: 20%\n  bucket 4: 30%\n  bucket 5: 20%\n  bucket 3: 40%\n  bucket 5: 30%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 5: 40%\n  bucket 3: 50%\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  bucket 4: 50%\n  bucket 5: 50%\n  bucket 4: 60%\n  bucket 5: 60%\n  Calculating Z arrays for bucket 7\n  bucket 2: 80%\n  bucket 6: 30%\n  bucket 3: 60%\n  bucket 2: 90%\n  bucket 4: 70%\n  bucket 6: 40%\n  bucket 1: 30%\n  bucket 2: 100%\n  bucket 4: 80%\n  bucket 6: 50%\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 7:\n  Sorting block of length 845 for bucket 2\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 3: 70%\n  bucket 1: 50%\n  bucket 6: 70%\n  bucket 4: 100%\n  bucket 3: 80%\n  bucket 1: 60%\n  bucket 6: 80%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  bucket 7: 10%\n  bucket 6: 90%\n  bucket 1: 70%\n  bucket 3: 90%\n  bucket 5: 70%\n  bucket 3: 100%\n  bucket 1: 80%\n  Sorting block of length 444 for bucket 3\n  bucket 6: 100%\n  (Using difference cover)\n  bucket 5: 80%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 1: 90%\n  bucket 7: 20%\n  bucket 5: 90%\n  bucket 1: 100%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 1010 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 1010 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HierEbwt constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 12 sample suffixes\nGenerating random suffixes\nQSorting 12 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 12 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 7; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 1, merged 1; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 768.571 (target: 1009)\nGetting block 1 of 7\n  Reserving size (1010) for bucket 1\nGetting block 2 of 7\n  Reserving size (1010) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\nGetting block 3 of 7\nGetting block 4 of 7\n  Reserving size (1010) for bucket 4\nGetting block 5 of 7\n  Reserving size (1010) for bucket 5\n  Entering block accumulator loop for bucket 2:\n  Reserving size (1010) for bucket 3\n  bucket 2: 10%\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\nGetting block 6 of 7\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 10%\n  bucket 2: 30%\n  Reserving size (1010) for bucket 6\n  bucket 2: 40%\n  bucket 3: 20%\n  bucket 4: 10%\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 6\n  Entering block accumulator loop for bucket 1:\n  bucket 2: 50%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 5:\n  bucket 4: 20%\n  bucket 1: 10%\n  bucket 5: 10%\n  bucket 6: 10%\n  bucket 3: 30%\n  bucket 2: 60%\n  bucket 6: 20%\n  bucket 1: 20%\n  bucket 4: 30%\n  bucket 5: 20%\n  bucket 3: 40%\n  bucket 5: 30%\n  bucket 2: 70%\n  bucket 4: 40%\n  bucket 5: 40%\n  bucket 3: 50%\nGetting block 7 of 7\n  Reserving size (1010) for bucket 7\n  bucket 4: 50%\n  bucket 5: 50%\n  bucket 4: 60%\n  bucket 5: 60%\n  Calculating Z arrays for bucket 7\n  bucket 2: 80%\n  bucket 6: 30%\n  bucket 3: 60%\n  bucket 2: 90%\n  bucket 4: 70%\n  bucket 6: 40%\n  bucket 1: 30%\n  bucket 2: 100%\n  bucket 4: 80%\n  bucket 6: 50%\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 7:\n  Sorting block of length 845 for bucket 2\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 6: 60%\n  bucket 3: 70%\n  bucket 1: 50%\n  bucket 6: 70%\n  bucket 4: 100%\n  bucket 3: 80%\n  bucket 1: 60%\n  bucket 6: 80%\n  Sorting block of length 972 for bucket 4\n  (Using difference cover)\n  bucket 7: 10%\n  bucket 6: 90%\n  bucket 1: 70%\n  bucket 3: 90%\n  bucket 5: 70%\n  bucket 3: 100%\n  bucket 1: 80%\n  Sorting block of length 444 for bucket 3\n  bucket 6: 100%\n  (Using difference cover)\n  bucket 5: 80%\n  Sorting block of length 517 for bucket 6\n  (Using difference cover)\n  bucket 1: 90%\n  bucket 7: 20%\n  bucket 5: 90%\n  bucket 1: 100%\n  Sorting block of length 940 for bucket 1\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 5: 100%\n  Sorting block of length 923 for bucket 5\n  (Using difference cover)\n  bucket 7: 40%\n  bucket 7: 50%\n  bucket 7: 60%\n  bucket 7: 70%\n  bucket 7: 80%\n  bucket 7: 90%\n  bucket 7: 100%\n  Sorting block of length 739 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 846 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 973 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 941 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 740 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 445 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 924 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 518 for bucket 6\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:10:21", "plugin": "core", "name": "end_epoch", "raw_value": "1684912221.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:10:21", "plugin": "core", "name": "start_epoch", "raw_value": "1684912221.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_uyrx_ix_.sam v. /tmp/history_bam_converted_to_sam_3i6f35oc.sam )\n--- local_file\n+++ history_data\n@@ -1,6 +1,8 @@\n @HD\tVN:1.0\tSO:coordinate\n @SQ\tSN:phiX174\tLN:5386\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome --fr --no-mixed --no-discordant --trim5 15 --trim3 15 --phred33 -1 /tmp/3453.inpipe1 -2 /tmp/3453.inpipe2\"\n+@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/usr/local/bin/hisat2-align-s --wrapper basic-0 -p 8 -x genome --fr --no-mixed --no-discordant --trim5 15 --trim3 15 --phred33 -1 /tmp/78.inpipe1 -2 /tmp/78.inpipe2\"\n+@PG\tID:samtools\tPN:samtools\tPP:hisat2\tVN:1.11\tCL:samtools sort -l 0 -T /galaxy/server/database/jobs_directory/000/426/tmp -O bam\n+@PG\tID:samtools.1\tPN:samtools\tPP:samtools\tVN:1.11\tCL:samtools view -O bam -@ 8 -o /galaxy/server/database/objects/4/2/2/dataset_422443c5-6992-48ea-a1c6-c162f18a8ad3.dat\n phiX174_17_543_2:0:0_2:0:0_1e\t163\tphiX174\t32\t60\t40M\t=\t489\t497\tACACTTTCGGATATTTCTGATGAGTCGAAAACTTATCTTG\t2222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:31A8\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_21_568_3:0:0_0:0:0_79\t163\tphiX174\t36\t60\t40M\t=\t514\t518\tTTTCGGATATTTGTGATGAGTCGAAAAATTATCTTGATAA\t2222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:12C27\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_22_543_0:0:0_1:0:0_188\t99\tphiX174\t37\t60\t40M\t=\t489\t492\tTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAA\t2222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:40\tYS:i:0\tYT:Z:CP\tNH:i:1\n@@ -788,8 +790,8 @@\n phiX174_4733_5272_1:0:0_1:0:0_1c2\t163\tphiX174\t4748\t60\t40M\t=\t5218\t510\tTACAGCAAATGGCCGTCTTCATTTCCATGCGGTGCATTTT\t2222222222222222222222222222222222222222\tAS:i:-3\tZS:i:-7\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:6T33\tYS:i:-3\tYT:Z:CP\tNH:i:1\n phiX174_4736_5291_1:0:0_1:0:0_177\t163\tphiX174\t4751\t60\t40M\t=\t5237\t526\tAGCTAATGGCCGTCTTCATTTCCATGCGGTGCATTTTATG\t2222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:40\tYS:i:-3\tYT:Z:CP\tNH:i:1\n phiX174_4743_5249_3:0:0_1:0:0_cd\t163\tphiX174\t4758\t60\t39M1S\t=\t5195\t477\tGGCCGTCTTCATTTCCATGCGGTGCATTATATGCGGACAG\t2222222222222222222222222222222222222222\tAS:i:-4\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:28T10\tYS:i:-3\tYT:Z:CP\tNH:i:1\n+phiX174_4746_5155_3:0:0_0:0:0_c\t163\tphiX174\t4761\t60\t40M\t=\t5101\t380\tCGTCTTCATTTCCATGGTGTGCATTTTATGCGGACACTTC\t2222222222222222222222222222222222222222\tAS:i:-6\tXN:i:0\tXM:i:2\tXO:i:0\tXG:i:0\tNM:i:2\tMD:Z:16C0G22\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_4746_5200_3:0:0_0:0:0_b\t163\tphiX174\t4761\t60\t40M\t=\t5146\t425\tCGTCTTCATTTCCATGCGGTGCATTTTATGCGGACAGTTC\t2222222222222222222222222222222222222222\tAS:i:-3\tZS:i:-4\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:36C3\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_4746_5155_3:0:0_0:0:0_c\t163\tphiX174\t4761\t60\t40M\t=\t5101\t380\tCGTCTTCATTTCCATGGTGTGCATTTTATGCGGACACTTC\t2222222222222222222222222222222222222222\tAS:i:-6\tXN:i:0\tXM:i:2\tXO:i:0\tXG:i:0\tNM:i:2\tMD:Z:16C0G22\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_4367_4818_0:0:0_2:0:0_61\t147\tphiX174\t4764\t60\t40M\t=\t4382\t-422\tCTTCATTTCCATGCGGTGCATTTTATGCGGACTCTTCCTA\t2222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:32A7\tYS:i:0\tYT:Z:CP\tNH:i:1\n phiX174_4270_4826_3:0:0_1:0:0_10b\t147\tphiX174\t4772\t60\t40M\t=\t4285\t-527\tCCATGCGGTGCATTTTATGCGGACACTTCCTACAGGTAGC\t2222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:40\tYS:i:-5\tYT:Z:CP\tNH:i:1\n phiX174_4766_5215_1:0:0_1:0:0_19a\t163\tphiX174\t4781\t60\t40M\t=\t5161\t420\tGCATTTTATGCGGCCACTTCCTACAGGTAGCGTTGACCCT\t2222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:13A26\tYS:i:-3\tYT:Z:CP\tNH:i:1\n@@ -885,10 +887,10 @@\n phiX174_3424_3922_2:0:0_2:0:0_58\t141\t*\t0\t0\t*\t*\t0\t0\tGACAAATTAGAGCCAATACCATCAGCTTTACCTTCTTTCC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1971_2492_1:0:0_4:0:0_74\t77\t*\t0\t0\t*\t*\t0\t0\tTTTCTATGAAGGATGTTTTCCGTTCAGGTGATTCGTCTAA\t2222222222222222222222222222222222222222\tYT:Z:UP\n********\n*SNIP *\n********\n phiX174_4023_4465_2:0:0_4:0:0_13e\t141\t*\t0\t0\t*\t*\t0\t0\tTTTTTGGGGTAATTATAGTCATGGCGAATATCCTTAATAG\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_2494_2909_4:0:0_1:0:0_145\t77\t*\t0\t0\t*\t*\t0\t0\tTCTTTAATAACCTGATTCAGCGAAACCAATCCGCGGCATT\t2222222222222222222222222222222222222222\tYT:Z:UP\n@@ -983,10 +985,10 @@\n phiX174_3190_3751_0:0:0_2:0:0_198\t141\t*\t0\t0\t*\t*\t0\t0\tTGATTGTGCGTTTGCTTATGAACTAAGTCAACCTCAGCAC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1446_1947_4:0:0_2:0:0_1a2\t77\t*\t0\t0\t*\t*\t0\t0\tAAGATGATGCTCGTTCTGGTTTCCGTTGCTGCCCTGTCAA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1446_1947_4:0:0_2:0:0_1a2\t141\t*\t0\t0\t*\t*\t0\t0\tTAAGTCAAAGCACCTTTAGCGTTAAGGTACTGAATCTCTT\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_659_1076_3:0:0_0:0:0_1a6\t77\t*\t0\t0\t*\t*\t0\t0\tGGAAGCCAAGATGGGAAAGGTCATGCGGCATACGCTCGGC\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_659_1076_3:0:0_0:0:0_1a6\t141\t*\t0\t0\t*\t*\t0\t0\tTCTCATGAATGAAGGCGCTGAATTTACGGAAAACATTATT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1089_1572_0:0:0_4:0:0_1a4\t77\t*\t0\t0\t*\t*\t0\t0\tGTCGTGAATTGGCGAGAAAGCTCAGTCTGAGGAGGAAGCG\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_1089_1572_0:0:0_4:0:0_1a4\t141\t*\t0\t0\t*\t*\t0\t0\tCGGTTATCGCTGGCGACTCCTTCGAGATGGACGCCGTTGG\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_659_1076_3:0:0_0:0:0_1a6\t77\t*\t0\t0\t*\t*\t0\t0\tGGAAGCCAAGATGGGAAAGGTCATGCGGCATACGCTCGGC\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_659_1076_3:0:0_0:0:0_1a6\t141\t*\t0\t0\t*\t*\t0\t0\tTCTCATGAATGAAGGCGCTGAATTTACGGAAAACATTATT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3517_3986_3:0:0_2:0:0_1b6\t77\t*\t0\t0\t*\t*\t0\t0\tTCCAAGATTTGGAGGCATGAAAACATACAAATGGGAGGGT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3517_3986_3:0:0_2:0:0_1b6\t141\t*\t0\t0\t*\t*\t0\t0\tATCAACAGAAGGAGTCTACTGCTCGCGTTGCTTCTAATAT\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_812_1266_2:1:0_3:0:0_1cf\t77\t*\t0\t0\t*\t*\t0\t0\tTTAATCGACTTTTCACCATAAACGTGACGATGAGGGACAT\t2222222222222222222222222222222222222222\tYT:Z:UP\n@@ -997,7 +999,7 @@\n phiX174_4630_5196_3:0:0_2:0:0_1d4\t141\t*\t0\t0\t*\t*\t0\t0\tACTCTATTCGTGATATTGGTCGAATGGTTCTTGCTGCCGA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3223_3567_2:0:0_3:0:0_1e0\t77\t*\t0\t0\t*\t*\t0\t0\tTTGGACTTGGTGGCAAGTCTGCCGCAGATAAAGTAAAGGA\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_3223_3567_2:0:0_3:0:0_1e0\t141\t*\t0\t0\t*\t*\t0\t0\tCAGTCGACTCCTTCTGTTGAAAAGCAAGCATCTCATTATG\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_543_956_2:0:0_3:0:0_1e7\t77\t*\t0\t0\t*\t*\t0\t0\tGCTTTCGATTATGGTACGCTGGACTTTGTGGGATACCCTC\t2222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_543_956_2:0:0_3:0:0_1e7\t141\t*\t0\t0\t*\t*\t0\t0\tACCAAAGACGAGCGCCTTTAGGCTTGCCTTAAGTACGTCG\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_4404_4767_2:0:0_4:0:0_1e5\t77\t*\t0\t0\t*\t*\t0\t0\tCTGTACCATACTCAGGGACACAAAAATACTGATCGCAGTC\t2222222222222222222222222222222222222222\tYT:Z:UP\n phiX174_4404_4767_2:0:0_4:0:0_1e5\t141\t*\t0\t0\t*\t*\t0\t0\tGATATTCGCGATGAGTATAATTACCCCAACCAGAAAGGTA\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_543_956_2:0:0_3:0:0_1e7\t77\t*\t0\t0\t*\t*\t0\t0\tGCTTTCGATTATGGTACGCTGGACTTTGTGGGATACCCTC\t2222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_543_956_2:0:0_3:0:0_1e7\t141\t*\t0\t0\t*\t*\t0\t0\tACCAAAGACGAGCGCCTTTAGGCTTGCCTTAAGTACGTCG\t2222222222222222222222222222222222222222\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.1.0+galaxy7-9", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.1.0+galaxy7", "test_index": 9, "time_seconds": 25.035064935684204, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "009f3df464c76c4c"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "84e2210807b4496d"}, "library|input_2": {"src": "hda", "id": "e96032397f3206dc"}, "library|rna_strandness": "FR", "library|type": "paired"}, "execution_problem": "parameter 'input_1': the previously selected dataset has entered an unusable state", "dynamic_param_error": false, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 0, "time_seconds": 61.41633701324463, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "f04195f8c1495ad1"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "c832b8804e5cdffd"}, "library|input_2": {"src": "hda", "id": "32224318e25ae3e7"}, "library|type": "paired", "adv|reporting_options|reporting_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "9317fafe47ba1029", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:13:22.689832", "create_time": "2023-05-24T07:12:47.867875", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-lp4db", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/4/9/6/dataset_4963a453-a6b9-449c-9a9e-8767b2c21da0.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/6/2/d/dataset_62d45bc2-fcda-4e9e-9082-e018d3bce2f6.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/2/3/5/dataset_2352926e-3308-4833-9a4c-69965f8307b1.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/7/6/f/dataset_76fdeee0-b5d0-45a0-a566-43d57e94c171.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 1, \"max_primary\": \"\", \"reporting_options_selector\": \"advanced\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 573, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 574, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 572, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "f04195f8c1495ad1", "src": "hda", "uuid": "4963a453-a6b9-449c-9a9e-8767b2c21da0"}, "input_1": {"id": "c832b8804e5cdffd", "src": "hda", "uuid": "62d45bc2-fcda-4e9e-9082-e018d3bce2f6"}, "input_2": {"id": "32224318e25ae3e7", "src": "hda", "uuid": "2352926e-3308-4833-9a4c-69965f8307b1"}}, "outputs": {"output_alignments": {"id": "330cbadb5d07c8ef", "src": "hda", "uuid": "76fdeee0-b5d0-45a0-a566-43d57e94c171"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 1\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 1\nGetting block 5 of 60\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 5\nGetting block 6 of 60\nGetting block 7 of 60\n  Reserving size (126) for bucket 6\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 10%\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 7\n  bucket 5: 10%\n  bucket 2: 20%\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 7\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 4\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 10%\n  Reserving size (126) for bucket 8\n  bucket 5: 40%\n  bucket 7: 10%\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 30%\n  bucket 4: 20%\n  Calculating Z arrays for bucket 8\n  bucket 3: 10%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 1: 20%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 6: 40%\n  bucket 2: 40%\n  bucket 5: 50%\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 4: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 1: 30%\n  bucket 5: 60%\n  bucket 4: 60%\n  bucket 6: 50%\n  bucket 2: 60%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 3: 50%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 8: 10%\n  bucket 1: 40%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 3: 70%\n  bucket 7: 60%\n  bucket 1: 50%\n  bucket 8: 20%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 2: 70%\n  bucket 4: 90%\n  bucket 5: 100%\n  bucket 1: 60%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 4: 100%\n  bucket 8: 30%\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 8: 40%\n  Sorting block of length 68 for bucket 4\n  bucket 7: 70%\n  bucket 2: 90%\n  bucket 1: 70%\n  bucket 6: 90%\n  bucket 8: 50%\n  bucket 1: 80%\n  bucket 3: 100%\n  bucket 7: 80%\n  bucket 2: 100%\n  Sorting block of length 106 for bucket 3\n  bucket 1: 90%\n  (Using difference cover)\n  bucket 7: 90%\n  Sorting block time: 00:00:00\n  bucket 8: 60%\n  bucket 1: 100%\nReturning block of 64 for bucket 5\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 84 for bucket 2\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  (Using difference cover)\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  bucket 8: 70%\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\nGetting block 10 of 60\nGetting block 11 of 60\n  Reserving size (126) for bucket 9\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 9\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 9:\n  bucket 11: 20%\n  bucket 9: 10%\n  bucket 11: 30%\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 11: 40%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 11: 50%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 11: 60%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 11: 70%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 11: 80%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 11: 90%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 11: 100%\n  bucket 9: 100%\n  Sorting block of length 95 for bucket 11\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 12 of 60\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 13\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 12:\n  bucket 13: 10%\n  bucket 12: 10%\n  bucket 13: 20%\n  bucket 12: 20%\n  bucket 13: 30%\n  bucket 12: 30%\n  bucket 13: 40%\n  bucket 12: 40%\n  bucket 13: 50%\n  bucket 12: 50%\n  bucket 13: 60%\n  bucket 12: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 12: 70%\n  bucket 13: 90%\n  bucket 12: 80%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\nGetting block 17 of 60\n  Calculating Z arrays for bucket 16\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 16:\n  Reserving size (126) for bucket 18\n  bucket 16: 10%\n  Calculating Z arrays for bucket 18\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 17: 40%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 50%\n  bucket 16: 60%\n  bucket 17: 60%\n  bucket 18: 10%\n  bucket 17: 70%\n  bucket 18: 20%\n  bucket 16: 70%\n  bucket 17: 80%\n  bucket 18: 30%\n  bucket 17: 90%\n  bucket 16: 80%\n  bucket 18: 40%\n  bucket 17: 100%\n  bucket 16: 90%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 50%\n  bucket 16: 100%\n  bucket 18: 60%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\nGetting block 22 of 60\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 21\nReturning block of 98 for bucket 20\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 21: 20%\n  bucket 22: 30%\n  bucket 21: 30%\n  bucket 22: 40%\n  bucket 21: 40%\n  bucket 22: 50%\n  bucket 21: 50%\n  bucket 22: 60%\n  bucket 21: 60%\n  bucket 22: 70%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 21: 80%\n  bucket 22: 90%\n  bucket 21: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nReturning block of 55 for bucket 21\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\nGetting block 26 of 60\n  bucket 25: 40%\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 25: 50%\n  bucket 26: 90%\n  bucket 25: 60%\n  bucket 26: 100%\n  bucket 25: 70%\n  Sorting block of length 107 for bucket 26\n  bucket 25: 80%\n  bucket 25: 90%\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 60\n  bucket 27: 10%\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 20%\n  bucket 27: 30%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 27: 50%\n  bucket 28: 20%\n  bucket 27: 60%\n  bucket 28: 30%\n  bucket 27: 70%\n  bucket 28: 40%\n  bucket 27: 80%\n  bucket 28: 50%\n  bucket 27: 90%\n  bucket 28: 60%\n  bucket 27: 100%\n  bucket 28: 70%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Entering block accumulator loop for bucket 29:\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  bucket 29: 20%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 30: 20%\n  bucket 29: 60%\n  bucket 30: 30%\n  bucket 29: 70%\n  bucket 30: 40%\n  bucket 29: 80%\n  bucket 30: 50%\n  bucket 29: 90%\n  bucket 30: 60%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  bucket 30: 70%\n  (Using difference cover)\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\nGetting block 32 of 60\n  Calculating Z arrays for bucket 31\n  Reserving size (126) for bucket 32\n  Entering block accumulator loop for bucket 31:\n  Calculating Z arrays for bucket 32\n  bucket 31: 10%\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\nGetting block 34 of 60\n  bucket 33: 40%\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 50%\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 35: 10%\n  bucket 36: 20%\n  bucket 35: 20%\n  bucket 36: 30%\n  bucket 35: 30%\n  bucket 36: 40%\n  bucket 35: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 35: 50%\n  bucket 36: 70%\n  bucket 35: 60%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 35: 70%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\nGetting block 38 of 60\n  bucket 37: 10%\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  bucket 37: 20%\n  bucket 37: 30%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 40%\n  bucket 38: 10%\n  bucket 37: 50%\n  bucket 38: 20%\n  bucket 37: 60%\n  bucket 38: 30%\n  bucket 37: 70%\n  bucket 38: 40%\n  bucket 37: 80%\n  bucket 38: 50%\n  bucket 37: 90%\n  bucket 38: 60%\n  bucket 37: 100%\n  bucket 38: 70%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\nGetting block 40 of 60\n  bucket 39: 30%\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  bucket 39: 40%\n  bucket 39: 50%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 39: 90%\n  bucket 40: 30%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 40%\n  bucket 40: 50%\n  Sorting block time: 00:00:00\nGetting block 41 of 60\nReturning block of 126 for bucket 39\n  bucket 40: 60%\n  Reserving size (126) for bucket 41\n  bucket 40: 70%\n  Calculating Z arrays for bucket 41\n  bucket 40: 80%\n  bucket 40: 90%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\nGetting block 46 of 60\n  Calculating Z arrays for bucket 45\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 46: 10%\n  bucket 45: 20%\n  bucket 46: 20%\n  bucket 45: 30%\n  bucket 46: 30%\n  bucket 45: 40%\n  bucket 46: 40%\n  bucket 45: 50%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 45: 60%\n  bucket 46: 70%\n  bucket 45: 70%\n  bucket 46: 80%\n  bucket 45: 80%\n  bucket 46: 90%\n  bucket 45: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  bucket 48: 60%\n  Calculating Z arrays for bucket 49\n  bucket 48: 70%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 80%\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 48: 90%\n  bucket 49: 30%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Entering block accumulator loop for bucket 50:\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  bucket 50: 10%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 20%\n  bucket 51: 10%\n  bucket 50: 30%\n  bucket 51: 20%\n  bucket 50: 40%\n  bucket 51: 30%\n  bucket 50: 50%\n  bucket 51: 40%\n  bucket 50: 60%\n  bucket 51: 50%\n  bucket 50: 70%\n  bucket 51: 60%\n  bucket 50: 80%\n  bucket 51: 70%\n  bucket 50: 90%\n  bucket 51: 80%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\nGetting block 54 of 60\n  bucket 53: 10%\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  bucket 53: 20%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 30%\n  bucket 54: 10%\n  bucket 53: 40%\n  bucket 54: 20%\n  bucket 53: 50%\nGetting block 55 of 60\n  bucket 53: 60%\n  Reserving size (126) for bucket 55\n  bucket 53: 70%\n  Calculating Z arrays for bucket 55\n  bucket 53: 80%\n  bucket 54: 30%\n  bucket 53: 90%\n  Entering block accumulator loop for bucket 55:\n  bucket 53: 100%\n  bucket 54: 40%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 55: 10%\n  bucket 54: 50%\n  bucket 55: 20%\n  bucket 54: 60%\n  bucket 55: 30%\n  bucket 54: 70%\n  bucket 55: 40%\n  bucket 54: 80%\n  bucket 55: 50%\n  bucket 54: 90%\n  bucket 55: 60%\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  bucket 55: 70%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 57:\n  Entering block accumulator loop for bucket 56:\n  bucket 57: 10%\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 57: 20%\n  bucket 56: 30%\n  bucket 57: 30%\n  bucket 56: 40%\n  bucket 57: 40%\n  bucket 56: 50%\n  bucket 57: 50%\n  bucket 56: 60%\n  bucket 57: 60%\n  bucket 56: 70%\n  bucket 57: 70%\n  bucket 56: 80%\n  bucket 57: 80%\n  bucket 56: 90%\n  bucket 57: 90%\n  bucket 56: 100%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 1\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 1\nGetting block 5 of 60\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 5\nGetting block 6 of 60\nGetting block 7 of 60\n  Reserving size (126) for bucket 6\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 10%\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 7\n  bucket 5: 10%\n  bucket 2: 20%\n  Calculating Z arrays for bucket 6\n  bucket 5: 20%\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 7\n  bucket 5: 30%\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 4\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 4:\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 7:\n  bucket 4: 10%\n  Reserving size (126) for bucket 8\n  bucket 5: 40%\n  bucket 7: 10%\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 30%\n  bucket 4: 20%\n  Calculating Z arrays for bucket 8\n  bucket 3: 10%\n  bucket 6: 20%\n  bucket 7: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 1: 20%\n  bucket 6: 30%\n  bucket 7: 30%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 6: 40%\n  bucket 2: 40%\n  bucket 5: 50%\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 4: 50%\n  Entering block accumulator loop for bucket 8:\n  bucket 1: 30%\n  bucket 5: 60%\n  bucket 4: 60%\n  bucket 6: 50%\n  bucket 2: 60%\n  bucket 5: 70%\n  bucket 6: 60%\n  bucket 3: 50%\n  bucket 7: 40%\n  bucket 5: 80%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 8: 10%\n  bucket 1: 40%\n  bucket 5: 90%\n  bucket 6: 70%\n  bucket 7: 50%\n  bucket 3: 70%\n  bucket 7: 60%\n  bucket 1: 50%\n  bucket 8: 20%\n  bucket 4: 80%\n  bucket 3: 80%\n  bucket 2: 70%\n  bucket 4: 90%\n  bucket 5: 100%\n  bucket 1: 60%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 4: 100%\n  bucket 8: 30%\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 8: 40%\n  Sorting block of length 68 for bucket 4\n  bucket 7: 70%\n  bucket 2: 90%\n  bucket 1: 70%\n  bucket 6: 90%\n  bucket 8: 50%\n  bucket 1: 80%\n  bucket 3: 100%\n  bucket 7: 80%\n  bucket 2: 100%\n  Sorting block of length 106 for bucket 3\n  bucket 1: 90%\n  (Using difference cover)\n  bucket 7: 90%\n  Sorting block time: 00:00:00\n  bucket 8: 60%\n  bucket 1: 100%\nReturning block of 64 for bucket 5\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 84 for bucket 2\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  (Using difference cover)\n  (Using difference cover)\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  bucket 8: 70%\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\nGetting block 10 of 60\nGetting block 11 of 60\n  Reserving size (126) for bucket 9\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 9\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 9:\n  bucket 11: 20%\n  bucket 9: 10%\n  bucket 11: 30%\n  bucket 9: 20%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 30%\n  bucket 11: 40%\n  bucket 10: 10%\n  bucket 9: 40%\n  bucket 11: 50%\n  bucket 10: 20%\n  bucket 9: 50%\n  bucket 10: 30%\n  bucket 11: 60%\n  bucket 9: 60%\n  bucket 10: 40%\n  bucket 11: 70%\n  bucket 9: 70%\n  bucket 10: 50%\n  bucket 11: 80%\n  bucket 9: 80%\n  bucket 10: 60%\n  bucket 11: 90%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 11: 100%\n  bucket 9: 100%\n  Sorting block of length 95 for bucket 11\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 12 of 60\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 13\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 12:\n  bucket 13: 10%\n  bucket 12: 10%\n  bucket 13: 20%\n  bucket 12: 20%\n  bucket 13: 30%\n  bucket 12: 30%\n  bucket 13: 40%\n  bucket 12: 40%\n  bucket 13: 50%\n  bucket 12: 50%\n  bucket 13: 60%\n  bucket 12: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 12: 70%\n  bucket 13: 90%\n  bucket 12: 80%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\nGetting block 17 of 60\n  Calculating Z arrays for bucket 16\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 16:\n  Reserving size (126) for bucket 18\n  bucket 16: 10%\n  Calculating Z arrays for bucket 18\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 16: 40%\n  bucket 17: 30%\n  bucket 16: 50%\n  bucket 17: 40%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 50%\n  bucket 16: 60%\n  bucket 17: 60%\n  bucket 18: 10%\n  bucket 17: 70%\n  bucket 18: 20%\n  bucket 16: 70%\n  bucket 17: 80%\n  bucket 18: 30%\n  bucket 17: 90%\n  bucket 16: 80%\n  bucket 18: 40%\n  bucket 17: 100%\n  bucket 16: 90%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 50%\n  bucket 16: 100%\n  bucket 18: 60%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\nGetting block 22 of 60\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 21\nReturning block of 98 for bucket 20\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 10%\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 21: 20%\n  bucket 22: 30%\n  bucket 21: 30%\n  bucket 22: 40%\n  bucket 21: 40%\n  bucket 22: 50%\n  bucket 21: 50%\n  bucket 22: 60%\n  bucket 21: 60%\n  bucket 22: 70%\n  bucket 21: 70%\n  bucket 22: 80%\n  bucket 21: 80%\n  bucket 22: 90%\n  bucket 21: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nReturning block of 55 for bucket 21\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\nGetting block 26 of 60\n  bucket 25: 40%\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 25: 50%\n  bucket 26: 90%\n  bucket 25: 60%\n  bucket 26: 100%\n  bucket 25: 70%\n  Sorting block of length 107 for bucket 26\n  bucket 25: 80%\n  bucket 25: 90%\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 60\n  bucket 27: 10%\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 20%\n  bucket 27: 30%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 27: 50%\n  bucket 28: 20%\n  bucket 27: 60%\n  bucket 28: 30%\n  bucket 27: 70%\n  bucket 28: 40%\n  bucket 27: 80%\n  bucket 28: 50%\n  bucket 27: 90%\n  bucket 28: 60%\n  bucket 27: 100%\n  bucket 28: 70%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Entering block accumulator loop for bucket 29:\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 10%\n  bucket 29: 20%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 30%\n  bucket 30: 10%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 30: 20%\n  bucket 29: 60%\n  bucket 30: 30%\n  bucket 29: 70%\n  bucket 30: 40%\n  bucket 29: 80%\n  bucket 30: 50%\n  bucket 29: 90%\n  bucket 30: 60%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  bucket 30: 70%\n  (Using difference cover)\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\nGetting block 32 of 60\n  Calculating Z arrays for bucket 31\n  Reserving size (126) for bucket 32\n  Entering block accumulator loop for bucket 31:\n  Calculating Z arrays for bucket 32\n  bucket 31: 10%\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\nGetting block 34 of 60\n  bucket 33: 40%\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 50%\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 35: 10%\n  bucket 36: 20%\n  bucket 35: 20%\n  bucket 36: 30%\n  bucket 35: 30%\n  bucket 36: 40%\n  bucket 35: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 35: 50%\n  bucket 36: 70%\n  bucket 35: 60%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 35: 70%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\nGetting block 38 of 60\n  bucket 37: 10%\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  bucket 37: 20%\n  bucket 37: 30%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 40%\n  bucket 38: 10%\n  bucket 37: 50%\n  bucket 38: 20%\n  bucket 37: 60%\n  bucket 38: 30%\n  bucket 37: 70%\n  bucket 38: 40%\n  bucket 37: 80%\n  bucket 38: 50%\n  bucket 37: 90%\n  bucket 38: 60%\n  bucket 37: 100%\n  bucket 38: 70%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\nGetting block 40 of 60\n  bucket 39: 30%\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  bucket 39: 40%\n  bucket 39: 50%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 39: 90%\n  bucket 40: 30%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 40%\n  bucket 40: 50%\n  Sorting block time: 00:00:00\nGetting block 41 of 60\nReturning block of 126 for bucket 39\n  bucket 40: 60%\n  Reserving size (126) for bucket 41\n  bucket 40: 70%\n  Calculating Z arrays for bucket 41\n  bucket 40: 80%\n  bucket 40: 90%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\nGetting block 46 of 60\n  Calculating Z arrays for bucket 45\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 46: 10%\n  bucket 45: 20%\n  bucket 46: 20%\n  bucket 45: 30%\n  bucket 46: 30%\n  bucket 45: 40%\n  bucket 46: 40%\n  bucket 45: 50%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 45: 60%\n  bucket 46: 70%\n  bucket 45: 70%\n  bucket 46: 80%\n  bucket 45: 80%\n  bucket 46: 90%\n  bucket 45: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  bucket 48: 60%\n  Calculating Z arrays for bucket 49\n  bucket 48: 70%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 80%\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 48: 90%\n  bucket 49: 30%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Entering block accumulator loop for bucket 50:\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  bucket 50: 10%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 20%\n  bucket 51: 10%\n  bucket 50: 30%\n  bucket 51: 20%\n  bucket 50: 40%\n  bucket 51: 30%\n  bucket 50: 50%\n  bucket 51: 40%\n  bucket 50: 60%\n  bucket 51: 50%\n  bucket 50: 70%\n  bucket 51: 60%\n  bucket 50: 80%\n  bucket 51: 70%\n  bucket 50: 90%\n  bucket 51: 80%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\nGetting block 54 of 60\n  bucket 53: 10%\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  bucket 53: 20%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 30%\n  bucket 54: 10%\n  bucket 53: 40%\n  bucket 54: 20%\n  bucket 53: 50%\nGetting block 55 of 60\n  bucket 53: 60%\n  Reserving size (126) for bucket 55\n  bucket 53: 70%\n  Calculating Z arrays for bucket 55\n  bucket 53: 80%\n  bucket 54: 30%\n  bucket 53: 90%\n  Entering block accumulator loop for bucket 55:\n  bucket 53: 100%\n  bucket 54: 40%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 55: 10%\n  bucket 54: 50%\n  bucket 55: 20%\n  bucket 54: 60%\n  bucket 55: 30%\n  bucket 54: 70%\n  bucket 55: 40%\n  bucket 54: 80%\n  bucket 55: 50%\n  bucket 54: 90%\n  bucket 55: 60%\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  bucket 55: 70%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 57:\n  Entering block accumulator loop for bucket 56:\n  bucket 57: 10%\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 57: 20%\n  bucket 56: 30%\n  bucket 57: 30%\n  bucket 56: 40%\n  bucket 57: 40%\n  bucket 56: 50%\n  bucket 57: 50%\n  bucket 56: 60%\n  bucket 57: 60%\n  bucket 56: 70%\n  bucket 57: 70%\n  bucket 56: 80%\n  bucket 57: 80%\n  bucket 56: 90%\n  bucket 57: 90%\n  bucket 56: 100%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:13:09", "plugin": "core", "name": "end_epoch", "raw_value": "1684912389.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:13:08", "plugin": "core", "name": "start_epoch", "raw_value": "1684912388.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 1, "time_seconds": 56.69838261604309, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "f04195f8c1495ad1"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "c832b8804e5cdffd"}, "library|input_2": {"src": "hda", "id": "32224318e25ae3e7"}, "library|type": "paired"}, "job": {"model_class": "Job", "id": "7371ff5c9aab0040", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:13:25.580934", "create_time": "2023-05-24T07:12:59.485222", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-kj7gp", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/4/9/6/dataset_4963a453-a6b9-449c-9a9e-8767b2c21da0.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/6/2/d/dataset_62d45bc2-fcda-4e9e-9082-e018d3bce2f6.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/2/3/5/dataset_2352926e-3308-4833-9a4c-69965f8307b1.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/c/a/e/dataset_cae38304-86d2-4e2f-a062-5143f7152711.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 573, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 574, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 572, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "f04195f8c1495ad1", "src": "hda", "uuid": "4963a453-a6b9-449c-9a9e-8767b2c21da0"}, "input_1": {"id": "c832b8804e5cdffd", "src": "hda", "uuid": "62d45bc2-fcda-4e9e-9082-e018d3bce2f6"}, "input_2": {"id": "32224318e25ae3e7", "src": "hda", "uuid": "2352926e-3308-4833-9a4c-69965f8307b1"}}, "outputs": {"output_alignments": {"id": "8ee3080543d62a2a", "src": "hda", "uuid": "cae38304-86d2-4e2f-a062-5143f7152711"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\nGetting block 7 of 60\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\nGetting block 4 of 60\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 2\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 7\nGetting block 5 of 60\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 3\n  bucket 2: 10%\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  bucket 2: 20%\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 30%\n  bucket 1: 20%\n  bucket 6: 20%\n  bucket 2: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  Reserving size (126) for bucket 5\n  bucket 3: 10%\n  bucket 2: 50%\n  bucket 6: 30%\n  bucket 4: 10%\n  bucket 2: 60%\n  bucket 7: 20%\n  bucket 8: 10%\n  Calculating Z arrays for bucket 5\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 2: 70%\n  Entering block accumulator loop for bucket 5:\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 3: 30%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 2: 80%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 1: 50%\n  bucket 2: 90%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 1: 60%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 2: 100%\n  bucket 3: 50%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 4: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 5: 10%\n  bucket 1: 70%\n  bucket 6: 50%\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 8: 60%\n  bucket 4: 50%\n  bucket 6: 60%\n  bucket 3: 70%\n  bucket 7: 70%\n  bucket 5: 20%\n  bucket 7: 80%\n  bucket 1: 90%\n  bucket 8: 70%\n  bucket 4: 60%\n  bucket 6: 70%\n  bucket 3: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 1: 100%\n  bucket 6: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 7: 100%\n  bucket 3: 100%\n  bucket 6: 90%\nReturning block of 85 for bucket 2\n  bucket 8: 100%\n  Sorting block of length 106 for bucket 3\n  Sorting block of length 94 for bucket 8\n  bucket 6: 100%\n  bucket 5: 30%\n  (Using difference cover)\n  bucket 4: 80%\n  Sorting block of length 75 for bucket 7\n  Sorting block time: 00:00:00\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 5: 40%\nReturning block of 43 for bucket 1\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 5: 50%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 80%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 90%\n  bucket 10: 10%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\nGetting block 13 of 60\n  Reserving size (126) for bucket 12\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 12:\n  bucket 13: 10%\n  bucket 12: 10%\n  bucket 13: 20%\n  bucket 12: 20%\n  bucket 13: 30%\n  bucket 12: 30%\n  bucket 13: 40%\n  bucket 12: 40%\n  bucket 13: 50%\n  bucket 12: 50%\n  bucket 13: 60%\n  bucket 12: 60%\n  bucket 13: 70%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 13: 80%\n  bucket 12: 90%\n  bucket 13: 90%\n  bucket 12: 100%\n  bucket 13: 100%\n  Sorting block of length 82 for bucket 12\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 14:\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  bucket 15: 10%\n  Calculating Z arrays for bucket 16\n  bucket 14: 10%\n  bucket 15: 20%\n  bucket 14: 20%\n  Entering block accumulator loop for bucket 16:\n  bucket 14: 30%\n  bucket 15: 30%\n  bucket 14: 40%\n  bucket 16: 10%\n  bucket 15: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 16: 20%\n  bucket 15: 50%\n  bucket 14: 70%\n  bucket 16: 30%\n  bucket 14: 80%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 16: 40%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 16: 50%\n  bucket 15: 80%\n  bucket 16: 60%\n  bucket 15: 90%\n  bucket 16: 70%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 30%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 19 of 60\nGetting block 20 of 60\n  Reserving size (126) for bucket 19\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 19\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 19: 60%\n  bucket 20: 60%\n  bucket 19: 70%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  bucket 20: 100%\n  Sorting block of length 107 for bucket 19\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\nGetting block 23 of 60\n  bucket 22: 100%\n  Reserving size (126) for bucket 23\n  Sorting block of length 80 for bucket 22\n  Calculating Z arrays for bucket 23\n  (Using difference cover)\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 70%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Calculating Z arrays for bucket 26\n  bucket 24: 80%\n  bucket 25: 10%\n  bucket 24: 90%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 24: 100%\n  bucket 26: 10%\n  Sorting block of length 68 for bucket 24\n  bucket 25: 30%\n  (Using difference cover)\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\nGetting block 28 of 60\n  Reserving size (126) for bucket 27\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 27\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  bucket 28: 100%\n  Sorting block of length 119 for bucket 27\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  bucket 29: 10%\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 29: 40%\n  bucket 30: 40%\n  bucket 29: 50%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\nGetting block 33 of 60\n  Calculating Z arrays for bucket 32\n  Reserving size (126) for bucket 33\nGetting block 34 of 60\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 32:\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 32: 10%\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 34:\n  bucket 32: 20%\n  bucket 33: 10%\n  bucket 34: 10%\n  bucket 32: 30%\n  bucket 33: 20%\n  bucket 34: 20%\n  bucket 32: 40%\n  bucket 33: 30%\n  bucket 32: 50%\n  bucket 34: 30%\n  bucket 33: 40%\n  bucket 32: 60%\n  bucket 34: 40%\n  bucket 33: 50%\n  bucket 32: 70%\n  bucket 34: 50%\n  bucket 32: 80%\n  bucket 34: 60%\n  bucket 33: 60%\n  bucket 32: 90%\n  bucket 34: 70%\n  bucket 33: 70%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  bucket 34: 80%\n  (Using difference cover)\n  bucket 33: 80%\n  bucket 34: 90%\n  bucket 33: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Entering block accumulator loop for bucket 35:\n  Calculating Z arrays for bucket 36\n  bucket 35: 10%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 20%\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 35: 30%\n  bucket 36: 30%\n  bucket 35: 40%\n  bucket 36: 40%\n  bucket 35: 50%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 35: 60%\n  bucket 36: 80%\n  bucket 35: 70%\nGetting block 37 of 60\n  bucket 35: 80%\n  Reserving size (126) for bucket 37\n  bucket 36: 90%\n  bucket 35: 90%\n  bucket 36: 100%\n  Calculating Z arrays for bucket 37\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Entering block accumulator loop for bucket 37:\n  bucket 35: 100%\n  bucket 37: 10%\n  Sorting block of length 112 for bucket 35\n  bucket 37: 20%\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  bucket 37: 30%\n  bucket 37: 40%\n  (Using difference cover)\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  bucket 38: 40%\n  Calculating Z arrays for bucket 39\n  bucket 38: 50%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 60%\n  bucket 39: 10%\n  bucket 38: 70%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 38: 80%\n  bucket 39: 60%\n  bucket 38: 90%\n  bucket 39: 70%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  bucket 39: 80%\n  (Using difference cover)\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 40 of 60\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nReturning block of 126 for bucket 39\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\nGetting block 42 of 60\n  bucket 41: 70%\n  Reserving size (126) for bucket 42\n  bucket 41: 80%\n  Calculating Z arrays for bucket 42\n  bucket 41: 90%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 100%\n  bucket 42: 10%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\nGetting block 44 of 60\n  Reserving size (126) for bucket 43\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 43\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 10%\n  bucket 44: 10%\n  bucket 43: 20%\n  bucket 44: 20%\nGetting block 45 of 60\n  bucket 44: 30%\n  Reserving size (126) for bucket 45\n  bucket 43: 30%\n  bucket 44: 40%\n  Calculating Z arrays for bucket 45\n  bucket 44: 50%\n  bucket 43: 40%\n  bucket 44: 60%\n  bucket 43: 50%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 43: 60%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 90%\n  bucket 43: 70%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 10%\n  bucket 43: 80%\n  bucket 45: 20%\n  bucket 43: 90%\n  bucket 43: 100%\n  bucket 45: 30%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\nGetting block 47 of 60\n  bucket 46: 10%\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 20%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 30%\n  bucket 47: 10%\n  bucket 46: 40%\n  bucket 47: 20%\n  bucket 46: 50%\n  bucket 47: 30%\n  bucket 46: 60%\n  bucket 47: 40%\n  bucket 46: 70%\n  bucket 47: 50%\n  bucket 46: 80%\n  bucket 47: 60%\n  bucket 46: 90%\n  bucket 47: 70%\n  bucket 46: 100%\n  bucket 47: 80%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 50: 10%\n  bucket 49: 20%\n  bucket 50: 20%\n  bucket 49: 30%\n  bucket 50: 30%\n  bucket 49: 40%\n  bucket 50: 40%\n  bucket 49: 50%\n  bucket 50: 50%\n  bucket 49: 60%\n  bucket 50: 60%\n  bucket 49: 70%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 50: 80%\n  bucket 51: 70%\n  bucket 50: 90%\n  bucket 51: 80%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 53 of 60\n  Entering block accumulator loop for bucket 52:\n  Reserving size (126) for bucket 53\n  bucket 52: 10%\n  Calculating Z arrays for bucket 53\n  bucket 52: 20%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 30%\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 52: 40%\n  bucket 53: 40%\n  bucket 52: 50%\n  bucket 53: 50%\n  bucket 52: 60%\n  bucket 53: 60%\n  bucket 52: 70%\n  bucket 53: 70%\n  bucket 52: 80%\n  bucket 53: 80%\n  bucket 52: 90%\n  bucket 53: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Entering block accumulator loop for bucket 54:\n  Reserving size (126) for bucket 55\n  bucket 54: 10%\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  bucket 54: 20%\n  Reserving size (126) for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Calculating Z arrays for bucket 56\n  bucket 54: 30%\n  bucket 55: 10%\n  bucket 54: 40%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 20%\n  bucket 54: 50%\n  bucket 55: 30%\n  bucket 56: 10%\n  bucket 54: 60%\n  bucket 55: 40%\n  bucket 56: 20%\n  bucket 54: 70%\n  bucket 55: 50%\n  bucket 56: 30%\n  bucket 54: 80%\n  bucket 55: 60%\n  bucket 56: 40%\n  bucket 54: 90%\n  bucket 55: 70%\n  bucket 56: 50%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 80%\n  bucket 56: 60%\n  bucket 55: 90%\n  bucket 56: 70%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\nGetting block 58 of 60\n  bucket 57: 60%\n  Reserving size (126) for bucket 58\n  bucket 57: 70%\n  Calculating Z arrays for bucket 58\n  bucket 57: 80%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 90%\n  bucket 58: 10%\n  bucket 57: 100%\n  bucket 58: 20%\n  Sorting block of length 85 for bucket 57\n  bucket 58: 30%\nGetting block 59 of 60\n  (Using difference cover)\n  bucket 58: 40%\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  bucket 58: 50%\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 58: 60%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  bucket 59: 20%\n  bucket 58: 70%\n  bucket 59: 30%\n  bucket 58: 80%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 58: 90%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\nGetting block 7 of 60\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\nGetting block 4 of 60\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 2\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 7\nGetting block 5 of 60\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 3\n  bucket 2: 10%\n  bucket 1: 10%\n  Calculating Z arrays for bucket 3\n  bucket 2: 20%\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 30%\n  bucket 1: 20%\n  bucket 6: 20%\n  bucket 2: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 10%\n  Reserving size (126) for bucket 5\n  bucket 3: 10%\n  bucket 2: 50%\n  bucket 6: 30%\n  bucket 4: 10%\n  bucket 2: 60%\n  bucket 7: 20%\n  bucket 8: 10%\n  Calculating Z arrays for bucket 5\n  bucket 3: 20%\n  bucket 1: 30%\n  bucket 2: 70%\n  Entering block accumulator loop for bucket 5:\n  bucket 8: 20%\n  bucket 7: 30%\n  bucket 3: 30%\n  bucket 1: 40%\n  bucket 4: 20%\n  bucket 2: 80%\n  bucket 6: 40%\n  bucket 7: 40%\n  bucket 8: 30%\n  bucket 1: 50%\n  bucket 2: 90%\n  bucket 3: 40%\n  bucket 4: 30%\n  bucket 1: 60%\n  bucket 7: 50%\n  bucket 8: 40%\n  bucket 2: 100%\n  bucket 3: 50%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 4: 40%\n  bucket 7: 60%\n  bucket 8: 50%\n  bucket 5: 10%\n  bucket 1: 70%\n  bucket 6: 50%\n  bucket 3: 60%\n  bucket 1: 80%\n  bucket 8: 60%\n  bucket 4: 50%\n  bucket 6: 60%\n  bucket 3: 70%\n  bucket 7: 70%\n  bucket 5: 20%\n  bucket 7: 80%\n  bucket 1: 90%\n  bucket 8: 70%\n  bucket 4: 60%\n  bucket 6: 70%\n  bucket 3: 80%\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 1: 100%\n  bucket 6: 80%\n  bucket 4: 70%\n  bucket 3: 90%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 7: 100%\n  bucket 3: 100%\n  bucket 6: 90%\nReturning block of 85 for bucket 2\n  bucket 8: 100%\n  Sorting block of length 106 for bucket 3\n  Sorting block of length 94 for bucket 8\n  bucket 6: 100%\n  bucket 5: 30%\n  (Using difference cover)\n  bucket 4: 80%\n  Sorting block of length 75 for bucket 7\n  Sorting block time: 00:00:00\n  bucket 4: 90%\n  (Using difference cover)\n  bucket 5: 40%\nReturning block of 43 for bucket 1\n  (Using difference cover)\n  bucket 4: 100%\n  bucket 5: 50%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 5: 60%\n  bucket 5: 70%\n  bucket 5: 80%\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 80%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 90%\n  bucket 10: 10%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\nGetting block 13 of 60\n  Reserving size (126) for bucket 12\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 12:\n  bucket 13: 10%\n  bucket 12: 10%\n  bucket 13: 20%\n  bucket 12: 20%\n  bucket 13: 30%\n  bucket 12: 30%\n  bucket 13: 40%\n  bucket 12: 40%\n  bucket 13: 50%\n  bucket 12: 50%\n  bucket 13: 60%\n  bucket 12: 60%\n  bucket 13: 70%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 13: 80%\n  bucket 12: 90%\n  bucket 13: 90%\n  bucket 12: 100%\n  bucket 13: 100%\n  Sorting block of length 82 for bucket 12\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 14:\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  bucket 15: 10%\n  Calculating Z arrays for bucket 16\n  bucket 14: 10%\n  bucket 15: 20%\n  bucket 14: 20%\n  Entering block accumulator loop for bucket 16:\n  bucket 14: 30%\n  bucket 15: 30%\n  bucket 14: 40%\n  bucket 16: 10%\n  bucket 15: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 16: 20%\n  bucket 15: 50%\n  bucket 14: 70%\n  bucket 16: 30%\n  bucket 14: 80%\n  bucket 15: 60%\n  bucket 14: 90%\n  bucket 16: 40%\n  bucket 15: 70%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 16: 50%\n  bucket 15: 80%\n  bucket 16: 60%\n  bucket 15: 90%\n  bucket 16: 70%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 30%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 18: 30%\n  bucket 17: 70%\n  bucket 18: 40%\n  bucket 17: 80%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 19 of 60\nGetting block 20 of 60\n  Reserving size (126) for bucket 19\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 19\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 19: 60%\n  bucket 20: 60%\n  bucket 19: 70%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  bucket 20: 100%\n  Sorting block of length 107 for bucket 19\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\nGetting block 23 of 60\n  bucket 22: 100%\n  Reserving size (126) for bucket 23\n  Sorting block of length 80 for bucket 22\n  Calculating Z arrays for bucket 23\n  (Using difference cover)\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  bucket 24: 70%\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Entering block accumulator loop for bucket 25:\n  Calculating Z arrays for bucket 26\n  bucket 24: 80%\n  bucket 25: 10%\n  bucket 24: 90%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 24: 100%\n  bucket 26: 10%\n  Sorting block of length 68 for bucket 24\n  bucket 25: 30%\n  (Using difference cover)\n  bucket 26: 20%\n  bucket 25: 40%\n  bucket 26: 30%\n  bucket 25: 50%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\nGetting block 28 of 60\n  Reserving size (126) for bucket 27\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 27\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  bucket 28: 100%\n  Sorting block of length 119 for bucket 27\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  bucket 29: 10%\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 29: 20%\n  bucket 30: 20%\n  bucket 29: 30%\n  bucket 30: 30%\n  bucket 29: 40%\n  bucket 30: 40%\n  bucket 29: 50%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\nGetting block 33 of 60\n  Calculating Z arrays for bucket 32\n  Reserving size (126) for bucket 33\nGetting block 34 of 60\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 32:\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 32: 10%\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 34:\n  bucket 32: 20%\n  bucket 33: 10%\n  bucket 34: 10%\n  bucket 32: 30%\n  bucket 33: 20%\n  bucket 34: 20%\n  bucket 32: 40%\n  bucket 33: 30%\n  bucket 32: 50%\n  bucket 34: 30%\n  bucket 33: 40%\n  bucket 32: 60%\n  bucket 34: 40%\n  bucket 33: 50%\n  bucket 32: 70%\n  bucket 34: 50%\n  bucket 32: 80%\n  bucket 34: 60%\n  bucket 33: 60%\n  bucket 32: 90%\n  bucket 34: 70%\n  bucket 33: 70%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  bucket 34: 80%\n  (Using difference cover)\n  bucket 33: 80%\n  bucket 34: 90%\n  bucket 33: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Entering block accumulator loop for bucket 35:\n  Calculating Z arrays for bucket 36\n  bucket 35: 10%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 20%\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 35: 30%\n  bucket 36: 30%\n  bucket 35: 40%\n  bucket 36: 40%\n  bucket 35: 50%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 35: 60%\n  bucket 36: 80%\n  bucket 35: 70%\nGetting block 37 of 60\n  bucket 35: 80%\n  Reserving size (126) for bucket 37\n  bucket 36: 90%\n  bucket 35: 90%\n  bucket 36: 100%\n  Calculating Z arrays for bucket 37\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Entering block accumulator loop for bucket 37:\n  bucket 35: 100%\n  bucket 37: 10%\n  Sorting block of length 112 for bucket 35\n  bucket 37: 20%\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  bucket 37: 30%\n  bucket 37: 40%\n  (Using difference cover)\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  bucket 38: 40%\n  Calculating Z arrays for bucket 39\n  bucket 38: 50%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 60%\n  bucket 39: 10%\n  bucket 38: 70%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 38: 80%\n  bucket 39: 60%\n  bucket 38: 90%\n  bucket 39: 70%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  bucket 39: 80%\n  (Using difference cover)\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 40 of 60\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nReturning block of 126 for bucket 39\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\nGetting block 42 of 60\n  bucket 41: 70%\n  Reserving size (126) for bucket 42\n  bucket 41: 80%\n  Calculating Z arrays for bucket 42\n  bucket 41: 90%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 100%\n  bucket 42: 10%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\nGetting block 44 of 60\n  Reserving size (126) for bucket 43\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 43\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 10%\n  bucket 44: 10%\n  bucket 43: 20%\n  bucket 44: 20%\nGetting block 45 of 60\n  bucket 44: 30%\n  Reserving size (126) for bucket 45\n  bucket 43: 30%\n  bucket 44: 40%\n  Calculating Z arrays for bucket 45\n  bucket 44: 50%\n  bucket 43: 40%\n  bucket 44: 60%\n  bucket 43: 50%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 43: 60%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 90%\n  bucket 43: 70%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 10%\n  bucket 43: 80%\n  bucket 45: 20%\n  bucket 43: 90%\n  bucket 43: 100%\n  bucket 45: 30%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\nGetting block 47 of 60\n  bucket 46: 10%\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 20%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 30%\n  bucket 47: 10%\n  bucket 46: 40%\n  bucket 47: 20%\n  bucket 46: 50%\n  bucket 47: 30%\n  bucket 46: 60%\n  bucket 47: 40%\n  bucket 46: 70%\n  bucket 47: 50%\n  bucket 46: 80%\n  bucket 47: 60%\n  bucket 46: 90%\n  bucket 47: 70%\n  bucket 46: 100%\n  bucket 47: 80%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 50: 10%\n  bucket 49: 20%\n  bucket 50: 20%\n  bucket 49: 30%\n  bucket 50: 30%\n  bucket 49: 40%\n  bucket 50: 40%\n  bucket 49: 50%\n  bucket 50: 50%\n  bucket 49: 60%\n  bucket 50: 60%\n  bucket 49: 70%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 50: 80%\n  bucket 51: 70%\n  bucket 50: 90%\n  bucket 51: 80%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 53 of 60\n  Entering block accumulator loop for bucket 52:\n  Reserving size (126) for bucket 53\n  bucket 52: 10%\n  Calculating Z arrays for bucket 53\n  bucket 52: 20%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 30%\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 52: 40%\n  bucket 53: 40%\n  bucket 52: 50%\n  bucket 53: 50%\n  bucket 52: 60%\n  bucket 53: 60%\n  bucket 52: 70%\n  bucket 53: 70%\n  bucket 52: 80%\n  bucket 53: 80%\n  bucket 52: 90%\n  bucket 53: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\nGetting block 55 of 60\n  Entering block accumulator loop for bucket 54:\n  Reserving size (126) for bucket 55\n  bucket 54: 10%\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  bucket 54: 20%\n  Reserving size (126) for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Calculating Z arrays for bucket 56\n  bucket 54: 30%\n  bucket 55: 10%\n  bucket 54: 40%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 20%\n  bucket 54: 50%\n  bucket 55: 30%\n  bucket 56: 10%\n  bucket 54: 60%\n  bucket 55: 40%\n  bucket 56: 20%\n  bucket 54: 70%\n  bucket 55: 50%\n  bucket 56: 30%\n  bucket 54: 80%\n  bucket 55: 60%\n  bucket 56: 40%\n  bucket 54: 90%\n  bucket 55: 70%\n  bucket 56: 50%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 80%\n  bucket 56: 60%\n  bucket 55: 90%\n  bucket 56: 70%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\nGetting block 58 of 60\n  bucket 57: 60%\n  Reserving size (126) for bucket 58\n  bucket 57: 70%\n  Calculating Z arrays for bucket 58\n  bucket 57: 80%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 90%\n  bucket 58: 10%\n  bucket 57: 100%\n  bucket 58: 20%\n  Sorting block of length 85 for bucket 57\n  bucket 58: 30%\nGetting block 59 of 60\n  (Using difference cover)\n  bucket 58: 40%\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  bucket 58: 50%\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 58: 60%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  bucket 59: 20%\n  bucket 58: 70%\n  bucket 59: 30%\n  bucket 58: 80%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 58: 90%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:13:15", "plugin": "core", "name": "end_epoch", "raw_value": "1684912395.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:13:15", "plugin": "core", "name": "start_epoch", "raw_value": "1684912395.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1-10", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 10, "time_seconds": 37.35270285606384, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "8f8f24ed4c44ba60"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "72864c762cfb2b3f"}, "library|rna_strandness": "R", "library|type": "single", "sum|new_summary": true, "sum|summary_file": true}, "job": {"model_class": "Job", "id": "24542d56685e2b40", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:16:48.375785", "create_time": "2023-05-24T07:16:31.573937", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-6ms84", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/2/0/2/dataset_202f24e3-02e6-41ae-b005-b8479b8f1e4e.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/5/a/d/dataset_5ad73073-90bd-490c-ab4b-1e2e6e47742e.dat' input_f.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'     -U 'input_f.fastq'      --rna-strandness R                        --new-summary  --summary-file summary.txt   | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/d/c/8/dataset_dc8e14ef-be29-493b-83b8-64ed2c6d15ad.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": true, \"summary_file\": true}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 612, \"src\": \"hda\"}]}, \"rna_strandness\": \"R\", \"type\": \"single\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 613, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "8f8f24ed4c44ba60", "src": "hda", "uuid": "202f24e3-02e6-41ae-b005-b8479b8f1e4e"}, "input_1": {"id": "72864c762cfb2b3f", "src": "hda", "uuid": "5ad73073-90bd-490c-ab4b-1e2e6e47742e"}}, "outputs": {"summary_file": {"id": "84964b0ac9995354", "src": "hda", "uuid": "df261aee-c07b-4322-a869-f3e562570ffd"}, "output_alignments": {"id": "393f9866e73ba9b6", "src": "hda", "uuid": "dc8e14ef-be29-493b-83b8-64ed2c6d15ad"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 3 of 60\nGetting block 4 of 60\n  Calculating Z arrays for bucket 1\nGetting block 5 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 2\n  Reserving size (126) for bucket 4\nGetting block 6 of 60\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 4:\n  Reserving size (126) for bucket 6\n  Entering block accumulator loop for bucket 5:\nGetting block 7 of 60\n  bucket 1: 10%\n  bucket 4: 10%\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 2:\n  bucket 5: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 20%\n  bucket 1: 30%\n  Calculating Z arrays for bucket 6\n  bucket 3: 20%\n  bucket 2: 10%\n  bucket 5: 30%\n  bucket 1: 40%\n  bucket 4: 20%\n  Calculating Z arrays for bucket 8\n  bucket 3: 30%\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 5: 40%\n  bucket 2: 40%\n  bucket 7: 10%\n  bucket 2: 50%\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 1: 70%\n  bucket 6: 10%\n  bucket 4: 50%\n  bucket 8: 10%\n  bucket 5: 50%\n  bucket 6: 20%\n  bucket 3: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 5: 60%\n  bucket 3: 60%\n  bucket 7: 30%\n  bucket 2: 70%\n  bucket 5: 70%\n  bucket 6: 30%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 5: 80%\n  bucket 7: 40%\n  bucket 6: 40%\n  bucket 5: 90%\n  bucket 3: 80%\n  bucket 8: 20%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 6: 50%\n  bucket 4: 60%\n  bucket 8: 30%\n  bucket 6: 60%\n  bucket 1: 100%\n  bucket 2: 100%\n  bucket 5: 100%\n  Sorting block of length 84 for bucket 2\n  Sorting block of length 42 for bucket 1\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  (Using difference cover)\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 8: 40%\n  bucket 4: 80%\n  bucket 6: 70%\n  bucket 3: 90%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 3: 100%\n  bucket 6: 80%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 8: 60%\n  bucket 4: 90%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 4: 100%\n  bucket 7: 70%\n  Sorting block of length 68 for bucket 4\n  bucket 8: 80%\n  (Using difference cover)\nReturning block of 64 for bucket 5\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 8: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 8: 100%\n  bucket 7: 100%\n  Sorting block of length 94 for bucket 8\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\nGetting block 12 of 60\n  Entering block accumulator loop for bucket 9:\n  Reserving size (126) for bucket 12\n  bucket 10: 20%\n  bucket 9: 10%\n  Calculating Z arrays for bucket 12\n  bucket 10: 30%\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 10: 40%\n  bucket 9: 20%\n  bucket 12: 10%\n  bucket 10: 50%\n  bucket 9: 30%\n  bucket 12: 20%\n  bucket 10: 60%\n  bucket 11: 10%\n  bucket 12: 30%\n  bucket 10: 70%\n  bucket 12: 40%\n  bucket 9: 40%\n  bucket 10: 80%\n  bucket 12: 50%\n  bucket 11: 20%\n  bucket 10: 90%\n  bucket 12: 60%\n  bucket 11: 30%\n  bucket 10: 100%\n  bucket 12: 70%\n  bucket 9: 50%\n  Sorting block of length 89 for bucket 10\n  bucket 12: 80%\n  (Using difference cover)\n  bucket 9: 60%\n  bucket 12: 90%\n  bucket 9: 70%\n  bucket 12: 100%\n  bucket 9: 80%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  Sorting block time: 00:00:00\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  Sorting block time: 00:00:00\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\nGetting block 14 of 60\n  Calculating Z arrays for bucket 13\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 14: 100%\n  bucket 13: 100%\n  Sorting block of length 82 for bucket 14\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\nGetting block 17 of 60\n  bucket 16: 60%\n  Reserving size (126) for bucket 17\n  bucket 16: 70%\n  Calculating Z arrays for bucket 17\n  bucket 16: 80%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 90%\n  bucket 17: 10%\n  bucket 16: 100%\n  bucket 17: 20%\n  Sorting block of length 100 for bucket 16\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  (Using difference cover)\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 18:\nReturning block of 40 for bucket 17\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\nGetting block 20 of 60\n  bucket 19: 70%\n  Reserving size (126) for bucket 20\n  bucket 19: 80%\n  Calculating Z arrays for bucket 20\n  bucket 19: 90%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 100%\n  bucket 20: 10%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Entering block accumulator loop for bucket 21:\n  Reserving size (126) for bucket 22\n  bucket 21: 10%\n  Calculating Z arrays for bucket 22\n  bucket 21: 20%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 23: 20%\n  bucket 23: 30%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  bucket 26: 20%\n  Calculating Z arrays for bucket 27\n  bucket 26: 30%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 27: 10%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 27: 20%\n  bucket 26: 90%\n  bucket 27: 30%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\nGetting block 31 of 60\n  Reserving size (126) for bucket 30\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 30\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 31: 10%\n  bucket 30: 70%\n  bucket 31: 20%\n  bucket 30: 80%\n  bucket 31: 30%\n  bucket 30: 90%\n  bucket 31: 40%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  bucket 31: 50%\n  (Using difference cover)\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\nGetting block 33 of 60\n  Entering block accumulator loop for bucket 32:\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 10%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 20%\n  bucket 33: 10%\n  bucket 32: 30%\n  bucket 33: 20%\n  bucket 32: 40%\n  bucket 33: 30%\nGetting block 34 of 60\n  bucket 33: 40%\n  Reserving size (126) for bucket 34\n  bucket 33: 50%\n  Calculating Z arrays for bucket 34\n  bucket 33: 60%\n  bucket 33: 70%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 80%\n  bucket 34: 10%\n  bucket 33: 90%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 32: 50%\n  bucket 34: 50%\n  bucket 32: 60%\n  bucket 34: 60%\n  bucket 33: 100%\n  bucket 32: 70%\n  Sorting block of length 44 for bucket 33\n  bucket 34: 70%\n  bucket 32: 80%\n  bucket 34: 80%\n  bucket 32: 90%\n  bucket 34: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\nGetting block 36 of 60\n  bucket 35: 20%\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 30%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 40%\nGetting block 37 of 60\n  bucket 36: 10%\n  bucket 35: 50%\n  bucket 36: 20%\n  Reserving size (126) for bucket 37\n  bucket 36: 30%\n  bucket 35: 60%\n  Calculating Z arrays for bucket 37\n  bucket 36: 40%\n  bucket 35: 70%\n  bucket 36: 50%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 60%\n  bucket 35: 80%\n  bucket 37: 10%\n  bucket 36: 70%\n  bucket 37: 20%\n  bucket 36: 80%\n  bucket 35: 90%\n  bucket 36: 90%\n  bucket 35: 100%\n  bucket 36: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 37: 30%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Reserving size (126) for bucket 38\n  Entering block accumulator loop for bucket 39:\n  Calculating Z arrays for bucket 38\n  bucket 39: 10%\n  bucket 39: 20%\n  Entering block accumulator loop for bucket 38:\n  bucket 39: 30%\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 39: 40%\n  bucket 38: 60%\n  bucket 39: 50%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 39: 60%\n  bucket 38: 90%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\nGetting block 41 of 60\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 41\nReturning block of 42 for bucket 40\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 43: 20%\n  bucket 42: 80%\n  bucket 43: 30%\n  bucket 42: 90%\n  bucket 43: 40%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Entering block accumulator loop for bucket 44:\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  bucket 44: 10%\n  bucket 44: 20%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 30%\n  bucket 45: 10%\n  bucket 44: 40%\n  bucket 45: 20%\n  bucket 44: 50%\n  bucket 45: 30%\n  bucket 44: 60%\n  bucket 45: 40%\n  bucket 44: 70%\n  bucket 45: 50%\n  bucket 44: 80%\n  bucket 45: 60%\n  bucket 44: 90%\n  bucket 45: 70%\n  bucket 44: 100%\n  bucket 45: 80%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\nGetting block 47 of 60\n  Entering block accumulator loop for bucket 46:\n  Reserving size (126) for bucket 47\n  bucket 46: 10%\n  Calculating Z arrays for bucket 47\n  bucket 46: 20%\n  bucket 46: 30%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 40%\n  bucket 47: 10%\n  bucket 46: 50%\n  bucket 47: 20%\n  bucket 46: 60%\n  bucket 47: 30%\n  bucket 46: 70%\n  bucket 47: 40%\n  bucket 46: 80%\n  bucket 47: 50%\n  bucket 46: 90%\n  bucket 47: 60%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\nGetting block 49 of 60\n  Reserving size (126) for bucket 48\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 48\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  bucket 49: 10%\n  bucket 48: 20%\n  bucket 49: 20%\n  bucket 48: 30%\n  bucket 49: 30%\n  bucket 48: 40%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 48: 50%\n  bucket 49: 60%\n  bucket 48: 60%\n  bucket 49: 70%\n  bucket 48: 70%\n  bucket 49: 80%\n  bucket 48: 80%\n  bucket 49: 90%\n  bucket 48: 90%\n  bucket 49: 100%\n  bucket 48: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 55\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 55: 10%\n  bucket 54: 50%\n  bucket 55: 20%\n  bucket 54: 60%\n  bucket 55: 30%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 55: 40%\n  bucket 54: 90%\n  bucket 55: 50%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  Entering block accumulator loop for bucket 59:\n  bucket 60: 20%\n  bucket 59: 10%\n  bucket 60: 30%\n  bucket 59: 20%\n  bucket 60: 40%\n  bucket 59: 30%\n  bucket 58: 10%\n  bucket 59: 40%\n  bucket 58: 20%\n  bucket 60: 50%\n  bucket 59: 50%\n  bucket 60: 60%\n  bucket 58: 30%\n  bucket 59: 60%\n  bucket 60: 70%\n  bucket 59: 70%\n  bucket 58: 40%\n  bucket 60: 80%\n  bucket 59: 80%\n  bucket 58: 50%\n  bucket 60: 90%\n  bucket 59: 90%\n  bucket 60: 100%\n  bucket 58: 60%\n  bucket 59: 100%\n  Sorting block of length 101 for bucket 60\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  (Using difference cover)\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\nHISAT2 summary stats:\n\tTotal reads: 10\n\t\tAligned 0 time: 0 (0.00%)\n\t\tAligned 1 time: 10 (100.00%)\n\t\tAligned >1 times: 0 (0.00%)\n\tOverall alignment rate: 100.00%\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\nHISAT2 summary stats:\n\tTotal reads: 10\n\t\tAligned 0 time: 0 (0.00%)\n\t\tAligned 1 time: 10 (100.00%)\n\t\tAligned >1 times: 0 (0.00%)\n\tOverall alignment rate: 100.00%\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 3 of 60\nGetting block 4 of 60\n  Calculating Z arrays for bucket 1\nGetting block 5 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 2\n  Reserving size (126) for bucket 4\nGetting block 6 of 60\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 4:\n  Reserving size (126) for bucket 6\n  Entering block accumulator loop for bucket 5:\nGetting block 7 of 60\n  bucket 1: 10%\n  bucket 4: 10%\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 7\n  Entering block accumulator loop for bucket 2:\n  bucket 5: 10%\n  bucket 3: 10%\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 20%\n  bucket 1: 30%\n  Calculating Z arrays for bucket 6\n  bucket 3: 20%\n  bucket 2: 10%\n  bucket 5: 30%\n  bucket 1: 40%\n  bucket 4: 20%\n  Calculating Z arrays for bucket 8\n  bucket 3: 30%\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 20%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 3: 40%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 5: 40%\n  bucket 2: 40%\n  bucket 7: 10%\n  bucket 2: 50%\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  bucket 1: 70%\n  bucket 6: 10%\n  bucket 4: 50%\n  bucket 8: 10%\n  bucket 5: 50%\n  bucket 6: 20%\n  bucket 3: 50%\n  bucket 1: 80%\n  bucket 2: 60%\n  bucket 5: 60%\n  bucket 3: 60%\n  bucket 7: 30%\n  bucket 2: 70%\n  bucket 5: 70%\n  bucket 6: 30%\n  bucket 2: 80%\n  bucket 3: 70%\n  bucket 5: 80%\n  bucket 7: 40%\n  bucket 6: 40%\n  bucket 5: 90%\n  bucket 3: 80%\n  bucket 8: 20%\n  bucket 1: 90%\n  bucket 2: 90%\n  bucket 6: 50%\n  bucket 4: 60%\n  bucket 8: 30%\n  bucket 6: 60%\n  bucket 1: 100%\n  bucket 2: 100%\n  bucket 5: 100%\n  Sorting block of length 84 for bucket 2\n  Sorting block of length 42 for bucket 1\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  (Using difference cover)\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 8: 40%\n  bucket 4: 80%\n  bucket 6: 70%\n  bucket 3: 90%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 3: 100%\n  bucket 6: 80%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 8: 60%\n  bucket 4: 90%\n  bucket 7: 60%\n  bucket 8: 70%\n  bucket 4: 100%\n  bucket 7: 70%\n  Sorting block of length 68 for bucket 4\n  bucket 8: 80%\n  (Using difference cover)\nReturning block of 64 for bucket 5\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 8: 90%\n  bucket 7: 90%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 8: 100%\n  bucket 7: 100%\n  Sorting block of length 94 for bucket 8\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\nGetting block 12 of 60\n  Entering block accumulator loop for bucket 9:\n  Reserving size (126) for bucket 12\n  bucket 10: 20%\n  bucket 9: 10%\n  Calculating Z arrays for bucket 12\n  bucket 10: 30%\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 12:\n  bucket 10: 40%\n  bucket 9: 20%\n  bucket 12: 10%\n  bucket 10: 50%\n  bucket 9: 30%\n  bucket 12: 20%\n  bucket 10: 60%\n  bucket 11: 10%\n  bucket 12: 30%\n  bucket 10: 70%\n  bucket 12: 40%\n  bucket 9: 40%\n  bucket 10: 80%\n  bucket 12: 50%\n  bucket 11: 20%\n  bucket 10: 90%\n  bucket 12: 60%\n  bucket 11: 30%\n  bucket 10: 100%\n  bucket 12: 70%\n  bucket 9: 50%\n  Sorting block of length 89 for bucket 10\n  bucket 12: 80%\n  (Using difference cover)\n  bucket 9: 60%\n  bucket 12: 90%\n  bucket 9: 70%\n  bucket 12: 100%\n  bucket 9: 80%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  Sorting block time: 00:00:00\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  Sorting block time: 00:00:00\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\nGetting block 14 of 60\n  Calculating Z arrays for bucket 13\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 13: 60%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 14: 100%\n  bucket 13: 100%\n  Sorting block of length 82 for bucket 14\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\nGetting block 17 of 60\n  bucket 16: 60%\n  Reserving size (126) for bucket 17\n  bucket 16: 70%\n  Calculating Z arrays for bucket 17\n  bucket 16: 80%\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 90%\n  bucket 17: 10%\n  bucket 16: 100%\n  bucket 17: 20%\n  Sorting block of length 100 for bucket 16\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  (Using difference cover)\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 18:\nReturning block of 40 for bucket 17\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\nGetting block 20 of 60\n  bucket 19: 70%\n  Reserving size (126) for bucket 20\n  bucket 19: 80%\n  Calculating Z arrays for bucket 20\n  bucket 19: 90%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 100%\n  bucket 20: 10%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Entering block accumulator loop for bucket 21:\n  Reserving size (126) for bucket 22\n  bucket 21: 10%\n  Calculating Z arrays for bucket 22\n  bucket 21: 20%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 22: 70%\n  bucket 21: 90%\n  bucket 22: 80%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 23: 20%\n  bucket 23: 30%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  bucket 26: 20%\n  Calculating Z arrays for bucket 27\n  bucket 26: 30%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 27: 10%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 27: 20%\n  bucket 26: 90%\n  bucket 27: 30%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\nGetting block 31 of 60\n  Reserving size (126) for bucket 30\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 30\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 31: 10%\n  bucket 30: 70%\n  bucket 31: 20%\n  bucket 30: 80%\n  bucket 31: 30%\n  bucket 30: 90%\n  bucket 31: 40%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  bucket 31: 50%\n  (Using difference cover)\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\nGetting block 33 of 60\n  Entering block accumulator loop for bucket 32:\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 10%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 20%\n  bucket 33: 10%\n  bucket 32: 30%\n  bucket 33: 20%\n  bucket 32: 40%\n  bucket 33: 30%\nGetting block 34 of 60\n  bucket 33: 40%\n  Reserving size (126) for bucket 34\n  bucket 33: 50%\n  Calculating Z arrays for bucket 34\n  bucket 33: 60%\n  bucket 33: 70%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 80%\n  bucket 34: 10%\n  bucket 33: 90%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 32: 50%\n  bucket 34: 50%\n  bucket 32: 60%\n  bucket 34: 60%\n  bucket 33: 100%\n  bucket 32: 70%\n  Sorting block of length 44 for bucket 33\n  bucket 34: 70%\n  bucket 32: 80%\n  bucket 34: 80%\n  bucket 32: 90%\n  bucket 34: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\nGetting block 36 of 60\n  bucket 35: 20%\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 35: 30%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 40%\nGetting block 37 of 60\n  bucket 36: 10%\n  bucket 35: 50%\n  bucket 36: 20%\n  Reserving size (126) for bucket 37\n  bucket 36: 30%\n  bucket 35: 60%\n  Calculating Z arrays for bucket 37\n  bucket 36: 40%\n  bucket 35: 70%\n  bucket 36: 50%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 60%\n  bucket 35: 80%\n  bucket 37: 10%\n  bucket 36: 70%\n  bucket 37: 20%\n  bucket 36: 80%\n  bucket 35: 90%\n  bucket 36: 90%\n  bucket 35: 100%\n  bucket 36: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 37: 30%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Reserving size (126) for bucket 38\n  Entering block accumulator loop for bucket 39:\n  Calculating Z arrays for bucket 38\n  bucket 39: 10%\n  bucket 39: 20%\n  Entering block accumulator loop for bucket 38:\n  bucket 39: 30%\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 39: 40%\n  bucket 38: 60%\n  bucket 39: 50%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 39: 60%\n  bucket 38: 90%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\nGetting block 41 of 60\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 41\nReturning block of 42 for bucket 40\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 43: 20%\n  bucket 42: 80%\n  bucket 43: 30%\n  bucket 42: 90%\n  bucket 43: 40%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Entering block accumulator loop for bucket 44:\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  bucket 44: 10%\n  bucket 44: 20%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 30%\n  bucket 45: 10%\n  bucket 44: 40%\n  bucket 45: 20%\n  bucket 44: 50%\n  bucket 45: 30%\n  bucket 44: 60%\n  bucket 45: 40%\n  bucket 44: 70%\n  bucket 45: 50%\n  bucket 44: 80%\n  bucket 45: 60%\n  bucket 44: 90%\n  bucket 45: 70%\n  bucket 44: 100%\n  bucket 45: 80%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\nGetting block 47 of 60\n  Entering block accumulator loop for bucket 46:\n  Reserving size (126) for bucket 47\n  bucket 46: 10%\n  Calculating Z arrays for bucket 47\n  bucket 46: 20%\n  bucket 46: 30%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 40%\n  bucket 47: 10%\n  bucket 46: 50%\n  bucket 47: 20%\n  bucket 46: 60%\n  bucket 47: 30%\n  bucket 46: 70%\n  bucket 47: 40%\n  bucket 46: 80%\n  bucket 47: 50%\n  bucket 46: 90%\n  bucket 47: 60%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\nGetting block 49 of 60\n  Reserving size (126) for bucket 48\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 48\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  bucket 49: 10%\n  bucket 48: 20%\n  bucket 49: 20%\n  bucket 48: 30%\n  bucket 49: 30%\n  bucket 48: 40%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 48: 50%\n  bucket 49: 60%\n  bucket 48: 60%\n  bucket 49: 70%\n  bucket 48: 70%\n  bucket 49: 80%\n  bucket 48: 80%\n  bucket 49: 90%\n  bucket 48: 90%\n  bucket 49: 100%\n  bucket 48: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 55\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 55: 10%\n  bucket 54: 50%\n  bucket 55: 20%\n  bucket 54: 60%\n  bucket 55: 30%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 55: 40%\n  bucket 54: 90%\n  bucket 55: 50%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  Entering block accumulator loop for bucket 59:\n  bucket 60: 20%\n  bucket 59: 10%\n  bucket 60: 30%\n  bucket 59: 20%\n  bucket 60: 40%\n  bucket 59: 30%\n  bucket 58: 10%\n  bucket 59: 40%\n  bucket 58: 20%\n  bucket 60: 50%\n  bucket 59: 50%\n  bucket 60: 60%\n  bucket 58: 30%\n  bucket 59: 60%\n  bucket 60: 70%\n  bucket 59: 70%\n  bucket 58: 40%\n  bucket 60: 80%\n  bucket 59: 80%\n  bucket 58: 50%\n  bucket 60: 90%\n  bucket 59: 90%\n  bucket 60: 100%\n  bucket 58: 60%\n  bucket 59: 100%\n  Sorting block of length 101 for bucket 60\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  (Using difference cover)\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:16:38", "plugin": "core", "name": "end_epoch", "raw_value": "1684912598.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:16:37", "plugin": "core", "name": "start_epoch", "raw_value": "1684912597.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1-11", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 11, "time_seconds": 36.640846490859985, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "8f8f24ed4c44ba60"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "16fe26278621a1c5"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "e6ec355faafa12a9", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:16:52.044202", "create_time": "2023-05-24T07:16:37.972597", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-zqnwk", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/2/0/2/dataset_202f24e3-02e6-41ae-b005-b8479b8f1e4e.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        seqtk seq -1 '/galaxy/server/database/objects/b/5/1/dataset_b51e0631-3f75-49f5-ad29-0d5a0364e613.dat' > input_f.fastq && seqtk seq -2 '/galaxy/server/database/objects/b/5/1/dataset_b51e0631-3f75-49f5-ad29-0d5a0364e613.dat' > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/9/6/0/dataset_960cf149-8b19-4b96-bc93-ca33733ecb06.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 614, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 613, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "8f8f24ed4c44ba60", "src": "hda", "uuid": "202f24e3-02e6-41ae-b005-b8479b8f1e4e"}, "input_1": {"id": "16fe26278621a1c5", "src": "hda", "uuid": "b51e0631-3f75-49f5-ad29-0d5a0364e613"}}, "outputs": {"output_alignments": {"id": "c8a0cca83a5247db", "src": "hda", "uuid": "960cf149-8b19-4b96-bc93-ca33733ecb06"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 1\nGetting block 5 of 60\nGetting block 3 of 60\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 5\nGetting block 7 of 60\n  Calculating Z arrays for bucket 2\nGetting block 4 of 60\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 3\n  Reserving size (126) for bucket 8\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 6\n  Reserving size (126) for bucket 4\n  bucket 5: 20%\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 7\n  bucket 5: 40%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 6: 10%\n  bucket 5: 50%\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 1: 20%\n  bucket 5: 60%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 4: 10%\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 5: 70%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 3: 30%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 5: 80%\n  bucket 2: 50%\n  bucket 4: 30%\n  bucket 5: 90%\n  bucket 3: 40%\n  bucket 7: 40%\n  bucket 4: 40%\n  bucket 5: 100%\n  bucket 2: 60%\n  Sorting block of length 63 for bucket 5\n  bucket 4: 50%\n  (Using difference cover)\n  bucket 8: 10%\n  bucket 1: 30%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 4: 70%\n  bucket 1: 40%\n  bucket 2: 70%\n  bucket 8: 30%\n  bucket 1: 50%\n  bucket 6: 50%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 4: 80%\n  bucket 3: 70%\n  bucket 4: 90%\n  bucket 6: 60%\n  bucket 7: 70%\n  bucket 1: 60%\n  bucket 3: 80%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 6: 70%\n  bucket 4: 100%\n  Sorting block time: 00:00:00\n  bucket 7: 90%\n  bucket 3: 90%\n  Sorting block of length 68 for bucket 4\n  bucket 6: 80%\n  (Using difference cover)\n  bucket 7: 100%\nReturning block of 64 for bucket 5\n  bucket 3: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block of length 106 for bucket 3\n  bucket 1: 70%\n  bucket 2: 90%\n  (Using difference cover)\n  bucket 1: 80%\n  bucket 8: 60%\n  bucket 1: 90%\n  bucket 2: 100%\n  bucket 6: 90%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 1: 100%\n  bucket 8: 70%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 60\n  bucket 9: 30%\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\nGetting block 13 of 60\n  bucket 12: 20%\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 60%\n  bucket 13: 10%\n  bucket 12: 70%\n  bucket 13: 20%\n  bucket 12: 80%\n  bucket 13: 30%\n  bucket 12: 90%\n  bucket 13: 40%\n  bucket 12: 100%\n  bucket 13: 50%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 60\n  Entering block accumulator loop for bucket 15:\n  Reserving size (126) for bucket 16\n  bucket 15: 10%\n  bucket 15: 20%\n  Calculating Z arrays for bucket 16\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 60%\n  bucket 16: 10%\n  bucket 15: 70%\n  bucket 16: 20%\n  bucket 15: 80%\n  bucket 16: 30%\n  bucket 15: 90%\n  bucket 16: 40%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  bucket 16: 50%\n  (Using difference cover)\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Entering block accumulator loop for bucket 17:\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 18: 30%\n  bucket 17: 80%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 19\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 19: 60%\n  bucket 20: 60%\n  bucket 19: 70%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\nGetting block 23 of 60\n  Calculating Z arrays for bucket 22\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 21: 20%\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 21: 30%\n  bucket 23: 10%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 23: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 23: 70%\n  bucket 21: 100%\n  bucket 22: 80%\n  bucket 23: 80%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 23: 90%\n  bucket 22: 100%\n  bucket 23: 100%\n  Sorting block of length 80 for bucket 22\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\nGetting block 26 of 60\nGetting block 27 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 25\n  Calculating Z arrays for bucket 26\n  Reserving size (126) for bucket 27\n  Entering block accumulator loop for bucket 25:\n  Calculating Z arrays for bucket 27\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 26:\n  bucket 27: 20%\n  bucket 26: 10%\n  bucket 27: 30%\n  bucket 26: 20%\n  bucket 27: 40%\n  bucket 25: 20%\n  bucket 27: 50%\n  bucket 26: 30%\n  bucket 27: 60%\n  bucket 26: 40%\n  bucket 25: 30%\n  bucket 27: 70%\n  bucket 25: 40%\n  bucket 26: 50%\n  bucket 27: 80%\n  bucket 25: 50%\n  bucket 26: 60%\n  bucket 27: 90%\n  bucket 25: 60%\n  bucket 26: 70%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 25: 70%\n  bucket 26: 80%\n  bucket 25: 80%\n  bucket 26: 90%\n  bucket 25: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\nGetting block 33 of 60\n  Calculating Z arrays for bucket 32\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 32:\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 32: 10%\n  bucket 33: 20%\n  bucket 32: 20%\n  bucket 33: 30%\n  bucket 32: 30%\n  bucket 33: 40%\n  bucket 32: 40%\n  bucket 33: 50%\n  bucket 32: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 32: 60%\n  bucket 33: 80%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 33: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\nGetting block 35 of 60\n  bucket 34: 50%\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 60%\n  bucket 34: 70%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 80%\n  bucket 35: 10%\n  bucket 34: 90%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  Sorting block time: 00:00:00\n  bucket 39: 10%\nReturning block of 118 for bucket 38\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\nGetting block 41 of 60\n  Calculating Z arrays for bucket 40\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  Entering block accumulator loop for bucket 40:\n  bucket 41: 20%\n  bucket 40: 10%\n  bucket 41: 30%\n  bucket 40: 20%\n  bucket 41: 40%\n  bucket 40: 30%\n  bucket 41: 50%\n  bucket 40: 40%\n  bucket 41: 60%\n  bucket 40: 50%\n  bucket 41: 70%\n  bucket 40: 60%\n  bucket 41: 80%\nGetting block 42 of 60\n  bucket 40: 70%\n  Reserving size (126) for bucket 42\n  bucket 41: 90%\n  Calculating Z arrays for bucket 42\n  bucket 40: 80%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 40: 90%\n  Entering block accumulator loop for bucket 42:\n  bucket 40: 100%\n  bucket 42: 10%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  Entering block accumulator loop for bucket 43:\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 43: 10%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 43: 20%\n  bucket 44: 80%\n  bucket 43: 30%\n  bucket 44: 90%\n  bucket 43: 40%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Calculating Z arrays for bucket 46\n  bucket 45: 10%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 20%\n  bucket 46: 10%\n  bucket 45: 30%\n  bucket 46: 20%\n  bucket 45: 40%\n  bucket 46: 30%\n  bucket 45: 50%\n  bucket 46: 40%\n  bucket 45: 60%\n  bucket 46: 50%\nGetting block 47 of 60\n  bucket 45: 70%\n  bucket 46: 60%\n  Reserving size (126) for bucket 47\n  bucket 46: 70%\n  bucket 45: 80%\n  Calculating Z arrays for bucket 47\n  bucket 46: 80%\n  bucket 45: 90%\n  bucket 46: 90%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 100%\n  bucket 45: 100%\n  Sorting block of length 69 for bucket 46\n  bucket 47: 10%\n  (Using difference cover)\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  Sorting block time: 00:00:00\n  bucket 47: 100%\nReturning block of 80 for bucket 45\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 48: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 48: 20%\n  bucket 49: 90%\n  bucket 48: 30%\n  bucket 49: 100%\n  bucket 48: 40%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  Sorting block time: 00:00:00\n  bucket 50: 50%\nReturning block of 114 for bucket 48\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\nGetting block 52 of 60\n  Calculating Z arrays for bucket 51\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 10%\n  bucket 52: 10%\n  bucket 51: 20%\n  bucket 52: 20%\n  bucket 51: 30%\n  bucket 52: 30%\n  bucket 51: 40%\n  bucket 52: 40%\n  bucket 51: 50%\n  bucket 52: 50%\n  bucket 51: 60%\n  bucket 52: 60%\n  bucket 51: 70%\n  bucket 52: 70%\n  bucket 51: 80%\n  bucket 52: 80%\n  bucket 51: 90%\n  bucket 52: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 53: 40%\n  bucket 54: 40%\n  bucket 53: 50%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 54: 60%\n  bucket 53: 70%\n  bucket 54: 70%\n  bucket 53: 80%\n  bucket 54: 80%\n  bucket 53: 90%\n  bucket 54: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\nGetting block 56 of 60\n  Reserving size (126) for bucket 55\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 55\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 56: 10%\n  bucket 55: 20%\n  bucket 56: 20%\n  bucket 55: 30%\n  bucket 56: 30%\n  bucket 55: 40%\n  bucket 56: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 56: 50%\n  bucket 55: 80%\n  bucket 56: 60%\n  bucket 55: 90%\n  bucket 56: 70%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 57\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 57:\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 10%\n  bucket 58: 10%\n  bucket 57: 20%\n  bucket 58: 20%\n  bucket 57: 30%\n  bucket 58: 30%\n  bucket 57: 40%\n  bucket 58: 40%\n  bucket 57: 50%\n  bucket 58: 50%\n  bucket 57: 60%\n  bucket 58: 60%\n  bucket 57: 70%\n  bucket 58: 70%\n  bucket 57: 80%\n  bucket 58: 80%\n  bucket 57: 90%\n  bucket 58: 90%\n  bucket 57: 100%\n  bucket 58: 100%\n  Sorting block of length 85 for bucket 57\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  Entering block accumulator loop for bucket 59:\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 59: 10%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 59: 20%\n  bucket 60: 60%\n  bucket 59: 30%\n  bucket 60: 70%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 60: 80%\n  bucket 59: 60%\n  bucket 60: 90%\n  bucket 59: 70%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 1\nGetting block 5 of 60\nGetting block 3 of 60\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 5\nGetting block 7 of 60\n  Calculating Z arrays for bucket 2\nGetting block 4 of 60\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 3\n  Reserving size (126) for bucket 8\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 6\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 6\n  Reserving size (126) for bucket 4\n  bucket 5: 20%\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 30%\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 7\n  bucket 5: 40%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 10%\n  bucket 2: 10%\n  bucket 6: 10%\n  bucket 5: 50%\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 8:\n  bucket 1: 20%\n  bucket 5: 60%\n  Entering block accumulator loop for bucket 4:\n  bucket 2: 20%\n  bucket 3: 20%\n  bucket 2: 30%\n  bucket 4: 10%\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 4: 20%\n  bucket 2: 40%\n  bucket 5: 70%\n  bucket 7: 20%\n  bucket 6: 30%\n  bucket 3: 30%\n  bucket 7: 30%\n  bucket 6: 40%\n  bucket 5: 80%\n  bucket 2: 50%\n  bucket 4: 30%\n  bucket 5: 90%\n  bucket 3: 40%\n  bucket 7: 40%\n  bucket 4: 40%\n  bucket 5: 100%\n  bucket 2: 60%\n  Sorting block of length 63 for bucket 5\n  bucket 4: 50%\n  (Using difference cover)\n  bucket 8: 10%\n  bucket 1: 30%\n  bucket 4: 60%\n  bucket 3: 50%\n  bucket 7: 50%\n  bucket 8: 20%\n  bucket 4: 70%\n  bucket 1: 40%\n  bucket 2: 70%\n  bucket 8: 30%\n  bucket 1: 50%\n  bucket 6: 50%\n  bucket 7: 60%\n  bucket 8: 40%\n  bucket 3: 60%\n  bucket 2: 80%\n  bucket 4: 80%\n  bucket 3: 70%\n  bucket 4: 90%\n  bucket 6: 60%\n  bucket 7: 70%\n  bucket 1: 60%\n  bucket 3: 80%\n  bucket 7: 80%\n  bucket 8: 50%\n  bucket 6: 70%\n  bucket 4: 100%\n  Sorting block time: 00:00:00\n  bucket 7: 90%\n  bucket 3: 90%\n  Sorting block of length 68 for bucket 4\n  bucket 6: 80%\n  (Using difference cover)\n  bucket 7: 100%\nReturning block of 64 for bucket 5\n  bucket 3: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block of length 106 for bucket 3\n  bucket 1: 70%\n  bucket 2: 90%\n  (Using difference cover)\n  bucket 1: 80%\n  bucket 8: 60%\n  bucket 1: 90%\n  bucket 2: 100%\n  bucket 6: 90%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 1: 100%\n  bucket 8: 70%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\nGetting block 10 of 60\n  bucket 9: 30%\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\nGetting block 13 of 60\n  bucket 12: 20%\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 60%\n  bucket 13: 10%\n  bucket 12: 70%\n  bucket 13: 20%\n  bucket 12: 80%\n  bucket 13: 30%\n  bucket 12: 90%\n  bucket 13: 40%\n  bucket 12: 100%\n  bucket 13: 50%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 60\n  Entering block accumulator loop for bucket 15:\n  Reserving size (126) for bucket 16\n  bucket 15: 10%\n  bucket 15: 20%\n  Calculating Z arrays for bucket 16\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 60%\n  bucket 16: 10%\n  bucket 15: 70%\n  bucket 16: 20%\n  bucket 15: 80%\n  bucket 16: 30%\n  bucket 15: 90%\n  bucket 16: 40%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  bucket 16: 50%\n  (Using difference cover)\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Entering block accumulator loop for bucket 17:\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  bucket 17: 20%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 18: 10%\n  bucket 17: 50%\n  bucket 18: 20%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 18: 30%\n  bucket 17: 80%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 17: 90%\n  bucket 18: 80%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 19\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 10%\n  bucket 20: 10%\n  bucket 19: 20%\n  bucket 20: 20%\n  bucket 19: 30%\n  bucket 20: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 19: 60%\n  bucket 20: 60%\n  bucket 19: 70%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\nGetting block 23 of 60\n  Calculating Z arrays for bucket 22\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 21: 20%\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 21: 30%\n  bucket 23: 10%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 23: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 23: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 23: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 23: 70%\n  bucket 21: 100%\n  bucket 22: 80%\n  bucket 23: 80%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 23: 90%\n  bucket 22: 100%\n  bucket 23: 100%\n  Sorting block of length 80 for bucket 22\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\nGetting block 26 of 60\nGetting block 27 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 25\n  Calculating Z arrays for bucket 26\n  Reserving size (126) for bucket 27\n  Entering block accumulator loop for bucket 25:\n  Calculating Z arrays for bucket 27\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  Entering block accumulator loop for bucket 26:\n  bucket 27: 20%\n  bucket 26: 10%\n  bucket 27: 30%\n  bucket 26: 20%\n  bucket 27: 40%\n  bucket 25: 20%\n  bucket 27: 50%\n  bucket 26: 30%\n  bucket 27: 60%\n  bucket 26: 40%\n  bucket 25: 30%\n  bucket 27: 70%\n  bucket 25: 40%\n  bucket 26: 50%\n  bucket 27: 80%\n  bucket 25: 50%\n  bucket 26: 60%\n  bucket 27: 90%\n  bucket 25: 60%\n  bucket 26: 70%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 25: 70%\n  bucket 26: 80%\n  bucket 25: 80%\n  bucket 26: 90%\n  bucket 25: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\nGetting block 33 of 60\n  Calculating Z arrays for bucket 32\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 32:\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 32: 10%\n  bucket 33: 20%\n  bucket 32: 20%\n  bucket 33: 30%\n  bucket 32: 30%\n  bucket 33: 40%\n  bucket 32: 40%\n  bucket 33: 50%\n  bucket 32: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 32: 60%\n  bucket 33: 80%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 33: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\nGetting block 35 of 60\n  bucket 34: 50%\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  bucket 34: 60%\n  bucket 34: 70%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 80%\n  bucket 35: 10%\n  bucket 34: 90%\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  Sorting block time: 00:00:00\n  bucket 39: 10%\nReturning block of 118 for bucket 38\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\nGetting block 41 of 60\n  Calculating Z arrays for bucket 40\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  Entering block accumulator loop for bucket 40:\n  bucket 41: 20%\n  bucket 40: 10%\n  bucket 41: 30%\n  bucket 40: 20%\n  bucket 41: 40%\n  bucket 40: 30%\n  bucket 41: 50%\n  bucket 40: 40%\n  bucket 41: 60%\n  bucket 40: 50%\n  bucket 41: 70%\n  bucket 40: 60%\n  bucket 41: 80%\nGetting block 42 of 60\n  bucket 40: 70%\n  Reserving size (126) for bucket 42\n  bucket 41: 90%\n  Calculating Z arrays for bucket 42\n  bucket 40: 80%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 40: 90%\n  Entering block accumulator loop for bucket 42:\n  bucket 40: 100%\n  bucket 42: 10%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  Entering block accumulator loop for bucket 43:\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 43: 10%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 43: 20%\n  bucket 44: 80%\n  bucket 43: 30%\n  bucket 44: 90%\n  bucket 43: 40%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Calculating Z arrays for bucket 46\n  bucket 45: 10%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 20%\n  bucket 46: 10%\n  bucket 45: 30%\n  bucket 46: 20%\n  bucket 45: 40%\n  bucket 46: 30%\n  bucket 45: 50%\n  bucket 46: 40%\n  bucket 45: 60%\n  bucket 46: 50%\nGetting block 47 of 60\n  bucket 45: 70%\n  bucket 46: 60%\n  Reserving size (126) for bucket 47\n  bucket 46: 70%\n  bucket 45: 80%\n  Calculating Z arrays for bucket 47\n  bucket 46: 80%\n  bucket 45: 90%\n  bucket 46: 90%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 100%\n  bucket 45: 100%\n  Sorting block of length 69 for bucket 46\n  bucket 47: 10%\n  (Using difference cover)\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  Sorting block time: 00:00:00\n  bucket 47: 100%\nReturning block of 80 for bucket 45\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 48: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 48: 20%\n  bucket 49: 90%\n  bucket 48: 30%\n  bucket 49: 100%\n  bucket 48: 40%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  Sorting block time: 00:00:00\n  bucket 50: 50%\nReturning block of 114 for bucket 48\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\nGetting block 52 of 60\n  Calculating Z arrays for bucket 51\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 10%\n  bucket 52: 10%\n  bucket 51: 20%\n  bucket 52: 20%\n  bucket 51: 30%\n  bucket 52: 30%\n  bucket 51: 40%\n  bucket 52: 40%\n  bucket 51: 50%\n  bucket 52: 50%\n  bucket 51: 60%\n  bucket 52: 60%\n  bucket 51: 70%\n  bucket 52: 70%\n  bucket 51: 80%\n  bucket 52: 80%\n  bucket 51: 90%\n  bucket 52: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 53: 40%\n  bucket 54: 40%\n  bucket 53: 50%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 54: 60%\n  bucket 53: 70%\n  bucket 54: 70%\n  bucket 53: 80%\n  bucket 54: 80%\n  bucket 53: 90%\n  bucket 54: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\nGetting block 56 of 60\n  Reserving size (126) for bucket 55\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 55\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 56: 10%\n  bucket 55: 20%\n  bucket 56: 20%\n  bucket 55: 30%\n  bucket 56: 30%\n  bucket 55: 40%\n  bucket 56: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 56: 50%\n  bucket 55: 80%\n  bucket 56: 60%\n  bucket 55: 90%\n  bucket 56: 70%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 57\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 57:\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 10%\n  bucket 58: 10%\n  bucket 57: 20%\n  bucket 58: 20%\n  bucket 57: 30%\n  bucket 58: 30%\n  bucket 57: 40%\n  bucket 58: 40%\n  bucket 57: 50%\n  bucket 58: 50%\n  bucket 57: 60%\n  bucket 58: 60%\n  bucket 57: 70%\n  bucket 58: 70%\n  bucket 57: 80%\n  bucket 58: 80%\n  bucket 57: 90%\n  bucket 58: 90%\n  bucket 57: 100%\n  bucket 58: 100%\n  Sorting block of length 85 for bucket 57\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  Entering block accumulator loop for bucket 59:\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 59: 10%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 59: 20%\n  bucket 60: 60%\n  bucket 59: 30%\n  bucket 60: 70%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 60: 80%\n  bucket 59: 60%\n  bucket 60: 90%\n  bucket 59: 70%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:16:42", "plugin": "core", "name": "end_epoch", "raw_value": "1684912602.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:16:41", "plugin": "core", "name": "start_epoch", "raw_value": "1684912601.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1-12", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 12, "time_seconds": 83.46311259269714, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "214e87e932ac0392"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "bbfc85ce7d44be63"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "35339c09e7ec4da6", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:18:11.829072", "create_time": "2023-05-24T07:17:17.900633", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-k2lpl", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/b/9/6/dataset_b96e8f61-5f16-47e3-b723-e6b22675b04e.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        bzcat '/galaxy/server/database/objects/b/2/c/dataset_b2c1243d-e41a-4dd7-ba47-a570822db61b.dat' | seqtk seq -1 /dev/stdin > input_f.fastq && bzcat '/galaxy/server/database/objects/b/2/c/dataset_b2c1243d-e41a-4dd7-ba47-a570822db61b.dat' | seqtk seq -2 /dev/stdin > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/d/3/3/dataset_d33be684-6d79-41c2-b796-52952c7ea1b4.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 619, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 620, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "214e87e932ac0392", "src": "hda", "uuid": "b96e8f61-5f16-47e3-b723-e6b22675b04e"}, "input_1": {"id": "bbfc85ce7d44be63", "src": "hda", "uuid": "b2c1243d-e41a-4dd7-ba47-a570822db61b"}}, "outputs": {"output_alignments": {"id": "027b3c04e8f53ce9", "src": "hda", "uuid": "d33be684-6d79-41c2-b796-52952c7ea1b4"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 3\n  Reserving size (126) for bucket 2\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 3:\nGetting block 5 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 5\n  bucket 3: 10%\n  bucket 1: 10%\n  Calculating Z arrays for bucket 5\n  bucket 3: 20%\n  bucket 1: 20%\n  Calculating Z arrays for bucket 2\nGetting block 6 of 60\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 2:\nGetting block 8 of 60\nGetting block 7 of 60\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 40%\n  bucket 2: 10%\n  Reserving size (126) for bucket 8\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 3: 50%\n  bucket 1: 60%\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  bucket 5: 10%\n  bucket 1: 70%\n  bucket 3: 60%\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 20%\n  bucket 4: 20%\n  bucket 2: 20%\n  bucket 8: 10%\n  Calculating Z arrays for bucket 6\n  bucket 3: 70%\n  bucket 8: 20%\n  bucket 2: 30%\n  bucket 5: 30%\n  bucket 1: 80%\n  bucket 4: 30%\n  bucket 5: 40%\n  bucket 2: 40%\n  bucket 3: 80%\n  bucket 1: 90%\n  bucket 8: 30%\n  bucket 2: 50%\n  bucket 5: 50%\n  bucket 4: 40%\n  bucket 2: 60%\n  bucket 3: 90%\n  bucket 1: 100%\n  bucket 4: 50%\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 70%\n  Entering block accumulator loop for bucket 7:\n  bucket 8: 40%\n  bucket 5: 60%\n  bucket 4: 60%\n  Sorting block of length 42 for bucket 1\n  bucket 2: 80%\n  (Using difference cover)\n  bucket 6: 10%\n  bucket 8: 50%\n  bucket 5: 70%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 8: 60%\n  bucket 3: 100%\n  bucket 5: 80%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 5: 90%\n  bucket 2: 100%\n  bucket 6: 30%\n  bucket 4: 90%\n  bucket 7: 20%\n  bucket 5: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block of length 63 for bucket 5\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 4: 100%\n  bucket 6: 50%\n  bucket 8: 70%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 7: 40%\n  bucket 6: 60%\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 8: 90%\nReturning block of 107 for bucket 3\n  bucket 7: 50%\nReturning block of 43 for bucket 1\n  bucket 8: 100%\n  bucket 7: 60%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 7: 90%\n  bucket 7: 100%\n  bucket 6: 100%\n  Sorting block of length 75 for bucket 7\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\nGetting block 10 of 60\n  Reserving size (126) for bucket 9\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\nGetting block 12 of 60\n  Calculating Z arrays for bucket 11\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 11:\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  Entering block accumulator loop for bucket 13:\n  bucket 11: 50%\n  bucket 13: 10%\n  bucket 11: 60%\n  bucket 12: 30%\n  bucket 11: 70%\n  bucket 13: 20%\n  bucket 11: 80%\n  bucket 13: 30%\n  bucket 11: 90%\n  bucket 13: 40%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 15: 10%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  Sorting block time: 00:00:00\n  bucket 15: 90%\nReturning block of 101 for bucket 16\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  bucket 17: 20%\n  Calculating Z arrays for bucket 18\n  bucket 17: 30%\n  bucket 17: 40%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 50%\n  bucket 18: 10%\n  bucket 17: 60%\n  bucket 18: 20%\n  bucket 17: 70%\n  bucket 18: 30%\n  bucket 17: 80%\n  bucket 18: 40%\n  bucket 17: 90%\n  bucket 18: 50%\n  bucket 17: 100%\n  bucket 18: 60%\n  Sorting block of length 39 for bucket 17\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 20\n  Calculating Z arrays for bucket 21\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 90%\n  bucket 21: 10%\n  bucket 19: 100%\n  bucket 20: 10%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 21: 20%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 20: 90%\n  bucket 21: 80%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  bucket 21: 90%\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Entering block accumulator loop for bucket 22:\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 22: 40%\n  bucket 23: 30%\n  bucket 22: 50%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\nGetting block 25 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Reserving size (126) for bucket 25\nGetting block 26 of 60\n  Calculating Z arrays for bucket 25\n  Reserving size (126) for bucket 26\n  Entering block accumulator loop for bucket 24:\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 26: 20%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 26: 30%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 26: 40%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 26: 50%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 26: 60%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  bucket 27: 50%\n  Calculating Z arrays for bucket 28\n  bucket 27: 60%\n  bucket 27: 70%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 80%\n  bucket 28: 10%\n  bucket 27: 90%\n  bucket 28: 20%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\nGetting block 30 of 60\n  bucket 29: 60%\n  Reserving size (126) for bucket 30\n  bucket 29: 70%\n  Calculating Z arrays for bucket 30\n  bucket 29: 80%\n  bucket 29: 90%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 20%\n  bucket 32: 30%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 40%\n  bucket 33: 10%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 33: 20%\n  bucket 32: 80%\n  bucket 33: 30%\n  bucket 32: 90%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  bucket 33: 60%\n  (Using difference cover)\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  Sorting block time: 00:00:00\nGetting block 35 of 60\nReturning block of 126 for bucket 32\n  Reserving size (126) for bucket 35\n  bucket 34: 20%\n  Calculating Z arrays for bucket 35\n  bucket 34: 30%\n  Sorting block time: 00:00:00\n  bucket 34: 40%\n  Entering block accumulator loop for bucket 35:\nReturning block of 45 for bucket 33\n  bucket 34: 50%\n  bucket 35: 10%\n  bucket 34: 60%\n  bucket 35: 20%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 35: 30%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\nGetting block 38 of 60\n  Calculating Z arrays for bucket 37\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\nGetting block 39 of 60\n  bucket 37: 10%\n  Reserving size (126) for bucket 39\n  bucket 37: 20%\n  Entering block accumulator loop for bucket 38:\n  Calculating Z arrays for bucket 39\n  bucket 37: 30%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  bucket 38: 10%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 20%\n  Entering block accumulator loop for bucket 40:\n  bucket 38: 30%\n  bucket 39: 10%\n  bucket 40: 10%\n  bucket 38: 40%\n  bucket 40: 20%\n  bucket 39: 20%\n  bucket 38: 50%\n  bucket 37: 40%\n  bucket 39: 30%\n  bucket 38: 60%\n  bucket 40: 30%\n  bucket 37: 50%\n  bucket 39: 40%\n  bucket 40: 40%\n  bucket 38: 70%\n  bucket 37: 60%\n  bucket 40: 50%\n  bucket 38: 80%\n  bucket 39: 50%\n  bucket 37: 70%\n  bucket 40: 60%\n  bucket 38: 90%\n  bucket 39: 60%\n  bucket 37: 80%\n  bucket 38: 100%\n  bucket 39: 70%\n  bucket 40: 70%\n  bucket 37: 90%\n  Sorting block of length 117 for bucket 38\n  bucket 40: 80%\n  bucket 37: 100%\n  bucket 39: 80%\n  (Using difference cover)\n  bucket 40: 90%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 39: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\nGetting block 44 of 60\n  bucket 43: 100%\n  Reserving size (126) for bucket 44\n  Sorting block of length 121 for bucket 43\n  Calculating Z arrays for bucket 44\n  (Using difference cover)\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 20%\n  bucket 46: 10%\n  bucket 45: 30%\n  bucket 46: 20%\n  bucket 45: 40%\n  bucket 46: 30%\n  bucket 45: 50%\n  bucket 46: 40%\n  bucket 45: 60%\n  bucket 46: 50%\n  bucket 45: 70%\n  bucket 46: 60%\n  bucket 45: 80%\n  bucket 46: 70%\n  bucket 45: 90%\n  bucket 46: 80%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\nGetting block 48 of 60\n  bucket 47: 60%\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Entering block accumulator loop for bucket 48:\n  Reserving size (126) for bucket 49\n  bucket 47: 70%\n  Calculating Z arrays for bucket 49\n  bucket 47: 80%\n  bucket 48: 10%\n  bucket 47: 90%\n  bucket 48: 20%\n  bucket 47: 100%\n  Entering block accumulator loop for bucket 49:\n  Sorting block of length 83 for bucket 47\n  bucket 48: 30%\n  (Using difference cover)\n  bucket 49: 10%\n  bucket 48: 40%\n  bucket 49: 20%\n  bucket 48: 50%\n  bucket 49: 30%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 49: 40%\n  bucket 48: 80%\n  bucket 49: 50%\n  bucket 48: 90%\n  bucket 49: 60%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  bucket 49: 70%\n  (Using difference cover)\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Entering block accumulator loop for bucket 50:\n  Reserving size (126) for bucket 51\n  bucket 50: 10%\n  Calculating Z arrays for bucket 51\n  bucket 50: 20%\n  bucket 50: 30%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 40%\n  bucket 51: 10%\n  bucket 50: 50%\n  bucket 51: 20%\n  bucket 50: 60%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 50: 80%\n  bucket 51: 60%\n  bucket 50: 90%\n  bucket 51: 70%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\nGetting block 53 of 60\n  Reserving size (126) for bucket 52\nGetting block 54 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 52\n  Calculating Z arrays for bucket 53\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 10%\n  bucket 53: 10%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 20%\n  bucket 52: 20%\n  bucket 54: 10%\n  bucket 52: 30%\n  bucket 53: 30%\n  bucket 54: 20%\n  bucket 52: 40%\n  bucket 53: 40%\n  bucket 54: 30%\n  bucket 52: 50%\n  bucket 53: 50%\n  bucket 54: 40%\n  bucket 52: 60%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 52: 70%\n  bucket 54: 60%\n  bucket 53: 70%\n  bucket 52: 80%\n  bucket 53: 80%\n  bucket 52: 90%\n  bucket 53: 90%\n  bucket 54: 70%\n  bucket 52: 100%\n  bucket 54: 80%\n  bucket 53: 100%\n  Sorting block of length 106 for bucket 52\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 90%\n  (Using difference cover)\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\nGetting block 58 of 60\n  Entering block accumulator loop for bucket 56:\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 10%\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 56: 20%\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 56: 30%\n  bucket 58: 10%\n  bucket 56: 40%\n  bucket 58: 20%\n  bucket 56: 50%\n  bucket 58: 30%\n  bucket 56: 60%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 56: 70%\n  bucket 58: 90%\n  bucket 56: 80%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\nGetting block 60 of 60\n  bucket 59: 30%\n  Reserving size (126) for bucket 60\n  bucket 59: 40%\n  Calculating Z arrays for bucket 60\n  bucket 59: 50%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 60%\n  bucket 60: 10%\n  bucket 59: 70%\n  bucket 60: 20%\n  bucket 59: 80%\n  bucket 60: 30%\n  bucket 59: 90%\n  bucket 60: 40%\n  bucket 59: 100%\n  bucket 60: 50%\n  Sorting block of length 109 for bucket 59\n  bucket 60: 60%\n  (Using difference cover)\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\nGetting block 3 of 60\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 3\n  Reserving size (126) for bucket 2\nGetting block 4 of 60\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 3:\nGetting block 5 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 5\n  bucket 3: 10%\n  bucket 1: 10%\n  Calculating Z arrays for bucket 5\n  bucket 3: 20%\n  bucket 1: 20%\n  Calculating Z arrays for bucket 2\nGetting block 6 of 60\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 5:\n  bucket 1: 30%\n  bucket 3: 30%\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 2:\nGetting block 8 of 60\nGetting block 7 of 60\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 40%\n  bucket 2: 10%\n  Reserving size (126) for bucket 8\n  bucket 4: 10%\n  bucket 1: 50%\n  bucket 3: 50%\n  bucket 1: 60%\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  bucket 5: 10%\n  bucket 1: 70%\n  bucket 3: 60%\n  Entering block accumulator loop for bucket 8:\n  bucket 5: 20%\n  bucket 4: 20%\n  bucket 2: 20%\n  bucket 8: 10%\n  Calculating Z arrays for bucket 6\n  bucket 3: 70%\n  bucket 8: 20%\n  bucket 2: 30%\n  bucket 5: 30%\n  bucket 1: 80%\n  bucket 4: 30%\n  bucket 5: 40%\n  bucket 2: 40%\n  bucket 3: 80%\n  bucket 1: 90%\n  bucket 8: 30%\n  bucket 2: 50%\n  bucket 5: 50%\n  bucket 4: 40%\n  bucket 2: 60%\n  bucket 3: 90%\n  bucket 1: 100%\n  bucket 4: 50%\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 70%\n  Entering block accumulator loop for bucket 7:\n  bucket 8: 40%\n  bucket 5: 60%\n  bucket 4: 60%\n  Sorting block of length 42 for bucket 1\n  bucket 2: 80%\n  (Using difference cover)\n  bucket 6: 10%\n  bucket 8: 50%\n  bucket 5: 70%\n  bucket 4: 70%\n  bucket 2: 90%\n  bucket 6: 20%\n  bucket 7: 10%\n  bucket 8: 60%\n  bucket 3: 100%\n  bucket 5: 80%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 5: 90%\n  bucket 2: 100%\n  bucket 6: 30%\n  bucket 4: 90%\n  bucket 7: 20%\n  bucket 5: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block of length 63 for bucket 5\n  bucket 6: 40%\n  bucket 7: 30%\n  bucket 4: 100%\n  bucket 6: 50%\n  bucket 8: 70%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 7: 40%\n  bucket 6: 60%\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 8: 90%\nReturning block of 107 for bucket 3\n  bucket 7: 50%\nReturning block of 43 for bucket 1\n  bucket 8: 100%\n  bucket 7: 60%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 7: 70%\n  bucket 6: 80%\n  bucket 7: 80%\n  bucket 6: 90%\n  bucket 7: 90%\n  bucket 7: 100%\n  bucket 6: 100%\n  Sorting block of length 75 for bucket 7\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\nGetting block 10 of 60\n  Reserving size (126) for bucket 9\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 10%\n  bucket 10: 10%\n  bucket 9: 20%\n  bucket 10: 20%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 9: 50%\n  bucket 10: 50%\n  bucket 9: 60%\n  bucket 10: 60%\n  bucket 9: 70%\n  bucket 10: 70%\n  bucket 9: 80%\n  bucket 10: 80%\n  bucket 9: 90%\n  bucket 10: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\nGetting block 12 of 60\n  Calculating Z arrays for bucket 11\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 11:\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 20%\n  bucket 12: 10%\n  bucket 11: 30%\n  bucket 12: 20%\n  bucket 11: 40%\n  Entering block accumulator loop for bucket 13:\n  bucket 11: 50%\n  bucket 13: 10%\n  bucket 11: 60%\n  bucket 12: 30%\n  bucket 11: 70%\n  bucket 13: 20%\n  bucket 11: 80%\n  bucket 13: 30%\n  bucket 11: 90%\n  bucket 13: 40%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 15: 10%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  Sorting block time: 00:00:00\n  bucket 15: 90%\nReturning block of 101 for bucket 16\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  bucket 17: 20%\n  Calculating Z arrays for bucket 18\n  bucket 17: 30%\n  bucket 17: 40%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 50%\n  bucket 18: 10%\n  bucket 17: 60%\n  bucket 18: 20%\n  bucket 17: 70%\n  bucket 18: 30%\n  bucket 17: 80%\n  bucket 18: 40%\n  bucket 17: 90%\n  bucket 18: 50%\n  bucket 17: 100%\n  bucket 18: 60%\n  Sorting block of length 39 for bucket 17\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 20\n  Calculating Z arrays for bucket 21\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  Entering block accumulator loop for bucket 21:\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 90%\n  bucket 21: 10%\n  bucket 19: 100%\n  bucket 20: 10%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 21: 20%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 21: 30%\n  bucket 20: 50%\n  bucket 21: 40%\n  bucket 20: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 20: 90%\n  bucket 21: 80%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  bucket 21: 90%\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Entering block accumulator loop for bucket 22:\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 23: 20%\n  bucket 22: 40%\n  bucket 23: 30%\n  bucket 22: 50%\n  bucket 23: 40%\n  bucket 22: 60%\n  bucket 23: 50%\n  bucket 22: 70%\n  bucket 23: 60%\n  bucket 22: 80%\n  bucket 23: 70%\n  bucket 22: 90%\n  bucket 23: 80%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\nGetting block 25 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Reserving size (126) for bucket 25\nGetting block 26 of 60\n  Calculating Z arrays for bucket 25\n  Reserving size (126) for bucket 26\n  Entering block accumulator loop for bucket 24:\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 26: 10%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 26: 20%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 26: 30%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 26: 40%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 26: 50%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 26: 60%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  bucket 27: 50%\n  Calculating Z arrays for bucket 28\n  bucket 27: 60%\n  bucket 27: 70%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 80%\n  bucket 28: 10%\n  bucket 27: 90%\n  bucket 28: 20%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\nGetting block 30 of 60\n  bucket 29: 60%\n  Reserving size (126) for bucket 30\n  bucket 29: 70%\n  Calculating Z arrays for bucket 30\n  bucket 29: 80%\n  bucket 29: 90%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 20%\n  bucket 32: 30%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 40%\n  bucket 33: 10%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 33: 20%\n  bucket 32: 80%\n  bucket 33: 30%\n  bucket 32: 90%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  bucket 33: 60%\n  (Using difference cover)\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  Sorting block time: 00:00:00\nGetting block 35 of 60\nReturning block of 126 for bucket 32\n  Reserving size (126) for bucket 35\n  bucket 34: 20%\n  Calculating Z arrays for bucket 35\n  bucket 34: 30%\n  Sorting block time: 00:00:00\n  bucket 34: 40%\n  Entering block accumulator loop for bucket 35:\nReturning block of 45 for bucket 33\n  bucket 34: 50%\n  bucket 35: 10%\n  bucket 34: 60%\n  bucket 35: 20%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 35: 30%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\nGetting block 38 of 60\n  Calculating Z arrays for bucket 37\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\nGetting block 39 of 60\n  bucket 37: 10%\n  Reserving size (126) for bucket 39\n  bucket 37: 20%\n  Entering block accumulator loop for bucket 38:\n  Calculating Z arrays for bucket 39\n  bucket 37: 30%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  bucket 38: 10%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 20%\n  Entering block accumulator loop for bucket 40:\n  bucket 38: 30%\n  bucket 39: 10%\n  bucket 40: 10%\n  bucket 38: 40%\n  bucket 40: 20%\n  bucket 39: 20%\n  bucket 38: 50%\n  bucket 37: 40%\n  bucket 39: 30%\n  bucket 38: 60%\n  bucket 40: 30%\n  bucket 37: 50%\n  bucket 39: 40%\n  bucket 40: 40%\n  bucket 38: 70%\n  bucket 37: 60%\n  bucket 40: 50%\n  bucket 38: 80%\n  bucket 39: 50%\n  bucket 37: 70%\n  bucket 40: 60%\n  bucket 38: 90%\n  bucket 39: 60%\n  bucket 37: 80%\n  bucket 38: 100%\n  bucket 39: 70%\n  bucket 40: 70%\n  bucket 37: 90%\n  Sorting block of length 117 for bucket 38\n  bucket 40: 80%\n  bucket 37: 100%\n  bucket 39: 80%\n  (Using difference cover)\n  bucket 40: 90%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 39: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\nGetting block 44 of 60\n  bucket 43: 100%\n  Reserving size (126) for bucket 44\n  Sorting block of length 121 for bucket 43\n  Calculating Z arrays for bucket 44\n  (Using difference cover)\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 20%\n  bucket 46: 10%\n  bucket 45: 30%\n  bucket 46: 20%\n  bucket 45: 40%\n  bucket 46: 30%\n  bucket 45: 50%\n  bucket 46: 40%\n  bucket 45: 60%\n  bucket 46: 50%\n  bucket 45: 70%\n  bucket 46: 60%\n  bucket 45: 80%\n  bucket 46: 70%\n  bucket 45: 90%\n  bucket 46: 80%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\nGetting block 48 of 60\n  bucket 47: 60%\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Entering block accumulator loop for bucket 48:\n  Reserving size (126) for bucket 49\n  bucket 47: 70%\n  Calculating Z arrays for bucket 49\n  bucket 47: 80%\n  bucket 48: 10%\n  bucket 47: 90%\n  bucket 48: 20%\n  bucket 47: 100%\n  Entering block accumulator loop for bucket 49:\n  Sorting block of length 83 for bucket 47\n  bucket 48: 30%\n  (Using difference cover)\n  bucket 49: 10%\n  bucket 48: 40%\n  bucket 49: 20%\n  bucket 48: 50%\n  bucket 49: 30%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 49: 40%\n  bucket 48: 80%\n  bucket 49: 50%\n  bucket 48: 90%\n  bucket 49: 60%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  bucket 49: 70%\n  (Using difference cover)\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Entering block accumulator loop for bucket 50:\n  Reserving size (126) for bucket 51\n  bucket 50: 10%\n  Calculating Z arrays for bucket 51\n  bucket 50: 20%\n  bucket 50: 30%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 40%\n  bucket 51: 10%\n  bucket 50: 50%\n  bucket 51: 20%\n  bucket 50: 60%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 50: 80%\n  bucket 51: 60%\n  bucket 50: 90%\n  bucket 51: 70%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\nGetting block 53 of 60\n  Reserving size (126) for bucket 52\nGetting block 54 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 52\n  Calculating Z arrays for bucket 53\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 10%\n  bucket 53: 10%\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 20%\n  bucket 52: 20%\n  bucket 54: 10%\n  bucket 52: 30%\n  bucket 53: 30%\n  bucket 54: 20%\n  bucket 52: 40%\n  bucket 53: 40%\n  bucket 54: 30%\n  bucket 52: 50%\n  bucket 53: 50%\n  bucket 54: 40%\n  bucket 52: 60%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 52: 70%\n  bucket 54: 60%\n  bucket 53: 70%\n  bucket 52: 80%\n  bucket 53: 80%\n  bucket 52: 90%\n  bucket 53: 90%\n  bucket 54: 70%\n  bucket 52: 100%\n  bucket 54: 80%\n  bucket 53: 100%\n  Sorting block of length 106 for bucket 52\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 54: 90%\n  (Using difference cover)\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\nGetting block 58 of 60\n  Entering block accumulator loop for bucket 56:\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 10%\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 56: 20%\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 56: 30%\n  bucket 58: 10%\n  bucket 56: 40%\n  bucket 58: 20%\n  bucket 56: 50%\n  bucket 58: 30%\n  bucket 56: 60%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 56: 70%\n  bucket 58: 90%\n  bucket 56: 80%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\nGetting block 60 of 60\n  bucket 59: 30%\n  Reserving size (126) for bucket 60\n  bucket 59: 40%\n  Calculating Z arrays for bucket 60\n  bucket 59: 50%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 60%\n  bucket 60: 10%\n  bucket 59: 70%\n  bucket 60: 20%\n  bucket 59: 80%\n  bucket 60: 30%\n  bucket 59: 90%\n  bucket 60: 40%\n  bucket 59: 100%\n  bucket 60: 50%\n  Sorting block of length 109 for bucket 59\n  bucket 60: 60%\n  (Using difference cover)\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:18:00", "plugin": "core", "name": "end_epoch", "raw_value": "1684912680.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:17:59", "plugin": "core", "name": "start_epoch", "raw_value": "1684912679.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1-13", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 13, "time_seconds": 84.25672602653503, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "214e87e932ac0392"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "28d037e20eb86d6f"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "f09f05699ecfeb82", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:18:16.329398", "create_time": "2023-05-24T07:17:22.576332", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-h2l5r", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/b/9/6/dataset_b96e8f61-5f16-47e3-b723-e6b22675b04e.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        seqtk seq -1 '/galaxy/server/database/objects/e/e/e/dataset_eeedbd7a-188e-4781-8d18-f3b59ef7261e.dat' > input_f.fastq && seqtk seq -2 '/galaxy/server/database/objects/e/e/e/dataset_eeedbd7a-188e-4781-8d18-f3b59ef7261e.dat' > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/b/3/5/dataset_b35666e9-90a2-4627-83c5-effb9d35de97.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 621, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 620, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "214e87e932ac0392", "src": "hda", "uuid": "b96e8f61-5f16-47e3-b723-e6b22675b04e"}, "input_1": {"id": "28d037e20eb86d6f", "src": "hda", "uuid": "eeedbd7a-188e-4781-8d18-f3b59ef7261e"}}, "outputs": {"output_alignments": {"id": "95edcae757d08cdd", "src": "hda", "uuid": "b35666e9-90a2-4627-83c5-effb9d35de97"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\nGetting block 4 of 60\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 4\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 2: 40%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\nGetting block 5 of 60\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 1: 50%\nGetting block 6 of 60\n  bucket 1: 60%\n  Reserving size (126) for bucket 6\n  bucket 2: 60%\n  bucket 4: 10%\n  Reserving size (126) for bucket 5\nGetting block 7 of 60\n  bucket 4: 20%\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 6\n  bucket 4: 30%\n  Calculating Z arrays for bucket 7\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 1: 70%\n  Entering block accumulator loop for bucket 6:\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 60%\n  bucket 2: 80%\n  Reserving size (126) for bucket 8\n  bucket 6: 10%\n  bucket 3: 70%\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 5\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 2: 90%\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 30%\n  bucket 2: 100%\n  bucket 1: 80%\n  bucket 7: 30%\n  bucket 4: 50%\n  bucket 8: 10%\n  bucket 3: 80%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 6: 40%\n  bucket 1: 90%\n  bucket 7: 40%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 6: 50%\n  bucket 7: 50%\n  Sorting block time: 00:00:00\n  bucket 8: 20%\n  bucket 5: 10%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 4: 70%\n  bucket 6: 60%\nReturning block of 85 for bucket 2\n  bucket 3: 100%\n  bucket 5: 20%\n  bucket 8: 40%\n  bucket 7: 70%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 1: 100%\n  bucket 7: 80%\n  Sorting block of length 42 for bucket 1\n  bucket 8: 50%\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 6: 70%\n  bucket 7: 90%\n  bucket 5: 30%\n  bucket 8: 60%\n  bucket 4: 90%\n  bucket 7: 100%\n  bucket 6: 80%\n  Sorting block of length 75 for bucket 7\n  bucket 5: 40%\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 4: 100%\n  bucket 6: 90%\n  bucket 5: 50%\n  bucket 8: 80%\n  Sorting block of length 68 for bucket 4\n  bucket 5: 60%\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 6: 100%\n  bucket 5: 70%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 8: 100%\n  bucket 5: 80%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Entering block accumulator loop for bucket 9:\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 10%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 10: 30%\n  bucket 9: 90%\n  bucket 10: 40%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\nGetting block 12 of 60\n  bucket 11: 100%\n  Reserving size (126) for bucket 12\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 60\n  Entering block accumulator loop for bucket 13:\nGetting block 15 of 60\n  Reserving size (126) for bucket 14\nGetting block 16 of 60\n  bucket 13: 10%\n  Reserving size (126) for bucket 15\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Calculating Z arrays for bucket 15\n  Calculating Z arrays for bucket 16\n  bucket 13: 30%\n  bucket 13: 40%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 50%\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 60%\n  bucket 14: 10%\n  bucket 16: 10%\n  bucket 13: 70%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 16: 20%\n  bucket 13: 80%\n  bucket 14: 30%\n  bucket 13: 90%\n  bucket 16: 30%\n  bucket 15: 20%\n  bucket 14: 40%\n  bucket 13: 100%\n  bucket 16: 40%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 15: 30%\n  bucket 14: 50%\n  bucket 16: 50%\n  bucket 15: 40%\n  bucket 16: 60%\n  bucket 14: 60%\n  bucket 16: 70%\n  bucket 14: 70%\n  bucket 16: 80%\n  bucket 14: 80%\n  bucket 16: 90%\n  bucket 14: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Calculating Z arrays for bucket 17\nGetting block 19 of 60\n  Entering block accumulator loop for bucket 18:\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 17:\n  bucket 18: 10%\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\n  bucket 17: 20%\n  bucket 18: 30%\n  bucket 19: 10%\n  bucket 17: 30%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 17: 40%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 19: 40%\n  bucket 17: 60%\n  bucket 18: 70%\n  bucket 17: 70%\n  bucket 18: 80%\n  bucket 17: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 50%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 60%\n  bucket 20: 10%\n  bucket 19: 70%\n  bucket 20: 20%\n  bucket 19: 80%\n  bucket 20: 30%\n  bucket 19: 90%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 20: 60%\nReturning block of 123 for bucket 18\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Entering block accumulator loop for bucket 21:\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  bucket 22: 80%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 60\n  bucket 23: 10%\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 20%\n  bucket 23: 30%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 24: 10%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 24: 30%\n  bucket 23: 80%\n  bucket 24: 40%\n  bucket 23: 90%\n  bucket 24: 50%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\nGetting block 28 of 60\n  Calculating Z arrays for bucket 27\nGetting block 29 of 60\n  Entering block accumulator loop for bucket 27:\n  Reserving size (126) for bucket 29\n  bucket 27: 10%\n  Calculating Z arrays for bucket 29\n  bucket 27: 20%\n  Entering block accumulator loop for bucket 29:\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 29: 10%\n  bucket 27: 50%\n  bucket 29: 20%\n  bucket 27: 60%\n  bucket 29: 30%\n  bucket 27: 70%\n  bucket 29: 40%\n  bucket 27: 80%\n  bucket 29: 50%\n  bucket 27: 90%\n  bucket 29: 60%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Reserving size (126) for bucket 28\n  Sorting block of length 51 for bucket 29\n  Calculating Z arrays for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  (Using difference cover)\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  Sorting block time: 00:00:00\n  bucket 30: 20%\nReturning block of 111 for bucket 31\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\nGetting block 33 of 60\n  bucket 32: 30%\n  Reserving size (126) for bucket 33\n  bucket 32: 40%\n  Calculating Z arrays for bucket 33\n  bucket 32: 50%\n  bucket 32: 60%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 33: 10%\n  bucket 32: 90%\n  bucket 33: 20%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\nGetting block 35 of 60\n  Reserving size (126) for bucket 34\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 34:\n  bucket 35: 10%\n  bucket 34: 10%\n  bucket 35: 20%\n  bucket 34: 20%\n  bucket 35: 30%\n  bucket 34: 30%\n  bucket 35: 40%\n  bucket 34: 40%\n  bucket 35: 50%\n  bucket 34: 50%\n  bucket 35: 60%\n  bucket 34: 60%\n  bucket 35: 70%\n  bucket 34: 70%\n  bucket 35: 80%\n  bucket 34: 80%\n  bucket 35: 90%\n  bucket 34: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  Calculating Z arrays for bucket 37\n  bucket 36: 30%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 40%\n  bucket 37: 10%\n  bucket 36: 50%\n  bucket 37: 20%\n  bucket 36: 60%\n  bucket 37: 30%\n  bucket 36: 70%\n  bucket 37: 40%\n  bucket 36: 80%\n  bucket 37: 50%\n  bucket 36: 90%\n  bucket 37: 60%\n  bucket 36: 100%\n  bucket 37: 70%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\nGetting block 39 of 60\n  Reserving size (126) for bucket 38\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 38\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 38: 10%\n  bucket 39: 20%\n  bucket 38: 20%\n  bucket 39: 30%\n  bucket 38: 30%\n  bucket 39: 40%\n  bucket 38: 40%\n  bucket 39: 50%\n  bucket 38: 50%\n  bucket 39: 60%\n  bucket 38: 60%\n  bucket 39: 70%\n  bucket 38: 70%\n  bucket 39: 80%\n  bucket 38: 80%\n  bucket 39: 90%\n  bucket 38: 90%\n  bucket 39: 100%\n  bucket 38: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  bucket 40: 70%\n  Calculating Z arrays for bucket 41\n  bucket 40: 80%\n  bucket 40: 90%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\nGetting block 43 of 60\n  Calculating Z arrays for bucket 42\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 43: 10%\n  bucket 42: 30%\n  bucket 43: 20%\n  bucket 42: 40%\n  bucket 43: 30%\n  bucket 42: 50%\n  bucket 43: 40%\n  bucket 42: 60%\n  bucket 43: 50%\n  bucket 42: 70%\n  bucket 43: 60%\n  bucket 42: 80%\n  bucket 43: 70%\n  bucket 42: 90%\n  bucket 43: 80%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Entering block accumulator loop for bucket 44:\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  bucket 44: 10%\n  bucket 44: 20%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 30%\n  bucket 45: 10%\n  bucket 44: 40%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 44: 50%\n  bucket 45: 40%\n  bucket 44: 60%\n  bucket 45: 50%\n  bucket 44: 70%\n  bucket 45: 60%\n  bucket 44: 80%\n  bucket 45: 70%\n  bucket 44: 90%\n  bucket 45: 80%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  bucket 47: 20%\n  Entering block accumulator loop for bucket 46:\n  bucket 47: 30%\n  bucket 46: 10%\n  bucket 47: 40%\n  bucket 46: 20%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 48: 10%\n  bucket 47: 70%\n  bucket 46: 30%\n  bucket 47: 80%\n  bucket 46: 40%\n  bucket 47: 90%\n  bucket 46: 50%\n  bucket 47: 100%\n  bucket 48: 20%\n  Sorting block of length 83 for bucket 47\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  Sorting block time: 00:00:00\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\nGetting block 51 of 60\n  Calculating Z arrays for bucket 50\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\nGetting block 52 of 60\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 20%\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 51: 10%\n  bucket 50: 30%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 20%\n  bucket 50: 40%\n  bucket 51: 30%\n  bucket 52: 10%\n  bucket 50: 50%\n  bucket 51: 40%\n  bucket 50: 60%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 51: 50%\n  bucket 50: 90%\n  bucket 51: 60%\n  bucket 52: 40%\n  bucket 51: 70%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\nGetting block 54 of 60\n  Calculating Z arrays for bucket 53\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 53: 40%\n  bucket 54: 40%\n  bucket 53: 50%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 54: 60%\n  bucket 53: 70%\n  bucket 54: 70%\n  bucket 53: 80%\n  bucket 54: 80%\n  bucket 53: 90%\n  bucket 54: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Entering block accumulator loop for bucket 55:\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 10%\n  bucket 55: 20%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 56: 10%\n  bucket 55: 50%\n  bucket 56: 20%\n  bucket 55: 60%\n  bucket 56: 30%\n  bucket 55: 70%\n  bucket 56: 40%\n  bucket 55: 80%\n  bucket 56: 50%\n  bucket 55: 90%\n  bucket 56: 60%\n  bucket 55: 100%\n  bucket 56: 70%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Entering block accumulator loop for bucket 58:\n  Reserving size (126) for bucket 59\n  bucket 58: 10%\n  Calculating Z arrays for bucket 59\n  bucket 58: 20%\nGetting block 60 of 60\n  Entering block accumulator loop for bucket 59:\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  bucket 58: 30%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 10%\n  bucket 58: 40%\n  bucket 60: 10%\n  bucket 59: 20%\n  bucket 60: 20%\n  bucket 58: 50%\n  bucket 60: 30%\n  bucket 59: 30%\n  bucket 58: 60%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 58: 70%\n  bucket 60: 60%\n  bucket 59: 40%\n  bucket 60: 70%\n  bucket 58: 80%\n  bucket 60: 80%\n  bucket 59: 50%\n  bucket 60: 90%\n  bucket 58: 90%\n  bucket 60: 100%\n  bucket 59: 60%\n  bucket 58: 100%\n  Sorting block of length 101 for bucket 60\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  (Using difference cover)\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\nGetting block 4 of 60\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 4\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  bucket 1: 20%\n  bucket 2: 20%\n  bucket 3: 10%\n  bucket 1: 30%\n  bucket 2: 30%\n  bucket 3: 20%\n  bucket 1: 40%\n  bucket 2: 40%\n  Entering block accumulator loop for bucket 4:\n  bucket 3: 30%\nGetting block 5 of 60\n  bucket 2: 50%\n  bucket 3: 40%\n  bucket 1: 50%\nGetting block 6 of 60\n  bucket 1: 60%\n  Reserving size (126) for bucket 6\n  bucket 2: 60%\n  bucket 4: 10%\n  Reserving size (126) for bucket 5\nGetting block 7 of 60\n  bucket 4: 20%\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 6\n  bucket 4: 30%\n  Calculating Z arrays for bucket 7\n  bucket 3: 50%\n  bucket 2: 70%\n  bucket 1: 70%\n  Entering block accumulator loop for bucket 6:\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 7:\n  bucket 3: 60%\n  bucket 2: 80%\n  Reserving size (126) for bucket 8\n  bucket 6: 10%\n  bucket 3: 70%\n  Calculating Z arrays for bucket 8\n  Calculating Z arrays for bucket 5\n  bucket 7: 10%\n  bucket 6: 20%\n  bucket 2: 90%\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 30%\n  bucket 2: 100%\n  bucket 1: 80%\n  bucket 7: 30%\n  bucket 4: 50%\n  bucket 8: 10%\n  bucket 3: 80%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 6: 40%\n  bucket 1: 90%\n  bucket 7: 40%\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 6: 50%\n  bucket 7: 50%\n  Sorting block time: 00:00:00\n  bucket 8: 20%\n  bucket 5: 10%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 4: 70%\n  bucket 6: 60%\nReturning block of 85 for bucket 2\n  bucket 3: 100%\n  bucket 5: 20%\n  bucket 8: 40%\n  bucket 7: 70%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 1: 100%\n  bucket 7: 80%\n  Sorting block of length 42 for bucket 1\n  bucket 8: 50%\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 6: 70%\n  bucket 7: 90%\n  bucket 5: 30%\n  bucket 8: 60%\n  bucket 4: 90%\n  bucket 7: 100%\n  bucket 6: 80%\n  Sorting block of length 75 for bucket 7\n  bucket 5: 40%\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 4: 100%\n  bucket 6: 90%\n  bucket 5: 50%\n  bucket 8: 80%\n  Sorting block of length 68 for bucket 4\n  bucket 5: 60%\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 6: 100%\n  bucket 5: 70%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 8: 100%\n  bucket 5: 80%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 5: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\nGetting block 10 of 60\n  Entering block accumulator loop for bucket 9:\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 10: 10%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 10: 30%\n  bucket 9: 90%\n  bucket 10: 40%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\nGetting block 12 of 60\n  bucket 11: 100%\n  Reserving size (126) for bucket 12\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 60\n  Entering block accumulator loop for bucket 13:\nGetting block 15 of 60\n  Reserving size (126) for bucket 14\nGetting block 16 of 60\n  bucket 13: 10%\n  Reserving size (126) for bucket 15\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  Calculating Z arrays for bucket 15\n  Calculating Z arrays for bucket 16\n  bucket 13: 30%\n  bucket 13: 40%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 50%\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 15:\n  bucket 13: 60%\n  bucket 14: 10%\n  bucket 16: 10%\n  bucket 13: 70%\n  bucket 15: 10%\n  bucket 14: 20%\n  bucket 16: 20%\n  bucket 13: 80%\n  bucket 14: 30%\n  bucket 13: 90%\n  bucket 16: 30%\n  bucket 15: 20%\n  bucket 14: 40%\n  bucket 13: 100%\n  bucket 16: 40%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 15: 30%\n  bucket 14: 50%\n  bucket 16: 50%\n  bucket 15: 40%\n  bucket 16: 60%\n  bucket 14: 60%\n  bucket 16: 70%\n  bucket 14: 70%\n  bucket 16: 80%\n  bucket 14: 80%\n  bucket 16: 90%\n  bucket 14: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Calculating Z arrays for bucket 17\nGetting block 19 of 60\n  Entering block accumulator loop for bucket 18:\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 17:\n  bucket 18: 10%\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 20%\n  bucket 17: 20%\n  bucket 18: 30%\n  bucket 19: 10%\n  bucket 17: 30%\n  bucket 18: 40%\n  bucket 19: 20%\n  bucket 17: 40%\n  bucket 18: 50%\n  bucket 19: 30%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 19: 40%\n  bucket 17: 60%\n  bucket 18: 70%\n  bucket 17: 70%\n  bucket 18: 80%\n  bucket 17: 80%\n  bucket 18: 90%\n  bucket 17: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  bucket 19: 50%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 60%\n  bucket 20: 10%\n  bucket 19: 70%\n  bucket 20: 20%\n  bucket 19: 80%\n  bucket 20: 30%\n  bucket 19: 90%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 20: 60%\nReturning block of 123 for bucket 18\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Entering block accumulator loop for bucket 21:\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  bucket 21: 10%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 22: 10%\n  bucket 21: 40%\n  bucket 22: 20%\n  bucket 21: 50%\n  bucket 22: 30%\n  bucket 21: 60%\n  bucket 22: 40%\n  bucket 21: 70%\n  bucket 22: 50%\n  bucket 21: 80%\n  bucket 22: 60%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  bucket 22: 80%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\nGetting block 24 of 60\n  bucket 23: 10%\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 20%\n  bucket 23: 30%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 24: 10%\n  bucket 23: 60%\n  bucket 24: 20%\n  bucket 23: 70%\n  bucket 24: 30%\n  bucket 23: 80%\n  bucket 24: 40%\n  bucket 23: 90%\n  bucket 24: 50%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\nGetting block 28 of 60\n  Calculating Z arrays for bucket 27\nGetting block 29 of 60\n  Entering block accumulator loop for bucket 27:\n  Reserving size (126) for bucket 29\n  bucket 27: 10%\n  Calculating Z arrays for bucket 29\n  bucket 27: 20%\n  Entering block accumulator loop for bucket 29:\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 29: 10%\n  bucket 27: 50%\n  bucket 29: 20%\n  bucket 27: 60%\n  bucket 29: 30%\n  bucket 27: 70%\n  bucket 29: 40%\n  bucket 27: 80%\n  bucket 29: 50%\n  bucket 27: 90%\n  bucket 29: 60%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Reserving size (126) for bucket 28\n  Sorting block of length 51 for bucket 29\n  Calculating Z arrays for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  (Using difference cover)\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  Sorting block time: 00:00:00\n  bucket 30: 20%\nReturning block of 111 for bucket 31\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\nGetting block 33 of 60\n  bucket 32: 30%\n  Reserving size (126) for bucket 33\n  bucket 32: 40%\n  Calculating Z arrays for bucket 33\n  bucket 32: 50%\n  bucket 32: 60%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 33: 10%\n  bucket 32: 90%\n  bucket 33: 20%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\nGetting block 35 of 60\n  Reserving size (126) for bucket 34\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 34:\n  bucket 35: 10%\n  bucket 34: 10%\n  bucket 35: 20%\n  bucket 34: 20%\n  bucket 35: 30%\n  bucket 34: 30%\n  bucket 35: 40%\n  bucket 34: 40%\n  bucket 35: 50%\n  bucket 34: 50%\n  bucket 35: 60%\n  bucket 34: 60%\n  bucket 35: 70%\n  bucket 34: 70%\n  bucket 35: 80%\n  bucket 34: 80%\n  bucket 35: 90%\n  bucket 34: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  Calculating Z arrays for bucket 37\n  bucket 36: 30%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 40%\n  bucket 37: 10%\n  bucket 36: 50%\n  bucket 37: 20%\n  bucket 36: 60%\n  bucket 37: 30%\n  bucket 36: 70%\n  bucket 37: 40%\n  bucket 36: 80%\n  bucket 37: 50%\n  bucket 36: 90%\n  bucket 37: 60%\n  bucket 36: 100%\n  bucket 37: 70%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\nGetting block 39 of 60\n  Reserving size (126) for bucket 38\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 38\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 38: 10%\n  bucket 39: 20%\n  bucket 38: 20%\n  bucket 39: 30%\n  bucket 38: 30%\n  bucket 39: 40%\n  bucket 38: 40%\n  bucket 39: 50%\n  bucket 38: 50%\n  bucket 39: 60%\n  bucket 38: 60%\n  bucket 39: 70%\n  bucket 38: 70%\n  bucket 39: 80%\n  bucket 38: 80%\n  bucket 39: 90%\n  bucket 38: 90%\n  bucket 39: 100%\n  bucket 38: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  bucket 40: 70%\n  Calculating Z arrays for bucket 41\n  bucket 40: 80%\n  bucket 40: 90%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 10%\n  bucket 41: 20%\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\nGetting block 43 of 60\n  Calculating Z arrays for bucket 42\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 42:\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 43: 10%\n  bucket 42: 30%\n  bucket 43: 20%\n  bucket 42: 40%\n  bucket 43: 30%\n  bucket 42: 50%\n  bucket 43: 40%\n  bucket 42: 60%\n  bucket 43: 50%\n  bucket 42: 70%\n  bucket 43: 60%\n  bucket 42: 80%\n  bucket 43: 70%\n  bucket 42: 90%\n  bucket 43: 80%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\nGetting block 45 of 60\n  Entering block accumulator loop for bucket 44:\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  bucket 44: 10%\n  bucket 44: 20%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 30%\n  bucket 45: 10%\n  bucket 44: 40%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 44: 50%\n  bucket 45: 40%\n  bucket 44: 60%\n  bucket 45: 50%\n  bucket 44: 70%\n  bucket 45: 60%\n  bucket 44: 80%\n  bucket 45: 70%\n  bucket 44: 90%\n  bucket 45: 80%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  bucket 47: 20%\n  Entering block accumulator loop for bucket 46:\n  bucket 47: 30%\n  bucket 46: 10%\n  bucket 47: 40%\n  bucket 46: 20%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 48: 10%\n  bucket 47: 70%\n  bucket 46: 30%\n  bucket 47: 80%\n  bucket 46: 40%\n  bucket 47: 90%\n  bucket 46: 50%\n  bucket 47: 100%\n  bucket 48: 20%\n  Sorting block of length 83 for bucket 47\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  Sorting block time: 00:00:00\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\nGetting block 51 of 60\n  Calculating Z arrays for bucket 50\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\nGetting block 52 of 60\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 20%\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  bucket 51: 10%\n  bucket 50: 30%\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 20%\n  bucket 50: 40%\n  bucket 51: 30%\n  bucket 52: 10%\n  bucket 50: 50%\n  bucket 51: 40%\n  bucket 50: 60%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 51: 50%\n  bucket 50: 90%\n  bucket 51: 60%\n  bucket 52: 40%\n  bucket 51: 70%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\nGetting block 54 of 60\n  Calculating Z arrays for bucket 53\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 53: 40%\n  bucket 54: 40%\n  bucket 53: 50%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 54: 60%\n  bucket 53: 70%\n  bucket 54: 70%\n  bucket 53: 80%\n  bucket 54: 80%\n  bucket 53: 90%\n  bucket 54: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Entering block accumulator loop for bucket 55:\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 10%\n  bucket 55: 20%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 56: 10%\n  bucket 55: 50%\n  bucket 56: 20%\n  bucket 55: 60%\n  bucket 56: 30%\n  bucket 55: 70%\n  bucket 56: 40%\n  bucket 55: 80%\n  bucket 56: 50%\n  bucket 55: 90%\n  bucket 56: 60%\n  bucket 55: 100%\n  bucket 56: 70%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Entering block accumulator loop for bucket 58:\n  Reserving size (126) for bucket 59\n  bucket 58: 10%\n  Calculating Z arrays for bucket 59\n  bucket 58: 20%\nGetting block 60 of 60\n  Entering block accumulator loop for bucket 59:\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  bucket 58: 30%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 10%\n  bucket 58: 40%\n  bucket 60: 10%\n  bucket 59: 20%\n  bucket 60: 20%\n  bucket 58: 50%\n  bucket 60: 30%\n  bucket 59: 30%\n  bucket 58: 60%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 58: 70%\n  bucket 60: 60%\n  bucket 59: 40%\n  bucket 60: 70%\n  bucket 58: 80%\n  bucket 60: 80%\n  bucket 59: 50%\n  bucket 60: 90%\n  bucket 58: 90%\n  bucket 60: 100%\n  bucket 59: 60%\n  bucket 58: 100%\n  Sorting block of length 101 for bucket 60\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  (Using difference cover)\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:18:05", "plugin": "core", "name": "end_epoch", "raw_value": "1684912685.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:18:04", "plugin": "core", "name": "start_epoch", "raw_value": "1684912684.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1-14", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 14, "time_seconds": 38.19362735748291, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "6fddca949d69ba0a"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "59a15ec15c733b74"}, "library|type": "paired_interleaved"}, "job": {"model_class": "Job", "id": "830b99c3f740aa64", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:18:50.125962", "create_time": "2023-05-24T07:18:33.613480", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-hblz8", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/6/0/c/dataset_60c5c06b-6099-416f-817e-113cd2b54cc6.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        seqtk seq -1 '/galaxy/server/database/objects/9/5/c/dataset_95c1e9f8-ec24-424e-8f77-5bfcb0caf477.dat' > input_f.fasta && seqtk seq -2 '/galaxy/server/database/objects/9/5/c/dataset_95c1e9f8-ec24-424e-8f77-5bfcb0caf477.dat' > input_r.fasta &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f   -1 input_f.fasta -2 input_r.fasta                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/2/0/a/dataset_20a98b0b-6ef4-42ab-9e06-7a20303adeab.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 625, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 626, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "6fddca949d69ba0a", "src": "hda", "uuid": "60c5c06b-6099-416f-817e-113cd2b54cc6"}, "input_1": {"id": "59a15ec15c733b74", "src": "hda", "uuid": "95c1e9f8-ec24-424e-8f77-5bfcb0caf477"}}, "outputs": {"output_alignments": {"id": "42435cba0cf9474c", "src": "hda", "uuid": "20a98b0b-6ef4-42ab-9e06-7a20303adeab"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 60\n  bucket 1: 10%\n  Reserving size (126) for bucket 2\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 2\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 6\nGetting block 7 of 60\n  bucket 1: 20%\nGetting block 3 of 60\n  Entering block accumulator loop for bucket 4:\n  Reserving size (126) for bucket 7\n  bucket 1: 30%\n  Calculating Z arrays for bucket 7\n  bucket 1: 40%\n  Reserving size (126) for bucket 3\nGetting block 8 of 60\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 5:\n  bucket 4: 10%\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 8\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  bucket 6: 10%\n  bucket 7: 30%\n  bucket 5: 10%\n  bucket 4: 20%\n  bucket 1: 50%\n  bucket 3: 10%\n  bucket 6: 20%\n  Calculating Z arrays for bucket 8\n  bucket 5: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 2: 20%\n  bucket 6: 40%\n  bucket 5: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 3: 40%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 7: 40%\n  bucket 1: 70%\n  bucket 8: 10%\n  bucket 5: 50%\n  bucket 2: 40%\n  bucket 6: 50%\n  bucket 8: 20%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 5: 60%\n  bucket 7: 50%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 5: 70%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 2: 50%\n  bucket 1: 100%\n  bucket 3: 80%\n  bucket 7: 80%\n  bucket 4: 70%\n  bucket 8: 50%\n  bucket 3: 90%\n  Sorting block of length 42 for bucket 1\n  bucket 5: 80%\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 3: 100%\n  bucket 2: 60%\n  Sorting block of length 106 for bucket 3\n  bucket 7: 100%\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 2: 70%\n  bucket 6: 60%\n  bucket 8: 80%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 4: 80%\n  bucket 6: 70%\n  bucket 5: 100%\n  bucket 8: 90%\n  bucket 2: 80%\n  bucket 4: 90%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 8: 100%\n  bucket 4: 100%\n  Sorting block of length 94 for bucket 8\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 6: 90%\n  bucket 2: 100%\n  bucket 6: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:01\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:01\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:01\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 60\n  bucket 9: 20%\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 60%\n  bucket 10: 10%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 30%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\nGetting block 13 of 60\n  Calculating Z arrays for bucket 12\n  Reserving size (126) for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Entering block accumulator loop for bucket 12:\n  Calculating Z arrays for bucket 13\n  Calculating Z arrays for bucket 14\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 13:\n  Sorting block time: 00:00:00\n  bucket 12: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 12: 30%\nReturning block of 96 for bucket 11\n  bucket 13: 10%\n  bucket 12: 40%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 12: 50%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 12: 60%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 12: 70%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 12: 80%\n  bucket 13: 60%\n  bucket 12: 90%\n  bucket 14: 50%\n  bucket 12: 100%\n  bucket 14: 60%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  bucket 14: 100%\n  Sorting block of length 85 for bucket 13\n  Sorting block time: 00:00:00\n  (Using difference cover)\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\nGetting block 17 of 60\n  Calculating Z arrays for bucket 16\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 16:\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 15: 10%\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 15: 20%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 15: 30%\n  bucket 17: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 17: 40%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 17: 50%\n  bucket 15: 60%\n  bucket 17: 60%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 16: 70%\n  bucket 17: 70%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 17: 80%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 17: 90%\n  bucket 17: 100%\n  bucket 16: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\nGetting block 19 of 60\n  Calculating Z arrays for bucket 18\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Entering block accumulator loop for bucket 19:\n  Reserving size (126) for bucket 20\n  Entering block accumulator loop for bucket 18:\n  Calculating Z arrays for bucket 20\n  bucket 19: 10%\n  bucket 18: 10%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 18: 20%\n  bucket 19: 30%\n  bucket 18: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 18: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 18: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 18: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 18: 70%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 18: 80%\n  bucket 20: 60%\n  bucket 19: 90%\n  bucket 18: 90%\n  bucket 20: 70%\n  bucket 19: 100%\n  bucket 18: 100%\n  Sorting block of length 107 for bucket 19\n  bucket 20: 80%\n  (Using difference cover)\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\nGetting block 22 of 60\n  bucket 21: 70%\n  Reserving size (126) for bucket 22\n  bucket 21: 80%\n  Calculating Z arrays for bucket 22\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 60\n  Entering block accumulator loop for bucket 23:\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 24: 60%\n  bucket 23: 60%\n  bucket 24: 70%\n  bucket 23: 70%\n  bucket 24: 80%\n  bucket 23: 80%\n  bucket 24: 90%\n  bucket 23: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 60\n  bucket 25: 10%\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 20%\n  bucket 25: 30%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 26: 10%\n  bucket 25: 60%\n  bucket 26: 20%\n  bucket 25: 70%\n  bucket 26: 30%\n  bucket 25: 80%\n  bucket 26: 40%\n  bucket 25: 90%\n  bucket 26: 50%\n  bucket 25: 100%\n  bucket 26: 60%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\nGetting block 29 of 60\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  bucket 29: 20%\n  Calculating Z arrays for bucket 30\n  Sorting block time: 00:00:00\n  bucket 29: 30%\n  Entering block accumulator loop for bucket 30:\nReturning block of 107 for bucket 28\n  bucket 29: 40%\n  bucket 30: 10%\n  bucket 29: 50%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 60%\n  bucket 30: 40%\n  bucket 29: 70%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 80%\n  bucket 30: 70%\n  bucket 29: 90%\n  bucket 30: 80%\n  bucket 29: 100%\n  bucket 30: 90%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 10%\n  bucket 32: 20%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 30%\n  bucket 33: 10%\n  bucket 32: 40%\n  bucket 33: 20%\n  bucket 32: 50%\n  bucket 33: 30%\n  bucket 32: 60%\n  bucket 33: 40%\n  bucket 32: 70%\n  bucket 33: 50%\n  bucket 32: 80%\n  bucket 33: 60%\n  bucket 32: 90%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\nGetting block 35 of 60\n  bucket 34: 60%\n  Reserving size (126) for bucket 35\n  bucket 34: 70%\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 80%\n  bucket 35: 10%\n  bucket 34: 90%\n  bucket 35: 20%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  Reserving size (126) for bucket 37\n  bucket 36: 20%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  bucket 36: 30%\n  Calculating Z arrays for bucket 38\n  Calculating Z arrays for bucket 37\n  bucket 36: 40%\n  Entering block accumulator loop for bucket 38:\n  bucket 36: 50%\n  bucket 38: 10%\n  bucket 36: 60%\n  Entering block accumulator loop for bucket 37:\n  bucket 38: 20%\n  bucket 36: 70%\n  bucket 38: 30%\n  bucket 37: 10%\n  bucket 36: 80%\n  bucket 38: 40%\n  bucket 37: 20%\n  bucket 36: 90%\n  bucket 38: 50%\n  bucket 37: 30%\n  bucket 36: 100%\n  bucket 38: 60%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 40%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 37: 50%\n  bucket 38: 90%\n  bucket 37: 60%\n  bucket 38: 100%\n  bucket 37: 70%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\nGetting block 40 of 60\n  bucket 39: 10%\n  Reserving size (126) for bucket 40\n  bucket 39: 20%\n  Calculating Z arrays for bucket 40\n  bucket 39: 30%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 40%\n  bucket 40: 10%\n  bucket 39: 50%\n  bucket 40: 20%\n  bucket 39: 60%\n  bucket 40: 30%\n  bucket 39: 70%\n  bucket 40: 40%\n  bucket 39: 80%\n  bucket 40: 50%\n  bucket 39: 90%\n  bucket 39: 100%\n  bucket 40: 60%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  bucket 41: 20%\nGetting block 43 of 60\n  bucket 41: 30%\n  Calculating Z arrays for bucket 42\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 41: 40%\n  bucket 41: 50%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 60%\n  bucket 42: 10%\n  Entering block accumulator loop for bucket 43:\n  bucket 41: 70%\n  bucket 42: 20%\n  bucket 41: 80%\n  bucket 43: 10%\n  bucket 42: 30%\n  bucket 41: 90%\n  bucket 43: 20%\n  bucket 41: 100%\n  bucket 42: 40%\n  Sorting block of length 88 for bucket 41\n  bucket 43: 30%\n  bucket 42: 50%\n  bucket 43: 40%\n  bucket 42: 60%\n  (Using difference cover)\n  bucket 43: 50%\n  bucket 42: 70%\n  bucket 43: 60%\n  bucket 42: 80%\n  bucket 43: 70%\n  bucket 42: 90%\n  bucket 43: 80%\n  bucket 42: 100%\n  bucket 43: 90%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 45\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 10%\n  bucket 45: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 45: 20%\n  bucket 44: 40%\n  bucket 45: 30%\n  bucket 44: 50%\nGetting block 46 of 60\n  bucket 44: 60%\n  bucket 45: 40%\n  Reserving size (126) for bucket 46\n  bucket 44: 70%\n  Calculating Z arrays for bucket 46\n  bucket 45: 50%\n  bucket 44: 80%\n  bucket 45: 60%\n  bucket 44: 90%\n  bucket 45: 70%\n  Entering block accumulator loop for bucket 46:\n  bucket 44: 100%\n  bucket 45: 80%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 46: 10%\n  bucket 45: 90%\n  bucket 45: 100%\n  bucket 46: 20%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 30%\n  bucket 46: 40%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\nGetting block 48 of 60\n  Calculating Z arrays for bucket 47\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  bucket 48: 10%\n  bucket 47: 20%\n  bucket 48: 20%\n  bucket 47: 30%\n  bucket 48: 30%\n  bucket 47: 40%\n  bucket 48: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 48: 50%\n  bucket 47: 70%\n  bucket 48: 60%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 48: 70%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 50\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 49:\n  bucket 50: 10%\n  bucket 49: 10%\n  bucket 50: 20%\n  bucket 49: 20%\n  bucket 50: 30%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 50: 40%\n  bucket 49: 50%\n  bucket 50: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 50: 60%\n  bucket 49: 80%\n  bucket 50: 70%\n  bucket 49: 90%\n  bucket 50: 80%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  bucket 53: 20%\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 53: 30%\n  bucket 54: 20%\n  bucket 53: 40%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 53: 50%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Entering block accumulator loop for bucket 55:\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 10%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 56: 10%\n  bucket 55: 40%\n  bucket 56: 20%\n  bucket 55: 50%\n  bucket 56: 30%\n  bucket 55: 60%\n  bucket 56: 40%\n  bucket 55: 70%\n  bucket 56: 50%\n  bucket 55: 80%\n  bucket 56: 60%\n  bucket 55: 90%\n  bucket 56: 70%\n  bucket 55: 100%\n  bucket 56: 80%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Entering block accumulator loop for bucket 57:\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 10%\n  bucket 57: 20%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 30%\n  bucket 58: 10%\n  bucket 57: 40%\n  bucket 58: 20%\n  bucket 57: 50%\n  bucket 58: 30%\n  bucket 57: 60%\n  bucket 58: 40%\n  bucket 57: 70%\n  bucket 58: 50%\n  bucket 57: 80%\n  bucket 58: 60%\n  bucket 57: 90%\n  bucket 58: 70%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 60\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 60:\n  Entering block accumulator loop for bucket 59:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 59: 10%\n  bucket 60: 30%\n  bucket 59: 20%\n  bucket 60: 40%\n  bucket 59: 30%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 59: 40%\n  bucket 60: 70%\n  bucket 59: 50%\n  bucket 60: 80%\n  bucket 59: 60%\n  bucket 60: 90%\n  bucket 59: 70%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  bucket 59: 80%\n  (Using difference cover)\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    3 (30.00%) aligned concordantly 0 times\n    7 (70.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        3 (50.00%) aligned 0 times\n        3 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n85.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    3 (30.00%) aligned concordantly 0 times\n    7 (70.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        3 (50.00%) aligned 0 times\n        3 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n85.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 1\nGetting block 2 of 60\n  Entering block accumulator loop for bucket 1:\nGetting block 4 of 60\n  bucket 1: 10%\n  Reserving size (126) for bucket 2\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 2\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 6\nGetting block 7 of 60\n  bucket 1: 20%\nGetting block 3 of 60\n  Entering block accumulator loop for bucket 4:\n  Reserving size (126) for bucket 7\n  bucket 1: 30%\n  Calculating Z arrays for bucket 7\n  bucket 1: 40%\n  Reserving size (126) for bucket 3\nGetting block 8 of 60\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 5:\n  bucket 4: 10%\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 8\n  bucket 7: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 10%\n  bucket 6: 10%\n  bucket 7: 30%\n  bucket 5: 10%\n  bucket 4: 20%\n  bucket 1: 50%\n  bucket 3: 10%\n  bucket 6: 20%\n  Calculating Z arrays for bucket 8\n  bucket 5: 20%\n  bucket 3: 20%\n  bucket 4: 30%\n  bucket 6: 30%\n  bucket 5: 30%\n  bucket 4: 40%\n  bucket 3: 30%\n  bucket 2: 20%\n  bucket 6: 40%\n  bucket 5: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 3: 40%\n  bucket 2: 30%\n  bucket 1: 60%\n  bucket 7: 40%\n  bucket 1: 70%\n  bucket 8: 10%\n  bucket 5: 50%\n  bucket 2: 40%\n  bucket 6: 50%\n  bucket 8: 20%\n  bucket 3: 50%\n  bucket 4: 50%\n  bucket 5: 60%\n  bucket 7: 50%\n  bucket 1: 80%\n  bucket 3: 60%\n  bucket 4: 60%\n  bucket 8: 30%\n  bucket 7: 60%\n  bucket 5: 70%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 7: 70%\n  bucket 8: 40%\n  bucket 2: 50%\n  bucket 1: 100%\n  bucket 3: 80%\n  bucket 7: 80%\n  bucket 4: 70%\n  bucket 8: 50%\n  bucket 3: 90%\n  Sorting block of length 42 for bucket 1\n  bucket 5: 80%\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 7: 90%\n  bucket 3: 100%\n  bucket 2: 60%\n  Sorting block of length 106 for bucket 3\n  bucket 7: 100%\n  (Using difference cover)\n  bucket 8: 70%\n  bucket 2: 70%\n  bucket 6: 60%\n  bucket 8: 80%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 4: 80%\n  bucket 6: 70%\n  bucket 5: 100%\n  bucket 8: 90%\n  bucket 2: 80%\n  bucket 4: 90%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 6: 80%\n  bucket 8: 100%\n  bucket 4: 100%\n  Sorting block of length 94 for bucket 8\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 6: 90%\n  bucket 2: 100%\n  bucket 6: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:01\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:01\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:01\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\nGetting block 10 of 60\n  bucket 9: 20%\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 60%\n  bucket 10: 10%\n  bucket 9: 70%\n  bucket 10: 20%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 30%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\nGetting block 13 of 60\n  Calculating Z arrays for bucket 12\n  Reserving size (126) for bucket 13\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Entering block accumulator loop for bucket 12:\n  Calculating Z arrays for bucket 13\n  Calculating Z arrays for bucket 14\n  bucket 12: 10%\n  Entering block accumulator loop for bucket 13:\n  Sorting block time: 00:00:00\n  bucket 12: 20%\n  Entering block accumulator loop for bucket 14:\n  bucket 12: 30%\nReturning block of 96 for bucket 11\n  bucket 13: 10%\n  bucket 12: 40%\n  bucket 13: 20%\n  bucket 14: 10%\n  bucket 12: 50%\n  bucket 13: 30%\n  bucket 14: 20%\n  bucket 12: 60%\n  bucket 13: 40%\n  bucket 14: 30%\n  bucket 12: 70%\n  bucket 13: 50%\n  bucket 14: 40%\n  bucket 12: 80%\n  bucket 13: 60%\n  bucket 12: 90%\n  bucket 14: 50%\n  bucket 12: 100%\n  bucket 14: 60%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 70%\n  bucket 14: 70%\n  bucket 13: 80%\n  bucket 14: 80%\n  bucket 13: 90%\n  bucket 14: 90%\n  bucket 13: 100%\n  bucket 14: 100%\n  Sorting block of length 85 for bucket 13\n  Sorting block time: 00:00:00\n  (Using difference cover)\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\nGetting block 17 of 60\n  Calculating Z arrays for bucket 16\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 16:\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 10%\n  Entering block accumulator loop for bucket 17:\n  bucket 15: 10%\n  bucket 16: 20%\n  bucket 17: 10%\n  bucket 15: 20%\n  bucket 16: 30%\n  bucket 17: 20%\n  bucket 15: 30%\n  bucket 17: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 17: 40%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 17: 50%\n  bucket 15: 60%\n  bucket 17: 60%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 16: 70%\n  bucket 17: 70%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 17: 80%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 17: 90%\n  bucket 17: 100%\n  bucket 16: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\nGetting block 19 of 60\n  Calculating Z arrays for bucket 18\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 20 of 60\n  Entering block accumulator loop for bucket 19:\n  Reserving size (126) for bucket 20\n  Entering block accumulator loop for bucket 18:\n  Calculating Z arrays for bucket 20\n  bucket 19: 10%\n  bucket 18: 10%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 20%\n  bucket 18: 20%\n  bucket 19: 30%\n  bucket 18: 30%\n  bucket 20: 10%\n  bucket 19: 40%\n  bucket 18: 40%\n  bucket 20: 20%\n  bucket 19: 50%\n  bucket 18: 50%\n  bucket 20: 30%\n  bucket 19: 60%\n  bucket 18: 60%\n  bucket 20: 40%\n  bucket 19: 70%\n  bucket 18: 70%\n  bucket 20: 50%\n  bucket 19: 80%\n  bucket 18: 80%\n  bucket 20: 60%\n  bucket 19: 90%\n  bucket 18: 90%\n  bucket 20: 70%\n  bucket 19: 100%\n  bucket 18: 100%\n  Sorting block of length 107 for bucket 19\n  bucket 20: 80%\n  (Using difference cover)\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\nGetting block 22 of 60\n  bucket 21: 70%\n  Reserving size (126) for bucket 22\n  bucket 21: 80%\n  Calculating Z arrays for bucket 22\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 60\n  Entering block accumulator loop for bucket 23:\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 23: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 24: 60%\n  bucket 23: 60%\n  bucket 24: 70%\n  bucket 23: 70%\n  bucket 24: 80%\n  bucket 23: 80%\n  bucket 24: 90%\n  bucket 23: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\nGetting block 26 of 60\n  bucket 25: 10%\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  bucket 25: 20%\n  bucket 25: 30%\n  Entering block accumulator loop for bucket 26:\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 26: 10%\n  bucket 25: 60%\n  bucket 26: 20%\n  bucket 25: 70%\n  bucket 26: 30%\n  bucket 25: 80%\n  bucket 26: 40%\n  bucket 25: 90%\n  bucket 26: 50%\n  bucket 25: 100%\n  bucket 26: 60%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\nGetting block 29 of 60\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  bucket 29: 20%\n  Calculating Z arrays for bucket 30\n  Sorting block time: 00:00:00\n  bucket 29: 30%\n  Entering block accumulator loop for bucket 30:\nReturning block of 107 for bucket 28\n  bucket 29: 40%\n  bucket 30: 10%\n  bucket 29: 50%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 29: 60%\n  bucket 30: 40%\n  bucket 29: 70%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 29: 80%\n  bucket 30: 70%\n  bucket 29: 90%\n  bucket 30: 80%\n  bucket 29: 100%\n  bucket 30: 90%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 10%\n  bucket 32: 20%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 30%\n  bucket 33: 10%\n  bucket 32: 40%\n  bucket 33: 20%\n  bucket 32: 50%\n  bucket 33: 30%\n  bucket 32: 60%\n  bucket 33: 40%\n  bucket 32: 70%\n  bucket 33: 50%\n  bucket 32: 80%\n  bucket 33: 60%\n  bucket 32: 90%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\nGetting block 35 of 60\n  bucket 34: 60%\n  Reserving size (126) for bucket 35\n  bucket 34: 70%\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 80%\n  bucket 35: 10%\n  bucket 34: 90%\n  bucket 35: 20%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  Reserving size (126) for bucket 37\n  bucket 36: 20%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  bucket 36: 30%\n  Calculating Z arrays for bucket 38\n  Calculating Z arrays for bucket 37\n  bucket 36: 40%\n  Entering block accumulator loop for bucket 38:\n  bucket 36: 50%\n  bucket 38: 10%\n  bucket 36: 60%\n  Entering block accumulator loop for bucket 37:\n  bucket 38: 20%\n  bucket 36: 70%\n  bucket 38: 30%\n  bucket 37: 10%\n  bucket 36: 80%\n  bucket 38: 40%\n  bucket 37: 20%\n  bucket 36: 90%\n  bucket 38: 50%\n  bucket 37: 30%\n  bucket 36: 100%\n  bucket 38: 60%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 40%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 37: 50%\n  bucket 38: 90%\n  bucket 37: 60%\n  bucket 38: 100%\n  bucket 37: 70%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\nGetting block 40 of 60\n  bucket 39: 10%\n  Reserving size (126) for bucket 40\n  bucket 39: 20%\n  Calculating Z arrays for bucket 40\n  bucket 39: 30%\n  Entering block accumulator loop for bucket 40:\n  bucket 39: 40%\n  bucket 40: 10%\n  bucket 39: 50%\n  bucket 40: 20%\n  bucket 39: 60%\n  bucket 40: 30%\n  bucket 39: 70%\n  bucket 40: 40%\n  bucket 39: 80%\n  bucket 40: 50%\n  bucket 39: 90%\n  bucket 39: 100%\n  bucket 40: 60%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  bucket 41: 20%\nGetting block 43 of 60\n  bucket 41: 30%\n  Calculating Z arrays for bucket 42\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 41: 40%\n  bucket 41: 50%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 60%\n  bucket 42: 10%\n  Entering block accumulator loop for bucket 43:\n  bucket 41: 70%\n  bucket 42: 20%\n  bucket 41: 80%\n  bucket 43: 10%\n  bucket 42: 30%\n  bucket 41: 90%\n  bucket 43: 20%\n  bucket 41: 100%\n  bucket 42: 40%\n  Sorting block of length 88 for bucket 41\n  bucket 43: 30%\n  bucket 42: 50%\n  bucket 43: 40%\n  bucket 42: 60%\n  (Using difference cover)\n  bucket 43: 50%\n  bucket 42: 70%\n  bucket 43: 60%\n  bucket 42: 80%\n  bucket 43: 70%\n  bucket 42: 90%\n  bucket 43: 80%\n  bucket 42: 100%\n  bucket 43: 90%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 45\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 10%\n  bucket 45: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 45: 20%\n  bucket 44: 40%\n  bucket 45: 30%\n  bucket 44: 50%\nGetting block 46 of 60\n  bucket 44: 60%\n  bucket 45: 40%\n  Reserving size (126) for bucket 46\n  bucket 44: 70%\n  Calculating Z arrays for bucket 46\n  bucket 45: 50%\n  bucket 44: 80%\n  bucket 45: 60%\n  bucket 44: 90%\n  bucket 45: 70%\n  Entering block accumulator loop for bucket 46:\n  bucket 44: 100%\n  bucket 45: 80%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 46: 10%\n  bucket 45: 90%\n  bucket 45: 100%\n  bucket 46: 20%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 30%\n  bucket 46: 40%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\nGetting block 48 of 60\n  Calculating Z arrays for bucket 47\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  bucket 48: 10%\n  bucket 47: 20%\n  bucket 48: 20%\n  bucket 47: 30%\n  bucket 48: 30%\n  bucket 47: 40%\n  bucket 48: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 48: 50%\n  bucket 47: 70%\n  bucket 48: 60%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 48: 70%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 50\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 49:\n  bucket 50: 10%\n  bucket 49: 10%\n  bucket 50: 20%\n  bucket 49: 20%\n  bucket 50: 30%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 50: 40%\n  bucket 49: 50%\n  bucket 50: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 50: 60%\n  bucket 49: 80%\n  bucket 50: 70%\n  bucket 49: 90%\n  bucket 50: 80%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  bucket 53: 20%\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 53: 30%\n  bucket 54: 20%\n  bucket 53: 40%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 53: 50%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Entering block accumulator loop for bucket 55:\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  bucket 55: 10%\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 56: 10%\n  bucket 55: 40%\n  bucket 56: 20%\n  bucket 55: 50%\n  bucket 56: 30%\n  bucket 55: 60%\n  bucket 56: 40%\n  bucket 55: 70%\n  bucket 56: 50%\n  bucket 55: 80%\n  bucket 56: 60%\n  bucket 55: 90%\n  bucket 56: 70%\n  bucket 55: 100%\n  bucket 56: 80%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Entering block accumulator loop for bucket 57:\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  bucket 57: 10%\n  bucket 57: 20%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 30%\n  bucket 58: 10%\n  bucket 57: 40%\n  bucket 58: 20%\n  bucket 57: 50%\n  bucket 58: 30%\n  bucket 57: 60%\n  bucket 58: 40%\n  bucket 57: 70%\n  bucket 58: 50%\n  bucket 57: 80%\n  bucket 58: 60%\n  bucket 57: 90%\n  bucket 58: 70%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 60\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 60:\n  Entering block accumulator loop for bucket 59:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 59: 10%\n  bucket 60: 30%\n  bucket 59: 20%\n  bucket 60: 40%\n  bucket 59: 30%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 59: 40%\n  bucket 60: 70%\n  bucket 59: 50%\n  bucket 60: 80%\n  bucket 59: 60%\n  bucket 60: 90%\n  bucket 59: 70%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  bucket 59: 80%\n  (Using difference cover)\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:18:39", "plugin": "core", "name": "end_epoch", "raw_value": "1684912719.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:18:38", "plugin": "core", "name": "start_epoch", "raw_value": "1684912718.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1-15", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 15, "time_seconds": 38.0014386177063, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "6fddca949d69ba0a"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "75d87c76986d320e"}, "library|rna_strandness": "R", "library|type": "single", "adv|spliced_options|novel_splicesite_outfile": true, "adv|spliced_options|spliced_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "b046f18e1a6d56b1", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:18:53.915257", "create_time": "2023-05-24T07:18:38.743140", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-gbd7t", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/6/0/c/dataset_60c5c06b-6099-416f-817e-113cd2b54cc6.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/f/8/0/dataset_f801497b-0480-4231-b9dc-11d68fd833cd.dat' input_f.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'     -U 'input_f.fastq'      --rna-strandness R             --pen-cansplice 0 --pen-noncansplice 12 --pen-canintronlen G,-8.0,1.0 --pen-noncanintronlen G,-8.0,1.0  --min-intronlen 20 --max-intronlen 500000   --novel-splicesite-outfile '/galaxy/server/database/objects/7/5/5/dataset_755f87b6-b5c6-4d81-abca-fc318eb9ed60.dat'                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/3/a/6/dataset_3a65ae7d-6cd5-41f3-a7fb-ab24e1f7a0da.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 1, \"canonical_penalty\": \"0\", \"coefficient\": \"1.0\", \"constant_term\": \"-8.0\", \"function_type\": \"G\", \"known_splice_gtf\": null, \"max_intron\": \"500000\", \"min_intron\": \"20\", \"nc_coefficient\": \"1.0\", \"nc_constant_term\": \"-8.0\", \"nc_function_type\": \"G\", \"no_spliced_alignment_options\": {\"__current_case__\": 1, \"no_spliced_alignment\": \"\"}, \"noncanonical_penalty\": \"12\", \"notmplen\": false, \"novel_splicesite_outfile\": true, \"spliced_options_selector\": \"advanced\", \"tma\": \"\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 627, \"src\": \"hda\"}]}, \"rna_strandness\": \"R\", \"type\": \"single\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 626, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "6fddca949d69ba0a", "src": "hda", "uuid": "60c5c06b-6099-416f-817e-113cd2b54cc6"}, "input_1": {"id": "75d87c76986d320e", "src": "hda", "uuid": "f801497b-0480-4231-b9dc-11d68fd833cd"}}, "outputs": {"novel_splicesite_output": {"id": "05923937a201a0a4", "src": "hda", "uuid": "755f87b6-b5c6-4d81-abca-fc318eb9ed60"}, "output_alignments": {"id": "ad252406d0904303", "src": "hda", "uuid": "3a65ae7d-6cd5-41f3-a7fb-ab24e1f7a0da"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\nGetting block 3 of 60\n  Reserving size (126) for bucket 2\nGetting block 5 of 60\nGetting block 6 of 60\nGetting block 7 of 60\nGetting block 4 of 60\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 7\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 7\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 20%\n  bucket 6: 10%\n  Calculating Z arrays for bucket 4\n  bucket 2: 10%\nGetting block 8 of 60\n  bucket 5: 30%\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 7: 20%\n  bucket 5: 40%\n  bucket 7: 30%\n  bucket 3: 10%\n  bucket 7: 40%\n  bucket 3: 20%\n  bucket 6: 20%\n  bucket 3: 30%\n  Reserving size (126) for bucket 8\n  bucket 7: 50%\n  bucket 2: 20%\n  bucket 3: 40%\n  bucket 7: 60%\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 8\n  bucket 4: 10%\n  bucket 1: 10%\n  bucket 7: 70%\n  bucket 2: 30%\n  bucket 1: 20%\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 30%\n  bucket 2: 40%\n  bucket 5: 50%\n  bucket 4: 30%\n  bucket 8: 10%\n  bucket 2: 50%\n  bucket 7: 80%\n  bucket 2: 60%\n  bucket 6: 40%\n  bucket 1: 30%\n  bucket 2: 70%\n  bucket 8: 20%\n  bucket 7: 90%\n  bucket 2: 80%\n  bucket 5: 60%\n  bucket 3: 50%\n  bucket 2: 90%\n  bucket 8: 30%\n  bucket 7: 100%\n  bucket 5: 70%\n  bucket 3: 60%\n  Sorting block of length 75 for bucket 7\n  bucket 6: 50%\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 2: 100%\n  bucket 4: 40%\n  bucket 8: 40%\n  Sorting block of length 84 for bucket 2\n  bucket 6: 60%\n  bucket 1: 40%\n  bucket 6: 70%\n  bucket 3: 70%\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 3: 80%\n  bucket 4: 50%\n  Sorting block time: 00:00:00\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 8: 50%\n  bucket 5: 100%\n  bucket 4: 70%\n  bucket 6: 80%\n  bucket 1: 50%\n  Sorting block time: 00:00:00\n  bucket 6: 90%\nReturning block of 76 for bucket 7\n  bucket 6: 100%\n  bucket 1: 60%\nReturning block of 85 for bucket 2\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 8: 60%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 1: 70%\n  bucket 4: 90%\n  bucket 8: 70%\n  bucket 1: 80%\n  bucket 8: 80%\n  bucket 4: 100%\n  bucket 3: 100%\n  bucket 1: 90%\n  Sorting block of length 106 for bucket 3\n  bucket 8: 90%\n  bucket 1: 100%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\nGetting block 10 of 60\n  bucket 9: 50%\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 60%\n  bucket 9: 70%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 10%\n  bucket 9: 100%\n  bucket 10: 20%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 60\n  Entering block accumulator loop for bucket 11:\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  bucket 11: 20%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 13 of 60\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 14\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 13:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 15 of 60\nGetting block 17 of 60\nGetting block 16 of 60\n  Reserving size (126) for bucket 15\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 15\n  Calculating Z arrays for bucket 16\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 10%\n  bucket 15: 10%\n  bucket 16: 20%\n  bucket 15: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 17: 10%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 15: 60%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 16: 70%\n  bucket 17: 20%\n  bucket 16: 80%\n  bucket 17: 30%\n  bucket 15: 80%\n  bucket 17: 40%\n  bucket 16: 90%\n  bucket 17: 50%\n  bucket 15: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 17: 60%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\nGetting block 19 of 60\n  Reserving size (126) for bucket 18\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\nGetting block 21 of 60\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  Reserving size (126) for bucket 21\n  bucket 20: 10%\n  Calculating Z arrays for bucket 21\n  bucket 20: 20%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 20: 50%\n  bucket 21: 30%\n  bucket 20: 60%\n  bucket 21: 40%\n  bucket 20: 70%\n  bucket 21: 50%\n  bucket 20: 80%\n  bucket 21: 60%\n  bucket 20: 90%\n  bucket 20: 100%\n  bucket 21: 70%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 80%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  bucket 21: 90%\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 22\nReturning block of 98 for bucket 20\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 100%\n  bucket 22: 10%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\nGetting block 25 of 60\n  bucket 24: 90%\n  Reserving size (126) for bucket 25\n  bucket 24: 100%\n  Calculating Z arrays for bucket 25\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Entering block accumulator loop for bucket 26:\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 26: 40%\n  bucket 27: 30%\n  bucket 26: 50%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Entering block accumulator loop for bucket 28:\n  Reserving size (126) for bucket 29\n  bucket 28: 10%\n  Calculating Z arrays for bucket 29\n  bucket 28: 20%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 29: 10%\n  bucket 28: 50%\n  bucket 29: 20%\n  bucket 28: 60%\n  bucket 29: 30%\n  bucket 28: 70%\n  bucket 29: 40%\n  bucket 28: 80%\n  bucket 29: 50%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  bucket 29: 80%\n  (Using difference cover)\nGetting block 30 of 60\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 31\n  Calculating Z arrays for bucket 30\n  bucket 29: 90%\n  Entering block accumulator loop for bucket 31:\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Reserving size (126) for bucket 33\nGetting block 35 of 60\n  Calculating Z arrays for bucket 33\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 34\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 10%\n  bucket 33: 20%\n  bucket 35: 10%\n  bucket 34: 20%\n  bucket 33: 30%\n  bucket 35: 20%\n  bucket 34: 30%\n  bucket 33: 40%\n  bucket 35: 30%\n  bucket 34: 40%\n  bucket 33: 50%\n  bucket 35: 40%\n  bucket 34: 50%\n  bucket 33: 60%\n  bucket 35: 50%\n  bucket 34: 60%\n  bucket 33: 70%\n  bucket 35: 60%\n  bucket 34: 70%\n  bucket 33: 80%\n  bucket 35: 70%\n  bucket 34: 80%\n  bucket 33: 90%\n  bucket 35: 80%\n  bucket 33: 100%\n  bucket 35: 90%\n  bucket 34: 90%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 35: 100%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 36 of 60\nGetting block 37 of 60\nGetting block 38 of 60\n  Reserving size (126) for bucket 36\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 39\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 36\n  Calculating Z arrays for bucket 38\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 39:\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 37:\n  bucket 39: 10%\n  bucket 38: 10%\n  bucket 36: 10%\n  bucket 37: 10%\n  bucket 38: 20%\n  bucket 39: 20%\n  bucket 36: 20%\n  bucket 37: 20%\n  bucket 38: 30%\n  bucket 39: 30%\n  bucket 37: 30%\n  bucket 36: 30%\n  bucket 38: 40%\n  bucket 39: 40%\n  bucket 37: 40%\n  bucket 36: 40%\n  bucket 38: 50%\n  bucket 39: 50%\n  bucket 37: 50%\n  bucket 36: 50%\n  bucket 38: 60%\n  bucket 39: 60%\n  bucket 37: 60%\n  bucket 36: 60%\n  bucket 38: 70%\n  bucket 39: 70%\n  bucket 37: 70%\n  bucket 36: 70%\n  bucket 38: 80%\n  bucket 39: 80%\n  bucket 37: 80%\n  bucket 36: 80%\n  bucket 38: 90%\n  bucket 39: 90%\n  bucket 37: 90%\n  bucket 36: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  bucket 37: 100%\n  (Using difference cover)\n  bucket 36: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 39: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\nGetting block 42 of 60\n  Reserving size (126) for bucket 41\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  Entering block accumulator loop for bucket 41:\n  bucket 42: 20%\n  bucket 41: 10%\n  bucket 42: 30%\n  bucket 41: 20%\n  bucket 42: 40%\n  bucket 41: 30%\n  bucket 42: 50%\n  bucket 41: 40%\n  bucket 42: 60%\n  bucket 41: 50%\n  bucket 42: 70%\n  bucket 41: 60%\n  bucket 42: 80%\n  bucket 41: 70%\n  bucket 42: 90%\n  bucket 41: 80%\n  bucket 42: 100%\n  bucket 41: 90%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\nGetting block 45 of 60\n  bucket 44: 20%\n  Reserving size (126) for bucket 45\n  bucket 44: 30%\n  Calculating Z arrays for bucket 45\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 70%\n  bucket 45: 10%\n  bucket 44: 80%\n  bucket 45: 20%\n  bucket 44: 90%\n  bucket 45: 30%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\nGetting block 47 of 60\n  Calculating Z arrays for bucket 46\nGetting block 48 of 60\n  Entering block accumulator loop for bucket 46:\n  Reserving size (126) for bucket 47\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 47\n  Calculating Z arrays for bucket 48\n  bucket 46: 10%\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  bucket 46: 20%\n  bucket 47: 20%\n  bucket 46: 30%\n  bucket 47: 30%\n  bucket 46: 40%\n  bucket 48: 10%\n  bucket 47: 40%\n  bucket 46: 50%\n  bucket 47: 50%\n  bucket 48: 20%\n  bucket 46: 60%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 46: 70%\n  bucket 48: 30%\n  bucket 47: 80%\n  bucket 46: 80%\n  bucket 47: 90%\n  bucket 48: 40%\n  bucket 47: 100%\n  bucket 46: 90%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 50%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 40%\n  bucket 50: 50%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 60%\n  bucket 51: 10%\n  bucket 50: 70%\n  bucket 51: 20%\n  bucket 50: 80%\n  bucket 51: 30%\n  bucket 50: 90%\n  bucket 51: 40%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\nGetting block 53 of 60\n  bucket 52: 30%\n  Reserving size (126) for bucket 53\n  bucket 52: 40%\n  Calculating Z arrays for bucket 53\n  bucket 52: 50%\n  bucket 52: 60%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 53: 10%\n  bucket 52: 90%\n  bucket 53: 20%\n  bucket 52: 100%\n  bucket 53: 30%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\nGetting block 55 of 60\n  bucket 54: 40%\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 54: 50%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 55: 10%\n  bucket 54: 80%\n  bucket 55: 20%\n  bucket 54: 90%\n  bucket 55: 30%\n  bucket 54: 100%\n  bucket 55: 40%\n  Sorting block of length 64 for bucket 54\n  bucket 55: 50%\n  (Using difference cover)\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Entering block accumulator loop for bucket 58:\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  bucket 58: 10%\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 20%\n  bucket 59: 10%\n  bucket 58: 30%\n  bucket 59: 20%\n  bucket 58: 40%\n  bucket 59: 30%\n  bucket 58: 50%\n  bucket 59: 40%\n  bucket 58: 60%\n  bucket 59: 50%\n  bucket 58: 70%\n  bucket 59: 60%\n  bucket 58: 80%\n  bucket 59: 70%\n  bucket 58: 90%\n  bucket 59: 80%\n  bucket 58: 100%\n  bucket 59: 90%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were unpaired; of these:\n    0 (0.00%) aligned 0 times\n    10 (100.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n100.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were unpaired; of these:\n    0 (0.00%) aligned 0 times\n    10 (100.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n100.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\nGetting block 3 of 60\n  Reserving size (126) for bucket 2\nGetting block 5 of 60\nGetting block 6 of 60\nGetting block 7 of 60\nGetting block 4 of 60\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 7\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 6\n  Calculating Z arrays for bucket 1\n  Entering block accumulator loop for bucket 6:\n  Calculating Z arrays for bucket 5\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 7\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 20%\n  bucket 6: 10%\n  Calculating Z arrays for bucket 4\n  bucket 2: 10%\nGetting block 8 of 60\n  bucket 5: 30%\n  bucket 7: 10%\n  Entering block accumulator loop for bucket 3:\n  bucket 7: 20%\n  bucket 5: 40%\n  bucket 7: 30%\n  bucket 3: 10%\n  bucket 7: 40%\n  bucket 3: 20%\n  bucket 6: 20%\n  bucket 3: 30%\n  Reserving size (126) for bucket 8\n  bucket 7: 50%\n  bucket 2: 20%\n  bucket 3: 40%\n  bucket 7: 60%\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 8\n  bucket 4: 10%\n  bucket 1: 10%\n  bucket 7: 70%\n  bucket 2: 30%\n  bucket 1: 20%\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 30%\n  bucket 2: 40%\n  bucket 5: 50%\n  bucket 4: 30%\n  bucket 8: 10%\n  bucket 2: 50%\n  bucket 7: 80%\n  bucket 2: 60%\n  bucket 6: 40%\n  bucket 1: 30%\n  bucket 2: 70%\n  bucket 8: 20%\n  bucket 7: 90%\n  bucket 2: 80%\n  bucket 5: 60%\n  bucket 3: 50%\n  bucket 2: 90%\n  bucket 8: 30%\n  bucket 7: 100%\n  bucket 5: 70%\n  bucket 3: 60%\n  Sorting block of length 75 for bucket 7\n  bucket 6: 50%\n  (Using difference cover)\n  bucket 5: 80%\n  bucket 2: 100%\n  bucket 4: 40%\n  bucket 8: 40%\n  Sorting block of length 84 for bucket 2\n  bucket 6: 60%\n  bucket 1: 40%\n  bucket 6: 70%\n  bucket 3: 70%\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 3: 80%\n  bucket 4: 50%\n  Sorting block time: 00:00:00\n  bucket 3: 90%\n  bucket 4: 60%\n  bucket 8: 50%\n  bucket 5: 100%\n  bucket 4: 70%\n  bucket 6: 80%\n  bucket 1: 50%\n  Sorting block time: 00:00:00\n  bucket 6: 90%\nReturning block of 76 for bucket 7\n  bucket 6: 100%\n  bucket 1: 60%\nReturning block of 85 for bucket 2\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 4: 80%\n  bucket 8: 60%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 1: 70%\n  bucket 4: 90%\n  bucket 8: 70%\n  bucket 1: 80%\n  bucket 8: 80%\n  bucket 4: 100%\n  bucket 3: 100%\n  bucket 1: 90%\n  Sorting block of length 106 for bucket 3\n  bucket 8: 90%\n  bucket 1: 100%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  (Using difference cover)\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\nGetting block 10 of 60\n  bucket 9: 50%\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 60%\n  bucket 9: 70%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 10%\n  bucket 9: 100%\n  bucket 10: 20%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\nGetting block 12 of 60\n  Entering block accumulator loop for bucket 11:\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 10%\n  bucket 11: 20%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 30%\n  bucket 12: 10%\n  bucket 11: 40%\n  bucket 12: 20%\n  bucket 11: 50%\n  bucket 12: 30%\n  bucket 11: 60%\n  bucket 12: 40%\n  bucket 11: 70%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 11: 80%\n  bucket 12: 70%\n  bucket 11: 90%\n  bucket 12: 80%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 13 of 60\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 14\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 14:\n  Entering block accumulator loop for bucket 13:\n  bucket 14: 10%\n  bucket 13: 10%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 13: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 15 of 60\nGetting block 17 of 60\nGetting block 16 of 60\n  Reserving size (126) for bucket 15\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 15\n  Calculating Z arrays for bucket 16\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 17:\n  bucket 16: 10%\n  bucket 15: 10%\n  bucket 16: 20%\n  bucket 15: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 17: 10%\n  bucket 15: 50%\n  bucket 16: 50%\n  bucket 15: 60%\n  bucket 16: 60%\n  bucket 15: 70%\n  bucket 16: 70%\n  bucket 17: 20%\n  bucket 16: 80%\n  bucket 17: 30%\n  bucket 15: 80%\n  bucket 17: 40%\n  bucket 16: 90%\n  bucket 17: 50%\n  bucket 15: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 17: 60%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\nGetting block 19 of 60\n  Reserving size (126) for bucket 18\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\nGetting block 21 of 60\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  Reserving size (126) for bucket 21\n  bucket 20: 10%\n  Calculating Z arrays for bucket 21\n  bucket 20: 20%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 20: 50%\n  bucket 21: 30%\n  bucket 20: 60%\n  bucket 21: 40%\n  bucket 20: 70%\n  bucket 21: 50%\n  bucket 20: 80%\n  bucket 21: 60%\n  bucket 20: 90%\n  bucket 20: 100%\n  bucket 21: 70%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 80%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  bucket 21: 90%\n  Sorting block time: 00:00:00\n  Calculating Z arrays for bucket 22\nReturning block of 98 for bucket 20\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 100%\n  bucket 22: 10%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\nGetting block 25 of 60\n  bucket 24: 90%\n  Reserving size (126) for bucket 25\n  bucket 24: 100%\n  Calculating Z arrays for bucket 25\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Entering block accumulator loop for bucket 26:\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 20%\n  bucket 27: 10%\n  bucket 26: 30%\n  bucket 27: 20%\n  bucket 26: 40%\n  bucket 27: 30%\n  bucket 26: 50%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 26: 70%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Entering block accumulator loop for bucket 28:\n  Reserving size (126) for bucket 29\n  bucket 28: 10%\n  Calculating Z arrays for bucket 29\n  bucket 28: 20%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 29: 10%\n  bucket 28: 50%\n  bucket 29: 20%\n  bucket 28: 60%\n  bucket 29: 30%\n  bucket 28: 70%\n  bucket 29: 40%\n  bucket 28: 80%\n  bucket 29: 50%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  bucket 29: 80%\n  (Using difference cover)\nGetting block 30 of 60\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 31\n  Calculating Z arrays for bucket 30\n  bucket 29: 90%\n  Entering block accumulator loop for bucket 31:\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Reserving size (126) for bucket 33\nGetting block 35 of 60\n  Calculating Z arrays for bucket 33\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 34\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 33:\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 10%\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 10%\n  bucket 33: 20%\n  bucket 35: 10%\n  bucket 34: 20%\n  bucket 33: 30%\n  bucket 35: 20%\n  bucket 34: 30%\n  bucket 33: 40%\n  bucket 35: 30%\n  bucket 34: 40%\n  bucket 33: 50%\n  bucket 35: 40%\n  bucket 34: 50%\n  bucket 33: 60%\n  bucket 35: 50%\n  bucket 34: 60%\n  bucket 33: 70%\n  bucket 35: 60%\n  bucket 34: 70%\n  bucket 33: 80%\n  bucket 35: 70%\n  bucket 34: 80%\n  bucket 33: 90%\n  bucket 35: 80%\n  bucket 33: 100%\n  bucket 35: 90%\n  bucket 34: 90%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 35: 100%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 36 of 60\nGetting block 37 of 60\nGetting block 38 of 60\n  Reserving size (126) for bucket 36\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 39\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 36\n  Calculating Z arrays for bucket 38\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 39:\n  Entering block accumulator loop for bucket 38:\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 37:\n  bucket 39: 10%\n  bucket 38: 10%\n  bucket 36: 10%\n  bucket 37: 10%\n  bucket 38: 20%\n  bucket 39: 20%\n  bucket 36: 20%\n  bucket 37: 20%\n  bucket 38: 30%\n  bucket 39: 30%\n  bucket 37: 30%\n  bucket 36: 30%\n  bucket 38: 40%\n  bucket 39: 40%\n  bucket 37: 40%\n  bucket 36: 40%\n  bucket 38: 50%\n  bucket 39: 50%\n  bucket 37: 50%\n  bucket 36: 50%\n  bucket 38: 60%\n  bucket 39: 60%\n  bucket 37: 60%\n  bucket 36: 60%\n  bucket 38: 70%\n  bucket 39: 70%\n  bucket 37: 70%\n  bucket 36: 70%\n  bucket 38: 80%\n  bucket 39: 80%\n  bucket 37: 80%\n  bucket 36: 80%\n  bucket 38: 90%\n  bucket 39: 90%\n  bucket 37: 90%\n  bucket 36: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  bucket 37: 100%\n  (Using difference cover)\n  bucket 36: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 39: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\nGetting block 42 of 60\n  Reserving size (126) for bucket 41\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Calculating Z arrays for bucket 41\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  Entering block accumulator loop for bucket 41:\n  bucket 42: 20%\n  bucket 41: 10%\n  bucket 42: 30%\n  bucket 41: 20%\n  bucket 42: 40%\n  bucket 41: 30%\n  bucket 42: 50%\n  bucket 41: 40%\n  bucket 42: 60%\n  bucket 41: 50%\n  bucket 42: 70%\n  bucket 41: 60%\n  bucket 42: 80%\n  bucket 41: 70%\n  bucket 42: 90%\n  bucket 41: 80%\n  bucket 42: 100%\n  bucket 41: 90%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\nGetting block 45 of 60\n  bucket 44: 20%\n  Reserving size (126) for bucket 45\n  bucket 44: 30%\n  Calculating Z arrays for bucket 45\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 70%\n  bucket 45: 10%\n  bucket 44: 80%\n  bucket 45: 20%\n  bucket 44: 90%\n  bucket 45: 30%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\nGetting block 47 of 60\n  Calculating Z arrays for bucket 46\nGetting block 48 of 60\n  Entering block accumulator loop for bucket 46:\n  Reserving size (126) for bucket 47\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 47\n  Calculating Z arrays for bucket 48\n  bucket 46: 10%\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 47: 10%\n  bucket 46: 20%\n  bucket 47: 20%\n  bucket 46: 30%\n  bucket 47: 30%\n  bucket 46: 40%\n  bucket 48: 10%\n  bucket 47: 40%\n  bucket 46: 50%\n  bucket 47: 50%\n  bucket 48: 20%\n  bucket 46: 60%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 46: 70%\n  bucket 48: 30%\n  bucket 47: 80%\n  bucket 46: 80%\n  bucket 47: 90%\n  bucket 48: 40%\n  bucket 47: 100%\n  bucket 46: 90%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 50%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 40%\n  bucket 50: 50%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 60%\n  bucket 51: 10%\n  bucket 50: 70%\n  bucket 51: 20%\n  bucket 50: 80%\n  bucket 51: 30%\n  bucket 50: 90%\n  bucket 51: 40%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\nGetting block 53 of 60\n  bucket 52: 30%\n  Reserving size (126) for bucket 53\n  bucket 52: 40%\n  Calculating Z arrays for bucket 53\n  bucket 52: 50%\n  bucket 52: 60%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 53: 10%\n  bucket 52: 90%\n  bucket 53: 20%\n  bucket 52: 100%\n  bucket 53: 30%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\nGetting block 55 of 60\n  bucket 54: 40%\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 54: 50%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 55: 10%\n  bucket 54: 80%\n  bucket 55: 20%\n  bucket 54: 90%\n  bucket 55: 30%\n  bucket 54: 100%\n  bucket 55: 40%\n  Sorting block of length 64 for bucket 54\n  bucket 55: 50%\n  (Using difference cover)\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 59 of 60\n  Entering block accumulator loop for bucket 58:\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  bucket 58: 10%\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 20%\n  bucket 59: 10%\n  bucket 58: 30%\n  bucket 59: 20%\n  bucket 58: 40%\n  bucket 59: 30%\n  bucket 58: 50%\n  bucket 59: 40%\n  bucket 58: 60%\n  bucket 59: 50%\n  bucket 58: 70%\n  bucket 59: 60%\n  bucket 58: 80%\n  bucket 59: 70%\n  bucket 58: 90%\n  bucket 59: 80%\n  bucket 58: 100%\n  bucket 59: 90%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:18:44", "plugin": "core", "name": "end_epoch", "raw_value": "1684912724.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:18:43", "plugin": "core", "name": "start_epoch", "raw_value": "1684912723.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1-16", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 16, "time_seconds": 45.38439917564392, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "be20bafb0551bace"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "8168f366d4b7e3e3"}, "library|type": "paired_interleaved", "adv|sam_options|no_unal": true, "adv|sam_options|read_groups|read_groups_0|rg": "BC:test1", "adv|sam_options|read_groups|read_groups_1|rg": "CN:test2", "adv|sam_options|read_groups|rg_labels": "Yes", "adv|sam_options|chr_text": "--add-chrname", "adv|sam_options|omit_sec_seq": true, "adv|sam_options|sam_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "dfc38cd672270cc5", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:19:35.292510", "create_time": "2023-05-24T07:19:19.469288", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-f2snp", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/6/f/3/dataset_6f3c5dee-a632-479a-9bee-495f314cb90a.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        bzcat '/galaxy/server/database/objects/e/f/7/dataset_ef7f84b7-2b8c-4a96-b77d-21835e13e2e4.dat' | seqtk seq -1 /dev/stdin > input_f.fastq && bzcat '/galaxy/server/database/objects/e/f/7/dataset_ef7f84b7-2b8c-4a96-b77d-21835e13e2e4.dat' | seqtk seq -2 /dev/stdin > input_r.fastq &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 input_f.fastq -2 input_r.fastq                        --no-unal --rg-id 'read_group' --rg 'BC:test1' --rg 'CN:test2' --add-chrname --omit-sec-seq         | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/1/1/1/dataset_11133836-465b-4c0b-869a-51b6aadc35a4.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 1, \"chr_text\": \"--add-chrname\", \"no_unal\": true, \"omit_sec_seq\": true, \"read_groups\": {\"__current_case__\": 1, \"read_groups\": [{\"__index__\": 0, \"rg\": \"BC:test1\"}, {\"__index__\": 1, \"rg\": \"CN:test2\"}], \"rg_id\": \"read_group\", \"rg_labels\": \"Yes\"}, \"sam_options_selector\": \"advanced\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 3, \"input_1\": {\"values\": [{\"id\": 632, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired_interleaved\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 631, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "be20bafb0551bace", "src": "hda", "uuid": "6f3c5dee-a632-479a-9bee-495f314cb90a"}, "input_1": {"id": "8168f366d4b7e3e3", "src": "hda", "uuid": "ef7f84b7-2b8c-4a96-b77d-21835e13e2e4"}}, "outputs": {"output_alignments": {"id": "65452fab6ac174e2", "src": "hda", "uuid": "11133836-465b-4c0b-869a-51b6aadc35a4"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\nGetting block 3 of 60\n  Reserving size (126) for bucket 2\n  Reserving size (126) for bucket 3\nGetting block 4 of 60\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 4\nGetting block 7 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 6\n  bucket 2: 10%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 6:\n  Reserving size (126) for bucket 5\n  Calculating Z arrays for bucket 1\n  bucket 6: 10%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 6: 20%\nGetting block 8 of 60\n  bucket 6: 30%\n  bucket 2: 30%\n  bucket 3: 20%\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 1:\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 40%\n  bucket 1: 10%\n  bucket 5: 10%\n  bucket 4: 30%\n  bucket 1: 20%\n  bucket 6: 50%\n  bucket 5: 20%\n  bucket 1: 30%\n  bucket 4: 40%\n  bucket 2: 40%\n  bucket 7: 10%\n  bucket 5: 30%\n  bucket 6: 60%\n  bucket 2: 50%\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 1: 50%\n  bucket 7: 20%\n  bucket 2: 60%\n  bucket 6: 70%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 7: 30%\n  bucket 6: 80%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 8: 10%\n  bucket 2: 80%\n  bucket 5: 40%\n  bucket 7: 40%\n  bucket 1: 90%\n  bucket 3: 40%\n  bucket 2: 90%\n  bucket 1: 100%\n  bucket 4: 60%\n  bucket 8: 20%\n  Sorting block of length 42 for bucket 1\n  bucket 5: 50%\n  bucket 4: 70%\n  bucket 2: 100%\n  bucket 8: 30%\n  bucket 4: 80%\n  bucket 5: 60%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 3: 50%\n  bucket 5: 70%\n  (Using difference cover)\n  bucket 8: 40%\n  bucket 3: 60%\n  bucket 5: 80%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 5: 90%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 3: 80%\n  bucket 5: 100%\n  bucket 8: 60%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block time: 00:00:00\n  bucket 7: 60%\n  bucket 3: 90%\nReturning block of 85 for bucket 2\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  bucket 7: 80%\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  bucket 6: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 13 of 60\nGetting block 11 of 60\n  Reserving size (126) for bucket 13\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 12\n  Calculating Z arrays for bucket 11\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 11:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 13: 30%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 13: 40%\n  bucket 11: 30%\n  bucket 13: 50%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 13: 60%\n  bucket 12: 40%\n  bucket 13: 70%\n  bucket 12: 50%\n  bucket 13: 80%\n  bucket 11: 50%\n  bucket 13: 90%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  bucket 12: 100%\n  Sorting block of length 95 for bucket 11\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  Entering block accumulator loop for bucket 14:\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 14: 10%\n  bucket 15: 40%\n  bucket 14: 20%\n  bucket 15: 50%\n  bucket 14: 30%\n  bucket 15: 60%\n  bucket 14: 40%\n  bucket 15: 70%\n  bucket 14: 50%\n  bucket 15: 80%\n  bucket 14: 60%\n  bucket 15: 90%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 15: 100%\n  bucket 14: 90%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 16 of 60\nGetting block 17 of 60\n  Reserving size (126) for bucket 16\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Calculating Z arrays for bucket 16\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 18: 20%\n  bucket 17: 20%\n  bucket 18: 30%\n  bucket 16: 30%\n  bucket 18: 40%\n  bucket 17: 30%\n  bucket 16: 40%\n  bucket 18: 50%\n  bucket 17: 40%\n  bucket 16: 50%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 16: 60%\n  bucket 18: 70%\n  bucket 17: 60%\n  bucket 18: 80%\n  bucket 16: 70%\n  bucket 17: 70%\n  bucket 18: 90%\n  bucket 17: 80%\n  bucket 16: 80%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  bucket 17: 90%\n  bucket 16: 90%\n  bucket 17: 100%\n  bucket 16: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\nGetting block 20 of 60\n  bucket 19: 60%\n  Reserving size (126) for bucket 20\n  bucket 19: 70%\n  Calculating Z arrays for bucket 20\n  bucket 19: 80%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 90%\n  bucket 20: 10%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\nGetting block 23 of 60\n  bucket 22: 30%\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 60\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 40%\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 22: 50%\n  bucket 23: 10%\n  bucket 22: 60%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 22: 70%\n  bucket 23: 30%\n  bucket 24: 10%\n  bucket 22: 80%\n  bucket 23: 40%\n  bucket 24: 20%\n  bucket 22: 90%\n  bucket 23: 50%\n  bucket 24: 30%\n  bucket 22: 100%\n  bucket 23: 60%\n  Sorting block of length 80 for bucket 22\n  bucket 24: 40%\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 23: 90%\n  bucket 24: 70%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\nGetting block 28 of 60\n  bucket 27: 30%\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 40%\n  bucket 27: 50%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 28: 10%\n  bucket 27: 80%\n  bucket 28: 20%\n  bucket 27: 90%\n  bucket 28: 30%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 40%\n  bucket 28: 50%\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 60%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 70%\n  bucket 28: 80%\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  bucket 28: 90%\n  bucket 29: 10%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  bucket 29: 20%\n  bucket 29: 30%\n  (Using difference cover)\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\nGetting block 31 of 60\n  Calculating Z arrays for bucket 30\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 31: 10%\n  bucket 30: 20%\n  bucket 31: 20%\n  bucket 30: 30%\n  bucket 31: 30%\n  bucket 30: 40%\n  bucket 31: 40%\n  bucket 30: 50%\n  bucket 31: 50%\n  bucket 30: 60%\n  bucket 31: 60%\n  bucket 30: 70%\n  bucket 31: 70%\n  bucket 30: 80%\n  bucket 31: 80%\n  bucket 30: 90%\n  bucket 31: 90%\n  bucket 30: 100%\n  bucket 31: 100%\n  Sorting block of length 124 for bucket 30\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  (Using difference cover)\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\n  bucket 32: 10%\nReturning block of 125 for bucket 30\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 60\n  Entering block accumulator loop for bucket 33:\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 10%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 20%\n  bucket 34: 10%\n  bucket 33: 30%\n  bucket 34: 20%\n  bucket 33: 40%\n  bucket 34: 30%\n  bucket 33: 50%\n  bucket 34: 40%\n  bucket 33: 60%\n  bucket 34: 50%\n  bucket 33: 70%\n  bucket 34: 60%\n  bucket 33: 80%\n  bucket 34: 70%\n  bucket 33: 90%\n  bucket 34: 80%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 36\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 35:\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 35: 10%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 36: 10%\n  Sorting block time: 00:00:00\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  bucket 36: 20%\nReturning block of 60 for bucket 37\n  bucket 36: 30%\n  (Using difference cover)\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 38: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 38: 30%\n  bucket 39: 50%\n  bucket 38: 40%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 38: 50%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  bucket 38: 60%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Entering block accumulator loop for bucket 40:\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 10%\nGetting block 42 of 60\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 20%\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  bucket 40: 30%\n  Entering block accumulator loop for bucket 42:\n  bucket 40: 40%\n  bucket 42: 10%\n  bucket 41: 10%\n  bucket 42: 20%\n  bucket 41: 20%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 41: 30%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 41: 40%\n  bucket 40: 90%\n  bucket 41: 50%\n  bucket 42: 30%\n  bucket 41: 60%\n  bucket 40: 100%\n  bucket 42: 40%\n  Sorting block of length 41 for bucket 40\n  bucket 41: 70%\n  bucket 42: 50%\n  bucket 41: 80%\n  (Using difference cover)\n  bucket 42: 60%\n  bucket 41: 90%\n  bucket 42: 70%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\nGetting block 44 of 60\n  Calculating Z arrays for bucket 43\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 10%\n  bucket 44: 10%\n  bucket 43: 20%\n  bucket 44: 20%\n  bucket 43: 30%\n  bucket 44: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 44: 40%\n  bucket 43: 60%\n  bucket 44: 50%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 44: 60%\n  bucket 43: 90%\n  bucket 44: 70%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\nGetting block 47 of 60\n  bucket 45: 10%\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 45: 20%\n  bucket 45: 30%\n  Entering block accumulator loop for bucket 47:\n  bucket 45: 40%\n  bucket 47: 10%\n  bucket 45: 50%\n  bucket 47: 20%\n  bucket 45: 60%\n  bucket 47: 30%\n  bucket 45: 70%\n  bucket 47: 40%\n  bucket 45: 80%\n  bucket 47: 50%\n  bucket 45: 90%\n  bucket 47: 60%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  bucket 47: 70%\n  (Using difference cover)\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nReturning block of 80 for bucket 45\nGetting block 48 of 60\nGetting block 49 of 60\n  Reserving size (126) for bucket 48\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 48\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 49: 10%\n  bucket 48: 40%\n  bucket 49: 20%\n  bucket 48: 50%\n  bucket 49: 30%\n  bucket 48: 60%\n  bucket 49: 40%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 49: 50%\n  bucket 48: 90%\n  bucket 49: 60%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\nGetting block 51 of 60\n  bucket 50: 100%\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Sorting block of length 91 for bucket 51\n  Calculating Z arrays for bucket 52\n  (Using difference cover)\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  Sorting block time: 00:00:00\n  bucket 52: 50%\nReturning block of 92 for bucket 51\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\nGetting block 55 of 60\n  Calculating Z arrays for bucket 54\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 54:\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 10%\n  bucket 55: 10%\n  bucket 54: 20%\n  bucket 55: 20%\n  bucket 54: 30%\n  bucket 55: 30%\n  bucket 54: 40%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 54: 50%\n  bucket 55: 60%\n  bucket 54: 60%\n  bucket 55: 70%\n  bucket 54: 70%\n  bucket 55: 80%\n  bucket 54: 80%\n  bucket 55: 90%\n  bucket 54: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 56:\nReturning block of 65 for bucket 54\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\nGetting block 58 of 60\n  Calculating Z arrays for bucket 57\n  Reserving size (126) for bucket 58\n  Entering block accumulator loop for bucket 57:\n  Calculating Z arrays for bucket 58\n  bucket 57: 10%\n  bucket 57: 20%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 30%\n  bucket 58: 10%\n  bucket 57: 40%\n  bucket 58: 20%\n  bucket 57: 50%\n  bucket 58: 30%\n  bucket 57: 60%\n  bucket 58: 40%\n  bucket 57: 70%\n  bucket 58: 50%\n  bucket 57: 80%\n  bucket 58: 60%\n  bucket 57: 90%\n  bucket 58: 70%\n  bucket 57: 100%\n  bucket 58: 80%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Entering block accumulator loop for bucket 59:\n  Calculating Z arrays for bucket 60\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 50%\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 59: 60%\n  bucket 60: 30%\n  bucket 59: 70%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 59: 80%\n  bucket 60: 60%\n  bucket 59: 90%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\nGetting block 3 of 60\n  Reserving size (126) for bucket 2\n  Reserving size (126) for bucket 3\nGetting block 4 of 60\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 2\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 4\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 3:\n  Reserving size (126) for bucket 1\n  Calculating Z arrays for bucket 4\nGetting block 7 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 6\n  bucket 2: 10%\n  bucket 3: 10%\n  Entering block accumulator loop for bucket 6:\n  Reserving size (126) for bucket 5\n  Calculating Z arrays for bucket 1\n  bucket 6: 10%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 4:\n  bucket 6: 20%\nGetting block 8 of 60\n  bucket 6: 30%\n  bucket 2: 30%\n  bucket 3: 20%\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 8\n  bucket 4: 10%\n  Entering block accumulator loop for bucket 1:\n  bucket 4: 20%\n  Entering block accumulator loop for bucket 5:\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 40%\n  bucket 1: 10%\n  bucket 5: 10%\n  bucket 4: 30%\n  bucket 1: 20%\n  bucket 6: 50%\n  bucket 5: 20%\n  bucket 1: 30%\n  bucket 4: 40%\n  bucket 2: 40%\n  bucket 7: 10%\n  bucket 5: 30%\n  bucket 6: 60%\n  bucket 2: 50%\n  bucket 1: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 1: 50%\n  bucket 7: 20%\n  bucket 2: 60%\n  bucket 6: 70%\n  bucket 1: 60%\n  bucket 3: 30%\n  bucket 1: 70%\n  bucket 4: 50%\n  bucket 7: 30%\n  bucket 6: 80%\n  bucket 2: 70%\n  bucket 1: 80%\n  bucket 8: 10%\n  bucket 2: 80%\n  bucket 5: 40%\n  bucket 7: 40%\n  bucket 1: 90%\n  bucket 3: 40%\n  bucket 2: 90%\n  bucket 1: 100%\n  bucket 4: 60%\n  bucket 8: 20%\n  Sorting block of length 42 for bucket 1\n  bucket 5: 50%\n  bucket 4: 70%\n  bucket 2: 100%\n  bucket 8: 30%\n  bucket 4: 80%\n  bucket 5: 60%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 3: 50%\n  bucket 5: 70%\n  (Using difference cover)\n  bucket 8: 40%\n  bucket 3: 60%\n  bucket 5: 80%\n  bucket 4: 90%\n  bucket 3: 70%\n  bucket 5: 90%\n  bucket 8: 50%\n  bucket 7: 50%\n  bucket 3: 80%\n  bucket 5: 100%\n  bucket 8: 60%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 4: 100%\n  Sorting block time: 00:00:00\n  bucket 7: 60%\n  bucket 3: 90%\nReturning block of 85 for bucket 2\n  bucket 8: 70%\n  bucket 7: 70%\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  bucket 7: 80%\n  (Using difference cover)\n  bucket 8: 80%\n  bucket 7: 90%\n  bucket 8: 90%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 8: 100%\n  bucket 6: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 13 of 60\nGetting block 11 of 60\n  Reserving size (126) for bucket 13\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 12\n  Calculating Z arrays for bucket 11\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 11:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 11: 10%\n  bucket 12: 10%\n  bucket 13: 30%\n  bucket 11: 20%\n  bucket 12: 20%\n  bucket 13: 40%\n  bucket 11: 30%\n  bucket 13: 50%\n  bucket 12: 30%\n  bucket 11: 40%\n  bucket 13: 60%\n  bucket 12: 40%\n  bucket 13: 70%\n  bucket 12: 50%\n  bucket 13: 80%\n  bucket 11: 50%\n  bucket 13: 90%\n  bucket 11: 60%\n  bucket 12: 60%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 12: 70%\n  bucket 11: 80%\n  bucket 12: 80%\n  bucket 11: 90%\n  bucket 12: 90%\n  bucket 11: 100%\n  bucket 12: 100%\n  Sorting block of length 95 for bucket 11\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  Entering block accumulator loop for bucket 14:\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 14: 10%\n  bucket 15: 40%\n  bucket 14: 20%\n  bucket 15: 50%\n  bucket 14: 30%\n  bucket 15: 60%\n  bucket 14: 40%\n  bucket 15: 70%\n  bucket 14: 50%\n  bucket 15: 80%\n  bucket 14: 60%\n  bucket 15: 90%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 15: 100%\n  bucket 14: 90%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 16 of 60\nGetting block 17 of 60\n  Reserving size (126) for bucket 16\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\nGetting block 18 of 60\n  Calculating Z arrays for bucket 16\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 10%\n  bucket 18: 10%\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 18: 20%\n  bucket 17: 20%\n  bucket 18: 30%\n  bucket 16: 30%\n  bucket 18: 40%\n  bucket 17: 30%\n  bucket 16: 40%\n  bucket 18: 50%\n  bucket 17: 40%\n  bucket 16: 50%\n  bucket 17: 50%\n  bucket 18: 60%\n  bucket 16: 60%\n  bucket 18: 70%\n  bucket 17: 60%\n  bucket 18: 80%\n  bucket 16: 70%\n  bucket 17: 70%\n  bucket 18: 90%\n  bucket 17: 80%\n  bucket 16: 80%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  bucket 17: 90%\n  bucket 16: 90%\n  bucket 17: 100%\n  bucket 16: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\nGetting block 20 of 60\n  bucket 19: 60%\n  Reserving size (126) for bucket 20\n  bucket 19: 70%\n  Calculating Z arrays for bucket 20\n  bucket 19: 80%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 90%\n  bucket 20: 10%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\nGetting block 23 of 60\n  bucket 22: 30%\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\nGetting block 24 of 60\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 40%\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 22: 50%\n  bucket 23: 10%\n  bucket 22: 60%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 22: 70%\n  bucket 23: 30%\n  bucket 24: 10%\n  bucket 22: 80%\n  bucket 23: 40%\n  bucket 24: 20%\n  bucket 22: 90%\n  bucket 23: 50%\n  bucket 24: 30%\n  bucket 22: 100%\n  bucket 23: 60%\n  Sorting block of length 80 for bucket 22\n  bucket 24: 40%\n  (Using difference cover)\n  bucket 23: 70%\n  bucket 24: 50%\n  bucket 23: 80%\n  bucket 24: 60%\n  bucket 23: 90%\n  bucket 24: 70%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\n  bucket 27: 10%\n  bucket 27: 20%\nGetting block 28 of 60\n  bucket 27: 30%\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 40%\n  bucket 27: 50%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 60%\n  bucket 27: 70%\n  bucket 28: 10%\n  bucket 27: 80%\n  bucket 28: 20%\n  bucket 27: 90%\n  bucket 28: 30%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 40%\n  bucket 28: 50%\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 60%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 70%\n  bucket 28: 80%\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  bucket 28: 90%\n  bucket 29: 10%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  bucket 29: 20%\n  bucket 29: 30%\n  (Using difference cover)\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\nGetting block 31 of 60\n  Calculating Z arrays for bucket 30\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 31: 10%\n  bucket 30: 20%\n  bucket 31: 20%\n  bucket 30: 30%\n  bucket 31: 30%\n  bucket 30: 40%\n  bucket 31: 40%\n  bucket 30: 50%\n  bucket 31: 50%\n  bucket 30: 60%\n  bucket 31: 60%\n  bucket 30: 70%\n  bucket 31: 70%\n  bucket 30: 80%\n  bucket 31: 80%\n  bucket 30: 90%\n  bucket 31: 90%\n  bucket 30: 100%\n  bucket 31: 100%\n  Sorting block of length 124 for bucket 30\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  (Using difference cover)\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\n  bucket 32: 10%\nReturning block of 125 for bucket 30\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 60\n  Entering block accumulator loop for bucket 33:\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 10%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 20%\n  bucket 34: 10%\n  bucket 33: 30%\n  bucket 34: 20%\n  bucket 33: 40%\n  bucket 34: 30%\n  bucket 33: 50%\n  bucket 34: 40%\n  bucket 33: 60%\n  bucket 34: 50%\n  bucket 33: 70%\n  bucket 34: 60%\n  bucket 33: 80%\n  bucket 34: 70%\n  bucket 33: 90%\n  bucket 34: 80%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 36\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 36:\n  Entering block accumulator loop for bucket 35:\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 35: 10%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 36: 10%\n  Sorting block time: 00:00:00\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  bucket 36: 20%\nReturning block of 60 for bucket 37\n  bucket 36: 30%\n  (Using difference cover)\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 38: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 38: 30%\n  bucket 39: 50%\n  bucket 38: 40%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 38: 50%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  bucket 38: 60%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  Sorting block time: 00:00:00\n  (Using difference cover)\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\nGetting block 41 of 60\n  Entering block accumulator loop for bucket 40:\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 10%\nGetting block 42 of 60\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 20%\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  bucket 40: 30%\n  Entering block accumulator loop for bucket 42:\n  bucket 40: 40%\n  bucket 42: 10%\n  bucket 41: 10%\n  bucket 42: 20%\n  bucket 41: 20%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 41: 30%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 41: 40%\n  bucket 40: 90%\n  bucket 41: 50%\n  bucket 42: 30%\n  bucket 41: 60%\n  bucket 40: 100%\n  bucket 42: 40%\n  Sorting block of length 41 for bucket 40\n  bucket 41: 70%\n  bucket 42: 50%\n  bucket 41: 80%\n  (Using difference cover)\n  bucket 42: 60%\n  bucket 41: 90%\n  bucket 42: 70%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\nGetting block 44 of 60\n  Calculating Z arrays for bucket 43\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 43:\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 10%\n  bucket 44: 10%\n  bucket 43: 20%\n  bucket 44: 20%\n  bucket 43: 30%\n  bucket 44: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 44: 40%\n  bucket 43: 60%\n  bucket 44: 50%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 44: 60%\n  bucket 43: 90%\n  bucket 44: 70%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\nGetting block 47 of 60\n  bucket 45: 10%\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 45: 20%\n  bucket 45: 30%\n  Entering block accumulator loop for bucket 47:\n  bucket 45: 40%\n  bucket 47: 10%\n  bucket 45: 50%\n  bucket 47: 20%\n  bucket 45: 60%\n  bucket 47: 30%\n  bucket 45: 70%\n  bucket 47: 40%\n  bucket 45: 80%\n  bucket 47: 50%\n  bucket 45: 90%\n  bucket 47: 60%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  bucket 47: 70%\n  (Using difference cover)\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nReturning block of 80 for bucket 45\nGetting block 48 of 60\nGetting block 49 of 60\n  Reserving size (126) for bucket 48\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 48\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 48:\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 49: 10%\n  bucket 48: 40%\n  bucket 49: 20%\n  bucket 48: 50%\n  bucket 49: 30%\n  bucket 48: 60%\n  bucket 49: 40%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 49: 50%\n  bucket 48: 90%\n  bucket 49: 60%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\nGetting block 51 of 60\n  bucket 50: 100%\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Sorting block of length 91 for bucket 51\n  Calculating Z arrays for bucket 52\n  (Using difference cover)\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  Sorting block time: 00:00:00\n  bucket 52: 50%\nReturning block of 92 for bucket 51\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\nGetting block 55 of 60\n  Calculating Z arrays for bucket 54\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 54:\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 10%\n  bucket 55: 10%\n  bucket 54: 20%\n  bucket 55: 20%\n  bucket 54: 30%\n  bucket 55: 30%\n  bucket 54: 40%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 54: 50%\n  bucket 55: 60%\n  bucket 54: 60%\n  bucket 55: 70%\n  bucket 54: 70%\n  bucket 55: 80%\n  bucket 54: 80%\n  bucket 55: 90%\n  bucket 54: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Sorting block time: 00:00:00\n  Entering block accumulator loop for bucket 56:\nReturning block of 65 for bucket 54\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\nGetting block 58 of 60\n  Calculating Z arrays for bucket 57\n  Reserving size (126) for bucket 58\n  Entering block accumulator loop for bucket 57:\n  Calculating Z arrays for bucket 58\n  bucket 57: 10%\n  bucket 57: 20%\n  Entering block accumulator loop for bucket 58:\n  bucket 57: 30%\n  bucket 58: 10%\n  bucket 57: 40%\n  bucket 58: 20%\n  bucket 57: 50%\n  bucket 58: 30%\n  bucket 57: 60%\n  bucket 58: 40%\n  bucket 57: 70%\n  bucket 58: 50%\n  bucket 57: 80%\n  bucket 58: 60%\n  bucket 57: 90%\n  bucket 58: 70%\n  bucket 57: 100%\n  bucket 58: 80%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Entering block accumulator loop for bucket 59:\n  Calculating Z arrays for bucket 60\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  Entering block accumulator loop for bucket 60:\n  bucket 59: 50%\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 59: 60%\n  bucket 60: 30%\n  bucket 59: 70%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 59: 80%\n  bucket 60: 60%\n  bucket 59: 90%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:19:24", "plugin": "core", "name": "end_epoch", "raw_value": "1684912764.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:19:23", "plugin": "core", "name": "start_epoch", "raw_value": "1684912763.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 2, "time_seconds": 37.15520787239075, "inputs": {"reference_genome|source": "indexed", "library|input_1": {"src": "hda", "id": "caa7217d8a61478d"}, "library|input_2": {"src": "hda", "id": "fd67a9b8be98762a"}, "library|type": "paired"}, "job": {"model_class": "Job", "id": "59d2cd2b9c3bdf1e", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:14:00.073636", "create_time": "2023-05-24T07:13:44.886770", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-4b629", "command_line": "set -o pipefail;         ln -f -s '/galaxy/server/database/objects/1/9/8/dataset_198a9be1-49ce-457d-b922-19129bd0594c.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/f/2/f/dataset_f2fbac76-675e-4c25-8358-588e5ca17b31.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x '/cvmfs/data.galaxyproject.org/managed/hisat2_index/apiMel4/apiMel4'    -1 'input_f.fastq' -2 'input_r.fastq'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/6/e/b/dataset_6eb08752-6a85-4dec-9a03-449b3e012cee.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"phiX\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/phiX.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 577, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 578, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 0, \"index\": \"apiMel4\", \"source\": \"indexed\"}"}, "inputs": {"input_1": {"id": "caa7217d8a61478d", "src": "hda", "uuid": "198a9be1-49ce-457d-b922-19129bd0594c"}, "input_2": {"id": "fd67a9b8be98762a", "src": "hda", "uuid": "f2fbac76-675e-4c25-8358-588e5ca17b31"}}, "outputs": {"output_alignments": {"id": "f4b7d43c6c171f09", "src": "hda", "uuid": "6eb08752-6a85-4dec-9a03-449b3e012cee"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "10 reads; of these:\n  10 (100.00%) were paired; of these:\n    10 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    10 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    10 pairs aligned 0 times concordantly or discordantly; of these:\n      20 mates make up the pairs; of these:\n        20 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:13:48", "plugin": "core", "name": "end_epoch", "raw_value": "1684912428.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:13:48", "plugin": "core", "name": "start_epoch", "raw_value": "1684912428.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "output_problems": ["Output output_alignments:  different than expected, difference (using diff):\n( /tmp/local_bam_converted_to_sam_4q8g2dxa.sam v. /tmp/history_bam_converted_to_sam_pbod00z3.sam )\n--- local_file\n+++ history_data\n@@ -1,23 +1,5343 @@\n @HD\tVN:1.0\tSO:coordinate\n-@PG\tID:hisat2\tPN:hisat2\tVN:2.1.0\tCL:\"/home/maria/miniconda3/envs/mulled-v1-3b104c294f65450b09ba89d24826c61eddd553d789c9f1ae48a29715de1b7426/bin/hisat2-align-s --wrapper basic-0 -p 1 -x genome -1 input_f.fastq -2 input_r.fastq\"\n-@SQ\tSN:phiX174\tLN:5386\n-phiX174_1141_1609_1:0:0_1:0:0_4\t147\tphiX174\t1540\t60\t70M\t=\t1141\t-469\tTTCTAGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tZS:i:-5\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:4C65\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1141_1609_1:0:0_1:0:0_4\t99\tphiX174\t1141\t60\t70M\t=\t1540\t469\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:24G45\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1363_1914_3:0:0_0:0:0_6\t133\tphiX174\t1845\t0\t*\t=\t1845\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n-phiX174_1363_1914_3:0:0_0:0:0_6\t89\tphiX174\t1845\t60\t70M\t=\t1845\t0\tGCACTATGTTTACTCTTGCGCTTGTTCGTTTTCCGCCTACTGCGACTAAAGAGATTCAGTACCTTAACGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYT:Z:UP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t147\tphiX174\t1896\t60\t70M\t=\t1542\t-424\tAGATTCAGTACCTTAACGCTAAAGGTGCTTTGACTTATACCGATATTGCTGGCGACCCTGTTTTGTATGG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_1542_1965_0:0:0_0:0:0_1\t99\tphiX174\t1542\t60\t70M\t=\t1896\t424\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t147\tphiX174\t639\t60\t70M\t=\t185\t-524\tTATTATGTTCATCCCGTCAACATTCAAACGGCCTGTCGCATCATGGAAGGCGCTGAATTTACGGAAAACA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:37T32\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_185_708_0:0:0_1:0:0_5\t99\tphiX174\t185\t60\t70M\t=\t639\t524\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t163\tphiX174\t1980\t60\t70M\t=\t2432\t522\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:12T57\tYS:i:-9\tYT:Z:CP\tNH:i:1\n-phiX174_1980_2501_0:1:0_3:0:0_0\t83\tphiX174\t2432\t60\t70M\t=\t1980\t-522\tTTTTTTCTGATAAGCTGGTTCTCAATTCTGTTAATCCAGCTTCTTCGGCACCTGTTTTACACACACCTAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-9\tXN:i:0\tXM:i:3\tXO:i:0\tXG:i:0\tNM:i:3\tMD:Z:24C8C27G8\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t147\tphiX174\t2508\t60\t70M\t=\t2128\t-450\tATCGTCAACGTTATATTTTGATAGTTTGAAGGTTAATGCTGGTATTGGTGGTTTTCTTAATTCCATTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-12\tXN:i:0\tXM:i:4\tXO:i:0\tXG:i:0\tNM:i:4\tMD:Z:29C14A13C3G7\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_2128_2577_0:0:0_4:0:0_9\t99\tphiX174\t2128\t60\t70M\t=\t2508\t450\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-12\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t147\tphiX174\t2670\t60\t70M\t=\t2259\t-481\tTCGCTTTGAGTCTTCGTCGGTTCCGACTACCCTCCCGACTGCCTATGATGTTTATCCTTTGAATGGTCGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:15T54\tYS:i:-2\tYT:Z:CP\tNH:i:1\n-phiX174_2259_2739_1:0:0_1:0:0_3\t99\tphiX174\t2259\t60\t68M2S\t=\t2670\t481\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-2\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:68\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t163\tphiX174\t2950\t60\t70M\t=\t3308\t428\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-6\tYT:Z:CP\tNH:i:1\n-phiX174_2950_3377_0:0:0_2:0:0_2\t83\tphiX174\t3308\t60\t70M\t=\t2950\t-428\tTGAGATTAATGCTTGGGAGCGTGCTGGTGCTGATGCTTCCTATGCTGGTATGGTTGACGCCGGATTTGAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-6\tZS:i:-8\tXN:i:0\tXM:i:2\tXO:i:0\tXG:i:0\tNM:i:2\tMD:Z:4C36C28\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t147\tphiX174\t3663\t60\t70M\t=\t3199\t-534\tAATGACCAAATCAATGAAATGACTCGCAAGGTTAGTGCTGAGGTTGACTTAGTTCATCAGCAAACGCAGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:14A55\tYS:i:0\tYT:Z:CP\tNH:i:1\n-phiX174_3199_3732_0:0:0_1:0:0_7\t99\tphiX174\t3199\t60\t70M\t=\t3663\t534\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:0\tXN:i:0\tXM:i:0\tXO:i:0\tXG:i:0\tNM:i:0\tMD:Z:70\tYS:i:-3\tYT:Z:CP\tNH:i:1\n-phiX174_36_572_1:0:0_0:0:0_8\t163\tphiX174\t36\t60\t70M\t=\t503\t537\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tAS:i:-3\tXN:i:0\tXM:i:1\tXO:i:0\tXG:i:0\tNM:i:1\tMD:Z:45G24\tYS:i:0\tYT:Z:CP\tNH:i:1\n********\n*SNIP *\n********\n+@SQ\tSN:Group6\tLN:18472937\n+@SQ\tSN:Group7\tLN:13219345\n+@SQ\tSN:Group8\tLN:13546544\n+@SQ\tSN:Group9\tLN:11120453\n+@SQ\tSN:chrM\tLN:16343\n+phiX174_1141_1609_1:0:0_1:0:0_4\t141\t*\t0\t0\t*\t*\t0\t0\tCAAATTAGCATAAGCAGCTTGCAGACCCATAATGTCAATAGATGTGGTAGAAGTCGTCATTTGGCTAGAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1141_1609_1:0:0_1:0:0_4\t77\t*\t0\t0\t*\t*\t0\t0\tTGGCGCTCTCCGTCTTTCTCCATTTCGTCGTGGCCTTGCTATTGACTCTACTGTAGACATTTTTACTTTT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t141\t*\t0\t0\t*\t*\t0\t0\tTAAGCATTTGTTTCAGGGTTATTTGAATATCTATAACAACTATTTTCAAGCGCCGAGGATGCGTGACCGT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1363_1914_3:0:0_0:0:0_6\t77\t*\t0\t0\t*\t*\t0\t0\tGCGTTAAGGTACTGAATCTCTTTAGTCGCAGTAGGCGGAAAACGAACAAGCGCAAGAGTAAACATAGTGC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t141\t*\t0\t0\t*\t*\t0\t0\tCCATACAAAACAGGGTCGCCAGCAATATCGGTATAAGTCAAAGCACCTTTAGCGTTAAGGTACTGAATCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1542_1965_0:0:0_0:0:0_1\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCCAAATGACGACTTCTACCACATCTATTGACATTATGGGTCTGCAAGCTGCTTATGCTAATTTGCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t141\t*\t0\t0\t*\t*\t0\t0\tTGTTTTCCGTAAATTCAGCGCCTTCCATGATGCGACAGGCCGTTTGAATGTTGACGGGATGAACATAATA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_185_708_0:0:0_1:0:0_5\t77\t*\t0\t0\t*\t*\t0\t0\tCCTTTCGCCATCAACTAACGATTCTGTCAAAAACTGACGCGTTGGATGAGGAGAAGTGGCTTAATATGCT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t141\t*\t0\t0\t*\t*\t0\t0\tGTGAAATTTCTAGGAAGGATGTTTTCCGTTCTGGTGATTCGTCTAAGAAGTTTAAGATTGCTGAGGGTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_1980_2501_0:1:0_3:0:0_0\t77\t*\t0\t0\t*\t*\t0\t0\tTTAGGTGTGTGTAAAACAGGTGCCGAAGAAGCTGGATTAACAGAATTGAGAACCAGCTTATCAGAAAAAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t141\t*\t0\t0\t*\t*\t0\t0\tCTGAATGGAATTAAGAAAACCACCAATACCAGCATTAACCTTCAAACTATCAAAATATAACGTTGACGAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2128_2577_0:0:0_4:0:0_9\t77\t*\t0\t0\t*\t*\t0\t0\tTTCTGGTGATTTGCAAGAACGCGTACTTATTCGCCACCATGATTATGACCAGTGTTTCCAGTCCGTTCAG\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t141\t*\t0\t0\t*\t*\t0\t0\tGCGACCATTCAAAGGATAAACATCATAGGCAGTCGGGAGGGTAGTCGGAACCGACGAAGACTCAAAGCGA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2259_2739_1:0:0_1:0:0_3\t77\t*\t0\t0\t*\t*\t0\t0\tCTCGCGATTCAATCATGACTTCGTGATAAAAGATTGAGTGTGAGGTTATAACGCCGAAGCGGTAAAAAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t141\t*\t0\t0\t*\t*\t0\t0\tGCGGTATTGCTTCTGCTCTTGCTGGTGGCGCCATGTCTAAATTGTTTGGAGGCGGTCAAAAAGCCGCCTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_2950_3377_0:0:0_2:0:0_2\t77\t*\t0\t0\t*\t*\t0\t0\tCTCAAATCCGGCGTCAACCATACCAGCATAGGAAGCATCAGCACCAGCACGCTCCCAAGCATTAATCTCA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t141\t*\t0\t0\t*\t*\t0\t0\tTCTGCGTTTGCTGATGAACTAAGTCAACCTCAGCACTAACCTTGCGAGTCATTTCATTGATTTGGTCATT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_3199_3732_0:0:0_1:0:0_7\t77\t*\t0\t0\t*\t*\t0\t0\tCTGGCACTTCTGCCGTTTCTGATAAGTTGCTTGATTTGGTTGGACTTGGTGGCAAGTCTGCCGCTGATAA\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t141\t*\t0\t0\t*\t*\t0\t0\tTTTCGGATATTTCTGATGAGTCGAAAAATTATCTTGATAAAGCAGTAATTACTACTGCTTGTTTACGAAT\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n+phiX174_36_572_1:0:0_0:0:0_8\t77\t*\t0\t0\t*\t*\t0\t0\tACCATAAACGCAAGCCTCAACGCAGCGACGAGCACGAGAGCGGTCAGTAGCAATCCAAACTTTGTTACTC\t2222222222222222222222222222222222222222222222222222222222222222222222\tYT:Z:UP\n"], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 3, "time_seconds": 40.3178334236145, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "e6c6aa9269fca864"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "801a835209f601af"}, "library|input_2": {"src": "hda", "id": "ed03c3aa562dfd4c"}, "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "bab84529b2f28d18", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:14:06.024242", "create_time": "2023-05-24T07:13:53.337485", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-hsxwq", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/4/3/2/dataset_4326c498-0f18-4c50-b53e-53aef0545dbc.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/7/d/f/dataset_7df848f8-862a-4645-af7c-5b672a1fc0c6.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/a/b/e/dataset_abe0f059-b67c-4475-b4c6-1d754a5bc161.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'         --trim5 '15' --trim3 '15' --phred33                          | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/c/f/6/dataset_cf69d9a5-a255-4e1e-b734-1c7dc269a055.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 580, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 581, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 579, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "e6c6aa9269fca864", "src": "hda", "uuid": "4326c498-0f18-4c50-b53e-53aef0545dbc"}, "input_1": {"id": "801a835209f601af", "src": "hda", "uuid": "7df848f8-862a-4645-af7c-5b672a1fc0c6"}, "input_2": {"id": "ed03c3aa562dfd4c", "src": "hda", "uuid": "abe0f059-b67c-4475-b4c6-1d754a5bc161"}}, "outputs": {"output_alignments": {"id": "a5169b5e5b23afdc", "src": "hda", "uuid": "cf69d9a5-a255-4e1e-b734-1c7dc269a055"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\nGetting block 3 of 60\n  Reserving size (126) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 3\n  bucket 1: 10%\nGetting block 4 of 60\n  bucket 1: 20%\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\nGetting block 5 of 60\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\nGetting block 6 of 60\n  bucket 4: 10%\n  Reserving size (126) for bucket 5\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 5\n  bucket 1: 40%\n  Reserving size (126) for bucket 6\nGetting block 7 of 60\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 10%\n  bucket 1: 60%\n  bucket 5: 10%\n  bucket 4: 20%\n  bucket 2: 20%\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 70%\n  bucket 5: 30%\n  bucket 2: 30%\n  bucket 3: 10%\n  bucket 1: 80%\n  Reserving size (126) for bucket 7\n  bucket 2: 40%\n  bucket 3: 20%\n  bucket 5: 40%\n  bucket 1: 90%\n  Calculating Z arrays for bucket 7\n  bucket 3: 30%\n  bucket 1: 100%\n  bucket 2: 50%\n  bucket 5: 50%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 2: 70%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 60%\n  bucket 4: 50%\n  Calculating Z arrays for bucket 6\n  bucket 2: 80%\n  bucket 7: 10%\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 5: 70%\n  bucket 7: 20%\n  bucket 2: 100%\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 5: 80%\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 60%\n  bucket 5: 90%\n  Calculating Z arrays for bucket 8\n  bucket 4: 80%\n  bucket 7: 30%\n  bucket 3: 70%\n  bucket 6: 10%\n  bucket 4: 90%\n  bucket 5: 100%\n  bucket 3: 80%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 7: 40%\n  bucket 3: 90%\n  bucket 6: 20%\n  bucket 4: 100%\n  bucket 3: 100%\n  Sorting block of length 68 for bucket 4\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 6: 30%\n  (Using difference cover)\n  bucket 7: 60%\n  bucket 6: 40%\n  bucket 7: 70%\n  bucket 6: 50%\n  bucket 7: 80%\n  bucket 6: 60%\n  bucket 7: 90%\n  bucket 6: 70%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  Sorting block time: 00:00:00\n  bucket 6: 80%\n  (Using difference cover)\nReturning block of 43 for bucket 1\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\nGetting block 14 of 60\n  Calculating Z arrays for bucket 13\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 15 of 60\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 16\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 10%\n  bucket 15: 10%\n  bucket 16: 20%\n  bucket 15: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 16: 50%\n  bucket 15: 50%\n  bucket 16: 60%\n  bucket 15: 60%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 16: 90%\n  bucket 15: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 19: 20%\n  bucket 18: 10%\n  bucket 19: 30%\n  bucket 18: 20%\n  bucket 19: 40%\n  bucket 18: 30%\n  bucket 19: 50%\n  bucket 18: 40%\n  bucket 19: 60%\n  bucket 18: 50%\n  bucket 19: 70%\n  bucket 18: 60%\n  bucket 19: 80%\n  bucket 18: 70%\n  bucket 19: 90%\n  bucket 18: 80%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\nGetting block 21 of 60\n  bucket 20: 30%\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 40%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 50%\n  bucket 21: 10%\n  bucket 20: 60%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  bucket 21: 20%\n  bucket 20: 70%\n  Calculating Z arrays for bucket 22\n  bucket 21: 30%\n  bucket 20: 80%\n  bucket 20: 90%\n  Entering block accumulator loop for bucket 22:\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  Sorting block time: 00:00:00\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  Sorting block time: 00:00:00\nGetting block 25 of 60\n  bucket 24: 10%\n  Reserving size (126) for bucket 25\n  bucket 24: 20%\n  Calculating Z arrays for bucket 25\nReturning block of 65 for bucket 23\n  bucket 24: 30%\n  bucket 24: 40%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 25: 10%\n  bucket 24: 70%\n  bucket 25: 20%\n  bucket 24: 80%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 24: 90%\n  bucket 25: 60%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nReturning block of 69 for bucket 24\nGetting block 26 of 60\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 27\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 26:\n  bucket 27: 10%\n  bucket 26: 10%\n  bucket 27: 20%\n  bucket 26: 20%\n  bucket 27: 30%\n  bucket 26: 30%\n  bucket 27: 40%\n  bucket 26: 40%\n  bucket 27: 50%\n  bucket 26: 50%\n  bucket 27: 60%\n  bucket 26: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 26: 70%\n  bucket 27: 90%\n  bucket 26: 80%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Entering block accumulator loop for bucket 28:\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 10%\n  bucket 28: 20%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 29: 10%\n  bucket 28: 50%\n  bucket 29: 20%\n  bucket 28: 60%\n  bucket 29: 30%\n  bucket 28: 70%\n  bucket 29: 40%\n  bucket 28: 80%\n  bucket 29: 50%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 40%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 50%\n  bucket 32: 10%\nGetting block 33 of 60\n  bucket 31: 60%\n  Reserving size (126) for bucket 33\n  bucket 31: 70%\n  bucket 32: 20%\n  bucket 31: 80%\n  bucket 32: 30%\n  bucket 31: 90%\n  Calculating Z arrays for bucket 33\n  bucket 32: 40%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 50%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 60%\n  bucket 33: 10%\n  bucket 32: 70%\n  bucket 33: 20%\n  bucket 32: 80%\n  bucket 33: 30%\n  bucket 32: 90%\n  bucket 33: 40%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\nGetting block 35 of 60\n  Calculating Z arrays for bucket 34\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 10%\n  bucket 35: 10%\n  bucket 34: 20%\n  bucket 35: 20%\n  bucket 34: 30%\n  bucket 35: 30%\n  bucket 34: 40%\n  bucket 35: 40%\n  bucket 34: 50%\n  bucket 35: 50%\n  bucket 34: 60%\n  bucket 35: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 35: 70%\n  bucket 34: 90%\n  bucket 35: 80%\n  bucket 34: 100%\n  bucket 35: 90%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Entering block accumulator loop for bucket 36:\nGetting block 38 of 60\n  Reserving size (126) for bucket 37\n  Reserving size (126) for bucket 38\n  bucket 36: 10%\n  Calculating Z arrays for bucket 37\n  Calculating Z arrays for bucket 38\n  bucket 36: 20%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 30%\n  Entering block accumulator loop for bucket 38:\n  bucket 36: 40%\n  bucket 38: 10%\n  bucket 37: 10%\n  bucket 36: 50%\n  bucket 37: 20%\n  bucket 38: 20%\n  bucket 36: 60%\n  bucket 37: 30%\n  bucket 38: 30%\n  bucket 36: 70%\n  bucket 37: 40%\n  bucket 38: 40%\n  bucket 36: 80%\n  bucket 38: 50%\n  bucket 36: 90%\n  bucket 38: 60%\n  bucket 36: 100%\n  bucket 37: 50%\n  bucket 38: 70%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 60%\n  bucket 38: 80%\n  bucket 37: 70%\n  bucket 38: 90%\n  bucket 37: 80%\n  bucket 38: 100%\n  bucket 37: 90%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 37: 100%\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nReturning block of 118 for bucket 38\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  bucket 40: 80%\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  bucket 40: 90%\n  Entering block accumulator loop for bucket 41:\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  bucket 40: 100%\n  bucket 41: 10%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 20%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 30%\n  bucket 42: 10%\n  Sorting block time: 00:00:00\n  bucket 42: 20%\n  bucket 41: 40%\n  bucket 42: 30%\n  bucket 41: 50%\n  bucket 42: 40%\n  bucket 41: 60%\n  bucket 42: 50%\n  bucket 41: 70%\nReturning block of 42 for bucket 40\n  bucket 42: 60%\n  bucket 41: 80%\n  bucket 42: 70%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  Reserving size (126) for bucket 44\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 46\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 10%\n  bucket 47: 10%\n  bucket 46: 20%\n  bucket 47: 20%\n  bucket 46: 30%\n  bucket 47: 30%\n  bucket 46: 40%\n  bucket 47: 40%\n  bucket 46: 50%\n  bucket 47: 50%\n  bucket 46: 60%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\nGetting block 49 of 60\n  Calculating Z arrays for bucket 48\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  Entering block accumulator loop for bucket 48:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 48: 10%\n  bucket 49: 40%\n  bucket 48: 20%\n  bucket 49: 50%\n  bucket 48: 30%\n  bucket 49: 60%\n  bucket 48: 40%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 48: 50%\n  bucket 49: 90%\n  bucket 48: 60%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\nGetting block 51 of 60\n  bucket 50: 40%\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 50%\n  bucket 50: 60%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 70%\n  bucket 51: 10%\n  bucket 50: 80%\n  bucket 51: 20%\n  bucket 50: 90%\n  bucket 51: 30%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\nGetting block 53 of 60\n  Calculating Z arrays for bucket 52\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 20%\n  bucket 53: 10%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 53: 20%\n  bucket 52: 50%\n  bucket 53: 30%\n  bucket 52: 60%\n  bucket 53: 40%\n  bucket 52: 70%\n  bucket 53: 50%\n  bucket 52: 80%\nGetting block 54 of 60\n  bucket 53: 60%\n  bucket 52: 90%\n  Reserving size (126) for bucket 54\n  bucket 53: 70%\n  Calculating Z arrays for bucket 54\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 80%\n  bucket 54: 10%\n  bucket 53: 90%\n  bucket 54: 20%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 54: 30%\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  bucket 54: 40%\nReturning block of 79 for bucket 53\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 56: 10%\n  bucket 55: 20%\n  bucket 56: 20%\n  bucket 55: 30%\n  bucket 56: 30%\n  bucket 55: 40%\n  bucket 56: 40%\n  bucket 55: 50%\n  bucket 56: 50%\n  bucket 55: 60%\n  bucket 56: 60%\n  bucket 55: 70%\n  bucket 56: 70%\n  bucket 55: 80%\n  bucket 56: 80%\n  bucket 55: 90%\n  bucket 56: 90%\n  bucket 55: 100%\n  bucket 56: 100%\n  Sorting block of length 79 for bucket 55\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 58\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  Entering block accumulator loop for bucket 58:\n  bucket 59: 10%\n  bucket 58: 10%\n  bucket 59: 20%\n  bucket 58: 20%\n  bucket 59: 30%\n  bucket 58: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 58: 40%\n  bucket 59: 60%\n  bucket 58: 50%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 58: 60%\n  bucket 59: 90%\n  bucket 59: 100%\n  bucket 58: 70%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    71 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    71 pairs aligned 0 times concordantly or discordantly; of these:\n      142 mates make up the pairs; of these:\n        74 (52.11%) aligned 0 times\n        68 (47.89%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n92.60% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    71 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    71 pairs aligned 0 times concordantly or discordantly; of these:\n      142 mates make up the pairs; of these:\n        74 (52.11%) aligned 0 times\n        68 (47.89%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n92.60% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\nGetting block 3 of 60\n  Reserving size (126) for bucket 2\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 3\n  bucket 1: 10%\nGetting block 4 of 60\n  bucket 1: 20%\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\nGetting block 5 of 60\n  bucket 1: 30%\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 4:\nGetting block 6 of 60\n  bucket 4: 10%\n  Reserving size (126) for bucket 5\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 5\n  bucket 1: 40%\n  Reserving size (126) for bucket 6\nGetting block 7 of 60\n  bucket 1: 50%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 10%\n  bucket 1: 60%\n  bucket 5: 10%\n  bucket 4: 20%\n  bucket 2: 20%\n  bucket 5: 20%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 70%\n  bucket 5: 30%\n  bucket 2: 30%\n  bucket 3: 10%\n  bucket 1: 80%\n  Reserving size (126) for bucket 7\n  bucket 2: 40%\n  bucket 3: 20%\n  bucket 5: 40%\n  bucket 1: 90%\n  Calculating Z arrays for bucket 7\n  bucket 3: 30%\n  bucket 1: 100%\n  bucket 2: 50%\n  bucket 5: 50%\n  bucket 3: 40%\n  bucket 2: 60%\n  bucket 4: 30%\n  bucket 3: 50%\n  bucket 2: 70%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 60%\n  bucket 4: 50%\n  Calculating Z arrays for bucket 6\n  bucket 2: 80%\n  bucket 7: 10%\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 5: 70%\n  bucket 7: 20%\n  bucket 2: 100%\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 4: 70%\n  bucket 5: 80%\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 60%\n  bucket 5: 90%\n  Calculating Z arrays for bucket 8\n  bucket 4: 80%\n  bucket 7: 30%\n  bucket 3: 70%\n  bucket 6: 10%\n  bucket 4: 90%\n  bucket 5: 100%\n  bucket 3: 80%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 7: 40%\n  bucket 3: 90%\n  bucket 6: 20%\n  bucket 4: 100%\n  bucket 3: 100%\n  Sorting block of length 68 for bucket 4\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 7: 50%\n  bucket 6: 30%\n  (Using difference cover)\n  bucket 7: 60%\n  bucket 6: 40%\n  bucket 7: 70%\n  bucket 6: 50%\n  bucket 7: 80%\n  bucket 6: 60%\n  bucket 7: 90%\n  bucket 6: 70%\n  bucket 7: 100%\n  Sorting block of length 75 for bucket 7\n  Sorting block time: 00:00:00\n  bucket 6: 80%\n  (Using difference cover)\nReturning block of 43 for bucket 1\n  bucket 6: 90%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Entering block accumulator loop for bucket 8:\n  bucket 8: 10%\n  bucket 8: 20%\n  bucket 8: 30%\n  bucket 8: 40%\n  bucket 8: 50%\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\nGetting block 14 of 60\n  Calculating Z arrays for bucket 13\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Entering block accumulator loop for bucket 13:\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 10%\n  bucket 14: 10%\n  bucket 13: 20%\n  bucket 14: 20%\n  bucket 13: 30%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 14: 50%\n  bucket 13: 50%\n  bucket 14: 60%\n  bucket 13: 60%\n  bucket 14: 70%\n  bucket 13: 70%\n  bucket 14: 80%\n  bucket 13: 80%\n  bucket 14: 90%\n  bucket 13: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 15 of 60\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 16\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 10%\n  bucket 15: 10%\n  bucket 16: 20%\n  bucket 15: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 16: 50%\n  bucket 15: 50%\n  bucket 16: 60%\n  bucket 15: 60%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 16: 90%\n  bucket 15: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\n  bucket 17: 80%\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\nGetting block 18 of 60\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 19: 20%\n  bucket 18: 10%\n  bucket 19: 30%\n  bucket 18: 20%\n  bucket 19: 40%\n  bucket 18: 30%\n  bucket 19: 50%\n  bucket 18: 40%\n  bucket 19: 60%\n  bucket 18: 50%\n  bucket 19: 70%\n  bucket 18: 60%\n  bucket 19: 80%\n  bucket 18: 70%\n  bucket 19: 90%\n  bucket 18: 80%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\nGetting block 21 of 60\n  bucket 20: 30%\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 40%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 50%\n  bucket 21: 10%\n  bucket 20: 60%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  bucket 21: 20%\n  bucket 20: 70%\n  Calculating Z arrays for bucket 22\n  bucket 21: 30%\n  bucket 20: 80%\n  bucket 20: 90%\n  Entering block accumulator loop for bucket 22:\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 21: 40%\n  bucket 22: 30%\n  bucket 21: 50%\n  bucket 22: 40%\n  bucket 21: 60%\n  bucket 22: 50%\n  bucket 21: 70%\n  bucket 22: 60%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 22: 70%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  Sorting block time: 00:00:00\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  Sorting block time: 00:00:00\nGetting block 25 of 60\n  bucket 24: 10%\n  Reserving size (126) for bucket 25\n  bucket 24: 20%\n  Calculating Z arrays for bucket 25\nReturning block of 65 for bucket 23\n  bucket 24: 30%\n  bucket 24: 40%\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 25: 10%\n  bucket 24: 70%\n  bucket 25: 20%\n  bucket 24: 80%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 24: 90%\n  bucket 25: 60%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\nReturning block of 69 for bucket 24\nGetting block 26 of 60\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 27\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 26:\n  bucket 27: 10%\n  bucket 26: 10%\n  bucket 27: 20%\n  bucket 26: 20%\n  bucket 27: 30%\n  bucket 26: 30%\n  bucket 27: 40%\n  bucket 26: 40%\n  bucket 27: 50%\n  bucket 26: 50%\n  bucket 27: 60%\n  bucket 26: 60%\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 26: 70%\n  bucket 27: 90%\n  bucket 26: 80%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\nGetting block 29 of 60\n  Entering block accumulator loop for bucket 28:\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 10%\n  bucket 28: 20%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 29: 10%\n  bucket 28: 50%\n  bucket 29: 20%\n  bucket 28: 60%\n  bucket 29: 30%\n  bucket 28: 70%\n  bucket 29: 40%\n  bucket 28: 80%\n  bucket 29: 50%\n  bucket 28: 90%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 40%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 50%\n  bucket 32: 10%\nGetting block 33 of 60\n  bucket 31: 60%\n  Reserving size (126) for bucket 33\n  bucket 31: 70%\n  bucket 32: 20%\n  bucket 31: 80%\n  bucket 32: 30%\n  bucket 31: 90%\n  Calculating Z arrays for bucket 33\n  bucket 32: 40%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 32: 50%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 60%\n  bucket 33: 10%\n  bucket 32: 70%\n  bucket 33: 20%\n  bucket 32: 80%\n  bucket 33: 30%\n  bucket 32: 90%\n  bucket 33: 40%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\nGetting block 35 of 60\n  Calculating Z arrays for bucket 34\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 34:\n  Entering block accumulator loop for bucket 35:\n  bucket 34: 10%\n  bucket 35: 10%\n  bucket 34: 20%\n  bucket 35: 20%\n  bucket 34: 30%\n  bucket 35: 30%\n  bucket 34: 40%\n  bucket 35: 40%\n  bucket 34: 50%\n  bucket 35: 50%\n  bucket 34: 60%\n  bucket 35: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 35: 70%\n  bucket 34: 90%\n  bucket 35: 80%\n  bucket 34: 100%\n  bucket 35: 90%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\nGetting block 37 of 60\n  Entering block accumulator loop for bucket 36:\nGetting block 38 of 60\n  Reserving size (126) for bucket 37\n  Reserving size (126) for bucket 38\n  bucket 36: 10%\n  Calculating Z arrays for bucket 37\n  Calculating Z arrays for bucket 38\n  bucket 36: 20%\n  Entering block accumulator loop for bucket 37:\n  bucket 36: 30%\n  Entering block accumulator loop for bucket 38:\n  bucket 36: 40%\n  bucket 38: 10%\n  bucket 37: 10%\n  bucket 36: 50%\n  bucket 37: 20%\n  bucket 38: 20%\n  bucket 36: 60%\n  bucket 37: 30%\n  bucket 38: 30%\n  bucket 36: 70%\n  bucket 37: 40%\n  bucket 38: 40%\n  bucket 36: 80%\n  bucket 38: 50%\n  bucket 36: 90%\n  bucket 38: 60%\n  bucket 36: 100%\n  bucket 37: 50%\n  bucket 38: 70%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 37: 60%\n  bucket 38: 80%\n  bucket 37: 70%\n  bucket 38: 90%\n  bucket 37: 80%\n  bucket 38: 100%\n  bucket 37: 90%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 37: 100%\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nReturning block of 118 for bucket 38\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  bucket 40: 80%\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  bucket 40: 90%\n  Entering block accumulator loop for bucket 41:\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  bucket 40: 100%\n  bucket 41: 10%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 20%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 30%\n  bucket 42: 10%\n  Sorting block time: 00:00:00\n  bucket 42: 20%\n  bucket 41: 40%\n  bucket 42: 30%\n  bucket 41: 50%\n  bucket 42: 40%\n  bucket 41: 60%\n  bucket 42: 50%\n  bucket 41: 70%\nReturning block of 42 for bucket 40\n  bucket 42: 60%\n  bucket 41: 80%\n  bucket 42: 70%\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 45:\n  bucket 45: 10%\n  bucket 45: 20%\n  bucket 45: 30%\n  bucket 45: 40%\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  bucket 45: 80%\n  Reserving size (126) for bucket 44\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 46\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 10%\n  bucket 47: 10%\n  bucket 46: 20%\n  bucket 47: 20%\n  bucket 46: 30%\n  bucket 47: 30%\n  bucket 46: 40%\n  bucket 47: 40%\n  bucket 46: 50%\n  bucket 47: 50%\n  bucket 46: 60%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\nGetting block 49 of 60\n  Calculating Z arrays for bucket 48\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  Entering block accumulator loop for bucket 48:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 48: 10%\n  bucket 49: 40%\n  bucket 48: 20%\n  bucket 49: 50%\n  bucket 48: 30%\n  bucket 49: 60%\n  bucket 48: 40%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 48: 50%\n  bucket 49: 90%\n  bucket 48: 60%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\nGetting block 51 of 60\n  bucket 50: 40%\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 50%\n  bucket 50: 60%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 70%\n  bucket 51: 10%\n  bucket 50: 80%\n  bucket 51: 20%\n  bucket 50: 90%\n  bucket 51: 30%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\nGetting block 53 of 60\n  Calculating Z arrays for bucket 52\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 20%\n  bucket 53: 10%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 53: 20%\n  bucket 52: 50%\n  bucket 53: 30%\n  bucket 52: 60%\n  bucket 53: 40%\n  bucket 52: 70%\n  bucket 53: 50%\n  bucket 52: 80%\nGetting block 54 of 60\n  bucket 53: 60%\n  bucket 52: 90%\n  Reserving size (126) for bucket 54\n  bucket 53: 70%\n  Calculating Z arrays for bucket 54\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 80%\n  bucket 54: 10%\n  bucket 53: 90%\n  bucket 54: 20%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 54: 30%\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  bucket 54: 40%\nReturning block of 79 for bucket 53\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 56: 10%\n  bucket 55: 20%\n  bucket 56: 20%\n  bucket 55: 30%\n  bucket 56: 30%\n  bucket 55: 40%\n  bucket 56: 40%\n  bucket 55: 50%\n  bucket 56: 50%\n  bucket 55: 60%\n  bucket 56: 60%\n  bucket 55: 70%\n  bucket 56: 70%\n  bucket 55: 80%\n  bucket 56: 80%\n  bucket 55: 90%\n  bucket 56: 90%\n  bucket 55: 100%\n  bucket 56: 100%\n  Sorting block of length 79 for bucket 55\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 58\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  Entering block accumulator loop for bucket 58:\n  bucket 59: 10%\n  bucket 58: 10%\n  bucket 59: 20%\n  bucket 58: 20%\n  bucket 59: 30%\n  bucket 58: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 58: 40%\n  bucket 59: 60%\n  bucket 58: 50%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 58: 60%\n  bucket 59: 90%\n  bucket 59: 100%\n  bucket 58: 70%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:13:55", "plugin": "core", "name": "end_epoch", "raw_value": "1684912435.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:13:55", "plugin": "core", "name": "start_epoch", "raw_value": "1684912435.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 4, "time_seconds": 42.175076723098755, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "88fed34cab97b4c2"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "5380250e953df348"}, "library|input_2": {"src": "hda", "id": "066c246101d4acc2"}, "library|paired_options|no_mixed": true, "library|paired_options|no_discordant": true, "library|paired_options|paired_options_selector": "advanced", "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "90e30828201f909e", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:14:42.107597", "create_time": "2023-05-24T07:14:24.948370", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-52bvk", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/d/d/7/dataset_dd731a69-df7a-41d6-926e-02ea1fe0bfba.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/7/1/6/dataset_716e883f-11bd-4844-96f2-9bbcf9f5c67a.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/7/f/1/dataset_7f1c4173-fb02-4022-ad9b-4ddade58df8f.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'  --fr --no-mixed --no-discordant        --trim5 '15' --trim3 '15' --phred33                          | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/e/d/e/dataset_ede43630-25e5-4d0d-b550-07859245ce4a.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 585, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 586, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"fr_rf_ff\": \"--fr\", \"no_discordant\": true, \"no_mixed\": true, \"paired_options_selector\": \"advanced\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 587, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "88fed34cab97b4c2", "src": "hda", "uuid": "dd731a69-df7a-41d6-926e-02ea1fe0bfba"}, "input_1": {"id": "5380250e953df348", "src": "hda", "uuid": "716e883f-11bd-4844-96f2-9bbcf9f5c67a"}, "input_2": {"id": "066c246101d4acc2", "src": "hda", "uuid": "7f1c4173-fb02-4022-ad9b-4ddade58df8f"}}, "outputs": {"output_alignments": {"id": "7d2c7226780d7797", "src": "hda", "uuid": "ede43630-25e5-4d0d-b550-07859245ce4a"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 4 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\nGetting block 6 of 60\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 6\nGetting block 3 of 60\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 2: 10%\n  Calculating Z arrays for bucket 6\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 20%\n  bucket 1: 10%\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 2: 30%\n  bucket 4: 20%\n  Calculating Z arrays for bucket 8\n  bucket 2: 40%\n  bucket 7: 10%\n  bucket 1: 30%\n  bucket 2: 50%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 40%\n  bucket 7: 20%\n  bucket 2: 60%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 6: 10%\n  bucket 2: 70%\n  bucket 1: 60%\n  bucket 7: 30%\n  bucket 2: 80%\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 3: 10%\n  bucket 1: 70%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 90%\n  bucket 6: 20%\n  bucket 7: 50%\n  bucket 1: 80%\n  bucket 4: 50%\n  bucket 7: 60%\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 8: 10%\n  bucket 1: 100%\n  bucket 6: 30%\n  bucket 4: 70%\n  bucket 8: 20%\n  bucket 7: 70%\n  bucket 5: 10%\n  bucket 6: 40%\n  bucket 7: 80%\n  bucket 3: 20%\n  bucket 5: 20%\n  bucket 6: 50%\n  Sorting block of length 42 for bucket 1\n  bucket 7: 90%\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 5: 30%\n  Sorting block of length 84 for bucket 2\n  bucket 4: 80%\n  bucket 3: 30%\n  bucket 8: 30%\n  bucket 5: 40%\n  bucket 8: 40%\n  bucket 4: 90%\n  bucket 7: 100%\n  bucket 3: 40%\n  bucket 6: 60%\n  bucket 8: 50%\n  bucket 4: 100%\n  bucket 5: 50%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 3: 50%\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 6: 70%\n  Sorting block of length 68 for bucket 4\n  Sorting block time: 00:00:00\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 5: 60%\n  bucket 6: 80%\nReturning block of 43 for bucket 1\n  bucket 6: 90%\n  bucket 5: 70%\n  bucket 3: 70%\n  bucket 8: 70%\n  bucket 5: 80%\n  bucket 3: 80%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  bucket 3: 90%\n  bucket 8: 80%\n  bucket 5: 90%\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 8: 90%\n  Sorting block time: 00:00:00\n  bucket 5: 100%\n  Sorting block time: 00:00:00\n  bucket 8: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\nReturning block of 85 for bucket 2\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\nReturning block of 76 for bucket 7\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\nGetting block 11 of 60\n  bucket 10: 90%\n  bucket 10: 100%\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\nGetting block 13 of 60\nGetting block 14 of 60\n  Calculating Z arrays for bucket 12\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Reserving size (126) for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 14:\n  Calculating Z arrays for bucket 13\n  bucket 14: 10%\n  Entering block accumulator loop for bucket 13:\n  bucket 14: 20%\n  bucket 13: 10%\n  bucket 14: 30%\n  bucket 13: 20%\n  bucket 12: 10%\n  bucket 13: 30%\n  bucket 12: 20%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 12: 30%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 12: 40%\n  bucket 14: 60%\n  bucket 12: 50%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 12: 60%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 12: 70%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 12: 80%\n  bucket 14: 100%\n  bucket 12: 90%\n  Sorting block of length 82 for bucket 14\n  bucket 12: 100%\n  (Using difference cover)\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\nGetting block 16 of 60\n  Calculating Z arrays for bucket 15\n  Reserving size (126) for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 17:\n  bucket 15: 10%\n  Entering block accumulator loop for bucket 16:\n  bucket 17: 10%\n  bucket 15: 20%\n  bucket 17: 20%\n  bucket 16: 10%\n  bucket 15: 30%\n  bucket 17: 30%\n  bucket 16: 20%\n  bucket 15: 40%\n  bucket 17: 40%\n  bucket 16: 30%\n  bucket 17: 50%\n  bucket 15: 50%\n  bucket 17: 60%\n  bucket 16: 40%\n  bucket 15: 60%\n  bucket 17: 70%\n  bucket 16: 50%\n  bucket 17: 80%\n  bucket 15: 70%\n  bucket 17: 90%\n  bucket 16: 60%\n  bucket 15: 80%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\nGetting block 19 of 60\n  Calculating Z arrays for bucket 18\n  Reserving size (126) for bucket 19\nGetting block 20 of 60\n  Calculating Z arrays for bucket 19\n  Reserving size (126) for bucket 20\n  Entering block accumulator loop for bucket 18:\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 10%\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 20:\n  bucket 18: 20%\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 18: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 18: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 18: 50%\n  bucket 19: 60%\n  bucket 20: 60%\n  bucket 18: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 18: 70%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 18: 80%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  bucket 19: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 21:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 21: 10%\n  bucket 22: 40%\n  bucket 21: 20%\n  bucket 22: 50%\n  bucket 21: 30%\n  bucket 22: 60%\n  bucket 21: 40%\n  bucket 22: 70%\n  bucket 21: 50%\n  bucket 22: 80%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 22: 90%\n  bucket 21: 80%\n  bucket 22: 100%\n  bucket 21: 90%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 23 of 60\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 24\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 24: 100%\n  bucket 25: 100%\n  Sorting block of length 68 for bucket 24\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 60\n  bucket 26: 20%\nGetting block 28 of 60\n  bucket 26: 30%\n  bucket 26: 40%\n  Reserving size (126) for bucket 27\n  bucket 26: 50%\n  Calculating Z arrays for bucket 27\n  bucket 26: 60%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 27: 10%\n  Reserving size (126) for bucket 28\n  bucket 26: 90%\n  bucket 27: 20%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  bucket 27: 30%\n  Calculating Z arrays for bucket 28\n  (Using difference cover)\n  bucket 27: 40%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 50%\n  bucket 28: 10%\n  bucket 27: 60%\n  bucket 28: 20%\n  bucket 27: 70%\n  bucket 28: 30%\n  bucket 27: 80%\n  bucket 28: 40%\n  bucket 27: 90%\n  bucket 28: 50%\n  bucket 27: 100%\n  bucket 28: 60%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 28: 70%\nReturning block of 108 for bucket 26\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\nGetting block 30 of 60\n  bucket 29: 50%\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 60%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 70%\n  bucket 30: 10%\n  bucket 29: 80%\n  bucket 30: 20%\n  bucket 29: 90%\n  bucket 30: 30%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 32:\n  Entering block accumulator loop for bucket 31:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 31: 10%\n  bucket 32: 30%\n  bucket 31: 20%\n  bucket 32: 40%\n  bucket 31: 30%\n  bucket 32: 50%\n  bucket 31: 40%\n  bucket 32: 60%\n  bucket 31: 50%\n  bucket 32: 70%\n  bucket 31: 60%\n  bucket 32: 80%\n  bucket 31: 70%\n  bucket 32: 90%\n  bucket 31: 80%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\nGetting block 34 of 60\n  bucket 33: 60%\n  Reserving size (126) for bucket 34\n  bucket 33: 70%\n  Calculating Z arrays for bucket 34\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Entering block accumulator loop for bucket 34:\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\nGetting block 36 of 60\n  bucket 35: 40%\n  Reserving size (126) for bucket 36\n  bucket 35: 50%\n  Calculating Z arrays for bucket 36\n  bucket 35: 60%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 70%\n  bucket 36: 10%\n  bucket 35: 80%\n  bucket 36: 20%\n  bucket 35: 90%\n  bucket 36: 30%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\nGetting block 38 of 60\n  Reserving size (126) for bucket 37\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 37\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 10%\n  bucket 38: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 38: 20%\nGetting block 39 of 60\n  bucket 38: 30%\n  bucket 37: 40%\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  bucket 38: 40%\n  bucket 37: 50%\n  Entering block accumulator loop for bucket 39:\n  bucket 37: 60%\n  bucket 38: 50%\n  bucket 39: 10%\n  bucket 38: 60%\n  bucket 37: 70%\n  bucket 39: 20%\n  bucket 38: 70%\n  bucket 37: 80%\n  bucket 39: 30%\n  bucket 38: 80%\n  bucket 37: 90%\n  bucket 39: 40%\n  bucket 38: 90%\n  bucket 37: 100%\n  bucket 39: 50%\n  Sorting block of length 59 for bucket 37\n  bucket 38: 100%\n  (Using difference cover)\n  bucket 39: 60%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\nGetting block 41 of 60\n  bucket 40: 50%\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 60%\n  bucket 40: 70%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 80%\n  bucket 41: 10%\n  bucket 40: 90%\n  bucket 41: 20%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  Sorting block time: 00:00:00\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 10%\n  bucket 43: 20%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 30%\n  bucket 44: 10%\n  bucket 43: 40%\n  bucket 44: 20%\n  bucket 43: 50%\n  bucket 44: 30%\n  bucket 43: 60%\n  bucket 44: 40%\n  bucket 43: 70%\n  bucket 44: 50%\n  bucket 43: 80%\n  bucket 44: 60%\n  bucket 43: 90%\n  bucket 44: 70%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\nGetting block 46 of 60\n  Calculating Z arrays for bucket 45\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 45:\n  bucket 46: 10%\n  bucket 45: 10%\n  bucket 46: 20%\n  bucket 45: 20%\n  bucket 46: 30%\n  bucket 45: 30%\n  bucket 46: 40%\n  bucket 45: 40%\n  bucket 46: 50%\n  bucket 45: 50%\n  bucket 46: 60%\n  bucket 45: 60%\n  bucket 46: 70%\n  bucket 45: 70%\n  bucket 46: 80%\n  bucket 45: 80%\n  bucket 46: 90%\n  bucket 45: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 90%\n  bucket 48: 100%\n  bucket 49: 10%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\nGetting block 51 of 60\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 52\n  Calculating Z arrays for bucket 50\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 51:\n  bucket 52: 10%\n  bucket 50: 10%\n  bucket 52: 20%\n  bucket 50: 20%\n  bucket 51: 10%\n  bucket 52: 30%\n  bucket 50: 30%\n  bucket 51: 20%\n  bucket 52: 40%\n  bucket 50: 40%\n  bucket 51: 30%\n  bucket 52: 50%\n  bucket 50: 50%\n  bucket 51: 40%\n  bucket 52: 60%\n  bucket 50: 60%\n  bucket 51: 50%\n  bucket 52: 70%\n  bucket 50: 70%\n  bucket 51: 60%\n  bucket 52: 80%\n  bucket 50: 80%\n  bucket 51: 70%\n  bucket 52: 90%\n  bucket 50: 90%\n  bucket 51: 80%\n  bucket 52: 100%\n  bucket 50: 100%\n  Sorting block of length 106 for bucket 52\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\nGetting block 54 of 60\n  Calculating Z arrays for bucket 53\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 53: 40%\n  bucket 54: 40%\nGetting block 55 of 60\n  bucket 53: 50%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 54: 60%\n  bucket 53: 70%\n  bucket 54: 70%\n  bucket 53: 80%\n  bucket 54: 80%\n  Reserving size (126) for bucket 55\n  bucket 53: 90%\n  bucket 54: 90%\n  Calculating Z arrays for bucket 55\n  bucket 53: 100%\n  bucket 54: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block of length 64 for bucket 54\n  Entering block accumulator loop for bucket 55:\n  (Using difference cover)\n  bucket 55: 10%\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  bucket 55: 20%\n  bucket 55: 30%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  Calculating Z arrays for bucket 56\n  bucket 57: 20%\n  bucket 57: 30%\n  Entering block accumulator loop for bucket 56:\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 56: 10%\n  bucket 57: 60%\n  bucket 56: 20%\n  bucket 57: 70%\n  bucket 56: 30%\n  bucket 57: 80%\n  bucket 56: 40%\n  bucket 57: 90%\n  bucket 56: 50%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  bucket 56: 60%\n  (Using difference cover)\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\nGetting block 2 of 60\n  Reserving size (126) for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 4 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 4\nGetting block 6 of 60\n  Reserving size (126) for bucket 5\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 6\nGetting block 3 of 60\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  bucket 2: 10%\n  Calculating Z arrays for bucket 6\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 7:\n  Entering block accumulator loop for bucket 1:\n  Entering block accumulator loop for bucket 6:\n  bucket 2: 20%\n  bucket 1: 10%\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  bucket 4: 10%\n  bucket 1: 20%\n  bucket 2: 30%\n  bucket 4: 20%\n  Calculating Z arrays for bucket 8\n  bucket 2: 40%\n  bucket 7: 10%\n  bucket 1: 30%\n  bucket 2: 50%\n  Entering block accumulator loop for bucket 3:\n  bucket 1: 40%\n  bucket 7: 20%\n  bucket 2: 60%\n  bucket 1: 50%\n  bucket 4: 30%\n  bucket 6: 10%\n  bucket 2: 70%\n  bucket 1: 60%\n  bucket 7: 30%\n  bucket 2: 80%\n  bucket 4: 40%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 40%\n  bucket 3: 10%\n  bucket 1: 70%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 90%\n  bucket 6: 20%\n  bucket 7: 50%\n  bucket 1: 80%\n  bucket 4: 50%\n  bucket 7: 60%\n  bucket 1: 90%\n  bucket 4: 60%\n  bucket 8: 10%\n  bucket 1: 100%\n  bucket 6: 30%\n  bucket 4: 70%\n  bucket 8: 20%\n  bucket 7: 70%\n  bucket 5: 10%\n  bucket 6: 40%\n  bucket 7: 80%\n  bucket 3: 20%\n  bucket 5: 20%\n  bucket 6: 50%\n  Sorting block of length 42 for bucket 1\n  bucket 7: 90%\n  (Using difference cover)\n  bucket 2: 100%\n  bucket 5: 30%\n  Sorting block of length 84 for bucket 2\n  bucket 4: 80%\n  bucket 3: 30%\n  bucket 8: 30%\n  bucket 5: 40%\n  bucket 8: 40%\n  bucket 4: 90%\n  bucket 7: 100%\n  bucket 3: 40%\n  bucket 6: 60%\n  bucket 8: 50%\n  bucket 4: 100%\n  bucket 5: 50%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 3: 50%\n  (Using difference cover)\n  bucket 8: 60%\n  bucket 6: 70%\n  Sorting block of length 68 for bucket 4\n  Sorting block time: 00:00:00\n  (Using difference cover)\n  bucket 3: 60%\n  bucket 5: 60%\n  bucket 6: 80%\nReturning block of 43 for bucket 1\n  bucket 6: 90%\n  bucket 5: 70%\n  bucket 3: 70%\n  bucket 8: 70%\n  bucket 5: 80%\n  bucket 3: 80%\n  bucket 6: 100%\n  Sorting block of length 90 for bucket 6\n  bucket 3: 90%\n  bucket 8: 80%\n  bucket 5: 90%\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 8: 90%\n  Sorting block time: 00:00:00\n  bucket 5: 100%\n  Sorting block time: 00:00:00\n  bucket 8: 100%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\nReturning block of 85 for bucket 2\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\nReturning block of 76 for bucket 7\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\nGetting block 11 of 60\n  bucket 10: 90%\n  bucket 10: 100%\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\nGetting block 13 of 60\nGetting block 14 of 60\n  Calculating Z arrays for bucket 12\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Reserving size (126) for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 14:\n  Calculating Z arrays for bucket 13\n  bucket 14: 10%\n  Entering block accumulator loop for bucket 13:\n  bucket 14: 20%\n  bucket 13: 10%\n  bucket 14: 30%\n  bucket 13: 20%\n  bucket 12: 10%\n  bucket 13: 30%\n  bucket 12: 20%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 12: 30%\n  bucket 13: 50%\n  bucket 14: 50%\n  bucket 13: 60%\n  bucket 12: 40%\n  bucket 14: 60%\n  bucket 12: 50%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 14: 70%\n  bucket 12: 60%\n  bucket 13: 90%\n  bucket 14: 80%\n  bucket 12: 70%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 12: 80%\n  bucket 14: 100%\n  bucket 12: 90%\n  Sorting block of length 82 for bucket 14\n  bucket 12: 100%\n  (Using difference cover)\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\nGetting block 16 of 60\n  Calculating Z arrays for bucket 15\n  Reserving size (126) for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 17:\n  bucket 15: 10%\n  Entering block accumulator loop for bucket 16:\n  bucket 17: 10%\n  bucket 15: 20%\n  bucket 17: 20%\n  bucket 16: 10%\n  bucket 15: 30%\n  bucket 17: 30%\n  bucket 16: 20%\n  bucket 15: 40%\n  bucket 17: 40%\n  bucket 16: 30%\n  bucket 17: 50%\n  bucket 15: 50%\n  bucket 17: 60%\n  bucket 16: 40%\n  bucket 15: 60%\n  bucket 17: 70%\n  bucket 16: 50%\n  bucket 17: 80%\n  bucket 15: 70%\n  bucket 17: 90%\n  bucket 16: 60%\n  bucket 15: 80%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 15: 90%\n  bucket 16: 80%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\nGetting block 19 of 60\n  Calculating Z arrays for bucket 18\n  Reserving size (126) for bucket 19\nGetting block 20 of 60\n  Calculating Z arrays for bucket 19\n  Reserving size (126) for bucket 20\n  Entering block accumulator loop for bucket 18:\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 19:\n  bucket 18: 10%\n  bucket 19: 10%\n  Entering block accumulator loop for bucket 20:\n  bucket 18: 20%\n  bucket 19: 20%\n  bucket 20: 10%\n  bucket 19: 30%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 18: 30%\n  bucket 19: 40%\n  bucket 20: 40%\n  bucket 18: 40%\n  bucket 19: 50%\n  bucket 20: 50%\n  bucket 18: 50%\n  bucket 19: 60%\n  bucket 20: 60%\n  bucket 18: 60%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 18: 70%\n  bucket 20: 80%\n  bucket 19: 80%\n  bucket 18: 80%\n  bucket 20: 90%\n  bucket 19: 90%\n  bucket 20: 100%\n  bucket 19: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 21:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 21: 10%\n  bucket 22: 40%\n  bucket 21: 20%\n  bucket 22: 50%\n  bucket 21: 30%\n  bucket 22: 60%\n  bucket 21: 40%\n  bucket 22: 70%\n  bucket 21: 50%\n  bucket 22: 80%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 22: 90%\n  bucket 21: 80%\n  bucket 22: 100%\n  bucket 21: 90%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 23 of 60\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 24\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 24: 20%\n  bucket 25: 20%\n  bucket 24: 30%\n  bucket 25: 30%\n  bucket 24: 40%\n  bucket 25: 40%\n  bucket 24: 50%\n  bucket 25: 50%\n  bucket 24: 60%\n  bucket 25: 60%\n  bucket 24: 70%\n  bucket 25: 70%\n  bucket 24: 80%\n  bucket 25: 80%\n  bucket 24: 90%\n  bucket 25: 90%\n  bucket 24: 100%\n  bucket 25: 100%\n  Sorting block of length 68 for bucket 24\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\nGetting block 27 of 60\n  bucket 26: 20%\nGetting block 28 of 60\n  bucket 26: 30%\n  bucket 26: 40%\n  Reserving size (126) for bucket 27\n  bucket 26: 50%\n  Calculating Z arrays for bucket 27\n  bucket 26: 60%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 27: 10%\n  Reserving size (126) for bucket 28\n  bucket 26: 90%\n  bucket 27: 20%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  bucket 27: 30%\n  Calculating Z arrays for bucket 28\n  (Using difference cover)\n  bucket 27: 40%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 50%\n  bucket 28: 10%\n  bucket 27: 60%\n  bucket 28: 20%\n  bucket 27: 70%\n  bucket 28: 30%\n  bucket 27: 80%\n  bucket 28: 40%\n  bucket 27: 90%\n  bucket 28: 50%\n  bucket 27: 100%\n  bucket 28: 60%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 28: 70%\nReturning block of 108 for bucket 26\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\nGetting block 30 of 60\n  bucket 29: 50%\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  bucket 29: 60%\n  Entering block accumulator loop for bucket 30:\n  bucket 29: 70%\n  bucket 30: 10%\n  bucket 29: 80%\n  bucket 30: 20%\n  bucket 29: 90%\n  bucket 30: 30%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 32:\n  Entering block accumulator loop for bucket 31:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 31: 10%\n  bucket 32: 30%\n  bucket 31: 20%\n  bucket 32: 40%\n  bucket 31: 30%\n  bucket 32: 50%\n  bucket 31: 40%\n  bucket 32: 60%\n  bucket 31: 50%\n  bucket 32: 70%\n  bucket 31: 60%\n  bucket 32: 80%\n  bucket 31: 70%\n  bucket 32: 90%\n  bucket 31: 80%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\nGetting block 34 of 60\n  bucket 33: 60%\n  Reserving size (126) for bucket 34\n  bucket 33: 70%\n  Calculating Z arrays for bucket 34\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Entering block accumulator loop for bucket 34:\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\nGetting block 36 of 60\n  bucket 35: 40%\n  Reserving size (126) for bucket 36\n  bucket 35: 50%\n  Calculating Z arrays for bucket 36\n  bucket 35: 60%\n  Entering block accumulator loop for bucket 36:\n  bucket 35: 70%\n  bucket 36: 10%\n  bucket 35: 80%\n  bucket 36: 20%\n  bucket 35: 90%\n  bucket 36: 30%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\nGetting block 38 of 60\n  Reserving size (126) for bucket 37\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 37\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 37:\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 10%\n  bucket 38: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 38: 20%\nGetting block 39 of 60\n  bucket 38: 30%\n  bucket 37: 40%\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  bucket 38: 40%\n  bucket 37: 50%\n  Entering block accumulator loop for bucket 39:\n  bucket 37: 60%\n  bucket 38: 50%\n  bucket 39: 10%\n  bucket 38: 60%\n  bucket 37: 70%\n  bucket 39: 20%\n  bucket 38: 70%\n  bucket 37: 80%\n  bucket 39: 30%\n  bucket 38: 80%\n  bucket 37: 90%\n  bucket 39: 40%\n  bucket 38: 90%\n  bucket 37: 100%\n  bucket 39: 50%\n  Sorting block of length 59 for bucket 37\n  bucket 38: 100%\n  (Using difference cover)\n  bucket 39: 60%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\nGetting block 41 of 60\n  bucket 40: 50%\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 60%\n  bucket 40: 70%\n  Entering block accumulator loop for bucket 41:\n  bucket 40: 80%\n  bucket 41: 10%\n  bucket 40: 90%\n  bucket 41: 20%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 30%\n  bucket 41: 40%\n  bucket 41: 50%\n  bucket 41: 60%\n  bucket 41: 70%\n  bucket 41: 80%\n  Sorting block time: 00:00:00\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 42:\n  bucket 42: 10%\n  bucket 42: 20%\n  bucket 42: 30%\n  bucket 42: 40%\n  bucket 42: 50%\n  bucket 42: 60%\n  bucket 42: 70%\n  bucket 42: 80%\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 10%\n  bucket 43: 20%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 30%\n  bucket 44: 10%\n  bucket 43: 40%\n  bucket 44: 20%\n  bucket 43: 50%\n  bucket 44: 30%\n  bucket 43: 60%\n  bucket 44: 40%\n  bucket 43: 70%\n  bucket 44: 50%\n  bucket 43: 80%\n  bucket 44: 60%\n  bucket 43: 90%\n  bucket 44: 70%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\nGetting block 46 of 60\n  Calculating Z arrays for bucket 45\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 45:\n  bucket 46: 10%\n  bucket 45: 10%\n  bucket 46: 20%\n  bucket 45: 20%\n  bucket 46: 30%\n  bucket 45: 30%\n  bucket 46: 40%\n  bucket 45: 40%\n  bucket 46: 50%\n  bucket 45: 50%\n  bucket 46: 60%\n  bucket 45: 60%\n  bucket 46: 70%\n  bucket 45: 70%\n  bucket 46: 80%\n  bucket 45: 80%\n  bucket 46: 90%\n  bucket 45: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 90%\n  bucket 48: 100%\n  bucket 49: 10%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\nGetting block 51 of 60\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 52\n  Calculating Z arrays for bucket 50\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 50:\n  Entering block accumulator loop for bucket 51:\n  bucket 52: 10%\n  bucket 50: 10%\n  bucket 52: 20%\n  bucket 50: 20%\n  bucket 51: 10%\n  bucket 52: 30%\n  bucket 50: 30%\n  bucket 51: 20%\n  bucket 52: 40%\n  bucket 50: 40%\n  bucket 51: 30%\n  bucket 52: 50%\n  bucket 50: 50%\n  bucket 51: 40%\n  bucket 52: 60%\n  bucket 50: 60%\n  bucket 51: 50%\n  bucket 52: 70%\n  bucket 50: 70%\n  bucket 51: 60%\n  bucket 52: 80%\n  bucket 50: 80%\n  bucket 51: 70%\n  bucket 52: 90%\n  bucket 50: 90%\n  bucket 51: 80%\n  bucket 52: 100%\n  bucket 50: 100%\n  Sorting block of length 106 for bucket 52\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  (Using difference cover)\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\nGetting block 54 of 60\n  Calculating Z arrays for bucket 53\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\n  bucket 53: 20%\n  bucket 54: 20%\n  bucket 53: 30%\n  bucket 54: 30%\n  bucket 53: 40%\n  bucket 54: 40%\nGetting block 55 of 60\n  bucket 53: 50%\n  bucket 54: 50%\n  bucket 53: 60%\n  bucket 54: 60%\n  bucket 53: 70%\n  bucket 54: 70%\n  bucket 53: 80%\n  bucket 54: 80%\n  Reserving size (126) for bucket 55\n  bucket 53: 90%\n  bucket 54: 90%\n  Calculating Z arrays for bucket 55\n  bucket 53: 100%\n  bucket 54: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block of length 64 for bucket 54\n  Entering block accumulator loop for bucket 55:\n  (Using difference cover)\n  bucket 55: 10%\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\n  bucket 55: 20%\n  bucket 55: 30%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  Calculating Z arrays for bucket 56\n  bucket 57: 20%\n  bucket 57: 30%\n  Entering block accumulator loop for bucket 56:\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 56: 10%\n  bucket 57: 60%\n  bucket 56: 20%\n  bucket 57: 70%\n  bucket 56: 30%\n  bucket 57: 80%\n  bucket 56: 40%\n  bucket 57: 90%\n  bucket 56: 50%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  bucket 56: 60%\n  (Using difference cover)\n  bucket 56: 70%\n  bucket 56: 80%\n  bucket 56: 90%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:14:31", "plugin": "core", "name": "end_epoch", "raw_value": "1684912471.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:14:31", "plugin": "core", "name": "start_epoch", "raw_value": "1684912471.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 5, "time_seconds": 41.17805051803589, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "88fed34cab97b4c2"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "0ee30b448e6c04b5"}, "library|type": "single", "adv|output_options|unaligned_file": true, "adv|output_options|output_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "a11b00e86e3c13f4", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:14:47.450846", "create_time": "2023-05-24T07:14:30.770819", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-5jwmb", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/d/d/7/dataset_dd731a69-df7a-41d6-926e-02ea1fe0bfba.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/e/c/5/dataset_ec52d7ba-cdac-43f1-9771-efe0cd99c75e.dat' input_f.fasta &&    hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f    -U 'input_f.fasta'  --un '/galaxy/server/database/objects/4/0/5/dataset_4056857f-6858-46d7-b450-19dcc7149da3.dat'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/4/9/5/dataset_495d6562-a8e5-416d-aad4-6e6b6b8bde50.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 1, \"aligned_file\": false, \"output_options_selector\": \"advanced\", \"unaligned_file\": true}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 0, \"input_1\": {\"values\": [{\"id\": 588, \"src\": \"hda\"}]}, \"rna_strandness\": \"\", \"type\": \"single\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 587, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "88fed34cab97b4c2", "src": "hda", "uuid": "dd731a69-df7a-41d6-926e-02ea1fe0bfba"}, "input_1": {"id": "0ee30b448e6c04b5", "src": "hda", "uuid": "ec52d7ba-cdac-43f1-9771-efe0cd99c75e"}}, "outputs": {"output_unaligned_reads_l": {"id": "427fc87eb1cec48f", "src": "hda", "uuid": "4056857f-6858-46d7-b450-19dcc7149da3"}, "output_alignments": {"id": "827d6923ff401dc2", "src": "hda", "uuid": "495d6562-a8e5-416d-aad4-6e6b6b8bde50"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\nGetting block 4 of 60\nGetting block 3 of 60\n  Reserving size (126) for bucket 4\nGetting block 5 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 5\nGetting block 7 of 60\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 4\nGetting block 8 of 60\n  Calculating Z arrays for bucket 5\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 4:\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 2\n  bucket 4: 10%\n  Reserving size (126) for bucket 7\n  bucket 4: 20%\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Calculating Z arrays for bucket 7\n  bucket 3: 10%\n  bucket 4: 30%\n  Reserving size (126) for bucket 8\n  bucket 4: 40%\n  bucket 5: 20%\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 30%\n  bucket 2: 10%\n  bucket 5: 30%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 40%\n  bucket 3: 50%\n  Calculating Z arrays for bucket 8\n  bucket 2: 30%\n  bucket 4: 60%\n  bucket 1: 30%\n  bucket 3: 60%\n  bucket 2: 40%\n  bucket 5: 50%\n  bucket 4: 70%\n  bucket 6: 10%\n  bucket 1: 40%\n  bucket 7: 10%\n  bucket 1: 50%\n  bucket 6: 20%\n  bucket 5: 60%\n  bucket 3: 70%\n  bucket 2: 50%\n  bucket 3: 80%\n  bucket 5: 70%\n  bucket 4: 80%\n  bucket 7: 20%\n  bucket 1: 60%\n  bucket 6: 30%\n  bucket 4: 90%\n  bucket 2: 60%\n  bucket 3: 90%\n  bucket 5: 80%\n  bucket 2: 70%\n  bucket 4: 100%\n  Entering block accumulator loop for bucket 8:\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 5: 90%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 2: 80%\n  bucket 5: 100%\n  bucket 7: 40%\n  bucket 1: 70%\n  bucket 7: 50%\n  bucket 2: 90%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 6: 40%\n  bucket 1: 80%\n  bucket 7: 60%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 8: 10%\n  bucket 1: 90%\n  bucket 6: 50%\n  bucket 8: 20%\n  bucket 7: 70%\n  bucket 1: 100%\n  bucket 6: 60%\n  bucket 7: 80%\n  bucket 8: 30%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 8: 40%\n  bucket 7: 90%\n  bucket 8: 50%\n  bucket 6: 80%\n  bucket 7: 100%\n  bucket 8: 60%\n  bucket 6: 90%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 8: 70%\nReturning block of 69 for bucket 4\n  bucket 6: 100%\n  bucket 8: 80%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 60%\n  bucket 12: 10%\n  bucket 11: 70%\n  bucket 12: 20%\n  bucket 11: 80%\n  bucket 12: 30%\n  bucket 11: 90%\n  bucket 12: 40%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  bucket 15: 60%\n  Calculating Z arrays for bucket 16\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 100%\n  bucket 16: 10%\n  Sorting block of length 68 for bucket 15\n  bucket 16: 20%\n  (Using difference cover)\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\nGetting block 18 of 60\n  Calculating Z arrays for bucket 17\n  Reserving size (126) for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  bucket 18: 80%\n  Sorting block of length 39 for bucket 17\n  bucket 18: 90%\n  bucket 18: 100%\n  (Using difference cover)\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\nGetting block 20 of 60\n  Reserving size (126) for bucket 19\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Entering block accumulator loop for bucket 21:\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 21: 10%\n  bucket 22: 20%\n  bucket 21: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 21: 30%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 24: 10%\n  bucket 23: 30%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 21: 70%\n  bucket 22: 70%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 21: 80%\n  bucket 22: 80%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 21: 90%\n  bucket 24: 60%\n  bucket 22: 90%\n  bucket 21: 100%\n  bucket 23: 80%\n  Sorting block of length 54 for bucket 21\n  bucket 24: 70%\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 60\n  bucket 27: 10%\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 20%\n  bucket 27: 30%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 27: 50%\n  bucket 28: 20%\n  bucket 27: 60%\n  bucket 28: 30%\n  bucket 27: 70%\n  bucket 28: 40%\n  bucket 27: 80%\n  bucket 28: 50%\n  bucket 27: 90%\n  bucket 28: 60%\n  bucket 27: 100%\n  bucket 28: 70%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 32: 10%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 30: 10%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 32: 20%\n  bucket 31: 70%\n  bucket 32: 30%\n  bucket 31: 80%\n  bucket 32: 40%\n  bucket 31: 90%\n  bucket 31: 100%\n  bucket 30: 20%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 40%\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 33: 50%\n  bucket 34: 30%\n  bucket 33: 60%\n  bucket 34: 40%\n  bucket 33: 70%\n  bucket 34: 50%\n  bucket 33: 80%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 33: 90%\n  bucket 34: 80%\n  bucket 33: 100%\n  bucket 34: 90%\n  Sorting block of length 44 for bucket 33\n  bucket 34: 100%\n  (Using difference cover)\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Entering block accumulator loop for bucket 35:\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  bucket 35: 10%\n  Calculating Z arrays for bucket 37\n  bucket 35: 20%\n  Entering block accumulator loop for bucket 37:\n  bucket 35: 30%\n  bucket 37: 10%\n  bucket 35: 40%\n  Reserving size (126) for bucket 36\n  bucket 37: 20%\n  bucket 35: 50%\n  bucket 37: 30%\n  bucket 35: 60%\n  Calculating Z arrays for bucket 36\n  bucket 35: 70%\n  bucket 37: 40%\n  bucket 35: 80%\n  bucket 37: 50%\n  bucket 35: 90%\n  bucket 37: 60%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 37: 70%\n  Entering block accumulator loop for bucket 36:\n  bucket 37: 80%\n  bucket 36: 10%\n  bucket 37: 90%\n  bucket 36: 20%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\nGetting block 39 of 60\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  Reserving size (126) for bucket 39\n  bucket 38: 70%\n  Calculating Z arrays for bucket 39\n  bucket 38: 80%\n  bucket 38: 90%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 10%\n  bucket 40: 20%\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 40: 30%\n  bucket 41: 20%\n  bucket 40: 40%\n  bucket 41: 30%\n  bucket 40: 50%\n  bucket 41: 40%\n  bucket 40: 60%\n  bucket 41: 50%\n  bucket 40: 70%\n  bucket 41: 60%\n  bucket 40: 80%\n  bucket 41: 70%\n  bucket 40: 90%\n  bucket 41: 80%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\nGetting block 43 of 60\n  Entering block accumulator loop for bucket 42:\n  Reserving size (126) for bucket 43\n  bucket 42: 10%\n  Calculating Z arrays for bucket 43\n  bucket 42: 20%\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 30%\n  bucket 43: 10%\n  bucket 42: 40%\n  bucket 43: 20%\n  bucket 42: 50%\n  bucket 43: 30%\n  bucket 42: 60%\n  bucket 43: 40%\n  bucket 42: 70%\n  bucket 43: 50%\n  bucket 42: 80%\n  bucket 43: 60%\n  bucket 42: 90%\n  bucket 43: 70%\n  bucket 42: 100%\n  bucket 43: 80%\n  Sorting block of length 119 for bucket 42\n  bucket 43: 90%\n  (Using difference cover)\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\nGetting block 45 of 60\nGetting block 46 of 60\n  bucket 44: 40%\n  Reserving size (126) for bucket 46\n  bucket 44: 50%\n  Calculating Z arrays for bucket 46\n  bucket 44: 60%\n  Reserving size (126) for bucket 45\n  bucket 44: 70%\n  Entering block accumulator loop for bucket 46:\n  Calculating Z arrays for bucket 45\n  bucket 44: 80%\n  bucket 46: 10%\n  bucket 44: 90%\n  bucket 46: 20%\n  bucket 44: 100%\n  Entering block accumulator loop for bucket 45:\n  Sorting block of length 66 for bucket 44\n  bucket 46: 30%\n  (Using difference cover)\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 45: 10%\n  bucket 46: 70%\n  bucket 45: 20%\n  bucket 46: 80%\n  bucket 45: 30%\n  bucket 46: 90%\n  bucket 45: 40%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Entering block accumulator loop for bucket 48:\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  bucket 48: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 20%\n  bucket 49: 10%\n  bucket 48: 30%\n  bucket 49: 20%\n  bucket 48: 40%\n  bucket 49: 30%\n  bucket 48: 50%\n  bucket 49: 40%\n  bucket 48: 60%\n  bucket 49: 50%\n  bucket 48: 70%\n  bucket 49: 60%\n  bucket 48: 80%\n  bucket 49: 70%\n  bucket 48: 90%\n  bucket 48: 100%\n  bucket 49: 80%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 10%\n  Entering block accumulator loop for bucket 50:\n  bucket 51: 20%\n  bucket 52: 10%\n  bucket 51: 30%\n  bucket 50: 10%\n  bucket 52: 20%\n  bucket 51: 40%\n  bucket 50: 20%\n  bucket 52: 30%\n  bucket 51: 50%\n  bucket 50: 30%\n  bucket 52: 40%\n  bucket 51: 60%\n  bucket 50: 40%\n  bucket 52: 50%\n  bucket 51: 70%\n  bucket 50: 50%\n  bucket 52: 60%\n  bucket 51: 80%\n  bucket 50: 60%\n  bucket 51: 90%\n  bucket 52: 70%\n  bucket 50: 70%\n  bucket 51: 100%\n  bucket 52: 80%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 50: 80%\n  bucket 52: 90%\n  bucket 50: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\nGetting block 55 of 60\nGetting block 56 of 60\n  Reserving size (126) for bucket 55\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 55\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 56: 10%\n  bucket 55: 20%\n  bucket 56: 20%\n  bucket 55: 30%\n  bucket 56: 30%\n  Entering block accumulator loop for bucket 54:\n  bucket 56: 40%\n  bucket 54: 10%\n  bucket 56: 50%\n  bucket 55: 40%\n  bucket 54: 20%\n  bucket 56: 60%\n  bucket 54: 30%\n  bucket 55: 50%\n  bucket 56: 70%\n  bucket 55: 60%\n  bucket 56: 80%\n  bucket 55: 70%\n  bucket 56: 90%\n  bucket 55: 80%\n  bucket 56: 100%\n  bucket 55: 90%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 55: 100%\n  bucket 54: 40%\n  Sorting block time: 00:00:00\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\nReturning block of 56 for bucket 56\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 60 of 60\n  Entering block accumulator loop for bucket 58:\n  Reserving size (126) for bucket 60\nGetting block 59 of 60\n  Calculating Z arrays for bucket 60\n  bucket 58: 10%\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 60:\n  bucket 58: 20%\n  bucket 60: 10%\n  bucket 58: 30%\n  Entering block accumulator loop for bucket 59:\n  bucket 60: 20%\n  bucket 58: 40%\n  bucket 60: 30%\n  bucket 59: 10%\n  bucket 58: 50%\n  bucket 60: 40%\n  bucket 59: 20%\n  bucket 58: 60%\n  bucket 60: 50%\n  bucket 59: 30%\n  bucket 58: 70%\n  bucket 60: 60%\n  bucket 58: 80%\n  bucket 60: 70%\n  bucket 59: 40%\n  bucket 58: 90%\n  bucket 60: 80%\n  bucket 59: 50%\n  bucket 58: 100%\n  bucket 60: 90%\n  Sorting block of length 113 for bucket 58\n  bucket 59: 60%\n  (Using difference cover)\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  bucket 59: 70%\n  (Using difference cover)\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n3 reads; of these:\n  3 (100.00%) were unpaired; of these:\n    3 (100.00%) aligned 0 times\n    0 (0.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n3 reads; of these:\n  3 (100.00%) were unpaired; of these:\n    3 (100.00%) aligned 0 times\n    0 (0.00%) aligned exactly 1 time\n    0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\nGetting block 4 of 60\nGetting block 3 of 60\n  Reserving size (126) for bucket 4\nGetting block 5 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 5\nGetting block 7 of 60\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 4\nGetting block 8 of 60\n  Calculating Z arrays for bucket 5\n  Reserving size (126) for bucket 3\n  Entering block accumulator loop for bucket 4:\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 3\n  Entering block accumulator loop for bucket 5:\n  Calculating Z arrays for bucket 2\n  bucket 4: 10%\n  Reserving size (126) for bucket 7\n  bucket 4: 20%\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  Calculating Z arrays for bucket 7\n  bucket 3: 10%\n  bucket 4: 30%\n  Reserving size (126) for bucket 8\n  bucket 4: 40%\n  bucket 5: 20%\n  bucket 3: 20%\n  Entering block accumulator loop for bucket 2:\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 6:\n  bucket 3: 30%\n  bucket 2: 10%\n  bucket 5: 30%\n  bucket 3: 40%\n  bucket 4: 50%\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 40%\n  bucket 3: 50%\n  Calculating Z arrays for bucket 8\n  bucket 2: 30%\n  bucket 4: 60%\n  bucket 1: 30%\n  bucket 3: 60%\n  bucket 2: 40%\n  bucket 5: 50%\n  bucket 4: 70%\n  bucket 6: 10%\n  bucket 1: 40%\n  bucket 7: 10%\n  bucket 1: 50%\n  bucket 6: 20%\n  bucket 5: 60%\n  bucket 3: 70%\n  bucket 2: 50%\n  bucket 3: 80%\n  bucket 5: 70%\n  bucket 4: 80%\n  bucket 7: 20%\n  bucket 1: 60%\n  bucket 6: 30%\n  bucket 4: 90%\n  bucket 2: 60%\n  bucket 3: 90%\n  bucket 5: 80%\n  bucket 2: 70%\n  bucket 4: 100%\n  Entering block accumulator loop for bucket 8:\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 5: 90%\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  bucket 7: 30%\n  bucket 2: 80%\n  bucket 5: 100%\n  bucket 7: 40%\n  bucket 1: 70%\n  bucket 7: 50%\n  bucket 2: 90%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 6: 40%\n  bucket 1: 80%\n  bucket 7: 60%\n  bucket 2: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 8: 10%\n  bucket 1: 90%\n  bucket 6: 50%\n  bucket 8: 20%\n  bucket 7: 70%\n  bucket 1: 100%\n  bucket 6: 60%\n  bucket 7: 80%\n  bucket 8: 30%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  bucket 6: 70%\n  bucket 8: 40%\n  bucket 7: 90%\n  bucket 8: 50%\n  bucket 6: 80%\n  bucket 7: 100%\n  bucket 8: 60%\n  bucket 6: 90%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 8: 70%\nReturning block of 69 for bucket 4\n  bucket 6: 100%\n  bucket 8: 80%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  Entering block accumulator loop for bucket 12:\n  bucket 11: 60%\n  bucket 12: 10%\n  bucket 11: 70%\n  bucket 12: 20%\n  bucket 11: 80%\n  bucket 12: 30%\n  bucket 11: 90%\n  bucket 12: 40%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 13: 70%\n  bucket 13: 80%\n  bucket 13: 90%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Entering block accumulator loop for bucket 14:\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 15:\n  bucket 15: 10%\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\nGetting block 16 of 60\n  Reserving size (126) for bucket 16\n  bucket 15: 60%\n  Calculating Z arrays for bucket 16\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  Entering block accumulator loop for bucket 16:\n  bucket 15: 100%\n  bucket 16: 10%\n  Sorting block of length 68 for bucket 15\n  bucket 16: 20%\n  (Using difference cover)\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\nGetting block 18 of 60\n  Calculating Z arrays for bucket 17\n  Reserving size (126) for bucket 18\n  Entering block accumulator loop for bucket 17:\n  Calculating Z arrays for bucket 18\n  bucket 17: 10%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 18: 10%\n  bucket 17: 40%\n  bucket 18: 20%\n  bucket 17: 50%\n  bucket 18: 30%\n  bucket 17: 60%\n  bucket 18: 40%\n  bucket 17: 70%\n  bucket 18: 50%\n  bucket 17: 80%\n  bucket 18: 60%\n  bucket 17: 90%\n  bucket 18: 70%\n  bucket 17: 100%\n  bucket 18: 80%\n  Sorting block of length 39 for bucket 17\n  bucket 18: 90%\n  bucket 18: 100%\n  (Using difference cover)\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\nGetting block 20 of 60\n  Reserving size (126) for bucket 19\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 20: 70%\n  bucket 19: 80%\n  bucket 20: 80%\n  bucket 19: 90%\n  bucket 20: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\nGetting block 22 of 60\n  Entering block accumulator loop for bucket 21:\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 22: 10%\n  Entering block accumulator loop for bucket 23:\n  bucket 21: 10%\n  bucket 22: 20%\n  bucket 21: 20%\n  bucket 23: 10%\n  bucket 22: 30%\n  bucket 21: 30%\n  Entering block accumulator loop for bucket 24:\n  bucket 23: 20%\n  bucket 21: 40%\n  bucket 22: 40%\n  bucket 24: 10%\n  bucket 23: 30%\n  bucket 21: 50%\n  bucket 22: 50%\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 21: 60%\n  bucket 22: 60%\n  bucket 24: 30%\n  bucket 23: 50%\n  bucket 21: 70%\n  bucket 22: 70%\n  bucket 24: 40%\n  bucket 23: 60%\n  bucket 21: 80%\n  bucket 22: 80%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 21: 90%\n  bucket 24: 60%\n  bucket 22: 90%\n  bucket 21: 100%\n  bucket 23: 80%\n  Sorting block of length 54 for bucket 21\n  bucket 24: 70%\n  (Using difference cover)\n  bucket 23: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  bucket 24: 80%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 90%\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\n  bucket 25: 60%\n  bucket 25: 70%\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  Entering block accumulator loop for bucket 27:\nGetting block 28 of 60\n  bucket 27: 10%\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  bucket 27: 20%\n  bucket 27: 30%\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 40%\n  bucket 28: 10%\n  bucket 27: 50%\n  bucket 28: 20%\n  bucket 27: 60%\n  bucket 28: 30%\n  bucket 27: 70%\n  bucket 28: 40%\n  bucket 27: 80%\n  bucket 28: 50%\n  bucket 27: 90%\n  bucket 28: 60%\n  bucket 27: 100%\n  bucket 28: 70%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 31:\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 32: 10%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 30: 10%\n  bucket 31: 50%\n  bucket 31: 60%\n  bucket 32: 20%\n  bucket 31: 70%\n  bucket 32: 30%\n  bucket 31: 80%\n  bucket 32: 40%\n  bucket 31: 90%\n  bucket 31: 100%\n  bucket 30: 20%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\n  bucket 30: 80%\n  bucket 30: 90%\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 40%\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 33: 50%\n  bucket 34: 30%\n  bucket 33: 60%\n  bucket 34: 40%\n  bucket 33: 70%\n  bucket 34: 50%\n  bucket 33: 80%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 33: 90%\n  bucket 34: 80%\n  bucket 33: 100%\n  bucket 34: 90%\n  Sorting block of length 44 for bucket 33\n  bucket 34: 100%\n  (Using difference cover)\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\nGetting block 36 of 60\n  Entering block accumulator loop for bucket 35:\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  bucket 35: 10%\n  Calculating Z arrays for bucket 37\n  bucket 35: 20%\n  Entering block accumulator loop for bucket 37:\n  bucket 35: 30%\n  bucket 37: 10%\n  bucket 35: 40%\n  Reserving size (126) for bucket 36\n  bucket 37: 20%\n  bucket 35: 50%\n  bucket 37: 30%\n  bucket 35: 60%\n  Calculating Z arrays for bucket 36\n  bucket 35: 70%\n  bucket 37: 40%\n  bucket 35: 80%\n  bucket 37: 50%\n  bucket 35: 90%\n  bucket 37: 60%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  bucket 37: 70%\n  Entering block accumulator loop for bucket 36:\n  bucket 37: 80%\n  bucket 36: 10%\n  bucket 37: 90%\n  bucket 36: 20%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\nGetting block 39 of 60\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  Reserving size (126) for bucket 39\n  bucket 38: 70%\n  Calculating Z arrays for bucket 39\n  bucket 38: 80%\n  bucket 38: 90%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 10%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 39: 40%\n  bucket 39: 50%\n  bucket 39: 60%\n  bucket 39: 70%\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\n  bucket 40: 10%\n  bucket 40: 20%\n  Entering block accumulator loop for bucket 41:\n  bucket 41: 10%\n  bucket 40: 30%\n  bucket 41: 20%\n  bucket 40: 40%\n  bucket 41: 30%\n  bucket 40: 50%\n  bucket 41: 40%\n  bucket 40: 60%\n  bucket 41: 50%\n  bucket 40: 70%\n  bucket 41: 60%\n  bucket 40: 80%\n  bucket 41: 70%\n  bucket 40: 90%\n  bucket 41: 80%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 41: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\nGetting block 43 of 60\n  Entering block accumulator loop for bucket 42:\n  Reserving size (126) for bucket 43\n  bucket 42: 10%\n  Calculating Z arrays for bucket 43\n  bucket 42: 20%\n  Entering block accumulator loop for bucket 43:\n  bucket 42: 30%\n  bucket 43: 10%\n  bucket 42: 40%\n  bucket 43: 20%\n  bucket 42: 50%\n  bucket 43: 30%\n  bucket 42: 60%\n  bucket 43: 40%\n  bucket 42: 70%\n  bucket 43: 50%\n  bucket 42: 80%\n  bucket 43: 60%\n  bucket 42: 90%\n  bucket 43: 70%\n  bucket 42: 100%\n  bucket 43: 80%\n  Sorting block of length 119 for bucket 42\n  bucket 43: 90%\n  (Using difference cover)\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\nGetting block 45 of 60\nGetting block 46 of 60\n  bucket 44: 40%\n  Reserving size (126) for bucket 46\n  bucket 44: 50%\n  Calculating Z arrays for bucket 46\n  bucket 44: 60%\n  Reserving size (126) for bucket 45\n  bucket 44: 70%\n  Entering block accumulator loop for bucket 46:\n  Calculating Z arrays for bucket 45\n  bucket 44: 80%\n  bucket 46: 10%\n  bucket 44: 90%\n  bucket 46: 20%\n  bucket 44: 100%\n  Entering block accumulator loop for bucket 45:\n  Sorting block of length 66 for bucket 44\n  bucket 46: 30%\n  (Using difference cover)\n  bucket 46: 40%\n  bucket 46: 50%\n  bucket 46: 60%\n  bucket 45: 10%\n  bucket 46: 70%\n  bucket 45: 20%\n  bucket 46: 80%\n  bucket 45: 30%\n  bucket 46: 90%\n  bucket 45: 40%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 45: 50%\n  bucket 45: 60%\n  bucket 45: 70%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Entering block accumulator loop for bucket 48:\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  bucket 48: 10%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 20%\n  bucket 49: 10%\n  bucket 48: 30%\n  bucket 49: 20%\n  bucket 48: 40%\n  bucket 49: 30%\n  bucket 48: 50%\n  bucket 49: 40%\n  bucket 48: 60%\n  bucket 49: 50%\n  bucket 48: 70%\n  bucket 49: 60%\n  bucket 48: 80%\n  bucket 49: 70%\n  bucket 48: 90%\n  bucket 48: 100%\n  bucket 49: 80%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 52:\n  bucket 51: 10%\n  Entering block accumulator loop for bucket 50:\n  bucket 51: 20%\n  bucket 52: 10%\n  bucket 51: 30%\n  bucket 50: 10%\n  bucket 52: 20%\n  bucket 51: 40%\n  bucket 50: 20%\n  bucket 52: 30%\n  bucket 51: 50%\n  bucket 50: 30%\n  bucket 52: 40%\n  bucket 51: 60%\n  bucket 50: 40%\n  bucket 52: 50%\n  bucket 51: 70%\n  bucket 50: 50%\n  bucket 52: 60%\n  bucket 51: 80%\n  bucket 50: 60%\n  bucket 51: 90%\n  bucket 52: 70%\n  bucket 50: 70%\n  bucket 51: 100%\n  bucket 52: 80%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  bucket 50: 80%\n  bucket 52: 90%\n  bucket 50: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\nGetting block 55 of 60\nGetting block 56 of 60\n  Reserving size (126) for bucket 55\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 55\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 55:\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 56:\n  bucket 55: 10%\n  bucket 56: 10%\n  bucket 55: 20%\n  bucket 56: 20%\n  bucket 55: 30%\n  bucket 56: 30%\n  Entering block accumulator loop for bucket 54:\n  bucket 56: 40%\n  bucket 54: 10%\n  bucket 56: 50%\n  bucket 55: 40%\n  bucket 54: 20%\n  bucket 56: 60%\n  bucket 54: 30%\n  bucket 55: 50%\n  bucket 56: 70%\n  bucket 55: 60%\n  bucket 56: 80%\n  bucket 55: 70%\n  bucket 56: 90%\n  bucket 55: 80%\n  bucket 56: 100%\n  bucket 55: 90%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 55: 100%\n  bucket 54: 40%\n  Sorting block time: 00:00:00\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\nReturning block of 56 for bucket 56\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\nGetting block 60 of 60\n  Entering block accumulator loop for bucket 58:\n  Reserving size (126) for bucket 60\nGetting block 59 of 60\n  Calculating Z arrays for bucket 60\n  bucket 58: 10%\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 60:\n  bucket 58: 20%\n  bucket 60: 10%\n  bucket 58: 30%\n  Entering block accumulator loop for bucket 59:\n  bucket 60: 20%\n  bucket 58: 40%\n  bucket 60: 30%\n  bucket 59: 10%\n  bucket 58: 50%\n  bucket 60: 40%\n  bucket 59: 20%\n  bucket 58: 60%\n  bucket 60: 50%\n  bucket 59: 30%\n  bucket 58: 70%\n  bucket 60: 60%\n  bucket 58: 80%\n  bucket 60: 70%\n  bucket 59: 40%\n  bucket 58: 90%\n  bucket 60: 80%\n  bucket 59: 50%\n  bucket 58: 100%\n  bucket 60: 90%\n  Sorting block of length 113 for bucket 58\n  bucket 59: 60%\n  (Using difference cover)\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  bucket 59: 70%\n  (Using difference cover)\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:14:37", "plugin": "core", "name": "end_epoch", "raw_value": "1684912477.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:14:36", "plugin": "core", "name": "start_epoch", "raw_value": "1684912476.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 6, "time_seconds": 43.95134091377258, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "59db49b1bef65473"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "a0b5e42ea5502616"}, "library|input_2": {"src": "hda", "id": "a0b5e42ea5502616"}, "library|type": "paired", "adv|output_options|unaligned_file": true, "adv|output_options|aligned_file": true, "adv|output_options|output_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "9a7baead4b590afc", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:15:25.799118", "create_time": "2023-05-24T07:15:05.601621", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-z6dlr", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/f/f/3/dataset_ff38fa1b-2eb6-4ede-932c-3bd083fe757b.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/a/4/3/dataset_a438ca66-5123-4ca3-836e-947fa6d1c9ce.dat' input_f.fasta &&  ln -f -s '/galaxy/server/database/objects/a/4/3/dataset_a438ca66-5123-4ca3-836e-947fa6d1c9ce.dat' input_r.fasta &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'  -f   -1 'input_f.fasta' -2 'input_r.fasta' --un-conc '/galaxy/server/database/objects/0/7/b/dataset_07b972a1-4524-4272-abed-d5e38ce41ec3.dat'  --al-conc '/galaxy/server/database/objects/3/0/1/dataset_301162ba-8ebc-421b-b619-a37749fe88a4.dat'                                | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/5/4/4/dataset_544c9d8d-2273-4212-942a-b253e24f5c56.dat'   && mv '/galaxy/server/database/objects/0/7/b/dataset_07b972a1-4524-4272-abed-d5e38ce41ec3.1.dat' '/galaxy/server/database/objects/0/7/b/dataset_07b972a1-4524-4272-abed-d5e38ce41ec3.dat' && mv '/galaxy/server/database/objects/0/7/b/dataset_07b972a1-4524-4272-abed-d5e38ce41ec3.2.dat' '/galaxy/server/database/objects/4/5/a/dataset_45a700c0-1dea-47de-9221-76dd61a2c90f.dat' && mv '/galaxy/server/database/objects/3/0/1/dataset_301162ba-8ebc-421b-b619-a37749fe88a4.1.dat' '/galaxy/server/database/objects/3/0/1/dataset_301162ba-8ebc-421b-b619-a37749fe88a4.dat' && mv '/galaxy/server/database/objects/3/0/1/dataset_301162ba-8ebc-421b-b619-a37749fe88a4.2.dat' '/galaxy/server/database/objects/0/d/8/dataset_0d83efd9-8765-409a-b991-31358924b2af.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 1, \"aligned_file\": true, \"output_options_selector\": \"advanced\", \"unaligned_file\": true}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 593, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 593, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 594, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "59db49b1bef65473", "src": "hda", "uuid": "ff38fa1b-2eb6-4ede-932c-3bd083fe757b"}, "input_1": {"id": "a0b5e42ea5502616", "src": "hda", "uuid": "a438ca66-5123-4ca3-836e-947fa6d1c9ce"}, "input_2": {"id": "a0b5e42ea5502616", "src": "hda", "uuid": "a438ca66-5123-4ca3-836e-947fa6d1c9ce"}}, "outputs": {"output_aligned_reads_r": {"id": "5a34fabe33e63221", "src": "hda", "uuid": "0d83efd9-8765-409a-b991-31358924b2af"}, "output_unaligned_reads_r": {"id": "5b19d3edde411315", "src": "hda", "uuid": "45a700c0-1dea-47de-9221-76dd61a2c90f"}, "output_aligned_reads_l": {"id": "97ccb260785faafb", "src": "hda", "uuid": "301162ba-8ebc-421b-b619-a37749fe88a4"}, "output_unaligned_reads_l": {"id": "ba461cd30874e421", "src": "hda", "uuid": "07b972a1-4524-4272-abed-d5e38ce41ec3"}, "output_alignments": {"id": "76da3fc5819ee7cd", "src": "hda", "uuid": "544c9d8d-2273-4212-942a-b253e24f5c56"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\nGetting block 4 of 60\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Calculating Z arrays for bucket 5\n  bucket 2: 10%\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 5:\n  Reserving size (126) for bucket 6\n  bucket 2: 20%\nGetting block 7 of 60\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 4:\n  Reserving size (126) for bucket 7\n  bucket 4: 10%\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  bucket 2: 40%\n  bucket 4: 20%\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 7\n  Reserving size (126) for bucket 8\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 5: 30%\n  bucket 6: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 3: 10%\n  bucket 5: 40%\n  bucket 4: 50%\n  bucket 7: 10%\n  bucket 2: 60%\n  bucket 5: 50%\n  Calculating Z arrays for bucket 8\n  bucket 1: 30%\n  bucket 5: 60%\n  bucket 6: 30%\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 7: 20%\n  bucket 3: 20%\n  bucket 5: 70%\n  bucket 7: 30%\n  bucket 2: 80%\n  bucket 3: 30%\n  bucket 7: 40%\n  bucket 2: 90%\n  Entering block accumulator loop for bucket 8:\n  bucket 1: 40%\n  bucket 5: 80%\n  bucket 2: 100%\n  bucket 7: 50%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 6: 40%\n  bucket 3: 40%\n  bucket 7: 60%\n  bucket 4: 70%\n  bucket 7: 70%\n  bucket 1: 50%\n  bucket 3: 50%\n  bucket 4: 80%\n  bucket 8: 10%\n  bucket 6: 50%\n  bucket 3: 60%\n  bucket 1: 60%\n  bucket 4: 90%\n  bucket 8: 20%\n  bucket 5: 100%\n  bucket 1: 70%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 30%\n  bucket 6: 60%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 6: 70%\n  bucket 7: 90%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 4: 100%\n  bucket 1: 90%\n  bucket 7: 100%\n  bucket 6: 80%\n  bucket 3: 80%\n  bucket 6: 90%\n  Sorting block of length 75 for bucket 7\n  bucket 6: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 68 for bucket 4\n  bucket 8: 50%\n  bucket 1: 100%\n  bucket 8: 60%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\nReturning block of 85 for bucket 2\n  bucket 8: 70%\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 8: 80%\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  Sorting block time: 00:00:00\n  (Using difference cover)\n  bucket 8: 90%\nReturning block of 64 for bucket 5\n  bucket 8: 100%\n  (Using difference cover)\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\nGetting block 10 of 60\n  Reserving size (126) for bucket 9\n  Reserving size (126) for bucket 10\nGetting block 11 of 60\n  Calculating Z arrays for bucket 10\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 11: 30%\n  bucket 10: 20%\n  bucket 11: 40%\n  bucket 9: 20%\n  bucket 11: 50%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 11: 60%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 11: 70%\n  bucket 9: 50%\n  bucket 11: 80%\n  bucket 9: 60%\n  bucket 11: 90%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 12 of 60\nGetting block 13 of 60\n  Reserving size (126) for bucket 12\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 12\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\nGetting block 14 of 60\n  bucket 12: 10%\n  Reserving size (126) for bucket 14\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\nGetting block 16 of 60\n  bucket 12: 30%\n  Reserving size (126) for bucket 16\n  bucket 12: 40%\n  Calculating Z arrays for bucket 16\n  Reserving size (126) for bucket 15\n  bucket 12: 50%\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\n  bucket 12: 60%\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 12: 70%\n  bucket 15: 10%\n  bucket 14: 10%\n  bucket 16: 10%\n  bucket 12: 80%\n  bucket 15: 20%\n  bucket 12: 90%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 12: 100%\n  bucket 15: 30%\n  bucket 16: 20%\n  bucket 15: 40%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 30%\n  bucket 16: 30%\n  bucket 15: 50%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 16: 40%\n  bucket 15: 60%\n  bucket 13: 50%\n  bucket 15: 70%\n  bucket 14: 50%\n  bucket 16: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 15: 80%\n  bucket 13: 70%\n  bucket 16: 60%\n  bucket 13: 80%\n  bucket 15: 90%\n  bucket 14: 70%\n  bucket 16: 70%\n  bucket 15: 100%\n  bucket 14: 80%\n  Sorting block of length 68 for bucket 15\n  bucket 13: 90%\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 16: 80%\n  Sorting block time: 00:00:00\n  bucket 13: 100%\n  bucket 14: 100%\nReturning block of 83 for bucket 12\n  Sorting block of length 85 for bucket 13\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 16: 90%\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\nGetting block 18 of 60\n  bucket 17: 80%\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\nGetting block 23 of 60\n  bucket 22: 60%\n  bucket 22: 70%\n  Reserving size (126) for bucket 23\n  bucket 22: 80%\nGetting block 24 of 60\n  Calculating Z arrays for bucket 23\n  bucket 22: 90%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  bucket 22: 100%\n  Calculating Z arrays for bucket 25\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Entering block accumulator loop for bucket 23:\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 23: 30%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 25: 50%\n  Sorting block time: 00:00:00\n  bucket 23: 60%\nReturning block of 81 for bucket 22\n  bucket 25: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 25: 70%\n  bucket 24: 60%\n  bucket 25: 80%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 25: 90%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 23: 100%\n  bucket 24: 90%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Entering block accumulator loop for bucket 26:\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 27: 30%\n  bucket 26: 70%\n  bucket 27: 40%\n  bucket 26: 80%\n  bucket 27: 50%\n  bucket 26: 90%\n  bucket 27: 60%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 29: 80%\n  bucket 28: 100%\n  bucket 29: 90%\n  Sorting block of length 106 for bucket 28\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  Entering block accumulator loop for bucket 30:\n  bucket 31: 30%\n  bucket 30: 10%\n  bucket 31: 40%\n  bucket 30: 20%\n  bucket 31: 50%\n  bucket 30: 30%\n  bucket 31: 60%\n  bucket 30: 40%\n  bucket 31: 70%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 31: 80%\n  bucket 30: 70%\n  bucket 31: 90%\n  bucket 30: 80%\n  bucket 31: 100%\n  bucket 30: 90%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\nGetting block 33 of 60\n  bucket 32: 60%\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 70%\n  bucket 32: 80%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  Sorting block time: 00:00:00\n  bucket 33: 60%\nReturning block of 126 for bucket 32\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  bucket 37: 60%\n  Calculating Z arrays for bucket 38\n  bucket 37: 70%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Entering block accumulator loop for bucket 38:\n  Calculating Z arrays for bucket 39\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 30%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 40%\n  bucket 39: 10%\n  bucket 38: 50%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 38: 60%\n  bucket 39: 40%\n  bucket 38: 70%\n  bucket 39: 50%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\nGetting block 42 of 60\n  Calculating Z arrays for bucket 41\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  bucket 42: 10%\n  bucket 41: 20%\n  bucket 42: 20%\n  bucket 41: 30%\n  bucket 42: 30%\n  bucket 41: 40%\n  bucket 42: 40%\n  bucket 41: 50%\n  bucket 42: 50%\n  bucket 41: 60%\n  bucket 42: 60%\n  bucket 41: 70%\n  bucket 42: 70%\n  bucket 41: 80%\n  bucket 42: 80%\n  bucket 41: 90%\n  bucket 42: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 46: 10%\n  bucket 45: 20%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 20%\n  bucket 45: 30%\n  bucket 46: 30%\n  bucket 45: 40%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 40%\n  bucket 45: 50%\n  bucket 47: 10%\n  bucket 46: 50%\n  bucket 45: 60%\n  bucket 46: 60%\n  bucket 47: 20%\n  bucket 46: 70%\n  bucket 45: 70%\n  bucket 47: 30%\n  bucket 45: 80%\n  bucket 46: 80%\n  bucket 45: 90%\n  bucket 46: 90%\n  bucket 45: 100%\n  bucket 47: 40%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 100%\n  bucket 47: 50%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\nGetting block 49 of 60\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 10%\n  bucket 50: 10%\n  bucket 49: 20%\nReturning block of 114 for bucket 48\n  bucket 49: 30%\n  bucket 50: 20%\n  bucket 49: 40%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 49: 50%\n  bucket 50: 70%\n  bucket 49: 60%\n  bucket 50: 80%\n  bucket 49: 70%\n  bucket 50: 90%\n  bucket 49: 80%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\nGetting block 52 of 60\n  Calculating Z arrays for bucket 51\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 51: 10%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 51: 20%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 40%\n  bucket 56: 50%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 57: 10%\n  bucket 56: 80%\n  bucket 57: 20%\n  bucket 56: 90%\n  bucket 57: 30%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\nGetting block 60 of 60\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    3 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        6 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n3 reads; of these:\n  3 (100.00%) were paired; of these:\n    3 (100.00%) aligned concordantly 0 times\n    0 (0.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    3 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    3 pairs aligned 0 times concordantly or discordantly; of these:\n      6 mates make up the pairs; of these:\n        6 (100.00%) aligned 0 times\n        0 (0.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n0.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 2\nGetting block 3 of 60\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 2\nGetting block 4 of 60\n  Entering block accumulator loop for bucket 2:\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 3\n  Calculating Z arrays for bucket 4\n  bucket 1: 10%\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Calculating Z arrays for bucket 5\n  bucket 2: 10%\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 5:\n  Reserving size (126) for bucket 6\n  bucket 2: 20%\nGetting block 7 of 60\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 4:\n  Reserving size (126) for bucket 7\n  bucket 4: 10%\n  Calculating Z arrays for bucket 6\n  bucket 5: 10%\n  bucket 2: 40%\n  bucket 4: 20%\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 6:\n  bucket 5: 20%\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 7\n  Reserving size (126) for bucket 8\n  bucket 6: 10%\n  bucket 4: 30%\n  bucket 5: 30%\n  bucket 6: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 2: 50%\n  bucket 4: 40%\n  bucket 3: 10%\n  bucket 5: 40%\n  bucket 4: 50%\n  bucket 7: 10%\n  bucket 2: 60%\n  bucket 5: 50%\n  Calculating Z arrays for bucket 8\n  bucket 1: 30%\n  bucket 5: 60%\n  bucket 6: 30%\n  bucket 4: 60%\n  bucket 2: 70%\n  bucket 7: 20%\n  bucket 3: 20%\n  bucket 5: 70%\n  bucket 7: 30%\n  bucket 2: 80%\n  bucket 3: 30%\n  bucket 7: 40%\n  bucket 2: 90%\n  Entering block accumulator loop for bucket 8:\n  bucket 1: 40%\n  bucket 5: 80%\n  bucket 2: 100%\n  bucket 7: 50%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  bucket 5: 90%\n  bucket 6: 40%\n  bucket 3: 40%\n  bucket 7: 60%\n  bucket 4: 70%\n  bucket 7: 70%\n  bucket 1: 50%\n  bucket 3: 50%\n  bucket 4: 80%\n  bucket 8: 10%\n  bucket 6: 50%\n  bucket 3: 60%\n  bucket 1: 60%\n  bucket 4: 90%\n  bucket 8: 20%\n  bucket 5: 100%\n  bucket 1: 70%\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  bucket 8: 30%\n  bucket 6: 60%\n  bucket 7: 80%\n  bucket 8: 40%\n  bucket 6: 70%\n  bucket 7: 90%\n  bucket 3: 70%\n  bucket 1: 80%\n  bucket 4: 100%\n  bucket 1: 90%\n  bucket 7: 100%\n  bucket 6: 80%\n  bucket 3: 80%\n  bucket 6: 90%\n  Sorting block of length 75 for bucket 7\n  bucket 6: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 68 for bucket 4\n  bucket 8: 50%\n  bucket 1: 100%\n  bucket 8: 60%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\nReturning block of 85 for bucket 2\n  bucket 8: 70%\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 8: 80%\n  bucket 3: 100%\n  Sorting block of length 106 for bucket 3\n  Sorting block time: 00:00:00\n  (Using difference cover)\n  bucket 8: 90%\nReturning block of 64 for bucket 5\n  bucket 8: 100%\n  (Using difference cover)\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\nGetting block 9 of 60\nGetting block 10 of 60\n  Reserving size (126) for bucket 9\n  Reserving size (126) for bucket 10\nGetting block 11 of 60\n  Calculating Z arrays for bucket 10\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 11:\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 11: 30%\n  bucket 10: 20%\n  bucket 11: 40%\n  bucket 9: 20%\n  bucket 11: 50%\n  bucket 9: 30%\n  bucket 10: 30%\n  bucket 11: 60%\n  bucket 9: 40%\n  bucket 10: 40%\n  bucket 11: 70%\n  bucket 9: 50%\n  bucket 11: 80%\n  bucket 9: 60%\n  bucket 11: 90%\n  bucket 10: 50%\n  bucket 9: 70%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  bucket 10: 60%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 10: 70%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 12 of 60\nGetting block 13 of 60\n  Reserving size (126) for bucket 12\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 12\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\nGetting block 14 of 60\n  bucket 12: 10%\n  Reserving size (126) for bucket 14\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 20%\n  Calculating Z arrays for bucket 14\nGetting block 15 of 60\nGetting block 16 of 60\n  bucket 12: 30%\n  Reserving size (126) for bucket 16\n  bucket 12: 40%\n  Calculating Z arrays for bucket 16\n  Reserving size (126) for bucket 15\n  bucket 12: 50%\n  Calculating Z arrays for bucket 15\n  Entering block accumulator loop for bucket 14:\n  bucket 12: 60%\n  bucket 13: 10%\n  Entering block accumulator loop for bucket 15:\n  Entering block accumulator loop for bucket 16:\n  bucket 12: 70%\n  bucket 15: 10%\n  bucket 14: 10%\n  bucket 16: 10%\n  bucket 12: 80%\n  bucket 15: 20%\n  bucket 12: 90%\n  bucket 14: 20%\n  bucket 13: 20%\n  bucket 14: 30%\n  bucket 12: 100%\n  bucket 15: 30%\n  bucket 16: 20%\n  bucket 15: 40%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  bucket 13: 30%\n  bucket 16: 30%\n  bucket 15: 50%\n  bucket 14: 40%\n  bucket 13: 40%\n  bucket 16: 40%\n  bucket 15: 60%\n  bucket 13: 50%\n  bucket 15: 70%\n  bucket 14: 50%\n  bucket 16: 50%\n  bucket 13: 60%\n  bucket 14: 60%\n  bucket 15: 80%\n  bucket 13: 70%\n  bucket 16: 60%\n  bucket 13: 80%\n  bucket 15: 90%\n  bucket 14: 70%\n  bucket 16: 70%\n  bucket 15: 100%\n  bucket 14: 80%\n  Sorting block of length 68 for bucket 15\n  bucket 13: 90%\n  (Using difference cover)\n  bucket 14: 90%\n  bucket 16: 80%\n  Sorting block time: 00:00:00\n  bucket 13: 100%\n  bucket 14: 100%\nReturning block of 83 for bucket 12\n  Sorting block of length 85 for bucket 13\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 16: 90%\n  (Using difference cover)\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\n  bucket 17: 60%\n  bucket 17: 70%\nGetting block 18 of 60\n  bucket 17: 80%\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 90%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\n  bucket 20: 10%\n  bucket 20: 20%\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 20: 50%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 20: 80%\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Calculating Z arrays for bucket 22\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\nGetting block 23 of 60\n  bucket 22: 60%\n  bucket 22: 70%\n  Reserving size (126) for bucket 23\n  bucket 22: 80%\nGetting block 24 of 60\n  Calculating Z arrays for bucket 23\n  bucket 22: 90%\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  bucket 22: 100%\n  Calculating Z arrays for bucket 25\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Entering block accumulator loop for bucket 23:\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  bucket 23: 10%\n  Entering block accumulator loop for bucket 24:\n  Entering block accumulator loop for bucket 25:\n  bucket 23: 20%\n  bucket 24: 10%\n  bucket 25: 10%\n  bucket 23: 30%\n  bucket 25: 20%\n  bucket 24: 20%\n  bucket 23: 40%\n  bucket 25: 30%\n  bucket 24: 30%\n  bucket 25: 40%\n  bucket 23: 50%\n  bucket 24: 40%\n  bucket 25: 50%\n  Sorting block time: 00:00:00\n  bucket 23: 60%\nReturning block of 81 for bucket 22\n  bucket 25: 60%\n  bucket 24: 50%\n  bucket 23: 70%\n  bucket 25: 70%\n  bucket 24: 60%\n  bucket 25: 80%\n  bucket 23: 80%\n  bucket 24: 70%\n  bucket 25: 90%\n  bucket 23: 90%\n  bucket 24: 80%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 23: 100%\n  bucket 24: 90%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Entering block accumulator loop for bucket 26:\n  Reserving size (126) for bucket 27\n  Calculating Z arrays for bucket 27\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 40%\n  bucket 27: 10%\n  bucket 26: 50%\n  bucket 27: 20%\n  bucket 26: 60%\n  bucket 27: 30%\n  bucket 26: 70%\n  bucket 27: 40%\n  bucket 26: 80%\n  bucket 27: 50%\n  bucket 26: 90%\n  bucket 27: 60%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 70%\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 10%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 20%\n  bucket 29: 10%\n  bucket 28: 30%\n  bucket 29: 20%\n  bucket 28: 40%\n  bucket 29: 30%\n  bucket 28: 50%\n  bucket 29: 40%\n  bucket 28: 60%\n  bucket 29: 50%\n  bucket 28: 70%\n  bucket 29: 60%\n  bucket 28: 80%\n  bucket 29: 70%\n  bucket 28: 90%\n  bucket 29: 80%\n  bucket 28: 100%\n  bucket 29: 90%\n  Sorting block of length 106 for bucket 28\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  Entering block accumulator loop for bucket 30:\n  bucket 31: 30%\n  bucket 30: 10%\n  bucket 31: 40%\n  bucket 30: 20%\n  bucket 31: 50%\n  bucket 30: 30%\n  bucket 31: 60%\n  bucket 30: 40%\n  bucket 31: 70%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 31: 80%\n  bucket 30: 70%\n  bucket 31: 90%\n  bucket 30: 80%\n  bucket 31: 100%\n  bucket 30: 90%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\nGetting block 33 of 60\n  bucket 32: 60%\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  bucket 32: 70%\n  bucket 32: 80%\n  Entering block accumulator loop for bucket 33:\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  Sorting block time: 00:00:00\n  bucket 33: 60%\nReturning block of 126 for bucket 32\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  bucket 37: 60%\n  Calculating Z arrays for bucket 38\n  bucket 37: 70%\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Entering block accumulator loop for bucket 38:\n  Calculating Z arrays for bucket 39\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 30%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 40%\n  bucket 39: 10%\n  bucket 38: 50%\n  bucket 39: 20%\n  bucket 39: 30%\n  bucket 38: 60%\n  bucket 39: 40%\n  bucket 38: 70%\n  bucket 39: 50%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\nGetting block 42 of 60\n  Calculating Z arrays for bucket 41\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  bucket 42: 10%\n  bucket 41: 20%\n  bucket 42: 20%\n  bucket 41: 30%\n  bucket 42: 30%\n  bucket 41: 40%\n  bucket 42: 40%\n  bucket 41: 50%\n  bucket 42: 50%\n  bucket 41: 60%\n  bucket 42: 60%\n  bucket 41: 70%\n  bucket 42: 70%\n  bucket 41: 80%\n  bucket 42: 80%\n  bucket 41: 90%\n  bucket 42: 90%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Entering block accumulator loop for bucket 44:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Entering block accumulator loop for bucket 45:\n  Entering block accumulator loop for bucket 46:\n  bucket 45: 10%\n  bucket 46: 10%\n  bucket 45: 20%\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  bucket 46: 20%\n  bucket 45: 30%\n  bucket 46: 30%\n  bucket 45: 40%\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 40%\n  bucket 45: 50%\n  bucket 47: 10%\n  bucket 46: 50%\n  bucket 45: 60%\n  bucket 46: 60%\n  bucket 47: 20%\n  bucket 46: 70%\n  bucket 45: 70%\n  bucket 47: 30%\n  bucket 45: 80%\n  bucket 46: 80%\n  bucket 45: 90%\n  bucket 46: 90%\n  bucket 45: 100%\n  bucket 47: 40%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 46: 100%\n  bucket 47: 50%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\n  bucket 48: 30%\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 48: 80%\n  bucket 48: 90%\n  bucket 48: 100%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\nGetting block 49 of 60\n  Sorting block time: 00:00:00\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 49:\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 10%\n  bucket 50: 10%\n  bucket 49: 20%\nReturning block of 114 for bucket 48\n  bucket 49: 30%\n  bucket 50: 20%\n  bucket 49: 40%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 49: 50%\n  bucket 50: 70%\n  bucket 49: 60%\n  bucket 50: 80%\n  bucket 49: 70%\n  bucket 50: 90%\n  bucket 49: 80%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\nGetting block 52 of 60\n  Calculating Z arrays for bucket 51\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 51:\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 51: 10%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 51: 20%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 53:\n  bucket 53: 10%\n  bucket 53: 20%\n  bucket 53: 30%\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\n  bucket 54: 40%\n  bucket 54: 50%\n  bucket 54: 60%\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 54: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  Entering block accumulator loop for bucket 55:\n  bucket 55: 10%\n  bucket 55: 20%\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 40%\n  bucket 56: 50%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 60%\n  bucket 56: 70%\n  bucket 57: 10%\n  bucket 56: 80%\n  bucket 57: 20%\n  bucket 56: 90%\n  bucket 57: 30%\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\nGetting block 60 of 60\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:15:14", "plugin": "core", "name": "end_epoch", "raw_value": "1684912514.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:15:13", "plugin": "core", "name": "start_epoch", "raw_value": "1684912513.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 7, "time_seconds": 42.32475161552429, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "59db49b1bef65473"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "eabe2cc6587f226a"}, "library|input_2": {"src": "hda", "id": "102e4cab8edc94ad"}, "library|paired_options|no_mixed": true, "library|paired_options|no_discordant": true, "library|paired_options|paired_options_selector": "advanced", "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "303ee84253b9b928", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:15:29.674412", "create_time": "2023-05-24T07:15:16.951632", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-5vz4v", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/f/f/3/dataset_ff38fa1b-2eb6-4ede-932c-3bd083fe757b.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/5/e/4/dataset_5e45412f-be04-471a-82af-304b972a8eb2.dat' input_f.fastq.gz &&  ln -f -s '/galaxy/server/database/objects/2/9/c/dataset_29c00e51-0ac7-402d-b92d-684d9932f5ec.dat' input_r.fastq.gz &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq.gz' -2 'input_r.fastq.gz'  --fr --no-mixed --no-discordant        --trim5 '15' --trim3 '15' --phred33                          | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/0/0/1/dataset_001cc035-52c9-4b9e-ab0d-645747d30ebf.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 595, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 596, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"fr_rf_ff\": \"--fr\", \"no_discordant\": true, \"no_mixed\": true, \"paired_options_selector\": \"advanced\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 594, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "59db49b1bef65473", "src": "hda", "uuid": "ff38fa1b-2eb6-4ede-932c-3bd083fe757b"}, "input_1": {"id": "eabe2cc6587f226a", "src": "hda", "uuid": "5e45412f-be04-471a-82af-304b972a8eb2"}, "input_2": {"id": "102e4cab8edc94ad", "src": "hda", "uuid": "29c00e51-0ac7-402d-b92d-684d9932f5ec"}}, "outputs": {"output_alignments": {"id": "a136bc7c2e70c316", "src": "hda", "uuid": "001cc035-52c9-4b9e-ab0d-645747d30ebf"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\nGetting block 3 of 60\nGetting block 4 of 60\n  Reserving size (126) for bucket 2\nGetting block 5 of 60\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 2\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 5\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 5\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 6\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 7\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 10%\n  Calculating Z arrays for bucket 3\n  bucket 1: 20%\n  Calculating Z arrays for bucket 6\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\nGetting block 8 of 60\n  bucket 7: 10%\n  bucket 5: 20%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 10%\n  bucket 1: 30%\n  bucket 2: 40%\n  bucket 7: 20%\n  bucket 4: 20%\n  bucket 6: 10%\n  bucket 2: 50%\n  bucket 7: 30%\n  bucket 5: 30%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 6: 20%\n  bucket 7: 40%\n  bucket 5: 40%\n  bucket 3: 10%\n  bucket 2: 70%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 4: 40%\n  bucket 3: 20%\n  Reserving size (126) for bucket 8\n  bucket 3: 30%\n  bucket 2: 80%\n  bucket 1: 40%\n  bucket 4: 50%\n  bucket 5: 60%\n  bucket 3: 40%\n  Calculating Z arrays for bucket 8\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 7: 50%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 1: 50%\n  bucket 2: 100%\n  bucket 7: 60%\n  bucket 6: 50%\n  bucket 5: 80%\n  Sorting block of length 84 for bucket 2\n  bucket 7: 70%\n  (Using difference cover)\n  bucket 3: 50%\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 80%\n  bucket 5: 90%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 6: 60%\n  bucket 5: 100%\n  bucket 7: 90%\n  bucket 1: 80%\n  Sorting block of length 63 for bucket 5\n  bucket 6: 70%\n  bucket 4: 70%\n  bucket 7: 100%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 6: 80%\n  bucket 4: 80%\n  bucket 8: 10%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 1: 100%\n  bucket 4: 90%\n  Sorting block of length 42 for bucket 1\n  bucket 3: 80%\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 8: 20%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 4: 100%\n  bucket 3: 100%\n  bucket 8: 30%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 106 for bucket 3\n  bucket 8: 40%\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 8: 50%\nReturning block of 85 for bucket 2\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 60\n  bucket 9: 40%\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 90%\n  Entering block accumulator loop for bucket 11:\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 10: 100%\n  bucket 11: 60%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Entering block accumulator loop for bucket 12:\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 60\n  Entering block accumulator loop for bucket 13:\n  Reserving size (126) for bucket 14\n  bucket 12: 10%\n  bucket 13: 10%\n  Calculating Z arrays for bucket 14\n  bucket 12: 20%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 14: 10%\n  bucket 12: 30%\n  bucket 13: 70%\n  bucket 14: 20%\n  bucket 12: 40%\n  bucket 13: 80%\n  bucket 14: 30%\n  bucket 12: 50%\n  bucket 13: 90%\n  bucket 14: 40%\n  bucket 12: 60%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 50%\n  bucket 12: 70%\n  bucket 14: 60%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 14: 70%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  Sorting block time: 00:00:00\n  (Using difference cover)\n  bucket 14: 80%\nReturning block of 86 for bucket 13\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\nGetting block 16 of 60\n  Reserving size (126) for bucket 15\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 15\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 10%\n  bucket 15: 10%\n  bucket 16: 20%\n  bucket 15: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 16: 50%\n  bucket 15: 50%\n  bucket 16: 60%\n  bucket 15: 60%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 16: 90%\n  bucket 15: 90%\n  bucket 16: 100%\n  bucket 15: 100%\n  Sorting block of length 100 for bucket 16\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 60\n  bucket 17: 20%\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 30%\n  bucket 17: 40%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 50%\n  bucket 18: 10%\n  bucket 17: 60%\n  bucket 18: 20%\n  bucket 17: 70%\n  bucket 18: 30%\n  bucket 17: 80%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\nGetting block 21 of 60\n  bucket 20: 10%\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 20%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 21: 10%\n  bucket 20: 50%\n  bucket 21: 20%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 21: 30%\n  bucket 20: 80%\n  bucket 21: 40%\n  bucket 20: 90%\n  bucket 21: 50%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\nGetting block 23 of 60\n  Calculating Z arrays for bucket 22\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 22: 40%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Entering block accumulator loop for bucket 25:\n  Calculating Z arrays for bucket 27\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 25: 100%\n  bucket 27: 90%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 31\n  Calculating Z arrays for bucket 30\nGetting block 32 of 60\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 10%\n  bucket 30: 10%\n  bucket 30: 20%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 20%\n  bucket 30: 30%\n  bucket 31: 30%\n  bucket 32: 10%\n  bucket 30: 40%\n  bucket 32: 20%\n  bucket 30: 50%\n  bucket 31: 40%\n  bucket 32: 30%\n  bucket 30: 60%\n  bucket 31: 50%\n  bucket 32: 40%\n  bucket 30: 70%\n  bucket 31: 60%\n  bucket 32: 50%\n  bucket 30: 80%\n  bucket 31: 70%\n  bucket 30: 90%\n  bucket 32: 60%\n  bucket 31: 80%\n  bucket 30: 100%\n  bucket 32: 70%\n  Sorting block of length 124 for bucket 30\n  bucket 32: 80%\n  (Using difference cover)\n  bucket 31: 90%\n  bucket 32: 90%\n  bucket 31: 100%\n  bucket 32: 100%\n  Sorting block of length 110 for bucket 31\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\nGetting block 35 of 60\n  Sorting block of length 122 for bucket 34\n  Reserving size (126) for bucket 35\n  (Using difference cover)\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\nGetting block 38 of 60\n  bucket 37: 30%\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  bucket 37: 40%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 50%\n  bucket 38: 10%\n  bucket 37: 60%\n  bucket 38: 20%\n  bucket 37: 70%\n  bucket 38: 30%\n  bucket 37: 80%\n  bucket 38: 40%\n  bucket 37: 90%\n  bucket 38: 50%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 39 of 60\nReturning block of 60 for bucket 37\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 39:\n  bucket 40: 10%\n  bucket 39: 10%\n  bucket 40: 20%\n  bucket 39: 20%\n  bucket 40: 30%\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  bucket 39: 30%\n  bucket 40: 40%\n  bucket 39: 40%\n  bucket 40: 50%\n  bucket 39: 50%\n  bucket 40: 60%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 40: 70%\n  bucket 39: 80%\n  bucket 40: 80%\n  bucket 39: 90%\n  bucket 40: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 43 of 60\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 41: 10%\n  bucket 42: 10%\n  Entering block accumulator loop for bucket 43:\n  bucket 41: 20%\n  bucket 42: 20%\n  bucket 41: 30%\n  bucket 43: 10%\n  bucket 42: 30%\n  bucket 43: 20%\n  bucket 41: 40%\n  bucket 43: 30%\n  bucket 42: 40%\n  bucket 43: 40%\n  bucket 41: 50%\n  bucket 43: 50%\n  bucket 42: 50%\n  bucket 41: 60%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 41: 70%\n  bucket 42: 60%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 41: 80%\n  bucket 42: 70%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 41: 90%\n  bucket 42: 80%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\nGetting block 45 of 60\n  Calculating Z arrays for bucket 44\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 44:\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 45: 10%\n  bucket 44: 40%\n  bucket 45: 20%\n  bucket 44: 50%\n  bucket 45: 30%\n  bucket 44: 60%\n  bucket 45: 40%\n  bucket 44: 70%\n  bucket 45: 50%\n  bucket 44: 80%\n  bucket 45: 60%\n  bucket 44: 90%\n  bucket 45: 70%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\nGetting block 47 of 60\n  Calculating Z arrays for bucket 46\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 10%\n  bucket 47: 10%\n  bucket 46: 20%\n  bucket 47: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 47: 30%\n  bucket 46: 50%\n  bucket 47: 40%\n  bucket 46: 60%\n  bucket 47: 50%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 47: 60%\n  bucket 46: 90%\n  bucket 47: 70%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Entering block accumulator loop for bucket 48:\n  Reserving size (126) for bucket 49\n  bucket 48: 10%\n  Calculating Z arrays for bucket 49\n  bucket 48: 20%\n  bucket 48: 30%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 49: 10%\n  bucket 48: 60%\n  bucket 49: 20%\n  bucket 48: 70%\n  bucket 49: 30%\n  bucket 48: 80%\n  bucket 49: 40%\n  bucket 48: 90%\n  bucket 49: 50%\n  bucket 48: 100%\n  bucket 49: 60%\n  Sorting block of length 113 for bucket 48\n  bucket 49: 70%\n  bucket 49: 80%\n  (Using difference cover)\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Entering block accumulator loop for bucket 50:\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 10%\n  bucket 50: 20%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 30%\n  bucket 51: 10%\n  bucket 50: 40%\n  bucket 51: 20%\n  bucket 50: 50%\n  bucket 51: 30%\n  bucket 50: 60%\n  bucket 51: 40%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 50: 80%\n  bucket 51: 60%\n  bucket 50: 90%\n  bucket 51: 70%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 53 of 60\n  Entering block accumulator loop for bucket 52:\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  bucket 52: 10%\n  bucket 52: 20%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 53: 10%\n  bucket 52: 50%\n  bucket 53: 20%\n  bucket 52: 60%\n  bucket 53: 30%\n  bucket 52: 70%\n  bucket 53: 40%\n  bucket 52: 80%\n  bucket 53: 50%\n  bucket 52: 90%\n  bucket 53: 60%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  bucket 54: 40%\n  Calculating Z arrays for bucket 55\n  bucket 54: 50%\n  bucket 54: 60%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 55: 10%\n  bucket 54: 90%\n  bucket 55: 20%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\nGetting block 57 of 60\n  bucket 56: 80%\n  Reserving size (126) for bucket 57\n  bucket 56: 90%\n  Calculating Z arrays for bucket 57\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  bucket 58: 10%\n  Calculating Z arrays for bucket 59\n  bucket 58: 20%\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 30%\n  bucket 59: 10%\n  bucket 58: 40%\n  bucket 59: 20%\n  bucket 58: 50%\n  bucket 59: 30%\n  bucket 58: 60%\n  bucket 59: 40%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  bucket 59: 50%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\nGetting block 3 of 60\nGetting block 4 of 60\n  Reserving size (126) for bucket 2\nGetting block 5 of 60\n  Reserving size (126) for bucket 3\n  Calculating Z arrays for bucket 2\n  Reserving size (126) for bucket 4\n  Calculating Z arrays for bucket 1\n  Reserving size (126) for bucket 5\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Calculating Z arrays for bucket 5\nGetting block 6 of 60\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 6\n  Entering block accumulator loop for bucket 2:\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 7\n  bucket 1: 10%\n  Entering block accumulator loop for bucket 5:\n  bucket 2: 10%\n  Calculating Z arrays for bucket 3\n  bucket 1: 20%\n  Calculating Z arrays for bucket 6\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 7:\n  bucket 5: 10%\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 3:\nGetting block 8 of 60\n  bucket 7: 10%\n  bucket 5: 20%\n  bucket 2: 30%\n  Entering block accumulator loop for bucket 6:\n  bucket 4: 10%\n  bucket 1: 30%\n  bucket 2: 40%\n  bucket 7: 20%\n  bucket 4: 20%\n  bucket 6: 10%\n  bucket 2: 50%\n  bucket 7: 30%\n  bucket 5: 30%\n  bucket 4: 30%\n  bucket 2: 60%\n  bucket 6: 20%\n  bucket 7: 40%\n  bucket 5: 40%\n  bucket 3: 10%\n  bucket 2: 70%\n  bucket 6: 30%\n  bucket 5: 50%\n  bucket 4: 40%\n  bucket 3: 20%\n  Reserving size (126) for bucket 8\n  bucket 3: 30%\n  bucket 2: 80%\n  bucket 1: 40%\n  bucket 4: 50%\n  bucket 5: 60%\n  bucket 3: 40%\n  Calculating Z arrays for bucket 8\n  bucket 2: 90%\n  bucket 4: 60%\n  bucket 7: 50%\n  bucket 6: 40%\n  bucket 5: 70%\n  bucket 1: 50%\n  bucket 2: 100%\n  bucket 7: 60%\n  bucket 6: 50%\n  bucket 5: 80%\n  Sorting block of length 84 for bucket 2\n  bucket 7: 70%\n  (Using difference cover)\n  bucket 3: 50%\n  bucket 1: 60%\n  Entering block accumulator loop for bucket 8:\n  bucket 7: 80%\n  bucket 5: 90%\n  bucket 1: 70%\n  bucket 3: 60%\n  bucket 6: 60%\n  bucket 5: 100%\n  bucket 7: 90%\n  bucket 1: 80%\n  Sorting block of length 63 for bucket 5\n  bucket 6: 70%\n  bucket 4: 70%\n  bucket 7: 100%\n  bucket 1: 90%\n  bucket 3: 70%\n  bucket 6: 80%\n  bucket 4: 80%\n  bucket 8: 10%\n  Sorting block of length 75 for bucket 7\n  (Using difference cover)\n  bucket 6: 90%\n  bucket 1: 100%\n  bucket 4: 90%\n  Sorting block of length 42 for bucket 1\n  bucket 3: 80%\n  (Using difference cover)\n  bucket 6: 100%\n  bucket 8: 20%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 3: 90%\n  bucket 4: 100%\n  bucket 3: 100%\n  bucket 8: 30%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 106 for bucket 3\n  bucket 8: 40%\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 8: 50%\nReturning block of 85 for bucket 2\n  bucket 8: 60%\n  bucket 8: 70%\n  bucket 8: 80%\n  bucket 8: 90%\n  bucket 8: 100%\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\nGetting block 10 of 60\n  bucket 9: 40%\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  Entering block accumulator loop for bucket 10:\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  bucket 10: 90%\n  Entering block accumulator loop for bucket 11:\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 10: 100%\n  bucket 11: 60%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Entering block accumulator loop for bucket 12:\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\nGetting block 14 of 60\n  Entering block accumulator loop for bucket 13:\n  Reserving size (126) for bucket 14\n  bucket 12: 10%\n  bucket 13: 10%\n  Calculating Z arrays for bucket 14\n  bucket 12: 20%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 50%\n  bucket 13: 60%\n  bucket 14: 10%\n  bucket 12: 30%\n  bucket 13: 70%\n  bucket 14: 20%\n  bucket 12: 40%\n  bucket 13: 80%\n  bucket 14: 30%\n  bucket 12: 50%\n  bucket 13: 90%\n  bucket 14: 40%\n  bucket 12: 60%\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 50%\n  bucket 12: 70%\n  bucket 14: 60%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 14: 70%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  Sorting block time: 00:00:00\n  (Using difference cover)\n  bucket 14: 80%\nReturning block of 86 for bucket 13\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\nGetting block 16 of 60\n  Reserving size (126) for bucket 15\n  Reserving size (126) for bucket 16\n  Calculating Z arrays for bucket 15\n  Calculating Z arrays for bucket 16\n  Entering block accumulator loop for bucket 16:\n  Entering block accumulator loop for bucket 15:\n  bucket 16: 10%\n  bucket 15: 10%\n  bucket 16: 20%\n  bucket 15: 20%\n  bucket 16: 30%\n  bucket 15: 30%\n  bucket 16: 40%\n  bucket 15: 40%\n  bucket 16: 50%\n  bucket 15: 50%\n  bucket 16: 60%\n  bucket 15: 60%\n  bucket 16: 70%\n  bucket 15: 70%\n  bucket 16: 80%\n  bucket 15: 80%\n  bucket 16: 90%\n  bucket 15: 90%\n  bucket 16: 100%\n  bucket 15: 100%\n  Sorting block of length 100 for bucket 16\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\nGetting block 18 of 60\n  bucket 17: 20%\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  bucket 17: 30%\n  bucket 17: 40%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 50%\n  bucket 18: 10%\n  bucket 17: 60%\n  bucket 18: 20%\n  bucket 17: 70%\n  bucket 18: 30%\n  bucket 17: 80%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 17: 90%\n  bucket 18: 60%\n  bucket 17: 100%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\n  Entering block accumulator loop for bucket 19:\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  bucket 19: 10%\n  bucket 19: 20%\n  bucket 19: 30%\n  bucket 19: 40%\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 19: 70%\n  bucket 19: 80%\n  bucket 19: 90%\n  bucket 19: 100%\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Entering block accumulator loop for bucket 20:\nGetting block 21 of 60\n  bucket 20: 10%\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 20%\n  Entering block accumulator loop for bucket 21:\n  bucket 20: 30%\n  bucket 20: 40%\n  bucket 21: 10%\n  bucket 20: 50%\n  bucket 21: 20%\n  bucket 20: 60%\n  bucket 20: 70%\n  bucket 21: 30%\n  bucket 20: 80%\n  bucket 21: 40%\n  bucket 20: 90%\n  bucket 21: 50%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  bucket 21: 60%\n  bucket 21: 70%\n  bucket 21: 80%\n  bucket 21: 90%\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\nGetting block 23 of 60\n  Calculating Z arrays for bucket 22\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 22:\n  Entering block accumulator loop for bucket 23:\n  bucket 22: 10%\n  bucket 23: 10%\n  bucket 22: 20%\n  bucket 23: 20%\n  bucket 22: 30%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 22: 40%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Calculating Z arrays for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\n  Entering block accumulator loop for bucket 25:\n  Calculating Z arrays for bucket 27\n  bucket 25: 10%\n  Entering block accumulator loop for bucket 26:\n  Entering block accumulator loop for bucket 27:\n  bucket 26: 10%\n  bucket 25: 20%\n  bucket 27: 10%\n  bucket 26: 20%\n  bucket 25: 30%\n  bucket 27: 20%\n  bucket 26: 30%\n  bucket 25: 40%\n  bucket 27: 30%\n  bucket 26: 40%\n  bucket 27: 40%\n  bucket 25: 50%\n  bucket 26: 50%\n  bucket 27: 50%\n  bucket 25: 60%\n  bucket 26: 60%\n  bucket 27: 60%\n  bucket 25: 70%\n  bucket 26: 70%\n  bucket 25: 80%\n  bucket 27: 70%\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 27: 80%\n  bucket 26: 90%\n  bucket 25: 100%\n  bucket 27: 90%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\n  bucket 28: 30%\n  bucket 28: 40%\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 28: 70%\n  bucket 28: 80%\n  bucket 28: 90%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  Entering block accumulator loop for bucket 29:\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\nGetting block 31 of 60\n  Reserving size (126) for bucket 31\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 31\n  Calculating Z arrays for bucket 30\nGetting block 32 of 60\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  bucket 31: 10%\n  bucket 30: 10%\n  bucket 30: 20%\n  Entering block accumulator loop for bucket 32:\n  bucket 31: 20%\n  bucket 30: 30%\n  bucket 31: 30%\n  bucket 32: 10%\n  bucket 30: 40%\n  bucket 32: 20%\n  bucket 30: 50%\n  bucket 31: 40%\n  bucket 32: 30%\n  bucket 30: 60%\n  bucket 31: 50%\n  bucket 32: 40%\n  bucket 30: 70%\n  bucket 31: 60%\n  bucket 32: 50%\n  bucket 30: 80%\n  bucket 31: 70%\n  bucket 30: 90%\n  bucket 32: 60%\n  bucket 31: 80%\n  bucket 30: 100%\n  bucket 32: 70%\n  Sorting block of length 124 for bucket 30\n  bucket 32: 80%\n  (Using difference cover)\n  bucket 31: 90%\n  bucket 32: 90%\n  bucket 31: 100%\n  bucket 32: 100%\n  Sorting block of length 110 for bucket 31\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 30\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 33: 80%\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\n  Calculating Z arrays for bucket 34\n  Entering block accumulator loop for bucket 34:\n  bucket 34: 10%\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 34: 40%\n  bucket 34: 50%\n  bucket 34: 60%\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\nGetting block 35 of 60\n  Sorting block of length 122 for bucket 34\n  Reserving size (126) for bucket 35\n  (Using difference cover)\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\nGetting block 38 of 60\n  bucket 37: 30%\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  bucket 37: 40%\n  Entering block accumulator loop for bucket 38:\n  bucket 37: 50%\n  bucket 38: 10%\n  bucket 37: 60%\n  bucket 38: 20%\n  bucket 37: 70%\n  bucket 38: 30%\n  bucket 37: 80%\n  bucket 38: 40%\n  bucket 37: 90%\n  bucket 38: 50%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  Sorting block time: 00:00:00\nGetting block 39 of 60\nReturning block of 60 for bucket 37\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 40:\n  Entering block accumulator loop for bucket 39:\n  bucket 40: 10%\n  bucket 39: 10%\n  bucket 40: 20%\n  bucket 39: 20%\n  bucket 40: 30%\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  bucket 39: 30%\n  bucket 40: 40%\n  bucket 39: 40%\n  bucket 40: 50%\n  bucket 39: 50%\n  bucket 40: 60%\n  bucket 39: 60%\n  bucket 39: 70%\n  bucket 40: 70%\n  bucket 39: 80%\n  bucket 40: 80%\n  bucket 39: 90%\n  bucket 40: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\nGetting block 42 of 60\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 43 of 60\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 41: 10%\n  bucket 42: 10%\n  Entering block accumulator loop for bucket 43:\n  bucket 41: 20%\n  bucket 42: 20%\n  bucket 41: 30%\n  bucket 43: 10%\n  bucket 42: 30%\n  bucket 43: 20%\n  bucket 41: 40%\n  bucket 43: 30%\n  bucket 42: 40%\n  bucket 43: 40%\n  bucket 41: 50%\n  bucket 43: 50%\n  bucket 42: 50%\n  bucket 41: 60%\n  bucket 43: 60%\n  bucket 43: 70%\n  bucket 41: 70%\n  bucket 42: 60%\n  bucket 43: 80%\n  bucket 43: 90%\n  bucket 41: 80%\n  bucket 42: 70%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 41: 90%\n  bucket 42: 80%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 44 of 60\n  Reserving size (126) for bucket 44\nGetting block 45 of 60\n  Calculating Z arrays for bucket 44\n  Reserving size (126) for bucket 45\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 44:\n  Entering block accumulator loop for bucket 45:\n  bucket 44: 10%\n  bucket 44: 20%\n  bucket 44: 30%\n  bucket 45: 10%\n  bucket 44: 40%\n  bucket 45: 20%\n  bucket 44: 50%\n  bucket 45: 30%\n  bucket 44: 60%\n  bucket 45: 40%\n  bucket 44: 70%\n  bucket 45: 50%\n  bucket 44: 80%\n  bucket 45: 60%\n  bucket 44: 90%\n  bucket 45: 70%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 45: 80%\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\nGetting block 47 of 60\n  Calculating Z arrays for bucket 46\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 47:\n  bucket 46: 10%\n  bucket 47: 10%\n  bucket 46: 20%\n  bucket 47: 20%\n  bucket 46: 30%\n  bucket 46: 40%\n  bucket 47: 30%\n  bucket 46: 50%\n  bucket 47: 40%\n  bucket 46: 60%\n  bucket 47: 50%\n  bucket 46: 70%\n  bucket 46: 80%\n  bucket 47: 60%\n  bucket 46: 90%\n  bucket 47: 70%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\nGetting block 49 of 60\n  Entering block accumulator loop for bucket 48:\n  Reserving size (126) for bucket 49\n  bucket 48: 10%\n  Calculating Z arrays for bucket 49\n  bucket 48: 20%\n  bucket 48: 30%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 40%\n  bucket 48: 50%\n  bucket 49: 10%\n  bucket 48: 60%\n  bucket 49: 20%\n  bucket 48: 70%\n  bucket 49: 30%\n  bucket 48: 80%\n  bucket 49: 40%\n  bucket 48: 90%\n  bucket 49: 50%\n  bucket 48: 100%\n  bucket 49: 60%\n  Sorting block of length 113 for bucket 48\n  bucket 49: 70%\n  bucket 49: 80%\n  (Using difference cover)\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\nGetting block 51 of 60\n  Entering block accumulator loop for bucket 50:\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  bucket 50: 10%\n  bucket 50: 20%\n  Entering block accumulator loop for bucket 51:\n  bucket 50: 30%\n  bucket 51: 10%\n  bucket 50: 40%\n  bucket 51: 20%\n  bucket 50: 50%\n  bucket 51: 30%\n  bucket 50: 60%\n  bucket 51: 40%\n  bucket 50: 70%\n  bucket 51: 50%\n  bucket 50: 80%\n  bucket 51: 60%\n  bucket 50: 90%\n  bucket 51: 70%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\nGetting block 53 of 60\n  Entering block accumulator loop for bucket 52:\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  bucket 52: 10%\n  bucket 52: 20%\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 53: 10%\n  bucket 52: 50%\n  bucket 53: 20%\n  bucket 52: 60%\n  bucket 53: 30%\n  bucket 52: 70%\n  bucket 53: 40%\n  bucket 52: 80%\n  bucket 53: 50%\n  bucket 52: 90%\n  bucket 53: 60%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 70%\n  bucket 53: 80%\n  bucket 53: 90%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 54:\n  bucket 54: 10%\n  bucket 54: 20%\n  bucket 54: 30%\nGetting block 55 of 60\n  Reserving size (126) for bucket 55\n  bucket 54: 40%\n  Calculating Z arrays for bucket 55\n  bucket 54: 50%\n  bucket 54: 60%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 70%\n  bucket 54: 80%\n  bucket 55: 10%\n  bucket 54: 90%\n  bucket 55: 20%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 30%\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\n  bucket 56: 70%\nGetting block 57 of 60\n  bucket 56: 80%\n  Reserving size (126) for bucket 57\n  bucket 56: 90%\n  Calculating Z arrays for bucket 57\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  bucket 57: 80%\n  bucket 57: 90%\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  bucket 58: 10%\n  Calculating Z arrays for bucket 59\n  bucket 58: 20%\n  Entering block accumulator loop for bucket 59:\n  bucket 58: 30%\n  bucket 59: 10%\n  bucket 58: 40%\n  bucket 59: 20%\n  bucket 58: 50%\n  bucket 59: 30%\n  bucket 58: 60%\n  bucket 59: 40%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  bucket 59: 50%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:15:19", "plugin": "core", "name": "end_epoch", "raw_value": "1684912519.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:15:18", "plugin": "core", "name": "start_epoch", "raw_value": "1684912518.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1-8", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 8, "time_seconds": 44.455251932144165, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "0ab098d2f88445a2"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "79d84a7e48ffed69"}, "library|input_2": {"src": "hda", "id": "990623ee6b4d3bea"}, "library|paired_options|no_mixed": true, "library|paired_options|no_discordant": true, "library|paired_options|paired_options_selector": "advanced", "library|type": "paired", "adv|input_options|trim5": "15", "adv|input_options|trim3": "15", "adv|input_options|input_options_selector": "advanced"}, "job": {"model_class": "Job", "id": "d8c8541cdbfe6b88", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:16:10.571227", "create_time": "2023-05-24T07:15:55.866169", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-t8l8k", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/d/b/d/dataset_dbd366f2-f750-42fd-aef8-f2cd58cd7b10.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/2/b/6/dataset_2b6eb7dd-39ac-4239-9c07-5c3a271305e3.dat' input_f.fastq.bz2 &&  ln -f -s '/galaxy/server/database/objects/7/7/b/dataset_77b6f2f0-1c55-4a4b-97a4-da4054d96531.dat' input_r.fastq.bz2 &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq.bz2' -2 'input_r.fastq.bz2'  --fr --no-mixed --no-discordant        --trim5 '15' --trim3 '15' --phred33                          | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/2/5/8/dataset_258b4daa-f921-4a97-865e-8beaf91817ac.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 1, \"input_options_selector\": \"advanced\", \"int_quals\": false, \"qupto\": \"0\", \"qv_encoding\": \"--phred33\", \"skip\": \"0\", \"solexa_quals\": false, \"trim3\": \"15\", \"trim5\": \"15\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 604, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 605, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 1, \"fr_rf_ff\": \"--fr\", \"no_discordant\": true, \"no_mixed\": true, \"paired_options_selector\": \"advanced\"}, \"rna_strandness\": \"\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 606, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "0ab098d2f88445a2", "src": "hda", "uuid": "dbd366f2-f750-42fd-aef8-f2cd58cd7b10"}, "input_1": {"id": "79d84a7e48ffed69", "src": "hda", "uuid": "2b6eb7dd-39ac-4239-9c07-5c3a271305e3"}, "input_2": {"id": "990623ee6b4d3bea", "src": "hda", "uuid": "77b6f2f0-1c55-4a4b-97a4-da4054d96531"}}, "outputs": {"output_alignments": {"id": "5ed51c281a8a6136", "src": "hda", "uuid": "258b4daa-f921-4a97-865e-8beaf91817ac"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\n  Entering block accumulator loop for bucket 2:\nGetting block 4 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 4\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 5\nGetting block 7 of 60\n  Calculating Z arrays for bucket 3\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 6\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 6:\n  Reserving size (126) for bucket 8\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 20%\n  bucket 2: 30%\n  bucket 7: 10%\n  bucket 3: 10%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 2: 40%\n  bucket 8: 10%\n  bucket 3: 20%\n  bucket 6: 40%\n  bucket 4: 10%\n  bucket 6: 50%\n  bucket 5: 10%\n  bucket 4: 20%\n  bucket 6: 60%\n  bucket 1: 10%\n  bucket 7: 30%\n  bucket 5: 20%\n  bucket 4: 30%\n  bucket 2: 50%\n  bucket 6: 70%\n  bucket 5: 30%\n  bucket 4: 40%\n  bucket 8: 20%\n  bucket 1: 20%\n  bucket 2: 60%\n  bucket 3: 30%\n  bucket 8: 30%\n  bucket 6: 80%\n  bucket 2: 70%\n  bucket 8: 40%\n  bucket 3: 40%\n  bucket 1: 30%\n  bucket 7: 40%\n  bucket 6: 90%\n  bucket 5: 40%\n  bucket 4: 50%\n  bucket 7: 50%\n  bucket 1: 40%\n  bucket 6: 100%\n  bucket 5: 50%\n  bucket 2: 80%\n  bucket 7: 60%\n  bucket 4: 60%\n  Sorting block of length 90 for bucket 6\n  bucket 8: 50%\n  (Using difference cover)\n  bucket 3: 50%\n  bucket 2: 90%\n  bucket 1: 50%\n  bucket 7: 70%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 2: 100%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 5: 60%\n  bucket 7: 90%\n  Sorting block of length 84 for bucket 2\n  bucket 1: 60%\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 5: 70%\n  bucket 8: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 1: 70%\n  bucket 7: 100%\n  bucket 3: 90%\n  bucket 8: 80%\n  bucket 5: 80%\n  bucket 4: 90%\n  Sorting block of length 75 for bucket 7\n  bucket 1: 80%\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 5: 90%\n  Sorting block of length 106 for bucket 3\n  bucket 4: 100%\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 5: 100%\n  bucket 1: 90%\n  bucket 8: 100%\n  Sorting block of length 63 for bucket 5\n  bucket 1: 100%\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\nGetting block 10 of 60\n  Calculating Z arrays for bucket 9\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  bucket 9: 100%\n  Sorting block of length 89 for bucket 10\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\nGetting block 14 of 60\n  bucket 13: 10%\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  bucket 13: 30%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 40%\n  bucket 12: 20%\n  bucket 14: 10%\n  bucket 13: 50%\n  bucket 12: 30%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 12: 40%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 12: 50%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 12: 60%\n  bucket 14: 60%\n  bucket 13: 100%\n  bucket 12: 70%\n  Sorting block of length 85 for bucket 13\n  bucket 14: 70%\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 60\n  Entering block accumulator loop for bucket 15:\n  Reserving size (126) for bucket 16\n  bucket 15: 10%\n  Calculating Z arrays for bucket 16\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  bucket 17: 60%\n  Calculating Z arrays for bucket 18\n  bucket 17: 70%\n  bucket 17: 80%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 90%\n  bucket 18: 10%\n  bucket 17: 100%\n  bucket 18: 20%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  Sorting block time: 00:00:00\n  bucket 18: 60%\nReturning block of 40 for bucket 17\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 21 of 60\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  Entering block accumulator loop for bucket 21:\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 21: 30%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 21: 40%\n  bucket 19: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 19: 80%\n  bucket 20: 90%\n  bucket 21: 80%\n  bucket 20: 100%\n  bucket 21: 90%\n  Sorting block of length 97 for bucket 20\n  bucket 21: 100%\n  (Using difference cover)\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Calculating Z arrays for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\nGetting block 24 of 60\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\nGetting block 26 of 60\n  bucket 25: 60%\n  Reserving size (126) for bucket 26\n  bucket 25: 70%\n  Calculating Z arrays for bucket 26\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\nGetting block 28 of 60\n  Calculating Z arrays for bucket 27\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  bucket 28: 100%\n  (Using difference cover)\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Entering block accumulator loop for bucket 29:\n  Reserving size (126) for bucket 30\nGetting block 31 of 60\n  Calculating Z arrays for bucket 30\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 31: 10%\n  bucket 30: 30%\n  bucket 31: 20%\n  bucket 30: 40%\n  bucket 31: 30%\n  bucket 30: 50%\n  bucket 31: 40%\n  bucket 30: 60%\n  bucket 31: 50%\n  bucket 30: 70%\n  bucket 31: 60%\n  bucket 30: 80%\n  bucket 31: 70%\n  bucket 30: 90%\n  bucket 30: 100%\n  bucket 31: 80%\n  bucket 31: 90%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  Sorting block time: 00:00:00\n  bucket 29: 100%\nReturning block of 125 for bucket 30\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  bucket 32: 30%\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 32: 40%\n  bucket 33: 80%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 33: 90%\n  bucket 32: 80%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\nGetting block 35 of 60\n  Calculating Z arrays for bucket 34\n  Reserving size (126) for bucket 35\nGetting block 36 of 60\n  Entering block accumulator loop for bucket 34:\n  Calculating Z arrays for bucket 35\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 34: 10%\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 36:\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 36: 10%\n  bucket 35: 10%\n  bucket 36: 20%\n  bucket 34: 40%\n  bucket 36: 30%\n  bucket 34: 50%\n  bucket 36: 40%\n  bucket 34: 60%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 34: 70%\n  bucket 36: 70%\n  bucket 34: 80%\n  bucket 36: 80%\n  bucket 35: 20%\n  bucket 36: 90%\n  bucket 34: 90%\n  bucket 36: 100%\n  bucket 35: 30%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  bucket 35: 40%\n  (Using difference cover)\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 39: 30%\n  bucket 40: 70%\n  bucket 39: 40%\n  bucket 40: 80%\n  bucket 39: 50%\n  bucket 40: 90%\n  bucket 39: 60%\n  bucket 40: 100%\n  bucket 39: 70%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  Entering block accumulator loop for bucket 41:\n  Reserving size (126) for bucket 42\n  bucket 41: 10%\n  Calculating Z arrays for bucket 42\n  bucket 41: 20%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 30%\n  bucket 42: 10%\n  bucket 41: 40%\n  bucket 42: 20%\n  bucket 41: 50%\n  bucket 42: 30%\n  bucket 41: 60%\n  bucket 42: 40%\n  bucket 41: 70%\n  bucket 42: 50%\n  bucket 41: 80%\n  bucket 42: 60%\n  bucket 41: 90%\n  bucket 42: 70%\n  bucket 41: 100%\n  bucket 42: 80%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\nGetting block 44 of 60\n  bucket 43: 70%\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 80%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 90%\n  bucket 44: 10%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  bucket 44: 20%\n  (Using difference cover)\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\nGetting block 46 of 60\n  Reserving size (126) for bucket 45\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  Entering block accumulator loop for bucket 45:\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 45: 10%\n  bucket 46: 40%\n  bucket 45: 20%\n  bucket 46: 50%\n  bucket 45: 30%\n  bucket 46: 60%\n  bucket 45: 40%\n  bucket 46: 70%\n  bucket 45: 50%\n  bucket 46: 80%\n  bucket 45: 60%\n  bucket 46: 90%\n  bucket 45: 70%\n  bucket 46: 100%\n  bucket 45: 80%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\nGetting block 49 of 60\n  bucket 48: 30%\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  bucket 48: 40%\n  bucket 48: 50%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 49: 10%\n  bucket 48: 80%\n  bucket 49: 20%\n  bucket 48: 90%\n  bucket 49: 30%\n  bucket 48: 100%\n  bucket 49: 40%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\nGetting block 54 of 60\n  Calculating Z arrays for bucket 53\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\nGetting block 55 of 60\n  bucket 53: 20%\n  bucket 54: 20%\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 54: 30%\n  bucket 53: 30%\n  bucket 54: 40%\n  bucket 53: 40%\n  bucket 54: 50%\n  bucket 53: 50%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 60%\n  bucket 53: 60%\n  bucket 55: 10%\n  bucket 54: 70%\n  bucket 53: 70%\n  bucket 54: 80%\n  bucket 53: 80%\n  bucket 55: 20%\n  bucket 54: 90%\n  bucket 53: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 30%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\nGetting block 57 of 60\n  bucket 56: 70%\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 80%\n  bucket 56: 90%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:00\n500 reads; of these:\n  500 (100.00%) were paired; of these:\n    71 (14.20%) aligned concordantly 0 times\n    429 (85.80%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n85.80% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\n  Reserving size (126) for bucket 2\n  Calculating Z arrays for bucket 1\n  Calculating Z arrays for bucket 2\nGetting block 3 of 60\n  Entering block accumulator loop for bucket 2:\nGetting block 4 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 4\nGetting block 6 of 60\n  Reserving size (126) for bucket 6\n  Reserving size (126) for bucket 5\nGetting block 7 of 60\n  Calculating Z arrays for bucket 3\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 1:\n  Calculating Z arrays for bucket 5\n  Calculating Z arrays for bucket 7\n  Calculating Z arrays for bucket 6\nGetting block 8 of 60\n  Entering block accumulator loop for bucket 7:\n  Calculating Z arrays for bucket 4\n  Entering block accumulator loop for bucket 6:\n  Reserving size (126) for bucket 8\n  bucket 2: 10%\n  Entering block accumulator loop for bucket 4:\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 3:\n  bucket 2: 20%\n  Entering block accumulator loop for bucket 8:\n  bucket 6: 10%\n  Entering block accumulator loop for bucket 5:\n  bucket 6: 20%\n  bucket 2: 30%\n  bucket 7: 10%\n  bucket 3: 10%\n  bucket 6: 30%\n  bucket 7: 20%\n  bucket 2: 40%\n  bucket 8: 10%\n  bucket 3: 20%\n  bucket 6: 40%\n  bucket 4: 10%\n  bucket 6: 50%\n  bucket 5: 10%\n  bucket 4: 20%\n  bucket 6: 60%\n  bucket 1: 10%\n  bucket 7: 30%\n  bucket 5: 20%\n  bucket 4: 30%\n  bucket 2: 50%\n  bucket 6: 70%\n  bucket 5: 30%\n  bucket 4: 40%\n  bucket 8: 20%\n  bucket 1: 20%\n  bucket 2: 60%\n  bucket 3: 30%\n  bucket 8: 30%\n  bucket 6: 80%\n  bucket 2: 70%\n  bucket 8: 40%\n  bucket 3: 40%\n  bucket 1: 30%\n  bucket 7: 40%\n  bucket 6: 90%\n  bucket 5: 40%\n  bucket 4: 50%\n  bucket 7: 50%\n  bucket 1: 40%\n  bucket 6: 100%\n  bucket 5: 50%\n  bucket 2: 80%\n  bucket 7: 60%\n  bucket 4: 60%\n  Sorting block of length 90 for bucket 6\n  bucket 8: 50%\n  (Using difference cover)\n  bucket 3: 50%\n  bucket 2: 90%\n  bucket 1: 50%\n  bucket 7: 70%\n  bucket 4: 70%\n  bucket 3: 60%\n  bucket 2: 100%\n  bucket 7: 80%\n  bucket 8: 60%\n  bucket 5: 60%\n  bucket 7: 90%\n  Sorting block of length 84 for bucket 2\n  bucket 1: 60%\n  (Using difference cover)\n  bucket 3: 70%\n  bucket 5: 70%\n  bucket 8: 70%\n  bucket 3: 80%\n  bucket 4: 80%\n  bucket 1: 70%\n  bucket 7: 100%\n  bucket 3: 90%\n  bucket 8: 80%\n  bucket 5: 80%\n  bucket 4: 90%\n  Sorting block of length 75 for bucket 7\n  bucket 1: 80%\n  (Using difference cover)\n  bucket 3: 100%\n  bucket 5: 90%\n  Sorting block of length 106 for bucket 3\n  bucket 4: 100%\n  (Using difference cover)\n  bucket 8: 90%\n  bucket 5: 100%\n  bucket 1: 90%\n  bucket 8: 100%\n  Sorting block of length 63 for bucket 5\n  bucket 1: 100%\n  (Using difference cover)\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  Sorting block of length 94 for bucket 8\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 91 for bucket 6\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\n  Sorting block time: 00:00:00\nReturning block of 43 for bucket 1\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\nGetting block 10 of 60\n  Calculating Z arrays for bucket 9\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  Entering block accumulator loop for bucket 9:\n  bucket 10: 10%\n  bucket 9: 10%\n  bucket 10: 20%\n  bucket 9: 20%\n  bucket 10: 30%\n  bucket 9: 30%\n  bucket 10: 40%\n  bucket 9: 40%\n  bucket 10: 50%\n  bucket 9: 50%\n  bucket 10: 60%\n  bucket 9: 60%\n  bucket 10: 70%\n  bucket 9: 70%\n  bucket 10: 80%\n  bucket 9: 80%\n  bucket 10: 90%\n  bucket 9: 90%\n  bucket 10: 100%\n  bucket 9: 100%\n  Sorting block of length 89 for bucket 10\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 12:\n  Entering block accumulator loop for bucket 13:\n  bucket 12: 10%\nGetting block 14 of 60\n  bucket 13: 10%\n  Reserving size (126) for bucket 14\n  Calculating Z arrays for bucket 14\n  bucket 13: 20%\n  bucket 13: 30%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 40%\n  bucket 12: 20%\n  bucket 14: 10%\n  bucket 13: 50%\n  bucket 12: 30%\n  bucket 14: 20%\n  bucket 13: 60%\n  bucket 12: 40%\n  bucket 14: 30%\n  bucket 13: 70%\n  bucket 12: 50%\n  bucket 14: 40%\n  bucket 13: 80%\n  bucket 14: 50%\n  bucket 13: 90%\n  bucket 12: 60%\n  bucket 14: 60%\n  bucket 13: 100%\n  bucket 12: 70%\n  Sorting block of length 85 for bucket 13\n  bucket 14: 70%\n  (Using difference cover)\n  bucket 12: 80%\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 16 of 60\n  Entering block accumulator loop for bucket 15:\n  Reserving size (126) for bucket 16\n  bucket 15: 10%\n  Calculating Z arrays for bucket 16\n  bucket 15: 20%\n  bucket 15: 30%\n  bucket 15: 40%\n  bucket 15: 50%\n  bucket 15: 60%\n  bucket 15: 70%\n  bucket 15: 80%\n  bucket 15: 90%\n  Entering block accumulator loop for bucket 16:\n  bucket 16: 10%\n  bucket 16: 20%\n  bucket 16: 30%\n  bucket 16: 40%\n  bucket 16: 50%\n  bucket 16: 60%\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block of length 100 for bucket 16\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 15\nGetting block 17 of 60\n  Reserving size (126) for bucket 17\n  Calculating Z arrays for bucket 17\n  Entering block accumulator loop for bucket 17:\n  bucket 17: 10%\n  bucket 17: 20%\n  bucket 17: 30%\n  bucket 17: 40%\n  bucket 17: 50%\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  bucket 17: 60%\n  Calculating Z arrays for bucket 18\n  bucket 17: 70%\n  bucket 17: 80%\n  Entering block accumulator loop for bucket 18:\n  bucket 17: 90%\n  bucket 18: 10%\n  bucket 17: 100%\n  bucket 18: 20%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  Sorting block time: 00:00:00\n  bucket 18: 60%\nReturning block of 40 for bucket 17\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\nGetting block 20 of 60\n  Reserving size (126) for bucket 20\n  Calculating Z arrays for bucket 20\n  Reserving size (126) for bucket 19\n  Calculating Z arrays for bucket 19\nGetting block 21 of 60\n  Entering block accumulator loop for bucket 20:\n  Entering block accumulator loop for bucket 19:\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  bucket 20: 10%\n  bucket 19: 10%\n  bucket 20: 20%\n  Entering block accumulator loop for bucket 21:\n  bucket 19: 20%\n  bucket 20: 30%\n  bucket 21: 10%\n  bucket 19: 30%\n  bucket 20: 40%\n  bucket 21: 20%\n  bucket 19: 40%\n  bucket 20: 50%\n  bucket 21: 30%\n  bucket 19: 50%\n  bucket 20: 60%\n  bucket 21: 40%\n  bucket 19: 60%\n  bucket 21: 50%\n  bucket 20: 70%\n  bucket 19: 70%\n  bucket 21: 60%\n  bucket 20: 80%\n  bucket 21: 70%\n  bucket 19: 80%\n  bucket 20: 90%\n  bucket 21: 80%\n  bucket 20: 100%\n  bucket 21: 90%\n  Sorting block of length 97 for bucket 20\n  bucket 21: 100%\n  (Using difference cover)\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 19: 90%\n  bucket 19: 100%\nGetting block 22 of 60\n  Reserving size (126) for bucket 22\n  Sorting block of length 107 for bucket 19\n  (Using difference cover)\n  Calculating Z arrays for bucket 22\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\n  Entering block accumulator loop for bucket 22:\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\nGetting block 24 of 60\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Reserving size (126) for bucket 24\n  Calculating Z arrays for bucket 24\n  Entering block accumulator loop for bucket 24:\n  bucket 24: 10%\n  bucket 24: 20%\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\n  bucket 24: 30%\n  bucket 24: 40%\n  bucket 24: 50%\n  bucket 24: 60%\n  bucket 24: 70%\n  bucket 24: 80%\n  bucket 24: 90%\n  bucket 24: 100%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 24\nGetting block 25 of 60\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 25:\n  bucket 25: 10%\n  bucket 25: 20%\n  bucket 25: 30%\n  bucket 25: 40%\n  bucket 25: 50%\nGetting block 26 of 60\n  bucket 25: 60%\n  Reserving size (126) for bucket 26\n  bucket 25: 70%\n  Calculating Z arrays for bucket 26\n  bucket 25: 80%\n  bucket 25: 90%\n  bucket 25: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Entering block accumulator loop for bucket 26:\n  bucket 26: 10%\n  bucket 26: 20%\n  bucket 26: 30%\n  bucket 26: 40%\n  bucket 26: 50%\n  bucket 26: 60%\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  bucket 26: 70%\n  bucket 26: 80%\n  bucket 26: 90%\n  bucket 26: 100%\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\nGetting block 27 of 60\n  Reserving size (126) for bucket 27\nGetting block 28 of 60\n  Calculating Z arrays for bucket 27\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 27:\n  Entering block accumulator loop for bucket 28:\n  bucket 27: 10%\n  bucket 28: 10%\n  bucket 27: 20%\n  bucket 28: 20%\n  bucket 27: 30%\n  bucket 28: 30%\n  bucket 27: 40%\n  bucket 28: 40%\n  bucket 27: 50%\n  bucket 28: 50%\n  bucket 27: 60%\n  bucket 28: 60%\n  bucket 27: 70%\n  bucket 28: 70%\n  bucket 27: 80%\n  bucket 28: 80%\n  bucket 27: 90%\n  bucket 28: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  bucket 28: 100%\n  (Using difference cover)\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\nGetting block 30 of 60\n  Entering block accumulator loop for bucket 29:\n  Reserving size (126) for bucket 30\nGetting block 31 of 60\n  Calculating Z arrays for bucket 30\n  Reserving size (126) for bucket 31\n  Calculating Z arrays for bucket 31\n  Entering block accumulator loop for bucket 30:\n  Entering block accumulator loop for bucket 31:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 31: 10%\n  bucket 30: 30%\n  bucket 31: 20%\n  bucket 30: 40%\n  bucket 31: 30%\n  bucket 30: 50%\n  bucket 31: 40%\n  bucket 30: 60%\n  bucket 31: 50%\n  bucket 30: 70%\n  bucket 31: 60%\n  bucket 30: 80%\n  bucket 31: 70%\n  bucket 30: 90%\n  bucket 30: 100%\n  bucket 31: 80%\n  bucket 31: 90%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  bucket 29: 10%\n  bucket 29: 20%\n  bucket 29: 30%\n  bucket 29: 40%\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  Sorting block time: 00:00:00\n  bucket 29: 100%\nReturning block of 125 for bucket 30\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\nGetting block 33 of 60\n  Reserving size (126) for bucket 33\n  bucket 32: 30%\n  Calculating Z arrays for bucket 33\n  Entering block accumulator loop for bucket 33:\n  bucket 33: 10%\n  bucket 33: 20%\n  bucket 33: 30%\n  bucket 33: 40%\n  bucket 33: 50%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 32: 40%\n  bucket 33: 80%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 33: 90%\n  bucket 32: 80%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 32: 90%\n  bucket 32: 100%\n  Sorting block of length 125 for bucket 32\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\nGetting block 34 of 60\n  Reserving size (126) for bucket 34\nGetting block 35 of 60\n  Calculating Z arrays for bucket 34\n  Reserving size (126) for bucket 35\nGetting block 36 of 60\n  Entering block accumulator loop for bucket 34:\n  Calculating Z arrays for bucket 35\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  bucket 34: 10%\n  Entering block accumulator loop for bucket 35:\n  Entering block accumulator loop for bucket 36:\n  bucket 34: 20%\n  bucket 34: 30%\n  bucket 36: 10%\n  bucket 35: 10%\n  bucket 36: 20%\n  bucket 34: 40%\n  bucket 36: 30%\n  bucket 34: 50%\n  bucket 36: 40%\n  bucket 34: 60%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 34: 70%\n  bucket 36: 70%\n  bucket 34: 80%\n  bucket 36: 80%\n  bucket 35: 20%\n  bucket 36: 90%\n  bucket 34: 90%\n  bucket 36: 100%\n  bucket 35: 30%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  bucket 35: 40%\n  (Using difference cover)\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 121 for bucket 36\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  bucket 37: 10%\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\n  bucket 38: 20%\n  bucket 38: 30%\n  bucket 38: 40%\n  bucket 38: 50%\n  bucket 38: 60%\n  bucket 38: 70%\n  bucket 38: 80%\n  bucket 38: 90%\n  bucket 38: 100%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\nGetting block 39 of 60\n  Reserving size (126) for bucket 39\n  Calculating Z arrays for bucket 39\n  Entering block accumulator loop for bucket 39:\n  bucket 39: 10%\n  bucket 39: 20%\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 39: 30%\n  bucket 40: 70%\n  bucket 39: 40%\n  bucket 40: 80%\n  bucket 39: 50%\n  bucket 40: 90%\n  bucket 39: 60%\n  bucket 40: 100%\n  bucket 39: 70%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\n  Calculating Z arrays for bucket 41\nGetting block 42 of 60\n  Entering block accumulator loop for bucket 41:\n  Reserving size (126) for bucket 42\n  bucket 41: 10%\n  Calculating Z arrays for bucket 42\n  bucket 41: 20%\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 30%\n  bucket 42: 10%\n  bucket 41: 40%\n  bucket 42: 20%\n  bucket 41: 50%\n  bucket 42: 30%\n  bucket 41: 60%\n  bucket 42: 40%\n  bucket 41: 70%\n  bucket 42: 50%\n  bucket 41: 80%\n  bucket 42: 60%\n  bucket 41: 90%\n  bucket 42: 70%\n  bucket 41: 100%\n  bucket 42: 80%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 89 for bucket 41\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  Entering block accumulator loop for bucket 43:\n  bucket 43: 10%\n  bucket 43: 20%\n  bucket 43: 30%\n  bucket 43: 40%\n  bucket 43: 50%\n  bucket 43: 60%\nGetting block 44 of 60\n  bucket 43: 70%\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 44\n  bucket 43: 80%\n  Entering block accumulator loop for bucket 44:\n  bucket 43: 90%\n  bucket 44: 10%\n  bucket 43: 100%\n  Sorting block of length 121 for bucket 43\n  bucket 44: 20%\n  (Using difference cover)\n  bucket 44: 30%\n  bucket 44: 40%\n  bucket 44: 50%\n  bucket 44: 60%\n  bucket 44: 70%\n  bucket 44: 80%\n  bucket 44: 90%\n  bucket 44: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 45 of 60\nGetting block 46 of 60\n  Reserving size (126) for bucket 45\n  Reserving size (126) for bucket 46\n  Calculating Z arrays for bucket 46\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 46:\n  bucket 46: 10%\n  Entering block accumulator loop for bucket 45:\n  bucket 46: 20%\n  bucket 46: 30%\n  bucket 45: 10%\n  bucket 46: 40%\n  bucket 45: 20%\n  bucket 46: 50%\n  bucket 45: 30%\n  bucket 46: 60%\n  bucket 45: 40%\n  bucket 46: 70%\n  bucket 45: 50%\n  bucket 46: 80%\n  bucket 45: 60%\n  bucket 46: 90%\n  bucket 45: 70%\n  bucket 46: 100%\n  bucket 45: 80%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  bucket 45: 90%\n  bucket 45: 100%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 70 for bucket 46\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\nGetting block 47 of 60\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\n  Entering block accumulator loop for bucket 47:\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 47: 30%\n  bucket 47: 40%\n  bucket 47: 50%\n  bucket 47: 60%\n  bucket 47: 70%\n  bucket 47: 80%\n  bucket 47: 90%\n  bucket 47: 100%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Entering block accumulator loop for bucket 48:\n  bucket 48: 10%\n  bucket 48: 20%\nGetting block 49 of 60\n  bucket 48: 30%\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  bucket 48: 40%\n  bucket 48: 50%\n  Entering block accumulator loop for bucket 49:\n  bucket 48: 60%\n  bucket 48: 70%\n  bucket 49: 10%\n  bucket 48: 80%\n  bucket 49: 20%\n  bucket 48: 90%\n  bucket 49: 30%\n  bucket 48: 100%\n  bucket 49: 40%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 49: 50%\n  bucket 49: 60%\n  bucket 49: 70%\n  bucket 49: 80%\n  bucket 49: 90%\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nGetting block 50 of 60\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  Entering block accumulator loop for bucket 50:\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 92 for bucket 51\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\n  Calculating Z arrays for bucket 52\n  Entering block accumulator loop for bucket 52:\n  bucket 52: 10%\n  bucket 52: 20%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 52\nGetting block 53 of 60\n  Reserving size (126) for bucket 53\nGetting block 54 of 60\n  Calculating Z arrays for bucket 53\n  Reserving size (126) for bucket 54\n  Calculating Z arrays for bucket 54\n  Entering block accumulator loop for bucket 53:\n  Entering block accumulator loop for bucket 54:\n  bucket 53: 10%\n  bucket 54: 10%\nGetting block 55 of 60\n  bucket 53: 20%\n  bucket 54: 20%\n  Reserving size (126) for bucket 55\n  Calculating Z arrays for bucket 55\n  bucket 54: 30%\n  bucket 53: 30%\n  bucket 54: 40%\n  bucket 53: 40%\n  bucket 54: 50%\n  bucket 53: 50%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 60%\n  bucket 53: 60%\n  bucket 55: 10%\n  bucket 54: 70%\n  bucket 53: 70%\n  bucket 54: 80%\n  bucket 53: 80%\n  bucket 55: 20%\n  bucket 54: 90%\n  bucket 53: 90%\n  bucket 54: 100%\n  Sorting block of length 64 for bucket 54\n  (Using difference cover)\n  bucket 55: 30%\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  bucket 55: 40%\n  bucket 55: 50%\n  bucket 55: 60%\n  bucket 55: 70%\n  bucket 55: 80%\n  bucket 55: 90%\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\n  Entering block accumulator loop for bucket 56:\n  bucket 56: 10%\n  bucket 56: 20%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 56: 60%\nGetting block 57 of 60\n  bucket 56: 70%\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\n  bucket 56: 80%\n  bucket 56: 90%\n  Entering block accumulator loop for bucket 57:\n  bucket 56: 100%\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  bucket 57: 10%\n  bucket 57: 20%\n  bucket 57: 30%\n  bucket 57: 40%\n  bucket 57: 50%\n  bucket 57: 60%\n  bucket 57: 70%\n  bucket 57: 80%\n  bucket 57: 90%\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\n  bucket 57: 100%\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 58:\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  bucket 58: 70%\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\n  Calculating Z arrays for bucket 59\n  Entering block accumulator loop for bucket 59:\n  bucket 59: 10%\n  bucket 59: 20%\n  bucket 59: 30%\n  bucket 59: 40%\n  bucket 59: 50%\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 60: 50%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 60: 80%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:16:00", "plugin": "core", "name": "end_epoch", "raw_value": "1684912560.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:16:00", "plugin": "core", "name": "start_epoch", "raw_value": "1684912560.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1-9", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2", "tool_version": "2.2.1+galaxy1", "test_index": 9, "time_seconds": 45.45478820800781, "inputs": {"reference_genome|history_item": {"src": "hda", "id": "0ab098d2f88445a2"}, "reference_genome|source": "history", "library|input_1": {"src": "hda", "id": "9186880800a0f40d"}, "library|input_2": {"src": "hda", "id": "f0464bc36dfc13ed"}, "library|rna_strandness": "FR", "library|type": "paired"}, "job": {"model_class": "Job", "id": "4d44748aa3e8753d", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:16:15.263942", "create_time": "2023-05-24T07:16:00.432832", "galaxy_version": "23.0", "command_version": "/usr/local/bin/hisat2-align-s version 2.2.1\n64-bit\nBuilt on fv-az198-998\nSat Mar 27 17:02:15 UTC 2021\nCompiler: collect2: error: ld returned 1 exit status\nOptions: -O3 -m64 -msse2 -funroll-loops -g3 -DPOPCNT_CAPABILITY -std=c++11\nSizeof {int, long, long long, void*, size_t, off_t}: {4, 8, 8, 8, 8, 8}", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/hisat2/hisat2/2.2.1+galaxy1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-wvbkx", "command_line": "set -o pipefail;  ln -s '/galaxy/server/database/objects/d/b/d/dataset_dbd366f2-f750-42fd-aef8-f2cd58cd7b10.dat' genome.fa && hisat2-build -p ${GALAXY_SLOTS:-1} genome.fa genome &&        ln -f -s '/galaxy/server/database/objects/d/4/c/dataset_d4c542fc-9227-4f37-bf95-052e90d96cf4.dat' input_f.fastq &&  ln -f -s '/galaxy/server/database/objects/d/a/3/dataset_da3b36f4-86ba-40a8-b0de-c95485358f21.dat' input_r.fastq &&     hisat2  -p ${GALAXY_SLOTS:-1}  -x 'genome'    -1 'input_f.fastq' -2 'input_r.fastq'      --rna-strandness FR                           | samtools sort --no-PG -l 0 -T \"${TMPDIR:-.}\" -O bam | samtools view --no-PG -O bam -@ ${GALAXY_SLOTS:-1} -o '/galaxy/server/database/objects/d/3/8/dataset_d38ac3d5-4c00-4286-951c-fe524defcb5f.dat'", "traceback": null, "params": {"__input_ext": "\"input\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"alignment_options\": {\"__current_case__\": 0, \"alignment_options_selector\": \"defaults\"}, \"input_options\": {\"__current_case__\": 0, \"input_options_selector\": \"defaults\"}, \"other_options\": {\"__current_case__\": 0, \"other_options_selector\": \"defaults\"}, \"output_options\": {\"__current_case__\": 0, \"output_options_selector\": \"defaults\"}, \"reporting_options\": {\"__current_case__\": 0, \"reporting_options_selector\": \"defaults\"}, \"sam_options\": {\"__current_case__\": 0, \"sam_options_selector\": \"defaults\"}, \"scoring_options\": {\"__current_case__\": 0, \"scoring_options_selector\": \"defaults\"}, \"spliced_options\": {\"__current_case__\": 0, \"spliced_options_selector\": \"defaults\"}}", "sum": "{\"new_summary\": false, \"summary_file\": false}", "library": "{\"__current_case__\": 1, \"input_1\": {\"values\": [{\"id\": 607, \"src\": \"hda\"}]}, \"input_2\": {\"values\": [{\"id\": 608, \"src\": \"hda\"}]}, \"paired_options\": {\"__current_case__\": 0, \"paired_options_selector\": \"defaults\"}, \"rna_strandness\": \"FR\", \"type\": \"paired\"}", "reference_genome": "{\"__current_case__\": 1, \"history_item\": {\"values\": [{\"id\": 606, \"src\": \"hda\"}]}, \"source\": \"history\"}"}, "inputs": {"history_item": {"id": "0ab098d2f88445a2", "src": "hda", "uuid": "dbd366f2-f750-42fd-aef8-f2cd58cd7b10"}, "input_1": {"id": "9186880800a0f40d", "src": "hda", "uuid": "d4c542fc-9227-4f37-bf95-052e90d96cf4"}, "input_2": {"id": "f0464bc36dfc13ed", "src": "hda", "uuid": "da3b36f4-86ba-40a8-b0de-c95485358f21"}}, "outputs": {"output_alignments": {"id": "621ca066e434ce02", "src": "hda", "uuid": "d38ac3d5-4c00-4286-951c-fe524defcb5f"}}, "output_collections": {}, "tool_stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\nGetting block 3 of 60\n  Calculating Z arrays for bucket 1\nGetting block 4 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 2\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 4\nGetting block 6 of 60\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 3\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 7\n  bucket 1: 10%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 6\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 1: 30%\n  Calculating Z arrays for bucket 5\n  bucket 6: 20%\n  bucket 1: 40%\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 6: 30%\n  bucket 1: 50%\n  bucket 8: 10%\n  bucket 6: 40%\n  bucket 3: 20%\n  bucket 7: 10%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 8: 20%\n  bucket 6: 50%\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 8: 30%\n  bucket 4: 20%\n  bucket 1: 70%\n  bucket 3: 40%\n  bucket 8: 40%\n  bucket 4: 30%\n  bucket 6: 60%\n  bucket 1: 80%\n  bucket 8: 50%\n  bucket 4: 40%\n  bucket 1: 90%\n  bucket 6: 70%\n  bucket 4: 50%\n  bucket 1: 100%\n  bucket 2: 30%\n  bucket 6: 80%\n  bucket 4: 60%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  Entering block accumulator loop for bucket 5:\n  bucket 4: 70%\n  Sorting block time: 00:00:00\n  bucket 8: 60%\n  bucket 5: 10%\n  bucket 4: 80%\n  bucket 8: 70%\n  bucket 6: 90%\n  bucket 4: 90%\nReturning block of 43 for bucket 1\n  bucket 6: 100%\n  bucket 2: 40%\n  bucket 7: 20%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 5: 20%\n  bucket 7: 30%\n  bucket 2: 50%\n  bucket 8: 80%\n  bucket 3: 50%\n  bucket 4: 100%\n  bucket 5: 30%\n  bucket 8: 90%\n  bucket 7: 40%\n  bucket 2: 60%\n  bucket 3: 60%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 8: 100%\n  bucket 3: 70%\n  bucket 5: 40%\n  bucket 2: 70%\n  bucket 7: 50%\n  bucket 3: 80%\n  Sorting block of length 94 for bucket 8\n  bucket 5: 50%\n  Sorting block time: 00:00:00\n  bucket 7: 60%\nReturning block of 91 for bucket 6\n  bucket 5: 60%\n  bucket 7: 70%\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 5: 70%\n  bucket 7: 80%\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 7: 90%\n  bucket 5: 80%\n  bucket 2: 100%\n  bucket 7: 100%\n  bucket 3: 100%\n  bucket 5: 90%\n  Sorting block of length 75 for bucket 7\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  bucket 13: 70%\n  Calculating Z arrays for bucket 14\n  bucket 13: 80%\n  bucket 13: 90%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 17 of 60\n  Entering block accumulator loop for bucket 15:\n  Reserving size (126) for bucket 17\n  bucket 15: 10%\n  Calculating Z arrays for bucket 17\n  bucket 15: 20%\nGetting block 16 of 60\n  bucket 15: 30%\n  Entering block accumulator loop for bucket 17:\n  Reserving size (126) for bucket 16\n  bucket 15: 40%\n  Calculating Z arrays for bucket 16\n  bucket 17: 10%\n  bucket 15: 50%\n  bucket 17: 20%\n  bucket 15: 60%\n  Entering block accumulator loop for bucket 16:\n  bucket 17: 30%\n  bucket 15: 70%\n  bucket 17: 40%\n  bucket 16: 10%\n  bucket 15: 80%\n  bucket 17: 50%\n  bucket 16: 20%\n  bucket 17: 60%\n  bucket 15: 90%\n  bucket 16: 30%\n  bucket 17: 70%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 40%\n  bucket 17: 80%\n  bucket 16: 50%\n  bucket 17: 90%\n  bucket 17: 100%\n  bucket 16: 60%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 100 for bucket 16\nReturning block of 69 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\nGetting block 20 of 60\n  Calculating Z arrays for bucket 19\n  Reserving size (126) for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Calculating Z arrays for bucket 20\n  bucket 19: 10%\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 20: 10%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 20: 20%\n  bucket 19: 70%\n  bucket 20: 30%\n  bucket 19: 80%\n  bucket 20: 40%\n  bucket 19: 90%\n  bucket 20: 50%\n  bucket 19: 100%\n  bucket 20: 60%\n  Sorting block of length 107 for bucket 19\n  bucket 20: 70%\n  bucket 20: 80%\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\nGetting block 22 of 60\n  bucket 21: 60%\n  Reserving size (126) for bucket 22\n  bucket 21: 70%\n  Calculating Z arrays for bucket 22\n  bucket 21: 80%\n  bucket 21: 90%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\nGetting block 25 of 60\n  Calculating Z arrays for bucket 24\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Entering block accumulator loop for bucket 24:\n  Calculating Z arrays for bucket 26\n  bucket 24: 10%\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 26:\n  bucket 24: 20%\n  bucket 26: 10%\n  bucket 24: 30%\n  Entering block accumulator loop for bucket 25:\n  bucket 26: 20%\n  bucket 24: 40%\n  bucket 25: 10%\n  bucket 26: 30%\n  bucket 24: 50%\n  bucket 25: 20%\n  bucket 26: 40%\n  bucket 24: 60%\n  bucket 26: 50%\n  bucket 25: 30%\n  bucket 24: 70%\n  bucket 25: 40%\n  bucket 24: 80%\n  bucket 25: 50%\n  bucket 26: 60%\n  bucket 24: 90%\n  bucket 25: 60%\n  bucket 26: 70%\n  bucket 24: 100%\nGetting block 27 of 60\n  bucket 25: 70%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Reserving size (126) for bucket 27\n  bucket 25: 80%\n  Calculating Z arrays for bucket 27\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 26: 90%\n  Entering block accumulator loop for bucket 27:\n  bucket 25: 100%\n  bucket 26: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  Sorting block time: 00:00:00\n  bucket 27: 70%\nReturning block of 69 for bucket 24\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 30%\n  bucket 28: 40%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 29: 10%\n  bucket 28: 70%\n  bucket 29: 20%\n  bucket 28: 80%\n  bucket 29: 30%\n  bucket 28: 90%\n  bucket 29: 40%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\nGetting block 31 of 60\n  bucket 30: 80%\n  Reserving size (126) for bucket 31\n  bucket 30: 90%\n  Calculating Z arrays for bucket 31\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  Sorting block time: 00:00:00\n  bucket 31: 60%\nReturning block of 125 for bucket 30\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\nGetting block 33 of 60\n  bucket 32: 90%\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 60\n  bucket 32: 100%\n  Reserving size (126) for bucket 34\n  Entering block accumulator loop for bucket 33:\n  Sorting block of length 125 for bucket 32\n  Calculating Z arrays for bucket 34\n  (Using difference cover)\n  bucket 33: 10%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 20%\n  bucket 34: 10%\n  bucket 33: 30%\n  bucket 34: 20%\n  bucket 33: 40%\n  bucket 34: 30%\n  bucket 33: 50%\n  bucket 34: 40%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 34: 50%\n  bucket 33: 80%\n  bucket 34: 60%\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  Sorting block time: 00:00:00\n  bucket 37: 10%\nReturning block of 121 for bucket 36\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\nGetting block 39 of 60\n  bucket 38: 20%\n  Reserving size (126) for bucket 39\n  bucket 38: 30%\n  Calculating Z arrays for bucket 39\n  bucket 38: 40%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 50%\n  bucket 39: 10%\n  bucket 38: 60%\n  bucket 39: 20%\n  bucket 38: 70%\n  bucket 39: 30%\n  bucket 38: 80%\n  bucket 39: 40%\n  bucket 38: 90%\n  bucket 39: 50%\n  bucket 38: 100%\n  bucket 39: 60%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\nGetting block 42 of 60\nGetting block 45 of 60\nGetting block 44 of 60\n  Reserving size (126) for bucket 45\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 41\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Calculating Z arrays for bucket 44\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  Entering block accumulator loop for bucket 44:\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 42: 10%\n  bucket 41: 20%\n  bucket 44: 10%\n  Entering block accumulator loop for bucket 45:\n  bucket 42: 20%\n  Entering block accumulator loop for bucket 43:\n  bucket 44: 20%\n  bucket 41: 30%\n  bucket 42: 30%\n  bucket 44: 30%\n  bucket 45: 10%\n  bucket 41: 40%\n  bucket 43: 10%\n  bucket 44: 40%\n  bucket 42: 40%\n  bucket 45: 20%\n  bucket 41: 50%\n  bucket 44: 50%\n  bucket 43: 20%\n  bucket 45: 30%\n  bucket 41: 60%\n  bucket 44: 60%\n  bucket 43: 30%\n  bucket 45: 40%\n  bucket 44: 70%\n  bucket 41: 70%\n  bucket 43: 40%\n  bucket 45: 50%\n  bucket 41: 80%\n  bucket 43: 50%\n  bucket 45: 60%\n  bucket 41: 90%\n  bucket 42: 50%\n  bucket 43: 60%\n  bucket 45: 70%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 42: 60%\nReturning block of 89 for bucket 41\n  bucket 45: 80%\n  bucket 43: 70%\n  bucket 45: 90%\n  bucket 43: 80%\n  bucket 45: 100%\n  bucket 44: 80%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 43: 90%\n  bucket 42: 70%\n  bucket 43: 100%\n  bucket 44: 90%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 42: 80%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\nGetting block 47 of 60\n  Calculating Z arrays for bucket 46\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 46: 10%\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 48: 10%\n  bucket 47: 30%\n  bucket 48: 20%\n  bucket 47: 40%\n  bucket 48: 30%\n  bucket 47: 50%\n  bucket 48: 40%\n  bucket 47: 60%\n  bucket 46: 20%\n  bucket 48: 50%\n  bucket 47: 70%\n  bucket 46: 30%\n  bucket 48: 60%\n  bucket 47: 80%\n  bucket 46: 40%\n  bucket 47: 90%\n  bucket 48: 70%\n  bucket 47: 100%\n  bucket 48: 80%\n  bucket 46: 50%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 90%\n  bucket 46: 60%\n  bucket 48: 100%\n  bucket 46: 70%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nReturning block of 70 for bucket 46\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\nGetting block 50 of 60\n  bucket 49: 70%\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 80%\n  bucket 49: 90%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\nGetting block 53 of 60\n  Calculating Z arrays for bucket 52\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 10%\n  bucket 53: 10%\n  bucket 52: 20%\n  Sorting block time: 00:00:00\n  bucket 53: 20%\nReturning block of 92 for bucket 51\n  bucket 53: 30%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  Sorting block time: 00:00:00\n  bucket 53: 90%\nReturning block of 107 for bucket 52\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\nGetting block 55 of 60\n  Calculating Z arrays for bucket 54\n  Reserving size (126) for bucket 55\n  Entering block accumulator loop for bucket 54:\n  Calculating Z arrays for bucket 55\n  bucket 54: 10%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 20%\n  bucket 55: 10%\n  bucket 54: 30%\n  bucket 55: 20%\n  bucket 54: 40%\n  bucket 55: 30%\n  bucket 54: 50%\n  bucket 55: 40%\n  bucket 54: 60%\n  bucket 55: 50%\n  bucket 54: 70%\n  bucket 55: 60%\n  bucket 54: 80%\n  bucket 55: 70%\n  bucket 54: 90%\n  bucket 55: 80%\n  bucket 54: 100%\n  bucket 55: 90%\n  Sorting block of length 64 for bucket 54\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  Entering block accumulator loop for bucket 56:\n  bucket 57: 20%\n  bucket 56: 10%\n  bucket 57: 30%\n  bucket 56: 20%\n  bucket 57: 40%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 57: 50%\n  bucket 56: 60%\n  bucket 57: 60%\n  bucket 56: 70%\n  bucket 57: 70%\n  bucket 56: 80%\n  bucket 57: 80%\n  bucket 56: 90%\n  bucket 57: 90%\n  bucket 56: 100%\n  bucket 57: 100%\n  Entering block accumulator loop for bucket 58:\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  Sorting block time: 00:00:00\n  bucket 58: 70%\nReturning block of 86 for bucket 57\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 59\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  Entering block accumulator loop for bucket 59:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 59: 10%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 59: 20%\n  bucket 60: 50%\n  bucket 59: 30%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 59: 40%\n  bucket 60: 80%\n  bucket 59: 50%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "tool_stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "job_stdout": "", "job_stderr": "", "stderr": "Settings:\n  Output files: \"genome.*.ht2\"\n  Line rate: 6 (line is 64 bytes)\n  Lines per side: 1 (side is 64 bytes)\n  Offset rate: 4 (one in 16)\n  FTable chars: 10\n  Strings: unpacked\n  Local offset rate: 3 (one in 8)\n  Local fTable chars: 6\n  Local sequence length: 57344\n  Local sequence overlap between two consecutive indexes: 1024\n  Endianness: little\n  Actual local endianness: little\n  Sanity checking: disabled\n  Assertions: disabled\n  Random seed: 0\n  Sizeofs: void*:8, int:4, long:8, size_t:8\nInput files DNA, FASTA:\n  genome.fa\nReading reference sizes\n  Time reading reference sizes: 00:00:00\nCalculating joined length\nWriting header\nReserving space for joined string\nJoining reference sequences\n  Time to join reference sequences: 00:00:00\n  Time to read SNPs and splice sites: 00:00:00\nUsing parameters --bmax 126 --dcv 1024\n  Doing ahead-of-time memory usage test\n  Passed!  Constructing with these parameters: --bmax 126 --dcv 1024\nConstructing suffix-array element generator\nConverting suffix-array elements to index image\nAllocating ftab, absorbFtab\nEntering GFM loop\nExited GFM loop\nfchr[A]: 0\nfchr[C]: 1292\nfchr[G]: 2447\nfchr[T]: 3700\nfchr[$]: 5386\nExiting GFM::buildToDisk()\nReturning from initFromVector\nWrote 4196349 bytes to primary GFM file: genome.1.ht2\nWrote 1352 bytes to secondary GFM file: genome.2.ht2\nRe-opening _in1 and _in2 as input streams\nReturning from GFM constructor\nReturning from initFromVector\nWrote 9893 bytes to primary GFM file: genome.5.ht2\nWrote 1352 bytes to secondary GFM file: genome.6.ht2\nRe-opening _in5 and _in5 as input streams\nReturning from HGFM constructor\nHeaders:\n    len: 5386\n    gbwtLen: 5387\n    nodes: 5387\n    sz: 1347\n    gbwtSz: 1347\n    lineRate: 6\n    offRate: 4\n    offMask: 0xfffffff0\n    ftabChars: 10\n    eftabLen: 0\n    eftabSz: 0\n    ftabLen: 1048577\n    ftabSz: 4194308\n    offsLen: 337\n    offsSz: 1348\n    lineSz: 64\n    sideSz: 64\n    sideGbwtSz: 48\n    sideGbwtLen: 192\n    numSides: 29\n    numLines: 29\n    gbwtTotLen: 1856\n    gbwtTotSz: 1856\n    reverse: 0\n    linearFM: Yes\nTotal time for call to driver() for forward index: 00:00:01\n10 reads; of these:\n  10 (100.00%) were paired; of these:\n    1 (10.00%) aligned concordantly 0 times\n    9 (90.00%) aligned concordantly exactly 1 time\n    0 (0.00%) aligned concordantly >1 times\n    ----\n    1 pairs aligned concordantly 0 times; of these:\n      0 (0.00%) aligned discordantly 1 time\n    ----\n    1 pairs aligned 0 times concordantly or discordantly; of these:\n      2 mates make up the pairs; of these:\n        1 (50.00%) aligned 0 times\n        1 (50.00%) aligned exactly 1 time\n        0 (0.00%) aligned >1 times\n95.00% overall alignment rate\n", "stdout": "Building DifferenceCoverSample\n  Building sPrime\n  Building sPrimeOrder\n  V-Sorting samples\n  V-Sorting samples time: 00:00:00\n  Allocating rank array\n  Ranking v-sort output\n  Ranking v-sort output time: 00:00:00\n  Invoking Larsson-Sadakane on ranks\n  Invoking Larsson-Sadakane on ranks time: 00:00:00\n  Sanity-checking and returning\nBuilding samples\nReserving space for 88 sample suffixes\nGenerating random suffixes\nQSorting 88 sample offsets, eliminating duplicates\nQSorting sample offsets, eliminating duplicates time: 00:00:00\nMultikey QSorting 88 samples\n  (Using difference cover)\n  Multikey QSorting samples time: 00:00:00\nCalculating bucket sizes\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 8, merged 39; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 6, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nSplit 2, merged 3; iterating...\nSplitting and merging\n  Splitting and merging time: 00:00:00\nAvg bucket size: 88.7833 (target: 125)\nGetting block 1 of 60\n  Reserving size (126) for bucket 1\nGetting block 2 of 60\nGetting block 3 of 60\n  Calculating Z arrays for bucket 1\nGetting block 4 of 60\nGetting block 5 of 60\n  Reserving size (126) for bucket 5\n  Reserving size (126) for bucket 2\nGetting block 7 of 60\n  Reserving size (126) for bucket 7\n  Entering block accumulator loop for bucket 1:\n  Reserving size (126) for bucket 3\n  Reserving size (126) for bucket 4\nGetting block 6 of 60\nGetting block 8 of 60\n  Reserving size (126) for bucket 8\n  Calculating Z arrays for bucket 3\n  Reserving size (126) for bucket 6\n  Calculating Z arrays for bucket 2\n  Calculating Z arrays for bucket 7\n  bucket 1: 10%\n  Calculating Z arrays for bucket 8\n  Entering block accumulator loop for bucket 3:\n  Calculating Z arrays for bucket 4\n  Calculating Z arrays for bucket 6\n  bucket 1: 20%\n  Entering block accumulator loop for bucket 6:\n  Entering block accumulator loop for bucket 4:\n  Entering block accumulator loop for bucket 8:\n  Entering block accumulator loop for bucket 2:\n  Entering block accumulator loop for bucket 7:\n  bucket 6: 10%\n  bucket 1: 30%\n  Calculating Z arrays for bucket 5\n  bucket 6: 20%\n  bucket 1: 40%\n  bucket 3: 10%\n  bucket 2: 10%\n  bucket 6: 30%\n  bucket 1: 50%\n  bucket 8: 10%\n  bucket 6: 40%\n  bucket 3: 20%\n  bucket 7: 10%\n  bucket 2: 20%\n  bucket 4: 10%\n  bucket 8: 20%\n  bucket 6: 50%\n  bucket 3: 30%\n  bucket 1: 60%\n  bucket 8: 30%\n  bucket 4: 20%\n  bucket 1: 70%\n  bucket 3: 40%\n  bucket 8: 40%\n  bucket 4: 30%\n  bucket 6: 60%\n  bucket 1: 80%\n  bucket 8: 50%\n  bucket 4: 40%\n  bucket 1: 90%\n  bucket 6: 70%\n  bucket 4: 50%\n  bucket 1: 100%\n  bucket 2: 30%\n  bucket 6: 80%\n  bucket 4: 60%\n  Sorting block of length 42 for bucket 1\n  (Using difference cover)\n  Entering block accumulator loop for bucket 5:\n  bucket 4: 70%\n  Sorting block time: 00:00:00\n  bucket 8: 60%\n  bucket 5: 10%\n  bucket 4: 80%\n  bucket 8: 70%\n  bucket 6: 90%\n  bucket 4: 90%\nReturning block of 43 for bucket 1\n  bucket 6: 100%\n  bucket 2: 40%\n  bucket 7: 20%\n  Sorting block of length 90 for bucket 6\n  (Using difference cover)\n  bucket 5: 20%\n  bucket 7: 30%\n  bucket 2: 50%\n  bucket 8: 80%\n  bucket 3: 50%\n  bucket 4: 100%\n  bucket 5: 30%\n  bucket 8: 90%\n  bucket 7: 40%\n  bucket 2: 60%\n  bucket 3: 60%\n  Sorting block of length 68 for bucket 4\n  (Using difference cover)\n  bucket 8: 100%\n  bucket 3: 70%\n  bucket 5: 40%\n  bucket 2: 70%\n  bucket 7: 50%\n  bucket 3: 80%\n  Sorting block of length 94 for bucket 8\n  bucket 5: 50%\n  Sorting block time: 00:00:00\n  bucket 7: 60%\nReturning block of 91 for bucket 6\n  bucket 5: 60%\n  bucket 7: 70%\n  bucket 2: 80%\n  bucket 3: 90%\n  bucket 5: 70%\n  bucket 7: 80%\n  (Using difference cover)\n  bucket 2: 90%\n  bucket 7: 90%\n  bucket 5: 80%\n  bucket 2: 100%\n  bucket 7: 100%\n  bucket 3: 100%\n  bucket 5: 90%\n  Sorting block of length 75 for bucket 7\n  Sorting block of length 106 for bucket 3\n  (Using difference cover)\n  (Using difference cover)\n  bucket 5: 100%\n  Sorting block of length 84 for bucket 2\n  (Using difference cover)\n  Sorting block of length 63 for bucket 5\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 69 for bucket 4\n  Sorting block time: 00:00:00\nReturning block of 76 for bucket 7\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 3\n  Sorting block time: 00:00:00\nReturning block of 85 for bucket 2\n  Sorting block time: 00:00:00\nReturning block of 95 for bucket 8\n  Sorting block time: 00:00:00\nReturning block of 64 for bucket 5\nGetting block 9 of 60\n  Reserving size (126) for bucket 9\n  Calculating Z arrays for bucket 9\n  Entering block accumulator loop for bucket 9:\n  bucket 9: 10%\n  bucket 9: 20%\n  bucket 9: 30%\n  bucket 9: 40%\n  bucket 9: 50%\n  bucket 9: 60%\n  bucket 9: 70%\n  bucket 9: 80%\n  bucket 9: 90%\n  bucket 9: 100%\n  Sorting block of length 124 for bucket 9\n  (Using difference cover)\nGetting block 10 of 60\n  Reserving size (126) for bucket 10\n  Calculating Z arrays for bucket 10\n  Entering block accumulator loop for bucket 10:\n  bucket 10: 10%\n  bucket 10: 20%\n  bucket 10: 30%\n  bucket 10: 40%\n  Sorting block time: 00:00:00\nReturning block of 125 for bucket 9\n  bucket 10: 50%\n  bucket 10: 60%\n  bucket 10: 70%\n  bucket 10: 80%\n  bucket 10: 90%\n  bucket 10: 100%\n  Sorting block of length 89 for bucket 10\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 90 for bucket 10\nGetting block 11 of 60\n  Reserving size (126) for bucket 11\n  Calculating Z arrays for bucket 11\n  Entering block accumulator loop for bucket 11:\n  bucket 11: 10%\n  bucket 11: 20%\n  bucket 11: 30%\n  bucket 11: 40%\n  bucket 11: 50%\n  bucket 11: 60%\n  bucket 11: 70%\n  bucket 11: 80%\n  bucket 11: 90%\n  bucket 11: 100%\n  Sorting block of length 95 for bucket 11\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 96 for bucket 11\nGetting block 12 of 60\n  Reserving size (126) for bucket 12\n  Calculating Z arrays for bucket 12\n  Entering block accumulator loop for bucket 12:\n  bucket 12: 10%\n  bucket 12: 20%\n  bucket 12: 30%\n  bucket 12: 40%\n  bucket 12: 50%\n  bucket 12: 60%\n  bucket 12: 70%\n  bucket 12: 80%\n  bucket 12: 90%\n  bucket 12: 100%\n  Sorting block of length 82 for bucket 12\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 12\nGetting block 13 of 60\n  Reserving size (126) for bucket 13\n  Calculating Z arrays for bucket 13\n  Entering block accumulator loop for bucket 13:\n  bucket 13: 10%\n  bucket 13: 20%\n  bucket 13: 30%\n  bucket 13: 40%\n  bucket 13: 50%\n  bucket 13: 60%\nGetting block 14 of 60\n  Reserving size (126) for bucket 14\n  bucket 13: 70%\n  Calculating Z arrays for bucket 14\n  bucket 13: 80%\n  bucket 13: 90%\n  Entering block accumulator loop for bucket 14:\n  bucket 13: 100%\n  Sorting block of length 85 for bucket 13\n  (Using difference cover)\n  bucket 14: 10%\n  bucket 14: 20%\n  bucket 14: 30%\n  bucket 14: 40%\n  bucket 14: 50%\n  bucket 14: 60%\n  bucket 14: 70%\n  Sorting block time: 00:00:00\nReturning block of 86 for bucket 13\n  bucket 14: 80%\n  bucket 14: 90%\n  bucket 14: 100%\n  Sorting block of length 82 for bucket 14\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 83 for bucket 14\nGetting block 15 of 60\n  Reserving size (126) for bucket 15\n  Calculating Z arrays for bucket 15\nGetting block 17 of 60\n  Entering block accumulator loop for bucket 15:\n  Reserving size (126) for bucket 17\n  bucket 15: 10%\n  Calculating Z arrays for bucket 17\n  bucket 15: 20%\nGetting block 16 of 60\n  bucket 15: 30%\n  Entering block accumulator loop for bucket 17:\n  Reserving size (126) for bucket 16\n  bucket 15: 40%\n  Calculating Z arrays for bucket 16\n  bucket 17: 10%\n  bucket 15: 50%\n  bucket 17: 20%\n  bucket 15: 60%\n  Entering block accumulator loop for bucket 16:\n  bucket 17: 30%\n  bucket 15: 70%\n  bucket 17: 40%\n  bucket 16: 10%\n  bucket 15: 80%\n  bucket 17: 50%\n  bucket 16: 20%\n  bucket 17: 60%\n  bucket 15: 90%\n  bucket 16: 30%\n  bucket 17: 70%\n  bucket 15: 100%\n  Sorting block of length 68 for bucket 15\n  (Using difference cover)\n  bucket 16: 40%\n  bucket 17: 80%\n  bucket 16: 50%\n  bucket 17: 90%\n  bucket 17: 100%\n  bucket 16: 60%\n  Sorting block of length 39 for bucket 17\n  (Using difference cover)\n  bucket 16: 70%\n  bucket 16: 80%\n  bucket 16: 90%\n  bucket 16: 100%\n  Sorting block time: 00:00:00\n  Sorting block of length 100 for bucket 16\nReturning block of 69 for bucket 15\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 40 for bucket 17\n  Sorting block time: 00:00:00\nReturning block of 101 for bucket 16\nGetting block 18 of 60\n  Reserving size (126) for bucket 18\n  Calculating Z arrays for bucket 18\n  Entering block accumulator loop for bucket 18:\n  bucket 18: 10%\n  bucket 18: 20%\n  bucket 18: 30%\n  bucket 18: 40%\n  bucket 18: 50%\n  bucket 18: 60%\n  bucket 18: 70%\n  bucket 18: 80%\n  bucket 18: 90%\n  bucket 18: 100%\n  Sorting block of length 122 for bucket 18\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 18\nGetting block 19 of 60\n  Reserving size (126) for bucket 19\nGetting block 20 of 60\n  Calculating Z arrays for bucket 19\n  Reserving size (126) for bucket 20\n  Entering block accumulator loop for bucket 19:\n  Calculating Z arrays for bucket 20\n  bucket 19: 10%\n  bucket 19: 20%\n  Entering block accumulator loop for bucket 20:\n  bucket 19: 30%\n  bucket 19: 40%\n  bucket 20: 10%\n  bucket 19: 50%\n  bucket 19: 60%\n  bucket 20: 20%\n  bucket 19: 70%\n  bucket 20: 30%\n  bucket 19: 80%\n  bucket 20: 40%\n  bucket 19: 90%\n  bucket 20: 50%\n  bucket 19: 100%\n  bucket 20: 60%\n  Sorting block of length 107 for bucket 19\n  bucket 20: 70%\n  bucket 20: 80%\n  (Using difference cover)\n  bucket 20: 90%\n  bucket 20: 100%\n  Sorting block of length 97 for bucket 20\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 19\n  Sorting block time: 00:00:00\nReturning block of 98 for bucket 20\nGetting block 21 of 60\n  Reserving size (126) for bucket 21\n  Calculating Z arrays for bucket 21\n  Entering block accumulator loop for bucket 21:\n  bucket 21: 10%\n  bucket 21: 20%\n  bucket 21: 30%\n  bucket 21: 40%\n  bucket 21: 50%\nGetting block 22 of 60\n  bucket 21: 60%\n  Reserving size (126) for bucket 22\n  bucket 21: 70%\n  Calculating Z arrays for bucket 22\n  bucket 21: 80%\n  bucket 21: 90%\n  Entering block accumulator loop for bucket 22:\n  bucket 21: 100%\n  Sorting block of length 54 for bucket 21\n  (Using difference cover)\n  bucket 22: 10%\n  bucket 22: 20%\n  bucket 22: 30%\n  bucket 22: 40%\n  bucket 22: 50%\n  bucket 22: 60%\n  Sorting block time: 00:00:00\nReturning block of 55 for bucket 21\n  bucket 22: 70%\n  bucket 22: 80%\n  bucket 22: 90%\n  bucket 22: 100%\n  Sorting block of length 80 for bucket 22\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 81 for bucket 22\nGetting block 23 of 60\n  Reserving size (126) for bucket 23\n  Calculating Z arrays for bucket 23\n  Entering block accumulator loop for bucket 23:\n  bucket 23: 10%\n  bucket 23: 20%\n  bucket 23: 30%\n  bucket 23: 40%\n  bucket 23: 50%\n  bucket 23: 60%\n  bucket 23: 70%\n  bucket 23: 80%\n  bucket 23: 90%\n  bucket 23: 100%\n  Sorting block of length 64 for bucket 23\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 23\nGetting block 24 of 60\n  Reserving size (126) for bucket 24\nGetting block 25 of 60\n  Calculating Z arrays for bucket 24\nGetting block 26 of 60\n  Reserving size (126) for bucket 26\n  Entering block accumulator loop for bucket 24:\n  Calculating Z arrays for bucket 26\n  bucket 24: 10%\n  Reserving size (126) for bucket 25\n  Calculating Z arrays for bucket 25\n  Entering block accumulator loop for bucket 26:\n  bucket 24: 20%\n  bucket 26: 10%\n  bucket 24: 30%\n  Entering block accumulator loop for bucket 25:\n  bucket 26: 20%\n  bucket 24: 40%\n  bucket 25: 10%\n  bucket 26: 30%\n  bucket 24: 50%\n  bucket 25: 20%\n  bucket 26: 40%\n  bucket 24: 60%\n  bucket 26: 50%\n  bucket 25: 30%\n  bucket 24: 70%\n  bucket 25: 40%\n  bucket 24: 80%\n  bucket 25: 50%\n  bucket 26: 60%\n  bucket 24: 90%\n  bucket 25: 60%\n  bucket 26: 70%\n  bucket 24: 100%\nGetting block 27 of 60\n  bucket 25: 70%\n  Sorting block of length 68 for bucket 24\n  (Using difference cover)\n  Reserving size (126) for bucket 27\n  bucket 25: 80%\n  Calculating Z arrays for bucket 27\n  bucket 26: 80%\n  bucket 25: 90%\n  bucket 26: 90%\n  Entering block accumulator loop for bucket 27:\n  bucket 25: 100%\n  bucket 26: 100%\n  Sorting block of length 66 for bucket 25\n  (Using difference cover)\n  Sorting block of length 107 for bucket 26\n  (Using difference cover)\n  bucket 27: 10%\n  bucket 27: 20%\n  bucket 27: 30%\n  bucket 27: 40%\n  bucket 27: 50%\n  bucket 27: 60%\n  Sorting block time: 00:00:00\n  bucket 27: 70%\nReturning block of 69 for bucket 24\n  bucket 27: 80%\n  bucket 27: 90%\n  bucket 27: 100%\n  Sorting block of length 119 for bucket 27\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 25\n  Sorting block time: 00:00:00\nReturning block of 108 for bucket 26\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 27\nGetting block 28 of 60\n  Reserving size (126) for bucket 28\n  Calculating Z arrays for bucket 28\n  Entering block accumulator loop for bucket 28:\n  bucket 28: 10%\n  bucket 28: 20%\nGetting block 29 of 60\n  Reserving size (126) for bucket 29\n  Calculating Z arrays for bucket 29\n  bucket 28: 30%\n  bucket 28: 40%\n  Entering block accumulator loop for bucket 29:\n  bucket 28: 50%\n  bucket 28: 60%\n  bucket 29: 10%\n  bucket 28: 70%\n  bucket 29: 20%\n  bucket 28: 80%\n  bucket 29: 30%\n  bucket 28: 90%\n  bucket 29: 40%\n  bucket 28: 100%\n  Sorting block of length 106 for bucket 28\n  (Using difference cover)\n  bucket 29: 50%\n  bucket 29: 60%\n  bucket 29: 70%\n  bucket 29: 80%\n  bucket 29: 90%\n  bucket 29: 100%\n  Sorting block of length 51 for bucket 29\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 107 for bucket 28\n  Sorting block time: 00:00:00\nReturning block of 52 for bucket 29\nGetting block 30 of 60\n  Reserving size (126) for bucket 30\n  Calculating Z arrays for bucket 30\n  Entering block accumulator loop for bucket 30:\n  bucket 30: 10%\n  bucket 30: 20%\n  bucket 30: 30%\n  bucket 30: 40%\n  bucket 30: 50%\n  bucket 30: 60%\n  bucket 30: 70%\nGetting block 31 of 60\n  bucket 30: 80%\n  Reserving size (126) for bucket 31\n  bucket 30: 90%\n  Calculating Z arrays for bucket 31\n  bucket 30: 100%\n  Sorting block of length 124 for bucket 30\n  (Using difference cover)\n  Entering block accumulator loop for bucket 31:\n  bucket 31: 10%\n  bucket 31: 20%\n  bucket 31: 30%\n  bucket 31: 40%\n  bucket 31: 50%\n  Sorting block time: 00:00:00\n  bucket 31: 60%\nReturning block of 125 for bucket 30\n  bucket 31: 70%\n  bucket 31: 80%\n  bucket 31: 90%\n  bucket 31: 100%\n  Sorting block of length 110 for bucket 31\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 111 for bucket 31\nGetting block 32 of 60\n  Reserving size (126) for bucket 32\n  Calculating Z arrays for bucket 32\n  Entering block accumulator loop for bucket 32:\n  bucket 32: 10%\n  bucket 32: 20%\n  bucket 32: 30%\n  bucket 32: 40%\n  bucket 32: 50%\n  bucket 32: 60%\n  bucket 32: 70%\n  bucket 32: 80%\nGetting block 33 of 60\n  bucket 32: 90%\n  Reserving size (126) for bucket 33\n  Calculating Z arrays for bucket 33\nGetting block 34 of 60\n  bucket 32: 100%\n  Reserving size (126) for bucket 34\n  Entering block accumulator loop for bucket 33:\n  Sorting block of length 125 for bucket 32\n  Calculating Z arrays for bucket 34\n  (Using difference cover)\n  bucket 33: 10%\n  Entering block accumulator loop for bucket 34:\n  bucket 33: 20%\n  bucket 34: 10%\n  bucket 33: 30%\n  bucket 34: 20%\n  bucket 33: 40%\n  bucket 34: 30%\n  bucket 33: 50%\n  bucket 34: 40%\n  bucket 33: 60%\n  bucket 33: 70%\n  bucket 34: 50%\n  bucket 33: 80%\n  bucket 34: 60%\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 32\n  bucket 33: 90%\n  bucket 33: 100%\n  Sorting block of length 44 for bucket 33\n  (Using difference cover)\n  bucket 34: 70%\n  bucket 34: 80%\n  bucket 34: 90%\n  bucket 34: 100%\n  Sorting block of length 122 for bucket 34\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 45 for bucket 33\n  Sorting block time: 00:00:00\nReturning block of 123 for bucket 34\nGetting block 35 of 60\n  Reserving size (126) for bucket 35\n  Calculating Z arrays for bucket 35\n  Entering block accumulator loop for bucket 35:\n  bucket 35: 10%\n  bucket 35: 20%\n  bucket 35: 30%\n  bucket 35: 40%\n  bucket 35: 50%\n  bucket 35: 60%\n  bucket 35: 70%\n  bucket 35: 80%\n  bucket 35: 90%\n  bucket 35: 100%\n  Sorting block of length 112 for bucket 35\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 113 for bucket 35\nGetting block 36 of 60\n  Reserving size (126) for bucket 36\n  Calculating Z arrays for bucket 36\n  Entering block accumulator loop for bucket 36:\n  bucket 36: 10%\n  bucket 36: 20%\n  bucket 36: 30%\n  bucket 36: 40%\n  bucket 36: 50%\n  bucket 36: 60%\n  bucket 36: 70%\n  bucket 36: 80%\n  bucket 36: 90%\n  bucket 36: 100%\n  Sorting block of length 120 for bucket 36\n  (Using difference cover)\nGetting block 37 of 60\n  Reserving size (126) for bucket 37\n  Calculating Z arrays for bucket 37\n  Entering block accumulator loop for bucket 37:\n  Sorting block time: 00:00:00\n  bucket 37: 10%\nReturning block of 121 for bucket 36\n  bucket 37: 20%\n  bucket 37: 30%\n  bucket 37: 40%\n  bucket 37: 50%\n  bucket 37: 60%\n  bucket 37: 70%\n  bucket 37: 80%\n  bucket 37: 90%\n  bucket 37: 100%\n  Sorting block of length 59 for bucket 37\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 60 for bucket 37\nGetting block 38 of 60\n  Reserving size (126) for bucket 38\n  Calculating Z arrays for bucket 38\n  Entering block accumulator loop for bucket 38:\n  bucket 38: 10%\nGetting block 39 of 60\n  bucket 38: 20%\n  Reserving size (126) for bucket 39\n  bucket 38: 30%\n  Calculating Z arrays for bucket 39\n  bucket 38: 40%\n  Entering block accumulator loop for bucket 39:\n  bucket 38: 50%\n  bucket 39: 10%\n  bucket 38: 60%\n  bucket 39: 20%\n  bucket 38: 70%\n  bucket 39: 30%\n  bucket 38: 80%\n  bucket 39: 40%\n  bucket 38: 90%\n  bucket 39: 50%\n  bucket 38: 100%\n  bucket 39: 60%\n  Sorting block of length 117 for bucket 38\n  (Using difference cover)\n  bucket 39: 70%\n  bucket 39: 80%\n  bucket 39: 90%\n  bucket 39: 100%\n  Sorting block of length 125 for bucket 39\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 118 for bucket 38\n  Sorting block time: 00:00:00\nReturning block of 126 for bucket 39\nGetting block 40 of 60\n  Reserving size (126) for bucket 40\n  Calculating Z arrays for bucket 40\n  Entering block accumulator loop for bucket 40:\n  bucket 40: 10%\n  bucket 40: 20%\n  bucket 40: 30%\n  bucket 40: 40%\n  bucket 40: 50%\n  bucket 40: 60%\n  bucket 40: 70%\n  bucket 40: 80%\n  bucket 40: 90%\n  bucket 40: 100%\n  Sorting block of length 41 for bucket 40\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 42 for bucket 40\nGetting block 41 of 60\n  Reserving size (126) for bucket 41\nGetting block 42 of 60\nGetting block 45 of 60\nGetting block 44 of 60\n  Reserving size (126) for bucket 45\n  Reserving size (126) for bucket 44\n  Calculating Z arrays for bucket 41\n  Reserving size (126) for bucket 42\n  Calculating Z arrays for bucket 42\n  Calculating Z arrays for bucket 44\n  Calculating Z arrays for bucket 45\n  Entering block accumulator loop for bucket 41:\n  Entering block accumulator loop for bucket 42:\n  bucket 41: 10%\n  Entering block accumulator loop for bucket 44:\nGetting block 43 of 60\n  Reserving size (126) for bucket 43\n  Calculating Z arrays for bucket 43\n  bucket 42: 10%\n  bucket 41: 20%\n  bucket 44: 10%\n  Entering block accumulator loop for bucket 45:\n  bucket 42: 20%\n  Entering block accumulator loop for bucket 43:\n  bucket 44: 20%\n  bucket 41: 30%\n  bucket 42: 30%\n  bucket 44: 30%\n  bucket 45: 10%\n  bucket 41: 40%\n  bucket 43: 10%\n  bucket 44: 40%\n  bucket 42: 40%\n  bucket 45: 20%\n  bucket 41: 50%\n  bucket 44: 50%\n  bucket 43: 20%\n  bucket 45: 30%\n  bucket 41: 60%\n  bucket 44: 60%\n  bucket 43: 30%\n  bucket 45: 40%\n  bucket 44: 70%\n  bucket 41: 70%\n  bucket 43: 40%\n  bucket 45: 50%\n  bucket 41: 80%\n  bucket 43: 50%\n  bucket 45: 60%\n  bucket 41: 90%\n  bucket 42: 50%\n  bucket 43: 60%\n  bucket 45: 70%\n  bucket 41: 100%\n  Sorting block of length 88 for bucket 41\n  (Using difference cover)\n  Sorting block time: 00:00:00\n  bucket 42: 60%\nReturning block of 89 for bucket 41\n  bucket 45: 80%\n  bucket 43: 70%\n  bucket 45: 90%\n  bucket 43: 80%\n  bucket 45: 100%\n  bucket 44: 80%\n  Sorting block of length 79 for bucket 45\n  (Using difference cover)\n  bucket 43: 90%\n  bucket 42: 70%\n  bucket 43: 100%\n  bucket 44: 90%\n  Sorting block of length 121 for bucket 43\n  (Using difference cover)\n  bucket 42: 80%\n  bucket 44: 100%\n  Sorting block of length 66 for bucket 44\n  (Using difference cover)\n  bucket 42: 90%\n  bucket 42: 100%\n  Sorting block of length 119 for bucket 42\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 45\n  Sorting block time: 00:00:00\nReturning block of 120 for bucket 42\n  Sorting block time: 00:00:00\nReturning block of 122 for bucket 43\n  Sorting block time: 00:00:00\nReturning block of 67 for bucket 44\nGetting block 46 of 60\n  Reserving size (126) for bucket 46\nGetting block 47 of 60\n  Calculating Z arrays for bucket 46\n  Reserving size (126) for bucket 47\n  Calculating Z arrays for bucket 47\nGetting block 48 of 60\n  Reserving size (126) for bucket 48\n  Calculating Z arrays for bucket 48\n  Entering block accumulator loop for bucket 46:\n  Entering block accumulator loop for bucket 47:\n  Entering block accumulator loop for bucket 48:\n  bucket 46: 10%\n  bucket 47: 10%\n  bucket 47: 20%\n  bucket 48: 10%\n  bucket 47: 30%\n  bucket 48: 20%\n  bucket 47: 40%\n  bucket 48: 30%\n  bucket 47: 50%\n  bucket 48: 40%\n  bucket 47: 60%\n  bucket 46: 20%\n  bucket 48: 50%\n  bucket 47: 70%\n  bucket 46: 30%\n  bucket 48: 60%\n  bucket 47: 80%\n  bucket 46: 40%\n  bucket 47: 90%\n  bucket 48: 70%\n  bucket 47: 100%\n  bucket 48: 80%\n  bucket 46: 50%\n  Sorting block of length 83 for bucket 47\n  (Using difference cover)\n  bucket 48: 90%\n  bucket 46: 60%\n  bucket 48: 100%\n  bucket 46: 70%\n  Sorting block of length 113 for bucket 48\n  (Using difference cover)\n  bucket 46: 80%\n  bucket 46: 90%\n  bucket 46: 100%\n  Sorting block of length 69 for bucket 46\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 84 for bucket 47\n  Sorting block time: 00:00:00\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 48\nReturning block of 70 for bucket 46\nGetting block 49 of 60\n  Reserving size (126) for bucket 49\n  Calculating Z arrays for bucket 49\n  Entering block accumulator loop for bucket 49:\n  bucket 49: 10%\n  bucket 49: 20%\n  bucket 49: 30%\n  bucket 49: 40%\n  bucket 49: 50%\n  bucket 49: 60%\nGetting block 50 of 60\n  bucket 49: 70%\n  Reserving size (126) for bucket 50\n  Calculating Z arrays for bucket 50\n  bucket 49: 80%\n  bucket 49: 90%\n  Entering block accumulator loop for bucket 50:\n  bucket 49: 100%\n  Sorting block of length 74 for bucket 49\n  (Using difference cover)\n  bucket 50: 10%\n  bucket 50: 20%\n  bucket 50: 30%\n  bucket 50: 40%\n  bucket 50: 50%\n  bucket 50: 60%\n  bucket 50: 70%\n  bucket 50: 80%\n  Sorting block time: 00:00:00\nReturning block of 75 for bucket 49\n  bucket 50: 90%\n  bucket 50: 100%\n  Sorting block of length 108 for bucket 50\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 109 for bucket 50\nGetting block 51 of 60\n  Reserving size (126) for bucket 51\n  Calculating Z arrays for bucket 51\n  Entering block accumulator loop for bucket 51:\n  bucket 51: 10%\n  bucket 51: 20%\n  bucket 51: 30%\n  bucket 51: 40%\n  bucket 51: 50%\n  bucket 51: 60%\n  bucket 51: 70%\n  bucket 51: 80%\n  bucket 51: 90%\n  bucket 51: 100%\n  Sorting block of length 91 for bucket 51\n  (Using difference cover)\nGetting block 52 of 60\n  Reserving size (126) for bucket 52\nGetting block 53 of 60\n  Calculating Z arrays for bucket 52\n  Reserving size (126) for bucket 53\n  Calculating Z arrays for bucket 53\n  Entering block accumulator loop for bucket 52:\n  Entering block accumulator loop for bucket 53:\n  bucket 52: 10%\n  bucket 53: 10%\n  bucket 52: 20%\n  Sorting block time: 00:00:00\n  bucket 53: 20%\nReturning block of 92 for bucket 51\n  bucket 53: 30%\n  bucket 52: 30%\n  bucket 52: 40%\n  bucket 52: 50%\n  bucket 52: 60%\n  bucket 52: 70%\n  bucket 52: 80%\n  bucket 52: 90%\n  bucket 52: 100%\n  Sorting block of length 106 for bucket 52\n  (Using difference cover)\n  bucket 53: 40%\n  bucket 53: 50%\n  bucket 53: 60%\n  bucket 53: 70%\n  bucket 53: 80%\n  Sorting block time: 00:00:00\n  bucket 53: 90%\nReturning block of 107 for bucket 52\n  bucket 53: 100%\n  Sorting block of length 78 for bucket 53\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 79 for bucket 53\nGetting block 54 of 60\n  Reserving size (126) for bucket 54\nGetting block 55 of 60\n  Calculating Z arrays for bucket 54\n  Reserving size (126) for bucket 55\n  Entering block accumulator loop for bucket 54:\n  Calculating Z arrays for bucket 55\n  bucket 54: 10%\n  Entering block accumulator loop for bucket 55:\n  bucket 54: 20%\n  bucket 55: 10%\n  bucket 54: 30%\n  bucket 55: 20%\n  bucket 54: 40%\n  bucket 55: 30%\n  bucket 54: 50%\n  bucket 55: 40%\n  bucket 54: 60%\n  bucket 55: 50%\n  bucket 54: 70%\n  bucket 55: 60%\n  bucket 54: 80%\n  bucket 55: 70%\n  bucket 54: 90%\n  bucket 55: 80%\n  bucket 54: 100%\n  bucket 55: 90%\n  Sorting block of length 64 for bucket 54\n  bucket 55: 100%\n  Sorting block of length 79 for bucket 55\n  (Using difference cover)\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 65 for bucket 54\n  Sorting block time: 00:00:00\nReturning block of 80 for bucket 55\nGetting block 56 of 60\n  Reserving size (126) for bucket 56\n  Calculating Z arrays for bucket 56\nGetting block 57 of 60\n  Reserving size (126) for bucket 57\n  Calculating Z arrays for bucket 57\nGetting block 58 of 60\n  Reserving size (126) for bucket 58\n  Calculating Z arrays for bucket 58\n  Entering block accumulator loop for bucket 57:\n  bucket 57: 10%\n  Entering block accumulator loop for bucket 56:\n  bucket 57: 20%\n  bucket 56: 10%\n  bucket 57: 30%\n  bucket 56: 20%\n  bucket 57: 40%\n  bucket 56: 30%\n  bucket 56: 40%\n  bucket 56: 50%\n  bucket 57: 50%\n  bucket 56: 60%\n  bucket 57: 60%\n  bucket 56: 70%\n  bucket 57: 70%\n  bucket 56: 80%\n  bucket 57: 80%\n  bucket 56: 90%\n  bucket 57: 90%\n  bucket 56: 100%\n  bucket 57: 100%\n  Entering block accumulator loop for bucket 58:\n  Sorting block of length 85 for bucket 57\n  (Using difference cover)\n  bucket 58: 10%\n  bucket 58: 20%\n  bucket 58: 30%\n  bucket 58: 40%\n  bucket 58: 50%\n  bucket 58: 60%\n  Sorting block time: 00:00:00\n  bucket 58: 70%\nReturning block of 86 for bucket 57\n  bucket 58: 80%\n  bucket 58: 90%\n  bucket 58: 100%\n  Sorting block of length 113 for bucket 58\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 114 for bucket 58\n  Sorting block of length 55 for bucket 56\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 56 for bucket 56\nGetting block 59 of 60\n  Reserving size (126) for bucket 59\nGetting block 60 of 60\n  Reserving size (126) for bucket 60\n  Calculating Z arrays for bucket 59\n  Calculating Z arrays for bucket 60\n  Entering block accumulator loop for bucket 60:\n  Entering block accumulator loop for bucket 59:\n  bucket 60: 10%\n  bucket 60: 20%\n  bucket 59: 10%\n  bucket 60: 30%\n  bucket 60: 40%\n  bucket 59: 20%\n  bucket 60: 50%\n  bucket 59: 30%\n  bucket 60: 60%\n  bucket 60: 70%\n  bucket 59: 40%\n  bucket 60: 80%\n  bucket 59: 50%\n  bucket 60: 90%\n  bucket 60: 100%\n  Sorting block of length 101 for bucket 60\n  (Using difference cover)\n  bucket 59: 60%\n  bucket 59: 70%\n  bucket 59: 80%\n  bucket 59: 90%\n  bucket 59: 100%\n  Sorting block of length 109 for bucket 59\n  (Using difference cover)\n  Sorting block time: 00:00:00\nReturning block of 102 for bucket 60\n  Sorting block time: 00:00:00\nReturning block of 110 for bucket 59\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:16:04", "plugin": "core", "name": "end_epoch", "raw_value": "1684912564.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:16:03", "plugin": "core", "name": "start_epoch", "raw_value": "1684912563.0000000"}, {"title": "Memory Allocated (MB)", "value": "21474", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "21474.0000000"}, {"title": "Cores Allocated", "value": "8", "plugin": "core", "name": "galaxy_slots", "raw_value": "8.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo/0.46.0.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo", "tool_version": "0.46.0.1", "test_index": 0, "time_seconds": 58.125582695007324, "inputs": {"reference_transcriptome|reference": {"src": "hda", "id": "99aac793c6b41fa2"}, "reference_transcriptome|reference_transcriptome_source": "history", "single_paired|collection|fastq_umi|forward": {"src": "hda", "id": "2b28976d85e71311"}, "single_paired|collection|fastq_umi|reverse": {"src": "hda", "id": "1fc2c6ceb9890c7d"}, "single_paired|collection|fastq_umi|umi": "yes", "single_paired|collection|collection_selector": "datasets", "single_paired|single_paired_selector": "paired"}, "job": {"model_class": "Job", "id": "5dec70ce35125f0e", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:42:27.965235", "create_time": "2023-05-24T06:42:01.502930", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo/0.46.0.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-9t5br", "command_line": "ln -s '/galaxy/server/database/objects/c/c/d/dataset_ccd07789-cabd-4561-817e-7728316cb3b3.dat' reference.fa && kallisto index reference.fa -i reference.kallisto && kallisto pseudo -i 'reference.kallisto' --threads ${GALAXY_SLOTS:-1} -o .  --batch '/galaxy/server/database/jobs_directory/000/191/configs/tmpc898fqn6' --umi && if [ -f run_info.json ] ; then cat run_info.json ; fi && mkdir outputs && if [ -f matrix.ec ] ; then mv matrix.ec outputs/Matrix.ec ; fi && if [ -f matrix.tcc.mtx ] ; then mv matrix.tcc.mtx outputs/Matrix.tabular ; fi && if [ -f matrix.cells ] ; then mv matrix.cells outputs/Matrix.cells ; fi && if [ -f pseudoalignments.tsv ] ; then mv pseudoalignments.tsv outputs/Pseudoalignments.tabular ; fi && if [ -f pseudoalignments.ec ] ; then mv pseudoalignments.ec outputs/Pseudoalignments.ec ; fi", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "single_paired": "{\"__current_case__\": 1, \"collection\": {\"__current_case__\": 0, \"collection_selector\": \"datasets\", \"fastq_umi\": {\"__current_case__\": 0, \"forward\": {\"values\": [{\"id\": 224, \"src\": \"hda\"}]}, \"reverse\": {\"values\": [{\"id\": 228, \"src\": \"hda\"}]}, \"umi\": \"yes\"}}, \"single_paired_selector\": \"paired\"}", "reference_transcriptome": "{\"__current_case__\": 1, \"reference\": {\"values\": [{\"id\": 226, \"src\": \"hda\"}]}, \"reference_transcriptome_source\": \"history\"}"}, "inputs": {"reference": {"id": "99aac793c6b41fa2", "src": "hda", "uuid": "ccd07789-cabd-4561-817e-7728316cb3b3"}, "single_paired|collection|forward": {"id": "2b28976d85e71311", "src": "hda", "uuid": "c4e52df3-27ab-42c8-9bbb-0bc663037264"}, "single_paired|collection|forward1": {"id": "2b28976d85e71311", "src": "hda", "uuid": "c4e52df3-27ab-42c8-9bbb-0bc663037264"}, "single_paired|collection|reverse": {"id": "1fc2c6ceb9890c7d", "src": "hda", "uuid": "53f6dfc0-0145-4a9d-9e22-951aa5af9c0a"}, "single_paired|collection|reverse1": {"id": "1fc2c6ceb9890c7d", "src": "hda", "uuid": "53f6dfc0-0145-4a9d-9e22-951aa5af9c0a"}}, "outputs": {"sample": {"id": "f01db362a591db1d", "src": "hda", "uuid": "ce2f4930-8fb6-4542-aad3-74c1a558295e"}, "__new_primary_file_sample|Matrix.cells__": {"id": "9dc3b0855cd9f70e", "src": "hda", "uuid": "ad63f191-0a83-410a-9d99-83451ccc9c7d"}, "__new_primary_file_sample|Matrix.ec__": {"id": "31b8c060931dcc4e", "src": "hda", "uuid": "a8c165a1-9f1b-431b-8b48-bf0f7fb54564"}, "__new_primary_file_sample|Matrix.tabular__": {"id": "9eb2fdc5abf02e4f", "src": "hda", "uuid": "0181d30c-564e-4b00-ac8e-9157100adbe4"}}, "output_collections": {}, "tool_stdout": "{\n\t\"n_targets\": 1,\n\t\"n_bootstraps\": 0,\n\t\"n_processed\": 200,\n\t\"n_pseudoaligned\": 200,\n\t\"n_unique\": 200,\n\t\"p_pseudoaligned\": 100.0,\n\t\"p_unique\": 100.0,\n\t\"kallisto_version\": \"0.46.0\",\n\t\"index_version\": 10,\n\t\"start_time\": \"Wed May 24 06:42:17 2023\",\n\t\"call\": \"kallisto pseudo -i reference.kallisto --threads 1 -o . --batch /galaxy/server/database/jobs_directory/000/191/configs/tmpc898fqn6 --umi\"\n}\n", "tool_stderr": "\n[build] loading fasta file reference.fa\n[build] k-mer length: 31\n[build] counting k-mers ... done.\n[build] building target de Bruijn graph ...  done \n[build] creating equivalence classes ...  done\n[build] target de Bruijn graph has 1 contigs and contains 16269 k-mers \n\n\n[index] k-mer length: 31\n[index] number of targets: 1\n[index] number of k-mers: 16,269\n[index] number of equivalence classes: 1\n[quant] running in single-end mode\n[quant] will process file 1: /galaxy/server/database/objects/5/3/f/dataset_53f6dfc0-0145-4a9d-9e22-951aa5af9c0a.dat\n[quant] will process file 1: /galaxy/server/database/objects/5/3/f/dataset_53f6dfc0-0145-4a9d-9e22-951aa5af9c0a.dat\n[quant] finding pseudoalignments for all files ... done\n[quant] processed 200 reads, 200 reads pseudoaligned, 200 unique UMIs mapped\n\n", "job_stdout": "", "job_stderr": "", "stderr": "\n[build] loading fasta file reference.fa\n[build] k-mer length: 31\n[build] counting k-mers ... done.\n[build] building target de Bruijn graph ...  done \n[build] creating equivalence classes ...  done\n[build] target de Bruijn graph has 1 contigs and contains 16269 k-mers \n\n\n[index] k-mer length: 31\n[index] number of targets: 1\n[index] number of k-mers: 16,269\n[index] number of equivalence classes: 1\n[quant] running in single-end mode\n[quant] will process file 1: /galaxy/server/database/objects/5/3/f/dataset_53f6dfc0-0145-4a9d-9e22-951aa5af9c0a.dat\n[quant] will process file 1: /galaxy/server/database/objects/5/3/f/dataset_53f6dfc0-0145-4a9d-9e22-951aa5af9c0a.dat\n[quant] finding pseudoalignments for all files ... done\n[quant] processed 200 reads, 200 reads pseudoaligned, 200 unique UMIs mapped\n\n", "stdout": "{\n\t\"n_targets\": 1,\n\t\"n_bootstraps\": 0,\n\t\"n_processed\": 200,\n\t\"n_pseudoaligned\": 200,\n\t\"n_unique\": 200,\n\t\"p_pseudoaligned\": 100.0,\n\t\"p_unique\": 100.0,\n\t\"kallisto_version\": \"0.46.0\",\n\t\"index_version\": 10,\n\t\"start_time\": \"Wed May 24 06:42:17 2023\",\n\t\"call\": \"kallisto pseudo -i reference.kallisto --threads 1 -o . --batch /galaxy/server/database/jobs_directory/000/191/configs/tmpc898fqn6 --umi\"\n}\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 06:42:17", "plugin": "core", "name": "end_epoch", "raw_value": "1684910537.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:42:17", "plugin": "core", "name": "start_epoch", "raw_value": "1684910537.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo/0.46.0.1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo", "tool_version": "0.46.0.1", "test_index": 1, "time_seconds": 42.61473274230957, "inputs": {"reference_transcriptome|reference": {"src": "hda", "id": "99aac793c6b41fa2"}, "reference_transcriptome|reference_transcriptome_source": "history", "single_paired|collection|reads": {"src": "hdca", "id": "617a261f7d6a2b3a"}, "single_paired|collection|collection_selector": "collection", "single_paired|single_paired_selector": "paired"}, "job": {"model_class": "Job", "id": "8da4c9e55e8cb4b1", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:42:29.235591", "create_time": "2023-05-24T06:42:12.498432", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo/0.46.0.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-6wl78", "command_line": "ln -s '/galaxy/server/database/objects/c/c/d/dataset_ccd07789-cabd-4561-817e-7728316cb3b3.dat' reference.fa && kallisto index reference.fa -i reference.kallisto && kallisto pseudo -i 'reference.kallisto' --threads ${GALAXY_SLOTS:-1} -o .  '/galaxy/server/database/objects/2/b/3/dataset_2b3abfbc-2388-4b5f-be1d-5143c47bfb4d.dat' '/galaxy/server/database/objects/5/3/f/dataset_53f6dfc0-0145-4a9d-9e22-951aa5af9c0a.dat' && if [ -f run_info.json ] ; then cat run_info.json ; fi && mkdir outputs && if [ -f matrix.ec ] ; then mv matrix.ec outputs/Matrix.ec ; fi && if [ -f matrix.tcc.mtx ] ; then mv matrix.tcc.mtx outputs/Matrix.tabular ; fi && if [ -f matrix.cells ] ; then mv matrix.cells outputs/Matrix.cells ; fi && if [ -f pseudoalignments.tsv ] ; then mv pseudoalignments.tsv outputs/Pseudoalignments.tabular ; fi && if [ -f pseudoalignments.ec ] ; then mv pseudoalignments.ec outputs/Pseudoalignments.ec ; fi", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "single_paired": "{\"__current_case__\": 1, \"collection\": {\"__current_case__\": 1, \"collection_selector\": \"collection\", \"reads\": {\"values\": [{\"id\": 1, \"src\": \"hdca\"}]}}, \"single_paired_selector\": \"paired\"}", "reference_transcriptome": "{\"__current_case__\": 1, \"reference\": {\"values\": [{\"id\": 226, \"src\": \"hda\"}]}, \"reference_transcriptome_source\": \"history\"}"}, "inputs": {"reference": {"id": "99aac793c6b41fa2", "src": "hda", "uuid": "ccd07789-cabd-4561-817e-7728316cb3b3"}, "single_paired|reads1": {"id": "fe7309aa4b8cbb30", "src": "hda", "uuid": "2b3abfbc-2388-4b5f-be1d-5143c47bfb4d"}, "single_paired|reads2": {"id": "1fc2c6ceb9890c7d", "src": "hda", "uuid": "53f6dfc0-0145-4a9d-9e22-951aa5af9c0a"}}, "outputs": {"sample": {"id": "e613ad3b158b225d", "src": "hda", "uuid": "f6bb9770-12b5-47ec-91d8-5cff7bf9ff21"}, "__new_primary_file_sample|Matrix.cells__": {"id": "4e1574bf4d9e08e8", "src": "hda", "uuid": "0e6df634-c6ea-47a6-89a6-b37b1b093e37"}, "__new_primary_file_sample|Matrix.ec__": {"id": "26701e42c5f06277", "src": "hda", "uuid": "0d0bf350-b86a-4f6f-92f5-34af17840001"}, "__new_primary_file_sample|Matrix.tabular__": {"id": "4a22637d0b7326e5", "src": "hda", "uuid": "19965484-bd2b-4d74-99c6-a9f461c74fe4"}, "__new_primary_file_sample|Pseudoalignments.ec__": {"id": "d277fbe71a2c6fd4", "src": "hda", "uuid": "edadcb2a-a1ef-4939-909d-7e584c95ffa6"}, "__new_primary_file_sample|Pseudoalignments.tabular__": {"id": "9c527c7cd02cff76", "src": "hda", "uuid": "b4e7e665-3c38-468f-b316-1371a492a57e"}}, "output_collections": {}, "tool_stdout": "{\n\t\"n_targets\": 1,\n\t\"n_bootstraps\": 0,\n\t\"n_processed\": 100,\n\t\"n_pseudoaligned\": 0,\n\t\"n_unique\": 0,\n\t\"p_pseudoaligned\": 0.0,\n\t\"p_unique\": 0.0,\n\t\"kallisto_version\": \"0.46.0\",\n\t\"index_version\": 10,\n\t\"start_time\": \"Wed May 24 06:42:17 2023\",\n\t\"call\": \"kallisto pseudo -i reference.kallisto --threads 1 -o . /galaxy/server/database/objects/2/b/3/dataset_2b3abfbc-2388-4b5f-be1d-5143c47bfb4d.dat /galaxy/server/database/objects/5/3/f/dataset_53f6dfc0-0145-4a9d-9e22-951aa5af9c0a.dat\"\n}\n", "tool_stderr": "\n[build] loading fasta file reference.fa\n[build] k-mer length: 31\n[build] counting k-mers ... done.\n[build] building target de Bruijn graph ...  done \n[build] creating equivalence classes ...  done\n[build] target de Bruijn graph has 1 contigs and contains 16269 k-mers \n\n\n[quant] fragment length distribution will be estimated from the data\n[index] k-mer length: 31\n[index] number of targets: 1\n[index] number of k-mers: 16,269\n[index] number of equivalence classes: 1\n[quant] running in paired-end mode\n[quant] will process pair 1: /galaxy/server/database/objects/2/b/3/dataset_2b3abfbc-2388-4b5f-be1d-5143c47bfb4d.dat\n                             /galaxy/server/database/objects/5/3/f/dataset_53f6dfc0-0145-4a9d-9e22-951aa5af9c0a.dat\n[quant] finding pseudoalignments for the reads ... done\n[quant] processed 100 reads, 100 reads pseudoaligned\n\n", "job_stdout": "", "job_stderr": "", "stderr": "\n[build] loading fasta file reference.fa\n[build] k-mer length: 31\n[build] counting k-mers ... done.\n[build] building target de Bruijn graph ...  done \n[build] creating equivalence classes ...  done\n[build] target de Bruijn graph has 1 contigs and contains 16269 k-mers \n\n\n[quant] fragment length distribution will be estimated from the data\n[index] k-mer length: 31\n[index] number of targets: 1\n[index] number of k-mers: 16,269\n[index] number of equivalence classes: 1\n[quant] running in paired-end mode\n[quant] will process pair 1: /galaxy/server/database/objects/2/b/3/dataset_2b3abfbc-2388-4b5f-be1d-5143c47bfb4d.dat\n                             /galaxy/server/database/objects/5/3/f/dataset_53f6dfc0-0145-4a9d-9e22-951aa5af9c0a.dat\n[quant] finding pseudoalignments for the reads ... done\n[quant] processed 100 reads, 100 reads pseudoaligned\n\n", "stdout": "{\n\t\"n_targets\": 1,\n\t\"n_bootstraps\": 0,\n\t\"n_processed\": 100,\n\t\"n_pseudoaligned\": 0,\n\t\"n_unique\": 0,\n\t\"p_pseudoaligned\": 0.0,\n\t\"p_unique\": 0.0,\n\t\"kallisto_version\": \"0.46.0\",\n\t\"index_version\": 10,\n\t\"start_time\": \"Wed May 24 06:42:17 2023\",\n\t\"call\": \"kallisto pseudo -i reference.kallisto --threads 1 -o . /galaxy/server/database/objects/2/b/3/dataset_2b3abfbc-2388-4b5f-be1d-5143c47bfb4d.dat /galaxy/server/database/objects/5/3/f/dataset_53f6dfc0-0145-4a9d-9e22-951aa5af9c0a.dat\"\n}\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:42:18", "plugin": "core", "name": "end_epoch", "raw_value": "1684910538.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:42:17", "plugin": "core", "name": "start_epoch", "raw_value": "1684910537.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo/0.46.0.1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo", "tool_version": "0.46.0.1", "test_index": 2, "time_seconds": 41.75084853172302, "inputs": {"reference_transcriptome|reference": {"src": "hda", "id": "7740bf7fed402d62"}, "reference_transcriptome|reference_transcriptome_source": "history", "single_paired|reads": {"src": "hda", "id": "2102257e6e5b17bd"}, "single_paired|single_paired_selector": "single"}, "job": {"model_class": "Job", "id": "d9c6cf2bdefa1f3c", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:43:10.043887", "create_time": "2023-05-24T06:42:53.537893", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo/0.46.0.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-74sf4", "command_line": "ln -s '/galaxy/server/database/objects/a/1/6/dataset_a16fbe04-e913-4442-a9f1-56a61cc35e0a.dat' reference.fa && kallisto index reference.fa -i reference.kallisto && kallisto pseudo -i 'reference.kallisto' --threads ${GALAXY_SLOTS:-1} -o .  --single --fragment-length 200 --sd 20 '/galaxy/server/database/objects/e/e/c/dataset_eec45202-ed4f-45f6-b4c7-976fe73038cf.dat' && if [ -f run_info.json ] ; then cat run_info.json ; fi && mkdir outputs && if [ -f matrix.ec ] ; then mv matrix.ec outputs/Matrix.ec ; fi && if [ -f matrix.tcc.mtx ] ; then mv matrix.tcc.mtx outputs/Matrix.tabular ; fi && if [ -f matrix.cells ] ; then mv matrix.cells outputs/Matrix.cells ; fi && if [ -f pseudoalignments.tsv ] ; then mv pseudoalignments.tsv outputs/Pseudoalignments.tabular ; fi && if [ -f pseudoalignments.ec ] ; then mv pseudoalignments.ec outputs/Pseudoalignments.ec ; fi", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "single_paired": "{\"__current_case__\": 0, \"fragment_length\": \"200\", \"reads\": {\"values\": [{\"id\": 240, \"src\": \"hda\"}]}, \"sd\": \"20\", \"single_paired_selector\": \"single\"}", "reference_transcriptome": "{\"__current_case__\": 1, \"reference\": {\"values\": [{\"id\": 239, \"src\": \"hda\"}]}, \"reference_transcriptome_source\": \"history\"}"}, "inputs": {"reference": {"id": "7740bf7fed402d62", "src": "hda", "uuid": "a16fbe04-e913-4442-a9f1-56a61cc35e0a"}, "reads": {"id": "2102257e6e5b17bd", "src": "hda", "uuid": "eec45202-ed4f-45f6-b4c7-976fe73038cf"}, "reads1": {"id": "2102257e6e5b17bd", "src": "hda", "uuid": "eec45202-ed4f-45f6-b4c7-976fe73038cf"}}, "outputs": {"sample": {"id": "fef8b516686346e7", "src": "hda", "uuid": "12fcdc84-d30c-4b9a-9e18-fcb04c1c96c2"}, "__new_primary_file_sample|Matrix.cells__": {"id": "13baea5a4a077fea", "src": "hda", "uuid": "922187c7-1938-4333-9a40-3e31d2c7d3e7"}, "__new_primary_file_sample|Matrix.ec__": {"id": "a319046916fb16cf", "src": "hda", "uuid": "3873d8b0-5941-4779-909e-f4e8a3b98d8d"}, "__new_primary_file_sample|Matrix.tabular__": {"id": "0b5ed036d7febe75", "src": "hda", "uuid": "54fa907c-ab76-4b5a-8d97-9921539d9949"}, "__new_primary_file_sample|Pseudoalignments.ec__": {"id": "abe65f43378a6335", "src": "hda", "uuid": "14f8035d-3768-49e2-ad4b-0658df933e6d"}, "__new_primary_file_sample|Pseudoalignments.tabular__": {"id": "2379261f53dd1a4d", "src": "hda", "uuid": "f4dfdd6e-640a-46af-8c51-56136d77b79e"}}, "output_collections": {}, "tool_stdout": "{\n\t\"n_targets\": 1,\n\t\"n_bootstraps\": 0,\n\t\"n_processed\": 100,\n\t\"n_pseudoaligned\": 0,\n\t\"n_unique\": 0,\n\t\"p_pseudoaligned\": 0.0,\n\t\"p_unique\": 0.0,\n\t\"kallisto_version\": \"0.46.0\",\n\t\"index_version\": 10,\n\t\"start_time\": \"Wed May 24 06:42:57 2023\",\n\t\"call\": \"kallisto pseudo -i reference.kallisto --threads 1 -o . --single --fragment-length 200 --sd 20 /galaxy/server/database/objects/e/e/c/dataset_eec45202-ed4f-45f6-b4c7-976fe73038cf.dat\"\n}\n", "tool_stderr": "\n[build] loading fasta file reference.fa\n[build] k-mer length: 31\n[build] counting k-mers ... done.\n[build] building target de Bruijn graph ...  done \n[build] creating equivalence classes ...  done\n[build] target de Bruijn graph has 1 contigs and contains 16269 k-mers \n\n\n[quant] fragment length distribution is truncated gaussian with mean = 200, sd = 20\n[index] k-mer length: 31\n[index] number of targets: 1\n[index] number of k-mers: 16,269\n[index] number of equivalence classes: 1\n[quant] running in single-end mode\n[quant] will process file 1: /galaxy/server/database/objects/e/e/c/dataset_eec45202-ed4f-45f6-b4c7-976fe73038cf.dat\n[quant] finding pseudoalignments for the reads ... done\n[quant] processed 100 reads, 100 reads pseudoaligned\n\n", "job_stdout": "", "job_stderr": "", "stderr": "\n[build] loading fasta file reference.fa\n[build] k-mer length: 31\n[build] counting k-mers ... done.\n[build] building target de Bruijn graph ...  done \n[build] creating equivalence classes ...  done\n[build] target de Bruijn graph has 1 contigs and contains 16269 k-mers \n\n\n[quant] fragment length distribution is truncated gaussian with mean = 200, sd = 20\n[index] k-mer length: 31\n[index] number of targets: 1\n[index] number of k-mers: 16,269\n[index] number of equivalence classes: 1\n[quant] running in single-end mode\n[quant] will process file 1: /galaxy/server/database/objects/e/e/c/dataset_eec45202-ed4f-45f6-b4c7-976fe73038cf.dat\n[quant] finding pseudoalignments for the reads ... done\n[quant] processed 100 reads, 100 reads pseudoaligned\n\n", "stdout": "{\n\t\"n_targets\": 1,\n\t\"n_bootstraps\": 0,\n\t\"n_processed\": 100,\n\t\"n_pseudoaligned\": 0,\n\t\"n_unique\": 0,\n\t\"p_pseudoaligned\": 0.0,\n\t\"p_unique\": 0.0,\n\t\"kallisto_version\": \"0.46.0\",\n\t\"index_version\": 10,\n\t\"start_time\": \"Wed May 24 06:42:57 2023\",\n\t\"call\": \"kallisto pseudo -i reference.kallisto --threads 1 -o . --single --fragment-length 200 --sd 20 /galaxy/server/database/objects/e/e/c/dataset_eec45202-ed4f-45f6-b4c7-976fe73038cf.dat\"\n}\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:42:57", "plugin": "core", "name": "end_epoch", "raw_value": "1684910577.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:42:56", "plugin": "core", "name": "start_epoch", "raw_value": "1684910576.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo/0.46.0.1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo", "tool_version": "0.46.0.1", "test_index": 3, "time_seconds": 46.92772030830383, "inputs": {"reference_transcriptome|reference": {"src": "hda", "id": "c78e9d4eaab8eff3"}, "reference_transcriptome|reference_transcriptome_source": "history", "single_paired|collection|fastq_umi|forward": {"src": "hda", "id": "0746f7d13f3055a0"}, "single_paired|collection|fastq_umi|reverse": {"src": "hda", "id": "700f29f04f548851"}, "single_paired|collection|fastq_umi|umi": "no", "single_paired|collection|collection_selector": "datasets", "single_paired|single_paired_selector": "paired"}, "job": {"model_class": "Job", "id": "f6980eb0d7e96bd1", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:43:16.165903", "create_time": "2023-05-24T06:43:00.628933", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo/0.46.0.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-xx8zh", "command_line": "ln -s '/galaxy/server/database/objects/3/6/5/dataset_3650b2e6-075c-4885-97a0-b69f3782fa91.dat' reference.fa && kallisto index reference.fa -i reference.kallisto && kallisto pseudo -i 'reference.kallisto' --threads ${GALAXY_SLOTS:-1} -o .  '/galaxy/server/database/objects/8/e/b/dataset_8eb9abeb-1ae0-41c2-a877-cc4308afcfd3.dat' '/galaxy/server/database/objects/b/d/a/dataset_bda8539c-f795-4474-98ce-5d51f9e7cf37.dat' && if [ -f run_info.json ] ; then cat run_info.json ; fi && mkdir outputs && if [ -f matrix.ec ] ; then mv matrix.ec outputs/Matrix.ec ; fi && if [ -f matrix.tcc.mtx ] ; then mv matrix.tcc.mtx outputs/Matrix.tabular ; fi && if [ -f matrix.cells ] ; then mv matrix.cells outputs/Matrix.cells ; fi && if [ -f pseudoalignments.tsv ] ; then mv pseudoalignments.tsv outputs/Pseudoalignments.tabular ; fi && if [ -f pseudoalignments.ec ] ; then mv pseudoalignments.ec outputs/Pseudoalignments.ec ; fi", "traceback": null, "params": {"__input_ext": "\"fasta\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "single_paired": "{\"__current_case__\": 1, \"collection\": {\"__current_case__\": 0, \"collection_selector\": \"datasets\", \"fastq_umi\": {\"__current_case__\": 1, \"forward\": {\"values\": [{\"id\": 242, \"src\": \"hda\"}]}, \"reverse\": {\"values\": [{\"id\": 243, \"src\": \"hda\"}]}, \"umi\": \"no\"}}, \"single_paired_selector\": \"paired\"}", "reference_transcriptome": "{\"__current_case__\": 1, \"reference\": {\"values\": [{\"id\": 241, \"src\": \"hda\"}]}, \"reference_transcriptome_source\": \"history\"}"}, "inputs": {"reference": {"id": "c78e9d4eaab8eff3", "src": "hda", "uuid": "3650b2e6-075c-4885-97a0-b69f3782fa91"}, "single_paired|collection|forward": {"id": "0746f7d13f3055a0", "src": "hda", "uuid": "8eb9abeb-1ae0-41c2-a877-cc4308afcfd3"}, "single_paired|collection|forward1": {"id": "0746f7d13f3055a0", "src": "hda", "uuid": "8eb9abeb-1ae0-41c2-a877-cc4308afcfd3"}, "single_paired|collection|reverse": {"id": "700f29f04f548851", "src": "hda", "uuid": "bda8539c-f795-4474-98ce-5d51f9e7cf37"}, "single_paired|collection|reverse1": {"id": "700f29f04f548851", "src": "hda", "uuid": "bda8539c-f795-4474-98ce-5d51f9e7cf37"}}, "outputs": {"sample": {"id": "3fa5cdeb46750bdc", "src": "hda", "uuid": "85d68b53-502e-4436-b56b-c59fd66a0e41"}, "__new_primary_file_sample|Matrix.cells__": {"id": "6c88b96f41e7262d", "src": "hda", "uuid": "e70fc0fd-2194-4fdb-b640-2d30b48f0514"}, "__new_primary_file_sample|Matrix.ec__": {"id": "bfae4e783d6ebbf7", "src": "hda", "uuid": "e14c9609-07ab-4fff-8f66-7e9f5f88ee7a"}, "__new_primary_file_sample|Matrix.tabular__": {"id": "6b20950f96f8f8c4", "src": "hda", "uuid": "2bd11cf9-d889-452d-9ed9-cead17ae6ce9"}, "__new_primary_file_sample|Pseudoalignments.ec__": {"id": "2e7b42b8bd23aba4", "src": "hda", "uuid": "b61dd73f-1fce-43de-af86-99f22e23f161"}, "__new_primary_file_sample|Pseudoalignments.tabular__": {"id": "83751d166f07c266", "src": "hda", "uuid": "b80f9d6c-ba43-4982-ab61-b3e7356fedfd"}}, "output_collections": {}, "tool_stdout": "{\n\t\"n_targets\": 1,\n\t\"n_bootstraps\": 0,\n\t\"n_processed\": 200,\n\t\"n_pseudoaligned\": 0,\n\t\"n_unique\": 0,\n\t\"p_pseudoaligned\": 0.0,\n\t\"p_unique\": 0.0,\n\t\"kallisto_version\": \"0.46.0\",\n\t\"index_version\": 10,\n\t\"start_time\": \"Wed May 24 06:43:03 2023\",\n\t\"call\": \"kallisto pseudo -i reference.kallisto --threads 1 -o . /galaxy/server/database/objects/8/e/b/dataset_8eb9abeb-1ae0-41c2-a877-cc4308afcfd3.dat /galaxy/server/database/objects/b/d/a/dataset_bda8539c-f795-4474-98ce-5d51f9e7cf37.dat\"\n}\n", "tool_stderr": "\n[build] loading fasta file reference.fa\n[build] k-mer length: 31\n[build] counting k-mers ... done.\n[build] building target de Bruijn graph ...  done \n[build] creating equivalence classes ...  done\n[build] target de Bruijn graph has 15 contigs and contains 16670 k-mers \n\n\n[quant] fragment length distribution will be estimated from the data\n[index] k-mer length: 31\n[index] number of targets: 1\n[index] number of k-mers: 16,670\n[index] number of equivalence classes: 1\n[quant] running in paired-end mode\n[quant] will process pair 1: /galaxy/server/database/objects/8/e/b/dataset_8eb9abeb-1ae0-41c2-a877-cc4308afcfd3.dat\n                             /galaxy/server/database/objects/b/d/a/dataset_bda8539c-f795-4474-98ce-5d51f9e7cf37.dat\n[quant] finding pseudoalignments for the reads ... done\n[quant] processed 200 reads, 200 reads pseudoaligned\n\n", "job_stdout": "", "job_stderr": "", "stderr": "\n[build] loading fasta file reference.fa\n[build] k-mer length: 31\n[build] counting k-mers ... done.\n[build] building target de Bruijn graph ...  done \n[build] creating equivalence classes ...  done\n[build] target de Bruijn graph has 15 contigs and contains 16670 k-mers \n\n\n[quant] fragment length distribution will be estimated from the data\n[index] k-mer length: 31\n[index] number of targets: 1\n[index] number of k-mers: 16,670\n[index] number of equivalence classes: 1\n[quant] running in paired-end mode\n[quant] will process pair 1: /galaxy/server/database/objects/8/e/b/dataset_8eb9abeb-1ae0-41c2-a877-cc4308afcfd3.dat\n                             /galaxy/server/database/objects/b/d/a/dataset_bda8539c-f795-4474-98ce-5d51f9e7cf37.dat\n[quant] finding pseudoalignments for the reads ... done\n[quant] processed 200 reads, 200 reads pseudoaligned\n\n", "stdout": "{\n\t\"n_targets\": 1,\n\t\"n_bootstraps\": 0,\n\t\"n_processed\": 200,\n\t\"n_pseudoaligned\": 0,\n\t\"n_unique\": 0,\n\t\"p_pseudoaligned\": 0.0,\n\t\"p_unique\": 0.0,\n\t\"kallisto_version\": \"0.46.0\",\n\t\"index_version\": 10,\n\t\"start_time\": \"Wed May 24 06:43:03 2023\",\n\t\"call\": \"kallisto pseudo -i reference.kallisto --threads 1 -o . /galaxy/server/database/objects/8/e/b/dataset_8eb9abeb-1ae0-41c2-a877-cc4308afcfd3.dat /galaxy/server/database/objects/b/d/a/dataset_bda8539c-f795-4474-98ce-5d51f9e7cf37.dat\"\n}\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:43:03", "plugin": "core", "name": "end_epoch", "raw_value": "1684910583.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:43:02", "plugin": "core", "name": "start_epoch", "raw_value": "1684910582.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo/0.46.0.1-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/kallisto_pseudo/kallisto_pseudo", "tool_version": "0.46.0.1", "test_index": 4, "time_seconds": 31.16152262687683, "inputs": {"single_paired|collection|fastq_umi|forward": {"src": "hda", "id": "684a7552721c6d1d"}, "single_paired|collection|fastq_umi|reverse": {"src": "hda", "id": "ee71fc980aa28546"}, "single_paired|collection|fastq_umi|umi": "yes", "single_paired|collection|collection_selector": "datasets", "single_paired|single_paired_selector": "paired"}, "execution_problem": "parameter 'index': an invalid option (None) was selected, please verify", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.38.3+galaxy3", "test_index": 0, "time_seconds": 67.55007338523865, "inputs": {"input|counts": {"src": "hda", "id": "35ec39d86a0aa8b5"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "cont|rep_contrast_0|contrast": "Mut-WT", "cont|rep_contrast_1|contrast": "WT-Mut", "cont|cfile": "no", "adv|topgenes": "6", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "9bb04528c4b6d069", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:49:36.075574", "create_time": "2023-05-24T06:48:50.425549", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-lmqcj", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/0921444c832d/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/4/6/5/dataset_4654d9fd-b645-490d-9e9f-ba983201f421.dat' -o '/galaxy/server/database/jobs_directory/000/266/working/dataset_4654d9fd-b645-490d-9e9f-ba983201f421_files'  -m '/galaxy/server/database/objects/c/f/c/dataset_cfce2d58-e263-439b-b65d-84baa439c83f.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'   -D 'Mut-WT,WT-Mut'   -P i       -l '0.0' -p '0.05' -d 'BH' -G '6'   -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/266/working/dataset_4654d9fd-b645-490d-9e9f-ba983201f421_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/266/working/dataset_4654d9fd-b645-490d-9e9f-ba983201f421_files'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": false, \"libinfo\": false, \"normCounts\": false, \"plots\": \"i\", \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "cont": "{\"__current_case__\": 1, \"cfile\": \"no\", \"rep_contrast\": [{\"__index__\": 0, \"contrast\": \"Mut-WT\"}, {\"__index__\": 1, \"contrast\": \"WT-Mut\"}]}", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 324, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}", "deMethod": "{\"__current_case__\": 0, \"de_select\": \"voom\", \"weightOption\": false}"}, "inputs": {"counts": {"id": "35ec39d86a0aa8b5", "src": "hda", "uuid": "cfce2d58-e263-439b-b65d-84baa439c83f"}}, "outputs": {"__new_primary_file_outTables|limma-voom_WT-Mut__": {"id": "07e52670701dd009", "src": "hda", "uuid": "808a1a35-2bbf-4496-ad23-a35d4b9bfe2c"}, "__new_primary_file_outTables|limma-voom_Mut-WT__": {"id": "8f9b7cfef2c83fc7", "src": "hda", "uuid": "2d18e8a9-e05d-4880-b6d8-8c3bcac81ac6"}, "outReport": {"id": "cb6d058b3b2efc64", "src": "hda", "uuid": "4654d9fd-b645-490d-9e9f-ba983201f421"}}, "output_collections": {"outTables": {"id": "ddabecd1cf92c1d4", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "7 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "7.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:49:20", "plugin": "core", "name": "end_epoch", "raw_value": "1684910960.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:49:13", "plugin": "core", "name": "start_epoch", "raw_value": "1684910953.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.38.3+galaxy3", "test_index": 1, "time_seconds": 63.196736097335815, "inputs": {"input|counts": {"src": "hda", "id": "35ec39d86a0aa8b5"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "anno|geneanno": {"src": "hda", "id": "f9ec1b004adc3269"}, "anno|annoOpt": "yes", "cont|rep_contrast_0|contrast": "Mut-WT", "cont|cfile": "no", "adv|topgenes": "6", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "941b46dddd10a63d", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:49:36.813944", "create_time": "2023-05-24T06:48:57.427820", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-s29jn", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/0921444c832d/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/b/9/2/dataset_b92e999e-343c-40ea-8fa0-f7110a5726d2.dat' -o '/galaxy/server/database/jobs_directory/000/267/working/dataset_b92e999e-343c-40ea-8fa0-f7110a5726d2_files'  -m '/galaxy/server/database/objects/c/f/c/dataset_cfce2d58-e263-439b-b65d-84baa439c83f.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'  -a '/galaxy/server/database/objects/9/1/e/dataset_91e6eda0-1e0d-4642-9ca9-56b833815965.dat'  -D 'Mut-WT'   -P i       -l '0.0' -p '0.05' -d 'BH' -G '6'   -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/267/working/dataset_b92e999e-343c-40ea-8fa0-f7110a5726d2_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/267/working/dataset_b92e999e-343c-40ea-8fa0-f7110a5726d2_files'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": false, \"libinfo\": false, \"normCounts\": false, \"plots\": \"i\", \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "cont": "{\"__current_case__\": 1, \"cfile\": \"no\", \"rep_contrast\": [{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]}", "anno": "{\"__current_case__\": 0, \"annoOpt\": \"yes\", \"geneanno\": {\"values\": [{\"id\": 325, \"src\": \"hda\"}]}}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 324, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}", "deMethod": "{\"__current_case__\": 0, \"de_select\": \"voom\", \"weightOption\": false}"}, "inputs": {"counts": {"id": "35ec39d86a0aa8b5", "src": "hda", "uuid": "cfce2d58-e263-439b-b65d-84baa439c83f"}, "geneanno": {"id": "f9ec1b004adc3269", "src": "hda", "uuid": "91e6eda0-1e0d-4642-9ca9-56b833815965"}}, "outputs": {"__new_primary_file_outTables|limma-voom_Mut-WT__": {"id": "c4903bc56f08adbc", "src": "hda", "uuid": "180b04f3-c6a7-4e80-9dcf-e92146b9f93f"}, "outReport": {"id": "65846313d89c8a09", "src": "hda", "uuid": "b92e999e-343c-40ea-8fa0-f7110a5726d2"}}, "output_collections": {"outTables": {"id": "95ccbd7a3e941ce6", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "8 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "8.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:49:21", "plugin": "core", "name": "end_epoch", "raw_value": "1684910961.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:49:13", "plugin": "core", "name": "start_epoch", "raw_value": "1684910953.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3-10", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.38.3+galaxy3", "test_index": 10, "time_seconds": 47.61337232589722, "inputs": {"input|counts": {"src": "hda", "id": "f30e45a8ffcfd241"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "cont|cinfo": {"src": "hda", "id": "60d067a8dc2b70a0"}, "cont|cfile": "yes", "adv|topgenes": "6", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "21bcfa4a2c1ae0d4", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:53:18.054898", "create_time": "2023-05-24T06:52:57.900450", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-lbs4q", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/0921444c832d/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/f/9/9/dataset_f99358fb-36a3-47f8-8b8b-6e73bea1f499.dat' -o '/galaxy/server/database/jobs_directory/000/300/working/dataset_f99358fb-36a3-47f8-8b8b-6e73bea1f499_files'  -m '/galaxy/server/database/objects/5/a/1/dataset_5a19bf02-7ee4-4ef4-959a-03ae56b71922.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'   -C '/galaxy/server/database/objects/2/d/8/dataset_2d8d1609-fe54-453f-a2d6-a4c2dc316eb0.dat'   -P i       -l '0.0' -p '0.05' -d 'BH' -G '6'   -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/300/working/dataset_f99358fb-36a3-47f8-8b8b-6e73bea1f499_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/300/working/dataset_f99358fb-36a3-47f8-8b8b-6e73bea1f499_files'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": false, \"libinfo\": false, \"normCounts\": false, \"plots\": \"i\", \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "cont": "{\"__current_case__\": 0, \"cfile\": \"yes\", \"cinfo\": {\"values\": [{\"id\": 372, \"src\": \"hda\"}]}}", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 371, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}", "deMethod": "{\"__current_case__\": 0, \"de_select\": \"voom\", \"weightOption\": false}"}, "inputs": {"counts": {"id": "f30e45a8ffcfd241", "src": "hda", "uuid": "5a19bf02-7ee4-4ef4-959a-03ae56b71922"}, "cinfo": {"id": "60d067a8dc2b70a0", "src": "hda", "uuid": "2d8d1609-fe54-453f-a2d6-a4c2dc316eb0"}}, "outputs": {"__new_primary_file_outTables|limma-voom_WT-Mut__": {"id": "d6701d4040625d86", "src": "hda", "uuid": "0d933d59-6301-4450-a047-d989f57ab0d7"}, "__new_primary_file_outTables|limma-voom_Mut-WT__": {"id": "433514a59b2503cd", "src": "hda", "uuid": "4a2062ee-aa4e-4250-9810-a9137b468fda"}, "__new_primary_file_outTables|limma-voom_Mut-WT-WT-Mut__": {"id": "6da4aeccb0cdbc00", "src": "hda", "uuid": "ffc9416d-e2b1-4de5-8d35-d6b601311b36"}, "outReport": {"id": "ac9c2f3051c60896", "src": "hda", "uuid": "f99358fb-36a3-47f8-8b8b-6e73bea1f499"}}, "output_collections": {"outTables": {"id": "105b20d9c37e0641", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "8 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "8.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:53:07", "plugin": "core", "name": "end_epoch", "raw_value": "1684911187.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:52:59", "plugin": "core", "name": "start_epoch", "raw_value": "1684911179.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.38.3+galaxy3", "test_index": 2, "time_seconds": 39.51405358314514, "inputs": {"input|counts": {"src": "hda", "id": "b8028a1375c00fe1"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "cont|rep_contrast_0|contrast": "Mut-WT", "cont|cfile": "no", "out|rscript": true, "out|rdaOption": true, "adv|topgenes": "6", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "148be0224d0cc9f0", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:50:15.899295", "create_time": "2023-05-24T06:49:54.825269", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-8gfg4", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/0921444c832d/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/f/5/8/dataset_f586c7c0-c493-4beb-a881-7951b844f737.dat' -o '/galaxy/server/database/jobs_directory/000/271/working/dataset_f586c7c0-c493-4beb-a881-7951b844f737_files'  -m '/galaxy/server/database/objects/5/0/5/dataset_505e6012-b91b-4282-af4c-15b637e24c7a.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'   -D 'Mut-WT'   -P i     -r   -l '0.0' -p '0.05' -d 'BH' -G '6'   -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/271/working/dataset_f586c7c0-c493-4beb-a881-7951b844f737_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/271/working/dataset_f586c7c0-c493-4beb-a881-7951b844f737_files'   && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/0921444c832d/limma_voom/limma_voom.R' '/galaxy/server/database/objects/5/b/f/dataset_5bf27e1d-431c-4395-b169-4bc93a892d54.dat'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": false, \"libinfo\": false, \"normCounts\": false, \"plots\": \"i\", \"rdaOption\": true, \"rscript\": true}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "cont": "{\"__current_case__\": 1, \"cfile\": \"no\", \"rep_contrast\": [{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]}", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 331, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}", "deMethod": "{\"__current_case__\": 0, \"de_select\": \"voom\", \"weightOption\": false}"}, "inputs": {"counts": {"id": "b8028a1375c00fe1", "src": "hda", "uuid": "505e6012-b91b-4282-af4c-15b637e24c7a"}}, "outputs": {"__new_primary_file_outTables|limma-voom_Mut-WT__": {"id": "c853cddba4b5c7e0", "src": "hda", "uuid": "adbcedaa-f13d-4491-96a7-2ff3b7f991d9"}, "rscript": {"id": "37d0359c0a0b1dfb", "src": "hda", "uuid": "5bf27e1d-431c-4395-b169-4bc93a892d54"}, "outReport": {"id": "09cdc6c3706b0ab5", "src": "hda", "uuid": "f586c7c0-c493-4beb-a881-7951b844f737"}}, "output_collections": {"outTables": {"id": "582fed4802e3f2cd", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n[1] \"Saving RData\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n[1] \"Saving RData\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "8 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "8.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:50:05", "plugin": "core", "name": "end_epoch", "raw_value": "1684911005.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:49:57", "plugin": "core", "name": "start_epoch", "raw_value": "1684910997.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.38.3+galaxy3", "test_index": 3, "time_seconds": 37.78610181808472, "inputs": {"input|counts": {"src": "hda", "id": "b8028a1375c00fe1"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|fact|rep_factor_1|factorName": "Batch", "input|fact|rep_factor_1|groupNames": "b1,b2,b3,b1,b2,b3", "input|format": "matrix", "cont|rep_contrast_0|contrast": "Mut-WT", "cont|cfile": "no", "adv|topgenes": "6", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "e43b628d8b3f85e9", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:50:14.927056", "create_time": "2023-05-24T06:49:54.060407", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-9jkzt", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/0921444c832d/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/1/f/8/dataset_1f877a4e-13fa-44e6-af96-3b83f04ae62f.dat' -o '/galaxy/server/database/jobs_directory/000/270/working/dataset_1f877a4e-13fa-44e6-af96-3b83f04ae62f_files'  -m '/galaxy/server/database/objects/5/0/5/dataset_505e6012-b91b-4282-af4c-15b637e24c7a.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT|Batch::b1,b2,b3,b1,b2,b3'   -D 'Mut-WT'   -P i       -l '0.0' -p '0.05' -d 'BH' -G '6'   -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/270/working/dataset_1f877a4e-13fa-44e6-af96-3b83f04ae62f_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/270/working/dataset_1f877a4e-13fa-44e6-af96-3b83f04ae62f_files'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": false, \"libinfo\": false, \"normCounts\": false, \"plots\": \"i\", \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "cont": "{\"__current_case__\": 1, \"cfile\": \"no\", \"rep_contrast\": [{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]}", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 331, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}, {\"__index__\": 1, \"factorName\": \"Batch\", \"groupNames\": \"b1,b2,b3,b1,b2,b3\"}]}, \"format\": \"matrix\"}", "deMethod": "{\"__current_case__\": 0, \"de_select\": \"voom\", \"weightOption\": false}"}, "inputs": {"counts": {"id": "b8028a1375c00fe1", "src": "hda", "uuid": "505e6012-b91b-4282-af4c-15b637e24c7a"}}, "outputs": {"__new_primary_file_outTables|limma-voom_Mut-WT__": {"id": "314ebb797a53c0ef", "src": "hda", "uuid": "e80242ec-0930-45b5-a058-6c46faeba288"}, "outReport": {"id": "6a8819f0ee149645", "src": "hda", "uuid": "1f877a4e-13fa-44e6-af96-3b83f04ae62f"}}, "output_collections": {"outTables": {"id": "92f36d8c23c2be3e", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "8 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "8.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:50:04", "plugin": "core", "name": "end_epoch", "raw_value": "1684911004.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:49:56", "plugin": "core", "name": "start_epoch", "raw_value": "1684910996.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.38.3+galaxy3", "test_index": 4, "time_seconds": 42.59993577003479, "inputs": {"input|counts": {"src": "hda", "id": "b2a5eacf64ddf82f"}, "input|fact|finfo": {"src": "hda", "id": "921fabbe2d664bd4"}, "input|fact|ffile": "yes", "input|format": "matrix", "cont|rep_contrast_0|contrast": "Mut-WT", "cont|cfile": "no", "adv|topgenes": "6", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "768eef53745c43c2", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:50:57.314943", "create_time": "2023-05-24T06:50:36.263175", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-6zzqx", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/0921444c832d/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/1/6/d/dataset_16dc88c0-7e58-4d32-96b2-82c401193497.dat' -o '/galaxy/server/database/jobs_directory/000/275/working/dataset_16dc88c0-7e58-4d32-96b2-82c401193497_files'  -m '/galaxy/server/database/objects/f/9/e/dataset_f9ef4371-b99b-4d59-a717-46267174dc82.dat' -f '/galaxy/server/database/objects/f/e/4/dataset_fe4e9cf6-73d0-4582-aa64-0d5da23bd559.dat'   -D 'Mut-WT'   -P i       -l '0.0' -p '0.05' -d 'BH' -G '6'   -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/275/working/dataset_16dc88c0-7e58-4d32-96b2-82c401193497_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/275/working/dataset_16dc88c0-7e58-4d32-96b2-82c401193497_files'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": false, \"libinfo\": false, \"normCounts\": false, \"plots\": \"i\", \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "cont": "{\"__current_case__\": 1, \"cfile\": \"no\", \"rep_contrast\": [{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]}", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 340, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 0, \"ffile\": \"yes\", \"finfo\": {\"values\": [{\"id\": 339, \"src\": \"hda\"}]}}, \"format\": \"matrix\"}", "deMethod": "{\"__current_case__\": 0, \"de_select\": \"voom\", \"weightOption\": false}"}, "inputs": {"counts": {"id": "b2a5eacf64ddf82f", "src": "hda", "uuid": "f9ef4371-b99b-4d59-a717-46267174dc82"}, "input|finfo": {"id": "921fabbe2d664bd4", "src": "hda", "uuid": "fe4e9cf6-73d0-4582-aa64-0d5da23bd559"}}, "outputs": {"__new_primary_file_outTables|limma-voom_Mut-WT__": {"id": "c872ee051cbbe620", "src": "hda", "uuid": "be83966a-30bf-4187-aabc-c6d844aef4a1"}, "outReport": {"id": "57ff7ce2d167ffe6", "src": "hda", "uuid": "16dc88c0-7e58-4d32-96b2-82c401193497"}}, "output_collections": {"outTables": {"id": "f8314ceccf91d540", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "7 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "7.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:50:46", "plugin": "core", "name": "end_epoch", "raw_value": "1684911046.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:50:39", "plugin": "core", "name": "start_epoch", "raw_value": "1684911039.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.38.3+galaxy3", "test_index": 5, "time_seconds": 44.55367970466614, "inputs": {"input|counts": {"src": "hda", "id": "b2a5eacf64ddf82f"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "cont|rep_contrast_0|contrast": "Mut-WT", "cont|cfile": "no", "f|filt|cformat|cntReq": "10", "f|filt|cformat|samples|cntSampleReq": "3", "f|filt|cformat|samples|count_select": "sample", "f|filt|cformat|format_select": "counts", "f|filt|filt_select": "yes", "out|filtCounts": true, "out|normCounts": true, "adv|topgenes": "6", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "05a60f63f25164a7", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:50:59.738559", "create_time": "2023-05-24T06:50:37.802435", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-tmlbr", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/0921444c832d/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/a/9/c/dataset_a9c6f3e3-f181-468c-8ded-38061883787d.dat' -o '/galaxy/server/database/jobs_directory/000/276/working/dataset_a9c6f3e3-f181-468c-8ded-38061883787d_files'  -m '/galaxy/server/database/objects/f/9/e/dataset_f9ef4371-b99b-4d59-a717-46267174dc82.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'   -D 'Mut-WT'  -z '10' -s '3'  -P i  -F  -x     -l '0.0' -p '0.05' -d 'BH' -G '6'   -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/276/working/dataset_a9c6f3e3-f181-468c-8ded-38061883787d_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/276/working/dataset_a9c6f3e3-f181-468c-8ded-38061883787d_files'  && cp '/galaxy/server/database/jobs_directory/000/276/working/dataset_a9c6f3e3-f181-468c-8ded-38061883787d_files'/*counts output_dir/", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": true, \"libinfo\": false, \"normCounts\": true, \"plots\": \"i\", \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 0, \"cformat\": {\"__current_case__\": 1, \"cntReq\": \"10\", \"format_select\": \"counts\", \"samples\": {\"__current_case__\": 1, \"cntSampleReq\": \"3\", \"count_select\": \"sample\"}}, \"filt_select\": \"yes\"}}", "cont": "{\"__current_case__\": 1, \"cfile\": \"no\", \"rep_contrast\": [{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]}", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 340, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}", "deMethod": "{\"__current_case__\": 0, \"de_select\": \"voom\", \"weightOption\": false}"}, "inputs": {"counts": {"id": "b2a5eacf64ddf82f", "src": "hda", "uuid": "f9ef4371-b99b-4d59-a717-46267174dc82"}}, "outputs": {"__new_primary_file_outTables|limma-voom_Mut-WT__": {"id": "16f42ce65faca8d8", "src": "hda", "uuid": "02faa3ae-7e15-466f-8e1a-6abd67fe46be"}, "outNorm": {"id": "8bc3f378828bf74e", "src": "hda", "uuid": "08b742a7-f2a6-49fd-b539-30a83d19196e"}, "outFilt": {"id": "ecdb759370d0b9bd", "src": "hda", "uuid": "0cc79223-91f9-446b-ba43-964bf4f3da7f"}, "outReport": {"id": "232d3336116ddc27", "src": "hda", "uuid": "a9c6f3e3-f181-468c-8ded-38061883787d"}}, "output_collections": {"outTables": {"id": "5c98aec7e6a27153", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Outputting filtered counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Outputting filtered counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "8 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "8.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:50:48", "plugin": "core", "name": "end_epoch", "raw_value": "1684911048.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:50:40", "plugin": "core", "name": "start_epoch", "raw_value": "1684911040.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.38.3+galaxy3", "test_index": 6, "time_seconds": 93.15412878990173, "inputs": {"input|rep_factor_0|factorName": "Genotype", "input|rep_factor_0|rep_group_0|groupName": "WT", "input|rep_factor_0|rep_group_0|countsFile": [{"src": "hda", "id": "751aded886f27a0a"}, {"src": "hda", "id": "7f629430f3bde643"}, {"src": "hda", "id": "fa15ac77d3f19409"}], "input|rep_factor_0|rep_group_1|groupName": "Mut", "input|rep_factor_0|rep_group_1|countsFile": [{"src": "hda", "id": "77cdaf0aeee83e45"}, {"src": "hda", "id": "ab648b159daf6854"}, {"src": "hda", "id": "28ec2bf7cb3a86d2"}], "input|rep_factor_1|factorName": "Batch", "input|rep_factor_1|rep_group_0|groupName": "b1", "input|rep_factor_1|rep_group_0|countsFile": [{"src": "hda", "id": "751aded886f27a0a"}, {"src": "hda", "id": "77cdaf0aeee83e45"}], "input|rep_factor_1|rep_group_1|groupName": "b2", "input|rep_factor_1|rep_group_1|countsFile": [{"src": "hda", "id": "7f629430f3bde643"}, {"src": "hda", "id": "ab648b159daf6854"}], "input|rep_factor_1|rep_group_2|groupName": "b3", "input|rep_factor_1|rep_group_2|countsFile": [{"src": "hda", "id": "fa15ac77d3f19409"}, {"src": "hda", "id": "28ec2bf7cb3a86d2"}], "input|format": "files", "anno|geneanno": {"src": "hda", "id": "91a3b0a271c837a8"}, "anno|annoOpt": "yes", "cont|rep_contrast_0|contrast": "Mut-WT", "cont|rep_contrast_1|contrast": "WT-Mut", "cont|cfile": "no", "out|normCounts": true, "adv|topgenes": "6"}, "job": {"model_class": "Job", "id": "60b002985cab8493", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:52:29.951954", "create_time": "2023-05-24T06:52:05.462874", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-thmvr", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/0921444c832d/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/7/8/a/dataset_78ac93a3-16a6-401a-a98a-36b24a3b91e9.dat' -o '/galaxy/server/database/jobs_directory/000/292/working/dataset_78ac93a3-16a6-401a-a98a-36b24a3b91e9_files'                          -j '[[\"Genotype\", [{\"Mut\": [\"/galaxy/server/database/objects/a/8/3/dataset_a8393a53-dfbe-455d-b1b8-df2c0f079f9b.dat\", \"/galaxy/server/database/objects/7/8/4/dataset_784c7bf7-e5d0-4a54-b211-8dad5e6f8b1c.dat\", \"/galaxy/server/database/objects/8/0/6/dataset_8063b5e7-ebd7-461a-a382-1fabebb05c16.dat\"]}, {\"WT\": [\"/galaxy/server/database/objects/b/f/7/dataset_bf72289a-a46d-43b4-8006-0f4962a61984.dat\", \"/galaxy/server/database/objects/4/6/4/dataset_464a31dd-4147-4f41-9ad6-81bd46b2bdad.dat\", \"/galaxy/server/database/objects/e/e/d/dataset_eed9e5c6-11e5-41f0-b226-5f75c0f73c7e.dat\"]}]], [\"Batch\", [{\"b3\": [\"/galaxy/server/database/objects/e/e/d/dataset_eed9e5c6-11e5-41f0-b226-5f75c0f73c7e.dat\", \"/galaxy/server/database/objects/8/0/6/dataset_8063b5e7-ebd7-461a-a382-1fabebb05c16.dat\"]}, {\"b2\": [\"/galaxy/server/database/objects/4/6/4/dataset_464a31dd-4147-4f41-9ad6-81bd46b2bdad.dat\", \"/galaxy/server/database/objects/7/8/4/dataset_784c7bf7-e5d0-4a54-b211-8dad5e6f8b1c.dat\"]}, {\"b1\": [\"/galaxy/server/database/objects/b/f/7/dataset_bf72289a-a46d-43b4-8006-0f4962a61984.dat\", \"/galaxy/server/database/objects/a/8/3/dataset_a8393a53-dfbe-455d-b1b8-df2c0f079f9b.dat\"]}]]]'   -a '/galaxy/server/database/objects/5/4/1/dataset_5410cacd-bc5a-4248-a831-de3aca8e2646.dat'  -D 'Mut-WT,WT-Mut'   -P i   -x     -l '0.0' -p '0.05' -d 'BH' -G '6'   -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/292/working/dataset_78ac93a3-16a6-401a-a98a-36b24a3b91e9_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/292/working/dataset_78ac93a3-16a6-401a-a98a-36b24a3b91e9_files'  && cp '/galaxy/server/database/jobs_directory/000/292/working/dataset_78ac93a3-16a6-401a-a98a-36b24a3b91e9_files'/*counts output_dir/", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": false, \"libinfo\": false, \"normCounts\": true, \"plots\": \"i\", \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "cont": "{\"__current_case__\": 1, \"cfile\": \"no\", \"rep_contrast\": [{\"__index__\": 0, \"contrast\": \"Mut-WT\"}, {\"__index__\": 1, \"contrast\": \"WT-Mut\"}]}", "anno": "{\"__current_case__\": 0, \"annoOpt\": \"yes\", \"geneanno\": {\"values\": [{\"id\": 360, \"src\": \"hda\"}]}}", "input": "{\"__current_case__\": 0, \"format\": \"files\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"rep_group\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 353, \"src\": \"hda\"}, {\"id\": 355, \"src\": \"hda\"}, {\"id\": 358, \"src\": \"hda\"}]}, \"groupName\": \"WT\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 354, \"src\": \"hda\"}, {\"id\": 356, \"src\": \"hda\"}, {\"id\": 359, \"src\": \"hda\"}]}, \"groupName\": \"Mut\"}]}, {\"__index__\": 1, \"factorName\": \"Batch\", \"rep_group\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 353, \"src\": \"hda\"}, {\"id\": 354, \"src\": \"hda\"}]}, \"groupName\": \"b1\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 355, \"src\": \"hda\"}, {\"id\": 356, \"src\": \"hda\"}]}, \"groupName\": \"b2\"}, {\"__index__\": 2, \"countsFile\": {\"values\": [{\"id\": 358, \"src\": \"hda\"}, {\"id\": 359, \"src\": \"hda\"}]}, \"groupName\": \"b3\"}]}]}", "deMethod": "{\"__current_case__\": 0, \"de_select\": \"voom\", \"weightOption\": false}"}, "inputs": {"input|rep_factor_0|rep_group_0|countsFile": {"id": "751aded886f27a0a", "src": "hda", "uuid": "bf72289a-a46d-43b4-8006-0f4962a61984"}, "input|rep_factor_0|rep_group_0|countsFile1": {"id": "751aded886f27a0a", "src": "hda", "uuid": "bf72289a-a46d-43b4-8006-0f4962a61984"}, "input|rep_factor_0|rep_group_0|countsFile2": {"id": "7f629430f3bde643", "src": "hda", "uuid": "464a31dd-4147-4f41-9ad6-81bd46b2bdad"}, "input|rep_factor_0|rep_group_0|countsFile3": {"id": "fa15ac77d3f19409", "src": "hda", "uuid": "eed9e5c6-11e5-41f0-b226-5f75c0f73c7e"}, "input|rep_factor_0|rep_group_1|countsFile": {"id": "77cdaf0aeee83e45", "src": "hda", "uuid": "a8393a53-dfbe-455d-b1b8-df2c0f079f9b"}, "input|rep_factor_0|rep_group_1|countsFile1": {"id": "77cdaf0aeee83e45", "src": "hda", "uuid": "a8393a53-dfbe-455d-b1b8-df2c0f079f9b"}, "input|rep_factor_0|rep_group_1|countsFile2": {"id": "ab648b159daf6854", "src": "hda", "uuid": "784c7bf7-e5d0-4a54-b211-8dad5e6f8b1c"}, "input|rep_factor_0|rep_group_1|countsFile3": {"id": "28ec2bf7cb3a86d2", "src": "hda", "uuid": "8063b5e7-ebd7-461a-a382-1fabebb05c16"}, "input|rep_factor_1|rep_group_0|countsFile": {"id": "751aded886f27a0a", "src": "hda", "uuid": "bf72289a-a46d-43b4-8006-0f4962a61984"}, "input|rep_factor_1|rep_group_0|countsFile1": {"id": "751aded886f27a0a", "src": "hda", "uuid": "bf72289a-a46d-43b4-8006-0f4962a61984"}, "input|rep_factor_1|rep_group_0|countsFile2": {"id": "77cdaf0aeee83e45", "src": "hda", "uuid": "a8393a53-dfbe-455d-b1b8-df2c0f079f9b"}, "input|rep_factor_1|rep_group_1|countsFile": {"id": "7f629430f3bde643", "src": "hda", "uuid": "464a31dd-4147-4f41-9ad6-81bd46b2bdad"}, "input|rep_factor_1|rep_group_1|countsFile1": {"id": "7f629430f3bde643", "src": "hda", "uuid": "464a31dd-4147-4f41-9ad6-81bd46b2bdad"}, "input|rep_factor_1|rep_group_1|countsFile2": {"id": "ab648b159daf6854", "src": "hda", "uuid": "784c7bf7-e5d0-4a54-b211-8dad5e6f8b1c"}, "input|rep_factor_1|rep_group_2|countsFile": {"id": "fa15ac77d3f19409", "src": "hda", "uuid": "eed9e5c6-11e5-41f0-b226-5f75c0f73c7e"}, "input|rep_factor_1|rep_group_2|countsFile1": {"id": "fa15ac77d3f19409", "src": "hda", "uuid": "eed9e5c6-11e5-41f0-b226-5f75c0f73c7e"}, "input|rep_factor_1|rep_group_2|countsFile2": {"id": "28ec2bf7cb3a86d2", "src": "hda", "uuid": "8063b5e7-ebd7-461a-a382-1fabebb05c16"}, "geneanno": {"id": "91a3b0a271c837a8", "src": "hda", "uuid": "5410cacd-bc5a-4248-a831-de3aca8e2646"}}, "outputs": {"__new_primary_file_outTables|limma-voom_WT-Mut__": {"id": "e63c20486fa72900", "src": "hda", "uuid": "6bae3465-7541-42e5-8685-e4a14d1e4798"}, "__new_primary_file_outTables|limma-voom_Mut-WT__": {"id": "60e248e2af588dbd", "src": "hda", "uuid": "f11dfcf7-8686-4cb4-bf32-8206d509d4a5"}, "outNorm": {"id": "22dc3547927047bf", "src": "hda", "uuid": "173b74de-4a11-403f-ae37-1e26c2b225f7"}, "outReport": {"id": "9fcb14771ad8a31f", "src": "hda", "uuid": "78ac93a3-16a6-401a-a98a-36b24a3b91e9"}}, "output_collections": {"outTables": {"id": "03a8c195d50aa2bd", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "9 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "9.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:52:17", "plugin": "core", "name": "end_epoch", "raw_value": "1684911137.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:52:08", "plugin": "core", "name": "start_epoch", "raw_value": "1684911128.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.38.3+galaxy3", "test_index": 7, "time_seconds": 77.01208209991455, "inputs": {"deMethod|de_select": "trend", "input|counts": {"src": "hda", "id": "abb02d0dee18fc5b"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "cont|rep_contrast_0|contrast": "Mut-WT", "cont|cfile": "no", "adv|topgenes": "6", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "1f73dbcd404ad6e5", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:52:17.866350", "create_time": "2023-05-24T06:51:58.764632", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-lqq8v", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/0921444c832d/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/4/8/7/dataset_48716575-db06-46c6-ac61-281c7843c0f0.dat' -o '/galaxy/server/database/jobs_directory/000/291/working/dataset_48716575-db06-46c6-ac61-281c7843c0f0_files'  -m '/galaxy/server/database/objects/3/2/8/dataset_328fbd56-1462-40a9-b49f-9a3ea1d64236.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'   -D 'Mut-WT'   -P i       -l '0.0' -p '0.05' -d 'BH' -G '6'  -t 3.0  -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/291/working/dataset_48716575-db06-46c6-ac61-281c7843c0f0_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/291/working/dataset_48716575-db06-46c6-ac61-281c7843c0f0_files'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": false, \"libinfo\": false, \"normCounts\": false, \"plots\": \"i\", \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "cont": "{\"__current_case__\": 1, \"cfile\": \"no\", \"rep_contrast\": [{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]}", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 357, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}", "deMethod": "{\"__current_case__\": 1, \"de_select\": \"trend\", \"prior_count\": \"3.0\"}"}, "inputs": {"counts": {"id": "abb02d0dee18fc5b", "src": "hda", "uuid": "328fbd56-1462-40a9-b49f-9a3ea1d64236"}}, "outputs": {"__new_primary_file_outTables|limma-trend_Mut-WT__": {"id": "0e5476a95168f3f3", "src": "hda", "uuid": "e5cabaa4-ff9a-4212-a3ac-1472e0386299"}, "outReport": {"id": "c0f1b6fe4b9ff2c8", "src": "hda", "uuid": "48716575-db06-46c6-ac61-281c7843c0f0"}}, "output_collections": {"outTables": {"id": "9c88381d474620e3", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "7 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "7.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:52:07", "plugin": "core", "name": "end_epoch", "raw_value": "1684911127.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:52:00", "plugin": "core", "name": "start_epoch", "raw_value": "1684911120.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3-8", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.38.3+galaxy3", "test_index": 8, "time_seconds": 10.582875490188599, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3-9", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.38.3+galaxy3", "test_index": 9, "time_seconds": 47.187328815460205, "inputs": {"deMethod|de_select": "voom", "input|counts": {"src": "hda", "id": "68dcf275784ac0bb"}, "input|fact|rep_factor_0|factorName": "Group", "input|fact|rep_factor_0|groupNames": "2,2,2,1,1,1", "input|format": "matrix", "anno|geneanno": {"src": "hda", "id": "f9ea737255a627e5"}, "anno|annoOpt": "yes", "cont|rep_contrast_0|contrast": "2-1", "cont|cfile": "no", "f|filt|cformat|cntReq": "10", "f|filt|cformat|samples|cntSampleReq": "3", "f|filt|cformat|samples|count_select": "sample", "f|filt|cformat|format_select": "counts", "f|filt|filt_select": "yes", "out|normCounts": true, "adv|topgenes": "6", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "c315583a3e800c8b", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:53:15.671478", "create_time": "2023-05-24T06:52:53.664563", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.38.3+galaxy3", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-55vr9", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/0921444c832d/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/7/8/0/dataset_7803c9a5-4cb6-42c1-9f5f-c3b6662fc96d.dat' -o '/galaxy/server/database/jobs_directory/000/299/working/dataset_7803c9a5-4cb6-42c1-9f5f-c3b6662fc96d_files'  -m '/galaxy/server/database/objects/0/8/c/dataset_08cf7f3f-cfac-406b-a06d-ce2b462bf19a.dat' -i 'Group::2,2,2,1,1,1'  -a '/galaxy/server/database/objects/b/f/9/dataset_bf935045-4180-430b-8e6f-553c2ea5a725.dat'  -D '2-1'  -z '10' -s '3'  -P i   -x     -l '0.0' -p '0.05' -d 'BH' -G '6'   -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/299/working/dataset_7803c9a5-4cb6-42c1-9f5f-c3b6662fc96d_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/299/working/dataset_7803c9a5-4cb6-42c1-9f5f-c3b6662fc96d_files'  && cp '/galaxy/server/database/jobs_directory/000/299/working/dataset_7803c9a5-4cb6-42c1-9f5f-c3b6662fc96d_files'/*counts output_dir/", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": false, \"libinfo\": false, \"normCounts\": true, \"plots\": \"i\", \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 0, \"cformat\": {\"__current_case__\": 1, \"cntReq\": \"10\", \"format_select\": \"counts\", \"samples\": {\"__current_case__\": 1, \"cntSampleReq\": \"3\", \"count_select\": \"sample\"}}, \"filt_select\": \"yes\"}}", "cont": "{\"__current_case__\": 1, \"cfile\": \"no\", \"rep_contrast\": [{\"__index__\": 0, \"contrast\": \"2-1\"}]}", "anno": "{\"__current_case__\": 0, \"annoOpt\": \"yes\", \"geneanno\": {\"values\": [{\"id\": 370, \"src\": \"hda\"}]}}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 369, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Group\", \"groupNames\": \"2,2,2,1,1,1\"}]}, \"format\": \"matrix\"}", "deMethod": "{\"__current_case__\": 0, \"de_select\": \"voom\", \"weightOption\": false}"}, "inputs": {"counts": {"id": "68dcf275784ac0bb", "src": "hda", "uuid": "08cf7f3f-cfac-406b-a06d-ce2b462bf19a"}, "geneanno": {"id": "f9ea737255a627e5", "src": "hda", "uuid": "bf935045-4180-430b-8e6f-553c2ea5a725"}}, "outputs": {"__new_primary_file_outTables|limma-voom_X2-X1__": {"id": "5fa3f2c70cb5727e", "src": "hda", "uuid": "f6232208-188e-44a4-af45-ec85d5482a76"}, "outNorm": {"id": "3c540454def01ccc", "src": "hda", "uuid": "1a315f7c-36ae-4ea7-ad52-76c7bd01f661"}, "outReport": {"id": "054ae764150951ca", "src": "hda", "uuid": "7803c9a5-4cb6-42c1-9f5f-c3b6662fc96d"}}, "output_collections": {"outTables": {"id": "deb29ac712199319", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "8 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "8.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:53:04", "plugin": "core", "name": "end_epoch", "raw_value": "1684911184.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:52:56", "plugin": "core", "name": "start_epoch", "raw_value": "1684911176.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.50.1+galaxy0", "test_index": 0, "time_seconds": 81.84226369857788, "inputs": {"input|counts": {"src": "hda", "id": "a88dd9394b51e153"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "cont|rep_contrast_0|contrast": "Mut-WT", "cont|rep_contrast_1|contrast": "WT-Mut", "cont|cfile": "no", "adv|topgenes": "6", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "9324a32aa59dcac3", "state": "error", "exit_code": null, "update_time": "2023-05-24T06:54:37.841532", "create_time": "2023-05-24T06:53:37.702546", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-gxgcz", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/d6f5fa4ee473/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/9/b/4/dataset_9b45e615-3fe3-497e-ae98-3ec78e0beedb.dat' -o '/galaxy/server/database/jobs_directory/000/304/working/dataset_9b45e615-3fe3-497e-ae98-3ec78e0beedb_files'  -m '/galaxy/server/database/objects/d/8/4/dataset_d84ca571-3441-47a2-9897-1c2f86ed764b.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'   -D 'Mut-WT,WT-Mut'   -P i       -l '0.0' -p '0.05' -d 'BH' -G '6'   -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/304/working/dataset_9b45e615-3fe3-497e-ae98-3ec78e0beedb_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/304/working/dataset_9b45e615-3fe3-497e-ae98-3ec78e0beedb_files'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": false, \"libinfo\": false, \"normCounts\": false, \"plots\": \"i\", \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "cont": "{\"__current_case__\": 1, \"cfile\": \"no\", \"rep_contrast\": [{\"__index__\": 0, \"contrast\": \"Mut-WT\"}, {\"__index__\": 1, \"contrast\": \"WT-Mut\"}]}", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 381, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}", "deMethod": "{\"__current_case__\": 0, \"de_select\": \"voom\", \"weightOption\": false}"}, "inputs": {"counts": {"id": "a88dd9394b51e153", "src": "hda", "uuid": "d84ca571-3441-47a2-9897-1c2f86ed764b"}}, "outputs": {"outReport": {"id": "24e08d53d8bbded1", "src": "hda", "uuid": "9b45e615-3fe3-497e-ae98-3ec78e0beedb"}}, "output_collections": {"outTables": {"id": "0a5a40c4c395d251", "src": "hdca"}}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": null, "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0, exit_code: None, stderr: .", "Output collection 'outTables': expected to have 2 elements, but it had 0."], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.50.1+galaxy0", "test_index": 1, "time_seconds": 88.38675713539124, "inputs": {"input|counts": {"src": "hda", "id": "a88dd9394b51e153"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "anno|geneanno": {"src": "hda", "id": "d857a865573e121d"}, "anno|annoOpt": "yes", "cont|rep_contrast_0|contrast": "Mut-WT", "cont|cfile": "no", "adv|topgenes": "6", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "fbaf0e3a33443e78", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:54:46.795824", "create_time": "2023-05-24T06:53:41.926424", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-2nsz7", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/d6f5fa4ee473/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/5/8/b/dataset_58b3c310-92a3-42f8-96e5-59ef14373c4c.dat' -o '/galaxy/server/database/jobs_directory/000/305/working/dataset_58b3c310-92a3-42f8-96e5-59ef14373c4c_files'  -m '/galaxy/server/database/objects/d/8/4/dataset_d84ca571-3441-47a2-9897-1c2f86ed764b.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'  -a '/galaxy/server/database/objects/c/a/a/dataset_caa1ec85-ecfb-4906-a792-6b2952ee1c92.dat'  -D 'Mut-WT'   -P i       -l '0.0' -p '0.05' -d 'BH' -G '6'   -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/305/working/dataset_58b3c310-92a3-42f8-96e5-59ef14373c4c_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/305/working/dataset_58b3c310-92a3-42f8-96e5-59ef14373c4c_files'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": false, \"libinfo\": false, \"normCounts\": false, \"plots\": \"i\", \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "cont": "{\"__current_case__\": 1, \"cfile\": \"no\", \"rep_contrast\": [{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]}", "anno": "{\"__current_case__\": 0, \"annoOpt\": \"yes\", \"geneanno\": {\"values\": [{\"id\": 382, \"src\": \"hda\"}]}}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 381, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}", "deMethod": "{\"__current_case__\": 0, \"de_select\": \"voom\", \"weightOption\": false}"}, "inputs": {"counts": {"id": "a88dd9394b51e153", "src": "hda", "uuid": "d84ca571-3441-47a2-9897-1c2f86ed764b"}, "geneanno": {"id": "d857a865573e121d", "src": "hda", "uuid": "caa1ec85-ecfb-4906-a792-6b2952ee1c92"}}, "outputs": {"__new_primary_file_outTables|limma-voom_Mut-WT__": {"id": "13321d836c6e2e06", "src": "hda", "uuid": "6924433f-36e0-4565-a0d3-7cdbfb06d4e8"}, "outReport": {"id": "bcfe3d8e6698a669", "src": "hda", "uuid": "58b3c310-92a3-42f8-96e5-59ef14373c4c"}}, "output_collections": {"outTables": {"id": "bce4a6158e540f2e", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "29 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "29.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:54:33", "plugin": "core", "name": "end_epoch", "raw_value": "1684911273.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:54:04", "plugin": "core", "name": "start_epoch", "raw_value": "1684911244.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0-10", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.50.1+galaxy0", "test_index": 10, "time_seconds": 62.01787090301514, "inputs": {"input|counts": {"src": "hda", "id": "6b17fcc3adccdf22"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "cont|cinfo": {"src": "hda", "id": "319267a58da55abd"}, "cont|cfile": "yes", "adv|topgenes": "6", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "b2a5eacf64ddf82f", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:00:36.264877", "create_time": "2023-05-24T06:59:54.565197", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-mdscx", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/d6f5fa4ee473/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/c/b/5/dataset_cb5e6163-1e96-4565-af63-97b30b22048c.dat' -o '/galaxy/server/database/jobs_directory/000/340/working/dataset_cb5e6163-1e96-4565-af63-97b30b22048c_files'  -m '/galaxy/server/database/objects/a/4/2/dataset_a4247a3c-cad9-45f7-b968-25a8fd05119a.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'   -C '/galaxy/server/database/objects/c/8/b/dataset_c8b1be5f-2a78-4370-8b46-8a2dfef9ba89.dat'   -P i       -l '0.0' -p '0.05' -d 'BH' -G '6'   -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/340/working/dataset_cb5e6163-1e96-4565-af63-97b30b22048c_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/340/working/dataset_cb5e6163-1e96-4565-af63-97b30b22048c_files'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": false, \"libinfo\": false, \"normCounts\": false, \"plots\": \"i\", \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "cont": "{\"__current_case__\": 0, \"cfile\": \"yes\", \"cinfo\": {\"values\": [{\"id\": 432, \"src\": \"hda\"}]}}", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 433, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}", "deMethod": "{\"__current_case__\": 0, \"de_select\": \"voom\", \"weightOption\": false}"}, "inputs": {"counts": {"id": "6b17fcc3adccdf22", "src": "hda", "uuid": "a4247a3c-cad9-45f7-b968-25a8fd05119a"}, "cinfo": {"id": "319267a58da55abd", "src": "hda", "uuid": "c8b1be5f-2a78-4370-8b46-8a2dfef9ba89"}}, "outputs": {"__new_primary_file_outTables|limma-voom_WT-Mut__": {"id": "9e975b4e115b39ba", "src": "hda", "uuid": "cd8e8a6d-4600-46b2-9d9e-98e94d911fc5"}, "__new_primary_file_outTables|limma-voom_Mut-WT__": {"id": "42f176f4899a0afe", "src": "hda", "uuid": "89b41021-5c2d-4468-9dcc-e487a8be7df0"}, "__new_primary_file_outTables|limma-voom_Mut-WT-WT-Mut__": {"id": "b5a1bcb47cda3e10", "src": "hda", "uuid": "fd936d1b-f956-46d0-a0a3-83631793f3e7"}, "outReport": {"id": "f94b72f659933ef0", "src": "hda", "uuid": "cb5e6163-1e96-4565-af63-97b30b22048c"}}, "output_collections": {"outTables": {"id": "9b34b465b6d2f7a9", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "25 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "25.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:00:23", "plugin": "core", "name": "end_epoch", "raw_value": "1684911623.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:59:58", "plugin": "core", "name": "start_epoch", "raw_value": "1684911598.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.50.1+galaxy0", "test_index": 2, "time_seconds": 71.40263175964355, "inputs": {"input|counts": {"src": "hda", "id": "95474ef2559bb3cf"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "cont|rep_contrast_0|contrast": "Mut-WT", "cont|cfile": "no", "out|rscript": true, "out|rdaOption": true, "adv|topgenes": "6", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "5d986a60f1894ccd", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:55:48.947953", "create_time": "2023-05-24T06:54:57.027676", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-9btsj", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/d6f5fa4ee473/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/f/4/9/dataset_f494b898-14f3-45fb-b13b-9a04827d1ca2.dat' -o '/galaxy/server/database/jobs_directory/000/308/working/dataset_f494b898-14f3-45fb-b13b-9a04827d1ca2_files'  -m '/galaxy/server/database/objects/b/a/6/dataset_ba68ad0c-4a5a-456c-ad76-6758d06b7baf.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'   -D 'Mut-WT'   -P i     -r   -l '0.0' -p '0.05' -d 'BH' -G '6'   -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/308/working/dataset_f494b898-14f3-45fb-b13b-9a04827d1ca2_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/308/working/dataset_f494b898-14f3-45fb-b13b-9a04827d1ca2_files'   && cp '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/d6f5fa4ee473/limma_voom/limma_voom.R' '/galaxy/server/database/objects/5/5/3/dataset_55312802-d217-4265-8a1f-afa8214dd0ad.dat'", "traceback": null, "params": {"__input_ext": "\"auto\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": false, \"libinfo\": false, \"normCounts\": false, \"plots\": \"i\", \"rdaOption\": true, \"rscript\": true}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "cont": "{\"__current_case__\": 1, \"cfile\": \"no\", \"rep_contrast\": [{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]}", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 387, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}", "deMethod": "{\"__current_case__\": 0, \"de_select\": \"voom\", \"weightOption\": false}"}, "inputs": {"counts": {"id": "95474ef2559bb3cf", "src": "hda", "uuid": "ba68ad0c-4a5a-456c-ad76-6758d06b7baf"}}, "outputs": {"__new_primary_file_outTables|limma-voom_Mut-WT__": {"id": "0ba7a77d60c31b27", "src": "hda", "uuid": "1762060a-5c02-42e2-ae6e-3f7fd3640b1e"}, "rscript": {"id": "89be74ae71c84811", "src": "hda", "uuid": "55312802-d217-4265-8a1f-afa8214dd0ad"}, "outReport": {"id": "589933f98605b2c7", "src": "hda", "uuid": "f494b898-14f3-45fb-b13b-9a04827d1ca2"}}, "output_collections": {"outTables": {"id": "2de07a667f8d9d98", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n[1] \"Saving RData\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n[1] \"Saving RData\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "30 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "30.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:55:37", "plugin": "core", "name": "end_epoch", "raw_value": "1684911337.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:55:07", "plugin": "core", "name": "start_epoch", "raw_value": "1684911307.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.50.1+galaxy0", "test_index": 3, "time_seconds": 62.01660895347595, "inputs": {"input|counts": {"src": "hda", "id": "95474ef2559bb3cf"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|fact|rep_factor_1|factorName": "Batch", "input|fact|rep_factor_1|groupNames": "b1,b2,b3,b1,b2,b3", "input|format": "matrix", "cont|rep_contrast_0|contrast": "Mut-WT", "cont|cfile": "no", "adv|topgenes": "6", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "d2e30ba4dafa3afe", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:55:48.821960", "create_time": "2023-05-24T06:55:06.151351", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-7ccj2", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/d6f5fa4ee473/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/2/c/6/dataset_2c60251f-d099-46d8-a85d-6c0267382d55.dat' -o '/galaxy/server/database/jobs_directory/000/309/working/dataset_2c60251f-d099-46d8-a85d-6c0267382d55_files'  -m '/galaxy/server/database/objects/b/a/6/dataset_ba68ad0c-4a5a-456c-ad76-6758d06b7baf.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT|Batch::b1,b2,b3,b1,b2,b3'   -D 'Mut-WT'   -P i       -l '0.0' -p '0.05' -d 'BH' -G '6'   -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/309/working/dataset_2c60251f-d099-46d8-a85d-6c0267382d55_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/309/working/dataset_2c60251f-d099-46d8-a85d-6c0267382d55_files'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": false, \"libinfo\": false, \"normCounts\": false, \"plots\": \"i\", \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "cont": "{\"__current_case__\": 1, \"cfile\": \"no\", \"rep_contrast\": [{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]}", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 387, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}, {\"__index__\": 1, \"factorName\": \"Batch\", \"groupNames\": \"b1,b2,b3,b1,b2,b3\"}]}, \"format\": \"matrix\"}", "deMethod": "{\"__current_case__\": 0, \"de_select\": \"voom\", \"weightOption\": false}"}, "inputs": {"counts": {"id": "95474ef2559bb3cf", "src": "hda", "uuid": "ba68ad0c-4a5a-456c-ad76-6758d06b7baf"}}, "outputs": {"__new_primary_file_outTables|limma-voom_Mut-WT__": {"id": "b7a581404650401c", "src": "hda", "uuid": "2845e945-1f85-4b09-be95-ad05ffa94702"}, "outReport": {"id": "07f60252e48aba0b", "src": "hda", "uuid": "2c60251f-d099-46d8-a85d-6c0267382d55"}}, "output_collections": {"outTables": {"id": "9526bbb311293e42", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "28 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "28.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:55:37", "plugin": "core", "name": "end_epoch", "raw_value": "1684911337.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:55:09", "plugin": "core", "name": "start_epoch", "raw_value": "1684911309.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.50.1+galaxy0", "test_index": 4, "time_seconds": 58.52495813369751, "inputs": {"input|counts": {"src": "hda", "id": "5232a60083ad4c92"}, "input|fact|finfo": {"src": "hda", "id": "6b7b2234020fc3ee"}, "input|fact|ffile": "yes", "input|format": "matrix", "cont|rep_contrast_0|contrast": "Mut-WT", "cont|cfile": "no", "adv|topgenes": "6", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "e219de7ce9d4f0c7", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:56:47.725198", "create_time": "2023-05-24T06:56:11.834721", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-n8d9f", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/d6f5fa4ee473/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/b/d/6/dataset_bd607f16-fa37-498c-9481-a7548fcbff6b.dat' -o '/galaxy/server/database/jobs_directory/000/313/working/dataset_bd607f16-fa37-498c-9481-a7548fcbff6b_files'  -m '/galaxy/server/database/objects/7/d/8/dataset_7d80cb04-45e9-41b8-948b-581cd7d0edb9.dat' -f '/galaxy/server/database/objects/e/c/0/dataset_ec0c39ad-b67a-4059-bc16-ebbfc06ed828.dat'   -D 'Mut-WT'   -P i       -l '0.0' -p '0.05' -d 'BH' -G '6'   -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/313/working/dataset_bd607f16-fa37-498c-9481-a7548fcbff6b_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/313/working/dataset_bd607f16-fa37-498c-9481-a7548fcbff6b_files'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": false, \"libinfo\": false, \"normCounts\": false, \"plots\": \"i\", \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "cont": "{\"__current_case__\": 1, \"cfile\": \"no\", \"rep_contrast\": [{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]}", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 395, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 0, \"ffile\": \"yes\", \"finfo\": {\"values\": [{\"id\": 394, \"src\": \"hda\"}]}}, \"format\": \"matrix\"}", "deMethod": "{\"__current_case__\": 0, \"de_select\": \"voom\", \"weightOption\": false}"}, "inputs": {"counts": {"id": "5232a60083ad4c92", "src": "hda", "uuid": "7d80cb04-45e9-41b8-948b-581cd7d0edb9"}, "input|finfo": {"id": "6b7b2234020fc3ee", "src": "hda", "uuid": "ec0c39ad-b67a-4059-bc16-ebbfc06ed828"}}, "outputs": {"__new_primary_file_outTables|limma-voom_Mut-WT__": {"id": "e9177450b1405a2e", "src": "hda", "uuid": "95680cd9-fd22-49f0-bb34-53a32f33e6b5"}, "outReport": {"id": "eeb2cf0382ef3992", "src": "hda", "uuid": "bd607f16-fa37-498c-9481-a7548fcbff6b"}}, "output_collections": {"outTables": {"id": "2f0370fea08e0e02", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "22 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "22.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:56:36", "plugin": "core", "name": "end_epoch", "raw_value": "1684911396.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:56:14", "plugin": "core", "name": "start_epoch", "raw_value": "1684911374.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.50.1+galaxy0", "test_index": 5, "time_seconds": 62.31905937194824, "inputs": {"input|counts": {"src": "hda", "id": "5232a60083ad4c92"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "cont|rep_contrast_0|contrast": "Mut-WT", "cont|cfile": "no", "f|filt|cformat|cntReq": "10", "f|filt|cformat|samples|cntSampleReq": "3", "f|filt|cformat|samples|count_select": "sample", "f|filt|cformat|format_select": "counts", "f|filt|filt_select": "yes", "out|filtCounts": true, "out|normCounts": true, "adv|topgenes": "6", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "cca043ee789f3c55", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:56:50.993500", "create_time": "2023-05-24T06:56:13.771148", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-n575s", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/d6f5fa4ee473/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/e/b/5/dataset_eb5d5287-b427-44e5-9ed7-a59ef1f83dda.dat' -o '/galaxy/server/database/jobs_directory/000/314/working/dataset_eb5d5287-b427-44e5-9ed7-a59ef1f83dda_files'  -m '/galaxy/server/database/objects/7/d/8/dataset_7d80cb04-45e9-41b8-948b-581cd7d0edb9.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'   -D 'Mut-WT'  -z '10' -s '3'  -P i  -F  -x     -l '0.0' -p '0.05' -d 'BH' -G '6'   -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/314/working/dataset_eb5d5287-b427-44e5-9ed7-a59ef1f83dda_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/314/working/dataset_eb5d5287-b427-44e5-9ed7-a59ef1f83dda_files'  && cp '/galaxy/server/database/jobs_directory/000/314/working/dataset_eb5d5287-b427-44e5-9ed7-a59ef1f83dda_files'/*counts output_dir/", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": true, \"libinfo\": false, \"normCounts\": true, \"plots\": \"i\", \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 0, \"cformat\": {\"__current_case__\": 1, \"cntReq\": \"10\", \"format_select\": \"counts\", \"samples\": {\"__current_case__\": 1, \"cntSampleReq\": \"3\", \"count_select\": \"sample\"}}, \"filt_select\": \"yes\"}}", "cont": "{\"__current_case__\": 1, \"cfile\": \"no\", \"rep_contrast\": [{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]}", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 395, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}", "deMethod": "{\"__current_case__\": 0, \"de_select\": \"voom\", \"weightOption\": false}"}, "inputs": {"counts": {"id": "5232a60083ad4c92", "src": "hda", "uuid": "7d80cb04-45e9-41b8-948b-581cd7d0edb9"}}, "outputs": {"__new_primary_file_outTables|limma-voom_Mut-WT__": {"id": "084f8220b853b101", "src": "hda", "uuid": "4abbd42d-09a1-4794-bac7-2b534a0109b8"}, "outNorm": {"id": "96b2a471777c878b", "src": "hda", "uuid": "7f235941-6066-4f60-85a0-2624f6ffc3ac"}, "outFilt": {"id": "5ec024387c4dcff0", "src": "hda", "uuid": "e89a2823-4670-4e82-9465-2df97bd3bfac"}, "outReport": {"id": "752500682b77c59d", "src": "hda", "uuid": "eb5d5287-b427-44e5-9ed7-a59ef1f83dda"}}, "output_collections": {"outTables": {"id": "e5c5ae151f334a20", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Outputting filtered counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Outputting filtered counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "23 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "23.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:56:39", "plugin": "core", "name": "end_epoch", "raw_value": "1684911399.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:56:16", "plugin": "core", "name": "start_epoch", "raw_value": "1684911376.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.50.1+galaxy0", "test_index": 6, "time_seconds": 106.88105249404907, "inputs": {"input|rep_factor_0|factorName": "Genotype", "input|rep_factor_0|rep_group_0|groupName": "WT", "input|rep_factor_0|rep_group_0|countsFile": [{"src": "hda", "id": "8ac843687f7b58b2"}, {"src": "hda", "id": "2baee3b4a2d12dde"}, {"src": "hda", "id": "81188a4c0be7a351"}], "input|rep_factor_0|rep_group_1|groupName": "Mut", "input|rep_factor_0|rep_group_1|countsFile": [{"src": "hda", "id": "bfdeb03d73747478"}, {"src": "hda", "id": "45953b1176961a89"}, {"src": "hda", "id": "b44ec49d307a3e25"}], "input|rep_factor_1|factorName": "Batch", "input|rep_factor_1|rep_group_0|groupName": "b1", "input|rep_factor_1|rep_group_0|countsFile": [{"src": "hda", "id": "8ac843687f7b58b2"}, {"src": "hda", "id": "bfdeb03d73747478"}], "input|rep_factor_1|rep_group_1|groupName": "b2", "input|rep_factor_1|rep_group_1|countsFile": [{"src": "hda", "id": "2baee3b4a2d12dde"}, {"src": "hda", "id": "45953b1176961a89"}], "input|rep_factor_1|rep_group_2|groupName": "b3", "input|rep_factor_1|rep_group_2|countsFile": [{"src": "hda", "id": "81188a4c0be7a351"}, {"src": "hda", "id": "b44ec49d307a3e25"}], "input|format": "files", "anno|geneanno": {"src": "hda", "id": "87544dd584e5ecd3"}, "anno|annoOpt": "yes", "cont|rep_contrast_0|contrast": "Mut-WT", "cont|rep_contrast_1|contrast": "WT-Mut", "cont|cfile": "no", "out|normCounts": true, "adv|topgenes": "6"}, "job": {"model_class": "Job", "id": "07e52670701dd009", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:58:33.791030", "create_time": "2023-05-24T06:57:53.096952", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-tg85b", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/d6f5fa4ee473/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/d/e/1/dataset_de11982c-6e00-49f2-8e2e-9079f4768ce8.dat' -o '/galaxy/server/database/jobs_directory/000/329/working/dataset_de11982c-6e00-49f2-8e2e-9079f4768ce8_files'                          -j '[[\"Genotype\", [{\"Mut\": [\"/galaxy/server/database/objects/a/c/a/dataset_aca6fc31-823a-47cf-827a-c2bbdaa7cb34.dat\", \"/galaxy/server/database/objects/a/4/e/dataset_a4ee9527-7f59-47ba-b1e2-a53f52675817.dat\", \"/galaxy/server/database/objects/3/7/e/dataset_37e2ab14-fae2-40ff-9c9a-00b833028379.dat\"]}, {\"WT\": [\"/galaxy/server/database/objects/9/9/2/dataset_9922f09f-3fa9-408c-81b5-cb097b4459f7.dat\", \"/galaxy/server/database/objects/3/b/7/dataset_3b7cdc06-8b5b-43eb-8d51-eb9a9038373a.dat\", \"/galaxy/server/database/objects/4/e/6/dataset_4e639bd4-51d9-4811-876c-2cf2f7e26dd9.dat\"]}]], [\"Batch\", [{\"b3\": [\"/galaxy/server/database/objects/4/e/6/dataset_4e639bd4-51d9-4811-876c-2cf2f7e26dd9.dat\", \"/galaxy/server/database/objects/3/7/e/dataset_37e2ab14-fae2-40ff-9c9a-00b833028379.dat\"]}, {\"b2\": [\"/galaxy/server/database/objects/3/b/7/dataset_3b7cdc06-8b5b-43eb-8d51-eb9a9038373a.dat\", \"/galaxy/server/database/objects/a/4/e/dataset_a4ee9527-7f59-47ba-b1e2-a53f52675817.dat\"]}, {\"b1\": [\"/galaxy/server/database/objects/9/9/2/dataset_9922f09f-3fa9-408c-81b5-cb097b4459f7.dat\", \"/galaxy/server/database/objects/a/c/a/dataset_aca6fc31-823a-47cf-827a-c2bbdaa7cb34.dat\"]}]]]'   -a '/galaxy/server/database/objects/6/e/1/dataset_6e1cb259-77be-4fa1-806b-997835a94711.dat'  -D 'Mut-WT,WT-Mut'   -P i   -x     -l '0.0' -p '0.05' -d 'BH' -G '6'   -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/329/working/dataset_de11982c-6e00-49f2-8e2e-9079f4768ce8_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/329/working/dataset_de11982c-6e00-49f2-8e2e-9079f4768ce8_files'  && cp '/galaxy/server/database/jobs_directory/000/329/working/dataset_de11982c-6e00-49f2-8e2e-9079f4768ce8_files'/*counts output_dir/", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": false, \"libinfo\": false, \"normCounts\": true, \"plots\": \"i\", \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "cont": "{\"__current_case__\": 1, \"cfile\": \"no\", \"rep_contrast\": [{\"__index__\": 0, \"contrast\": \"Mut-WT\"}, {\"__index__\": 1, \"contrast\": \"WT-Mut\"}]}", "anno": "{\"__current_case__\": 0, \"annoOpt\": \"yes\", \"geneanno\": {\"values\": [{\"id\": 415, \"src\": \"hda\"}]}}", "input": "{\"__current_case__\": 0, \"format\": \"files\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"rep_group\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 407, \"src\": \"hda\"}, {\"id\": 410, \"src\": \"hda\"}, {\"id\": 412, \"src\": \"hda\"}]}, \"groupName\": \"WT\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 409, \"src\": \"hda\"}, {\"id\": 411, \"src\": \"hda\"}, {\"id\": 413, \"src\": \"hda\"}]}, \"groupName\": \"Mut\"}]}, {\"__index__\": 1, \"factorName\": \"Batch\", \"rep_group\": [{\"__index__\": 0, \"countsFile\": {\"values\": [{\"id\": 407, \"src\": \"hda\"}, {\"id\": 409, \"src\": \"hda\"}]}, \"groupName\": \"b1\"}, {\"__index__\": 1, \"countsFile\": {\"values\": [{\"id\": 410, \"src\": \"hda\"}, {\"id\": 411, \"src\": \"hda\"}]}, \"groupName\": \"b2\"}, {\"__index__\": 2, \"countsFile\": {\"values\": [{\"id\": 412, \"src\": \"hda\"}, {\"id\": 413, \"src\": \"hda\"}]}, \"groupName\": \"b3\"}]}]}", "deMethod": "{\"__current_case__\": 0, \"de_select\": \"voom\", \"weightOption\": false}"}, "inputs": {"input|rep_factor_0|rep_group_0|countsFile": {"id": "8ac843687f7b58b2", "src": "hda", "uuid": "9922f09f-3fa9-408c-81b5-cb097b4459f7"}, "input|rep_factor_0|rep_group_0|countsFile1": {"id": "8ac843687f7b58b2", "src": "hda", "uuid": "9922f09f-3fa9-408c-81b5-cb097b4459f7"}, "input|rep_factor_0|rep_group_0|countsFile2": {"id": "2baee3b4a2d12dde", "src": "hda", "uuid": "3b7cdc06-8b5b-43eb-8d51-eb9a9038373a"}, "input|rep_factor_0|rep_group_0|countsFile3": {"id": "81188a4c0be7a351", "src": "hda", "uuid": "4e639bd4-51d9-4811-876c-2cf2f7e26dd9"}, "input|rep_factor_0|rep_group_1|countsFile": {"id": "bfdeb03d73747478", "src": "hda", "uuid": "aca6fc31-823a-47cf-827a-c2bbdaa7cb34"}, "input|rep_factor_0|rep_group_1|countsFile1": {"id": "bfdeb03d73747478", "src": "hda", "uuid": "aca6fc31-823a-47cf-827a-c2bbdaa7cb34"}, "input|rep_factor_0|rep_group_1|countsFile2": {"id": "45953b1176961a89", "src": "hda", "uuid": "a4ee9527-7f59-47ba-b1e2-a53f52675817"}, "input|rep_factor_0|rep_group_1|countsFile3": {"id": "b44ec49d307a3e25", "src": "hda", "uuid": "37e2ab14-fae2-40ff-9c9a-00b833028379"}, "input|rep_factor_1|rep_group_0|countsFile": {"id": "8ac843687f7b58b2", "src": "hda", "uuid": "9922f09f-3fa9-408c-81b5-cb097b4459f7"}, "input|rep_factor_1|rep_group_0|countsFile1": {"id": "8ac843687f7b58b2", "src": "hda", "uuid": "9922f09f-3fa9-408c-81b5-cb097b4459f7"}, "input|rep_factor_1|rep_group_0|countsFile2": {"id": "bfdeb03d73747478", "src": "hda", "uuid": "aca6fc31-823a-47cf-827a-c2bbdaa7cb34"}, "input|rep_factor_1|rep_group_1|countsFile": {"id": "2baee3b4a2d12dde", "src": "hda", "uuid": "3b7cdc06-8b5b-43eb-8d51-eb9a9038373a"}, "input|rep_factor_1|rep_group_1|countsFile1": {"id": "2baee3b4a2d12dde", "src": "hda", "uuid": "3b7cdc06-8b5b-43eb-8d51-eb9a9038373a"}, "input|rep_factor_1|rep_group_1|countsFile2": {"id": "45953b1176961a89", "src": "hda", "uuid": "a4ee9527-7f59-47ba-b1e2-a53f52675817"}, "input|rep_factor_1|rep_group_2|countsFile": {"id": "81188a4c0be7a351", "src": "hda", "uuid": "4e639bd4-51d9-4811-876c-2cf2f7e26dd9"}, "input|rep_factor_1|rep_group_2|countsFile1": {"id": "81188a4c0be7a351", "src": "hda", "uuid": "4e639bd4-51d9-4811-876c-2cf2f7e26dd9"}, "input|rep_factor_1|rep_group_2|countsFile2": {"id": "b44ec49d307a3e25", "src": "hda", "uuid": "37e2ab14-fae2-40ff-9c9a-00b833028379"}, "geneanno": {"id": "87544dd584e5ecd3", "src": "hda", "uuid": "6e1cb259-77be-4fa1-806b-997835a94711"}}, "outputs": {"__new_primary_file_outTables|limma-voom_WT-Mut__": {"id": "183263513dd5100f", "src": "hda", "uuid": "0dedf77c-b1fa-4e6f-9db8-efb60093dbdb"}, "__new_primary_file_outTables|limma-voom_Mut-WT__": {"id": "04ae9c503aa1ff68", "src": "hda", "uuid": "e467d798-7815-4244-8734-94674eba78c7"}, "outNorm": {"id": "1cfbd0a2ef6c377e", "src": "hda", "uuid": "4535ac17-27ac-4da0-90d1-7e882cc4522e"}, "outReport": {"id": "d1d19e081204c344", "src": "hda", "uuid": "de11982c-6e00-49f2-8e2e-9079f4768ce8"}}, "output_collections": {"outTables": {"id": "35fe9d24b77789d9", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "25 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "25.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:58:21", "plugin": "core", "name": "end_epoch", "raw_value": "1684911501.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:57:56", "plugin": "core", "name": "start_epoch", "raw_value": "1684911476.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.50.1+galaxy0", "test_index": 7, "time_seconds": 97.60417294502258, "inputs": {"deMethod|de_select": "trend", "input|counts": {"src": "hda", "id": "487e4aa276aa6ff2"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "cont|rep_contrast_0|contrast": "Mut-WT", "cont|cfile": "no", "adv|topgenes": "6", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "c4903bc56f08adbc", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:58:29.146718", "create_time": "2023-05-24T06:57:53.724427", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-jjhsx", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/d6f5fa4ee473/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/d/b/4/dataset_db4e7349-aea4-4167-b518-40807bc70876.dat' -o '/galaxy/server/database/jobs_directory/000/330/working/dataset_db4e7349-aea4-4167-b518-40807bc70876_files'  -m '/galaxy/server/database/objects/0/e/7/dataset_0e74a262-466f-4f58-b8b8-b96b81a48898.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'   -D 'Mut-WT'   -P i       -l '0.0' -p '0.05' -d 'BH' -G '6'  -t 3.0  -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/330/working/dataset_db4e7349-aea4-4167-b518-40807bc70876_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/330/working/dataset_db4e7349-aea4-4167-b518-40807bc70876_files'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": false, \"libinfo\": false, \"normCounts\": false, \"plots\": \"i\", \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "cont": "{\"__current_case__\": 1, \"cfile\": \"no\", \"rep_contrast\": [{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]}", "anno": "{\"__current_case__\": 1, \"annoOpt\": \"no\"}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 414, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}", "deMethod": "{\"__current_case__\": 1, \"de_select\": \"trend\", \"prior_count\": \"3.0\"}"}, "inputs": {"counts": {"id": "487e4aa276aa6ff2", "src": "hda", "uuid": "0e74a262-466f-4f58-b8b8-b96b81a48898"}}, "outputs": {"__new_primary_file_outTables|limma-trend_Mut-WT__": {"id": "c0c2e484bb910050", "src": "hda", "uuid": "9da91b10-a5d6-4e72-b371-412d4fd270d8"}, "outReport": {"id": "dbc7bfd9ab87865b", "src": "hda", "uuid": "db4e7349-aea4-4167-b518-40807bc70876"}}, "output_collections": {"outTables": {"id": "ee3883317e0e3259", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "21 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "21.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:58:17", "plugin": "core", "name": "end_epoch", "raw_value": "1684911497.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:57:56", "plugin": "core", "name": "start_epoch", "raw_value": "1684911476.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0-8", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.50.1+galaxy0", "test_index": 8, "time_seconds": 64.87706446647644, "inputs": {"deMethod|de_select": "trend", "input|counts": {"src": "hda", "id": "04d6d034167eac3c"}, "input|fact|rep_factor_0|factorName": "Genotype", "input|fact|rep_factor_0|groupNames": "Mut,Mut,Mut,WT,WT,WT", "input|format": "matrix", "anno|geneanno": {"src": "hda", "id": "9a17b64a352d044a"}, "anno|annoOpt": "yes", "cont|rep_contrast_0|contrast": "Mut-WT", "cont|cfile": "no", "adv|topgenes": "6", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "37d0359c0a0b1dfb", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:59:34.102104", "create_time": "2023-05-24T06:58:51.036209", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-j64sq", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/d6f5fa4ee473/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/f/9/3/dataset_f939ce14-2077-440e-bade-0bf735a58c7f.dat' -o '/galaxy/server/database/jobs_directory/000/335/working/dataset_f939ce14-2077-440e-bade-0bf735a58c7f_files'  -m '/galaxy/server/database/objects/1/f/9/dataset_1f9e5e9d-c0e6-43eb-aa0b-43ff3fdea2ad.dat' -i 'Genotype::Mut,Mut,Mut,WT,WT,WT'  -a '/galaxy/server/database/objects/2/b/7/dataset_2b741867-d7a4-4eaf-a4e0-632da9c2942b.dat'  -D 'Mut-WT'   -P i       -l '0.0' -p '0.05' -d 'BH' -G '6'  -t 3.0  -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/335/working/dataset_f939ce14-2077-440e-bade-0bf735a58c7f_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/335/working/dataset_f939ce14-2077-440e-bade-0bf735a58c7f_files'", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": false, \"libinfo\": false, \"normCounts\": false, \"plots\": \"i\", \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 1, \"filt_select\": \"no\"}}", "cont": "{\"__current_case__\": 1, \"cfile\": \"no\", \"rep_contrast\": [{\"__index__\": 0, \"contrast\": \"Mut-WT\"}]}", "anno": "{\"__current_case__\": 0, \"annoOpt\": \"yes\", \"geneanno\": {\"values\": [{\"id\": 425, \"src\": \"hda\"}]}}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 420, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Genotype\", \"groupNames\": \"Mut,Mut,Mut,WT,WT,WT\"}]}, \"format\": \"matrix\"}", "deMethod": "{\"__current_case__\": 1, \"de_select\": \"trend\", \"prior_count\": \"3.0\"}"}, "inputs": {"counts": {"id": "04d6d034167eac3c", "src": "hda", "uuid": "1f9e5e9d-c0e6-43eb-aa0b-43ff3fdea2ad"}, "geneanno": {"id": "9a17b64a352d044a", "src": "hda", "uuid": "2b741867-d7a4-4eaf-a4e0-632da9c2942b"}}, "outputs": {"__new_primary_file_outTables|limma-trend_Mut-WT__": {"id": "0123f9b7a0427950", "src": "hda", "uuid": "e9cd42f5-1836-4352-b4b2-685d11e37586"}, "outReport": {"id": "5a42a6ecf051dc9b", "src": "hda", "uuid": "f939ce14-2077-440e-bade-0bf735a58c7f"}}, "output_collections": {"outTables": {"id": "96dcf37f3f24b634", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "23 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "23.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:59:22", "plugin": "core", "name": "end_epoch", "raw_value": "1684911562.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:58:59", "plugin": "core", "name": "start_epoch", "raw_value": "1684911539.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0-9", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom", "tool_version": "3.50.1+galaxy0", "test_index": 9, "time_seconds": 61.2267382144928, "inputs": {"deMethod|de_select": "voom", "input|counts": {"src": "hda", "id": "99772077ecff518c"}, "input|fact|rep_factor_0|factorName": "Group", "input|fact|rep_factor_0|groupNames": "2,2,2,1,1,1", "input|format": "matrix", "anno|geneanno": {"src": "hda", "id": "9a17b64a352d044a"}, "anno|annoOpt": "yes", "cont|rep_contrast_0|contrast": "2-1", "cont|cfile": "no", "f|filt|cformat|cntReq": "10", "f|filt|cformat|samples|cntSampleReq": "3", "f|filt|cformat|samples|count_select": "sample", "f|filt|cformat|format_select": "counts", "f|filt|filt_select": "yes", "out|normCounts": true, "adv|topgenes": "6", "adv|normalisationOption": "TMM"}, "job": {"model_class": "Job", "id": "314ebb797a53c0ef", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:59:35.461084", "create_time": "2023-05-24T06:58:57.329914", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/limma_voom/3.50.1+galaxy0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-lbzr7", "command_line": "Rscript '/cvmfs/cloud.galaxyproject.org/tools/toolshed.g2.bx.psu.edu/repos/iuc/limma_voom/d6f5fa4ee473/limma_voom/limma_voom.R'  -R '/galaxy/server/database/objects/0/9/4/dataset_094359ec-9063-4e76-8275-b6348695a02f.dat' -o '/galaxy/server/database/jobs_directory/000/336/working/dataset_094359ec-9063-4e76-8275-b6348695a02f_files'  -m '/galaxy/server/database/objects/a/7/5/dataset_a75a98a6-a754-4e2f-a703-3d2177aa57bf.dat' -i 'Group::2,2,2,1,1,1'  -a '/galaxy/server/database/objects/2/b/7/dataset_2b741867-d7a4-4eaf-a4e0-632da9c2942b.dat'  -D '2-1'  -z '10' -s '3'  -P i   -x     -l '0.0' -p '0.05' -d 'BH' -G '6'   -n 'TMM'  -b  && mkdir ./output_dir  && cp '/galaxy/server/database/jobs_directory/000/336/working/dataset_094359ec-9063-4e76-8275-b6348695a02f_files'/*tsv output_dir/  && cp -r ./glimma* '/galaxy/server/database/jobs_directory/000/336/working/dataset_094359ec-9063-4e76-8275-b6348695a02f_files'  && cp '/galaxy/server/database/jobs_directory/000/336/working/dataset_094359ec-9063-4e76-8275-b6348695a02f_files'/*counts output_dir/", "traceback": null, "params": {"__input_ext": "\"tabular\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"lfc\": \"0.0\", \"normalisationOption\": \"TMM\", \"pAdjust\": \"BH\", \"pVal\": \"0.05\", \"robOption\": true, \"topgenes\": \"6\", \"treat\": false}", "out": "{\"filtCounts\": false, \"libinfo\": false, \"normCounts\": true, \"plots\": \"i\", \"rdaOption\": false, \"rscript\": false}", "f": "{\"filt\": {\"__current_case__\": 0, \"cformat\": {\"__current_case__\": 1, \"cntReq\": \"10\", \"format_select\": \"counts\", \"samples\": {\"__current_case__\": 1, \"cntSampleReq\": \"3\", \"count_select\": \"sample\"}}, \"filt_select\": \"yes\"}}", "cont": "{\"__current_case__\": 1, \"cfile\": \"no\", \"rep_contrast\": [{\"__index__\": 0, \"contrast\": \"2-1\"}]}", "anno": "{\"__current_case__\": 0, \"annoOpt\": \"yes\", \"geneanno\": {\"values\": [{\"id\": 425, \"src\": \"hda\"}]}}", "input": "{\"__current_case__\": 1, \"counts\": {\"values\": [{\"id\": 424, \"src\": \"hda\"}]}, \"fact\": {\"__current_case__\": 1, \"ffile\": \"no\", \"rep_factor\": [{\"__index__\": 0, \"factorName\": \"Group\", \"groupNames\": \"2,2,2,1,1,1\"}]}, \"format\": \"matrix\"}", "deMethod": "{\"__current_case__\": 0, \"de_select\": \"voom\", \"weightOption\": false}"}, "inputs": {"counts": {"id": "99772077ecff518c", "src": "hda", "uuid": "a75a98a6-a754-4e2f-a703-3d2177aa57bf"}, "geneanno": {"id": "9a17b64a352d044a", "src": "hda", "uuid": "2b741867-d7a4-4eaf-a4e0-632da9c2942b"}}, "outputs": {"__new_primary_file_outTables|limma-voom_X2-X1__": {"id": "b4fd186fdb55b59a", "src": "hda", "uuid": "da4c6ac2-14ab-4fe4-b513-af2d1d63bf32"}, "outNorm": {"id": "632b169742fc4a45", "src": "hda", "uuid": "757f26e3-0dc7-44af-bac8-2f52596cccbd"}, "outReport": {"id": "cf94514e77d1b9a7", "src": "hda", "uuid": "094359ec-9063-4e76-8275-b6348695a02f"}}, "output_collections": {"outTables": {"id": "29d933387653c81d", "src": "hdca"}}, "tool_stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "[1] \"Extracting counts\"\n[1] \"Generating DGEList object\"\n[1] \"Generating Design\"\n[1] \"Calculating Normalisation Factors\"\n[1] \"Generating Contrasts\"\n[1] \"Generating MDS plot\"\n[1] \"Generating DE results\"\n", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "23 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "23.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:59:23", "plugin": "core", "name": "end_epoch", "raw_value": "1684911563.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:59:00", "plugin": "core", "name": "start_epoch", "raw_value": "1684911540.0000000"}, {"title": "Memory Allocated (MB)", "value": "4294", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4294.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_extract/poretools_extract/0.6.1a1.0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_extract/poretools_extract", "tool_version": "0.6.1a1.0", "test_index": 0, "time_seconds": 32.36885857582092, "inputs": {"input": {"src": "hda", "id": "4a88035153121c8b"}, "output_format": "fastq"}, "job": {"model_class": "Job", "id": "f3faedbdcdd1fb8a", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:23:57.282292", "create_time": "2023-05-24T06:23:43.074105", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_extract/poretools_extract/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-4rsrn", "command_line": "poretools fastq --type all --min-length 0 --max-length 1000000000  '/galaxy/server/database/objects/4/3/a/dataset_43ab4b5b-473a-4706-bb3e-7afe5f779533.dat' > '/galaxy/server/database/objects/6/0/6/dataset_606550d3-6562-482c-99e9-d2398ec4df75.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "end": "\"\"", "start": "\"\"", "group": "\"\"", "quality": "\"\"", "type": "\"all\"", "max_length": "\"1000000000\"", "min_length": "\"0\"", "output_format": "\"fastq\""}, "inputs": {"input": {"id": "4a88035153121c8b", "src": "hda", "uuid": "43ab4b5b-473a-4706-bb3e-7afe5f779533"}}, "outputs": {"output": {"id": "f3faedbdcdd1fb8a", "src": "hda", "uuid": "606550d3-6562-482c-99e9-d2398ec4df75"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 06:23:46", "plugin": "core", "name": "end_epoch", "raw_value": "1684909426.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:23:46", "plugin": "core", "name": "start_epoch", "raw_value": "1684909426.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_extract/poretools_extract/0.6.1a1.0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_extract/poretools_extract", "tool_version": "0.6.1a1.0", "test_index": 1, "time_seconds": 28.72037959098816, "inputs": {"input": {"src": "hda", "id": "87436db90a4c4a6c"}, "output_format": "fasta"}, "job": {"model_class": "Job", "id": "76db08f67f5a78ca", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:24:25.345910", "create_time": "2023-05-24T06:24:12.084175", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_extract/poretools_extract/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-h5fj2", "command_line": "poretools fasta --type all --min-length 0 --max-length 1000000000  '/galaxy/server/database/objects/1/a/c/dataset_1ac38dc7-d25d-4920-b0cd-dc3d1932ba1e.dat' > '/galaxy/server/database/objects/2/9/4/dataset_294f32e9-369e-41e8-babb-e175dd0eb14c.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "end": "\"\"", "start": "\"\"", "group": "\"\"", "quality": "\"\"", "type": "\"all\"", "max_length": "\"1000000000\"", "min_length": "\"0\"", "output_format": "\"fasta\""}, "inputs": {"input": {"id": "87436db90a4c4a6c", "src": "hda", "uuid": "1ac38dc7-d25d-4920-b0cd-dc3d1932ba1e"}}, "outputs": {"output": {"id": "76db08f67f5a78ca", "src": "hda", "uuid": "294f32e9-369e-41e8-babb-e175dd0eb14c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:24:14", "plugin": "core", "name": "end_epoch", "raw_value": "1684909454.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:24:13", "plugin": "core", "name": "start_epoch", "raw_value": "1684909453.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_nucdist/poretools_nucdist/0.6.1a1.0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_nucdist/poretools_nucdist", "tool_version": "0.6.1a1.0", "test_index": 0, "time_seconds": 31.706637859344482, "inputs": {"input": {"src": "hda", "id": "79889f30d94b8833"}}, "job": {"model_class": "Job", "id": "48163d57ea9c7058", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:23:23.823787", "create_time": "2023-05-24T06:23:10.271213", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_nucdist/poretools_nucdist/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-4plcb", "command_line": "poretools nucdist '/galaxy/server/database/objects/4/b/f/dataset_4bfe7c0c-360a-441c-b85b-e0b5ed973b0e.dat' > '/galaxy/server/database/objects/d/e/7/dataset_de7db469-226f-490e-9971-ab194a6078a5.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input": {"id": "79889f30d94b8833", "src": "hda", "uuid": "4bfe7c0c-360a-441c-b85b-e0b5ed973b0e"}}, "outputs": {"output": {"id": "48163d57ea9c7058", "src": "hda", "uuid": "de7db469-226f-490e-9971-ab194a6078a5"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:23:12", "plugin": "core", "name": "start_epoch", "raw_value": "1684909392.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:23:13", "plugin": "core", "name": "end_epoch", "raw_value": "1684909393.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_nucdist/poretools_nucdist/0.6.1a1.0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_nucdist/poretools_nucdist", "tool_version": "0.6.1a1.0", "test_index": 1, "time_seconds": 32.31112313270569, "inputs": {"input": {"src": "hda", "id": "4a88035153121c8b"}}, "job": {"model_class": "Job", "id": "c50009f6b118553e", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:23:56.230607", "create_time": "2023-05-24T06:23:40.933316", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_nucdist/poretools_nucdist/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-hvfzm", "command_line": "poretools nucdist '/galaxy/server/database/objects/4/3/a/dataset_43ab4b5b-473a-4706-bb3e-7afe5f779533.dat' > '/galaxy/server/database/objects/f/5/2/dataset_f52e2b38-ce00-4dea-bb21-8bb9d3218f1f.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input": {"id": "4a88035153121c8b", "src": "hda", "uuid": "43ab4b5b-473a-4706-bb3e-7afe5f779533"}}, "outputs": {"output": {"id": "c50009f6b118553e", "src": "hda", "uuid": "f52e2b38-ce00-4dea-bb21-8bb9d3218f1f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:23:45", "plugin": "core", "name": "end_epoch", "raw_value": "1684909425.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:23:44", "plugin": "core", "name": "start_epoch", "raw_value": "1684909424.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_qualdist/poretools_qualdist/0.6.1a1.0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_qualdist/poretools_qualdist", "tool_version": "0.6.1a1.0", "test_index": 0, "time_seconds": 32.56438088417053, "inputs": {"input": {"src": "hda", "id": "1b6a52e43b796ca4"}}, "job": {"model_class": "Job", "id": "8f277d611a576ce8", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:22:52.058268", "create_time": "2023-05-24T06:22:38.469988", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_qualdist/poretools_qualdist/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-5mwkq", "command_line": "poretools qualdist '/galaxy/server/database/objects/7/3/8/dataset_73805eae-9403-40ed-be33-34c2ddcefa9c.dat' > '/galaxy/server/database/objects/1/6/3/dataset_1637fe3f-9878-427f-a1ec-4973c0c3ca46.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input": {"id": "1b6a52e43b796ca4", "src": "hda", "uuid": "73805eae-9403-40ed-be33-34c2ddcefa9c"}}, "outputs": {"output": {"id": "8f277d611a576ce8", "src": "hda", "uuid": "1637fe3f-9878-427f-a1ec-4973c0c3ca46"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:22:41", "plugin": "core", "name": "start_epoch", "raw_value": "1684909361.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:22:42", "plugin": "core", "name": "end_epoch", "raw_value": "1684909362.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_qualdist/poretools_qualdist/0.6.1a1.0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_qualdist/poretools_qualdist", "tool_version": "0.6.1a1.0", "test_index": 1, "time_seconds": 33.114192485809326, "inputs": {"input": {"src": "hda", "id": "79889f30d94b8833"}}, "job": {"model_class": "Job", "id": "cacd7e49bc6ce74e", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:23:24.864903", "create_time": "2023-05-24T06:23:10.528977", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_qualdist/poretools_qualdist/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-knxfc", "command_line": "poretools qualdist '/galaxy/server/database/objects/4/b/f/dataset_4bfe7c0c-360a-441c-b85b-e0b5ed973b0e.dat' > '/galaxy/server/database/objects/c/1/4/dataset_c149cc54-1f5e-45f8-aefc-002460eea46f.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input": {"id": "79889f30d94b8833", "src": "hda", "uuid": "4bfe7c0c-360a-441c-b85b-e0b5ed973b0e"}}, "outputs": {"output": {"id": "cacd7e49bc6ce74e", "src": "hda", "uuid": "c149cc54-1f5e-45f8-aefc-002460eea46f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:23:14", "plugin": "core", "name": "start_epoch", "raw_value": "1684909394.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:23:14", "plugin": "core", "name": "end_epoch", "raw_value": "1684909394.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats/0.6.1a1.0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats", "tool_version": "0.6.1a1.0", "test_index": 0, "time_seconds": 32.16355299949646, "inputs": {"input": {"src": "hda", "id": "f8098725d2c53169"}, "detailed": true, "type": "fwd"}, "job": {"model_class": "Job", "id": "999172a4fc2df6cd", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:21:47.556940", "create_time": "2023-05-24T06:21:31.639437", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-znrtl", "command_line": "poretools stats --type fwd --full-tsv '/galaxy/server/database/objects/b/c/f/dataset_bcf49c7b-3a5f-4e6b-8a77-9b483ed277ac.dat' > '/galaxy/server/database/objects/c/a/a/dataset_caaf30cb-1e57-43b0-a039-a84896b59e72.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"fwd\"", "detailed": "true"}, "inputs": {"input": {"id": "f8098725d2c53169", "src": "hda", "uuid": "bcf49c7b-3a5f-4e6b-8a77-9b483ed277ac"}}, "outputs": {"output": {"id": "999172a4fc2df6cd", "src": "hda", "uuid": "caaf30cb-1e57-43b0-a039-a84896b59e72"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 06:21:36", "plugin": "core", "name": "end_epoch", "raw_value": "1684909296.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:21:36", "plugin": "core", "name": "start_epoch", "raw_value": "1684909296.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats/0.6.1a1.0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats", "tool_version": "0.6.1a1.0", "test_index": 1, "time_seconds": 32.17084860801697, "inputs": {"input": {"src": "hda", "id": "f8098725d2c53169"}, "detailed": false, "type": "rev"}, "job": {"model_class": "Job", "id": "7245e8c26b4b31b8", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:21:48.603181", "create_time": "2023-05-24T06:21:33.767563", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-tjkjm", "command_line": "poretools stats --type rev  '/galaxy/server/database/objects/b/c/f/dataset_bcf49c7b-3a5f-4e6b-8a77-9b483ed277ac.dat' > '/galaxy/server/database/objects/a/d/e/dataset_ade765c2-4ef9-4cb8-aa8b-ab6d0f1741ac.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"rev\"", "detailed": "false"}, "inputs": {"input": {"id": "f8098725d2c53169", "src": "hda", "uuid": "bcf49c7b-3a5f-4e6b-8a77-9b483ed277ac"}}, "outputs": {"output": {"id": "7245e8c26b4b31b8", "src": "hda", "uuid": "ade765c2-4ef9-4cb8-aa8b-ab6d0f1741ac"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:21:38", "plugin": "core", "name": "end_epoch", "raw_value": "1684909298.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:21:37", "plugin": "core", "name": "start_epoch", "raw_value": "1684909297.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats/0.6.1a1.0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats", "tool_version": "0.6.1a1.0", "test_index": 2, "time_seconds": 31.86173701286316, "inputs": {"input": {"src": "hda", "id": "456e6f43cf3ba505"}, "detailed": true, "type": "2D"}, "job": {"model_class": "Job", "id": "2f185f8433332586", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:22:19.558088", "create_time": "2023-05-24T06:22:05.357154", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-hw79l", "command_line": "poretools stats --type 2D --full-tsv '/galaxy/server/database/objects/c/c/0/dataset_cc0e9144-58fd-4900-86f0-8a8a51158b43.dat' > '/galaxy/server/database/objects/f/2/0/dataset_f20f2530-c90d-4285-8890-b699de291aa7.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"2D\"", "detailed": "true"}, "inputs": {"input": {"id": "456e6f43cf3ba505", "src": "hda", "uuid": "cc0e9144-58fd-4900-86f0-8a8a51158b43"}}, "outputs": {"output": {"id": "2f185f8433332586", "src": "hda", "uuid": "f20f2530-c90d-4285-8890-b699de291aa7"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:22:08", "plugin": "core", "name": "start_epoch", "raw_value": "1684909328.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:22:09", "plugin": "core", "name": "end_epoch", "raw_value": "1684909329.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats/0.6.1a1.0-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats", "tool_version": "0.6.1a1.0", "test_index": 3, "time_seconds": 30.799320459365845, "inputs": {"input": {"src": "hda", "id": "456e6f43cf3ba505"}, "detailed": false, "type": "best"}, "job": {"model_class": "Job", "id": "ac3a4802d8598882", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:22:19.512523", "create_time": "2023-05-24T06:22:06.427307", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-xvmgw", "command_line": "poretools stats --type best  '/galaxy/server/database/objects/c/c/0/dataset_cc0e9144-58fd-4900-86f0-8a8a51158b43.dat' > '/galaxy/server/database/objects/e/8/0/dataset_e80975ff-2f23-4fd1-abc3-799bcf07925c.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"best\"", "detailed": "false"}, "inputs": {"input": {"id": "456e6f43cf3ba505", "src": "hda", "uuid": "cc0e9144-58fd-4900-86f0-8a8a51158b43"}}, "outputs": {"output": {"id": "ac3a4802d8598882", "src": "hda", "uuid": "e80975ff-2f23-4fd1-abc3-799bcf07925c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:22:09", "plugin": "core", "name": "start_epoch", "raw_value": "1684909329.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:22:10", "plugin": "core", "name": "end_epoch", "raw_value": "1684909330.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats/0.6.1a1.0-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats", "tool_version": "0.6.1a1.0", "test_index": 4, "time_seconds": 32.151490449905396, "inputs": {"input": {"src": "hda", "id": "1b6a52e43b796ca4"}, "detailed": true, "type": "all"}, "job": {"model_class": "Job", "id": "ba3b448635f8b411", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:22:51.971982", "create_time": "2023-05-24T06:22:37.405621", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_stats/poretools_stats/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-p5pkr", "command_line": "poretools stats --type all --full-tsv '/galaxy/server/database/objects/7/3/8/dataset_73805eae-9403-40ed-be33-34c2ddcefa9c.dat' > '/galaxy/server/database/objects/1/8/0/dataset_18060adb-a4ce-4dbf-a563-b8c3ad531814.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\"", "detailed": "true"}, "inputs": {"input": {"id": "1b6a52e43b796ca4", "src": "hda", "uuid": "73805eae-9403-40ed-be33-34c2ddcefa9c"}}, "outputs": {"output": {"id": "ba3b448635f8b411", "src": "hda", "uuid": "18060adb-a4ce-4dbf-a563-b8c3ad531814"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:22:41", "plugin": "core", "name": "start_epoch", "raw_value": "1684909361.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:22:42", "plugin": "core", "name": "end_epoch", "raw_value": "1684909362.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 0, "time_seconds": 32.71454572677612, "inputs": {"input": {"src": "hda", "id": "e5c5ae151f334a20"}}, "job": {"model_class": "Job", "id": "ee3883317e0e3259", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:20:11.109613", "create_time": "2023-05-24T06:19:57.856062", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-gzcng", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/7/9/c/dataset_79c882bd-e73d-4131-ac51-cbd0bb6d2528.dat' > '/galaxy/server/database/objects/e/b/4/dataset_eb4123c8-df93-45dc-a2d3-a197b3ec134c.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "e5c5ae151f334a20", "src": "hda", "uuid": "79c882bd-e73d-4131-ac51-cbd0bb6d2528"}}, "outputs": {"output": {"id": "ee3883317e0e3259", "src": "hda", "uuid": "eb4123c8-df93-45dc-a2d3-a197b3ec134c"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:20:00", "plugin": "core", "name": "start_epoch", "raw_value": "1684909200.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:20:01", "plugin": "core", "name": "end_epoch", "raw_value": "1684909201.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 1, "time_seconds": 31.10948371887207, "inputs": {"input": {"src": "hda", "id": "29d933387653c81d"}}, "job": {"model_class": "Job", "id": "9b34b465b6d2f7a9", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:20:42.558829", "create_time": "2023-05-24T06:20:29.672346", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-qhl98", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/2/0/3/dataset_203460f4-4479-4899-92cb-4bdacf950fea.dat' > '/galaxy/server/database/objects/3/2/6/dataset_32683697-401a-4fce-93b3-a46dbd97e7b4.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "29d933387653c81d", "src": "hda", "uuid": "203460f4-4479-4899-92cb-4bdacf950fea"}}, "outputs": {"output": {"id": "9b34b465b6d2f7a9", "src": "hda", "uuid": "32683697-401a-4fce-93b3-a46dbd97e7b4"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:20:32", "plugin": "core", "name": "start_epoch", "raw_value": "1684909232.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:20:32", "plugin": "core", "name": "end_epoch", "raw_value": "1684909232.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 2, "time_seconds": 33.62761449813843, "inputs": {"input": {"src": "hda", "id": "29d933387653c81d"}}, "job": {"model_class": "Job", "id": "3c77f47af76a9ae3", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:20:44.819192", "create_time": "2023-05-24T06:20:30.743391", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-ntblq", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/2/0/3/dataset_203460f4-4479-4899-92cb-4bdacf950fea.dat' > '/galaxy/server/database/objects/4/7/7/dataset_477c2aaf-aecb-4003-bcf6-4d05e9129013.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "29d933387653c81d", "src": "hda", "uuid": "203460f4-4479-4899-92cb-4bdacf950fea"}}, "outputs": {"output": {"id": "3c77f47af76a9ae3", "src": "hda", "uuid": "477c2aaf-aecb-4003-bcf6-4d05e9129013"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:20:34", "plugin": "core", "name": "start_epoch", "raw_value": "1684909234.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:20:35", "plugin": "core", "name": "end_epoch", "raw_value": "1684909235.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 3, "time_seconds": 32.877317905426025, "inputs": {"input": {"src": "hda", "id": "21158c161401efd7"}}, "job": {"model_class": "Job", "id": "67f67715b315061a", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:21:15.532461", "create_time": "2023-05-24T06:20:59.427009", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-pkzhx", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/b/a/a/dataset_baa74074-1265-44e8-9fa5-112357a10a8f.dat' > '/galaxy/server/database/objects/3/f/6/dataset_3f694e2f-0b77-43c7-a2ae-995e6aafd1ac.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "21158c161401efd7", "src": "hda", "uuid": "baa74074-1265-44e8-9fa5-112357a10a8f"}}, "outputs": {"output": {"id": "67f67715b315061a", "src": "hda", "uuid": "3f694e2f-0b77-43c7-a2ae-995e6aafd1ac"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:21:04", "plugin": "core", "name": "start_epoch", "raw_value": "1684909264.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:21:05", "plugin": "core", "name": "end_epoch", "raw_value": "1684909265.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular", "tool_version": "0.6.1a1.0", "test_index": 4, "time_seconds": 31.390588760375977, "inputs": {"input": {"src": "hda", "id": "21158c161401efd7"}}, "job": {"model_class": "Job", "id": "58bb5b159866dd0c", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:21:16.500219", "create_time": "2023-05-24T06:21:02.342700", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_tabular/poretools_tabular/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-mb5k5", "command_line": "poretools tabular --type all '/galaxy/server/database/objects/b/a/a/dataset_baa74074-1265-44e8-9fa5-112357a10a8f.dat' > '/galaxy/server/database/objects/1/0/d/dataset_10df741a-b387-4ad9-9766-771564934201.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "21158c161401efd7", "src": "hda", "uuid": "baa74074-1265-44e8-9fa5-112357a10a8f"}}, "outputs": {"output": {"id": "58bb5b159866dd0c", "src": "hda", "uuid": "10df741a-b387-4ad9-9766-771564934201"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:21:05", "plugin": "core", "name": "start_epoch", "raw_value": "1684909265.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:21:06", "plugin": "core", "name": "end_epoch", "raw_value": "1684909266.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times/0.6.1a1.0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times", "tool_version": "0.6.1a1.0", "test_index": 0, "time_seconds": 35.80089831352234, "inputs": {"input": {"src": "hda", "id": "03a8c195d50aa2bd"}}, "job": {"model_class": "Job", "id": "deb29ac712199319", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:19:05.802985", "create_time": "2023-05-24T06:18:46.427393", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-vp25d", "command_line": "poretools times --utc '/galaxy/server/database/objects/a/e/e/dataset_aee30c22-148d-4b19-8856-554a2a97776c.dat' > '/galaxy/server/database/objects/b/f/5/dataset_bf5775be-fd1c-4543-bb91-79e71eef25df.dat'", "traceback": null, "params": {"chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fast5.tar\""}, "inputs": {"input": {"id": "03a8c195d50aa2bd", "src": "hda", "uuid": "aee30c22-148d-4b19-8856-554a2a97776c"}}, "outputs": {"output": {"id": "deb29ac712199319", "src": "hda", "uuid": "bf5775be-fd1c-4543-bb91-79e71eef25df"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:18:56", "plugin": "core", "name": "end_epoch", "raw_value": "1684909136.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:18:55", "plugin": "core", "name": "start_epoch", "raw_value": "1684909135.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times/0.6.1a1.0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times", "tool_version": "0.6.1a1.0", "test_index": 1, "time_seconds": 29.261189699172974, "inputs": {"input": {"src": "hda", "id": "03a8c195d50aa2bd"}}, "job": {"model_class": "Job", "id": "105b20d9c37e0641", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:19:04.825920", "create_time": "2023-05-24T06:18:52.528961", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-74n7q", "command_line": "poretools times --utc '/galaxy/server/database/objects/a/e/e/dataset_aee30c22-148d-4b19-8856-554a2a97776c.dat' > '/galaxy/server/database/objects/b/0/f/dataset_b0f3557c-6bfe-4cee-965d-097579e703d0.dat'", "traceback": null, "params": {"chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "dbkey": "\"?\"", "__input_ext": "\"fast5.tar\""}, "inputs": {"input": {"id": "03a8c195d50aa2bd", "src": "hda", "uuid": "aee30c22-148d-4b19-8856-554a2a97776c"}}, "outputs": {"output": {"id": "105b20d9c37e0641", "src": "hda", "uuid": "b0f3557c-6bfe-4cee-965d-097579e703d0"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:18:55", "plugin": "core", "name": "end_epoch", "raw_value": "1684909135.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:18:54", "plugin": "core", "name": "start_epoch", "raw_value": "1684909134.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times/0.6.1a1.0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times", "tool_version": "0.6.1a1.0", "test_index": 2, "time_seconds": 33.509145736694336, "inputs": {"input": {"src": "hda", "id": "bce4a6158e540f2e"}}, "job": {"model_class": "Job", "id": "2de07a667f8d9d98", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:19:38.278091", "create_time": "2023-05-24T06:19:20.058466", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-2kbgg", "command_line": "poretools times --utc '/galaxy/server/database/objects/3/a/4/dataset_3a452014-536c-4992-b887-07f943a3cde5.dat' > '/galaxy/server/database/objects/5/c/3/dataset_5c39800b-c31f-4105-8e96-6d0d218a2d3d.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input": {"id": "bce4a6158e540f2e", "src": "hda", "uuid": "3a452014-536c-4992-b887-07f943a3cde5"}}, "outputs": {"output": {"id": "2de07a667f8d9d98", "src": "hda", "uuid": "5c39800b-c31f-4105-8e96-6d0d218a2d3d"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:19:27", "plugin": "core", "name": "end_epoch", "raw_value": "1684909167.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:19:26", "plugin": "core", "name": "start_epoch", "raw_value": "1684909166.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times/0.6.1a1.0-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times", "tool_version": "0.6.1a1.0", "test_index": 3, "time_seconds": 32.4084370136261, "inputs": {"input": {"src": "hda", "id": "bce4a6158e540f2e"}}, "job": {"model_class": "Job", "id": "9526bbb311293e42", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:19:38.319923", "create_time": "2023-05-24T06:19:23.673013", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-2whcx", "command_line": "poretools times --utc '/galaxy/server/database/objects/3/a/4/dataset_3a452014-536c-4992-b887-07f943a3cde5.dat' > '/galaxy/server/database/objects/9/0/a/dataset_90a760c5-c2ac-4502-b483-da0a44b525e0.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input": {"id": "bce4a6158e540f2e", "src": "hda", "uuid": "3a452014-536c-4992-b887-07f943a3cde5"}}, "outputs": {"output": {"id": "9526bbb311293e42", "src": "hda", "uuid": "90a760c5-c2ac-4502-b483-da0a44b525e0"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:19:28", "plugin": "core", "name": "end_epoch", "raw_value": "1684909168.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:19:27", "plugin": "core", "name": "start_epoch", "raw_value": "1684909167.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times/0.6.1a1.0-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times", "tool_version": "0.6.1a1.0", "test_index": 4, "time_seconds": 32.7028751373291, "inputs": {"input": {"src": "hda", "id": "e5c5ae151f334a20"}}, "job": {"model_class": "Job", "id": "35fe9d24b77789d9", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:20:11.157703", "create_time": "2023-05-24T06:19:56.736496", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_times/poretools_times/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-l428v", "command_line": "poretools times --utc '/galaxy/server/database/objects/7/9/c/dataset_79c882bd-e73d-4131-ac51-cbd0bb6d2528.dat' > '/galaxy/server/database/objects/b/0/8/dataset_b08cb30f-9a98-478f-923c-383f9c0d3c52.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\""}, "inputs": {"input": {"id": "e5c5ae151f334a20", "src": "hda", "uuid": "79c882bd-e73d-4131-ac51-cbd0bb6d2528"}}, "outputs": {"output": {"id": "35fe9d24b77789d9", "src": "hda", "uuid": "b08cb30f-9a98-478f-923c-383f9c0d3c52"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:19:58", "plugin": "core", "name": "start_epoch", "raw_value": "1684909198.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:19:59", "plugin": "core", "name": "end_epoch", "raw_value": "1684909199.0000000"}, {"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_winner/poretools_winner/0.6.1a1.0-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_winner/poretools_winner", "tool_version": "0.6.1a1.0", "test_index": 0, "time_seconds": 110.34619188308716, "inputs": {"input": {"src": "hda", "id": "e932996d9d4ec006"}}, "job": {"model_class": "Job", "id": "95ccbd7a3e941ce6", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:18:03.095310", "create_time": "2023-05-24T06:16:41.468803", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_winner/poretools_winner/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-54rtz", "command_line": "poretools winner --type all '/galaxy/server/database/objects/a/e/6/dataset_ae60bccd-2794-4469-b21b-7b124ba94637.dat' > '/galaxy/server/database/objects/3/7/4/dataset_374377a3-93ee-4266-a363-de7717309aa7.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "e932996d9d4ec006", "src": "hda", "uuid": "ae60bccd-2794-4469-b21b-7b124ba94637"}}, "outputs": {"output": {"id": "95ccbd7a3e941ce6", "src": "hda", "uuid": "374377a3-93ee-4266-a363-de7717309aa7"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:17:46", "plugin": "core", "name": "end_epoch", "raw_value": "1684909066.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:17:45", "plugin": "core", "name": "start_epoch", "raw_value": "1684909065.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_winner/poretools_winner/0.6.1a1.0-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_winner/poretools_winner", "tool_version": "0.6.1a1.0", "test_index": 1, "time_seconds": 110.44744229316711, "inputs": {"input": {"src": "hda", "id": "e932996d9d4ec006"}}, "job": {"model_class": "Job", "id": "ddabecd1cf92c1d4", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:18:03.078684", "create_time": "2023-05-24T06:16:41.314908", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_winner/poretools_winner/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-jbrv5", "command_line": "poretools winner --type all '/galaxy/server/database/objects/a/e/6/dataset_ae60bccd-2794-4469-b21b-7b124ba94637.dat' > '/galaxy/server/database/objects/1/b/3/dataset_1b31af4a-7d10-47f0-82ea-18b2c8c02b65.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "e932996d9d4ec006", "src": "hda", "uuid": "ae60bccd-2794-4469-b21b-7b124ba94637"}}, "outputs": {"output": {"id": "ddabecd1cf92c1d4", "src": "hda", "uuid": "1b31af4a-7d10-47f0-82ea-18b2c8c02b65"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:17:46", "plugin": "core", "name": "end_epoch", "raw_value": "1684909066.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:17:45", "plugin": "core", "name": "start_epoch", "raw_value": "1684909065.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_winner/poretools_winner/0.6.1a1.0-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_winner/poretools_winner", "tool_version": "0.6.1a1.0", "test_index": 2, "time_seconds": 26.794950485229492, "inputs": {"input": {"src": "hda", "id": "582fed4802e3f2cd"}}, "job": {"model_class": "Job", "id": "f8314ceccf91d540", "state": "error", "exit_code": null, "update_time": "2023-05-24T06:18:30.324315", "create_time": "2023-05-24T06:18:20.930666", "galaxy_version": "23.0", "command_version": null, "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_winner/poretools_winner/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-xkpcq", "command_line": "poretools winner --type all '/galaxy/server/database/objects/8/7/c/dataset_87c8327f-ab87-4484-afec-0aad642be28f.dat' > '/galaxy/server/database/objects/0/9/b/dataset_09b01d20-865f-4e36-a5e1-721999347d39.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "582fed4802e3f2cd", "src": "hda", "uuid": "87c8327f-ab87-4484-afec-0aad642be28f"}}, "outputs": {"output": {"id": "f8314ceccf91d540", "src": "hda", "uuid": "09b01d20-865f-4e36-a5e1-721999347d39"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": null, "job_stderr": null, "stderr": "", "stdout": "", "job_messages": null, "dependencies": [], "user_email": "tests@fake.org", "job_metrics": []}, "output_problems": ["Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/poretools_winner/poretools_winner/0.6.1a1.0, exit_code: None, stderr: .", "Job in error state.. tool_id: toolshed.g2.bx.psu.edu/repos/iuc/poretools_winner/poretools_winner/0.6.1a1.0, exit_code: None, stderr: ."], "status": "failure"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_winner/poretools_winner/0.6.1a1.0-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_winner/poretools_winner", "tool_version": "0.6.1a1.0", "test_index": 3, "time_seconds": 32.13422751426697, "inputs": {"input": {"src": "hda", "id": "582fed4802e3f2cd"}}, "job": {"model_class": "Job", "id": "5c98aec7e6a27153", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T06:18:35.677567", "create_time": "2023-05-24T06:18:22.077225", "galaxy_version": "23.0", "command_version": "", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/poretools_winner/poretools_winner/0.6.1a1.0", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-wnqgt", "command_line": "poretools winner --type all '/galaxy/server/database/objects/8/7/c/dataset_87c8327f-ab87-4484-afec-0aad642be28f.dat' > '/galaxy/server/database/objects/6/c/a/dataset_6cac600f-230e-4f30-b3be-e7dcea551a32.dat'", "traceback": null, "params": {"__input_ext": "\"fast5.tar\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "type": "\"all\""}, "inputs": {"input": {"id": "582fed4802e3f2cd", "src": "hda", "uuid": "87c8327f-ab87-4484-afec-0aad642be28f"}}, "outputs": {"output": {"id": "5c98aec7e6a27153", "src": "hda", "uuid": "6cac600f-230e-4f30-b3be-e7dcea551a32"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 06:18:25", "plugin": "core", "name": "end_epoch", "raw_value": "1684909105.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 06:18:24", "plugin": "core", "name": "start_epoch", "raw_value": "1684909104.0000000"}, {"title": "Memory Allocated (MB)", "value": "12240", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "12240.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie", "tool_version": "2.1.1", "test_index": 0, "time_seconds": 33.55123209953308, "inputs": {"input_bam": {"src": "hda", "id": "3535bdf10d4be66d"}}, "job": {"model_class": "Job", "id": "591c05a0384b917d", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:21:04.628957", "create_time": "2023-05-24T07:20:49.879147", "galaxy_version": "23.0", "command_version": "2.1.1", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-5kfnd", "command_line": "mkdir -p ./special_de_output/sample1/ &&    stringtie '/galaxy/server/database/objects/d/b/6/dataset_db6f1ad9-e149-4260-b61b-087ab49eb165.dat'    -o '/galaxy/server/database/objects/8/4/b/dataset_84b10468-953c-47c8-9700-a1fa8f90c146.dat' -p \"${GALAXY_SLOTS:-1}\"     -f '0.15' -m '200' -a '10' -j '1' -c '2' -g '50' -M '0.95'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"abundance_estimation\": false, \"bdist\": \"50\", \"bundle_fraction\": \"0.95\", \"disable_trimming\": false, \"fraction\": \"0.15\", \"min_anchor_cov\": \"1\", \"min_anchor_len\": \"10\", \"min_bundle_cov\": \"2\", \"min_tlen\": \"200\", \"multi_mapping\": false, \"name_prefix\": null, \"omit_sequences\": \"\"}", "guide": "{\"__current_case__\": 0, \"use_guide\": \"no\"}", "rna_strandness": "\"\"", "long_reads": "false"}, "inputs": {"input_bam": {"id": "3535bdf10d4be66d", "src": "hda", "uuid": "db6f1ad9-e149-4260-b61b-087ab49eb165"}}, "outputs": {"output_gtf": {"id": "836b51bfe52a58fb", "src": "hda", "uuid": "84b10468-953c-47c8-9700-a1fa8f90c146"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:20:52", "plugin": "core", "name": "end_epoch", "raw_value": "1684912852.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:20:52", "plugin": "core", "name": "start_epoch", "raw_value": "1684912852.0000000"}, {"title": "Memory Allocated (MB)", "value": "26843", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "26843.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie", "tool_version": "2.1.1", "test_index": 1, "time_seconds": 36.07329487800598, "inputs": {"input_bam": {"src": "hda", "id": "3535bdf10d4be66d"}, "adv|fraction": "0.17"}, "job": {"model_class": "Job", "id": "9314e9661afa099e", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:21:06.498351", "create_time": "2023-05-24T07:20:50.757490", "galaxy_version": "23.0", "command_version": "2.1.1", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-24tcl", "command_line": "mkdir -p ./special_de_output/sample1/ &&    stringtie '/galaxy/server/database/objects/d/b/6/dataset_db6f1ad9-e149-4260-b61b-087ab49eb165.dat'    -o '/galaxy/server/database/objects/b/7/5/dataset_b752c5fe-f1a4-4e04-a7a8-461be3d8b949.dat' -p \"${GALAXY_SLOTS:-1}\"     -f '0.17' -m '200' -a '10' -j '1' -c '2' -g '50' -M '0.95'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"abundance_estimation\": false, \"bdist\": \"50\", \"bundle_fraction\": \"0.95\", \"disable_trimming\": false, \"fraction\": \"0.17\", \"min_anchor_cov\": \"1\", \"min_anchor_len\": \"10\", \"min_bundle_cov\": \"2\", \"min_tlen\": \"200\", \"multi_mapping\": false, \"name_prefix\": null, \"omit_sequences\": \"\"}", "guide": "{\"__current_case__\": 0, \"use_guide\": \"no\"}", "rna_strandness": "\"\"", "long_reads": "false"}, "inputs": {"input_bam": {"id": "3535bdf10d4be66d", "src": "hda", "uuid": "db6f1ad9-e149-4260-b61b-087ab49eb165"}}, "outputs": {"output_gtf": {"id": "0cbd7d7493b1518d", "src": "hda", "uuid": "b752c5fe-f1a4-4e04-a7a8-461be3d8b949"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:20:54", "plugin": "core", "name": "end_epoch", "raw_value": "1684912854.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:20:54", "plugin": "core", "name": "start_epoch", "raw_value": "1684912854.0000000"}, {"title": "Memory Allocated (MB)", "value": "26843", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "26843.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie", "tool_version": "2.1.1", "test_index": 2, "time_seconds": 46.433682441711426, "inputs": {"input_bam": {"src": "hda", "id": "56d9673f11dc7c68"}, "guide|guide_source|ref_hist": {"src": "hda", "id": "35ac59637895a320"}, "guide|guide_source|guide_gff_select": "history", "guide|use_guide": "yes"}, "job": {"model_class": "Job", "id": "a7f3557e5645b47e", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:21:51.291533", "create_time": "2023-05-24T07:21:28.766973", "galaxy_version": "23.0", "command_version": "2.1.1", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-mm5ph", "command_line": "mkdir -p ./special_de_output/sample1/ &&   ln -s '/galaxy/server/database/objects/6/7/8/dataset_678a4946-6ba9-4914-a050-7ea657bfd1f7.dat' guide.gff &&  stringtie '/galaxy/server/database/objects/e/4/8/dataset_e488d14b-20e9-45c9-852a-7519983cc1da.dat'    -o '/galaxy/server/database/objects/f/8/3/dataset_f833bcd3-dd1e-4ca8-a073-98d01dfbd95f.dat' -p \"${GALAXY_SLOTS:-1}\"    -G guide.gff  -b ./special_de_output/sample1/  -f '0.15' -m '200' -a '10' -j '1' -c '2' -g '50' -M '0.95'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"abundance_estimation\": false, \"bdist\": \"50\", \"bundle_fraction\": \"0.95\", \"disable_trimming\": false, \"fraction\": \"0.15\", \"min_anchor_cov\": \"1\", \"min_anchor_len\": \"10\", \"min_bundle_cov\": \"2\", \"min_tlen\": \"200\", \"multi_mapping\": false, \"name_prefix\": null, \"omit_sequences\": \"\"}", "guide": "{\"__current_case__\": 1, \"coverage_file\": false, \"guide_source\": {\"__current_case__\": 1, \"guide_gff_select\": \"history\", \"ref_hist\": {\"values\": [{\"id\": 656, \"src\": \"hda\"}]}}, \"input_estimation\": false, \"special_outputs\": {\"__current_case__\": 2, \"special_outputs_select\": \"no\"}, \"use_guide\": \"yes\"}", "rna_strandness": "\"\"", "long_reads": "false"}, "inputs": {"guide|ref_hist": {"id": "35ac59637895a320", "src": "hda", "uuid": "678a4946-6ba9-4914-a050-7ea657bfd1f7"}, "input_bam": {"id": "56d9673f11dc7c68", "src": "hda", "uuid": "e488d14b-20e9-45c9-852a-7519983cc1da"}}, "outputs": {"output_gtf": {"id": "aa00a0fcb029ec84", "src": "hda", "uuid": "f833bcd3-dd1e-4ca8-a073-98d01dfbd95f"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:21:41", "plugin": "core", "name": "end_epoch", "raw_value": "1684912901.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:21:41", "plugin": "core", "name": "start_epoch", "raw_value": "1684912901.0000000"}, {"title": "Memory Allocated (MB)", "value": "26843", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "26843.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1-3", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie", "tool_version": "2.1.1", "test_index": 3, "time_seconds": 13.29735517501831, "execution_problem": "Input staging problem: Job in error state.. tool_id: upload1, exit_code: None, stderr: .", "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1-4", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie", "tool_version": "2.1.1", "test_index": 4, "time_seconds": 37.547587394714355, "inputs": {"input_bam": {"src": "hda", "id": "56d9673f11dc7c68"}, "guide|guide_source|ref_hist": {"src": "hda", "id": "35ac59637895a320"}, "guide|guide_source|guide_gff_select": "history", "guide|special_outputs|special_outputs_select": "ballgown", "guide|coverage_file": true, "guide|use_guide": "yes"}, "job": {"model_class": "Job", "id": "9ecc40cff0690c2c", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:21:55.565421", "create_time": "2023-05-24T07:21:40.427516", "galaxy_version": "23.0", "command_version": "2.1.1", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-rjwbx", "command_line": "mkdir -p ./special_de_output/sample1/ &&   ln -s '/galaxy/server/database/objects/6/7/8/dataset_678a4946-6ba9-4914-a050-7ea657bfd1f7.dat' guide.gff &&  stringtie '/galaxy/server/database/objects/e/4/8/dataset_e488d14b-20e9-45c9-852a-7519983cc1da.dat'    -o '/galaxy/server/database/objects/3/9/0/dataset_39026005-27e2-49b8-9602-84ce0f6976ad.dat' -p \"${GALAXY_SLOTS:-1}\"    -G guide.gff -C '/galaxy/server/database/objects/c/c/d/dataset_ccd015e9-4479-41cf-83f5-a5bfd46ddba4.dat'  -b ./special_de_output/sample1/  -f '0.15' -m '200' -a '10' -j '1' -c '2' -g '50' -M '0.95'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"abundance_estimation\": false, \"bdist\": \"50\", \"bundle_fraction\": \"0.95\", \"disable_trimming\": false, \"fraction\": \"0.15\", \"min_anchor_cov\": \"1\", \"min_anchor_len\": \"10\", \"min_bundle_cov\": \"2\", \"min_tlen\": \"200\", \"multi_mapping\": false, \"name_prefix\": null, \"omit_sequences\": \"\"}", "guide": "{\"__current_case__\": 1, \"coverage_file\": true, \"guide_source\": {\"__current_case__\": 1, \"guide_gff_select\": \"history\", \"ref_hist\": {\"values\": [{\"id\": 656, \"src\": \"hda\"}]}}, \"input_estimation\": false, \"special_outputs\": {\"__current_case__\": 0, \"special_outputs_select\": \"ballgown\"}, \"use_guide\": \"yes\"}", "rna_strandness": "\"\"", "long_reads": "false"}, "inputs": {"guide|ref_hist": {"id": "35ac59637895a320", "src": "hda", "uuid": "678a4946-6ba9-4914-a050-7ea657bfd1f7"}, "input_bam": {"id": "56d9673f11dc7c68", "src": "hda", "uuid": "e488d14b-20e9-45c9-852a-7519983cc1da"}}, "outputs": {"intron_transcript_mapping": {"id": "71f77c6f8a257f05", "src": "hda", "uuid": "bd434ae8-e564-45b0-9d6d-bce90a2b67e4"}, "exon_transcript_mapping": {"id": "9ae30f269f105568", "src": "hda", "uuid": "cf9a98a3-43c9-4284-9e69-386fc84f1bbb"}, "transcript_expression": {"id": "500674a585258bc5", "src": "hda", "uuid": "75b2e7e3-6e96-4316-9b03-a248c2612d39"}, "intron_expression": {"id": "b575ca4806a3261a", "src": "hda", "uuid": "34022576-6abc-417b-84fa-83217d45303f"}, "exon_expression": {"id": "9db8e9b6ae3c05e2", "src": "hda", "uuid": "9d8b36d7-0bff-4d68-8b60-ac9cdc63a549"}, "coverage": {"id": "199d7f0dc093c343", "src": "hda", "uuid": "ccd015e9-4479-41cf-83f5-a5bfd46ddba4"}, "output_gtf": {"id": "624aa8bd1ee5b74c", "src": "hda", "uuid": "39026005-27e2-49b8-9602-84ce0f6976ad"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:21:45", "plugin": "core", "name": "end_epoch", "raw_value": "1684912905.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:21:44", "plugin": "core", "name": "start_epoch", "raw_value": "1684912904.0000000"}, {"title": "Memory Allocated (MB)", "value": "26843", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "26843.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1-5", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie", "tool_version": "2.1.1", "test_index": 5, "time_seconds": 40.75797462463379, "inputs": {"input_bam": {"src": "hda", "id": "87877a984069f7aa"}, "guide|guide_source|ref_hist": {"src": "hda", "id": "438f91ac77c52eb8"}, "guide|guide_source|guide_gff_select": "history", "guide|input_estimation": true, "guide|special_outputs|clustering": true, "guide|special_outputs|special_outputs_select": "deseq2", "guide|coverage_file": true, "guide|use_guide": "yes"}, "job": {"model_class": "Job", "id": "9ebc2ca56707fd20", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:22:29.530207", "create_time": "2023-05-24T07:22:10.603170", "galaxy_version": "23.0", "command_version": "2.1.1", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-mxphm", "command_line": "mkdir -p ./special_de_output/sample1/ &&   ln -s '/galaxy/server/database/objects/7/6/3/dataset_763eab06-7fc5-4d92-bdc7-fdf45b46d278.dat' guide.gff &&  stringtie '/galaxy/server/database/objects/e/d/7/dataset_ed7c4154-6f4f-4463-9e97-2e989b583b7b.dat'    -o '/galaxy/server/database/objects/7/4/7/dataset_747b4e36-3669-4c81-97ca-edf849454808.dat' -p \"${GALAXY_SLOTS:-1}\"    -G guide.gff -C '/galaxy/server/database/objects/b/f/1/dataset_bf12a6f8-45f7-4ea6-9498-4852933826d4.dat' -e -b ./special_de_output/sample1/  -f '0.15' -m '200' -a '10' -j '1' -c '2' -g '50' -M '0.95'    && ln -s '/galaxy/server/database/objects/7/4/7/dataset_747b4e36-3669-4c81-97ca-edf849454808.dat' ./special_de_output/sample1/output.gtf && TAB=$(printf '\\t') && CR=$(printf '\\r') && prepDE.py -i ./special_de_output/ -g gene_counts.csv -t transcript_counts.csv -l 75 -c --legend '/galaxy/server/database/objects/d/a/b/dataset_dab25d90-ce99-4949-b374-b08a458d96ef.dat' > /dev/null && sed -i.bak -e \"s/,/${TAB}/g\" -e \"s/${CR}//g\" '/galaxy/server/database/objects/d/a/b/dataset_dab25d90-ce99-4949-b374-b08a458d96ef.dat'  && sed -i.bak -e \"s/,/${TAB}/g\" -e \"s/${CR}//g\" gene_counts.csv transcript_counts.csv && head -n 1 gene_counts.csv | sed -e 's/sample1/stringtie_in1_bam/' > '/galaxy/server/database/objects/f/4/b/dataset_f4b23205-bfcd-47f8-a6f2-e1f2a82154ba.dat' && head -n 1 transcript_counts.csv | sed -e 's/sample1/stringtie_in1_bam/' > '/galaxy/server/database/objects/d/e/9/dataset_de9d663e-edc1-45f5-b5f7-9b748f2cdddb.dat' && tail -n +2 gene_counts.csv | sort -t\"${TAB}\" -k1,1 >> '/galaxy/server/database/objects/f/4/b/dataset_f4b23205-bfcd-47f8-a6f2-e1f2a82154ba.dat' && tail -n +2 transcript_counts.csv | sort -t\"${TAB}\" -k1,1 >> '/galaxy/server/database/objects/d/e/9/dataset_de9d663e-edc1-45f5-b5f7-9b748f2cdddb.dat'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"abundance_estimation\": false, \"bdist\": \"50\", \"bundle_fraction\": \"0.95\", \"disable_trimming\": false, \"fraction\": \"0.15\", \"min_anchor_cov\": \"1\", \"min_anchor_len\": \"10\", \"min_bundle_cov\": \"2\", \"min_tlen\": \"200\", \"multi_mapping\": false, \"name_prefix\": null, \"omit_sequences\": \"\"}", "guide": "{\"__current_case__\": 1, \"coverage_file\": true, \"guide_source\": {\"__current_case__\": 1, \"guide_gff_select\": \"history\", \"ref_hist\": {\"values\": [{\"id\": 668, \"src\": \"hda\"}]}}, \"input_estimation\": true, \"special_outputs\": {\"__current_case__\": 1, \"clustering\": true, \"key\": null, \"read_length\": \"75\", \"special_outputs_select\": \"deseq2\", \"string\": null}, \"use_guide\": \"yes\"}", "rna_strandness": "\"\"", "long_reads": "false"}, "inputs": {"guide|ref_hist": {"id": "438f91ac77c52eb8", "src": "hda", "uuid": "763eab06-7fc5-4d92-bdc7-fdf45b46d278"}, "input_bam": {"id": "87877a984069f7aa", "src": "hda", "uuid": "ed7c4154-6f4f-4463-9e97-2e989b583b7b"}}, "outputs": {"legend": {"id": "f766eb7a78a5c9db", "src": "hda", "uuid": "dab25d90-ce99-4949-b374-b08a458d96ef"}, "transcript_counts": {"id": "f16f8cc0318c9343", "src": "hda", "uuid": "de9d663e-edc1-45f5-b5f7-9b748f2cdddb"}, "gene_counts": {"id": "5adf477ff0de5a9b", "src": "hda", "uuid": "f4b23205-bfcd-47f8-a6f2-e1f2a82154ba"}, "coverage": {"id": "503022fa09a4595a", "src": "hda", "uuid": "bf12a6f8-45f7-4ea6-9498-4852933826d4"}, "output_gtf": {"id": "08cf802b511bf4e0", "src": "hda", "uuid": "747b4e36-3669-4c81-97ca-edf849454808"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:22:19", "plugin": "core", "name": "end_epoch", "raw_value": "1684912939.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:22:19", "plugin": "core", "name": "start_epoch", "raw_value": "1684912939.0000000"}, {"title": "Memory Allocated (MB)", "value": "26843", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "26843.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1-6", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie", "tool_version": "2.1.1", "test_index": 6, "time_seconds": 31.72475790977478, "inputs": {"input_bam": {"src": "hda", "id": "87877a984069f7aa"}, "guide|guide_source|ref_hist": {"src": "hda", "id": "438f91ac77c52eb8"}, "guide|guide_source|guide_gff_select": "history", "guide|use_guide": "yes", "adv|abundance_estimation": true, "adv|fraction": "0.17"}, "job": {"model_class": "Job", "id": "f4358df6de805565", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:22:30.417467", "create_time": "2023-05-24T07:22:18.251836", "galaxy_version": "23.0", "command_version": "2.1.1", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-txsjn", "command_line": "mkdir -p ./special_de_output/sample1/ &&   ln -s '/galaxy/server/database/objects/7/6/3/dataset_763eab06-7fc5-4d92-bdc7-fdf45b46d278.dat' guide.gff &&  stringtie '/galaxy/server/database/objects/e/d/7/dataset_ed7c4154-6f4f-4463-9e97-2e989b583b7b.dat'    -o '/galaxy/server/database/objects/1/e/e/dataset_1eee32aa-4324-46fb-887f-d47cac501d83.dat' -p \"${GALAXY_SLOTS:-1}\"    -G guide.gff  -b ./special_de_output/sample1/  -f '0.17' -m '200' -a '10' -j '1' -c '2' -g '50' -M '0.95'   -A '/galaxy/server/database/objects/b/4/2/dataset_b42c2f92-e3f0-402c-b890-1b612f44ef41.dat'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "adv": "{\"abundance_estimation\": true, \"bdist\": \"50\", \"bundle_fraction\": \"0.95\", \"disable_trimming\": false, \"fraction\": \"0.17\", \"min_anchor_cov\": \"1\", \"min_anchor_len\": \"10\", \"min_bundle_cov\": \"2\", \"min_tlen\": \"200\", \"multi_mapping\": false, \"name_prefix\": null, \"omit_sequences\": \"\"}", "guide": "{\"__current_case__\": 1, \"coverage_file\": false, \"guide_source\": {\"__current_case__\": 1, \"guide_gff_select\": \"history\", \"ref_hist\": {\"values\": [{\"id\": 668, \"src\": \"hda\"}]}}, \"input_estimation\": false, \"special_outputs\": {\"__current_case__\": 2, \"special_outputs_select\": \"no\"}, \"use_guide\": \"yes\"}", "rna_strandness": "\"\"", "long_reads": "false"}, "inputs": {"guide|ref_hist": {"id": "438f91ac77c52eb8", "src": "hda", "uuid": "763eab06-7fc5-4d92-bdc7-fdf45b46d278"}, "input_bam": {"id": "87877a984069f7aa", "src": "hda", "uuid": "ed7c4154-6f4f-4463-9e97-2e989b583b7b"}}, "outputs": {"gene_abundance_estimation": {"id": "c5a0cb687c1034ef", "src": "hda", "uuid": "b42c2f92-e3f0-402c-b890-1b612f44ef41"}, "output_gtf": {"id": "b876932146c10b2b", "src": "hda", "uuid": "1eee32aa-4324-46fb-887f-d47cac501d83"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:22:20", "plugin": "core", "name": "end_epoch", "raw_value": "1684912940.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:22:20", "plugin": "core", "name": "start_epoch", "raw_value": "1684912940.0000000"}, {"title": "Memory Allocated (MB)", "value": "26843", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "26843.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1-7", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie", "tool_version": "2.1.1", "test_index": 7, "time_seconds": 38.156015396118164, "inputs": {"input_bam": {"src": "hda", "id": "62ed7e6a030a54ac"}, "guide|guide_source|ref_hist": {"src": "hda", "id": "baf065f3f629f7a5"}, "guide|guide_source|guide_gff_select": "history", "guide|use_guide": "yes", "adv|fraction": "0.15"}, "job": {"model_class": "Job", "id": "7d41e62fecd3c16d", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:23:09.185922", "create_time": "2023-05-24T07:22:53.449269", "galaxy_version": "23.0", "command_version": "2.1.1", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-b6q6d", "command_line": "mkdir -p ./special_de_output/sample1/ &&   ln -s '/galaxy/server/database/objects/1/1/7/dataset_11774973-e12d-4243-8c68-bf3cf172a029.dat' guide.gff &&  stringtie '/galaxy/server/database/objects/1/0/8/dataset_108785b2-5d80-4b46-aa2e-8c2bedc69ca4.dat'    -o '/galaxy/server/database/objects/8/c/4/dataset_8c4dc782-e5b0-41bd-910d-7dc4439b1798.dat' -p \"${GALAXY_SLOTS:-1}\"    -G guide.gff  -b ./special_de_output/sample1/  -f '0.15' -m '200' -a '10' -j '1' -c '2' -g '50' -M '0.95'", "traceback": null, "params": {"__input_ext": "\"bam\"", "dbkey": "\"hg38\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/hg38.len\"", "adv": "{\"abundance_estimation\": false, \"bdist\": \"50\", \"bundle_fraction\": \"0.95\", \"disable_trimming\": false, \"fraction\": \"0.15\", \"min_anchor_cov\": \"1\", \"min_anchor_len\": \"10\", \"min_bundle_cov\": \"2\", \"min_tlen\": \"200\", \"multi_mapping\": false, \"name_prefix\": null, \"omit_sequences\": \"\"}", "guide": "{\"__current_case__\": 1, \"coverage_file\": false, \"guide_source\": {\"__current_case__\": 1, \"guide_gff_select\": \"history\", \"ref_hist\": {\"values\": [{\"id\": 677, \"src\": \"hda\"}]}}, \"input_estimation\": false, \"special_outputs\": {\"__current_case__\": 2, \"special_outputs_select\": \"no\"}, \"use_guide\": \"yes\"}", "rna_strandness": "\"\"", "long_reads": "false"}, "inputs": {"guide|ref_hist": {"id": "baf065f3f629f7a5", "src": "hda", "uuid": "11774973-e12d-4243-8c68-bf3cf172a029"}, "input_bam": {"id": "62ed7e6a030a54ac", "src": "hda", "uuid": "108785b2-5d80-4b46-aa2e-8c2bedc69ca4"}}, "outputs": {"output_gtf": {"id": "434e709953b64392", "src": "hda", "uuid": "8c4dc782-e5b0-41bd-910d-7dc4439b1798"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:22:56", "plugin": "core", "name": "end_epoch", "raw_value": "1684912976.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:22:55", "plugin": "core", "name": "start_epoch", "raw_value": "1684912975.0000000"}, {"title": "Memory Allocated (MB)", "value": "26843", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "26843.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie/2.1.1-8", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie", "tool_version": "2.1.1", "test_index": 8, "time_seconds": 20.96785855293274, "inputs": {"input_bam": {"src": "hda", "id": "62ed7e6a030a54ac"}, "guide|guide_source|guide_gff_select": "cached", "guide|use_guide": "yes", "adv|fraction": "0.15"}, "execution_problem": "parameter 'ref_builtin': an invalid option (None) was selected, please verify", "dynamic_param_error": true, "status": "error"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie_merge/2.1.1-0", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie_merge", "tool_version": "2.1.1", "test_index": 0, "time_seconds": 64.19885420799255, "inputs": {"input_gtf": [{"src": "hda", "id": "dd7f8de908eb076b"}, {"src": "hda", "id": "873393564d5fc38f"}, {"src": "hda", "id": "b8c86592cd3c6ddd"}, {"src": "hda", "id": "5c1a97e4ce624680"}], "guide_gff": {"src": "hda", "id": "d0aec222c8ffaa57"}}, "job": {"model_class": "Job", "id": "a5407f1cf6034dcc", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:19:58.581683", "create_time": "2023-05-24T07:19:32.478595", "galaxy_version": "23.0", "command_version": "2.1.1", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie_merge/2.1.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-q8v2b", "command_line": "stringtie --merge -p ${GALAXY_SLOTS:-1} -G '/galaxy/server/database/objects/0/c/b/dataset_0cb8afaf-c6dc-4d90-a612-b807b28e8774.dat' -m 50 -c 0 -F 1.0 -T 1.0 -f 0.01 -g 250  -o '/galaxy/server/database/objects/9/e/5/dataset_9e5e3106-88ef-480c-b4cb-248b5caaffdc.dat' '/galaxy/server/database/objects/b/f/0/dataset_bf03c949-5b6b-40a8-84f7-8ad65a44ee15.dat' '/galaxy/server/database/objects/9/c/d/dataset_9cd6e699-9fca-4b4f-9ee5-ba5e305b27a4.dat' '/galaxy/server/database/objects/c/4/8/dataset_c480728c-8988-4e7b-8efc-cdc89b47cd29.dat' '/galaxy/server/database/objects/1/3/1/dataset_1313e92a-5123-4ecb-97b9-5d0076aeb3db.dat'", "traceback": null, "params": {"__input_ext": "\"gtf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "keep_introns": "false", "gap_len": "\"250\"", "min_iso": "\"0.01\"", "min_tpm": "\"1.0\"", "min_fpkm": "\"1.0\"", "min_cov": "\"0\"", "min_len": "\"50\""}, "inputs": {"guide_gff": {"id": "d0aec222c8ffaa57", "src": "hda", "uuid": "0cb8afaf-c6dc-4d90-a612-b807b28e8774"}, "input_gtf4": {"id": "5c1a97e4ce624680", "src": "hda", "uuid": "1313e92a-5123-4ecb-97b9-5d0076aeb3db"}, "input_gtf3": {"id": "b8c86592cd3c6ddd", "src": "hda", "uuid": "c480728c-8988-4e7b-8efc-cdc89b47cd29"}, "input_gtf2": {"id": "873393564d5fc38f", "src": "hda", "uuid": "9cd6e699-9fca-4b4f-9ee5-ba5e305b27a4"}, "input_gtf1": {"id": "dd7f8de908eb076b", "src": "hda", "uuid": "bf03c949-5b6b-40a8-84f7-8ad65a44ee15"}, "input_gtf": {"id": "dd7f8de908eb076b", "src": "hda", "uuid": "bf03c949-5b6b-40a8-84f7-8ad65a44ee15"}}, "outputs": {"out_gtf": {"id": "13a82a2e705a8518", "src": "hda", "uuid": "9e5e3106-88ef-480c-b4cb-248b5caaffdc"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:19:41", "plugin": "core", "name": "end_epoch", "raw_value": "1684912781.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:19:41", "plugin": "core", "name": "start_epoch", "raw_value": "1684912781.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie_merge/2.1.1-1", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie_merge", "tool_version": "2.1.1", "test_index": 1, "time_seconds": 55.45683670043945, "inputs": {"input_gtf": [{"src": "hda", "id": "dec7f323257fd1b8"}, {"src": "hda", "id": "da5f2575f04421a3"}], "guide_gff": {"src": "hda", "id": "df33163c147c43a3"}}, "job": {"model_class": "Job", "id": "d72f5ec6b6291cc4", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:20:30.984395", "create_time": "2023-05-24T07:20:01.353725", "galaxy_version": "23.0", "command_version": "2.1.1", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie_merge/2.1.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-2bfgl", "command_line": "stringtie --merge -p ${GALAXY_SLOTS:-1} -G '/galaxy/server/database/objects/2/6/e/dataset_26e60861-9d02-44f6-b5ca-777a089a19e2.dat' -m 50 -c 0 -F 1.0 -T 1.0 -f 0.01 -g 250  -o '/galaxy/server/database/objects/0/6/4/dataset_0643b51d-be28-4f68-a8e1-6f7fcf26b431.dat' '/galaxy/server/database/objects/9/c/0/dataset_9c073848-02da-4dbe-b0a4-2e16742a4c3d.dat' '/galaxy/server/database/objects/c/d/2/dataset_cd299436-c37b-477f-822e-603ad64cfc96.dat'", "traceback": null, "params": {"__input_ext": "\"gtf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "keep_introns": "false", "gap_len": "\"250\"", "min_iso": "\"0.01\"", "min_tpm": "\"1.0\"", "min_fpkm": "\"1.0\"", "min_cov": "\"0\"", "min_len": "\"50\""}, "inputs": {"guide_gff": {"id": "df33163c147c43a3", "src": "hda", "uuid": "26e60861-9d02-44f6-b5ca-777a089a19e2"}, "input_gtf2": {"id": "da5f2575f04421a3", "src": "hda", "uuid": "cd299436-c37b-477f-822e-603ad64cfc96"}, "input_gtf1": {"id": "dec7f323257fd1b8", "src": "hda", "uuid": "9c073848-02da-4dbe-b0a4-2e16742a4c3d"}, "input_gtf": {"id": "dec7f323257fd1b8", "src": "hda", "uuid": "9c073848-02da-4dbe-b0a4-2e16742a4c3d"}}, "outputs": {"out_gtf": {"id": "688e66c612199a5d", "src": "hda", "uuid": "0643b51d-be28-4f68-a8e1-6f7fcf26b431"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "1 second", "plugin": "core", "name": "runtime_seconds", "raw_value": "1.0000000"}, {"title": "Job End Time", "value": "2023-05-24 07:20:20", "plugin": "core", "name": "end_epoch", "raw_value": "1684912820.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:20:19", "plugin": "core", "name": "start_epoch", "raw_value": "1684912819.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}, {"id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie_merge/2.1.1-2", "has_data": true, "data": {"tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie_merge", "tool_version": "2.1.1", "test_index": 2, "time_seconds": 33.088008403778076, "inputs": {"input_gtf": [{"src": "hda", "id": "dec7f323257fd1b8"}, {"src": "hda", "id": "da5f2575f04421a3"}]}, "job": {"model_class": "Job", "id": "a58b2a5c6504f64f", "state": "ok", "exit_code": 0, "update_time": "2023-05-24T07:20:31.977815", "create_time": "2023-05-24T07:20:18.712330", "galaxy_version": "23.0", "command_version": "2.1.1", "tool_id": "toolshed.g2.bx.psu.edu/repos/iuc/stringtie/stringtie_merge/2.1.1", "history_id": "617a261f7d6a2b3a", "external_id": "gxy-cd99s", "command_line": "stringtie --merge -p ${GALAXY_SLOTS:-1} -m 50 -c 0 -F 1.0 -T 1.0 -f 0.01 -g 250  -o '/galaxy/server/database/objects/a/7/9/dataset_a7904941-1554-4cac-af4c-03d4899181ff.dat' '/galaxy/server/database/objects/9/c/0/dataset_9c073848-02da-4dbe-b0a4-2e16742a4c3d.dat' '/galaxy/server/database/objects/c/d/2/dataset_cd299436-c37b-477f-822e-603ad64cfc96.dat'", "traceback": null, "params": {"__input_ext": "\"gtf\"", "dbkey": "\"?\"", "chromInfo": "\"/cvmfs/data.galaxyproject.org/managed/len/ucsc/?.len\"", "keep_introns": "false", "gap_len": "\"250\"", "min_iso": "\"0.01\"", "min_tpm": "\"1.0\"", "min_fpkm": "\"1.0\"", "min_cov": "\"0\"", "min_len": "\"50\"", "guide_gff": null}, "inputs": {"input_gtf2": {"id": "da5f2575f04421a3", "src": "hda", "uuid": "cd299436-c37b-477f-822e-603ad64cfc96"}, "input_gtf1": {"id": "dec7f323257fd1b8", "src": "hda", "uuid": "9c073848-02da-4dbe-b0a4-2e16742a4c3d"}, "input_gtf": {"id": "dec7f323257fd1b8", "src": "hda", "uuid": "9c073848-02da-4dbe-b0a4-2e16742a4c3d"}}, "outputs": {"out_gtf": {"id": "99107e0c2d903c7f", "src": "hda", "uuid": "a7904941-1554-4cac-af4c-03d4899181ff"}}, "output_collections": {}, "tool_stdout": "", "tool_stderr": "", "job_stdout": "", "job_stderr": "", "stderr": "", "stdout": "", "job_messages": [], "dependencies": [], "user_email": "tests@fake.org", "job_metrics": [{"title": "Job Runtime (Wall Clock)", "value": "0 seconds", "plugin": "core", "name": "runtime_seconds", "raw_value": "0E-7"}, {"title": "Job End Time", "value": "2023-05-24 07:20:21", "plugin": "core", "name": "end_epoch", "raw_value": "1684912821.0000000"}, {"title": "Job Start Time", "value": "2023-05-24 07:20:21", "plugin": "core", "name": "start_epoch", "raw_value": "1684912821.0000000"}, {"title": "Memory Allocated (MB)", "value": "4080", "plugin": "core", "name": "galaxy_memory_mb", "raw_value": "4080.0000000"}, {"title": "Cores Allocated", "value": "1", "plugin": "core", "name": "galaxy_slots", "raw_value": "1.0000000"}]}, "status": "success"}}]}